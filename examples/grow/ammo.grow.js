
// This is ammo.js, a port of Bullet Physics to JavaScript. zlib licensed.
var Ammo = (function() {
  var Module = this;

var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function";
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
 if (!Module["print"]) Module["print"] = function print(x) {
  process["stdout"].write(x + "\n");
 };
 if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
  process["stderr"].write(x + "\n");
 };
 var nodeFS = require("fs");
 var nodePath = require("path");
 Module["read"] = function read(filename, binary) {
  filename = nodePath["normalize"](filename);
  var ret = nodeFS["readFileSync"](filename);
  if (!ret && filename != nodePath["resolve"](filename)) {
   filename = path.join(__dirname, "..", "src", filename);
   ret = nodeFS["readFileSync"](filename);
  }
  if (ret && !binary) ret = ret.toString();
  return ret;
 };
 Module["readBinary"] = function readBinary(filename) {
  return Module["read"](filename, true);
 };
 Module["load"] = function load(f) {
  globalEval(read(f));
 };
 Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
 Module["arguments"] = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", (function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 }));
} else if (ENVIRONMENT_IS_SHELL) {
 if (!Module["print"]) Module["print"] = print;
 if (typeof printErr != "undefined") Module["printErr"] = printErr;
 if (typeof read != "undefined") {
  Module["read"] = read;
 } else {
  Module["read"] = function read() {
   throw "no read() available (jsc?)";
  };
 }
 Module["readBinary"] = function readBinary(f) {
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  var data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 this["Module"] = Module;
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function read(url) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof console !== "undefined") {
  if (!Module["print"]) Module["print"] = function print(x) {
   console.log(x);
  };
  if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
   console.log(x);
  };
 } else {
  var TRY_USE_DUMP = false;
  if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
   dump(x);
  }) : (function(x) {});
 }
 if (ENVIRONMENT_IS_WEB) {
  window["Module"] = Module;
 } else {
  Module["load"] = importScripts;
 }
} else {
 throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
 throw "NO_DYNAMIC_EXECUTION was set, cannot eval";
}
if (!Module["load"] && Module["read"]) {
 Module["load"] = function load(f) {
  globalEval(Module["read"](f));
 };
}
if (!Module["print"]) {
 Module["print"] = (function() {});
}
if (!Module["printErr"]) {
 Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
 Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
 Module["thisProgram"] = "./this.program";
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
var Runtime = {
 setTempRet0: (function(value) {
  tempRet0 = value;
 }),
 getTempRet0: (function() {
  return tempRet0;
 }),
 stackSave: (function() {
  return STACKTOP;
 }),
 stackRestore: (function(stackTop) {
  STACKTOP = stackTop;
 }),
 getNativeTypeSize: (function(type) {
  switch (type) {
  case "i1":
  case "i8":
   return 1;
  case "i16":
   return 2;
  case "i32":
   return 4;
  case "i64":
   return 8;
  case "float":
   return 4;
  case "double":
   return 8;
  default:
   {
    if (type[type.length - 1] === "*") {
     return Runtime.QUANTUM_SIZE;
    } else if (type[0] === "i") {
     var bits = parseInt(type.substr(1));
     assert(bits % 8 === 0);
     return bits / 8;
    } else {
     return 0;
    }
   }
  }
 }),
 getNativeFieldSize: (function(type) {
  return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
 }),
 STACK_ALIGN: 16,
 getAlignSize: (function(type, size, vararg) {
  if (!vararg && (type == "i64" || type == "double")) return 8;
  if (!type) return Math.min(size, 8);
  return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
 }),
 dynCall: (function(sig, ptr, args) {
  if (args && args.length) {
   if (!args.splice) args = Array.prototype.slice.call(args);
   args.splice(0, 0, ptr);
   return Module["dynCall_" + sig].apply(null, args);
  } else {
   return Module["dynCall_" + sig].call(null, ptr);
  }
 }),
 functionPointers: [],
 addFunction: (function(func) {
  for (var i = 0; i < Runtime.functionPointers.length; i++) {
   if (!Runtime.functionPointers[i]) {
    Runtime.functionPointers[i] = func;
    return 2 * (1 + i);
   }
  }
  throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
 }),
 removeFunction: (function(index) {
  Runtime.functionPointers[(index - 2) / 2] = null;
 }),
 getAsmConst: (function(code, numArgs) {
  if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
  var func = Runtime.asmConstCache[code];
  if (func) return func;
  var args = [];
  for (var i = 0; i < numArgs; i++) {
   args.push(String.fromCharCode(36) + i);
  }
  var source = Pointer_stringify(code);
  if (source[0] === '"') {
   if (source.indexOf('"', 1) === source.length - 1) {
    source = source.substr(1, source.length - 2);
   } else {
    abort("invalid EM_ASM input |" + source + "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)");
   }
  }
  abort("NO_DYNAMIC_EXECUTION was set, cannot eval, so EM_ASM is not functional");
  return Runtime.asmConstCache[code] = evalled;
 }),
 warnOnce: (function(text) {
  if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
  if (!Runtime.warnOnce.shown[text]) {
   Runtime.warnOnce.shown[text] = 1;
   Module.printErr(text);
  }
 }),
 funcWrappers: {},
 getFuncWrapper: (function(func, sig) {
  assert(sig);
  if (!Runtime.funcWrappers[sig]) {
   Runtime.funcWrappers[sig] = {};
  }
  var sigCache = Runtime.funcWrappers[sig];
  if (!sigCache[func]) {
   sigCache[func] = function dynCall_wrapper() {
    return Runtime.dynCall(sig, func, arguments);
   };
  }
  return sigCache[func];
 }),
 UTF8Processor: (function() {
  var buffer = [];
  var needed = 0;
  this.processCChar = (function(code) {
   code = code & 255;
   if (buffer.length == 0) {
    if ((code & 128) == 0) {
     return String.fromCharCode(code);
    }
    buffer.push(code);
    if ((code & 224) == 192) {
     needed = 1;
    } else if ((code & 240) == 224) {
     needed = 2;
    } else {
     needed = 3;
    }
    return "";
   }
   if (needed) {
    buffer.push(code);
    needed--;
    if (needed > 0) return "";
   }
   var c1 = buffer[0];
   var c2 = buffer[1];
   var c3 = buffer[2];
   var c4 = buffer[3];
   var ret;
   if (buffer.length == 2) {
    ret = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
   } else if (buffer.length == 3) {
    ret = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
   } else {
    var codePoint = (c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63;
    ret = String.fromCharCode(((codePoint - 65536) / 1024 | 0) + 55296, (codePoint - 65536) % 1024 + 56320);
   }
   buffer.length = 0;
   return ret;
  });
  this.processJSString = function processJSString(string) {
   string = unescape(encodeURIComponent(string));
   var ret = [];
   for (var i = 0; i < string.length; i++) {
    ret.push(string.charCodeAt(i));
   }
   return ret;
  };
 }),
 getCompilerSetting: (function(name) {
  throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
 }),
 stackAlloc: (function(size) {
  var ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 15 & -16;
  return ret;
 }),
 staticAlloc: (function(size) {
  var ret = STATICTOP;
  STATICTOP = STATICTOP + size | 0;
  STATICTOP = STATICTOP + 15 & -16;
  return ret;
 }),
 dynamicAlloc: (function(size) {
  var ret = DYNAMICTOP;
  DYNAMICTOP = DYNAMICTOP + size | 0;
  DYNAMICTOP = DYNAMICTOP + 15 & -16;
  if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();
  return ret;
 }),
 alignMemory: (function(size, quantum) {
  var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
  return ret;
 }),
 makeBigInt: (function(low, high, unsigned) {
  var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
  return ret;
 }),
 GLOBAL_BASE: 8,
 QUANTUM_SIZE: 4,
 __dummy__: 0
};
Module["Runtime"] = Runtime;
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
var globalScope = this;
function getCFunc(ident) {
 var func = Module["_" + ident];
 if (!func) {
  abort("NO_DYNAMIC_EXECUTION was set, cannot eval - ccall/cwrap are not functional");
 }
 assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
 return func;
}
var cwrap, ccall;
((function() {
 var stack = 0;
 var JSfuncs = {
  "stackSave": (function() {
   stack = Runtime.stackSave();
  }),
  "stackRestore": (function() {
   Runtime.stackRestore(stack);
  }),
  "arrayToC": (function(arr) {
   var ret = Runtime.stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }),
  "stringToC": (function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    ret = Runtime.stackAlloc((str.length << 2) + 1);
    writeStringToMemory(str, ret);
   }
   return ret;
  })
 };
 var toC = {
  "string": JSfuncs["stringToC"],
  "array": JSfuncs["arrayToC"]
 };
 ccall = function ccallFunc(ident, returnType, argTypes, args) {
  var func = getCFunc(ident);
  var cArgs = [];
  if (args) {
   for (var i = 0; i < args.length; i++) {
    var converter = toC[argTypes[i]];
    if (converter) {
     if (stack === 0) stack = Runtime.stackSave();
     cArgs[i] = converter(args[i]);
    } else {
     cArgs[i] = args[i];
    }
   }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === "string") ret = Pointer_stringify(ret);
  if (stack !== 0) JSfuncs["stackRestore"]();
  return ret;
 };
 var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
 function parseJSFunc(jsfunc) {
  var parsed = jsfunc.toString().match(sourceRegex).slice(1);
  return {
   arguments: parsed[0],
   body: parsed[1],
   returnValue: parsed[2]
  };
 }
 var JSsource = {};
 for (var fun in JSfuncs) {
  if (JSfuncs.hasOwnProperty(fun)) {
   JSsource[fun] = parseJSFunc(JSfuncs[fun]);
  }
 }
 cwrap = function cwrap(ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  var numericArgs = argTypes.every((function(type) {
   return type === "number";
  }));
  var numericRet = returnType !== "string";
  if (numericRet && numericArgs) {
   return cfunc;
  }
  var argNames = argTypes.map((function(x, i) {
   return "$" + i;
  }));
  var funcstr = "(function(" + argNames.join(",") + ") {";
  var nargs = argTypes.length;
  if (!numericArgs) {
   funcstr += JSsource["stackSave"].body + ";";
   for (var i = 0; i < nargs; i++) {
    var arg = argNames[i], type = argTypes[i];
    if (type === "number") continue;
    var convertCode = JSsource[type + "ToC"];
    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
    funcstr += convertCode.body + ";";
    funcstr += arg + "=" + convertCode.returnValue + ";";
   }
  }
  var cfuncname = parseJSFunc((function() {
   return cfunc;
  })).returnValue;
  funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
  if (!numericRet) {
   var strgfy = parseJSFunc((function() {
    return Pointer_stringify;
   })).returnValue;
   funcstr += "ret = " + strgfy + "(ret);";
  }
  if (!numericArgs) {
   funcstr += JSsource["stackRestore"].body + ";";
  }
  funcstr += "return ret})";
  abort("NO_DYNAMIC_EXECUTION was set, cannot eval - ccall is not functional");
 };
}))();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for setValue: " + type);
 }
 return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var ptr = ret, stop;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (; ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  if (typeof curr === "function") {
   curr = Runtime.getFunctionIndex(curr);
  }
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = Runtime.getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}
Module["allocate"] = allocate;
function Pointer_stringify(ptr, length) {
 var hasUtf = false;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  if (t >= 128) hasUtf = true; else if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (!hasUtf) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 var utf8 = new Runtime.UTF8Processor;
 for (i = 0; i < length; i++) {
  t = HEAPU8[ptr + i >> 0];
  ret += utf8.processCChar(t);
 }
 return ret;
}
Module["Pointer_stringify"] = Pointer_stringify;
function UTF16ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var codeUnit = HEAP16[ptr + i * 2 >> 1];
  if (codeUnit == 0) return str;
  ++i;
  str += String.fromCharCode(codeUnit);
 }
}
Module["UTF16ToString"] = UTF16ToString;
function stringToUTF16(str, outPtr) {
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  HEAP16[outPtr + i * 2 >> 1] = codeUnit;
 }
 HEAP16[outPtr + str.length * 2 >> 1] = 0;
}
Module["stringToUTF16"] = stringToUTF16;
function UTF32ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var utf32 = HEAP32[ptr + i * 4 >> 2];
  if (utf32 == 0) return str;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
}
Module["UTF32ToString"] = UTF32ToString;
function stringToUTF32(str, outPtr) {
 var iChar = 0;
 for (var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
  var codeUnit = str.charCodeAt(iCodeUnit);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++iCodeUnit);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  HEAP32[outPtr + iChar * 4 >> 2] = codeUnit;
  ++iChar;
 }
 HEAP32[outPtr + iChar * 4 >> 2] = 0;
}
Module["stringToUTF32"] = stringToUTF32;
function demangle(func) {
 var hasLibcxxabi = !!Module["___cxa_demangle"];
 if (hasLibcxxabi) {
  try {
   var buf = _malloc(func.length);
   writeStringToMemory(func.substr(1), buf);
   var status = _malloc(4);
   var ret = Module["___cxa_demangle"](buf, 0, 0, status);
   if (getValue(status, "i32") === 0 && ret) {
    return Pointer_stringify(ret);
   }
  } catch (e) {} finally {
   if (buf) _free(buf);
   if (status) _free(status);
   if (ret) _free(ret);
  }
 }
 var i = 3;
 var basicTypes = {
  "v": "void",
  "b": "bool",
  "c": "char",
  "s": "short",
  "i": "int",
  "l": "long",
  "f": "float",
  "d": "double",
  "w": "wchar_t",
  "a": "signed char",
  "h": "unsigned char",
  "t": "unsigned short",
  "j": "unsigned int",
  "m": "unsigned long",
  "x": "long long",
  "y": "unsigned long long",
  "z": "..."
 };
 var subs = [];
 var first = true;
 function dump(x) {
  if (x) Module.print(x);
  Module.print(func);
  var pre = "";
  for (var a = 0; a < i; a++) pre += " ";
  Module.print(pre + "^");
 }
 function parseNested() {
  i++;
  if (func[i] === "K") i++;
  var parts = [];
  while (func[i] !== "E") {
   if (func[i] === "S") {
    i++;
    var next = func.indexOf("_", i);
    var num = func.substring(i, next) || 0;
    parts.push(subs[num] || "?");
    i = next + 1;
    continue;
   }
   if (func[i] === "C") {
    parts.push(parts[parts.length - 1]);
    i += 2;
    continue;
   }
   var size = parseInt(func.substr(i));
   var pre = size.toString().length;
   if (!size || !pre) {
    i--;
    break;
   }
   var curr = func.substr(i + pre, size);
   parts.push(curr);
   subs.push(curr);
   i += pre + size;
  }
  i++;
  return parts;
 }
 function parse(rawList, limit, allowVoid) {
  limit = limit || Infinity;
  var ret = "", list = [];
  function flushList() {
   return "(" + list.join(", ") + ")";
  }
  var name;
  if (func[i] === "N") {
   name = parseNested().join("::");
   limit--;
   if (limit === 0) return rawList ? [ name ] : name;
  } else {
   if (func[i] === "K" || first && func[i] === "L") i++;
   var size = parseInt(func.substr(i));
   if (size) {
    var pre = size.toString().length;
    name = func.substr(i + pre, size);
    i += pre + size;
   }
  }
  first = false;
  if (func[i] === "I") {
   i++;
   var iList = parse(true);
   var iRet = parse(true, 1, true);
   ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">";
  } else {
   ret = name;
  }
  paramLoop : while (i < func.length && limit-- > 0) {
   var c = func[i++];
   if (c in basicTypes) {
    list.push(basicTypes[c]);
   } else {
    switch (c) {
    case "P":
     list.push(parse(true, 1, true)[0] + "*");
     break;
    case "R":
     list.push(parse(true, 1, true)[0] + "&");
     break;
    case "L":
     {
      i++;
      var end = func.indexOf("E", i);
      var size = end - i;
      list.push(func.substr(i, size));
      i += size + 2;
      break;
     }
    case "A":
     {
      var size = parseInt(func.substr(i));
      i += size.toString().length;
      if (func[i] !== "_") throw "?";
      i++;
      list.push(parse(true, 1, true)[0] + " [" + size + "]");
      break;
     }
    case "E":
     break paramLoop;
    default:
     ret += "?" + c;
     break paramLoop;
    }
   }
  }
  if (!allowVoid && list.length === 1 && list[0] === "void") list = [];
  if (rawList) {
   if (ret) {
    list.push(ret + "?");
   }
   return list;
  } else {
   return ret + flushList();
  }
 }
 var final = func;
 try {
  if (func == "Object._main" || func == "_main") {
   return "main()";
  }
  if (typeof func === "number") func = Pointer_stringify(func);
  if (func[0] !== "_") return func;
  if (func[1] !== "_") return func;
  if (func[2] !== "Z") return func;
  switch (func[3]) {
  case "n":
   return "operator new()";
  case "d":
   return "operator delete()";
  }
  final = parse();
 } catch (e) {
  final += "?";
 }
 if (final.indexOf("?") >= 0 && !hasLibcxxabi) {
  Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
 }
 return final;
}
function demangleAll(text) {
 return text.replace(/__Z[\w\d_]+/g, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
function stackTrace() {
 return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
 return x + 4095 & -4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function enlargeMemory() {
 var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
 while (TOTAL_MEMORY <= DYNAMICTOP) {
  TOTAL_MEMORY = alignMemoryPage(2 * TOTAL_MEMORY);
 }
//  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
 TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16 * 1024 * 1024);
  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
 assert(TOTAL_MEMORY <= Math.pow(2, 30));
 var oldHEAP8 = HEAP8;
 var buffer = new ArrayBuffer(TOTAL_MEMORY);
 Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
 Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
 Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
 HEAP8.set(oldHEAP8);
 var success = _emscripten_replace_memory(buffer);
 assert(success);
}
var byteLength;
try {
 byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get);
} catch (e) {
 byteLength = (function(buffer) {
  return buffer.byteLength;
 });
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 12*1024*1024;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16*1024*1024;
var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY) { // || totalMemory < 2 * TOTAL_STACK) {
 if (totalMemory < 16 * 1024 * 1024) {
  totalMemory *= 2;
 } else {
  totalMemory += 16 * 1024 * 1024;
 }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
 Module.printErr("increasing TOTAL_MEMORY to " + totalMemory + " to be compliant with the asm.js spec");
 TOTAL_MEMORY = totalMemory;
}
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
Module["HEAP"] = HEAP;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Runtime.dynCall("v", func);
   } else {
    Runtime.dynCall("vi", func, [ callback.arg ]);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}
Module["addOnInit"] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
 __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = Module.addOnPostRun = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
 var ret = (new Runtime.UTF8Processor).processJSString(stringy);
 if (length) {
  ret.length = length;
 }
 if (!dontAddNull) {
  ret.push(0);
 }
 return ret;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
 var array = intArrayFromString(string, dontAddNull);
 var i = 0;
 while (i < array.length) {
  var chr = array[i];
  HEAP8[buffer + i >> 0] = chr;
  i = i + 1;
 }
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
 for (var i = 0; i < array.length; i++) {
  HEAP8[buffer + i >> 0] = array[i];
 }
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; i++) {
  HEAP8[buffer + i >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer + str.length >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
function unSign(value, bits, ignore) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
 if (value <= 0) {
  return value;
 }
 var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
 if (value >= half && (bits <= 32 || value > half)) {
  value = -2 * half + value;
 }
 return value;
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
Math.imul = Math["imul"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + Runtime.alignMemory(21635);
__ATINIT__.push({
 func: (function() {
  __GLOBAL__I_a();
 })
});
allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 49, 55, 98, 116, 84, 121, 112, 101, 100, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 0, 0, 0, 0, 0, 49, 51, 98, 116, 84, 121, 112, 101, 100, 79, 98, 106, 101, 99, 116, 0, 184, 81, 0, 0, 136, 0, 0, 0, 64, 82, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 152, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 49, 57, 98, 116, 71, 104, 111, 115, 116, 80, 97, 105, 114, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 50, 53, 98, 116, 79, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 80, 97, 105, 114, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 184, 81, 0, 0, 240, 0, 0, 0, 224, 81, 0, 0, 216, 0, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 49, 56, 98, 116, 86, 101, 104, 105, 99, 108, 101, 82, 97, 121, 99, 97, 115, 116, 101, 114, 0, 0, 0, 0, 184, 81, 0, 0, 40, 1, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 52, 67, 108, 111, 115, 101, 115, 116, 82, 97, 121, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 0, 0, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 49, 55, 82, 97, 121, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 0, 184, 81, 0, 0, 144, 1, 0, 0, 224, 81, 0, 0, 96, 1, 0, 0, 184, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 2, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 50, 48, 98, 116, 68, 101, 102, 97, 117, 108, 116, 77, 111, 116, 105, 111, 110, 83, 116, 97, 116, 101, 0, 0, 49, 51, 98, 116, 77, 111, 116, 105, 111, 110, 83, 116, 97, 116, 101, 0, 184, 81, 0, 0, 128, 2, 0, 0, 224, 81, 0, 0, 104, 2, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 3, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 55, 67, 108, 111, 115, 101, 115, 116, 67, 111, 110, 118, 101, 120, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 0, 0, 0, 0, 0, 0, 0, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 48, 67, 111, 110, 118, 101, 120, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 248, 2, 0, 0, 224, 81, 0, 0, 192, 2, 0, 0, 40, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 50, 57, 67, 111, 110, 99, 114, 101, 116, 101, 67, 111, 110, 116, 97, 99, 116, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 49, 67, 111, 110, 116, 97, 99, 116, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 0, 0, 0, 0, 0, 184, 81, 0, 0, 120, 3, 0, 0, 224, 81, 0, 0, 88, 3, 0, 0, 168, 3, 0, 0, 0, 0, 0, 0, 123, 32, 118, 97, 114, 32, 115, 101, 108, 102, 32, 61, 32, 77, 111, 100, 117, 108, 101, 91, 39, 103, 101, 116, 67, 97, 99, 104, 101, 39, 93, 40, 77, 111, 100, 117, 108, 101, 91, 39, 67, 111, 110, 99, 114, 101, 116, 101, 67, 111, 110, 116, 97, 99, 116, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 39, 93, 41, 91, 36, 48, 93, 59, 32, 105, 102, 32, 40, 33, 115, 101, 108, 102, 46, 104, 97, 115, 79, 119, 110, 80, 114, 111, 112, 101, 114, 116, 121, 40, 39, 97, 100, 100, 83, 105, 110, 103, 108, 101, 82, 101, 115, 117, 108, 116, 39, 41, 41, 32, 116, 104, 114, 111, 119, 32, 39, 97, 32, 74, 83, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 109, 117, 115, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 32, 97, 108, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 44, 32, 121, 111, 117, 32, 102, 111, 114, 103, 111, 116, 32, 67, 111, 110, 99, 114, 101, 116, 101, 67, 111, 110, 116, 97, 99, 116, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 58, 58, 97, 100, 100, 83, 105, 110, 103, 108, 101, 82, 101, 115, 117, 108, 116, 46, 39, 59, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 97, 100, 100, 83, 105, 110, 103, 108, 101, 82, 101, 115, 117, 108, 116, 40, 36, 49, 44, 36, 50, 44, 36, 51, 44, 36, 52, 44, 36, 53, 44, 36, 54, 44, 36, 55, 41, 59, 32, 125, 0, 0, 0, 0, 0, 0, 0, 0, 56, 5, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 50, 49, 98, 116, 67, 111, 110, 101, 84, 119, 105, 115, 116, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 0, 224, 81, 0, 0, 32, 5, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 98, 116, 67, 111, 110, 101, 84, 119, 105, 115, 116, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 22, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 23, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 25, 0, 0, 0, 20, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 26, 0, 0, 0, 21, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 100, 101, 98, 117, 103, 68, 114, 97, 119, 87, 111, 114, 108, 100, 0, 0, 115, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 77, 111, 116, 105, 111, 110, 83, 116, 97, 116, 101, 115, 0, 115, 116, 101, 112, 83, 105, 109, 117, 108, 97, 116, 105, 111, 110, 0, 0, 105, 110, 116, 101, 114, 110, 97, 108, 83, 105, 110, 103, 108, 101, 83, 116, 101, 112, 83, 105, 109, 117, 108, 97, 116, 105, 111, 110, 0, 0, 0, 0, 117, 112, 100, 97, 116, 101, 65, 99, 116, 105, 111, 110, 115, 0, 0, 0, 117, 112, 100, 97, 116, 101, 65, 99, 116, 105, 118, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 0, 0, 0, 115, 111, 108, 118, 101, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 115, 0, 0, 0, 0, 0, 0, 0, 0, 99, 97, 108, 99, 117, 108, 97, 116, 101, 83, 105, 109, 117, 108, 97, 116, 105, 111, 110, 73, 115, 108, 97, 110, 100, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 114, 101, 97, 116, 101, 80, 114, 101, 100, 105, 99, 116, 105, 118, 101, 67, 111, 110, 116, 97, 99, 116, 115, 0, 0, 0, 0, 0, 0, 0, 0, 114, 101, 108, 101, 97, 115, 101, 32, 112, 114, 101, 100, 105, 99, 116, 105, 118, 101, 32, 99, 111, 110, 116, 97, 99, 116, 32, 109, 97, 110, 105, 102, 111, 108, 100, 115, 0, 0, 0, 0, 112, 114, 101, 100, 105, 99, 116, 105, 118, 101, 32, 99, 111, 110, 118, 101, 120, 83, 119, 101, 101, 112, 84, 101, 115, 116, 0, 0, 0, 0, 0, 0, 105, 110, 116, 101, 103, 114, 97, 116, 101, 84, 114, 97, 110, 115, 102, 111, 114, 109, 115, 0, 0, 0, 0, 0, 67, 67, 68, 32, 109, 111, 116, 105, 111, 110, 32, 99, 108, 97, 109, 112, 105, 110, 103, 0, 0, 0, 0, 0, 97, 112, 112, 108, 121, 32, 115, 112, 101, 99, 117, 108, 97, 116, 105, 118, 101, 32, 99, 111, 110, 116, 97, 99, 116, 32, 114, 101, 115, 116, 105, 116, 117, 116, 105, 111, 110, 0, 0, 0, 112, 114, 101, 100, 105, 99, 116, 85, 110, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 77, 111, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 98, 116, 68, 121, 110, 97, 109, 105, 99, 115, 87, 111, 114, 108, 100, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 98, 116, 68, 105, 115, 99, 114, 101, 116, 101, 68, 121, 110, 97, 109, 105, 99, 115, 87, 111, 114, 108, 100, 0, 0, 0, 0, 0, 0, 0, 49, 53, 98, 116, 68, 121, 110, 97, 109, 105, 99, 115, 87, 111, 114, 108, 100, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 8, 8, 0, 0, 184, 29, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 232, 7, 0, 0, 32, 8, 0, 0, 0, 0, 0, 0, 98, 116, 67, 111, 110, 118, 101, 120, 73, 110, 116, 101, 114, 110, 97, 108, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 83, 80, 72, 69, 82, 69, 0, 0, 0, 0, 0, 0, 168, 8, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 51, 52, 98, 116, 67, 108, 111, 115, 101, 115, 116, 78, 111, 116, 77, 101, 67, 111, 110, 118, 101, 120, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 224, 81, 0, 0, 128, 8, 0, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 9, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 50, 55, 73, 110, 112, 108, 97, 99, 101, 83, 111, 108, 118, 101, 114, 73, 115, 108, 97, 110, 100, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 78, 50, 53, 98, 116, 83, 105, 109, 117, 108, 97, 116, 105, 111, 110, 73, 115, 108, 97, 110, 100, 77, 97, 110, 97, 103, 101, 114, 49, 52, 73, 115, 108, 97, 110, 100, 67, 97, 108, 108, 98, 97, 99, 107, 69, 0, 0, 0, 184, 81, 0, 0, 240, 8, 0, 0, 224, 81, 0, 0, 208, 8, 0, 0, 32, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 9, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 34, 0, 0, 0, 50, 51, 98, 116, 71, 101, 110, 101, 114, 105, 99, 54, 68, 111, 102, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 112, 9, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 98, 116, 71, 101, 110, 101, 114, 105, 99, 54, 68, 111, 102, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 10, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 55, 98, 116, 72, 105, 110, 103, 101, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 0, 0, 0, 0, 0, 224, 81, 0, 0, 248, 9, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 98, 116, 72, 105, 110, 103, 101, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 11, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 1, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 2, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 3, 0, 0, 0, 9, 0, 0, 0, 40, 0, 0, 0, 10, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 48, 98, 116, 75, 105, 110, 101, 109, 97, 116, 105, 99, 67, 104, 97, 114, 97, 99, 116, 101, 114, 67, 111, 110, 116, 114, 111, 108, 108, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 51, 48, 98, 116, 67, 104, 97, 114, 97, 99, 116, 101, 114, 67, 111, 110, 116, 114, 111, 108, 108, 101, 114, 73, 110, 116, 101, 114, 102, 97, 99, 101, 0, 0, 0, 0, 0, 0, 0, 0, 49, 55, 98, 116, 65, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 102, 97, 99, 101, 0, 0, 0, 0, 0, 184, 81, 0, 0, 8, 11, 0, 0, 224, 81, 0, 0, 224, 10, 0, 0, 32, 11, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 184, 10, 0, 0, 40, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 11, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 52, 51, 98, 116, 75, 105, 110, 101, 109, 97, 116, 105, 99, 67, 108, 111, 115, 101, 115, 116, 78, 111, 116, 77, 101, 67, 111, 110, 118, 101, 120, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 224, 81, 0, 0, 96, 11, 0, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 11, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 11, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 50, 51, 98, 116, 80, 111, 105, 110, 116, 50, 80, 111, 105, 110, 116, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 216, 11, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 98, 116, 80, 111, 105, 110, 116, 50, 80, 111, 105, 110, 116, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 14, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 4, 0, 0, 0, 34, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 54, 98, 116, 82, 97, 121, 99, 97, 115, 116, 86, 101, 104, 105, 99, 108, 101, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 200, 14, 0, 0, 32, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 15, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 50, 53, 98, 116, 68, 101, 102, 97, 117, 108, 116, 86, 101, 104, 105, 99, 108, 101, 82, 97, 121, 99, 97, 115, 116, 101, 114, 0, 0, 0, 0, 0, 224, 81, 0, 0, 8, 15, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 15, 0, 0, 7, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 35, 0, 0, 0, 12, 0, 0, 0, 7, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 116, 82, 105, 103, 105, 100, 66, 111, 100, 121, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 0, 0, 0, 49, 49, 98, 116, 82, 105, 103, 105, 100, 66, 111, 100, 121, 0, 0, 0, 224, 81, 0, 0, 136, 15, 0, 0, 160, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 16, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 54, 0, 0, 0, 13, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 115, 111, 108, 118, 101, 71, 114, 111, 117, 112, 67, 97, 99, 104, 101, 70, 114, 105, 101, 110, 100, 108, 121, 83, 101, 116, 117, 112, 0, 0, 0, 0, 115, 111, 108, 118, 101, 71, 114, 111, 117, 112, 67, 97, 99, 104, 101, 70, 114, 105, 101, 110, 100, 108, 121, 73, 116, 101, 114, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 115, 111, 108, 118, 101, 71, 114, 111, 117, 112, 0, 0, 0, 0, 0, 0, 51, 53, 98, 116, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 73, 109, 112, 117, 108, 115, 101, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 83, 111, 108, 118, 101, 114, 0, 0, 0, 49, 56, 98, 116, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 83, 111, 108, 118, 101, 114, 0, 0, 0, 0, 184, 81, 0, 0, 112, 16, 0, 0, 224, 81, 0, 0, 72, 16, 0, 0, 136, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 16, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 14, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 49, 56, 98, 116, 83, 108, 105, 100, 101, 114, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 0, 0, 0, 0, 224, 81, 0, 0, 216, 16, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 98, 116, 83, 108, 105, 100, 101, 114, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 68, 97, 116, 97, 0, 0, 98, 116, 84, 121, 112, 101, 100, 67, 111, 110, 115, 116, 114, 97, 105, 110, 116, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 20, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 39, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 7, 0, 0, 0, 40, 0, 0, 0, 59, 0, 0, 0, 49, 50, 98, 116, 65, 120, 105, 115, 83, 119, 101, 101, 112, 51, 0, 0, 50, 48, 98, 116, 65, 120, 105, 115, 83, 119, 101, 101, 112, 51, 73, 110, 116, 101, 114, 110, 97, 108, 73, 116, 69, 0, 0, 0, 0, 0, 0, 0, 50, 49, 98, 116, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 73, 110, 116, 101, 114, 102, 97, 99, 101, 0, 184, 81, 0, 0, 24, 20, 0, 0, 224, 81, 0, 0, 248, 19, 0, 0, 48, 20, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 232, 19, 0, 0, 56, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 20, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 39, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 7, 0, 0, 0, 40, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 48, 21, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 9, 0, 0, 0, 20, 0, 0, 0, 10, 0, 0, 0, 41, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 49, 53, 98, 116, 78, 117, 108, 108, 80, 97, 105, 114, 67, 97, 99, 104, 101, 0, 0, 0, 0, 0, 0, 0, 50, 50, 98, 116, 79, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 80, 97, 105, 114, 67, 97, 99, 104, 101, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 0, 21, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 232, 20, 0, 0, 32, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 21, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 44, 0, 0, 0, 22, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 45, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 24, 0, 0, 0, 11, 0, 0, 0, 46, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 25, 0, 0, 0, 15, 0, 0, 0, 8, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 28, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 17, 0, 0, 0, 49, 48, 98, 116, 66, 111, 120, 83, 104, 97, 112, 101, 0, 0, 0, 0, 224, 81, 0, 0, 200, 21, 0, 0, 128, 62, 0, 0, 0, 0, 0, 0, 66, 111, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 22, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 14, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 47, 0, 0, 0, 29, 0, 0, 0, 2, 0, 0, 0, 30, 0, 0, 0, 45, 0, 0, 0, 10, 0, 0, 0, 3, 0, 0, 0, 31, 0, 0, 0, 12, 0, 0, 0, 46, 0, 0, 0, 15, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 50, 50, 98, 116, 66, 118, 104, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 104, 22, 0, 0, 112, 68, 0, 0, 0, 0, 0, 0, 66, 86, 72, 84, 82, 73, 65, 78, 71, 76, 69, 77, 69, 83, 72, 0, 0, 0, 0, 0, 80, 23, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 90, 78, 75, 50, 50, 98, 116, 66, 118, 104, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 49, 57, 112, 114, 111, 99, 101, 115, 115, 65, 108, 108, 84, 114, 105, 97, 110, 103, 108, 101, 115, 69, 80, 49, 56, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 82, 75, 57, 98, 116, 86, 101, 99, 116, 111, 114, 51, 83, 52, 95, 69, 50, 49, 77, 121, 78, 111, 100, 101, 79, 118, 101, 114, 108, 97, 112, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 50, 49, 98, 116, 78, 111, 100, 101, 79, 118, 101, 114, 108, 97, 112, 67, 97, 108, 108, 98, 97, 99, 107, 0, 184, 81, 0, 0, 48, 23, 0, 0, 224, 81, 0, 0, 192, 22, 0, 0, 72, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 23, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 90, 78, 50, 50, 98, 116, 66, 118, 104, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 49, 55, 112, 101, 114, 102, 111, 114, 109, 67, 111, 110, 118, 101, 120, 99, 97, 115, 116, 69, 80, 49, 56, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 82, 75, 57, 98, 116, 86, 101, 99, 116, 111, 114, 51, 83, 52, 95, 83, 52, 95, 83, 52, 95, 69, 50, 49, 77, 121, 78, 111, 100, 101, 79, 118, 101, 114, 108, 97, 112, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 120, 23, 0, 0, 72, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 24, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 90, 78, 50, 50, 98, 116, 66, 118, 104, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 49, 52, 112, 101, 114, 102, 111, 114, 109, 82, 97, 121, 99, 97, 115, 116, 69, 80, 49, 56, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 82, 75, 57, 98, 116, 86, 101, 99, 116, 111, 114, 51, 83, 52, 95, 69, 50, 49, 77, 121, 78, 111, 100, 101, 79, 118, 101, 114, 108, 97, 112, 67, 97, 108, 108, 98, 97, 99, 107, 0, 224, 81, 0, 0, 24, 24, 0, 0, 72, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 25, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 16, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 22, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 51, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 33, 0, 0, 0, 13, 0, 0, 0, 46, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 26, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 16, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 22, 0, 0, 0, 3, 0, 0, 0, 35, 0, 0, 0, 51, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 33, 0, 0, 0, 13, 0, 0, 0, 46, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 26, 0, 0, 78, 0, 0, 0, 79, 0, 0, 0, 16, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 22, 0, 0, 0, 3, 0, 0, 0, 36, 0, 0, 0, 51, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 33, 0, 0, 0, 13, 0, 0, 0, 46, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 49, 52, 98, 116, 67, 97, 112, 115, 117, 108, 101, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 200, 25, 0, 0, 104, 41, 0, 0, 0, 0, 0, 0, 49, 53, 98, 116, 67, 97, 112, 115, 117, 108, 101, 83, 104, 97, 112, 101, 88, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 240, 25, 0, 0, 224, 25, 0, 0, 0, 0, 0, 0, 49, 53, 98, 116, 67, 97, 112, 115, 117, 108, 101, 83, 104, 97, 112, 101, 90, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 24, 26, 0, 0, 224, 25, 0, 0, 0, 0, 0, 0, 67, 97, 112, 115, 117, 108, 101, 90, 0, 0, 0, 0, 0, 0, 0, 0, 67, 97, 112, 115, 117, 108, 101, 88, 0, 0, 0, 0, 0, 0, 0, 0, 98, 116, 67, 97, 112, 115, 117, 108, 101, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 67, 97, 112, 115, 117, 108, 101, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 26, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 37, 0, 0, 0, 9, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 10, 0, 0, 0, 54, 0, 0, 0, 50, 49, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 68, 105, 115, 112, 97, 116, 99, 104, 101, 114, 0, 224, 81, 0, 0, 216, 26, 0, 0, 88, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 27, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 50, 51, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 80, 97, 105, 114, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 49, 55, 98, 116, 79, 118, 101, 114, 108, 97, 112, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 184, 81, 0, 0, 56, 27, 0, 0, 224, 81, 0, 0, 24, 27, 0, 0, 80, 27, 0, 0, 0, 0, 0, 0, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 49, 55, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 184, 81, 0, 0, 136, 27, 0, 0, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 0, 0, 0, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 192, 27, 0, 0, 0, 0, 0, 0, 184, 29, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 86, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 19, 0, 0, 0, 55, 0, 0, 0, 22, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 79, 118, 101, 114, 102, 108, 111, 119, 32, 105, 110, 32, 65, 65, 66, 66, 44, 32, 111, 98, 106, 101, 99, 116, 32, 114, 101, 109, 111, 118, 101, 100, 32, 102, 114, 111, 109, 32, 115, 105, 109, 117, 108, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 73, 102, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 112, 114, 111, 100, 117, 99, 101, 32, 116, 104, 105, 115, 44, 32, 112, 108, 101, 97, 115, 101, 32, 101, 109, 97, 105, 108, 32, 98, 117, 103, 115, 64, 99, 111, 110, 116, 105, 110, 117, 111, 117, 115, 112, 104, 121, 115, 105, 99, 115, 46, 99, 111, 109, 10, 0, 0, 0, 0, 0, 80, 108, 101, 97, 115, 101, 32, 105, 110, 99, 108, 117, 100, 101, 32, 97, 98, 111, 118, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 44, 32, 121, 111, 117, 114, 32, 80, 108, 97, 116, 102, 111, 114, 109, 44, 32, 118, 101, 114, 115, 105, 111, 110, 32, 111, 102, 32, 79, 83, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 84, 104, 97, 110, 107, 115, 46, 10, 0, 0, 0, 0, 0, 0, 0, 0, 117, 112, 100, 97, 116, 101, 65, 97, 98, 98, 115, 0, 0, 0, 0, 0, 99, 97, 108, 99, 117, 108, 97, 116, 101, 79, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 80, 97, 105, 114, 115, 0, 0, 0, 0, 0, 0, 0, 112, 101, 114, 102, 111, 114, 109, 68, 105, 115, 99, 114, 101, 116, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 68, 101, 116, 101, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 100, 105, 115, 112, 97, 116, 99, 104, 65, 108, 108, 67, 111, 108, 108, 105, 115, 105, 111, 110, 80, 97, 105, 114, 115, 0, 0, 0, 0, 0, 0, 0, 99, 111, 110, 118, 101, 120, 83, 119, 101, 101, 112, 67, 111, 109, 112, 111, 117, 110, 100, 0, 0, 0, 0, 0, 99, 111, 110, 118, 101, 120, 83, 119, 101, 101, 112, 84, 101, 115, 116, 0, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 160, 29, 0, 0, 0, 0, 0, 0, 8, 30, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 252, 255, 255, 255, 8, 30, 0, 0, 89, 0, 0, 0, 90, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 49, 55, 68, 101, 98, 117, 103, 68, 114, 97, 119, 99, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 64, 82, 0, 0, 240, 29, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 88, 67, 0, 0, 2, 0, 0, 0, 136, 67, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 104, 30, 0, 0, 91, 0, 0, 0, 92, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 50, 51, 98, 116, 66, 114, 105, 100, 103, 101, 100, 77, 97, 110, 105, 102, 111, 108, 100, 82, 101, 115, 117, 108, 116, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 72, 30, 0, 0, 240, 52, 0, 0, 0, 0, 0, 0, 50, 52, 98, 116, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 65, 97, 98, 98, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 120, 30, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 50, 49, 98, 116, 83, 105, 110, 103, 108, 101, 83, 119, 101, 101, 112, 67, 97, 108, 108, 98, 97, 99, 107, 0, 50, 51, 98, 116, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 82, 97, 121, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 208, 30, 0, 0, 152, 30, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 184, 30, 0, 0, 240, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 31, 0, 0, 95, 0, 0, 0, 96, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 49, 57, 98, 116, 83, 105, 110, 103, 108, 101, 82, 97, 121, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 224, 81, 0, 0, 40, 31, 0, 0, 240, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 97, 0, 0, 0, 98, 0, 0, 0, 14, 0, 0, 0, 10, 0, 0, 0, 90, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 53, 111, 98, 106, 101, 99, 116, 81, 117, 101, 114, 121, 83, 105, 110, 103, 108, 101, 73, 110, 116, 101, 114, 110, 97, 108, 69, 80, 75, 49, 51, 98, 116, 67, 111, 110, 118, 101, 120, 83, 104, 97, 112, 101, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 53, 95, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 82, 78, 83, 95, 50, 48, 67, 111, 110, 118, 101, 120, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 102, 69, 49, 52, 76, 111, 99, 97, 108, 73, 110, 102, 111, 65, 100, 100, 101, 114, 95, 49, 0, 0, 224, 81, 0, 0, 104, 31, 0, 0, 40, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 32, 0, 0, 99, 0, 0, 0, 100, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 90, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 53, 111, 98, 106, 101, 99, 116, 81, 117, 101, 114, 121, 83, 105, 110, 103, 108, 101, 73, 110, 116, 101, 114, 110, 97, 108, 69, 80, 75, 49, 51, 98, 116, 67, 111, 110, 118, 101, 120, 83, 104, 97, 112, 101, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 53, 95, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 82, 78, 83, 95, 50, 48, 67, 111, 110, 118, 101, 120, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 102, 69, 51, 50, 66, 114, 105, 100, 103, 101, 84, 114, 105, 97, 110, 103, 108, 101, 67, 111, 110, 118, 101, 120, 99, 97, 115, 116, 67, 97, 108, 108, 98, 97, 99, 107, 95, 48, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 48, 32, 0, 0, 224, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 33, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 23, 0, 0, 0, 2, 0, 0, 0, 90, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 53, 111, 98, 106, 101, 99, 116, 81, 117, 101, 114, 121, 83, 105, 110, 103, 108, 101, 73, 110, 116, 101, 114, 110, 97, 108, 69, 80, 75, 49, 51, 98, 116, 67, 111, 110, 118, 101, 120, 83, 104, 97, 112, 101, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 53, 95, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 82, 78, 83, 95, 50, 48, 67, 111, 110, 118, 101, 120, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 102, 69, 51, 50, 66, 114, 105, 100, 103, 101, 84, 114, 105, 97, 110, 103, 108, 101, 67, 111, 110, 118, 101, 120, 99, 97, 115, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 224, 81, 0, 0, 16, 33, 0, 0, 224, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 34, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 15, 0, 0, 0, 11, 0, 0, 0, 90, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 49, 114, 97, 121, 84, 101, 115, 116, 83, 105, 110, 103, 108, 101, 73, 110, 116, 101, 114, 110, 97, 108, 69, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 50, 95, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 82, 78, 83, 95, 49, 55, 82, 97, 121, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 69, 49, 53, 76, 111, 99, 97, 108, 73, 110, 102, 111, 65, 100, 100, 101, 114, 50, 0, 0, 0, 0, 224, 81, 0, 0, 232, 33, 0, 0, 184, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 35, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 28, 0, 0, 0, 57, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 90, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 49, 114, 97, 121, 84, 101, 115, 116, 83, 105, 110, 103, 108, 101, 73, 110, 116, 101, 114, 110, 97, 108, 69, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 50, 95, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 82, 78, 83, 95, 49, 55, 82, 97, 121, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 69, 57, 82, 97, 121, 84, 101, 115, 116, 101, 114, 95, 49, 0, 78, 54, 98, 116, 68, 98, 118, 116, 56, 73, 67, 111, 108, 108, 105, 100, 101, 69, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 40, 35, 0, 0, 224, 81, 0, 0, 168, 34, 0, 0, 64, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 36, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 90, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 49, 114, 97, 121, 84, 101, 115, 116, 83, 105, 110, 103, 108, 101, 73, 110, 116, 101, 114, 110, 97, 108, 69, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 50, 95, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 82, 78, 83, 95, 49, 55, 82, 97, 121, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 69, 50, 57, 66, 114, 105, 100, 103, 101, 84, 114, 105, 97, 110, 103, 108, 101, 82, 97, 121, 99, 97, 115, 116, 67, 97, 108, 108, 98, 97, 99, 107, 95, 48, 0, 0, 0, 0, 224, 81, 0, 0, 112, 35, 0, 0, 176, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 36, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 24, 0, 0, 0, 2, 0, 0, 0, 90, 78, 49, 54, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 87, 111, 114, 108, 100, 50, 49, 114, 97, 121, 84, 101, 115, 116, 83, 105, 110, 103, 108, 101, 73, 110, 116, 101, 114, 110, 97, 108, 69, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 50, 95, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 82, 78, 83, 95, 49, 55, 82, 97, 121, 82, 101, 115, 117, 108, 116, 67, 97, 108, 108, 98, 97, 99, 107, 69, 69, 50, 57, 66, 114, 105, 100, 103, 101, 84, 114, 105, 97, 110, 103, 108, 101, 82, 97, 121, 99, 97, 115, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 48, 36, 0, 0, 176, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 37, 0, 0, 12, 0, 0, 0, 58, 0, 0, 0, 29, 0, 0, 0, 111, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 78, 49, 50, 98, 116, 67, 111, 110, 118, 101, 120, 67, 97, 115, 116, 49, 48, 67, 97, 115, 116, 82, 101, 115, 117, 108, 116, 69, 0, 0, 0, 0, 184, 81, 0, 0, 248, 36, 0, 0, 0, 0, 0, 0, 192, 37, 0, 0, 113, 0, 0, 0, 114, 0, 0, 0, 25, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 59, 0, 0, 0, 41, 0, 0, 0, 4, 0, 0, 0, 42, 0, 0, 0, 45, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 43, 0, 0, 0, 17, 0, 0, 0, 46, 0, 0, 0, 60, 0, 0, 0, 115, 0, 0, 0, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 83, 104, 97, 112, 101, 67, 104, 105, 108, 100, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 0, 0, 0, 0, 49, 53, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 168, 37, 0, 0, 216, 27, 0, 0, 0, 0, 0, 0, 67, 111, 109, 112, 111, 117, 110, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 39, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 26, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 61, 0, 0, 0, 22, 0, 0, 0, 5, 0, 0, 0, 44, 0, 0, 0, 62, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 45, 0, 0, 0, 18, 0, 0, 0, 46, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 2, 0, 0, 0, 27, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 39, 0, 0, 118, 0, 0, 0, 119, 0, 0, 0, 26, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 61, 0, 0, 0, 22, 0, 0, 0, 5, 0, 0, 0, 46, 0, 0, 0, 63, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 45, 0, 0, 0, 18, 0, 0, 0, 46, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 2, 0, 0, 0, 27, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 39, 0, 0, 120, 0, 0, 0, 121, 0, 0, 0, 26, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 61, 0, 0, 0, 22, 0, 0, 0, 5, 0, 0, 0, 47, 0, 0, 0, 64, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 45, 0, 0, 0, 18, 0, 0, 0, 46, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 2, 0, 0, 0, 27, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 49, 49, 98, 116, 67, 111, 110, 101, 83, 104, 97, 112, 101, 0, 0, 0, 224, 81, 0, 0, 24, 39, 0, 0, 104, 41, 0, 0, 0, 0, 0, 0, 49, 50, 98, 116, 67, 111, 110, 101, 83, 104, 97, 112, 101, 90, 0, 0, 224, 81, 0, 0, 56, 39, 0, 0, 40, 39, 0, 0, 0, 0, 0, 0, 49, 50, 98, 116, 67, 111, 110, 101, 83, 104, 97, 112, 101, 88, 0, 0, 224, 81, 0, 0, 88, 39, 0, 0, 40, 39, 0, 0, 0, 0, 0, 0, 67, 111, 110, 101, 88, 0, 0, 0, 67, 111, 110, 101, 90, 0, 0, 0, 98, 116, 67, 111, 110, 101, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 67, 111, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 216, 39, 0, 0, 122, 0, 0, 0, 123, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 50, 55, 98, 116, 67, 111, 110, 116, 105, 110, 117, 111, 117, 115, 67, 111, 110, 118, 101, 120, 67, 111, 108, 108, 105, 115, 105, 111, 110, 0, 0, 0, 224, 81, 0, 0, 184, 39, 0, 0, 120, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 40, 0, 0, 124, 0, 0, 0, 125, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 4 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
allocate([ 49, 54, 98, 116, 80, 111, 105, 110, 116, 67, 111, 108, 108, 101, 99, 116, 111, 114, 0, 0, 0, 0, 0, 0, 78, 51, 54, 98, 116, 68, 105, 115, 99, 114, 101, 116, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 68, 101, 116, 101, 99, 116, 111, 114, 73, 110, 116, 101, 114, 102, 97, 99, 101, 54, 82, 101, 115, 117, 108, 116, 69, 0, 184, 81, 0, 0, 32, 40, 0, 0, 224, 81, 0, 0, 8, 40, 0, 0, 80, 40, 0, 0, 0, 0, 0, 0, 49, 50, 98, 116, 67, 111, 110, 118, 101, 120, 67, 97, 115, 116, 0, 0, 184, 81, 0, 0, 104, 40, 0, 0, 0, 0, 0, 0, 56, 41, 0, 0, 126, 0, 0, 0, 127, 0, 0, 0, 28, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 65, 0, 0, 0, 22, 0, 0, 0, 6, 0, 0, 0, 48, 0, 0, 0, 45, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 49, 0, 0, 0, 19, 0, 0, 0, 46, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 2, 0, 0, 0, 29, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 8, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 30, 0, 0, 0, 36, 0, 0, 0, 52, 0, 0, 0, 31, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 98, 116, 67, 111, 110, 118, 101, 120, 72, 117, 108, 108, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 0, 0, 49, 55, 98, 116, 67, 111, 110, 118, 101, 120, 72, 117, 108, 108, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 224, 81, 0, 0, 32, 41, 0, 0, 184, 62, 0, 0, 0, 0, 0, 0, 67, 111, 110, 118, 101, 120, 0, 0, 50, 49, 98, 116, 67, 111, 110, 118, 101, 120, 73, 110, 116, 101, 114, 110, 97, 108, 83, 104, 97, 112, 101, 0, 224, 81, 0, 0, 80, 41, 0, 0, 136, 41, 0, 0, 0, 0, 0, 0, 49, 51, 98, 116, 67, 111, 110, 118, 101, 120, 83, 104, 97, 112, 101, 0, 224, 81, 0, 0, 120, 41, 0, 0, 216, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 42, 0, 0, 128, 0, 0, 0, 129, 0, 0, 0, 28, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 66, 0, 0, 0, 53, 0, 0, 0, 6, 0, 0, 0, 54, 0, 0, 0, 45, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 24, 0, 0, 0, 11, 0, 0, 0, 46, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 2, 0, 0, 0, 32, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 8, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 33, 0, 0, 0, 39, 0, 0, 0, 57, 0, 0, 0, 34, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 50, 53, 98, 116, 67, 111, 110, 118, 101, 120, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 224, 81, 0, 0, 32, 42, 0, 0, 184, 62, 0, 0, 0, 0, 0, 0, 67, 111, 110, 118, 101, 120, 84, 114, 105, 109, 101, 115, 104, 0, 0, 0, 0, 0, 0, 0, 152, 42, 0, 0, 130, 0, 0, 0, 131, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 50, 54, 76, 111, 99, 97, 108, 83, 117, 112, 112, 111, 114, 116, 86, 101, 114, 116, 101, 120, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 224, 81, 0, 0, 120, 42, 0, 0, 136, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 43, 0, 0, 132, 0, 0, 0, 133, 0, 0, 0, 36, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 67, 0, 0, 0, 22, 0, 0, 0, 7, 0, 0, 0, 58, 0, 0, 0, 68, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 59, 0, 0, 0, 20, 0, 0, 0, 46, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 2, 0, 0, 0, 37, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 32, 44, 0, 0, 134, 0, 0, 0, 135, 0, 0, 0, 36, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 67, 0, 0, 0, 22, 0, 0, 0, 7, 0, 0, 0, 60, 0, 0, 0, 68, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 59, 0, 0, 0, 20, 0, 0, 0, 46, 0, 0, 0, 40, 0, 0, 0, 42, 0, 0, 0, 2, 0, 0, 0, 38, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 72, 44, 0, 0, 136, 0, 0, 0, 137, 0, 0, 0, 36, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 67, 0, 0, 0, 22, 0, 0, 0, 7, 0, 0, 0, 61, 0, 0, 0, 68, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 59, 0, 0, 0, 20, 0, 0, 0, 46, 0, 0, 0, 40, 0, 0, 0, 43, 0, 0, 0, 2, 0, 0, 0, 39, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 7, 0, 0, 0, 49, 53, 98, 116, 67, 121, 108, 105, 110, 100, 101, 114, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 224, 43, 0, 0, 104, 41, 0, 0, 0, 0, 0, 0, 49, 54, 98, 116, 67, 121, 108, 105, 110, 100, 101, 114, 83, 104, 97, 112, 101, 88, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 8, 44, 0, 0, 248, 43, 0, 0, 0, 0, 0, 0, 49, 54, 98, 116, 67, 121, 108, 105, 110, 100, 101, 114, 83, 104, 97, 112, 101, 90, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 48, 44, 0, 0, 248, 43, 0, 0, 0, 0, 0, 0, 67, 121, 108, 105, 110, 100, 101, 114, 90, 0, 0, 0, 0, 0, 0, 0, 67, 121, 108, 105, 110, 100, 101, 114, 88, 0, 0, 0, 0, 0, 0, 0, 98, 116, 67, 121, 108, 105, 110, 100, 101, 114, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 0, 0, 0, 0, 67, 121, 108, 105, 110, 100, 101, 114, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 44, 0, 0, 138, 0, 0, 0, 139, 0, 0, 0, 2, 0, 0, 0, 44, 0, 0, 0, 3, 0, 0, 0, 40, 0, 0, 0, 3, 0, 0, 0, 41, 0, 0, 0, 69, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 45, 0, 0, 0, 70, 0, 0, 0, 140, 0, 0, 0, 49, 54, 98, 116, 68, 98, 118, 116, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 224, 44, 0, 0, 48, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 45, 0, 0, 141, 0, 0, 0, 142, 0, 0, 0, 28, 0, 0, 0, 71, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 50, 48, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 65, 97, 98, 98, 84, 101, 115, 116, 101, 114, 0, 0, 224, 81, 0, 0, 48, 45, 0, 0, 64, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 45, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 28, 0, 0, 0, 72, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 49, 57, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 82, 97, 121, 84, 101, 115, 116, 101, 114, 0, 0, 0, 224, 81, 0, 0, 128, 45, 0, 0, 64, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 45, 0, 0, 145, 0, 0, 0, 146, 0, 0, 0, 46, 0, 0, 0, 73, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 49, 56, 98, 116, 68, 98, 118, 116, 84, 114, 101, 101, 67, 111, 108, 108, 105, 100, 101, 114, 0, 0, 0, 0, 224, 81, 0, 0, 208, 45, 0, 0, 64, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 46, 0, 0, 147, 0, 0, 0, 148, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 21, 0, 0, 0, 66, 0, 0, 0, 51, 49, 98, 116, 68, 101, 102, 97, 117, 108, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 64, 46, 0, 0, 224, 81, 0, 0, 24, 46, 0, 0, 96, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 46, 0, 0, 149, 0, 0, 0, 150, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 78, 51, 49, 98, 116, 67, 111, 110, 118, 101, 120, 80, 108, 97, 110, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 51, 48, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 0, 0, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 192, 46, 0, 0, 224, 81, 0, 0, 144, 46, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 47, 0, 0, 151, 0, 0, 0, 152, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 78, 50, 54, 98, 116, 66, 111, 120, 66, 111, 120, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 24, 47, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 47, 0, 0, 153, 0, 0, 0, 154, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 78, 51, 52, 98, 116, 83, 112, 104, 101, 114, 101, 84, 114, 105, 97, 110, 103, 108, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 112, 47, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 48, 0, 0, 155, 0, 0, 0, 156, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 78, 51, 50, 98, 116, 83, 112, 104, 101, 114, 101, 83, 112, 104, 101, 114, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 208, 47, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 48, 0, 0, 157, 0, 0, 0, 158, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 78, 49, 54, 98, 116, 69, 109, 112, 116, 121, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 48, 48, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 48, 0, 0, 159, 0, 0, 0, 160, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 78, 50, 56, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 55, 83, 119, 97, 112, 112, 101, 100, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 0, 224, 81, 0, 0, 128, 48, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 49, 0, 0, 161, 0, 0, 0, 162, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 78, 51, 54, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 224, 81, 0, 0, 224, 48, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 49, 0, 0, 163, 0, 0, 0, 164, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 78, 50, 56, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 224, 81, 0, 0, 64, 49, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 49, 0, 0, 165, 0, 0, 0, 166, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 78, 51, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 99, 97, 118, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 55, 83, 119, 97, 112, 112, 101, 100, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 152, 49, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 50, 0, 0, 167, 0, 0, 0, 168, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 78, 51, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 99, 97, 118, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 0, 50, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 49, 50, 98, 116, 68, 105, 115, 112, 97, 116, 99, 104, 101, 114, 0, 0, 184, 81, 0, 0, 72, 50, 0, 0, 0, 0, 0, 0, 184, 50, 0, 0, 169, 0, 0, 0, 170, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 49, 54, 98, 116, 69, 109, 112, 116, 121, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 0, 0, 50, 48, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 184, 81, 0, 0, 152, 50, 0, 0, 224, 81, 0, 0, 128, 50, 0, 0, 176, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 51, 0, 0, 18, 0, 0, 0, 171, 0, 0, 0, 172, 0, 0, 0, 35, 0, 0, 0, 67, 0, 0, 0, 22, 0, 0, 0, 75, 0, 0, 0, 47, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 51, 0, 0, 18, 0, 0, 0, 173, 0, 0, 0, 174, 0, 0, 0, 35, 0, 0, 0, 67, 0, 0, 0, 22, 0, 0, 0, 75, 0, 0, 0, 48, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 49, 51, 98, 116, 71, 104, 111, 115, 116, 79, 98, 106, 101, 99, 116, 0, 224, 81, 0, 0, 40, 51, 0, 0, 160, 27, 0, 0, 0, 0, 0, 0, 50, 52, 98, 116, 80, 97, 105, 114, 67, 97, 99, 104, 105, 110, 103, 71, 104, 111, 115, 116, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 72, 51, 0, 0, 56, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 51, 0, 0, 175, 0, 0, 0, 176, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 49, 53, 98, 116, 71, 106, 107, 67, 111, 110, 118, 101, 120, 67, 97, 115, 116, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 144, 51, 0, 0, 120, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 52, 0, 0, 177, 0, 0, 0, 178, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 51, 48, 98, 116, 71, 106, 107, 69, 112, 97, 80, 101, 110, 101, 116, 114, 97, 116, 105, 111, 110, 68, 101, 112, 116, 104, 83, 111, 108, 118, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 51, 48, 98, 116, 67, 111, 110, 118, 101, 120, 80, 101, 110, 101, 116, 114, 97, 116, 105, 111, 110, 68, 101, 112, 116, 104, 83, 111, 108, 118, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 248, 51, 0, 0, 224, 81, 0, 0, 208, 51, 0, 0, 32, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 52, 0, 0, 179, 0, 0, 0, 180, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 55, 98, 116, 71, 106, 107, 80, 97, 105, 114, 68, 101, 116, 101, 99, 116, 111, 114, 0, 0, 0, 0, 0, 51, 54, 98, 116, 68, 105, 115, 99, 114, 101, 116, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 68, 101, 116, 101, 99, 116, 111, 114, 73, 110, 116, 101, 114, 102, 97, 99, 101, 0, 0, 184, 81, 0, 0, 120, 52, 0, 0, 224, 81, 0, 0, 96, 52, 0, 0, 160, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 52, 0, 0, 181, 0, 0, 0, 182, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 49, 54, 98, 116, 77, 97, 110, 105, 102, 111, 108, 100, 82, 101, 115, 117, 108, 116, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 216, 52, 0, 0, 80, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 57, 0, 0, 183, 0, 0, 0, 184, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 51, 51, 98, 116, 77, 105, 110, 107, 111, 119, 115, 107, 105, 80, 101, 110, 101, 116, 114, 97, 116, 105, 111, 110, 68, 101, 112, 116, 104, 83, 111, 108, 118, 101, 114, 0, 0, 0, 0, 0, 224, 81, 0, 0, 0, 57, 0, 0, 32, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 58, 0, 0, 185, 0, 0, 0, 186, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 90, 78, 51, 51, 98, 116, 77, 105, 110, 107, 111, 119, 115, 107, 105, 80, 101, 110, 101, 116, 114, 97, 116, 105, 111, 110, 68, 101, 112, 116, 104, 83, 111, 108, 118, 101, 114, 49, 50, 99, 97, 108, 99, 80, 101, 110, 68, 101, 112, 116, 104, 69, 82, 50, 50, 98, 116, 86, 111, 114, 111, 110, 111, 105, 83, 105, 109, 112, 108, 101, 120, 83, 111, 108, 118, 101, 114, 80, 75, 49, 51, 98, 116, 67, 111, 110, 118, 101, 120, 83, 104, 97, 112, 101, 83, 52, 95, 82, 75, 49, 49, 98, 116, 84, 114, 97, 110, 115, 102, 111, 114, 109, 83, 55, 95, 82, 57, 98, 116, 86, 101, 99, 116, 111, 114, 51, 83, 57, 95, 83, 57, 95, 80, 49, 50, 98, 116, 73, 68, 101, 98, 117, 103, 68, 114, 97, 119, 69, 50, 48, 98, 116, 73, 110, 116, 101, 114, 109, 101, 100, 105, 97, 116, 101, 82, 101, 115, 117, 108, 116, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 88, 57, 0, 0, 80, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 58, 0, 0, 187, 0, 0, 0, 188, 0, 0, 0, 15, 0, 0, 0, 68, 0, 0, 0, 23, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 16, 0, 0, 0, 49, 52, 98, 116, 79, 112, 116, 105, 109, 105, 122, 101, 100, 66, 118, 104, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 64, 58, 0, 0, 112, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 58, 0, 0, 189, 0, 0, 0, 190, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 90, 78, 49, 52, 98, 116, 79, 112, 116, 105, 109, 105, 122, 101, 100, 66, 118, 104, 53, 98, 117, 105, 108, 100, 69, 80, 50, 51, 98, 116, 83, 116, 114, 105, 100, 105, 110, 103, 77, 101, 115, 104, 73, 110, 116, 101, 114, 102, 97, 99, 101, 98, 82, 75, 57, 98, 116, 86, 101, 99, 116, 111, 114, 51, 83, 52, 95, 69, 50, 48, 78, 111, 100, 101, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 95, 48, 0, 0, 0, 0, 224, 81, 0, 0, 128, 58, 0, 0, 136, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 59, 0, 0, 191, 0, 0, 0, 192, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 90, 78, 49, 52, 98, 116, 79, 112, 116, 105, 109, 105, 122, 101, 100, 66, 118, 104, 53, 98, 117, 105, 108, 100, 69, 80, 50, 51, 98, 116, 83, 116, 114, 105, 100, 105, 110, 103, 77, 101, 115, 104, 73, 110, 116, 101, 114, 102, 97, 99, 101, 98, 82, 75, 57, 98, 116, 86, 101, 99, 116, 111, 114, 51, 83, 52, 95, 69, 50, 57, 81, 117, 97, 110, 116, 105, 122, 101, 100, 78, 111, 100, 101, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 224, 81, 0, 0, 8, 59, 0, 0, 136, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 60, 0, 0, 193, 0, 0, 0, 194, 0, 0, 0, 24, 0, 0, 0, 17, 0, 0, 0, 51, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 52, 0, 0, 0, 72, 0, 0, 0, 53, 0, 0, 0, 78, 0, 0, 0, 54, 0, 0, 0, 25, 0, 0, 0, 73, 0, 0, 0, 79, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 50, 56, 98, 116, 72, 97, 115, 104, 101, 100, 79, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 80, 97, 105, 114, 67, 97, 99, 104, 101, 0, 0, 224, 81, 0, 0, 240, 59, 0, 0, 32, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 60, 0, 0, 195, 0, 0, 0, 196, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 90, 78, 50, 56, 98, 116, 72, 97, 115, 104, 101, 100, 79, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 80, 97, 105, 114, 67, 97, 99, 104, 101, 51, 55, 114, 101, 109, 111, 118, 101, 79, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 80, 97, 105, 114, 115, 67, 111, 110, 116, 97, 105, 110, 105, 110, 103, 80, 114, 111, 120, 121, 69, 80, 49, 55, 98, 116, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 80, 114, 111, 120, 121, 80, 49, 50, 98, 116, 68, 105, 115, 112, 97, 116, 99, 104, 101, 114, 69, 49, 56, 82, 101, 109, 111, 118, 101, 80, 97, 105, 114, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 56, 60, 0, 0, 80, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 61, 0, 0, 197, 0, 0, 0, 198, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 90, 78, 50, 56, 98, 116, 72, 97, 115, 104, 101, 100, 79, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 80, 97, 105, 114, 67, 97, 99, 104, 101, 49, 57, 99, 108, 101, 97, 110, 80, 114, 111, 120, 121, 70, 114, 111, 109, 80, 97, 105, 114, 115, 69, 80, 49, 55, 98, 116, 66, 114, 111, 97, 100, 112, 104, 97, 115, 101, 80, 114, 111, 120, 121, 80, 49, 50, 98, 116, 68, 105, 115, 112, 97, 116, 99, 104, 101, 114, 69, 49, 55, 67, 108, 101, 97, 110, 80, 97, 105, 114, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 224, 81, 0, 0, 232, 60, 0, 0, 80, 27, 0, 0, 0, 0, 0, 0, 10, 215, 163, 60, 0, 0, 0, 0, 0, 0, 0, 0, 128, 62, 0, 0, 199, 0, 0, 0, 200, 0, 0, 0, 26, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 81, 0, 0, 0, 22, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 45, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 24, 0, 0, 0, 11, 0, 0, 0, 46, 0, 0, 0, 23, 0, 0, 0, 55, 0, 0, 0, 2, 0, 0, 0, 46, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 98, 116, 80, 111, 108, 121, 104, 101, 100, 114, 97, 108, 67, 111, 110, 118, 101, 120, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 96, 62, 0, 0, 104, 41, 0, 0, 0, 0, 0, 0, 51, 52, 98, 116, 80, 111, 108, 121, 104, 101, 100, 114, 97, 108, 67, 111, 110, 118, 101, 120, 65, 97, 98, 98, 67, 97, 99, 104, 105, 110, 103, 83, 104, 97, 112, 101, 0, 0, 0, 0, 224, 81, 0, 0, 144, 62, 0, 0, 128, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 63, 0, 0, 201, 0, 0, 0, 202, 0, 0, 0, 15, 0, 0, 0, 68, 0, 0, 0, 23, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 116, 79, 112, 116, 105, 109, 105, 122, 101, 100, 66, 118, 104, 78, 111, 100, 101, 68, 97, 116, 97, 0, 0, 98, 116, 81, 117, 97, 110, 116, 105, 122, 101, 100, 66, 118, 104, 78, 111, 100, 101, 68, 97, 116, 97, 0, 0, 98, 116, 66, 118, 104, 83, 117, 98, 116, 114, 101, 101, 73, 110, 102, 111, 68, 97, 116, 97, 0, 0, 0, 0, 98, 116, 81, 117, 97, 110, 116, 105, 122, 101, 100, 66, 118, 104, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 49, 52, 98, 116, 81, 117, 97, 110, 116, 105, 122, 101, 100, 66, 118, 104, 0, 0, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 88, 63, 0, 0, 0, 0, 0, 0, 224, 63, 0, 0, 203, 0, 0, 0, 204, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 50, 53, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 82, 97, 121, 99, 97, 115, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 224, 81, 0, 0, 144, 63, 0, 0, 88, 67, 0, 0, 0, 0, 0, 0, 50, 56, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 67, 111, 110, 118, 101, 120, 99, 97, 115, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 224, 81, 0, 0, 192, 63, 0, 0, 88, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 64, 0, 0, 205, 0, 0, 0, 206, 0, 0, 0, 47, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 81, 0, 0, 0, 22, 0, 0, 0, 8, 0, 0, 0, 74, 0, 0, 0, 45, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 24, 0, 0, 0, 11, 0, 0, 0, 46, 0, 0, 0, 23, 0, 0, 0, 56, 0, 0, 0, 2, 0, 0, 0, 48, 0, 0, 0, 11, 0, 0, 0, 75, 0, 0, 0, 57, 0, 0, 0, 8, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 49, 0, 0, 0, 58, 0, 0, 0, 78, 0, 0, 0, 50, 0, 0, 0, 4, 0, 0, 0, 51, 0, 0, 0, 49, 53, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 120, 64, 0, 0, 128, 62, 0, 0, 0, 0, 0, 0, 84, 114, 105, 97, 110, 103, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 65, 0, 0, 207, 0, 0, 0, 208, 0, 0, 0, 59, 0, 0, 0, 82, 0, 0, 0, 105, 115, 108, 97, 110, 100, 85, 110, 105, 111, 110, 70, 105, 110, 100, 65, 110, 100, 81, 117, 105, 99, 107, 83, 111, 114, 116, 0, 0, 0, 0, 0, 112, 114, 111, 99, 101, 115, 115, 73, 115, 108, 97, 110, 100, 115, 0, 0, 50, 53, 98, 116, 83, 105, 109, 117, 108, 97, 116, 105, 111, 110, 73, 115, 108, 97, 110, 100, 77, 97, 110, 97, 103, 101, 114, 0, 0, 0, 0, 0, 184, 81, 0, 0, 248, 64, 0, 0, 0, 0, 0, 0, 152, 65, 0, 0, 209, 0, 0, 0, 210, 0, 0, 0, 52, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 81, 0, 0, 0, 22, 0, 0, 0, 9, 0, 0, 0, 79, 0, 0, 0, 45, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 24, 0, 0, 0, 11, 0, 0, 0, 46, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 2, 0, 0, 0, 53, 0, 0, 0, 11, 0, 0, 0, 34, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 49, 51, 98, 116, 83, 112, 104, 101, 114, 101, 83, 104, 97, 112, 101, 0, 224, 81, 0, 0, 136, 65, 0, 0, 104, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 65, 0, 0, 211, 0, 0, 0, 212, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 51, 50, 98, 116, 83, 112, 104, 101, 114, 101, 83, 112, 104, 101, 114, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 200, 65, 0, 0, 208, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 66, 0, 0, 213, 0, 0, 0, 214, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 51, 52, 98, 116, 83, 112, 104, 101, 114, 101, 84, 114, 105, 97, 110, 103, 108, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 224, 81, 0, 0, 32, 66, 0, 0, 208, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 66, 0, 0, 215, 0, 0, 0, 216, 0, 0, 0, 54, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 85, 0, 0, 0, 80, 0, 0, 0, 10, 0, 0, 0, 81, 0, 0, 0, 45, 0, 0, 0, 10, 0, 0, 0, 3, 0, 0, 0, 82, 0, 0, 0, 26, 0, 0, 0, 46, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 49, 56, 98, 116, 83, 116, 97, 116, 105, 99, 80, 108, 97, 110, 101, 83, 104, 97, 112, 101, 0, 0, 0, 0, 224, 81, 0, 0, 168, 66, 0, 0, 232, 71, 0, 0, 0, 0, 0, 0, 98, 116, 83, 116, 97, 116, 105, 99, 80, 108, 97, 110, 101, 83, 104, 97, 112, 101, 68, 97, 116, 97, 0, 0, 83, 84, 65, 84, 73, 67, 80, 76, 65, 78, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 67, 0, 0, 217, 0, 0, 0, 218, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 50, 50, 98, 116, 83, 117, 98, 115, 105, 109, 112, 108, 101, 120, 67, 111, 110, 118, 101, 120, 67, 97, 115, 116, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 16, 67, 0, 0, 120, 40, 0, 0, 0, 0, 0, 0, 49, 56, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 184, 81, 0, 0, 64, 67, 0, 0, 51, 49, 98, 116, 73, 110, 116, 101, 114, 110, 97, 108, 84, 114, 105, 97, 110, 103, 108, 101, 73, 110, 100, 101, 120, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 96, 67, 0, 0, 0, 0, 0, 0, 240, 67, 0, 0, 219, 0, 0, 0, 220, 0, 0, 0, 56, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 83, 0, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 84, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 85, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 49, 52, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 216, 67, 0, 0, 32, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 68, 0, 0, 221, 0, 0, 0, 222, 0, 0, 0, 14, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 90, 0, 0, 0, 29, 0, 0, 0, 2, 0, 0, 0, 86, 0, 0, 0, 45, 0, 0, 0, 10, 0, 0, 0, 3, 0, 0, 0, 87, 0, 0, 0, 28, 0, 0, 0, 46, 0, 0, 0, 57, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 49, 57, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 0, 0, 0, 224, 81, 0, 0, 88, 68, 0, 0, 232, 71, 0, 0, 0, 0, 0, 0, 84, 82, 73, 65, 78, 71, 76, 69, 77, 69, 83, 72, 0, 0, 0, 0, 0, 0, 0, 0, 192, 68, 0, 0, 223, 0, 0, 0, 224, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 50, 49, 83, 117, 112, 112, 111, 114, 116, 86, 101, 114, 116, 101, 120, 67, 97, 108, 108, 98, 97, 99, 107, 0, 224, 81, 0, 0, 168, 68, 0, 0, 88, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 69, 0, 0, 225, 0, 0, 0, 226, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 90, 78, 75, 49, 57, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 77, 101, 115, 104, 83, 104, 97, 112, 101, 49, 57, 112, 114, 111, 99, 101, 115, 115, 65, 108, 108, 84, 114, 105, 97, 110, 103, 108, 101, 115, 69, 80, 49, 56, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 82, 75, 57, 98, 116, 86, 101, 99, 116, 111, 114, 51, 83, 52, 95, 69, 49, 54, 70, 105, 108, 116, 101, 114, 101, 100, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 224, 81, 0, 0, 232, 68, 0, 0, 136, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 69, 0, 0, 227, 0, 0, 0, 228, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 50, 50, 83, 112, 104, 101, 114, 101, 84, 114, 105, 97, 110, 103, 108, 101, 68, 101, 116, 101, 99, 116, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 120, 69, 0, 0, 160, 52, 0, 0, 0, 0, 0, 0, 51, 48, 98, 116, 65, 99, 116, 105, 118, 97, 116, 105, 110, 103, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 168, 69, 0, 0, 176, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 70, 0, 0, 229, 0, 0, 0, 230, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 50, 54, 98, 116, 66, 111, 120, 66, 111, 120, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 224, 81, 0, 0, 0, 70, 0, 0, 208, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 70, 0, 0, 231, 0, 0, 0, 232, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 49, 54, 98, 116, 66, 111, 120, 66, 111, 120, 68, 101, 116, 101, 99, 116, 111, 114, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 72, 70, 0, 0, 160, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 70, 0, 0, 233, 0, 0, 0, 234, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 50, 56, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 224, 81, 0, 0, 144, 70, 0, 0, 208, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 71, 0, 0, 235, 0, 0, 0, 236, 0, 0, 0, 28, 0, 0, 0, 93, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 50, 50, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 76, 101, 97, 102, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 232, 70, 0, 0, 64, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 71, 0, 0, 237, 0, 0, 0, 238, 0, 0, 0, 12, 0, 0, 0, 6, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 51, 54, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 224, 81, 0, 0, 56, 71, 0, 0, 208, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 71, 0, 0, 239, 0, 0, 0, 240, 0, 0, 0, 64, 0, 0, 0, 95, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 51, 48, 98, 116, 67, 111, 109, 112, 111, 117, 110, 100, 67, 111, 109, 112, 111, 117, 110, 100, 76, 101, 97, 102, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 152, 71, 0, 0, 64, 35, 0, 0, 0, 0, 0, 0, 49, 52, 98, 116, 67, 111, 110, 99, 97, 118, 101, 83, 104, 97, 112, 101, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 208, 71, 0, 0, 216, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 72, 0, 0, 241, 0, 0, 0, 242, 0, 0, 0, 13, 0, 0, 0, 7, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 72, 0, 0, 243, 0, 0, 0, 244, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 51, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 99, 97, 118, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 0, 224, 81, 0, 0, 48, 72, 0, 0, 208, 69, 0, 0, 0, 0, 0, 0, 50, 52, 98, 116, 67, 111, 110, 118, 101, 120, 84, 114, 105, 97, 110, 103, 108, 101, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 104, 72, 0, 0, 88, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 73, 0, 0, 245, 0, 0, 0, 246, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 90, 78, 51, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 99, 97, 118, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 50, 49, 99, 97, 108, 99, 117, 108, 97, 116, 101, 84, 105, 109, 101, 79, 102, 73, 109, 112, 97, 99, 116, 69, 80, 49, 55, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 83, 49, 95, 82, 75, 49, 54, 98, 116, 68, 105, 115, 112, 97, 116, 99, 104, 101, 114, 73, 110, 102, 111, 80, 49, 54, 98, 116, 77, 97, 110, 105, 102, 111, 108, 100, 82, 101, 115, 117, 108, 116, 69, 51, 49, 76, 111, 99, 97, 108, 84, 114, 105, 97, 110, 103, 108, 101, 83, 112, 104, 101, 114, 101, 67, 97, 115, 116, 67, 97, 108, 108, 98, 97, 99, 107, 0, 0, 0, 224, 81, 0, 0, 176, 72, 0, 0, 88, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 73, 0, 0, 247, 0, 0, 0, 248, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 73, 0, 0, 249, 0, 0, 0, 250, 0, 0, 0, 14, 0, 0, 0, 8, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 50, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 118, 101, 120, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 152, 73, 0, 0, 208, 69, 0, 0, 0, 0, 0, 0, 78, 50, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 118, 101, 120, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 48, 67, 114, 101, 97, 116, 101, 70, 117, 110, 99, 69, 0, 224, 81, 0, 0, 200, 73, 0, 0, 232, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 74, 0, 0, 251, 0, 0, 0, 252, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 50, 52, 98, 116, 80, 101, 114, 116, 117, 114, 98, 101, 100, 67, 111, 110, 116, 97, 99, 116, 82, 101, 115, 117, 108, 116, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 32, 74, 0, 0, 240, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 253, 0, 0, 0, 254, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 90, 78, 50, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 118, 101, 120, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 54, 112, 114, 111, 99, 101, 115, 115, 67, 111, 108, 108, 105, 115, 105, 111, 110, 69, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 83, 50, 95, 82, 75, 49, 54, 98, 116, 68, 105, 115, 112, 97, 116, 99, 104, 101, 114, 73, 110, 102, 111, 80, 49, 54, 98, 116, 77, 97, 110, 105, 102, 111, 108, 100, 82, 101, 115, 117, 108, 116, 69, 50, 49, 98, 116, 87, 105, 116, 104, 111, 117, 116, 77, 97, 114, 103, 105, 110, 82, 101, 115, 117, 108, 116, 95, 48, 0, 0, 224, 81, 0, 0, 112, 74, 0, 0, 80, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 75, 0, 0, 255, 0, 0, 0, 0, 1, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 90, 78, 50, 51, 98, 116, 67, 111, 110, 118, 101, 120, 67, 111, 110, 118, 101, 120, 65, 108, 103, 111, 114, 105, 116, 104, 109, 49, 54, 112, 114, 111, 99, 101, 115, 115, 67, 111, 108, 108, 105, 115, 105, 111, 110, 69, 80, 75, 50, 52, 98, 116, 67, 111, 108, 108, 105, 115, 105, 111, 110, 79, 98, 106, 101, 99, 116, 87, 114, 97, 112, 112, 101, 114, 83, 50, 95, 82, 75, 49, 54, 98, 116, 68, 105, 115, 112, 97, 116, 99, 104, 101, 114, 73, 110, 102, 111, 80, 49, 54, 98, 116, 77, 97, 110, 105, 102, 111, 108, 100, 82, 101, 115, 117, 108, 116, 69, 49, 51, 98, 116, 68, 117, 109, 109, 121, 82, 101, 115, 117, 108, 116, 0, 0, 0, 0, 224, 81, 0, 0, 48, 75, 0, 0, 80, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 76, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 15, 0, 0, 0, 9, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 51, 49, 98, 116, 67, 111, 110, 118, 101, 120, 80, 108, 97, 110, 101, 67, 111, 108, 108, 105, 115, 105, 111, 110, 65, 108, 103, 111, 114, 105, 116, 104, 109, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 232, 75, 0, 0, 176, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 76, 0, 0, 3, 1, 0, 0, 4, 1, 0, 0, 49, 56, 98, 116, 67, 111, 110, 118, 101, 120, 80, 111, 108, 121, 104, 101, 100, 114, 111, 110, 0, 0, 0, 0, 184, 81, 0, 0, 48, 76, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 76, 0, 0, 5, 1, 0, 0, 6, 1, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 50, 51, 98, 116, 72, 97, 115, 104, 101, 100, 83, 105, 109, 112, 108, 101, 80, 97, 105, 114, 67, 97, 99, 104, 101, 0, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 168, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 116, 73, 110, 116, 73, 110, 100, 101, 120, 68, 97, 116, 97, 0, 0, 98, 116, 83, 104, 111, 114, 116, 73, 110, 116, 73, 110, 100, 101, 120, 84, 114, 105, 112, 108, 101, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 98, 116, 67, 104, 97, 114, 73, 110, 100, 101, 120, 84, 114, 105, 112, 108, 101, 116, 68, 97, 116, 97, 0, 0, 98, 116, 86, 101, 99, 116, 111, 114, 51, 70, 108, 111, 97, 116, 68, 97, 116, 97, 0, 0, 0, 0, 0, 0, 98, 116, 86, 101, 99, 116, 111, 114, 51, 68, 111, 117, 98, 108, 101, 68, 97, 116, 97, 0, 0, 0, 0, 0, 98, 116, 77, 101, 115, 104, 80, 97, 114, 116, 68, 97, 116, 97, 0, 0, 98, 116, 83, 116, 114, 105, 100, 105, 110, 103, 77, 101, 115, 104, 73, 110, 116, 101, 114, 102, 97, 99, 101, 68, 97, 116, 97, 0, 0, 0, 0, 0, 50, 51, 98, 116, 83, 116, 114, 105, 100, 105, 110, 103, 77, 101, 115, 104, 73, 110, 116, 101, 114, 102, 97, 99, 101, 0, 0, 0, 0, 0, 0, 0, 184, 81, 0, 0, 144, 77, 0, 0, 0, 0, 0, 0, 32, 78, 0, 0, 7, 1, 0, 0, 8, 1, 0, 0, 56, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 83, 0, 0, 0, 99, 0, 0, 0, 100, 0, 0, 0, 84, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 85, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 50, 54, 98, 116, 84, 114, 105, 97, 110, 103, 108, 101, 73, 110, 100, 101, 120, 86, 101, 114, 116, 101, 120, 65, 114, 114, 97, 121, 0, 0, 0, 0, 224, 81, 0, 0, 0, 78, 0, 0, 176, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 111, 111, 116, 0, 0, 0, 0, 72, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 117, 110, 99, 97, 117, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 111, 102, 32, 116, 121, 112, 101, 32, 37, 115, 58, 32, 37, 115, 0, 0, 0, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 111, 102, 32, 116, 121, 112, 101, 32, 37, 115, 0, 0, 0, 0, 0, 0, 0, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 102, 111, 114, 101, 105, 103, 110, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 0, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 116, 104, 114, 101, 97, 100, 95, 111, 110, 99, 101, 32, 102, 97, 105, 108, 117, 114, 101, 32, 105, 110, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 95, 102, 97, 115, 116, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 112, 116, 104, 114, 101, 97, 100, 32, 107, 101, 121, 32, 102, 111, 114, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 40, 41, 0, 0, 0, 0, 0, 0, 0, 99, 97, 110, 110, 111, 116, 32, 122, 101, 114, 111, 32, 111, 117, 116, 32, 116, 104, 114, 101, 97, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 40, 80, 0, 0, 9, 1, 0, 0, 10, 1, 0, 0, 89 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 10240);
allocate([ 115, 116, 100, 58, 58, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0, 0, 83, 116, 57, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0, 0, 0, 0, 224, 81, 0, 0, 24, 80, 0, 0, 176, 80, 0, 0, 0, 0, 0, 0, 116, 101, 114, 109, 105, 110, 97, 116, 101, 95, 104, 97, 110, 100, 108, 101, 114, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 108, 121, 32, 114, 101, 116, 117, 114, 110, 101, 100, 0, 116, 101, 114, 109, 105, 110, 97, 116, 101, 95, 104, 97, 110, 100, 108, 101, 114, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 108, 121, 32, 116, 104, 114, 101, 119, 32, 97, 110, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 116, 57, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 0, 0, 0, 184, 81, 0, 0, 160, 80, 0, 0, 83, 116, 57, 116, 121, 112, 101, 95, 105, 110, 102, 111, 0, 0, 0, 0, 184, 81, 0, 0, 184, 80, 0, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 54, 95, 95, 115, 104, 105, 109, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 208, 80, 0, 0, 200, 80, 0, 0, 0, 0, 0, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 55, 95, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 8, 81, 0, 0, 248, 80, 0, 0, 0, 0, 0, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 57, 95, 95, 112, 111, 105, 110, 116, 101, 114, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 0, 0, 0, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 55, 95, 95, 112, 98, 97, 115, 101, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 104, 81, 0, 0, 248, 80, 0, 0, 0, 0, 0, 0, 224, 81, 0, 0, 64, 81, 0, 0, 144, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 81, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 13, 1, 0, 0, 14, 1, 0, 0, 31, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 40, 82, 0, 0, 11, 1, 0, 0, 15, 1, 0, 0, 13, 1, 0, 0, 14, 1, 0, 0, 31, 0, 0, 0, 5, 0, 0, 0, 17, 0, 0, 0, 63, 0, 0, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 50, 48, 95, 95, 115, 105, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 0, 0, 0, 224, 81, 0, 0, 0, 82, 0, 0, 48, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 82, 0, 0, 11, 1, 0, 0, 16, 1, 0, 0, 13, 1, 0, 0, 14, 1, 0, 0, 31, 0, 0, 0, 6, 0, 0, 0, 18, 0, 0, 0, 64, 0, 0, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 50, 49, 95, 95, 118, 109, 105, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 0, 0, 224, 81, 0, 0, 96, 82, 0, 0, 48, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 20480);
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}
function copyTempDouble(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
 HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
 HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
 HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
 HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}
var _cosf = Math_cos;
Module["_i64Subtract"] = _i64Subtract;
var _fabsf = Math_abs;
var ___errno_state = 0;
function ___setErrNo(value) {
 HEAP32[___errno_state >> 2] = value;
 return value;
}
var ERRNO_CODES = {
 EPERM: 1,
 ENOENT: 2,
 ESRCH: 3,
 EINTR: 4,
 EIO: 5,
 ENXIO: 6,
 E2BIG: 7,
 ENOEXEC: 8,
 EBADF: 9,
 ECHILD: 10,
 EAGAIN: 11,
 EWOULDBLOCK: 11,
 ENOMEM: 12,
 EACCES: 13,
 EFAULT: 14,
 ENOTBLK: 15,
 EBUSY: 16,
 EEXIST: 17,
 EXDEV: 18,
 ENODEV: 19,
 ENOTDIR: 20,
 EISDIR: 21,
 EINVAL: 22,
 ENFILE: 23,
 EMFILE: 24,
 ENOTTY: 25,
 ETXTBSY: 26,
 EFBIG: 27,
 ENOSPC: 28,
 ESPIPE: 29,
 EROFS: 30,
 EMLINK: 31,
 EPIPE: 32,
 EDOM: 33,
 ERANGE: 34,
 ENOMSG: 42,
 EIDRM: 43,
 ECHRNG: 44,
 EL2NSYNC: 45,
 EL3HLT: 46,
 EL3RST: 47,
 ELNRNG: 48,
 EUNATCH: 49,
 ENOCSI: 50,
 EL2HLT: 51,
 EDEADLK: 35,
 ENOLCK: 37,
 EBADE: 52,
 EBADR: 53,
 EXFULL: 54,
 ENOANO: 55,
 EBADRQC: 56,
 EBADSLT: 57,
 EDEADLOCK: 35,
 EBFONT: 59,
 ENOSTR: 60,
 ENODATA: 61,
 ETIME: 62,
 ENOSR: 63,
 ENONET: 64,
 ENOPKG: 65,
 EREMOTE: 66,
 ENOLINK: 67,
 EADV: 68,
 ESRMNT: 69,
 ECOMM: 70,
 EPROTO: 71,
 EMULTIHOP: 72,
 EDOTDOT: 73,
 EBADMSG: 74,
 ENOTUNIQ: 76,
 EBADFD: 77,
 EREMCHG: 78,
 ELIBACC: 79,
 ELIBBAD: 80,
 ELIBSCN: 81,
 ELIBMAX: 82,
 ELIBEXEC: 83,
 ENOSYS: 38,
 ENOTEMPTY: 39,
 ENAMETOOLONG: 36,
 ELOOP: 40,
 EOPNOTSUPP: 95,
 EPFNOSUPPORT: 96,
 ECONNRESET: 104,
 ENOBUFS: 105,
 EAFNOSUPPORT: 97,
 EPROTOTYPE: 91,
 ENOTSOCK: 88,
 ENOPROTOOPT: 92,
 ESHUTDOWN: 108,
 ECONNREFUSED: 111,
 EADDRINUSE: 98,
 ECONNABORTED: 103,
 ENETUNREACH: 101,
 ENETDOWN: 100,
 ETIMEDOUT: 110,
 EHOSTDOWN: 112,
 EHOSTUNREACH: 113,
 EINPROGRESS: 115,
 EALREADY: 114,
 EDESTADDRREQ: 89,
 EMSGSIZE: 90,
 EPROTONOSUPPORT: 93,
 ESOCKTNOSUPPORT: 94,
 EADDRNOTAVAIL: 99,
 ENETRESET: 102,
 EISCONN: 106,
 ENOTCONN: 107,
 ETOOMANYREFS: 109,
 EUSERS: 87,
 EDQUOT: 122,
 ESTALE: 116,
 ENOTSUP: 95,
 ENOMEDIUM: 123,
 EILSEQ: 84,
 EOVERFLOW: 75,
 ECANCELED: 125,
 ENOTRECOVERABLE: 131,
 EOWNERDEAD: 130,
 ESTRPIPE: 86
};
function _sysconf(name) {
 switch (name) {
 case 30:
  return PAGE_SIZE;
 case 132:
 case 133:
 case 12:
 case 137:
 case 138:
 case 15:
 case 235:
 case 16:
 case 17:
 case 18:
 case 19:
 case 20:
 case 149:
 case 13:
 case 10:
 case 236:
 case 153:
 case 9:
 case 21:
 case 22:
 case 159:
 case 154:
 case 14:
 case 77:
 case 78:
 case 139:
 case 80:
 case 81:
 case 79:
 case 82:
 case 68:
 case 67:
 case 164:
 case 11:
 case 29:
 case 47:
 case 48:
 case 95:
 case 52:
 case 51:
 case 46:
  return 200809;
 case 27:
 case 246:
 case 127:
 case 128:
 case 23:
 case 24:
 case 160:
 case 161:
 case 181:
 case 182:
 case 242:
 case 183:
 case 184:
 case 243:
 case 244:
 case 245:
 case 165:
 case 178:
 case 179:
 case 49:
 case 50:
 case 168:
 case 169:
 case 175:
 case 170:
 case 171:
 case 172:
 case 97:
 case 76:
 case 32:
 case 173:
 case 35:
  return -1;
 case 176:
 case 177:
 case 7:
 case 155:
 case 8:
 case 157:
 case 125:
 case 126:
 case 92:
 case 93:
 case 129:
 case 130:
 case 131:
 case 94:
 case 91:
  return 1;
 case 74:
 case 60:
 case 69:
 case 70:
 case 4:
  return 1024;
 case 31:
 case 42:
 case 72:
  return 32;
 case 87:
 case 26:
 case 33:
  return 2147483647;
 case 34:
 case 1:
  return 47839;
 case 38:
 case 36:
  return 99;
 case 43:
 case 37:
  return 2048;
 case 0:
  return 2097152;
 case 3:
  return 65536;
 case 28:
  return 32768;
 case 44:
  return 32767;
 case 75:
  return 16384;
 case 39:
  return 1e3;
 case 89:
  return 700;
 case 71:
  return 256;
 case 40:
  return 255;
 case 2:
  return 100;
 case 180:
  return 64;
 case 25:
  return 20;
 case 5:
  return 16;
 case 6:
  return 6;
 case 73:
  return 4;
 case 84:
  {
   if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
   return 1;
  }
 }
 ___setErrNo(ERRNO_CODES.EINVAL);
 return -1;
}
function __ZSt18uncaught_exceptionv() {
 return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}
var EXCEPTIONS = {
 last: 0,
 caught: [],
 infos: {},
 deAdjust: (function(adjusted) {
  if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
  for (var ptr in EXCEPTIONS.infos) {
   var info = EXCEPTIONS.infos[ptr];
   if (info.adjusted === adjusted) {
    return ptr;
   }
  }
  return adjusted;
 }),
 addRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount++;
 }),
 decRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  assert(info.refcount > 0);
  info.refcount--;
  if (info.refcount === 0) {
   if (info.destructor) {
    Runtime.dynCall("vi", info.destructor, [ ptr ]);
   }
   delete EXCEPTIONS.infos[ptr];
   ___cxa_free_exception(ptr);
  }
 }),
 clearRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount = 0;
 })
};
function ___resumeException(ptr) {
 if (!EXCEPTIONS.last) {
  EXCEPTIONS.last = ptr;
 }
 EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___cxa_find_matching_catch() {
 var thrown = EXCEPTIONS.last;
 if (!thrown) {
  return (asm["setTempRet0"](0), 0) | 0;
 }
 var info = EXCEPTIONS.infos[thrown];
 var throwntype = info.type;
 if (!throwntype) {
  return (asm["setTempRet0"](0), thrown) | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 var pointer = Module["___cxa_is_pointer_type"](throwntype);
 if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
 HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;
 thrown = ___cxa_find_matching_catch.buffer;
 for (var i = 0; i < typeArray.length; i++) {
  if (typeArray[i] && Module["___cxa_can_catch"](typeArray[i], throwntype, thrown)) {
   thrown = HEAP32[thrown >> 2];
   info.adjusted = thrown;
   return (asm["setTempRet0"](typeArray[i]), thrown) | 0;
  }
 }
 thrown = HEAP32[thrown >> 2];
 return (asm["setTempRet0"](throwntype), thrown) | 0;
}
function ___cxa_throw(ptr, type, destructor) {
 EXCEPTIONS.infos[ptr] = {
  ptr: ptr,
  adjusted: ptr,
  type: type,
  destructor: destructor,
  refcount: 0
 };
 EXCEPTIONS.last = ptr;
 if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
  __ZSt18uncaught_exceptionv.uncaught_exception = 1;
 } else {
  __ZSt18uncaught_exceptionv.uncaught_exception++;
 }
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
Module["_memset"] = _memset;
function _abort() {
 Module["abort"]();
}
function _pthread_once(ptr, func) {
 if (!_pthread_once.seen) _pthread_once.seen = {};
 if (ptr in _pthread_once.seen) return;
 Runtime.dynCall("v", func);
 _pthread_once.seen[ptr] = 1;
}
var _acosf = Math_acos;
Module["_strlen"] = _strlen;
var _sqrtf = Math_sqrt;
var FS = undefined;
var SOCKFS = undefined;
function _send(fd, buf, len, flags) {
 var sock = SOCKFS.getSocket(fd);
 if (!sock) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 return _write(fd, buf, len);
}
function _pwrite(fildes, buf, nbyte, offset) {
 var stream = FS.getStream(fildes);
 if (!stream) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 try {
  var slab = HEAP8;
  return FS.write(stream, slab, buf, nbyte, offset);
 } catch (e) {
  FS.handleFSError(e);
  return -1;
 }
}
function _write(fildes, buf, nbyte) {
 var stream = FS.getStream(fildes);
 if (!stream) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 try {
  var slab = HEAP8;
  return FS.write(stream, slab, buf, nbyte);
 } catch (e) {
  FS.handleFSError(e);
  return -1;
 }
}
function _fileno(stream) {
 stream = FS.getStreamFromPtr(stream);
 if (!stream) return -1;
 return stream.fd;
}
function _fputc(c, stream) {
 var chr = unSign(c & 255);
 HEAP8[_fputc.ret >> 0] = chr;
 var fd = _fileno(stream);
 var ret = _write(fd, _fputc.ret, 1);
 if (ret == -1) {
  var streamObj = FS.getStreamFromPtr(stream);
  if (streamObj) streamObj.error = true;
  return -1;
 } else {
  return chr;
 }
}
var PTHREAD_SPECIFIC = {};
function _pthread_getspecific(key) {
 return PTHREAD_SPECIFIC[key] || 0;
}
Module["_i64Add"] = _i64Add;
var PTHREAD_SPECIFIC_NEXT_KEY = 1;
function _pthread_key_create(key, destructor) {
 if (key == 0) {
  return ERRNO_CODES.EINVAL;
 }
 HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
 PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
 PTHREAD_SPECIFIC_NEXT_KEY++;
 return 0;
}
var _llvm_pow_f32 = Math_pow;
function _fmod(x, y) {
 return x % y;
}
function _fmodf() {
 return _fmod.apply(null, arguments);
}
function _pthread_setspecific(key, value) {
 if (!(key in PTHREAD_SPECIFIC)) {
  return ERRNO_CODES.EINVAL;
 }
 PTHREAD_SPECIFIC[key] = value;
 return 0;
}
var _atan2f = Math_atan2;
function ___cxa_pure_virtual() {
 ABORT = true;
 throw "Pure virtual function called!";
}
function ___cxa_guard_release() {}
var _asinf = Math_asin;
function ___cxa_guard_acquire(variable) {
 if (!HEAP8[variable >> 0]) {
  HEAP8[variable >> 0] = 1;
  return 1;
 }
 return 0;
}
function _gettimeofday(ptr) {
 var now = Date.now();
 HEAP32[ptr >> 2] = now / 1e3 | 0;
 HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
 return 0;
}
function _emscripten_asm_const_double(code) {
 var args = Array.prototype.slice.call(arguments, 1);
 return +Runtime.getAsmConst(code, args.length).apply(null, args);
}
function ___cxa_begin_catch(ptr) {
 __ZSt18uncaught_exceptionv.uncaught_exception--;
 EXCEPTIONS.caught.push(ptr);
 EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
 return ptr;
}
var _sinf = Math_sin;
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
Module["_memcpy"] = _memcpy;
function _sbrk(bytes) {
 var self = _sbrk;
 if (!self.called) {
  DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
  self.called = true;
  assert(Runtime.dynamicAlloc);
  self.alloc = Runtime.dynamicAlloc;
  Runtime.dynamicAlloc = (function() {
   abort("cannot dynamically allocate, sbrk now has control");
  });
 }
 var ret = DYNAMICTOP;
 if (bytes != 0) self.alloc(bytes);
 return ret;
}
Module["_memmove"] = _memmove;
function _malloc(bytes) {
 var ptr = Runtime.dynamicAlloc(bytes + 8);
 return ptr + 8 & 4294967288;
}
Module["_malloc"] = _malloc;
function ___cxa_allocate_exception(size) {
 return _malloc(size);
}
function ___errno_location() {
 return ___errno_state;
}
Module["_llvm_bswap_i32"] = _llvm_bswap_i32;
function _llvm_trap() {
 abort("trap!");
}
function _time(ptr) {
 var ret = Date.now() / 1e3 | 0;
 if (ptr) {
  HEAP32[ptr >> 2] = ret;
 }
 return ret;
}
var _UItoF = true;
function _fwrite(ptr, size, nitems, stream) {
 var bytesToWrite = nitems * size;
 if (bytesToWrite == 0) return 0;
 var fd = _fileno(stream);
 var bytesWritten = _write(fd, ptr, bytesToWrite);
 if (bytesWritten == -1) {
  var streamObj = FS.getStreamFromPtr(stream);
  if (streamObj) streamObj.error = true;
  return 0;
 } else {
  return bytesWritten / size | 0;
 }
}
function __reallyNegative(x) {
 return x < 0 || x === 0 && 1 / x === -Infinity;
}
function __formatString(format, varargs) {
 var textIndex = format;
 var argIndex = 0;
 function getNextArg(type) {
  var ret;
  if (type === "double") {
   ret = (HEAP32[tempDoublePtr >> 2] = HEAP32[varargs + argIndex >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[varargs + (argIndex + 4) >> 2], +HEAPF64[tempDoublePtr >> 3]);
  } else if (type == "i64") {
   ret = [ HEAP32[varargs + argIndex >> 2], HEAP32[varargs + (argIndex + 4) >> 2] ];
  } else {
   type = "i32";
   ret = HEAP32[varargs + argIndex >> 2];
  }
  argIndex += Runtime.getNativeFieldSize(type);
  return ret;
 }
 var ret = [];
 var curr, next, currArg;
 while (1) {
  var startTextIndex = textIndex;
  curr = HEAP8[textIndex >> 0];
  if (curr === 0) break;
  next = HEAP8[textIndex + 1 >> 0];
  if (curr == 37) {
   var flagAlwaysSigned = false;
   var flagLeftAlign = false;
   var flagAlternative = false;
   var flagZeroPad = false;
   var flagPadSign = false;
   flagsLoop : while (1) {
    switch (next) {
    case 43:
     flagAlwaysSigned = true;
     break;
    case 45:
     flagLeftAlign = true;
     break;
    case 35:
     flagAlternative = true;
     break;
    case 48:
     if (flagZeroPad) {
      break flagsLoop;
     } else {
      flagZeroPad = true;
      break;
     }
    case 32:
     flagPadSign = true;
     break;
    default:
     break flagsLoop;
    }
    textIndex++;
    next = HEAP8[textIndex + 1 >> 0];
   }
   var width = 0;
   if (next == 42) {
    width = getNextArg("i32");
    textIndex++;
    next = HEAP8[textIndex + 1 >> 0];
   } else {
    while (next >= 48 && next <= 57) {
     width = width * 10 + (next - 48);
     textIndex++;
     next = HEAP8[textIndex + 1 >> 0];
    }
   }
   var precisionSet = false, precision = -1;
   if (next == 46) {
    precision = 0;
    precisionSet = true;
    textIndex++;
    next = HEAP8[textIndex + 1 >> 0];
    if (next == 42) {
     precision = getNextArg("i32");
     textIndex++;
    } else {
     while (1) {
      var precisionChr = HEAP8[textIndex + 1 >> 0];
      if (precisionChr < 48 || precisionChr > 57) break;
      precision = precision * 10 + (precisionChr - 48);
      textIndex++;
     }
    }
    next = HEAP8[textIndex + 1 >> 0];
   }
   if (precision < 0) {
    precision = 6;
    precisionSet = false;
   }
   var argSize;
   switch (String.fromCharCode(next)) {
   case "h":
    var nextNext = HEAP8[textIndex + 2 >> 0];
    if (nextNext == 104) {
     textIndex++;
     argSize = 1;
    } else {
     argSize = 2;
    }
    break;
   case "l":
    var nextNext = HEAP8[textIndex + 2 >> 0];
    if (nextNext == 108) {
     textIndex++;
     argSize = 8;
    } else {
     argSize = 4;
    }
    break;
   case "L":
   case "q":
   case "j":
    argSize = 8;
    break;
   case "z":
   case "t":
   case "I":
    argSize = 4;
    break;
   default:
    argSize = null;
   }
   if (argSize) textIndex++;
   next = HEAP8[textIndex + 1 >> 0];
   switch (String.fromCharCode(next)) {
   case "d":
   case "i":
   case "u":
   case "o":
   case "x":
   case "X":
   case "p":
    {
     var signed = next == 100 || next == 105;
     argSize = argSize || 4;
     var currArg = getNextArg("i" + argSize * 8);
     var origArg = currArg;
     var argText;
     if (argSize == 8) {
      currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
     }
     if (argSize <= 4) {
      var limit = Math.pow(256, argSize) - 1;
      currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
     }
     var currAbsArg = Math.abs(currArg);
     var prefix = "";
     if (next == 100 || next == 105) {
      if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else argText = reSign(currArg, 8 * argSize, 1).toString(10);
     } else if (next == 117) {
      if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else argText = unSign(currArg, 8 * argSize, 1).toString(10);
      currArg = Math.abs(currArg);
     } else if (next == 111) {
      argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
     } else if (next == 120 || next == 88) {
      prefix = flagAlternative && currArg != 0 ? "0x" : "";
      if (argSize == 8 && i64Math) {
       if (origArg[1]) {
        argText = (origArg[1] >>> 0).toString(16);
        var lower = (origArg[0] >>> 0).toString(16);
        while (lower.length < 8) lower = "0" + lower;
        argText += lower;
       } else {
        argText = (origArg[0] >>> 0).toString(16);
       }
      } else if (currArg < 0) {
       currArg = -currArg;
       argText = (currAbsArg - 1).toString(16);
       var buffer = [];
       for (var i = 0; i < argText.length; i++) {
        buffer.push((15 - parseInt(argText[i], 16)).toString(16));
       }
       argText = buffer.join("");
       while (argText.length < argSize * 2) argText = "f" + argText;
      } else {
       argText = currAbsArg.toString(16);
      }
      if (next == 88) {
       prefix = prefix.toUpperCase();
       argText = argText.toUpperCase();
      }
     } else if (next == 112) {
      if (currAbsArg === 0) {
       argText = "(nil)";
      } else {
       prefix = "0x";
       argText = currAbsArg.toString(16);
      }
     }
     if (precisionSet) {
      while (argText.length < precision) {
       argText = "0" + argText;
      }
     }
     if (currArg >= 0) {
      if (flagAlwaysSigned) {
       prefix = "+" + prefix;
      } else if (flagPadSign) {
       prefix = " " + prefix;
      }
     }
     if (argText.charAt(0) == "-") {
      prefix = "-" + prefix;
      argText = argText.substr(1);
     }
     while (prefix.length + argText.length < width) {
      if (flagLeftAlign) {
       argText += " ";
      } else {
       if (flagZeroPad) {
        argText = "0" + argText;
       } else {
        prefix = " " + prefix;
       }
      }
     }
     argText = prefix + argText;
     argText.split("").forEach((function(chr) {
      ret.push(chr.charCodeAt(0));
     }));
     break;
    }
   case "f":
   case "F":
   case "e":
   case "E":
   case "g":
   case "G":
    {
     var currArg = getNextArg("double");
     var argText;
     if (isNaN(currArg)) {
      argText = "nan";
      flagZeroPad = false;
     } else if (!isFinite(currArg)) {
      argText = (currArg < 0 ? "-" : "") + "inf";
      flagZeroPad = false;
     } else {
      var isGeneral = false;
      var effectivePrecision = Math.min(precision, 20);
      if (next == 103 || next == 71) {
       isGeneral = true;
       precision = precision || 1;
       var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
       if (precision > exponent && exponent >= -4) {
        next = (next == 103 ? "f" : "F").charCodeAt(0);
        precision -= exponent + 1;
       } else {
        next = (next == 103 ? "e" : "E").charCodeAt(0);
        precision--;
       }
       effectivePrecision = Math.min(precision, 20);
      }
      if (next == 101 || next == 69) {
       argText = currArg.toExponential(effectivePrecision);
       if (/[eE][-+]\d$/.test(argText)) {
        argText = argText.slice(0, -1) + "0" + argText.slice(-1);
       }
      } else if (next == 102 || next == 70) {
       argText = currArg.toFixed(effectivePrecision);
       if (currArg === 0 && __reallyNegative(currArg)) {
        argText = "-" + argText;
       }
      }
      var parts = argText.split("e");
      if (isGeneral && !flagAlternative) {
       while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
        parts[0] = parts[0].slice(0, -1);
       }
      } else {
       if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
       while (precision > effectivePrecision++) parts[0] += "0";
      }
      argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
      if (next == 69) argText = argText.toUpperCase();
      if (currArg >= 0) {
       if (flagAlwaysSigned) {
        argText = "+" + argText;
       } else if (flagPadSign) {
        argText = " " + argText;
       }
      }
     }
     while (argText.length < width) {
      if (flagLeftAlign) {
       argText += " ";
      } else {
       if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
        argText = argText[0] + "0" + argText.slice(1);
       } else {
        argText = (flagZeroPad ? "0" : " ") + argText;
       }
      }
     }
     if (next < 97) argText = argText.toUpperCase();
     argText.split("").forEach((function(chr) {
      ret.push(chr.charCodeAt(0));
     }));
     break;
    }
   case "s":
    {
     var arg = getNextArg("i8*");
     var argLength = arg ? _strlen(arg) : "(null)".length;
     if (precisionSet) argLength = Math.min(argLength, precision);
     if (!flagLeftAlign) {
      while (argLength < width--) {
       ret.push(32);
      }
     }
     if (arg) {
      for (var i = 0; i < argLength; i++) {
       ret.push(HEAPU8[arg++ >> 0]);
      }
     } else {
      ret = ret.concat(intArrayFromString("(null)".substr(0, argLength), true));
     }
     if (flagLeftAlign) {
      while (argLength < width--) {
       ret.push(32);
      }
     }
     break;
    }
   case "c":
    {
     if (flagLeftAlign) ret.push(getNextArg("i8"));
     while (--width > 0) {
      ret.push(32);
     }
     if (!flagLeftAlign) ret.push(getNextArg("i8"));
     break;
    }
   case "n":
    {
     var ptr = getNextArg("i32*");
     HEAP32[ptr >> 2] = ret.length;
     break;
    }
   case "%":
    {
     ret.push(curr);
     break;
    }
   default:
    {
     for (var i = startTextIndex; i < textIndex + 2; i++) {
      ret.push(HEAP8[i >> 0]);
     }
    }
   }
   textIndex += 2;
  } else {
   ret.push(curr);
   textIndex += 1;
  }
 }
 return ret;
}
function _fprintf(stream, format, varargs) {
 var result = __formatString(format, varargs);
 var stack = Runtime.stackSave();
 var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
 Runtime.stackRestore(stack);
 return ret;
}
function _vfprintf(s, f, va_arg) {
 return _fprintf(s, f, HEAP32[va_arg >> 2]);
}
var _stderr = allocate(1, "i32*", ALLOC_STATIC);
___errno_state = Runtime.staticAlloc(4);
HEAP32[___errno_state >> 2] = 0;
_fputc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var ctlz_i8 = allocate([ 8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_DYNAMIC);
var cttz_i8 = allocate([ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 ], "i8", ALLOC_DYNAMIC);
var Math_min = Math.min;
function invoke_viiiii(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vid(index, a1, a2) {
 try {
  Module["dynCall_vid"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vi(index, a1) {
 try {
  Module["dynCall_vi"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiidii(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_viiidii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vii(index, a1, a2) {
 try {
  Module["dynCall_vii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 try {
  return Module["dynCall_iiiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_ii(index, a1) {
 try {
  return Module["dynCall_ii"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viidi(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viidi"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viddiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_viddiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vidii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_vidii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiii(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vidi(index, a1, a2, a3) {
 try {
  Module["dynCall_vidi"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 try {
  return Module["dynCall_diiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiddddiid(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
 try {
  Module["dynCall_viiiiddddiid"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diiiii(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_diiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiii(index, a1, a2, a3) {
 try {
  return Module["dynCall_iiii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiid(index, a1, a2, a3) {
 try {
  return Module["dynCall_iiid"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_di(index, a1) {
 try {
  return Module["dynCall_di"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diiidii(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_diiidii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viidii(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_viidii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 try {
  Module["dynCall_viiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 try {
  Module["dynCall_viiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 try {
  Module["dynCall_viiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iii(index, a1, a2) {
 try {
  return Module["dynCall_iii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diii(index, a1, a2, a3) {
 try {
  return Module["dynCall_diii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 try {
  return Module["dynCall_diiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiid(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_viiiid"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 try {
  return Module["dynCall_diiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_did(index, a1, a2) {
 try {
  return Module["dynCall_did"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiidddddidi(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
 try {
  Module["dynCall_viiiidddddidi"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diidii(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_diidii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_diiii(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_diiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 try {
  return Module["dynCall_iiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiid(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viiid"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viii(index, a1, a2, a3) {
 try {
  Module["dynCall_viii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_v(index) {
 try {
  Module["dynCall_v"](index);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viid(index, a1, a2, a3) {
 try {
  Module["dynCall_viid"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iidid(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_iidid"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}

var asm = (function(global,env,buffer) {
// EMSCRIPTEN_START_ASM

    'use asm';
    
    var Int8View = global.Int8Array;
    var Int16View = global.Int16Array;
    var Int32View = global.Int32Array;
    var Uint8View = global.Uint8Array;
    var Uint16View = global.Uint16Array;
    var Uint32View = global.Uint32Array;
    var Float32View = global.Float32Array;
    var Float64View = global.Float64Array;
    var HEAP8 = new Int8View(buffer);
    var HEAP16 = new Int16View(buffer);
    var HEAP32 = new Int32View(buffer);
    var HEAPU8 = new Uint8View(buffer);
    var HEAPU16 = new Uint16View(buffer);
    var HEAPU32 = new Uint32View(buffer);
    var HEAPF32 = new Float32View(buffer);
    var HEAPF64 = new Float64View(buffer);
    var byteLength = global.byteLength;

  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_viiidii=env.invoke_viiidii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viidi=env.invoke_viidi;
  var invoke_viddiii=env.invoke_viddiii;
  var invoke_vidii=env.invoke_vidii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vidi=env.invoke_vidi;
  var invoke_diiiiiiii=env.invoke_diiiiiiii;
  var invoke_viiiiddddiid=env.invoke_viiiiddddiid;
  var invoke_diiiii=env.invoke_diiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_di=env.invoke_di;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_diiidii=env.invoke_diiidii;
  var invoke_viidii=env.invoke_viidii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_diii=env.invoke_diii;
  var invoke_diiiiiiiiii=env.invoke_diiiiiiiiii;
  var invoke_viiiid=env.invoke_viiiid;
  var invoke_diiiiiiiii=env.invoke_diiiiiiiii;
  var invoke_did=env.invoke_did;
  var invoke_viiiidddddidi=env.invoke_viiiidddddidi;
  var invoke_diidii=env.invoke_diidii;
  var invoke_diiii=env.invoke_diiii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iidid=env.invoke_iidid;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_asm_const_double=env._emscripten_asm_const_double;
  var _cosf=env._cosf;
  var _send=env._send;
  var _sqrtf=env._sqrtf;
  var _fmod=env._fmod;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var ___setErrNo=env.___setErrNo;
  var _vfprintf=env._vfprintf;
  var _atan2f=env._atan2f;
  var _fmodf=env._fmodf;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _pwrite=env._pwrite;
  var _acosf=env._acosf;
  var _asinf=env._asinf;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _sinf=env._sinf;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var __reallyNegative=env.__reallyNegative;
  var _pthread_getspecific=env._pthread_getspecific;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_once=env._pthread_once;
  var _pthread_key_create=env._pthread_key_create;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _abort=env._abort;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _gettimeofday=env._gettimeofday;
  var __formatString=env.__formatString;
  var _llvm_trap=env._llvm_trap;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var tempFloat = 0.0;

  function _emscripten_replace_memory(newBuffer) {
    if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff)) return false;
    HEAP8 = new Int8View(newBuffer);
    HEAP16 = new Int16View(newBuffer);
    HEAP32 = new Int32View(newBuffer);
    HEAPU8 = new Uint8View(newBuffer);
    HEAPU16 = new Uint16View(newBuffer);
    HEAPU32 = new Uint32View(newBuffer);
    HEAPF32 = new Float32View(newBuffer);
    HEAPF64 = new Float64View(newBuffer);
    buffer = newBuffer;
    return true;
  }

  // EMSCRIPTEN_START_FUNCS
function __ZN23btPolyhedralConvexShape28initializePolyhedralFeaturesEi(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, i45 = 0, i46 = 0, i47 = 0, d48 = 0.0, d49 = 0.0, i50 = 0, i51 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i5 = HEAP32[i8 + 52 >> 2] | 0;
 if ((i5 | 0) != 0 ? (FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i5), i2 = HEAP32[i8 + 52 >> 2] | 0, (i2 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i2 + -4 >> 2] | 0);
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(151) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 HEAP32[i2 >> 2] = 19496;
 HEAP8[i2 + 20 >> 0] = 1;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP8[i2 + 40 >> 0] = 1;
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i2 + 32 >> 2] = 0;
 HEAP8[i2 + 60 >> 0] = 1;
 HEAP32[i2 + 56 >> 2] = 0;
 HEAP32[i2 + 48 >> 2] = 0;
 HEAP32[i2 + 52 >> 2] = 0;
 HEAP32[i8 + 52 >> 2] = i2;
 i13 = 0;
 i5 = 0;
 i16 = 0;
 i2 = 0;
 while (1) {
  if ((i13 | 0) >= (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 96 >> 2] & 127](i8) | 0)) break;
  if ((i5 | 0) == (i16 | 0)) {
   i17 = (i16 | 0) == 0 ? 1 : i16 << 1;
   if ((i16 | 0) < (i17 | 0)) {
    if ((i17 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i10 = _malloc((i17 << 4 | 3) + 16 | 0) | 0, (i10 | 0) != 0) : 0) {
     HEAP32[(i10 + 19 & -16) + -4 >> 2] = i10;
     i15 = i10 + 19 & -16;
    } else i15 = 0;
    if ((i16 | 0) > 0) {
     i14 = 0;
     do {
      i47 = i15 + (i14 << 4) | 0;
      i46 = i2 + (i14 << 4) | 0;
      HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
      HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
      HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
      HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
      i14 = i14 + 1 | 0;
     } while ((i14 | 0) != (i16 | 0));
    }
    if ((i2 | 0) == 0) {
     i14 = i16;
     i16 = i17;
     i2 = i15;
    } else {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i2 + -4 >> 2] | 0);
     i14 = i16;
     i16 = i17;
     i2 = i15;
    }
   } else i14 = i16;
  } else i14 = i5;
  i47 = i2 + (i5 << 4) | 0;
  HEAP32[i47 + 0 >> 2] = HEAP32[i1 + 256 >> 2];
  HEAP32[i47 + 4 >> 2] = HEAP32[i1 + 260 >> 2];
  HEAP32[i47 + 8 >> 2] = HEAP32[i1 + 264 >> 2];
  HEAP32[i47 + 12 >> 2] = HEAP32[i1 + 268 >> 2];
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i8 >> 2] | 0) + 108 >> 2] & 127](i8, i13, i47);
  i13 = i13 + 1 | 0;
  i5 = i14 + 1 | 0;
 }
 HEAP8[i1 + 212 >> 0] = 1;
 HEAP32[i1 + 208 >> 2] = 0;
 HEAP32[i1 + 200 >> 2] = 0;
 HEAP32[i1 + 204 >> 2] = 0;
 HEAP8[i1 + 232 >> 0] = 1;
 HEAP32[i1 + 228 >> 2] = 0;
 HEAP32[i1 + 220 >> 2] = 0;
 HEAP32[i1 + 224 >> 2] = 0;
 HEAP8[i1 + 252 >> 0] = 1;
 HEAP32[i1 + 248 >> 2] = 0;
 HEAP32[i1 + 240 >> 2] = 0;
 HEAP32[i1 + 244 >> 2] = 0;
 if ((i6 | 0) != 0) {
  if ((i5 | 0) > 0) {
   i6 = 0;
   i23 = 0;
   i25 = 0;
   i26 = 0;
   while (1) {
    i14 = i6;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) < (i5 | 0)) {
     i13 = i2 + (i14 << 4) | 0;
     i10 = i2 + (i14 << 4) + 4 | 0;
     i14 = i2 + (i14 << 4) + 8 | 0;
     i15 = i6;
     do {
      i18 = i15;
      i15 = i15 + 1 | 0;
      if ((i15 | 0) < (i5 | 0)) {
       i17 = i2 + (i18 << 4) | 0;
       i16 = i2 + (i18 << 4) + 4 | 0;
       i18 = i2 + (i18 << 4) + 8 | 0;
       i19 = i15;
       do {
        d21 = +HEAPF32[i13 >> 2];
        d39 = +HEAPF32[i17 >> 2] - d21;
        d38 = +HEAPF32[i10 >> 2];
        d36 = +HEAPF32[i16 >> 2] - d38;
        d22 = +HEAPF32[i14 >> 2];
        d37 = +HEAPF32[i18 >> 2] - d22;
        d21 = +HEAPF32[i2 + (i19 << 4) >> 2] - d21;
        d38 = +HEAPF32[i2 + (i19 << 4) + 4 >> 2] - d38;
        d22 = +HEAPF32[i2 + (i19 << 4) + 8 >> 2] - d22;
        d42 = 1.0;
        i24 = 0;
        while (1) {
         d40 = (d36 * d22 - d37 * d38) * d42;
         d41 = (d37 * d21 - d39 * d22) * d42;
         d42 = (d39 * d38 - d36 * d21) * d42;
         L40 : do if (d42 * d42 + (d40 * d40 + d41 * d41) > 9999999747378752.0e-20) {
          d43 = 1.0 / +Math_sqrt(+(d42 * d42 + (d40 * d40 + d41 * d41)));
          if ((i23 | 0) > 0) {
           i27 = 0;
           do {
            if (d40 * d43 * +HEAPF32[i26 + (i27 << 4) >> 2] + d41 * d43 * +HEAPF32[i26 + (i27 << 4) + 4 >> 2] + d42 * d43 * +HEAPF32[i26 + (i27 << 4) + 8 >> 2] > .9990000128746033) break L40;
            i27 = i27 + 1 | 0;
           } while ((i27 | 0) < (i23 | 0));
          }
          d44 = d40 * d43 * +HEAPF32[i13 >> 2] + d41 * d43 * +HEAPF32[i10 >> 2] + d42 * d43 * +HEAPF32[i14 >> 2];
          i27 = 0;
          do {
           if (d40 * d43 * +HEAPF32[i2 + (i27 << 4) >> 2] + d41 * d43 * +HEAPF32[i2 + (i27 << 4) + 4 >> 2] + d42 * d43 * +HEAPF32[i2 + (i27 << 4) + 8 >> 2] - d44 + -.009999999776482582 > 0.0) break L40;
           i27 = i27 + 1 | 0;
          } while ((i27 | 0) < (i5 | 0));
          do if ((i23 | 0) == (i25 | 0)) {
           i28 = (i25 | 0) == 0 ? 1 : i25 << 1;
           if ((i25 | 0) < (i28 | 0)) {
            do if ((i28 | 0) == 0) i29 = 0; else {
             HEAP32[5004] = (HEAP32[5004] | 0) + 1;
             i27 = _malloc((i28 << 4 | 3) + 16 | 0) | 0;
             if ((i27 | 0) == 0) {
              i29 = 0;
              break;
             }
             HEAP32[(i27 + 19 & -16) + -4 >> 2] = i27;
             i29 = i27 + 19 & -16;
            } while (0);
            if ((i25 | 0) > 0) {
             i27 = 0;
             do {
              i47 = i29 + (i27 << 4) | 0;
              i46 = i26 + (i27 << 4) | 0;
              HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
              HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
              HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
              HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
              i27 = i27 + 1 | 0;
             } while ((i27 | 0) != (i25 | 0));
            }
            if ((i26 | 0) == 0) {
             i27 = i25;
             i25 = i28;
             i26 = i29;
             break;
            }
            HEAP32[5006] = (HEAP32[5006] | 0) + 1;
            _free(HEAP32[i26 + -4 >> 2] | 0);
            i27 = i25;
            i25 = i28;
            i26 = i29;
           } else i27 = i25;
          } else i27 = i23; while (0);
          HEAPF32[i26 + (i27 << 4) >> 2] = d40 * d43;
          HEAPF32[i26 + (i27 << 4) + 4 >> 2] = d41 * d43;
          HEAPF32[i26 + (i27 << 4) + 8 >> 2] = d42 * d43;
          HEAPF32[i26 + (i27 << 4) + 12 >> 2] = -d44;
          i23 = i23 + 1 | 0;
         } while (0);
         i24 = i24 + 1 | 0;
         if ((i24 | 0) == 2) break; else d42 = -1.0;
        }
        i19 = i19 + 1 | 0;
       } while ((i19 | 0) != (i5 | 0));
      }
     } while ((i15 | 0) != (i5 | 0));
    }
    if ((i6 | 0) == (i5 | 0)) {
     i5 = i26;
     break;
    }
   }
   if ((i23 | 0) > 0) {
    i10 = 0;
    i6 = 0;
    i13 = 0;
    i16 = 0;
    while (1) {
     i47 = i5 + (i10 << 4) | 0;
     HEAP32[i1 + 184 >> 2] = HEAP32[i47 + 0 >> 2];
     HEAP32[i1 + 188 >> 2] = HEAP32[i47 + 4 >> 2];
     HEAP32[i1 + 192 >> 2] = HEAP32[i47 + 8 >> 2];
     d21 = +HEAPF32[i5 + (i10 << 4) + 12 >> 2];
     d21 = d21 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] & 15](i8);
     if ((i6 | 0) == (i13 | 0)) {
      i17 = (i13 | 0) == 0 ? 1 : i13 << 1;
      if ((i13 | 0) < (i17 | 0)) {
       if ((i17 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i4 = _malloc((i17 << 4 | 3) + 16 | 0) | 0, (i4 | 0) != 0) : 0) {
        HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
        i14 = i4 + 19 & -16;
       } else i14 = 0;
       if ((i13 | 0) > 0) {
        i15 = 0;
        do {
         i47 = i14 + (i15 << 4) | 0;
         i46 = i16 + (i15 << 4) | 0;
         HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
         HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
         HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
         HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
         i15 = i15 + 1 | 0;
        } while ((i15 | 0) != (i13 | 0));
       }
       if ((i16 | 0) == 0) {
        i15 = i13;
        i13 = i17;
       } else {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i16 + -4 >> 2] | 0);
        i15 = i13;
        i13 = i17;
       }
      } else {
       i15 = i13;
       i14 = i16;
      }
     } else {
      i15 = i6;
      i14 = i16;
     }
     i47 = i14 + (i15 << 4) | 0;
     HEAP32[i47 + 0 >> 2] = HEAP32[i1 + 184 >> 2];
     HEAP32[i47 + 4 >> 2] = HEAP32[i1 + 188 >> 2];
     HEAP32[i47 + 8 >> 2] = HEAP32[i1 + 192 >> 2];
     HEAPF32[i14 + (i15 << 4) + 12 >> 2] = d21;
     i6 = i6 + 1 | 0;
     i10 = i10 + 1 | 0;
     if ((i10 | 0) >= (i23 | 0)) {
      i4 = i14;
      break;
     } else i16 = i14;
    }
    if ((i6 | 0) > 0) {
     i10 = 0;
     i17 = 0;
     i18 = 0;
     i19 = 0;
     do {
      i14 = i10;
      i10 = i10 + 1 | 0;
      if ((i10 | 0) < (i6 | 0)) {
       i13 = i10;
       do {
        i15 = i13;
        i13 = i13 + 1 | 0;
        if ((i13 | 0) < (i6 | 0)) {
         i16 = i13;
         do {
          d37 = +HEAPF32[i4 + (i15 << 4) + 4 >> 2];
          d43 = +HEAPF32[i4 + (i16 << 4) + 8 >> 2];
          d22 = +HEAPF32[i4 + (i15 << 4) + 8 >> 2];
          d38 = +HEAPF32[i4 + (i16 << 4) + 4 >> 2];
          d41 = +HEAPF32[i4 + (i16 << 4) >> 2];
          d39 = +HEAPF32[i4 + (i15 << 4) >> 2];
          d42 = +HEAPF32[i4 + (i14 << 4) + 8 >> 2];
          d36 = +HEAPF32[i4 + (i14 << 4) + 4 >> 2];
          d40 = +HEAPF32[i4 + (i14 << 4) >> 2];
          L96 : do if ((((d38 * d39 - d37 * d41) * (d38 * d39 - d37 * d41) + ((d37 * d43 - d22 * d38) * (d37 * d43 - d22 * d38) + (d22 * d41 - d43 * d39) * (d22 * d41 - d43 * d39)) > 9999999747378752.0e-20 ? (d41 * d36 - d38 * d40) * (d41 * d36 - d38 * d40) + ((d38 * d42 - d43 * d36) * (d38 * d42 - d43 * d36) + (d43 * d40 - d41 * d42) * (d43 * d40 - d41 * d42)) > 9999999747378752.0e-20 : 0) ? (d37 * d40 - d39 * d36) * (d37 * d40 - d39 * d36) + ((d22 * d36 - d37 * d42) * (d22 * d36 - d37 * d42) + (d39 * d42 - d22 * d40) * (d39 * d42 - d22 * d40)) > 9999999747378752.0e-20 : 0) ? (d20 = d42 * (d38 * d39 - d37 * d41) + (d36 * (d22 * d41 - d43 * d39) + (d37 * d43 - d22 * d38) * d40), +Math_abs(+d20) > 9.999999974752427e-7) : 0) {
           d48 = +HEAPF32[i4 + (i14 << 4) + 12 >> 2];
           d44 = +HEAPF32[i4 + (i15 << 4) + 12 >> 2];
           d49 = +HEAPF32[i4 + (i16 << 4) + 12 >> 2];
           d21 = -1.0 / d20 * ((d22 * d36 - d37 * d42) * d49 + ((d37 * d43 - d22 * d38) * d48 + (d38 * d42 - d43 * d36) * d44));
           d22 = -1.0 / d20 * ((d39 * d42 - d22 * d40) * d49 + ((d22 * d41 - d43 * d39) * d48 + (d43 * d40 - d41 * d42) * d44));
           d36 = -1.0 / d20 * ((d37 * d40 - d39 * d36) * d49 + ((d38 * d39 - d37 * d41) * d48 + (d41 * d36 - d38 * d40) * d44));
           i23 = 0;
           do {
            if (+HEAPF32[i4 + (i23 << 4) + 12 >> 2] + (d21 * +HEAPF32[i4 + (i23 << 4) >> 2] + d22 * +HEAPF32[i4 + (i23 << 4) + 4 >> 2] + d36 * +HEAPF32[i4 + (i23 << 4) + 8 >> 2]) + -.009999999776482582 > 0.0) break L96;
            i23 = i23 + 1 | 0;
           } while ((i23 | 0) < (i6 | 0));
           do if ((i17 | 0) == (i18 | 0)) {
            i24 = (i18 | 0) == 0 ? 1 : i18 << 1;
            if ((i18 | 0) >= (i24 | 0)) {
             i23 = i18;
             break;
            }
            do if ((i24 | 0) == 0) i25 = 0; else {
             HEAP32[5004] = (HEAP32[5004] | 0) + 1;
             i23 = _malloc((i24 << 4 | 3) + 16 | 0) | 0;
             if ((i23 | 0) == 0) {
              i25 = 0;
              break;
             }
             HEAP32[(i23 + 19 & -16) + -4 >> 2] = i23;
             i25 = i23 + 19 & -16;
            } while (0);
            if ((i18 | 0) > 0) {
             i23 = 0;
             do {
              i47 = i25 + (i23 << 4) | 0;
              i46 = i19 + (i23 << 4) | 0;
              HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
              HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
              HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
              HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
              i23 = i23 + 1 | 0;
             } while ((i23 | 0) != (i18 | 0));
            }
            if ((i19 | 0) == 0) {
             i23 = i18;
             i18 = i24;
             i19 = i25;
             break;
            }
            HEAP32[5006] = (HEAP32[5006] | 0) + 1;
            _free(HEAP32[i19 + -4 >> 2] | 0);
            i23 = i18;
            i18 = i24;
            i19 = i25;
           } else i23 = i17; while (0);
           HEAPF32[i19 + (i23 << 4) >> 2] = d21;
           HEAPF32[i19 + (i23 << 4) + 4 >> 2] = d22;
           HEAPF32[i19 + (i23 << 4) + 8 >> 2] = d36;
           HEAPF32[i19 + (i23 << 4) + 12 >> 2] = 0.0;
           i17 = i17 + 1 | 0;
          } while (0);
          i16 = i16 + 1 | 0;
         } while ((i16 | 0) != (i6 | 0));
        }
       } while ((i13 | 0) != (i6 | 0));
      }
     } while ((i10 | 0) != (i6 | 0));
    } else {
     i17 = 0;
     i19 = 0;
    }
   } else {
    i4 = 0;
    i17 = 0;
    i19 = 0;
   }
  } else {
   i5 = 0;
   i4 = 0;
   i17 = 0;
   i19 = 0;
  }
  __ZN20btConvexHullComputer7computeEPKvbiiff(i1 + 196 | 0, i19, i17);
  if ((i19 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i19 + -4 >> 2] | 0);
  }
  if ((i4 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
  }
  if ((i5 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i5 + -4 >> 2] | 0);
  }
 } else __ZN20btConvexHullComputer7computeEPKvbiiff(i1 + 196 | 0, i2, i5);
 i13 = HEAP32[i1 + 240 >> 2] | 0;
 if ((i13 | 0) > 0 & ((i13 | 0) < 0 ^ 1)) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i4 = _malloc((i13 << 4 | 3) + 16 | 0) | 0;
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
   i5 = i4 + 19 & -16;
  }
  i4 = 0;
  do {
   i47 = i5 + (i4 << 4) | 0;
   HEAP32[i47 + 0 >> 2] = HEAP32[i1 + 168 >> 2];
   HEAP32[i47 + 4 >> 2] = HEAP32[i1 + 172 >> 2];
   HEAP32[i47 + 8 >> 2] = HEAP32[i1 + 176 >> 2];
   HEAP32[i47 + 12 >> 2] = HEAP32[i1 + 180 >> 2];
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i13 | 0));
 } else i5 = 0;
 HEAP8[i1 + 164 >> 0] = 1;
 i6 = i1 + 160 | 0;
 HEAP32[i6 >> 2] = 0;
 i4 = i1 + 152 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 i10 = i1 + 112 | 0;
 i14 = i10 + 36 | 0;
 do {
  HEAP32[i10 >> 2] = 0;
  i10 = i10 + 4 | 0;
 } while ((i10 | 0) < (i14 | 0));
 HEAP8[i1 + 128 >> 0] = 1;
 HEAP32[i1 + 124 >> 2] = 0;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 120 >> 2] = 0;
 if ((i13 | 0) < 0) _llvm_trap();
 if ((i13 | 0) > 0) {
  __ZN20btAlignedObjectArrayI6btFaceE7reserveEi(i1 + 148 | 0, i13);
  i10 = HEAP32[i6 >> 2] | 0;
  i14 = 0;
  do {
   i15 = i10 + (i14 * 36 | 0) | 0;
   if ((i15 | 0) != 0) {
    __ZN20btAlignedObjectArrayIiEC2ERKS0_(i15, i1 + 112 | 0);
    HEAP32[i15 + 20 >> 2] = HEAP32[i1 + 132 >> 2];
    HEAP32[i15 + 24 >> 2] = HEAP32[i1 + 136 >> 2];
    HEAP32[i15 + 28 >> 2] = HEAP32[i1 + 140 >> 2];
    HEAP32[i15 + 32 >> 2] = HEAP32[i1 + 144 >> 2];
   }
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) != (i13 | 0));
  i14 = HEAP32[i1 + 124 >> 2] | 0;
  HEAP32[i4 >> 2] = i13;
  if ((i14 | 0) != 0) {
   if ((HEAP8[i1 + 128 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i14 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 124 >> 2] = 0;
  }
 } else {
  HEAP32[i4 >> 2] = i13;
  i10 = 0;
 }
 HEAP8[i1 + 128 >> 0] = 1;
 HEAP32[i1 + 124 >> 2] = 0;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 120 >> 2] = 0;
 i14 = HEAP32[i1 + 200 >> 2] | 0;
 i15 = HEAP32[i8 + 52 >> 2] | 0;
 i16 = HEAP32[i15 + 8 >> 2] | 0;
 if ((i16 | 0) < (i14 | 0)) {
  if ((HEAP32[i15 + 12 >> 2] | 0) < (i14 | 0)) {
   if ((i14 | 0) == 0) {
    i17 = 0;
    i19 = i16;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i17 = _malloc((i14 << 4 | 3) + 16 | 0) | 0;
    if ((i17 | 0) == 0) i17 = 0; else {
     HEAP32[(i17 + 19 & -16) + -4 >> 2] = i17;
     i17 = i17 + 19 & -16;
    }
    i19 = HEAP32[i15 + 8 >> 2] | 0;
   }
   if ((i19 | 0) > 0) {
    i18 = 0;
    do {
     i47 = i17 + (i18 << 4) | 0;
     i46 = (HEAP32[i15 + 16 >> 2] | 0) + (i18 << 4) | 0;
     HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
     HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
     HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
     HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
     i18 = i18 + 1 | 0;
    } while ((i18 | 0) != (i19 | 0));
   }
   i18 = HEAP32[i15 + 16 >> 2] | 0;
   if ((i18 | 0) != 0) {
    if ((HEAP8[i15 + 20 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i18 + -4 >> 2] | 0);
    }
    HEAP32[i15 + 16 >> 2] = 0;
   }
   HEAP8[i15 + 20 >> 0] = 1;
   HEAP32[i15 + 16 >> 2] = i17;
   HEAP32[i15 + 12 >> 2] = i14;
   i17 = i15 + 16 | 0;
  } else i17 = i15 + 16 | 0;
  do {
   i47 = (HEAP32[i17 >> 2] | 0) + (i16 << 4) | 0;
   HEAP32[i47 + 0 >> 2] = HEAP32[i1 + 96 >> 2];
   HEAP32[i47 + 4 >> 2] = HEAP32[i1 + 100 >> 2];
   HEAP32[i47 + 8 >> 2] = HEAP32[i1 + 104 >> 2];
   HEAP32[i47 + 12 >> 2] = HEAP32[i1 + 108 >> 2];
   i16 = i16 + 1 | 0;
  } while ((i16 | 0) != (i14 | 0));
 }
 HEAP32[i15 + 8 >> 2] = i14;
 if ((i14 | 0) > 0) {
  i16 = HEAP32[i1 + 208 >> 2] | 0;
  i15 = 0;
  do {
   i47 = (HEAP32[(HEAP32[i8 + 52 >> 2] | 0) + 16 >> 2] | 0) + (i15 << 4) | 0;
   i46 = i16 + (i15 << 4) | 0;
   HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
   HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
   HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
   HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
   i15 = i15 + 1 | 0;
  } while ((i15 | 0) != (i14 | 0));
 }
 if ((i13 | 0) > 0) {
  i14 = 0;
  do {
   i15 = (HEAP32[i1 + 228 >> 2] | 0) + ((HEAP32[(HEAP32[i1 + 248 >> 2] | 0) + (i14 << 2) >> 2] | 0) * 12 | 0) | 0;
   i18 = i10 + (i14 * 36 | 0) + 4 | 0;
   i16 = i10 + (i14 * 36 | 0) + 8 | 0;
   i17 = i10 + (i14 * 36 | 0) + 12 | 0;
   i19 = i10 + (i14 * 36 | 0) + 16 | 0;
   i10 = i15;
   i24 = 0;
   do {
    i23 = i10 + 4 | 0;
    i25 = HEAP32[i10 + ((HEAP32[i23 >> 2] | 0) * 12 | 0) + 8 >> 2] | 0;
    i28 = HEAP32[i18 >> 2] | 0;
    if ((i28 | 0) == (HEAP32[i16 >> 2] | 0) ? (i12 = (i28 | 0) == 0 ? 1 : i28 << 1, (i28 | 0) < (i12 | 0)) : 0) {
     if ((i12 | 0) == 0) i26 = 0; else {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i26 = _malloc((i12 << 2 | 3) + 16 | 0) | 0;
      if ((i26 | 0) == 0) i26 = 0; else {
       HEAP32[(i26 + 19 & -16) + -4 >> 2] = i26;
       i26 = i26 + 19 & -16;
      }
      i28 = HEAP32[i18 >> 2] | 0;
     }
     if ((i28 | 0) > 0) {
      i27 = 0;
      do {
       i29 = i26 + (i27 << 2) | 0;
       if ((i29 | 0) != 0) HEAP32[i29 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + (i27 << 2) >> 2];
       i27 = i27 + 1 | 0;
      } while ((i27 | 0) != (i28 | 0));
     }
     i27 = HEAP32[i17 >> 2] | 0;
     if ((i27 | 0) != 0) {
      if ((HEAP8[i19 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i27 + -4 >> 2] | 0);
      }
      HEAP32[i17 >> 2] = 0;
     }
     HEAP8[i19 >> 0] = 1;
     HEAP32[i17 >> 2] = i26;
     HEAP32[i16 >> 2] = i12;
     i28 = HEAP32[i18 >> 2] | 0;
    }
    i26 = (HEAP32[i17 >> 2] | 0) + (i28 << 2) | 0;
    if ((i26 | 0) != 0) {
     HEAP32[i26 >> 2] = i25;
     i28 = HEAP32[i18 >> 2] | 0;
    }
    HEAP32[i18 >> 2] = i28 + 1;
    i46 = HEAP32[i10 + 8 >> 2] | 0;
    i47 = HEAP32[i1 + 208 >> 2] | 0;
    d20 = +HEAPF32[i47 + (i46 << 4) >> 2] - +HEAPF32[i47 + (i25 << 4) >> 2];
    d21 = +HEAPF32[i47 + (i46 << 4) + 4 >> 2] - +HEAPF32[i47 + (i25 << 4) + 4 >> 2];
    d36 = +HEAPF32[i47 + (i46 << 4) + 8 >> 2] - +HEAPF32[i47 + (i25 << 4) + 8 >> 2];
    d22 = 1.0 / +Math_sqrt(+(d20 * d20 + d21 * d21 + d36 * d36));
    if ((i24 | 0) < 2) {
     HEAPF32[i1 + 288 + (i24 << 4) >> 2] = d20 * d22;
     HEAPF32[i1 + 288 + (i24 << 4) + 4 >> 2] = d21 * d22;
     HEAPF32[i1 + 288 + (i24 << 4) + 8 >> 2] = d36 * d22;
     HEAPF32[i1 + 288 + (i24 << 4) + 12 >> 2] = 0.0;
     i24 = i24 + 1 | 0;
    }
    i47 = HEAP32[i23 >> 2] | 0;
    i10 = i10 + (((HEAP32[i10 + (i47 * 12 | 0) >> 2] | 0) + i47 | 0) * 12 | 0) | 0;
   } while ((i10 | 0) != (i15 | 0));
   i17 = i5 + (i14 << 4) | 0;
   if ((i24 | 0) == 2) {
    d42 = +HEAPF32[i1 + 292 >> 2];
    d43 = +HEAPF32[i1 + 312 >> 2];
    d44 = +HEAPF32[i1 + 296 >> 2];
    d48 = +HEAPF32[i1 + 308 >> 2];
    d41 = +HEAPF32[i1 + 304 >> 2];
    d40 = +HEAPF32[i1 + 288 >> 2];
    i46 = i5 + (i14 << 4) + 4 | 0;
    i47 = i5 + (i14 << 4) + 8 | 0;
    HEAPF32[i5 + (i14 << 4) + 12 >> 2] = 0.0;
    d49 = 1.0 / +Math_sqrt(+((d42 * d43 - d44 * d48) * (d42 * d43 - d44 * d48) + (d44 * d41 - d43 * d40) * (d44 * d41 - d43 * d40) + (d48 * d40 - d42 * d41) * (d48 * d40 - d42 * d41)));
    HEAPF32[i17 >> 2] = (d42 * d43 - d44 * d48) * d49;
    HEAPF32[i46 >> 2] = (d44 * d41 - d43 * d40) * d49;
    HEAPF32[i47 >> 2] = (d48 * d40 - d42 * d41) * d49;
    i10 = HEAP32[i6 >> 2] | 0;
    HEAPF32[i10 + (i14 * 36 | 0) + 20 >> 2] = (d42 * d43 - d44 * d48) * d49;
    HEAPF32[i10 + (i14 * 36 | 0) + 24 >> 2] = +HEAPF32[i46 >> 2];
    HEAPF32[i10 + (i14 * 36 | 0) + 28 >> 2] = +HEAPF32[i47 >> 2];
    HEAPF32[i10 + (i14 * 36 | 0) + 32 >> 2] = 1.0000000150474662e+30;
   } else {
    HEAP32[i17 + 0 >> 2] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
    HEAP32[i17 + 8 >> 2] = 0;
    HEAP32[i17 + 12 >> 2] = 0;
    i10 = HEAP32[i6 >> 2] | 0;
   }
   i15 = HEAP32[i10 + (i14 * 36 | 0) + 4 >> 2] | 0;
   if ((i15 | 0) > 0) {
    i16 = HEAP32[(HEAP32[i8 + 52 >> 2] | 0) + 16 >> 2] | 0;
    d22 = +HEAPF32[i17 >> 2];
    d20 = +HEAPF32[i5 + (i14 << 4) + 4 >> 2];
    d21 = +HEAPF32[i5 + (i14 << 4) + 8 >> 2];
    i18 = HEAP32[i10 + (i14 * 36 | 0) + 12 >> 2] | 0;
    d36 = 1.0000000150474662e+30;
    i17 = 0;
    do {
     i47 = HEAP32[i18 + (i17 << 2) >> 2] | 0;
     d49 = +HEAPF32[i16 + (i47 << 4) >> 2] * d22 + +HEAPF32[i16 + (i47 << 4) + 4 >> 2] * d20 + +HEAPF32[i16 + (i47 << 4) + 8 >> 2] * d21;
     d36 = d36 > d49 ? d49 : d36;
     i17 = i17 + 1 | 0;
    } while ((i17 | 0) < (i15 | 0));
   } else d36 = 1.0000000150474662e+30;
   HEAPF32[i10 + (i14 * 36 | 0) + 32 >> 2] = -d36;
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) < (i13 | 0));
  i13 = HEAP32[i4 >> 2] | 0;
  if ((i13 | 0) > 0) {
   i14 = 0;
   i12 = 0;
   i17 = 0;
   do {
    if ((i17 | 0) == (i14 | 0)) {
     i14 = (i17 | 0) == 0 ? 1 : i17 << 1;
     if ((i17 | 0) < (i14 | 0)) {
      if ((i14 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i11 = _malloc((i14 << 2 | 3) + 16 | 0) | 0, (i11 | 0) != 0) : 0) {
       HEAP32[(i11 + 19 & -16) + -4 >> 2] = i11;
       i15 = i11 + 19 & -16;
      } else i15 = 0;
      if ((i17 | 0) > 0) {
       i18 = 0;
       do {
        i16 = i15 + (i18 << 2) | 0;
        if ((i16 | 0) != 0) HEAP32[i16 >> 2] = HEAP32[i12 + (i18 << 2) >> 2];
        i18 = i18 + 1 | 0;
       } while ((i18 | 0) != (i17 | 0));
      }
      if ((i12 | 0) == 0) i12 = i15; else {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i12 + -4 >> 2] | 0);
       i12 = i15;
      }
     } else i14 = i17;
    }
    i15 = i12 + (i17 << 2) | 0;
    if ((i15 | 0) != 0) {
     HEAP32[i15 >> 2] = i17;
     i13 = HEAP32[i4 >> 2] | 0;
    }
    i17 = i17 + 1 | 0;
   } while ((i17 | 0) < (i13 | 0));
   if ((i17 | 0) == 0) i9 = i12; else {
    i11 = i1 + 88 | 0;
    i15 = i1 + 84 | 0;
    i14 = i1 + 76 | 0;
    i13 = i1 + 32 | 0;
    i16 = i1 + 308 | 0;
    d22 = 0.0;
    d21 = 0.0;
    d20 = 0.0;
    while (1) {
     i23 = i17 + -1 | 0;
     i17 = HEAP32[i12 + (i23 << 2) >> 2] | 0;
     HEAP32[5004] = (HEAP32[5004] | 0) + 1;
     i19 = _malloc(23) | 0;
     if ((i19 | 0) != 0) {
      HEAP32[(i19 + 19 & -16) + -4 >> 2] = i19;
      i18 = i19 + 19 & -16;
      if ((i19 + 19 & -16 | 0) != 0) HEAP32[i18 >> 2] = i17;
     } else i18 = 0;
     d37 = +HEAPF32[i10 + (i17 * 36 | 0) + 20 >> 2];
     d36 = +HEAPF32[i10 + (i17 * 36 | 0) + 24 >> 2];
     d38 = +HEAPF32[i10 + (i17 * 36 | 0) + 28 >> 2];
     i17 = i23;
     i26 = 1;
     i19 = 1;
     i24 = i23;
     L261 : while (1) {
      i23 = (i17 | 0) > 0;
      L263 : while (1) {
       do {
        i47 = i24;
        i24 = i24 + -1 | 0;
        if ((i47 | 0) <= 0) break L261;
        i25 = HEAP32[i12 + (i24 << 2) >> 2] | 0;
       } while (!(d37 * +HEAPF32[i10 + (i25 * 36 | 0) + 20 >> 2] + d36 * +HEAPF32[i10 + (i25 * 36 | 0) + 24 >> 2] + d38 * +HEAPF32[i10 + (i25 * 36 | 0) + 28 >> 2] > .9990000128746033));
       do if ((i19 | 0) == (i26 | 0) ? (i9 = (i26 | 0) == 0 ? 1 : i26 << 1, (i26 | 0) < (i9 | 0)) : 0) {
        do if ((i9 | 0) == 0) i27 = 0; else {
         HEAP32[5004] = (HEAP32[5004] | 0) + 1;
         i27 = _malloc((i9 << 2 | 3) + 16 | 0) | 0;
         if ((i27 | 0) == 0) {
          i27 = 0;
          break;
         }
         HEAP32[(i27 + 19 & -16) + -4 >> 2] = i27;
         i27 = i27 + 19 & -16;
        } while (0);
        if ((i26 | 0) > 0) {
         i28 = 0;
         do {
          i29 = i27 + (i28 << 2) | 0;
          if ((i29 | 0) != 0) HEAP32[i29 >> 2] = HEAP32[i18 + (i28 << 2) >> 2];
          i28 = i28 + 1 | 0;
         } while ((i28 | 0) != (i26 | 0));
        }
        if ((i18 | 0) == 0) {
         i26 = i9;
         i18 = i27;
         break;
        }
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i18 + -4 >> 2] | 0);
        i26 = i9;
        i18 = i27;
       } while (0);
       i27 = i18 + (i19 << 2) | 0;
       if ((i27 | 0) != 0) HEAP32[i27 >> 2] = i25;
       i19 = i19 + 1 | 0;
       if (i23) i29 = 0; else continue;
       while (1) {
        i28 = i12 + (i29 << 2) | 0;
        i27 = i29 + 1 | 0;
        if ((HEAP32[i28 >> 2] | 0) == (i25 | 0)) break;
        if ((i27 | 0) < (i17 | 0)) i29 = i27; else continue L263;
       }
       if ((i29 | 0) < (i17 | 0)) break;
      }
      i47 = i17 + -1 | 0;
      i46 = i12 + (i47 << 2) | 0;
      HEAP32[i28 >> 2] = HEAP32[i46 >> 2];
      HEAP32[i46 >> 2] = i25;
      i17 = i47;
     }
     if ((i19 | 0) > 1) {
      HEAP8[i11 >> 0] = 1;
      HEAP32[i15 >> 2] = 0;
      HEAP32[i14 >> 2] = 0;
      HEAP32[i1 + 80 >> 2] = 0;
      i27 = 0;
      d22 = 0.0;
      d21 = 0.0;
      d20 = 0.0;
      i23 = 0;
      do {
       i25 = HEAP32[i18 + (i23 << 2) >> 2] | 0;
       d22 = +HEAPF32[i10 + (i25 * 36 | 0) + 20 >> 2] + d22;
       d21 = +HEAPF32[i10 + (i25 * 36 | 0) + 24 >> 2] + d21;
       d20 = +HEAPF32[i10 + (i25 * 36 | 0) + 28 >> 2] + d20;
       i24 = i10 + (i25 * 36 | 0) + 4 | 0;
       i28 = HEAP32[i24 >> 2] | 0;
       if ((i28 | 0) > 0) {
        i25 = i10 + (i25 * 36 | 0) + 12 | 0;
        i30 = i27;
        i26 = 0;
        while (1) {
         i27 = HEAP32[(HEAP32[i25 >> 2] | 0) + (i26 << 2) >> 2] | 0;
         i47 = (HEAP32[(HEAP32[i8 + 52 >> 2] | 0) + 16 >> 2] | 0) + (i27 << 4) | 0;
         HEAP32[i1 + 56 >> 2] = HEAP32[i47 + 0 >> 2];
         HEAP32[i1 + 60 >> 2] = HEAP32[i47 + 4 >> 2];
         HEAP32[i1 + 64 >> 2] = HEAP32[i47 + 8 >> 2];
         HEAP32[i1 + 68 >> 2] = HEAP32[i47 + 12 >> 2];
         L303 : do if ((i30 | 0) > 0) {
          i29 = HEAP32[i15 >> 2] | 0;
          i31 = 0;
          while (1) {
           if ((HEAP32[i29 + (i31 * 24 | 0) + 20 >> 2] | 0) == (i27 | 0)) {
            i27 = i30;
            break L303;
           }
           i31 = i31 + 1 | 0;
           if ((i31 | 0) >= (i30 | 0)) {
            i7 = 207;
            break;
           }
          }
         } else i7 = 207; while (0);
         if ((i7 | 0) == 207) {
          i7 = 0;
          HEAP32[i1 + 0 >> 2] = HEAP32[i1 + 56 >> 2];
          HEAP32[i1 + 4 >> 2] = HEAP32[i1 + 60 >> 2];
          HEAP32[i1 + 8 >> 2] = HEAP32[i1 + 64 >> 2];
          HEAP32[i1 + 12 >> 2] = HEAP32[i1 + 68 >> 2];
          do if ((i30 | 0) == (HEAP32[i1 + 80 >> 2] | 0)) {
           i28 = (i30 | 0) == 0 ? 1 : i30 << 1;
           if ((i30 | 0) >= (i28 | 0)) break;
           if ((i28 | 0) == 0) i29 = 0; else {
            HEAP32[5004] = (HEAP32[5004] | 0) + 1;
            i29 = _malloc((i28 * 24 | 3) + 16 | 0) | 0;
            if ((i29 | 0) == 0) i29 = 0; else {
             HEAP32[(i29 + 19 & -16) + -4 >> 2] = i29;
             i29 = i29 + 19 & -16;
            }
            i30 = HEAP32[i14 >> 2] | 0;
           }
           i31 = HEAP32[i15 >> 2] | 0;
           if ((i30 | 0) <= 0) {
            if ((i31 | 0) != 0) i7 = 216;
           } else {
            i7 = 0;
            do {
             i47 = i29 + (i7 * 24 | 0) | 0;
             i46 = i31 + (i7 * 24 | 0) | 0;
             HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
             HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
             HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
             HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
             HEAP32[i47 + 16 >> 2] = HEAP32[i46 + 16 >> 2];
             HEAP32[i47 + 20 >> 2] = HEAP32[i46 + 20 >> 2];
             i7 = i7 + 1 | 0;
            } while ((i7 | 0) != (i30 | 0));
            i7 = 216;
           }
           if ((i7 | 0) == 216) {
            i7 = 0;
            if (!((HEAP8[i11 >> 0] | 0) == 0 | (i31 | 0) == 0)) {
             HEAP32[5006] = (HEAP32[5006] | 0) + 1;
             _free(HEAP32[i31 + -4 >> 2] | 0);
             i30 = HEAP32[i14 >> 2] | 0;
            }
            HEAP32[i15 >> 2] = 0;
           }
           HEAP8[i11 >> 0] = 1;
           HEAP32[i15 >> 2] = i29;
           HEAP32[i1 + 80 >> 2] = i28;
          } while (0);
          i28 = HEAP32[i15 >> 2] | 0;
          i47 = i28 + (i30 * 24 | 0) | 0;
          HEAP32[i47 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
          HEAP32[i47 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
          HEAP32[i47 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
          HEAP32[i47 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
          HEAP32[i47 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
          HEAP32[i28 + (i30 * 24 | 0) + 20 >> 2] = i27;
          i27 = (HEAP32[i14 >> 2] | 0) + 1 | 0;
          HEAP32[i14 >> 2] = i27;
          i28 = HEAP32[i24 >> 2] | 0;
         }
         i26 = i26 + 1 | 0;
         if ((i26 | 0) >= (i28 | 0)) break; else i30 = i27;
        }
       }
       i23 = i23 + 1 | 0;
      } while ((i23 | 0) < (i19 | 0));
      HEAP8[i1 + 36 >> 0] = 1;
      HEAP32[i13 >> 2] = 0;
      HEAP32[i1 + 24 >> 2] = 0;
      HEAP32[i1 + 28 >> 2] = 0;
      i47 = i10 + ((HEAP32[i18 >> 2] | 0) * 9 << 2) + 20 | 0;
      HEAP32[i1 + 40 >> 2] = HEAP32[i47 + 0 >> 2];
      HEAP32[i1 + 44 >> 2] = HEAP32[i47 + 4 >> 2];
      HEAP32[i1 + 48 >> 2] = HEAP32[i47 + 8 >> 2];
      HEAP32[i1 + 52 >> 2] = HEAP32[i47 + 12 >> 2];
      d49 = 1.0 / +Math_sqrt(+(d22 * d22 + d21 * d21 + d20 * d20));
      d22 = d22 * d49;
      d21 = d21 * d49;
      d20 = d20 * d49;
      if (+Math_abs(+d20) > .7071067690849304) {
       d37 = 1.0 / +Math_sqrt(+(d20 * d20 + d21 * d21));
       d38 = 0.0;
       d36 = -(d20 * d37);
       d37 = d21 * d37;
      } else {
       d36 = 1.0 / +Math_sqrt(+(d22 * d22 + d21 * d21));
       d38 = -(d21 * d36);
       d36 = d22 * d36;
       d37 = 0.0;
      }
      L337 : do if ((i27 | 0) < 2) if ((i27 | 0) > 0) {
       i24 = 0;
       i30 = 0;
       i23 = 0;
       i7 = 1;
       while (1) {
        i25 = HEAP32[i15 >> 2] | 0;
        do if ((i24 | 0) == (i30 | 0)) {
         i26 = (i30 | 0) == 0 ? 1 : i30 << 1;
         if ((i30 | 0) >= (i26 | 0)) {
          i29 = i30;
          i26 = i30;
          break;
         }
         do if ((i26 | 0) == 0) i28 = 0; else {
          HEAP32[5004] = (HEAP32[5004] | 0) + 1;
          i27 = _malloc((i26 * 24 | 3) + 16 | 0) | 0;
          if ((i27 | 0) == 0) {
           i28 = 0;
           i30 = i24;
           break;
          }
          HEAP32[(i27 + 19 & -16) + -4 >> 2] = i27;
          i28 = i27 + 19 & -16;
          i30 = i24;
         } while (0);
         if ((i30 | 0) > 0) {
          i27 = 0;
          do {
           i47 = i28 + (i27 * 24 | 0) | 0;
           i46 = i23 + (i27 * 24 | 0) | 0;
           HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
           HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
           HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
           HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
           HEAP32[i47 + 16 >> 2] = HEAP32[i46 + 16 >> 2];
           HEAP32[i47 + 20 >> 2] = HEAP32[i46 + 20 >> 2];
           i27 = i27 + 1 | 0;
          } while ((i27 | 0) != (i30 | 0));
         }
         if ((i23 | 0) != 0) {
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i23 + -4 >> 2] | 0);
         }
         i29 = i24;
         i27 = HEAP32[i14 >> 2] | 0;
         i23 = i28;
        } else {
         i29 = i24;
         i26 = i30;
        } while (0);
        i47 = i23 + (i29 * 24 | 0) | 0;
        HEAP32[i47 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
        HEAP32[i47 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
        HEAP32[i47 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
        HEAP32[i47 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
        HEAP32[i47 + 16 >> 2] = HEAP32[i25 + 16 >> 2];
        HEAP32[i47 + 20 >> 2] = HEAP32[i25 + 20 >> 2];
        i24 = i24 + 1 | 0;
        if ((i7 | 0) >= (i27 | 0)) {
         i7 = 272;
         break L337;
        }
        i30 = i26;
        i7 = i7 + 1 | 0;
       }
      } else {
       i23 = 0;
       i7 = 307;
      } else {
       i7 = HEAP32[i15 >> 2] | 0;
       i23 = i27;
       i24 = 0;
       do {
        if (d38 * +HEAPF32[i7 + (i24 * 24 | 0) >> 2] + d36 * +HEAPF32[i7 + (i24 * 24 | 0) + 4 >> 2] + d37 * +HEAPF32[i7 + (i24 * 24 | 0) + 8 >> 2] < d38 * +HEAPF32[i7 >> 2] + d36 * +HEAPF32[i7 + 4 >> 2] + d37 * +HEAPF32[i7 + 8 >> 2]) {
         HEAP32[i1 + 288 >> 2] = HEAP32[i7 + 0 >> 2];
         HEAP32[i1 + 292 >> 2] = HEAP32[i7 + 4 >> 2];
         HEAP32[i1 + 296 >> 2] = HEAP32[i7 + 8 >> 2];
         HEAP32[i1 + 300 >> 2] = HEAP32[i7 + 12 >> 2];
         HEAP32[i1 + 304 >> 2] = HEAP32[i7 + 16 >> 2];
         HEAP32[i1 + 308 >> 2] = HEAP32[i7 + 20 >> 2];
         i23 = i7 + (i24 * 24 | 0) | 0;
         HEAP32[i7 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
         HEAP32[i7 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
         HEAP32[i7 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
         HEAP32[i7 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
         HEAP32[i7 + 16 >> 2] = HEAP32[i23 + 16 >> 2];
         HEAP32[i7 + 20 >> 2] = HEAP32[i23 + 20 >> 2];
         i23 = i7 + (i24 * 24 | 0) | 0;
         HEAP32[i23 + 0 >> 2] = HEAP32[i1 + 288 >> 2];
         HEAP32[i23 + 4 >> 2] = HEAP32[i1 + 292 >> 2];
         HEAP32[i23 + 8 >> 2] = HEAP32[i1 + 296 >> 2];
         HEAP32[i23 + 12 >> 2] = HEAP32[i1 + 300 >> 2];
         HEAP32[i23 + 16 >> 2] = HEAP32[i1 + 304 >> 2];
         HEAP32[i23 + 20 >> 2] = HEAP32[i1 + 308 >> 2];
         i23 = i27;
        }
        i24 = i24 + 1 | 0;
       } while ((i24 | 0) < (i23 | 0));
       HEAPF32[i7 + 16 >> 2] = -1.0000000150474662e+30;
       if ((i23 | 0) > 1) {
        d39 = +HEAPF32[i7 + 4 >> 2];
        i24 = 1;
        do {
         d44 = +HEAPF32[i7 + (i24 * 24 | 0) >> 2] - +HEAPF32[i7 >> 2];
         d48 = +HEAPF32[i7 + (i24 * 24 | 0) + 4 >> 2] - d39;
         d49 = +HEAPF32[i7 + (i24 * 24 | 0) + 8 >> 2] - +HEAPF32[i7 + 8 >> 2];
         d49 = ((d38 * d48 - d36 * d44) * d20 + (d22 * (d36 * d49 - d37 * d48) + d21 * (d37 * d44 - d38 * d49))) / +Math_sqrt(+(d44 * d44 + d48 * d48 + d49 * d49));
         HEAPF32[i7 + (i24 * 24 | 0) + 16 >> 2] = d49;
         i24 = i24 + 1 | 0;
        } while ((i24 | 0) < (i23 | 0));
       }
       HEAP32[i1 + 272 >> 2] = HEAP32[i7 + 0 >> 2];
       HEAP32[i1 + 276 >> 2] = HEAP32[i7 + 4 >> 2];
       HEAP32[i1 + 280 >> 2] = HEAP32[i7 + 8 >> 2];
       HEAP32[i1 + 284 >> 2] = HEAP32[i7 + 12 >> 2];
       __ZN20btAlignedObjectArrayI13GrahamVector3E17quickSortInternalI18btAngleCompareFuncEEvRKT_ii(i1 + 72 | 0, i1 + 272 | 0, 1, i23 + -1 | 0);
       i23 = HEAP32[i15 >> 2] | 0;
       HEAP32[5004] = (HEAP32[5004] | 0) + 1;
       i7 = _malloc(43) | 0;
       if ((i7 | 0) == 0) i7 = 0; else {
        HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
        i7 = i7 + 19 & -16;
       }
       i24 = HEAP32[i15 >> 2] | 0;
       HEAP32[i7 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
       HEAP32[i7 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
       HEAP32[i7 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
       HEAP32[i7 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
       HEAP32[i7 + 16 >> 2] = HEAP32[i23 + 16 >> 2];
       HEAP32[i7 + 20 >> 2] = HEAP32[i23 + 20 >> 2];
       HEAP32[5004] = (HEAP32[5004] | 0) + 1;
       i23 = _malloc(67) | 0;
       if ((i23 | 0) == 0) i23 = 0; else {
        HEAP32[(i23 + 19 & -16) + -4 >> 2] = i23;
        i23 = i23 + 19 & -16;
       }
       i25 = 0;
       while (1) {
        i47 = i23 + (i25 * 24 | 0) | 0;
        i46 = i7 + (i25 * 24 | 0) | 0;
        HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
        HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
        HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
        HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
        HEAP32[i47 + 16 >> 2] = HEAP32[i46 + 16 >> 2];
        HEAP32[i47 + 20 >> 2] = HEAP32[i46 + 20 >> 2];
        if ((i25 | 0) == 0) break; else i25 = i25 + 1 | 0;
       }
       if ((i7 | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i7 + -4 >> 2] | 0);
       }
       i27 = i23 + 24 | 0;
       HEAP32[i27 + 0 >> 2] = HEAP32[i24 + 24 >> 2];
       HEAP32[i27 + 4 >> 2] = HEAP32[i24 + 28 >> 2];
       HEAP32[i27 + 8 >> 2] = HEAP32[i24 + 32 >> 2];
       HEAP32[i27 + 12 >> 2] = HEAP32[i24 + 36 >> 2];
       HEAP32[i27 + 16 >> 2] = HEAP32[i24 + 40 >> 2];
       HEAP32[i27 + 20 >> 2] = HEAP32[i24 + 44 >> 2];
       i27 = HEAP32[i14 >> 2] | 0;
       if ((i27 | 0) == 2) {
        i24 = 2;
        i7 = 273;
        break;
       } else {
        i28 = 2;
        i24 = 2;
        i26 = 2;
        i7 = 2;
       }
       while (1) {
        L364 : do if ((i28 | 0) > 1) {
         i47 = HEAP32[i15 >> 2] | 0;
         i25 = i47 + (i7 * 24 | 0) | 0;
         d36 = +HEAPF32[i25 >> 2];
         d37 = +HEAPF32[i47 + (i7 * 24 | 0) + 4 >> 2];
         d38 = +HEAPF32[i47 + (i7 * 24 | 0) + 8 >> 2];
         while (1) {
          i47 = i28 + -2 | 0;
          i29 = i28 + -1 | 0;
          d44 = +HEAPF32[i23 + (i47 * 24 | 0) >> 2];
          d48 = d44 - +HEAPF32[i23 + (i29 * 24 | 0) >> 2];
          d42 = +HEAPF32[i23 + (i47 * 24 | 0) + 4 >> 2];
          d41 = d42 - +HEAPF32[i23 + (i29 * 24 | 0) + 4 >> 2];
          d49 = +HEAPF32[i23 + (i47 * 24 | 0) + 8 >> 2];
          d43 = d49 - +HEAPF32[i23 + (i29 * 24 | 0) + 8 >> 2];
          if ((d48 * (d42 - d37) - d41 * (d44 - d36)) * d20 + (d22 * (d41 * (d49 - d38) - d43 * (d42 - d37)) + d21 * (d43 * (d44 - d36) - d48 * (d49 - d38))) > 0.0) break;
          if ((i29 | 0) > 1) {
           i28 = i29;
           i24 = i29;
          } else {
           i28 = i29;
           i24 = i29;
           break L364;
          }
         }
         do if ((i28 | 0) == (i26 | 0)) {
          i29 = (i26 | 0) == 0 ? 1 : i26 << 1;
          if ((i26 | 0) >= (i29 | 0)) {
           i28 = i26;
           break;
          }
          do if ((i29 | 0) == 0) i30 = 0; else {
           HEAP32[5004] = (HEAP32[5004] | 0) + 1;
           i26 = _malloc((i29 * 24 | 3) + 16 | 0) | 0;
           if ((i26 | 0) == 0) {
            i30 = 0;
            i26 = i24;
            break;
           }
           HEAP32[(i26 + 19 & -16) + -4 >> 2] = i26;
           i30 = i26 + 19 & -16;
           i26 = i24;
          } while (0);
          if ((i26 | 0) > 0) {
           i27 = 0;
           do {
            i47 = i30 + (i27 * 24 | 0) | 0;
            i46 = i23 + (i27 * 24 | 0) | 0;
            HEAP32[i47 + 0 >> 2] = HEAP32[i46 + 0 >> 2];
            HEAP32[i47 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
            HEAP32[i47 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
            HEAP32[i47 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
            HEAP32[i47 + 16 >> 2] = HEAP32[i46 + 16 >> 2];
            HEAP32[i47 + 20 >> 2] = HEAP32[i46 + 20 >> 2];
            i27 = i27 + 1 | 0;
           } while ((i27 | 0) != (i26 | 0));
          }
          if ((i23 | 0) != 0) {
           HEAP32[5006] = (HEAP32[5006] | 0) + 1;
           _free(HEAP32[i23 + -4 >> 2] | 0);
          }
          i27 = HEAP32[i14 >> 2] | 0;
          i28 = i24;
          i26 = i29;
          i23 = i30;
         } while (0);
         i28 = i23 + (i28 * 24 | 0) | 0;
         HEAP32[i28 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
         HEAP32[i28 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
         HEAP32[i28 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
         HEAP32[i28 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
         HEAP32[i28 + 16 >> 2] = HEAP32[i25 + 16 >> 2];
         HEAP32[i28 + 20 >> 2] = HEAP32[i25 + 20 >> 2];
         i24 = i24 + 1 | 0;
         i28 = i24;
        } while (0);
        i7 = i7 + 1 | 0;
        if ((i7 | 0) == (i27 | 0)) {
         i7 = 272;
         break;
        }
       }
      } while (0);
      if ((i7 | 0) == 272) if ((i24 | 0) > 0) i7 = 273; else i7 = 295;
      if ((i7 | 0) == 273) {
       i28 = 0;
       i27 = 0;
       i26 = 0;
       i7 = 0;
       do {
        i25 = i23 + (i7 * 24 | 0) + 20 | 0;
        do if ((i28 | 0) == (i27 | 0)) {
         i29 = (i27 | 0) == 0 ? 1 : i27 << 1;
         if ((i27 | 0) >= (i29 | 0)) {
          i28 = i27;
          break;
         }
         do if ((i29 | 0) == 0) i28 = 0; else {
          HEAP32[5004] = (HEAP32[5004] | 0) + 1;
          i28 = _malloc((i29 << 2 | 3) + 16 | 0) | 0;
          if ((i28 | 0) == 0) {
           i28 = 0;
           break;
          }
          HEAP32[(i28 + 19 & -16) + -4 >> 2] = i28;
          i28 = i28 + 19 & -16;
         } while (0);
         if ((i27 | 0) > 0) {
          i30 = 0;
          do {
           i31 = i28 + (i30 << 2) | 0;
           if ((i31 | 0) != 0) HEAP32[i31 >> 2] = HEAP32[i26 + (i30 << 2) >> 2];
           i30 = i30 + 1 | 0;
          } while ((i30 | 0) != (i27 | 0));
         }
         if ((i26 | 0) != 0) {
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i26 + -4 >> 2] | 0);
          HEAP32[i13 >> 2] = 0;
         }
         HEAP8[i1 + 36 >> 0] = 1;
         HEAP32[i13 >> 2] = i28;
         HEAP32[i1 + 28 >> 2] = i29;
         i26 = i28;
         i28 = i27;
         i27 = i29;
        } while (0);
        i29 = i26 + (i28 << 2) | 0;
        if ((i29 | 0) != 0) {
         HEAP32[i29 >> 2] = HEAP32[i25 >> 2];
         i28 = HEAP32[i1 + 24 >> 2] | 0;
        }
        i28 = i28 + 1 | 0;
        HEAP32[i1 + 24 >> 2] = i28;
        i30 = HEAP32[i14 >> 2] | 0;
        L432 : do if ((i30 | 0) > 0) {
         i29 = HEAP32[i15 >> 2] | 0;
         i25 = HEAP32[i25 >> 2] | 0;
         i31 = 0;
         while (1) {
          i32 = i29 + (i31 * 24 | 0) + 20 | 0;
          i31 = i31 + 1 | 0;
          if ((HEAP32[i32 >> 2] | 0) == (i25 | 0)) break;
          if ((i31 | 0) >= (i30 | 0)) break L432;
         }
         HEAP32[i32 >> 2] = -1;
        } while (0);
        i7 = i7 + 1 | 0;
       } while ((i7 | 0) < (i24 | 0));
       i27 = HEAP32[i14 >> 2] | 0;
       i7 = 295;
      }
      L440 : do if ((i7 | 0) == 295) {
       i7 = 0;
       if ((i27 | 0) > 0) {
        i28 = HEAP32[i15 >> 2] | 0;
        i29 = HEAP32[i4 >> 2] | 0;
        i26 = 0;
        while (1) {
         i25 = HEAP32[i28 + (i26 * 24 | 0) + 20 >> 2] | 0;
         if (!((i25 | 0) == -1 | (i29 | 0) < 1)) {
          i24 = 0;
          do {
           i30 = 0;
           while (1) {
            if ((HEAP32[i18 + (i30 << 2) >> 2] | 0) == (i24 | 0)) break;
            i30 = i30 + 1 | 0;
            if ((i30 | 0) >= (i19 | 0)) {
             i7 = 303;
             break;
            }
           }
           do if ((i7 | 0) == 303) {
            i7 = 0;
            i30 = HEAP32[i10 + (i24 * 36 | 0) + 4 >> 2] | 0;
            if ((i30 | 0) <= 0) break;
            i31 = HEAP32[i10 + (i24 * 36 | 0) + 12 >> 2] | 0;
            i32 = 0;
            do {
             if ((HEAP32[i31 + (i32 << 2) >> 2] | 0) == (i25 | 0)) {
              i24 = 1;
              break L440;
             }
             i32 = i32 + 1 | 0;
            } while ((i32 | 0) < (i30 | 0));
           } while (0);
           i24 = i24 + 1 | 0;
          } while ((i24 | 0) < (i29 | 0));
         }
         i26 = i26 + 1 | 0;
         if ((i26 | 0) >= (i27 | 0)) {
          i7 = 307;
          break;
         }
        }
       } else i7 = 307;
      } while (0);
      if ((i7 | 0) == 307) {
       i7 = 0;
       i24 = HEAP32[i8 + 52 >> 2] | 0;
       i25 = HEAP32[i24 + 28 >> 2] | 0;
       if ((i25 | 0) == (HEAP32[i24 + 32 >> 2] | 0)) {
        __ZN20btAlignedObjectArrayI6btFaceE7reserveEi(i24 + 24 | 0, (i25 | 0) == 0 ? 1 : i25 << 1);
        i25 = HEAP32[i24 + 28 >> 2] | 0;
       }
       i26 = (HEAP32[i24 + 36 >> 2] | 0) + (i25 * 36 | 0) | 0;
       if ((i26 | 0) != 0) {
        __ZN20btAlignedObjectArrayIiEC2ERKS0_(i26, i1 + 20 | 0);
        HEAP32[i26 + 20 >> 2] = HEAP32[i1 + 40 >> 2];
        HEAP32[i26 + 24 >> 2] = HEAP32[i1 + 44 >> 2];
        HEAP32[i26 + 28 >> 2] = HEAP32[i1 + 48 >> 2];
        HEAP32[i26 + 32 >> 2] = HEAP32[i1 + 52 >> 2];
        i25 = HEAP32[i24 + 28 >> 2] | 0;
       }
       HEAP32[i24 + 28 >> 2] = i25 + 1;
       i24 = 0;
      }
      if ((i23 | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i23 + -4 >> 2] | 0);
      }
      i23 = HEAP32[i13 >> 2] | 0;
      if ((i23 | 0) != 0) {
       if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i23 + -4 >> 2] | 0);
       }
       HEAP32[i13 >> 2] = 0;
      }
      i23 = HEAP32[i15 >> 2] | 0;
      if ((i23 | 0) != 0) {
       if ((HEAP8[i11 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i23 + -4 >> 2] | 0);
       }
       HEAP32[i15 >> 2] = 0;
      }
      HEAP8[i11 >> 0] = 1;
      HEAP32[i15 >> 2] = 0;
      HEAP32[i14 >> 2] = 0;
      HEAP32[i1 + 80 >> 2] = 0;
      if (i24 & (i19 | 0) > 0) i7 = 324;
     } else if ((i19 | 0) > 0) i7 = 324;
     if ((i7 | 0) == 324) {
      i7 = 0;
      i23 = 0;
      do {
       i24 = HEAP32[i18 + (i23 << 2) >> 2] | 0;
       __ZN20btAlignedObjectArrayIiEC2ERKS0_(i1 + 288 | 0, i10 + (i24 * 36 | 0) | 0);
       i24 = i10 + (i24 * 36 | 0) + 20 | 0;
       HEAP32[i16 + 0 >> 2] = HEAP32[i24 + 0 >> 2];
       HEAP32[i16 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
       HEAP32[i16 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
       HEAP32[i16 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
       i24 = HEAP32[i8 + 52 >> 2] | 0;
       i25 = HEAP32[i24 + 28 >> 2] | 0;
       if ((i25 | 0) == (HEAP32[i24 + 32 >> 2] | 0)) {
        __ZN20btAlignedObjectArrayI6btFaceE7reserveEi(i24 + 24 | 0, (i25 | 0) == 0 ? 1 : i25 << 1);
        i25 = HEAP32[i24 + 28 >> 2] | 0;
       }
       i26 = (HEAP32[i24 + 36 >> 2] | 0) + (i25 * 36 | 0) | 0;
       if ((i26 | 0) != 0) {
        __ZN20btAlignedObjectArrayIiEC2ERKS0_(i26, i1 + 288 | 0);
        HEAP32[i26 + 20 >> 2] = HEAP32[i16 + 0 >> 2];
        HEAP32[i26 + 24 >> 2] = HEAP32[i16 + 4 >> 2];
        HEAP32[i26 + 28 >> 2] = HEAP32[i16 + 8 >> 2];
        HEAP32[i26 + 32 >> 2] = HEAP32[i16 + 12 >> 2];
        i25 = HEAP32[i24 + 28 >> 2] | 0;
       }
       HEAP32[i24 + 28 >> 2] = i25 + 1;
       i24 = HEAP32[i1 + 300 >> 2] | 0;
       if ((i24 | 0) != 0) {
        if ((HEAP8[i1 + 304 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i24 + -4 >> 2] | 0);
        }
        HEAP32[i1 + 300 >> 2] = 0;
       }
       i23 = i23 + 1 | 0;
      } while ((i23 | 0) < (i19 | 0));
     }
     if ((i18 | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i18 + -4 >> 2] | 0);
     }
     if ((i17 | 0) == 0) {
      i9 = i12;
      break;
     }
    }
   }
  } else i9 = 0;
 } else i9 = 0;
 i8 = HEAP32[i8 + 52 >> 2] | 0;
 HEAP32[i8 + 64 >> 2] = 0;
 HEAP32[i8 + 68 >> 2] = 0;
 HEAP32[i8 + 72 >> 2] = 0;
 HEAP32[i8 + 76 >> 2] = 0;
 i12 = HEAP32[i8 + 28 >> 2] | 0;
 if ((i12 | 0) > 0) {
  i13 = i12;
  i17 = 0;
  i15 = 0;
  i27 = 0;
  i32 = 0;
  i28 = 0;
  i31 = 0;
  i30 = 0;
  i29 = 0;
  i26 = 0;
  i19 = 0;
  i25 = 0;
  i18 = 0;
  i11 = 0;
  while (1) {
   i23 = HEAP32[i8 + 36 >> 2] | 0;
   i12 = HEAP32[i23 + (i11 * 36 | 0) + 4 >> 2] | 0;
   if ((i12 | 0) > 0) {
    i14 = i11 & 65535;
    i13 = i11 | -65536;
    i24 = 0;
    while (1) {
     i16 = i24 + 1 | 0;
     i33 = HEAP32[i23 + (i11 * 36 | 0) + 12 >> 2] | 0;
     i35 = HEAP32[i33 + (i24 << 2) >> 2] & 65535;
     i33 = HEAP32[i33 + (((i16 | 0) == (i12 | 0) ? 0 : i16) << 2) >> 2] & 65535;
     i24 = i35 << 16 >> 16 < i33 << 16 >> 16 ? i35 : i33;
     i23 = i35 << 16 >> 16 < i33 << 16 >> 16 ? i33 : i35;
     i45 = i35 << 16 >> 16 < i33 << 16 >> 16 ? i35 : i33;
     i35 = i35 << 16 >> 16 < i33 << 16 >> 16 ? i33 : i35;
     i33 = i27 + -1 | 0;
     L512 : do if ((((i45 & 65535) << 16) + (i35 << 16 >> 16) & i33) >>> 0 < i17 >>> 0 ? (i3 = HEAP32[i26 + ((((i45 & 65535) << 16) + (i35 << 16 >> 16) & i33) << 2) >> 2] | 0, !((i3 | 0) == -1)) : 0) {
      i34 = i3;
      while (1) {
       if (i35 << 16 >> 16 == (HEAP16[i30 + (i34 << 2) >> 1] | 0) ? i45 << 16 >> 16 == (HEAP16[i30 + (i34 << 2) + 2 >> 1] | 0) : 0) break;
       i34 = HEAP32[i18 + (i34 << 2) >> 2] | 0;
       if ((i34 | 0) == -1) {
        i34 = 0;
        break L512;
       }
      }
      if (!((i34 | 0) == -1)) i34 = i32 + (i34 << 2) | 0; else i34 = 0;
     } else i34 = 0; while (0);
     i47 = HEAP32[i8 + 16 >> 2] | 0;
     d21 = +HEAPF32[i47 + (i45 << 16 >> 16 << 4) >> 2] - +HEAPF32[i47 + (i35 << 16 >> 16 << 4) >> 2];
     d20 = +HEAPF32[i47 + (i45 << 16 >> 16 << 4) + 4 >> 2] - +HEAPF32[i47 + (i35 << 16 >> 16 << 4) + 4 >> 2];
     d22 = +HEAPF32[i47 + (i45 << 16 >> 16 << 4) + 8 >> 2] - +HEAPF32[i47 + (i35 << 16 >> 16 << 4) + 8 >> 2];
     d36 = 1.0 / +Math_sqrt(+(d21 * d21 + d20 * d20 + d22 * d22));
     i45 = HEAP32[i8 + 48 >> 2] | 0;
     L522 : do if ((i45 | 0) > 0) {
      i35 = HEAP32[i8 + 56 >> 2] | 0;
      i46 = 0;
      while (1) {
       d37 = +HEAPF32[i35 + (i46 << 4) >> 2];
       d38 = +HEAPF32[i35 + (i46 << 4) + 8 >> 2];
       do if (!(+Math_abs(+(d37 - d21 * d36)) > 1.0e-6)) {
        if (+Math_abs(+(+HEAPF32[i35 + (i46 << 4) + 4 >> 2] - d20 * d36)) > 1.0e-6) break;
        if (!(+Math_abs(+(d38 - d22 * d36)) > 1.0e-6)) break L522;
       } while (0);
       do if (!(+Math_abs(+(d21 * d36 + d37)) > 1.0e-6)) {
        if (+Math_abs(+(d20 * d36 + +HEAPF32[i35 + (i46 << 4) + 4 >> 2])) > 1.0e-6) break;
        if (!(+Math_abs(+(d22 * d36 + d38)) > 1.0e-6)) break L522;
       } while (0);
       i46 = i46 + 1 | 0;
       if ((i46 | 0) >= (i45 | 0)) {
        i7 = 359;
        break;
       }
      }
     } else i7 = 359; while (0);
     if ((i7 | 0) == 359) {
      i7 = 0;
      do if ((i45 | 0) == (HEAP32[i8 + 52 >> 2] | 0)) {
       i35 = (i45 | 0) == 0 ? 1 : i45 << 1;
       if ((i45 | 0) >= (i35 | 0)) break;
       if ((i35 | 0) == 0) i46 = 0; else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i45 = _malloc((i35 << 4 | 3) + 16 | 0) | 0;
        if ((i45 | 0) == 0) i46 = 0; else {
         HEAP32[(i45 + 19 & -16) + -4 >> 2] = i45;
         i46 = i45 + 19 & -16;
        }
        i45 = HEAP32[i8 + 48 >> 2] | 0;
       }
       if ((i45 | 0) > 0) {
        i47 = 0;
        do {
         i50 = i46 + (i47 << 4) | 0;
         i51 = (HEAP32[i8 + 56 >> 2] | 0) + (i47 << 4) | 0;
         HEAP32[i50 + 0 >> 2] = HEAP32[i51 + 0 >> 2];
         HEAP32[i50 + 4 >> 2] = HEAP32[i51 + 4 >> 2];
         HEAP32[i50 + 8 >> 2] = HEAP32[i51 + 8 >> 2];
         HEAP32[i50 + 12 >> 2] = HEAP32[i51 + 12 >> 2];
         i47 = i47 + 1 | 0;
        } while ((i47 | 0) != (i45 | 0));
       }
       i45 = HEAP32[i8 + 56 >> 2] | 0;
       if ((i45 | 0) != 0) {
        if ((HEAP8[i8 + 60 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i45 + -4 >> 2] | 0);
        }
        HEAP32[i8 + 56 >> 2] = 0;
       }
       HEAP8[i8 + 60 >> 0] = 1;
       HEAP32[i8 + 56 >> 2] = i46;
       HEAP32[i8 + 52 >> 2] = i35;
       i45 = HEAP32[i8 + 48 >> 2] | 0;
      } while (0);
      i51 = HEAP32[i8 + 56 >> 2] | 0;
      HEAPF32[i51 + (i45 << 4) >> 2] = d21 * d36;
      HEAPF32[i51 + (i45 << 4) + 4 >> 2] = d20 * d36;
      HEAPF32[i51 + (i45 << 4) + 8 >> 2] = d22 * d36;
      HEAPF32[i51 + (i45 << 4) + 12 >> 2] = 0.0;
      HEAP32[i8 + 48 >> 2] = (HEAP32[i8 + 48 >> 2] | 0) + 1;
     }
     L557 : do if ((i34 | 0) == 0) {
      i35 = ((i24 & 65535) << 16) + (i23 << 16 >> 16) & i33;
      L559 : do if (i35 >>> 0 < i17 >>> 0) {
       i33 = HEAP32[i26 + (i35 << 2) >> 2] | 0;
       if ((i33 | 0) == -1) break;
       while (1) {
        if (i23 << 16 >> 16 == (HEAP16[i30 + (i33 << 2) >> 1] | 0) ? i24 << 16 >> 16 == (HEAP16[i30 + (i33 << 2) + 2 >> 1] | 0) : 0) break;
        i33 = HEAP32[i18 + (i33 << 2) >> 2] | 0;
        if ((i33 | 0) == -1) break L559;
       }
       if ((i33 | 0) == -1) break;
       i51 = i32 + (i33 << 2) | 0;
       HEAP16[i51 >> 1] = i13;
       HEAP16[i51 + 2 >> 1] = i13 >>> 16;
       break L557;
      } while (0);
      do if ((i15 | 0) == (i27 | 0)) {
       i33 = (i27 | 0) == 0 ? 1 : i27 << 1;
       if ((i27 | 0) >= (i33 | 0)) {
        i45 = i27;
        i33 = i27;
        break;
       }
       do if ((i33 | 0) == 0) i34 = 0; else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i34 = _malloc((i33 << 2 | 3) + 16 | 0) | 0;
        if ((i34 | 0) == 0) {
         i34 = 0;
         break;
        }
        HEAP32[(i34 + 19 & -16) + -4 >> 2] = i34;
        i34 = i34 + 19 & -16;
       } while (0);
       if ((i27 | 0) > 0) {
        i45 = 0;
        do {
         i46 = i34 + (i45 << 2) | 0;
         if ((i46 | 0) != 0) {
          i51 = i32 + (i45 << 2) | 0;
          i51 = HEAPU16[i51 >> 1] | HEAPU16[i51 + 2 >> 1] << 16;
          HEAP16[i46 >> 1] = i51;
          HEAP16[i46 + 2 >> 1] = i51 >>> 16;
         }
         i45 = i45 + 1 | 0;
        } while ((i45 | 0) != (i27 | 0));
       }
       if ((i32 | 0) == 0) {
        i45 = i27;
        i32 = i34;
        break;
       }
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i32 + -4 >> 2] | 0);
       i45 = i27;
       i32 = i34;
      } else {
       i45 = i15;
       i33 = i27;
      } while (0);
      i34 = i32 + (i45 << 2) | 0;
      if ((i34 | 0) != 0) {
       HEAP16[i34 >> 1] = i13;
       HEAP16[i34 + 2 >> 1] = i13 >>> 16;
       i45 = i15;
      }
      i34 = i45 + 1 | 0;
      do if ((i28 | 0) == (i31 | 0)) {
       i31 = (i28 | 0) == 0 ? 1 : i28 << 1;
       if ((i28 | 0) >= (i31 | 0)) {
        i31 = i28;
        break;
       }
       do if ((i31 | 0) == 0) i45 = 0; else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i45 = _malloc((i31 << 2 | 3) + 16 | 0) | 0;
        if ((i45 | 0) == 0) {
         i45 = 0;
         break;
        }
        HEAP32[(i45 + 19 & -16) + -4 >> 2] = i45;
        i45 = i45 + 19 & -16;
       } while (0);
       if ((i28 | 0) > 0) {
        i47 = 0;
        do {
         i46 = i45 + (i47 << 2) | 0;
         if ((i46 | 0) != 0) {
          i51 = i30 + (i47 << 2) | 0;
          i51 = HEAPU16[i51 >> 1] | HEAPU16[i51 + 2 >> 1] << 16;
          HEAP16[i46 >> 1] = i51;
          HEAP16[i46 + 2 >> 1] = i51 >>> 16;
         }
         i47 = i47 + 1 | 0;
        } while ((i47 | 0) != (i28 | 0));
       }
       if ((i30 | 0) == 0) {
        i30 = i45;
        break;
       }
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i30 + -4 >> 2] | 0);
       i30 = i45;
      } while (0);
      i45 = i30 + (i28 << 2) | 0;
      if ((i45 | 0) != 0) {
       HEAP16[i45 >> 1] = (i24 & 65535) << 16 | i23 & 65535;
       HEAP16[i45 + 2 >> 1] = ((i24 & 65535) << 16 | i23 & 65535) >>> 16;
      }
      i28 = i28 + 1 | 0;
      if ((i27 | 0) < (i33 | 0)) {
       do if ((i17 | 0) < (i33 | 0)) {
        if ((i17 | 0) <= (i33 | 0)) {
         do if ((i29 | 0) < (i33 | 0)) {
          do if ((i33 | 0) == 0) i27 = 0; else {
           HEAP32[5004] = (HEAP32[5004] | 0) + 1;
           i27 = _malloc((i33 << 2 | 3) + 16 | 0) | 0;
           if ((i27 | 0) == 0) {
            i27 = 0;
            break;
           }
           HEAP32[(i27 + 19 & -16) + -4 >> 2] = i27;
           i27 = i27 + 19 & -16;
          } while (0);
          if ((i17 | 0) > 0) {
           i29 = 0;
           do {
            i35 = i27 + (i29 << 2) | 0;
            if ((i35 | 0) != 0) HEAP32[i35 >> 2] = HEAP32[i26 + (i29 << 2) >> 2];
            i29 = i29 + 1 | 0;
           } while ((i29 | 0) != (i17 | 0));
          }
          if ((i26 | 0) == 0) {
           i29 = i33;
           i26 = i27;
           break;
          }
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i26 + -4 >> 2] | 0);
          i29 = i33;
          i26 = i27;
         } while (0);
         i35 = i17;
         do {
          i27 = i26 + (i35 << 2) | 0;
          if ((i27 | 0) != 0) HEAP32[i27 >> 2] = 0;
          i35 = i35 + 1 | 0;
         } while ((i35 | 0) != (i33 | 0));
        }
        if ((i19 | 0) < (i33 | 0)) {
         do if ((i25 | 0) < (i33 | 0)) {
          do if ((i33 | 0) == 0) i27 = 0; else {
           HEAP32[5004] = (HEAP32[5004] | 0) + 1;
           i25 = _malloc((i33 << 2 | 3) + 16 | 0) | 0;
           if ((i25 | 0) == 0) {
            i27 = 0;
            break;
           }
           HEAP32[(i25 + 19 & -16) + -4 >> 2] = i25;
           i27 = i25 + 19 & -16;
          } while (0);
          if ((i19 | 0) > 0) {
           i25 = 0;
           do {
            i35 = i27 + (i25 << 2) | 0;
            if ((i35 | 0) != 0) HEAP32[i35 >> 2] = HEAP32[i18 + (i25 << 2) >> 2];
            i25 = i25 + 1 | 0;
           } while ((i25 | 0) != (i19 | 0));
          }
          if ((i18 | 0) == 0) {
           i25 = i33;
           i18 = i27;
           break;
          }
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i18 + -4 >> 2] | 0);
          i25 = i33;
          i18 = i27;
         } while (0);
         do {
          i27 = i18 + (i19 << 2) | 0;
          if ((i27 | 0) != 0) HEAP32[i27 >> 2] = 0;
          i19 = i19 + 1 | 0;
         } while ((i19 | 0) != (i33 | 0));
        }
        if ((i33 | 0) > 0) {
         i51 = i33 << 2;
         _memset(i26 | 0, -1, i51 | 0) | 0;
         _memset(i18 | 0, -1, i51 | 0) | 0;
        }
        if ((i17 | 0) <= 0) {
         i17 = i33;
         i19 = i33;
         break;
        }
        i27 = i33 + -1 | 0;
        i19 = 0;
        do {
         i51 = i26 + (((HEAPU16[i30 + (i19 << 2) + 2 >> 1] << 16) + (HEAP16[i30 + (i19 << 2) >> 1] | 0) & i27) << 2) | 0;
         HEAP32[i18 + (i19 << 2) >> 2] = HEAP32[i51 >> 2];
         HEAP32[i51 >> 2] = i19;
         i19 = i19 + 1 | 0;
        } while ((i19 | 0) != (i17 | 0));
        i17 = i33;
        i19 = i33;
       } while (0);
       i35 = ((i24 & 65535) << 16) + (i23 << 16 >> 16) & i33 + -1;
      }
      i27 = i26 + (i35 << 2) | 0;
      HEAP32[i18 + (i15 << 2) >> 2] = HEAP32[i27 >> 2];
      HEAP32[i27 >> 2] = i15;
      i15 = i34;
      i27 = i33;
     } else HEAP16[i34 + 2 >> 1] = i14; while (0);
     if ((i16 | 0) >= (i12 | 0)) break;
     i23 = HEAP32[i8 + 36 >> 2] | 0;
     i24 = i16;
    }
    i12 = HEAP32[i8 + 28 >> 2] | 0;
   } else i12 = i13;
   i11 = i11 + 1 | 0;
   if ((i11 | 0) >= (i12 | 0)) break; else i13 = i12;
  }
  if ((i12 | 0) > 0) {
   i7 = HEAP32[i8 + 36 >> 2] | 0;
   i11 = HEAP32[i8 + 16 >> 2] | 0;
   d36 = 0.0;
   i3 = 0;
   do {
    i15 = HEAP32[i7 + (i3 * 36 | 0) + 4 >> 2] | 0;
    i14 = HEAP32[i7 + (i3 * 36 | 0) + 12 >> 2] | 0;
    i13 = HEAP32[i14 >> 2] | 0;
    if ((i15 + -2 | 0) >= 1) {
     d22 = +HEAPF32[i8 + 64 >> 2];
     d21 = +HEAPF32[i8 + 68 >> 2];
     d20 = +HEAPF32[i8 + 72 >> 2];
     i16 = 1;
     do {
      i50 = HEAP32[i14 + (i16 << 2) >> 2] | 0;
      i16 = i16 + 1 | 0;
      i51 = HEAP32[i14 + (((i16 | 0) % (i15 | 0) | 0) << 2) >> 2] | 0;
      d37 = +HEAPF32[i11 + (i13 << 4) >> 2];
      d38 = +HEAPF32[i11 + (i50 << 4) >> 2];
      d40 = +HEAPF32[i11 + (i13 << 4) + 4 >> 2];
      d41 = +HEAPF32[i11 + (i50 << 4) + 4 >> 2];
      d43 = +HEAPF32[i11 + (i13 << 4) + 8 >> 2];
      d44 = +HEAPF32[i11 + (i50 << 4) + 8 >> 2];
      d39 = +HEAPF32[i11 + (i51 << 4) >> 2];
      d42 = +HEAPF32[i11 + (i51 << 4) + 4 >> 2];
      d48 = +HEAPF32[i11 + (i51 << 4) + 8 >> 2];
      d49 = +Math_sqrt(+(((d37 - d38) * (d40 - d42) - (d40 - d41) * (d37 - d39)) * ((d37 - d38) * (d40 - d42) - (d40 - d41) * (d37 - d39)) + (((d40 - d41) * (d43 - d48) - (d43 - d44) * (d40 - d42)) * ((d40 - d41) * (d43 - d48) - (d43 - d44) * (d40 - d42)) + ((d43 - d44) * (d37 - d39) - (d37 - d38) * (d43 - d48)) * ((d43 - d44) * (d37 - d39) - (d37 - d38) * (d43 - d48))))) * .5;
      d22 = d22 + (d37 + d38 + d39) * .3333333432674408 * d49;
      HEAPF32[i8 + 64 >> 2] = d22;
      d21 = (d40 + d41 + d42) * .3333333432674408 * d49 + d21;
      HEAPF32[i8 + 68 >> 2] = d21;
      d20 = d49 * (d43 + d44 + d48) * .3333333432674408 + d20;
      HEAPF32[i8 + 72 >> 2] = d20;
      d36 = d36 + d49;
     } while ((i16 | 0) != (i15 + -1 | 0));
    }
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i12 | 0));
  } else d36 = 0.0;
 } else {
  d36 = 0.0;
  i32 = 0;
  i30 = 0;
  i26 = 0;
  i18 = 0;
 }
 d21 = 1.0 / d36;
 d36 = d21 * +HEAPF32[i8 + 64 >> 2];
 HEAPF32[i8 + 64 >> 2] = d36;
 d22 = d21 * +HEAPF32[i8 + 68 >> 2];
 HEAPF32[i8 + 68 >> 2] = d22;
 d21 = d21 * +HEAPF32[i8 + 72 >> 2];
 HEAPF32[i8 + 72 >> 2] = d21;
 HEAPF32[i8 + 96 >> 2] = 3.4028234663852886e+38;
 if ((i12 | 0) > 0) {
  i7 = HEAP32[i8 + 36 >> 2] | 0;
  d37 = 3.4028234663852886e+38;
  i3 = 0;
  while (1) {
   d20 = +Math_abs(+(+HEAPF32[i7 + (i3 * 36 | 0) + 32 >> 2] + (+HEAPF32[i7 + (i3 * 36 | 0) + 20 >> 2] * d36 + +HEAPF32[i7 + (i3 * 36 | 0) + 24 >> 2] * d22 + +HEAPF32[i7 + (i3 * 36 | 0) + 28 >> 2] * d21)));
   if (d20 < d37) HEAPF32[i8 + 96 >> 2] = d20; else d20 = d37;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (i12 | 0)) break; else d37 = d20;
  }
 } else d20 = 3.4028234663852886e+38;
 i3 = HEAP32[i8 + 8 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i7 = HEAP32[i8 + 16 >> 2] | 0;
  d37 = -3.4028234663852886e+38;
  d38 = -3.4028234663852886e+38;
  d39 = -3.4028234663852886e+38;
  d36 = 3.4028234663852886e+38;
  d22 = 3.4028234663852886e+38;
  d21 = 3.4028234663852886e+38;
  i11 = 0;
  do {
   d49 = +HEAPF32[i7 + (i11 << 4) >> 2];
   d36 = d49 < d36 ? d49 : d36;
   d37 = d49 > d37 ? d49 : d37;
   d49 = +HEAPF32[i7 + (i11 << 4) + 4 >> 2];
   d22 = d49 < d22 ? d49 : d22;
   d38 = d49 > d38 ? d49 : d38;
   d49 = +HEAPF32[i7 + (i11 << 4) + 8 >> 2];
   d21 = d49 < d21 ? d49 : d21;
   d39 = d49 > d39 ? d49 : d39;
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < (i3 | 0));
 } else {
  d37 = -3.4028234663852886e+38;
  d38 = -3.4028234663852886e+38;
  d39 = -3.4028234663852886e+38;
  d36 = 3.4028234663852886e+38;
  d22 = 3.4028234663852886e+38;
  d21 = 3.4028234663852886e+38;
 }
 HEAPF32[i8 + 100 >> 2] = d37 + d36;
 HEAPF32[i8 + 104 >> 2] = d38 + d22;
 HEAPF32[i8 + 108 >> 2] = d21 + d39;
 HEAPF32[i8 + 112 >> 2] = 0.0;
 d36 = d37 - d36;
 d22 = d38 - d22;
 d21 = d39 - d21;
 HEAPF32[i8 + 116 >> 2] = d36;
 HEAPF32[i8 + 120 >> 2] = d22;
 HEAPF32[i8 + 124 >> 2] = d21;
 HEAPF32[i8 + 128 >> 2] = 0.0;
 d20 = d20 / 1.7320507764816284;
 if (d36 < d22) i3 = d22 < d21 ? 2 : 1; else i3 = d36 < d21 ? 2 : 0;
 i7 = i8 + (i3 << 2) + 116 | 0;
 d21 = (+HEAPF32[i7 >> 2] * .5 - d20) * .0009765625;
 HEAPF32[i8 + 88 >> 2] = d20;
 HEAPF32[i8 + 84 >> 2] = d20;
 HEAPF32[i8 + 80 >> 2] = d20;
 d22 = +HEAPF32[i7 >> 2] * .5;
 i7 = i8 + (i3 << 2) + 80 | 0;
 HEAPF32[i7 >> 2] = d22;
 i11 = 0;
 while (1) {
  if (__ZNK18btConvexPolyhedron15testContainmentEv(i8) | 0) {
   i7 = 470;
   break;
  }
  d22 = d22 - d21;
  HEAPF32[i7 >> 2] = d22;
  i11 = i11 + 1 | 0;
  if ((i11 | 0) >= 1024) {
   i7 = 469;
   break;
  }
 }
 L700 : do if ((i7 | 0) == 469) {
  HEAPF32[i8 + 88 >> 2] = d20;
  HEAPF32[i8 + 84 >> 2] = d20;
  HEAPF32[i8 + 80 >> 2] = d20;
 } else if ((i7 | 0) == 470) {
  d20 = (+HEAPF32[i8 + 96 >> 2] - d20) * .0009765625;
  i3 = 1 << i3 & 3;
  d36 = +HEAPF32[i8 + ((1 << i3 & 3) << 2) + 80 >> 2];
  i7 = 0;
  while (1) {
   d21 = +HEAPF32[i8 + (i3 << 2) + 80 >> 2];
   HEAPF32[i8 + (i3 << 2) + 80 >> 2] = d20 + d21;
   d22 = d20 + +HEAPF32[i8 + ((1 << i3 & 3) << 2) + 80 >> 2];
   HEAPF32[i8 + ((1 << i3 & 3) << 2) + 80 >> 2] = d22;
   i7 = i7 + 1 | 0;
   if (!(__ZNK18btConvexPolyhedron15testContainmentEv(i8) | 0)) break;
   if ((i7 | 0) >= 1024) break L700; else d36 = d22;
  }
  HEAPF32[i8 + (i3 << 2) + 80 >> 2] = d21;
  HEAPF32[i8 + ((1 << i3 & 3) << 2) + 80 >> 2] = d36;
 } while (0);
 if ((i30 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i30 + -4 >> 2] | 0);
 }
 if ((i32 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i32 + -4 >> 2] | 0);
 }
 if ((i18 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i18 + -4 >> 2] | 0);
 }
 if ((i26 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i26 + -4 >> 2] | 0);
 }
 if ((i9 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i9 + -4 >> 2] | 0);
 }
 i9 = HEAP32[i4 >> 2] | 0;
 if ((i9 | 0) > 0) {
  i11 = 0;
  do {
   i3 = i10 + (i11 * 36 | 0) + 4 | 0;
   i7 = i10 + (i11 * 36 | 0) + 12 | 0;
   i12 = HEAP32[i7 >> 2] | 0;
   i8 = i10 + (i11 * 36 | 0) + 16 | 0;
   if ((i12 | 0) != 0) {
    if ((HEAP8[i8 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i12 + -4 >> 2] | 0);
    }
    HEAP32[i7 >> 2] = 0;
   }
   HEAP8[i8 >> 0] = 1;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i10 + (i11 * 36 | 0) + 8 >> 2] = 0;
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) != (i9 | 0));
  i10 = HEAP32[i6 >> 2] | 0;
 }
 if ((i10 | 0) != 0) {
  if ((HEAP8[i1 + 164 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i10 + -4 >> 2] | 0);
  }
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i1 + 164 >> 0] = 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 if ((i5 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i5 + -4 >> 2] | 0);
 }
 __ZN20btConvexHullComputerD2Ev(i1 + 196 | 0);
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return 1;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return 1;
}
function __ZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i3, i4, i5, i15, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, i31 = 0, i32 = 0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, i48 = 0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0, i59 = 0, i60 = 0, i61 = 0, d62 = 0.0, d63 = 0.0, d64 = 0.0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 832 | 0;
 i13 = HEAP32[i3 + 20 >> 2] | 0;
 if ((i13 | 0) == 0) {
  i13 = HEAP32[i3 + 4 >> 2] | 0;
  i13 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 31](i13, HEAP32[i4 + 8 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0) | 0;
  HEAP32[i3 + 20 >> 2] = i13;
  HEAP8[i3 + 16 >> 0] = 1;
 }
 HEAP32[i2 + 4 >> 2] = i13;
 i7 = HEAP32[i4 + 4 >> 2] | 0;
 i6 = HEAP32[i5 + 4 >> 2] | 0;
 i17 = HEAP32[i7 + 4 >> 2] | 0;
 if ((i17 | 0) == 10 ? (HEAP32[i6 + 4 >> 2] | 0) == 10 : 0) {
  d8 = +HEAPF32[(HEAP32[i3 + 20 >> 2] | 0) + 752 >> 2];
  i72 = HEAP32[i7 + 52 >> 2] | 0;
  d24 = +HEAPF32[i7 + (i72 << 2) + 28 >> 2];
  d10 = +HEAPF32[i7 + (((i72 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
  i73 = HEAP32[i6 + 52 >> 2] | 0;
  d25 = +HEAPF32[i6 + (i73 << 2) + 28 >> 2];
  d11 = +HEAPF32[i6 + (((i73 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
  i74 = HEAP32[i4 + 12 >> 2] | 0;
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  d18 = +HEAPF32[i74 + (i72 << 2) >> 2];
  d12 = +HEAPF32[i74 + (i72 << 2) + 16 >> 2];
  d19 = +HEAPF32[i74 + (i72 << 2) + 32 >> 2];
  d26 = +HEAPF32[i3 + (i73 << 2) >> 2];
  d27 = +HEAPF32[i3 + (i73 << 2) + 16 >> 2];
  d23 = +HEAPF32[i3 + (i73 << 2) + 32 >> 2];
  d22 = +HEAPF32[i3 + 48 >> 2] - +HEAPF32[i74 + 48 >> 2];
  d21 = +HEAPF32[i3 + 52 >> 2] - +HEAPF32[i74 + 52 >> 2];
  d20 = +HEAPF32[i3 + 56 >> 2] - +HEAPF32[i74 + 56 >> 2];
  d28 = 1.0 - (d18 * d26 + d12 * d27 + d19 * d23) * (d18 * d26 + d12 * d27 + d19 * d23);
  if (!(d28 == 0.0)) {
   d29 = (d18 * d22 + d12 * d21 + d19 * d20 - (d18 * d26 + d12 * d27 + d19 * d23) * (d26 * d22 + d27 * d21 + d23 * d20)) / d28;
   if (!(d29 < -d24)) {
    if (d29 > d24) d29 = d24;
   } else d29 = -d24;
  } else d29 = 0.0;
  d28 = (d18 * d26 + d12 * d27 + d19 * d23) * d29 - (d26 * d22 + d27 * d21 + d23 * d20);
  if (d28 < -d25) {
   d28 = (d18 * d26 + d12 * d27 + d19 * d23) * -d25 + (d18 * d22 + d12 * d21 + d19 * d20);
   if (!(d28 < -d24)) if (d28 > d24) d25 = -d25; else {
    d24 = d28;
    d25 = -d25;
   } else {
    d24 = -d24;
    d25 = -d25;
   }
  } else if (d28 > d25) {
   d28 = d25 * (d18 * d26 + d12 * d27 + d19 * d23) + (d18 * d22 + d12 * d21 + d19 * d20);
   if (!(d28 < -d24)) {
    if (!(d28 > d24)) d24 = d28;
   } else d24 = -d24;
  } else {
   d24 = d29;
   d25 = d28;
  }
  d26 = d26 * d25;
  d27 = d27 * d25;
  d23 = d23 * d25;
  d22 = d26 + (d22 - d18 * d24);
  d21 = d27 + (d21 - d12 * d24);
  d24 = d23 + (d20 - d19 * d24);
  d20 = +Math_sqrt(+(d24 * d24 + (d22 * d22 + d21 * d21)));
  if (!(d20 - d10 - d11 > d8)) {
   do if (d24 * d24 + (d22 * d22 + d21 * d21) <= 1.4210854715202004e-14) if (+Math_abs(+d19) > .7071067690849304) {
    d64 = 1.0 / +Math_sqrt(+(d12 * d12 + d19 * d19));
    HEAPF32[i1 + 320 >> 2] = 0.0;
    HEAPF32[i1 + 324 >> 2] = -(d19 * d64);
    HEAPF32[i1 + 328 >> 2] = d12 * d64;
    d22 = 0.0;
    d18 = -(d19 * d64);
    d12 = d12 * d64;
    break;
   } else {
    d64 = 1.0 / +Math_sqrt(+(d18 * d18 + d12 * d12));
    HEAPF32[i1 + 320 >> 2] = -(d12 * d64);
    HEAPF32[i1 + 324 >> 2] = d18 * d64;
    HEAPF32[i1 + 328 >> 2] = 0.0;
    d22 = -(d12 * d64);
    d18 = d18 * d64;
    d12 = 0.0;
    break;
   } else {
    HEAPF32[i1 + 320 >> 2] = d22 * -(1.0 / d20);
    HEAPF32[i1 + 324 >> 2] = d21 * -(1.0 / d20);
    HEAPF32[i1 + 328 >> 2] = d24 * -(1.0 / d20);
    HEAPF32[i1 + 332 >> 2] = 0.0;
    d22 = d22 * -(1.0 / d20);
    d18 = d21 * -(1.0 / d20);
    d12 = d24 * -(1.0 / d20);
   } while (0);
   d63 = d11 * d18 + (d27 + +HEAPF32[i3 + 52 >> 2]);
   d64 = d11 * d12 + (d23 + +HEAPF32[i3 + 56 >> 2]);
   HEAPF32[i1 + 304 >> 2] = d11 * d22 + (d26 + +HEAPF32[i3 + 48 >> 2]);
   HEAPF32[i1 + 308 >> 2] = d63;
   HEAPF32[i1 + 312 >> 2] = d64;
   HEAPF32[i1 + 316 >> 2] = 0.0;
  }
  if (d20 - d10 - d11 < d8) {
   FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 15](i2, i1 + 320 | 0, i1 + 304 | 0, d20 - d10 - d11);
   i13 = HEAP32[i2 + 4 >> 2] | 0;
  }
  if ((HEAP32[i13 + 748 >> 2] | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  i4 = HEAP32[i13 + 740 >> 2] | 0;
  i3 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0;
  if ((i4 | 0) == (i3 | 0)) {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i13, i4 + 4 | 0, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
   STACKTOP = i1;
   return;
  } else {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i13, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i3 + 4 | 0);
   STACKTOP = i1;
   return;
  }
 } else i66 = i6 + 4 | 0;
 HEAPF32[i1 + 296 >> 2] = 999999984306749400.0;
 i32 = HEAP32[i3 + 8 >> 2] | 0;
 i37 = HEAP32[i3 + 12 >> 2] | 0;
 HEAP32[i1 + 88 >> 2] = 13392;
 HEAPF32[i1 + 92 >> 2] = 0.0;
 HEAPF32[i1 + 96 >> 2] = 1.0;
 HEAPF32[i1 + 100 >> 2] = 0.0;
 HEAPF32[i1 + 104 >> 2] = 0.0;
 HEAP32[i1 + 108 >> 2] = i37;
 HEAP32[i1 + 112 >> 2] = i32;
 HEAP32[i1 + 116 >> 2] = i7;
 HEAP32[i1 + 120 >> 2] = i6;
 HEAP32[i1 + 124 >> 2] = i17;
 HEAP32[i1 + 128 >> 2] = HEAP32[i66 >> 2];
 d63 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 15](i7);
 HEAPF32[i1 + 132 >> 2] = d63;
 d63 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 15](i6);
 HEAPF32[i1 + 136 >> 2] = d63;
 HEAP8[i1 + 140 >> 0] = 0;
 HEAP32[i1 + 148 >> 2] = -1;
 HEAP32[i1 + 160 >> 2] = 1;
 HEAP32[i1 + 164 >> 2] = 1;
 HEAP32[i1 + 116 >> 2] = i7;
 HEAP32[i1 + 120 >> 2] = i6;
 d63 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 15](i7);
 d64 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 15](i6);
 d64 = d63 + d64 + +HEAPF32[(HEAP32[i3 + 20 >> 2] | 0) + 752 >> 2];
 HEAPF32[i1 + 296 >> 2] = d64 * d64;
 i32 = HEAP32[i4 + 12 >> 2] | 0;
 HEAP32[i1 + 168 >> 2] = HEAP32[i32 + 0 >> 2];
 HEAP32[i1 + 172 >> 2] = HEAP32[i32 + 4 >> 2];
 HEAP32[i1 + 176 >> 2] = HEAP32[i32 + 8 >> 2];
 HEAP32[i1 + 180 >> 2] = HEAP32[i32 + 12 >> 2];
 i37 = i1 + 184 | 0;
 HEAP32[i37 + 0 >> 2] = HEAP32[i32 + 16 >> 2];
 HEAP32[i37 + 4 >> 2] = HEAP32[i32 + 20 >> 2];
 HEAP32[i37 + 8 >> 2] = HEAP32[i32 + 24 >> 2];
 HEAP32[i37 + 12 >> 2] = HEAP32[i32 + 28 >> 2];
 i31 = i1 + 200 | 0;
 HEAP32[i31 + 0 >> 2] = HEAP32[i32 + 32 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i32 + 36 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i32 + 40 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i32 + 44 >> 2];
 i60 = i1 + 216 | 0;
 HEAP32[i60 + 0 >> 2] = HEAP32[i32 + 48 >> 2];
 HEAP32[i60 + 4 >> 2] = HEAP32[i32 + 52 >> 2];
 HEAP32[i60 + 8 >> 2] = HEAP32[i32 + 56 >> 2];
 HEAP32[i60 + 12 >> 2] = HEAP32[i32 + 60 >> 2];
 i32 = i1 + 232 | 0;
 i13 = HEAP32[i5 + 12 >> 2] | 0;
 HEAP32[i32 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i32 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i32 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i32 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 i48 = i1 + 248 | 0;
 HEAP32[i48 + 0 >> 2] = HEAP32[i13 + 16 >> 2];
 HEAP32[i48 + 4 >> 2] = HEAP32[i13 + 20 >> 2];
 HEAP32[i48 + 8 >> 2] = HEAP32[i13 + 24 >> 2];
 HEAP32[i48 + 12 >> 2] = HEAP32[i13 + 28 >> 2];
 i59 = i1 + 264 | 0;
 HEAP32[i59 + 0 >> 2] = HEAP32[i13 + 32 >> 2];
 HEAP32[i59 + 4 >> 2] = HEAP32[i13 + 36 >> 2];
 HEAP32[i59 + 8 >> 2] = HEAP32[i13 + 40 >> 2];
 HEAP32[i59 + 12 >> 2] = HEAP32[i13 + 44 >> 2];
 i17 = i1 + 280 | 0;
 HEAP32[i17 + 0 >> 2] = HEAP32[i13 + 48 >> 2];
 HEAP32[i17 + 4 >> 2] = HEAP32[i13 + 52 >> 2];
 HEAP32[i17 + 8 >> 2] = HEAP32[i13 + 56 >> 2];
 HEAP32[i17 + 12 >> 2] = HEAP32[i13 + 60 >> 2];
 i13 = HEAP32[i7 + 4 >> 2] | 0;
 do if ((i13 | 0) < 7 ? (i14 = HEAP32[i66 >> 2] | 0, (i14 | 0) < 7) : 0) {
  HEAP32[i1 + 80 >> 2] = 19224;
  if ((i13 | 0) == 0) d12 = 0.0; else {
   d12 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 15](i7);
   i14 = HEAP32[i66 >> 2] | 0;
  }
  if ((i14 | 0) == 0) d20 = 0.0; else d20 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 15](i6);
  HEAP32[i1 + 40 >> 2] = 19032;
  HEAP32[i1 + 44 >> 2] = i2;
  HEAPF32[i1 + 64 >> 2] = d12;
  HEAPF32[i1 + 68 >> 2] = d20;
  HEAP8[i1 + 76 >> 0] = 0;
  i14 = HEAP32[i7 + 52 >> 2] | 0;
  if ((i14 | 0) != 0) {
   i13 = HEAP32[i6 + 52 >> 2] | 0;
   if ((i13 | 0) == 0) {
    if ((HEAP32[i66 >> 2] | 0) != 1) break;
    i17 = i1 + 32 | 0;
    HEAP8[i17 >> 0] = 1;
    i13 = i1 + 28 | 0;
    HEAP32[i13 >> 2] = 0;
    i14 = i1 + 20 | 0;
    HEAP32[i14 >> 2] = 0;
    i9 = i1 + 24 | 0;
    HEAP32[i9 >> 2] = 0;
    i31 = HEAP32[i5 + 12 >> 2] | 0;
    d63 = +HEAPF32[i6 + 56 >> 2];
    d64 = +HEAPF32[i6 + 60 >> 2];
    d11 = +HEAPF32[i6 + 64 >> 2];
    d8 = d63 * +HEAPF32[i31 >> 2] + d64 * +HEAPF32[i31 + 4 >> 2] + d11 * +HEAPF32[i31 + 8 >> 2] + +HEAPF32[i31 + 48 >> 2];
    d10 = d63 * +HEAPF32[i31 + 16 >> 2] + d64 * +HEAPF32[i31 + 20 >> 2] + d11 * +HEAPF32[i31 + 24 >> 2] + +HEAPF32[i31 + 52 >> 2];
    d11 = d63 * +HEAPF32[i31 + 32 >> 2] + d64 * +HEAPF32[i31 + 36 >> 2] + d11 * +HEAPF32[i31 + 40 >> 2] + +HEAPF32[i31 + 56 >> 2];
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i31 = _malloc(35) | 0;
    if ((i31 | 0) == 0) i31 = 0; else {
     HEAP32[(i31 + 19 & -16) + -4 >> 2] = i31;
     i31 = i31 + 19 & -16;
    }
    i32 = HEAP32[i13 >> 2] | 0;
    if ((i32 | 0) != 0) {
     if ((HEAP8[i17 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i32 + -4 >> 2] | 0);
     }
     HEAP32[i13 >> 2] = 0;
    }
    HEAP8[i17 >> 0] = 1;
    HEAP32[i13 >> 2] = i31;
    HEAP32[i9 >> 2] = 1;
    i32 = HEAP32[i14 >> 2] | 0;
    HEAPF32[i31 + (i32 << 4) >> 2] = d8;
    HEAPF32[i31 + (i32 << 4) + 4 >> 2] = d10;
    HEAPF32[i31 + (i32 << 4) + 8 >> 2] = d11;
    HEAPF32[i31 + (i32 << 4) + 12 >> 2] = 0.0;
    i32 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i32 + 1;
    i31 = HEAP32[i5 + 12 >> 2] | 0;
    d63 = +HEAPF32[i6 + 72 >> 2];
    d64 = +HEAPF32[i6 + 76 >> 2];
    d10 = +HEAPF32[i6 + 80 >> 2];
    d8 = d63 * +HEAPF32[i31 >> 2] + d64 * +HEAPF32[i31 + 4 >> 2] + d10 * +HEAPF32[i31 + 8 >> 2] + +HEAPF32[i31 + 48 >> 2];
    d11 = d63 * +HEAPF32[i31 + 16 >> 2] + d64 * +HEAPF32[i31 + 20 >> 2] + d10 * +HEAPF32[i31 + 24 >> 2] + +HEAPF32[i31 + 52 >> 2];
    d10 = d63 * +HEAPF32[i31 + 32 >> 2] + d64 * +HEAPF32[i31 + 36 >> 2] + d10 * +HEAPF32[i31 + 40 >> 2] + +HEAPF32[i31 + 56 >> 2];
    i31 = HEAP32[i9 >> 2] | 0;
    if ((i32 + 1 | 0) == (i31 | 0)) {
     i31 = (i32 + 1 | 0) == 0 ? 1 : i32 + 1 << 1;
     if ((i32 + 1 | 0) < (i31 | 0)) {
      if ((i31 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i65 = _malloc((i31 << 4 | 3) + 16 | 0) | 0, (i65 | 0) != 0) : 0) {
       HEAP32[(i65 + 19 & -16) + -4 >> 2] = i65;
       i37 = i65 + 19 & -16;
      } else i37 = 0;
      if ((i32 | 0) > -1) {
       i48 = 0;
       do {
        i74 = i37 + (i48 << 4) | 0;
        i73 = (HEAP32[i13 >> 2] | 0) + (i48 << 4) | 0;
        HEAP32[i74 + 0 >> 2] = HEAP32[i73 + 0 >> 2];
        HEAP32[i74 + 4 >> 2] = HEAP32[i73 + 4 >> 2];
        HEAP32[i74 + 8 >> 2] = HEAP32[i73 + 8 >> 2];
        HEAP32[i74 + 12 >> 2] = HEAP32[i73 + 12 >> 2];
        i48 = i48 + 1 | 0;
       } while ((i48 | 0) != (i32 + 1 | 0));
      }
      i32 = HEAP32[i13 >> 2] | 0;
      if ((i32 | 0) != 0) {
       if ((HEAP8[i17 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i32 + -4 >> 2] | 0);
       }
       HEAP32[i13 >> 2] = 0;
      }
      HEAP8[i17 >> 0] = 1;
      HEAP32[i13 >> 2] = i37;
      HEAP32[i9 >> 2] = i31;
      i37 = HEAP32[i14 >> 2] | 0;
     } else {
      i37 = i32 + 1 | 0;
      i31 = i32 + 1 | 0;
     }
    } else i37 = i32 + 1 | 0;
    i32 = HEAP32[i13 >> 2] | 0;
    HEAPF32[i32 + (i37 << 4) >> 2] = d8;
    HEAPF32[i32 + (i37 << 4) + 4 >> 2] = d11;
    HEAPF32[i32 + (i37 << 4) + 8 >> 2] = d10;
    HEAPF32[i32 + (i37 << 4) + 12 >> 2] = 0.0;
    i37 = i37 + 1 | 0;
    HEAP32[i14 >> 2] = i37;
    i74 = HEAP32[i5 + 12 >> 2] | 0;
    d63 = +HEAPF32[i6 + 88 >> 2];
    d64 = +HEAPF32[i6 + 92 >> 2];
    d10 = +HEAPF32[i6 + 96 >> 2];
    d11 = d63 * +HEAPF32[i74 >> 2] + d64 * +HEAPF32[i74 + 4 >> 2] + d10 * +HEAPF32[i74 + 8 >> 2] + +HEAPF32[i74 + 48 >> 2];
    d8 = d63 * +HEAPF32[i74 + 16 >> 2] + d64 * +HEAPF32[i74 + 20 >> 2] + d10 * +HEAPF32[i74 + 24 >> 2] + +HEAPF32[i74 + 52 >> 2];
    d10 = d63 * +HEAPF32[i74 + 32 >> 2] + d64 * +HEAPF32[i74 + 36 >> 2] + d10 * +HEAPF32[i74 + 40 >> 2] + +HEAPF32[i74 + 56 >> 2];
    if ((i37 | 0) == (i31 | 0)) {
     i5 = (i31 | 0) == 0 ? 1 : i31 << 1;
     if ((i31 | 0) < (i5 | 0)) {
      if ((i5 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i61 = _malloc((i5 << 4 | 3) + 16 | 0) | 0, (i61 | 0) != 0) : 0) {
       HEAP32[(i61 + 19 & -16) + -4 >> 2] = i61;
       i32 = i61 + 19 & -16;
      } else i32 = 0;
      if ((i31 | 0) > 0) {
       i37 = 0;
       do {
        i74 = i32 + (i37 << 4) | 0;
        i73 = (HEAP32[i13 >> 2] | 0) + (i37 << 4) | 0;
        HEAP32[i74 + 0 >> 2] = HEAP32[i73 + 0 >> 2];
        HEAP32[i74 + 4 >> 2] = HEAP32[i73 + 4 >> 2];
        HEAP32[i74 + 8 >> 2] = HEAP32[i73 + 8 >> 2];
        HEAP32[i74 + 12 >> 2] = HEAP32[i73 + 12 >> 2];
        i37 = i37 + 1 | 0;
       } while ((i37 | 0) != (i31 | 0));
      }
      i31 = HEAP32[i13 >> 2] | 0;
      if ((i31 | 0) != 0) {
       if ((HEAP8[i17 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i31 + -4 >> 2] | 0);
       }
       HEAP32[i13 >> 2] = 0;
      }
      HEAP8[i17 >> 0] = 1;
      HEAP32[i13 >> 2] = i32;
      HEAP32[i9 >> 2] = i5;
      i31 = HEAP32[i14 >> 2] | 0;
     }
    } else i31 = i37;
    HEAPF32[i32 + (i31 << 4) >> 2] = d11;
    HEAPF32[i32 + (i31 << 4) + 4 >> 2] = d8;
    HEAPF32[i32 + (i31 << 4) + 8 >> 2] = d10;
    HEAPF32[i32 + (i31 << 4) + 12 >> 2] = 0.0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
    d8 = +HEAPF32[(HEAP32[i3 + 20 >> 2] | 0) + 752 >> 2];
    __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 88 | 0, i1 + 168 | 0, i1 + 80 | 0, HEAP32[i15 + 20 >> 2] | 0, 0);
    d10 = +HEAPF32[i1 + 92 >> 2];
    d12 = +HEAPF32[i1 + 96 >> 2];
    d11 = +HEAPF32[i1 + 100 >> 2];
    if (d10 * d10 + d12 * d12 + d11 * d11 > 1.1920928955078125e-7) {
     d63 = 1.0 / (d10 * d10 + d12 * d12 + d11 * d11);
     HEAPF32[i1 >> 2] = d10 * d63;
     HEAPF32[i1 + 4 >> 2] = d12 * d63;
     HEAPF32[i1 + 8 >> 2] = d11 * d63;
     HEAPF32[i1 + 12 >> 2] = 0.0;
     d63 = +HEAPF32[i1 + 144 >> 2];
     d64 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 15](i7);
     d64 = d63 - d64 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 15](i6);
     __ZN27btPolyhedralContactClipping19clipFaceAgainstHullERK9btVector3RK18btConvexPolyhedronRK11btTransformR20btAlignedObjectArrayIS0_EffRN36btDiscreteCollisionDetectorInterface6ResultE(i1, HEAP32[i7 + 52 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0, i1 + 16 | 0, d64 - d8, d8, i2);
    }
    do if ((HEAP8[i3 + 16 >> 0] | 0) != 0 ? (i16 = HEAP32[i2 + 4 >> 2] | 0, (HEAP32[i16 + 748 >> 2] | 0) != 0) : 0) {
     i4 = HEAP32[i16 + 740 >> 2] | 0;
     i3 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0;
     if ((i4 | 0) == (i3 | 0)) {
      __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i16, i4 + 4 | 0, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
      break;
     } else {
      __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i16, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i3 + 4 | 0);
      break;
     }
    } while (0);
    i2 = HEAP32[i13 >> 2] | 0;
    if ((i2 | 0) != 0) {
     if ((HEAP8[i17 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i2 + -4 >> 2] | 0);
     }
     HEAP32[i13 >> 2] = 0;
    }
    HEAP8[i17 >> 0] = 1;
    HEAP32[i13 >> 2] = 0;
    HEAP32[i14 >> 2] = 0;
    HEAP32[i9 >> 2] = 0;
    STACKTOP = i1;
    return;
   }
   d8 = +HEAPF32[(HEAP32[i3 + 20 >> 2] | 0) + 752 >> 2];
   if ((HEAP8[i15 + 24 >> 0] | 0) == 0) {
    __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 88 | 0, i1 + 168 | 0, i1 + 40 | 0, HEAP32[i15 + 20 >> 2] | 0, 0);
    d10 = +HEAPF32[i1 + 72 >> 2];
    if ((HEAP8[i1 + 76 >> 0] | 0) != 0 & d10 < 0.0) {
     d34 = +HEAPF32[i1 + 48 >> 2];
     d35 = +HEAPF32[i1 + 52 >> 2];
     d30 = +HEAPF32[i1 + 56 >> 2];
     d33 = +HEAPF32[i1 + 60 >> 2];
     i9 = 105;
    }
   } else {
    i15 = HEAP32[i4 + 12 >> 2] | 0;
    i16 = HEAP32[i5 + 12 >> 2] | 0;
    HEAP32[4920] = (HEAP32[4920] | 0) + 1;
    d57 = +HEAPF32[i14 + 64 >> 2];
    d58 = +HEAPF32[i14 + 68 >> 2];
    d21 = +HEAPF32[i15 + 4 >> 2];
    d62 = +HEAPF32[i14 + 72 >> 2];
    d22 = +HEAPF32[i15 + 8 >> 2];
    d23 = +HEAPF32[i15 + 16 >> 2];
    d24 = +HEAPF32[i15 + 20 >> 2];
    d26 = +HEAPF32[i15 + 24 >> 2];
    d25 = +HEAPF32[i15 + 32 >> 2];
    d27 = +HEAPF32[i15 + 36 >> 2];
    d28 = +HEAPF32[i15 + 40 >> 2];
    d63 = +HEAPF32[i13 + 64 >> 2];
    d64 = +HEAPF32[i13 + 68 >> 2];
    d10 = +HEAPF32[i13 + 72 >> 2];
    d12 = d57 * +HEAPF32[i15 >> 2] + d58 * d21 + d62 * d22 + +HEAPF32[i15 + 48 >> 2] - (d63 * +HEAPF32[i16 >> 2] + d64 * +HEAPF32[i16 + 4 >> 2] + d10 * +HEAPF32[i16 + 8 >> 2] + +HEAPF32[i16 + 48 >> 2]);
    d11 = d57 * d23 + d58 * d24 + d62 * d26 + +HEAPF32[i15 + 52 >> 2] - (d63 * +HEAPF32[i16 + 16 >> 2] + d64 * +HEAPF32[i16 + 20 >> 2] + d10 * +HEAPF32[i16 + 24 >> 2] + +HEAPF32[i16 + 52 >> 2]);
    d10 = d57 * d25 + d58 * d27 + d62 * d28 + +HEAPF32[i15 + 56 >> 2] - (d63 * +HEAPF32[i16 + 32 >> 2] + d64 * +HEAPF32[i16 + 36 >> 2] + d10 * +HEAPF32[i16 + 40 >> 2] + +HEAPF32[i16 + 56 >> 2]);
    i17 = HEAP32[i14 + 28 >> 2] | 0;
    L122 : do if ((i17 | 0) > 0) {
     d20 = 0.0;
     d38 = 3.4028234663852886e+38;
     i31 = 0;
     d34 = 0.0;
     d35 = 0.0;
     d30 = 0.0;
     d33 = 0.0;
     while (1) {
      i74 = HEAP32[i14 + 36 >> 2] | 0;
      d62 = +HEAPF32[i74 + (i31 * 36 | 0) + 20 >> 2];
      d63 = +HEAPF32[i74 + (i31 * 36 | 0) + 24 >> 2];
      d64 = +HEAPF32[i74 + (i31 * 36 | 0) + 28 >> 2];
      d21 = d62 * +HEAPF32[i15 >> 2] + d63 * d21 + d64 * d22;
      d22 = d62 * d23 + d63 * d24 + d64 * d26;
      d23 = d62 * d25 + d63 * d27 + d64 * d28;
      HEAPF32[i1 + 400 >> 2] = d21;
      HEAPF32[i1 + 404 >> 2] = d22;
      HEAPF32[i1 + 408 >> 2] = d23;
      HEAPF32[i1 + 412 >> 2] = 0.0;
      if (d12 * d21 + d11 * d22 + d10 * d23 < 0.0) {
       HEAPF32[i1 + 400 >> 2] = d21 * -1.0;
       HEAPF32[i1 + 404 >> 2] = d22 * -1.0;
       HEAPF32[i1 + 408 >> 2] = d23 * -1.0;
       d21 = d21 * -1.0;
       d22 = d22 * -1.0;
       d23 = d23 * -1.0;
      }
      HEAP32[4916] = (HEAP32[4916] | 0) + 1;
      if (__Z19TestInternalObjectsRK11btTransformS1_RK9btVector3S4_RK18btConvexPolyhedronS7_f(i15, i16, d12, d11, d10, d21, d22, d23, i14, i13, d38) | 0) {
       HEAP32[4918] = (HEAP32[4918] | 0) + 1;
       __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i14, i15, i1 + 400 | 0, i1 + 808 | 0, i1 + 784 | 0, i1 + 464 | 0, i1 + 448 | 0);
       __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i13, i16, i1 + 400 | 0, i1 + 720 | 0, i1 + 480 | 0, i1 + 432 | 0, i1 + 416 | 0);
       d22 = +HEAPF32[i1 + 784 >> 2];
       d21 = +HEAPF32[i1 + 720 >> 2];
       if (!(d22 < d21) ? (d19 = +HEAPF32[i1 + 480 >> 2], d18 = +HEAPF32[i1 + 808 >> 2], !(d19 < d18)) : 0) {
        i32 = 1;
        d21 = d22 - d21 < d19 - d18 ? d22 - d21 : d19 - d18;
       } else {
        i32 = 0;
        d21 = d20;
       }
       if (!i32) {
        i13 = 0;
        break L122;
       }
       if (d21 < d38) {
        d20 = d21;
        d38 = d21;
        d34 = +HEAPF32[i1 + 400 >> 2];
        d35 = +HEAPF32[i1 + 404 >> 2];
        d30 = +HEAPF32[i1 + 408 >> 2];
        d33 = +HEAPF32[i1 + 412 >> 2];
       } else d20 = d21;
      }
      i31 = i31 + 1 | 0;
      if ((i31 | 0) >= (i17 | 0)) {
       i9 = 52;
       break L122;
      }
      d21 = +HEAPF32[i15 + 4 >> 2];
      d22 = +HEAPF32[i15 + 8 >> 2];
      d23 = +HEAPF32[i15 + 16 >> 2];
      d24 = +HEAPF32[i15 + 20 >> 2];
      d26 = +HEAPF32[i15 + 24 >> 2];
      d25 = +HEAPF32[i15 + 32 >> 2];
      d27 = +HEAPF32[i15 + 36 >> 2];
      d28 = +HEAPF32[i15 + 40 >> 2];
     }
    } else {
     d38 = 3.4028234663852886e+38;
     d34 = 0.0;
     d35 = 0.0;
     d30 = 0.0;
     d33 = 0.0;
     i9 = 52;
    } while (0);
    L139 : do if ((i9 | 0) == 52) {
     i17 = HEAP32[i13 + 28 >> 2] | 0;
     if ((i17 | 0) > 0) {
      d18 = 0.0;
      i31 = 0;
      do {
       i74 = HEAP32[i13 + 36 >> 2] | 0;
       d63 = +HEAPF32[i74 + (i31 * 36 | 0) + 20 >> 2];
       d64 = +HEAPF32[i74 + (i31 * 36 | 0) + 24 >> 2];
       d20 = +HEAPF32[i74 + (i31 * 36 | 0) + 28 >> 2];
       d19 = d63 * +HEAPF32[i16 >> 2] + d64 * +HEAPF32[i16 + 4 >> 2] + d20 * +HEAPF32[i16 + 8 >> 2];
       d21 = d63 * +HEAPF32[i16 + 16 >> 2] + d64 * +HEAPF32[i16 + 20 >> 2] + d20 * +HEAPF32[i16 + 24 >> 2];
       d20 = d63 * +HEAPF32[i16 + 32 >> 2] + d64 * +HEAPF32[i16 + 36 >> 2] + d20 * +HEAPF32[i16 + 40 >> 2];
       HEAPF32[i1 + 384 >> 2] = d19;
       HEAPF32[i1 + 388 >> 2] = d21;
       HEAPF32[i1 + 392 >> 2] = d20;
       HEAPF32[i1 + 396 >> 2] = 0.0;
       if (d12 * d19 + d11 * d21 + d10 * d20 < 0.0) {
        HEAPF32[i1 + 384 >> 2] = d19 * -1.0;
        HEAPF32[i1 + 388 >> 2] = d21 * -1.0;
        HEAPF32[i1 + 392 >> 2] = d20 * -1.0;
        d19 = d19 * -1.0;
        d21 = d21 * -1.0;
        d20 = d20 * -1.0;
       }
       HEAP32[4916] = (HEAP32[4916] | 0) + 1;
       do if (__Z19TestInternalObjectsRK11btTransformS1_RK9btVector3S4_RK18btConvexPolyhedronS7_f(i15, i16, d12, d11, d10, d19, d21, d20, i14, i13, d38) | 0) {
        HEAP32[4918] = (HEAP32[4918] | 0) + 1;
        __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i14, i15, i1 + 384 | 0, i1 + 808 | 0, i1 + 784 | 0, i1 + 464 | 0, i1 + 448 | 0);
        __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i13, i16, i1 + 384 | 0, i1 + 720 | 0, i1 + 480 | 0, i1 + 432 | 0, i1 + 416 | 0);
        d21 = +HEAPF32[i1 + 784 >> 2];
        d20 = +HEAPF32[i1 + 720 >> 2];
        do if (d21 < d20) {
         i32 = 0;
         d19 = d18;
        } else {
         d19 = +HEAPF32[i1 + 480 >> 2];
         d22 = +HEAPF32[i1 + 808 >> 2];
         if (d19 < d22) {
          i32 = 0;
          d19 = d18;
          break;
         }
         i32 = 1;
         d19 = d21 - d20 < d19 - d22 ? d21 - d20 : d19 - d22;
        } while (0);
        if (!i32) {
         i13 = 0;
         break L139;
        }
        if (!(d19 < d38)) {
         d18 = d19;
         break;
        }
        d18 = d19;
        d38 = d19;
        d34 = +HEAPF32[i1 + 384 >> 2];
        d35 = +HEAPF32[i1 + 388 >> 2];
        d30 = +HEAPF32[i1 + 392 >> 2];
        d33 = +HEAPF32[i1 + 396 >> 2];
       } while (0);
       i31 = i31 + 1 | 0;
      } while ((i31 | 0) < (i17 | 0));
     }
     i32 = HEAP32[i14 + 48 >> 2] | 0;
     if ((i32 | 0) > 0) {
      d21 = 0.0;
      d22 = 0.0;
      d23 = 0.0;
      d24 = 0.0;
      d25 = 0.0;
      d26 = 0.0;
      d28 = 0.0;
      d27 = 0.0;
      d29 = 0.0;
      d36 = 0.0;
      d41 = 0.0;
      d43 = 0.0;
      d44 = 0.0;
      d42 = 0.0;
      d40 = 0.0;
      d39 = 0.0;
      d45 = 0.0;
      d46 = 0.0;
      d47 = 0.0;
      i48 = HEAP32[i13 + 48 >> 2] | 0;
      i17 = 0;
      i37 = -1;
      i31 = -1;
      while (1) {
       i74 = HEAP32[i14 + 56 >> 2] | 0;
       d63 = +HEAPF32[i74 + (i17 << 4) >> 2];
       d64 = +HEAPF32[i74 + (i17 << 4) + 4 >> 2];
       d19 = +HEAPF32[i74 + (i17 << 4) + 8 >> 2];
       d20 = d63 * +HEAPF32[i15 >> 2] + d64 * +HEAPF32[i15 + 4 >> 2] + d19 * +HEAPF32[i15 + 8 >> 2];
       d18 = d63 * +HEAPF32[i15 + 16 >> 2] + d64 * +HEAPF32[i15 + 20 >> 2] + d19 * +HEAPF32[i15 + 24 >> 2];
       d19 = d63 * +HEAPF32[i15 + 32 >> 2] + d64 * +HEAPF32[i15 + 36 >> 2] + d19 * +HEAPF32[i15 + 40 >> 2];
       if ((i48 | 0) > 0) {
        i32 = 0;
        do {
         i74 = HEAP32[i13 + 56 >> 2] | 0;
         d63 = +HEAPF32[i74 + (i32 << 4) >> 2];
         d64 = +HEAPF32[i74 + (i32 << 4) + 4 >> 2];
         d54 = +HEAPF32[i74 + (i32 << 4) + 8 >> 2];
         d51 = d63 * +HEAPF32[i16 >> 2] + d64 * +HEAPF32[i16 + 4 >> 2] + d54 * +HEAPF32[i16 + 8 >> 2];
         d53 = d63 * +HEAPF32[i16 + 16 >> 2] + d64 * +HEAPF32[i16 + 20 >> 2] + d54 * +HEAPF32[i16 + 24 >> 2];
         d54 = d63 * +HEAPF32[i16 + 32 >> 2] + d64 * +HEAPF32[i16 + 36 >> 2] + d54 * +HEAPF32[i16 + 40 >> 2];
         HEAPF32[i1 + 368 >> 2] = d18 * d54 - d19 * d53;
         HEAPF32[i1 + 372 >> 2] = d19 * d51 - d20 * d54;
         HEAPF32[i1 + 376 >> 2] = d20 * d53 - d18 * d51;
         HEAPF32[i1 + 380 >> 2] = 0.0;
         do if (!(+Math_abs(+(d18 * d54 - d19 * d53)) > 1.0e-6)) {
          if (+Math_abs(+(d19 * d51 - d20 * d54)) > 1.0e-6) {
           i9 = 70;
           break;
          }
          if (+Math_abs(+(d20 * d53 - d18 * d51)) > 1.0e-6) i9 = 70;
         } else i9 = 70; while (0);
         do if ((i9 | 0) == 70) {
          i9 = 0;
          d49 = 1.0 / +Math_sqrt(+((d18 * d54 - d19 * d53) * (d18 * d54 - d19 * d53) + (d19 * d51 - d20 * d54) * (d19 * d51 - d20 * d54) + (d20 * d53 - d18 * d51) * (d20 * d53 - d18 * d51)));
          d50 = (d18 * d54 - d19 * d53) * d49;
          HEAPF32[i1 + 368 >> 2] = d50;
          d52 = (d19 * d51 - d20 * d54) * d49;
          HEAPF32[i1 + 372 >> 2] = d52;
          d49 = (d20 * d53 - d18 * d51) * d49;
          HEAPF32[i1 + 376 >> 2] = d49;
          if (d12 * d50 + d11 * d52 + d10 * d49 < 0.0) {
           HEAPF32[i1 + 368 >> 2] = d50 * -1.0;
           HEAPF32[i1 + 372 >> 2] = d52 * -1.0;
           HEAPF32[i1 + 376 >> 2] = d49 * -1.0;
           d50 = d50 * -1.0;
           d52 = d52 * -1.0;
           d49 = d49 * -1.0;
          }
          HEAP32[4916] = (HEAP32[4916] | 0) + 1;
          if (!(__Z19TestInternalObjectsRK11btTransformS1_RK9btVector3S4_RK18btConvexPolyhedronS7_f(i15, i16, d12, d11, d10, d50, d52, d49, i14, i13, d38) | 0)) break;
          HEAP32[4918] = (HEAP32[4918] | 0) + 1;
          __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i14, i15, i1 + 368 | 0, i1 + 808 | 0, i1 + 784 | 0, i1 + 464 | 0, i1 + 448 | 0);
          __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i13, i16, i1 + 368 | 0, i1 + 720 | 0, i1 + 480 | 0, i1 + 432 | 0, i1 + 416 | 0);
          d57 = +HEAPF32[i1 + 784 >> 2];
          d63 = +HEAPF32[i1 + 720 >> 2];
          do if (!(d57 < d63)) {
           d62 = +HEAPF32[i1 + 480 >> 2];
           d64 = +HEAPF32[i1 + 808 >> 2];
           if (d62 < d64) {
            i48 = 0;
            d58 = d44;
            d56 = d43;
            d55 = d41;
            d52 = d28;
            d49 = d26;
            d50 = d25;
            d57 = d21;
            break;
           }
           if (d57 - d63 < d62 - d64) {
            i48 = 1;
            d58 = +HEAPF32[i1 + 456 >> 2];
            d56 = +HEAPF32[i1 + 452 >> 2];
            d55 = +HEAPF32[i1 + 448 >> 2];
            d52 = +HEAPF32[i1 + 440 >> 2];
            d49 = +HEAPF32[i1 + 436 >> 2];
            d50 = +HEAPF32[i1 + 432 >> 2];
            d57 = d57 - d63;
            break;
           } else {
            i48 = 1;
            d58 = +HEAPF32[i1 + 472 >> 2];
            d56 = +HEAPF32[i1 + 468 >> 2];
            d55 = +HEAPF32[i1 + 464 >> 2];
            d52 = +HEAPF32[i1 + 424 >> 2];
            d49 = +HEAPF32[i1 + 420 >> 2];
            d50 = +HEAPF32[i1 + 416 >> 2];
            d57 = d62 - d64;
            break;
           }
          } else {
           i48 = 0;
           d58 = d44;
           d56 = d43;
           d55 = d41;
           d52 = d28;
           d49 = d26;
           d50 = d25;
           d57 = d21;
          } while (0);
          if (!i48) {
           i13 = 0;
           break L139;
          }
          if (!(d57 < d38)) {
           d44 = d58;
           d43 = d56;
           d41 = d55;
           d28 = d52;
           d26 = d49;
           d25 = d50;
           d21 = d57;
           break;
          }
          d47 = d19;
          d46 = d18;
          d45 = d20;
          d39 = d54;
          d40 = d53;
          d42 = d51;
          d44 = d58;
          d43 = d56;
          d41 = d55;
          d36 = d58;
          d29 = d56;
          d27 = d55;
          d28 = d52;
          d26 = d49;
          d25 = d50;
          d24 = d52;
          d23 = d49;
          d22 = d50;
          d21 = d57;
          d38 = d57;
          i37 = i17;
          i31 = i32;
          d34 = +HEAPF32[i1 + 368 >> 2];
          d35 = +HEAPF32[i1 + 372 >> 2];
          d30 = +HEAPF32[i1 + 376 >> 2];
          d33 = +HEAPF32[i1 + 380 >> 2];
         } while (0);
         i32 = i32 + 1 | 0;
         i48 = HEAP32[i13 + 48 >> 2] | 0;
        } while ((i32 | 0) < (i48 | 0));
        d18 = d47;
        d19 = d46;
        d20 = d45;
        i32 = HEAP32[i14 + 48 >> 2] | 0;
       } else {
        d18 = d47;
        d19 = d46;
        d20 = d45;
       }
       i17 = i17 + 1 | 0;
       if ((i17 | 0) >= (i32 | 0)) break; else {
        d45 = d20;
        d46 = d19;
        d47 = d18;
       }
      }
     } else {
      d18 = 0.0;
      d19 = 0.0;
      d20 = 0.0;
      d39 = 0.0;
      d40 = 0.0;
      d42 = 0.0;
      d36 = 0.0;
      d29 = 0.0;
      d27 = 0.0;
      d24 = 0.0;
      d23 = 0.0;
      d22 = 0.0;
      i37 = -1;
      i31 = -1;
     }
     if ((i31 | i37 | 0) > -1) {
      d25 = d22 - d27;
      d26 = d23 - d29;
      d21 = d24 - d36;
      d36 = d20 * d42 + d19 * d40 + d18 * d39;
      d28 = d20 * d25 + d19 * d26 + d18 * d21;
      d29 = d42 * d25 + d40 * d26 + d39 * d21;
      do if (!(1.0 - d36 * d36 == 0.0)) if ((d28 - d36 * d29) / (1.0 - d36 * d36) < -1.0000000150474662e+30) d27 = -1.0000000150474662e+30; else {
       if (!((d28 - d36 * d29) / (1.0 - d36 * d36) > 1.0000000150474662e+30)) {
        d27 = (d28 - d36 * d29) / (1.0 - d36 * d36);
        break;
       }
       d27 = 1.0000000150474662e+30;
      } else d27 = 0.0; while (0);
      d29 = d36 * d27 - d29;
      do if (d29 < -1.0000000150474662e+30) {
       if (d36 * -1.0000000150474662e+30 + d28 < -1.0000000150474662e+30) {
        d27 = -1.0000000150474662e+30;
        d36 = -1.0000000150474662e+30;
        break;
       }
       if (!(d36 * -1.0000000150474662e+30 + d28 > 1.0000000150474662e+30)) {
        d27 = d36 * -1.0000000150474662e+30 + d28;
        d36 = -1.0000000150474662e+30;
        break;
       }
       d27 = 1.0000000150474662e+30;
       d36 = -1.0000000150474662e+30;
      } else {
       if (!(d29 > 1.0000000150474662e+30)) {
        d36 = d29;
        break;
       }
       if (d36 * 1.0000000150474662e+30 + d28 < -1.0000000150474662e+30) {
        d27 = -1.0000000150474662e+30;
        d36 = 1.0000000150474662e+30;
        break;
       }
       if (!(d36 * 1.0000000150474662e+30 + d28 > 1.0000000150474662e+30)) {
        d27 = d36 * 1.0000000150474662e+30 + d28;
        d36 = 1.0000000150474662e+30;
        break;
       }
       d27 = 1.0000000150474662e+30;
       d36 = 1.0000000150474662e+30;
      } while (0);
      d28 = d42 * d36;
      d29 = d36 * d40;
      d36 = d36 * d39;
      d20 = d25 - d20 * d27 + d28;
      d19 = d26 - d27 * d19 + d29;
      d21 = d21 - d27 * d18 + d36;
      HEAPF32[i1 + 352 >> 2] = d20;
      HEAPF32[i1 + 356 >> 2] = d19;
      HEAPF32[i1 + 360 >> 2] = d21;
      HEAPF32[i1 + 364 >> 2] = 0.0;
      if (d20 * d20 + d19 * d19 + d21 * d21 > 1.1920928955078125e-7) {
       d18 = +Math_sqrt(+(d20 * d20 + d19 * d19 + d21 * d21));
       HEAPF32[i1 + 352 >> 2] = d20 * (1.0 / d18);
       HEAPF32[i1 + 356 >> 2] = 1.0 / d18 * d19;
       HEAPF32[i1 + 360 >> 2] = 1.0 / d18 * d21;
       if (d20 * (1.0 / d18) * d12 + 1.0 / d18 * d19 * d11 + 1.0 / d18 * d21 * d10 < 0.0) {
        HEAPF32[i1 + 352 >> 2] = d20 * (1.0 / d18) * -1.0;
        HEAPF32[i1 + 356 >> 2] = 1.0 / d18 * d19 * -1.0;
        HEAPF32[i1 + 360 >> 2] = 1.0 / d18 * d21 * -1.0;
       }
       HEAPF32[i1 + 336 >> 2] = d22 + d28;
       HEAPF32[i1 + 340 >> 2] = d23 + d29;
       HEAPF32[i1 + 344 >> 2] = d24 + d36;
       HEAPF32[i1 + 348 >> 2] = 0.0;
       FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 15](i2, i1 + 352 | 0, i1 + 336 | 0, -d18);
      }
     }
     if (d12 * d34 + d11 * d35 + d10 * d30 < 0.0) {
      i13 = 1;
      d34 = -d34;
      d35 = -d35;
      d30 = -d30;
      d33 = 0.0;
     } else i13 = 1;
    } while (0);
    if (i13) {
     d10 = -1.0000000150474662e+30;
     i9 = 105;
    }
   }
   if ((i9 | 0) == 105) {
    i7 = HEAP32[i7 + 52 >> 2] | 0;
    i6 = HEAP32[i6 + 52 >> 2] | 0;
    i4 = HEAP32[i4 + 12 >> 2] | 0;
    i5 = HEAP32[i5 + 12 >> 2] | 0;
    d10 = d10 - d8;
    d18 = 1.0 / +Math_sqrt(+(d34 * d34 + d35 * d35 + d30 * d30));
    d11 = d34 * d18;
    d12 = d35 * d18;
    d18 = d30 * d18;
    HEAPF32[i1 + 808 >> 2] = d11;
    HEAPF32[i1 + 812 >> 2] = d12;
    HEAPF32[i1 + 816 >> 2] = d18;
    HEAPF32[i1 + 820 >> 2] = d33;
    i15 = HEAP32[i6 + 28 >> 2] | 0;
    i9 = HEAP32[i6 + 36 >> 2] | 0;
    if ((i15 | 0) > 0) {
     d19 = +HEAPF32[i5 >> 2];
     d20 = +HEAPF32[i5 + 4 >> 2];
     d23 = +HEAPF32[i5 + 8 >> 2];
     d26 = +HEAPF32[i5 + 16 >> 2];
     d27 = +HEAPF32[i5 + 20 >> 2];
     d30 = +HEAPF32[i5 + 24 >> 2];
     d29 = +HEAPF32[i5 + 32 >> 2];
     d25 = +HEAPF32[i5 + 36 >> 2];
     d24 = +HEAPF32[i5 + 40 >> 2];
     i16 = -1;
     d33 = -3.4028234663852886e+38;
     i13 = 0;
     while (1) {
      d21 = +HEAPF32[i9 + (i13 * 36 | 0) + 20 >> 2];
      d22 = +HEAPF32[i9 + (i13 * 36 | 0) + 24 >> 2];
      d28 = +HEAPF32[i9 + (i13 * 36 | 0) + 28 >> 2];
      i14 = (d21 * d19 + d22 * d20 + d28 * d23) * d11 + (d21 * d26 + d22 * d27 + d28 * d30) * d12 + (d21 * d29 + d22 * d25 + d28 * d24) * d18 > d33;
      i16 = i14 ? i13 : i16;
      i13 = i13 + 1 | 0;
      if ((i13 | 0) >= (i15 | 0)) {
       i14 = i16;
       break;
      } else d33 = i14 ? (d21 * d19 + d22 * d20 + d28 * d23) * d11 + (d21 * d26 + d22 * d27 + d28 * d30) * d12 + (d21 * d29 + d22 * d25 + d28 * d24) * d18 : d33;
     }
    } else i14 = -1;
    HEAP8[i1 + 800 >> 0] = 1;
    i13 = i1 + 796 | 0;
    HEAP32[i13 >> 2] = 0;
    HEAP32[i1 + 788 >> 2] = 0;
    HEAP32[i1 + 792 >> 2] = 0;
    i15 = HEAP32[i9 + (i14 * 36 | 0) + 4 >> 2] | 0;
    L217 : do if ((i15 | 0) > 0) {
     i9 = i9 + (i14 * 36 | 0) + 12 | 0;
     i37 = 0;
     i32 = 0;
     i17 = 0;
     i16 = 0;
     while (1) {
      i74 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i16 << 2) >> 2] | 0;
      i73 = HEAP32[i6 + 16 >> 2] | 0;
      d63 = +HEAPF32[i73 + (i74 << 4) >> 2];
      d64 = +HEAPF32[i73 + (i74 << 4) + 4 >> 2];
      d18 = +HEAPF32[i73 + (i74 << 4) + 8 >> 2];
      d11 = d63 * +HEAPF32[i5 >> 2] + d64 * +HEAPF32[i5 + 4 >> 2] + d18 * +HEAPF32[i5 + 8 >> 2] + +HEAPF32[i5 + 48 >> 2];
      d12 = d63 * +HEAPF32[i5 + 16 >> 2] + d64 * +HEAPF32[i5 + 20 >> 2] + d18 * +HEAPF32[i5 + 24 >> 2] + +HEAPF32[i5 + 52 >> 2];
      d18 = d63 * +HEAPF32[i5 + 32 >> 2] + d64 * +HEAPF32[i5 + 36 >> 2] + d18 * +HEAPF32[i5 + 40 >> 2] + +HEAPF32[i5 + 56 >> 2];
      if ((i37 | 0) == (i17 | 0)) {
       i31 = (i17 | 0) == 0 ? 1 : i17 << 1;
       if ((i17 | 0) < (i31 | 0)) {
        do if ((i31 | 0) == 0) i32 = 0; else {
         HEAP32[5004] = (HEAP32[5004] | 0) + 1;
         i32 = _malloc((i31 << 4 | 3) + 16 | 0) | 0;
         if ((i32 | 0) == 0) {
          i32 = 0;
          break;
         }
         HEAP32[(i32 + 19 & -16) + -4 >> 2] = i32;
         i32 = i32 + 19 & -16;
        } while (0);
        if ((i17 | 0) > 0) {
         i37 = 0;
         do {
          i74 = i32 + (i37 << 4) | 0;
          i73 = (HEAP32[i13 >> 2] | 0) + (i37 << 4) | 0;
          HEAP32[i74 + 0 >> 2] = HEAP32[i73 + 0 >> 2];
          HEAP32[i74 + 4 >> 2] = HEAP32[i73 + 4 >> 2];
          HEAP32[i74 + 8 >> 2] = HEAP32[i73 + 8 >> 2];
          HEAP32[i74 + 12 >> 2] = HEAP32[i73 + 12 >> 2];
          i37 = i37 + 1 | 0;
         } while ((i37 | 0) != (i17 | 0));
        }
        i17 = HEAP32[i13 >> 2] | 0;
        if ((i17 | 0) != 0) {
         if ((HEAP8[i1 + 800 >> 0] | 0) != 0) {
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i17 + -4 >> 2] | 0);
         }
         HEAP32[i13 >> 2] = 0;
        }
        HEAP8[i1 + 800 >> 0] = 1;
        HEAP32[i13 >> 2] = i32;
        HEAP32[i1 + 792 >> 2] = i31;
        i31 = i32;
        i17 = HEAP32[i1 + 788 >> 2] | 0;
       } else i31 = i32;
      } else {
       i31 = i32;
       i17 = i37;
      }
      HEAPF32[i31 + (i17 << 4) >> 2] = d11;
      HEAPF32[i31 + (i17 << 4) + 4 >> 2] = d12;
      HEAPF32[i31 + (i17 << 4) + 8 >> 2] = d18;
      HEAPF32[i31 + (i17 << 4) + 12 >> 2] = 0.0;
      i37 = (HEAP32[i1 + 788 >> 2] | 0) + 1 | 0;
      HEAP32[i1 + 788 >> 2] = i37;
      i16 = i16 + 1 | 0;
      if ((i16 | 0) >= (i15 | 0)) break L217;
      i32 = i31;
      i17 = HEAP32[i1 + 792 >> 2] | 0;
     }
    } else i31 = 0; while (0);
    if ((i14 | 0) > -1) {
     __ZN27btPolyhedralContactClipping19clipFaceAgainstHullERK9btVector3RK18btConvexPolyhedronRK11btTransformR20btAlignedObjectArrayIS0_EffRN36btDiscreteCollisionDetectorInterface6ResultE(i1 + 808 | 0, i7, i4, i1 + 784 | 0, d10, d8, i2);
     i31 = HEAP32[i13 >> 2] | 0;
    }
    if ((i31 | 0) != 0) {
     if ((HEAP8[i1 + 800 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i31 + -4 >> 2] | 0);
     }
     HEAP32[i13 >> 2] = 0;
    }
   }
   if ((HEAP8[i3 + 16 >> 0] | 0) == 0) {
    STACKTOP = i1;
    return;
   }
   i5 = HEAP32[i2 + 4 >> 2] | 0;
   if ((HEAP32[i5 + 748 >> 2] | 0) == 0) {
    STACKTOP = i1;
    return;
   }
   i4 = HEAP32[i5 + 740 >> 2] | 0;
   i3 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0;
   if ((i4 | 0) == (i3 | 0)) {
    __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i5, i4 + 4 | 0, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
    STACKTOP = i1;
    return;
   } else {
    __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i5, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i3 + 4 | 0);
    STACKTOP = i1;
    return;
   }
  }
 } while (0);
 __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 88 | 0, i1 + 168 | 0, i2, HEAP32[i15 + 20 >> 2] | 0, 0);
 if (((HEAP32[i3 + 28 >> 2] | 0) != 0 ? (HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + 748 >> 2] | 0) < (HEAP32[i3 + 32 >> 2] | 0) : 0) ? (d11 = +HEAPF32[i1 + 92 >> 2], d8 = +HEAPF32[i1 + 96 >> 2], d10 = +HEAPF32[i1 + 100 >> 2], d11 * d11 + d8 * d8 + d10 * d10 > 1.1920928955078125e-7) : 0) {
  d12 = 1.0 / (d11 * d11 + d8 * d8 + d10 * d10);
  if (+Math_abs(+(d10 * d12)) > .7071067690849304) {
   d22 = 1.0 / +Math_sqrt(+(d10 * d12 * d10 * d12 + d8 * d12 * d8 * d12));
   d20 = 0.0;
   d21 = -(d10 * d12 * d22);
   d22 = d8 * d12 * d22;
  } else {
   d21 = 1.0 / +Math_sqrt(+(d11 * d12 * d11 * d12 + d8 * d12 * d8 * d12));
   d20 = -(d8 * d12 * d21);
   d21 = d11 * d12 * d21;
   d22 = 0.0;
  }
  d18 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 15](i7);
  d19 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 15](i6);
  d23 = .019999999552965164 / (d18 < d19 ? d18 : d19);
  if (d18 < d19) {
   HEAP32[i1 + 720 >> 2] = HEAP32[i1 + 168 >> 2];
   HEAP32[i1 + 724 >> 2] = HEAP32[i1 + 172 >> 2];
   HEAP32[i1 + 728 >> 2] = HEAP32[i1 + 176 >> 2];
   HEAP32[i1 + 732 >> 2] = HEAP32[i1 + 180 >> 2];
   HEAP32[i1 + 736 >> 2] = HEAP32[i37 + 0 >> 2];
   HEAP32[i1 + 740 >> 2] = HEAP32[i37 + 4 >> 2];
   HEAP32[i1 + 744 >> 2] = HEAP32[i37 + 8 >> 2];
   HEAP32[i1 + 748 >> 2] = HEAP32[i37 + 12 >> 2];
   HEAP32[i1 + 752 >> 2] = HEAP32[i31 + 0 >> 2];
   HEAP32[i1 + 756 >> 2] = HEAP32[i31 + 4 >> 2];
   HEAP32[i1 + 760 >> 2] = HEAP32[i31 + 8 >> 2];
   HEAP32[i1 + 764 >> 2] = HEAP32[i31 + 12 >> 2];
   HEAP32[i1 + 768 >> 2] = HEAP32[i60 + 0 >> 2];
   HEAP32[i1 + 772 >> 2] = HEAP32[i60 + 4 >> 2];
   HEAP32[i1 + 776 >> 2] = HEAP32[i60 + 8 >> 2];
   HEAP32[i1 + 780 >> 2] = HEAP32[i60 + 12 >> 2];
  } else {
   HEAP32[i1 + 720 >> 2] = HEAP32[i32 + 0 >> 2];
   HEAP32[i1 + 724 >> 2] = HEAP32[i32 + 4 >> 2];
   HEAP32[i1 + 728 >> 2] = HEAP32[i32 + 8 >> 2];
   HEAP32[i1 + 732 >> 2] = HEAP32[i32 + 12 >> 2];
   HEAP32[i1 + 736 >> 2] = HEAP32[i48 + 0 >> 2];
   HEAP32[i1 + 740 >> 2] = HEAP32[i48 + 4 >> 2];
   HEAP32[i1 + 744 >> 2] = HEAP32[i48 + 8 >> 2];
   HEAP32[i1 + 748 >> 2] = HEAP32[i48 + 12 >> 2];
   HEAP32[i1 + 752 >> 2] = HEAP32[i59 + 0 >> 2];
   HEAP32[i1 + 756 >> 2] = HEAP32[i59 + 4 >> 2];
   HEAP32[i1 + 760 >> 2] = HEAP32[i59 + 8 >> 2];
   HEAP32[i1 + 764 >> 2] = HEAP32[i59 + 12 >> 2];
   HEAP32[i1 + 768 >> 2] = HEAP32[i17 + 0 >> 2];
   HEAP32[i1 + 772 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i1 + 776 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i1 + 780 >> 2] = HEAP32[i17 + 12 >> 2];
  }
  i73 = HEAP32[i3 + 28 >> 2] | 0;
  if ((i73 | 0) > 0) {
   d24 = d22 * d22 + (d21 * d21 + d20 * d20);
   d23 = d23 > .39269909262657166 ? .19634954631328583 : d23 * .5;
   i71 = i1 + 516 | 0;
   i68 = i1 + 532 | 0;
   i70 = i1 + 548 | 0;
   i61 = i1 + 564 | 0;
   i69 = i1 + 580 | 0;
   i6 = i1 + 596 | 0;
   i9 = i1 + 612 | 0;
   i13 = i1 + 628 | 0;
   i16 = i1 + 644 | 0;
   i66 = i1 + 660 | 0;
   i7 = i1 + 736 | 0;
   i14 = i1 + 676 | 0;
   i67 = i1 + 752 | 0;
   i65 = i1 + 692 | 0;
   i72 = i1 + 768 | 0;
   if (d24 > 1.1920928955078125e-7) {
    d24 = +Math_sin(+d23) / +Math_sqrt(+d24);
    d20 = d20 * d24;
    d21 = d21 * d24;
    d22 = d22 * d24;
    d24 = +Math_cos(+d23);
    d23 = +Math_sqrt(+(d10 * d12 * d10 * d12 + (d11 * d12 * d11 * d12 + d8 * d12 * d8 * d12)));
    if (d18 < d19) {
     i74 = 0;
     do {
      d47 = +(i74 | 0) * (6.2831854820251465 / +(i73 | 0)) * .5;
      d58 = +Math_sin(+d47) / d23;
      d47 = +Math_cos(+d47);
      d54 = d22 * -(d8 * d12 * d58) + (d20 * d47 + d24 * -(d11 * d12 * d58)) - d21 * -(d10 * d12 * d58);
      d63 = d20 * -(d10 * d12 * d58) + (d21 * d47 + d24 * -(d8 * d12 * d58)) - d22 * -(d11 * d12 * d58);
      d55 = d21 * -(d11 * d12 * d58) + (d22 * d47 + d24 * -(d10 * d12 * d58)) - d20 * -(d8 * d12 * d58);
      d46 = d24 * d47 - d20 * -(d11 * d12 * d58) - d21 * -(d8 * d12 * d58) - d22 * -(d10 * d12 * d58);
      d57 = d10 * d12 * d58 * d63 + (d11 * d12 * d58 * d46 + d47 * d54) - d8 * d12 * d58 * d55;
      d62 = d11 * d12 * d58 * d55 + (d47 * d63 + d8 * d12 * d58 * d46) - d10 * d12 * d58 * d54;
      d45 = d8 * d12 * d58 * d54 + (d10 * d12 * d58 * d46 + d47 * d55) - d11 * d12 * d58 * d63;
      d55 = d47 * d46 - d11 * d12 * d58 * d54 - d8 * d12 * d58 * d63 - d10 * d12 * d58 * d55;
      d58 = d57 * (2.0 / (d55 * d55 + (d45 * d45 + (d57 * d57 + d62 * d62))));
      d63 = d62 * (2.0 / (d55 * d55 + (d45 * d45 + (d57 * d57 + d62 * d62))));
      d54 = d45 * (2.0 / (d55 * d55 + (d45 * d45 + (d57 * d57 + d62 * d62))));
      i75 = HEAP32[i4 + 12 >> 2] | 0;
      d46 = +HEAPF32[i75 >> 2];
      d47 = +HEAPF32[i75 + 16 >> 2];
      d49 = +HEAPF32[i75 + 32 >> 2];
      d50 = +HEAPF32[i75 + 4 >> 2];
      d51 = +HEAPF32[i75 + 20 >> 2];
      d52 = +HEAPF32[i75 + 36 >> 2];
      d53 = +HEAPF32[i75 + 8 >> 2];
      d56 = +HEAPF32[i75 + 24 >> 2];
      d64 = +HEAPF32[i75 + 40 >> 2];
      HEAPF32[i1 + 168 >> 2] = (d57 * d54 + d55 * d63) * d49 + (d47 * (d57 * d63 - d55 * d54) + d46 * (1.0 - (d62 * d63 + d45 * d54)));
      HEAPF32[i1 + 172 >> 2] = (1.0 - (d62 * d63 + d45 * d54)) * d50 + (d57 * d63 - d55 * d54) * d51 + (d57 * d54 + d55 * d63) * d52;
      HEAPF32[i1 + 176 >> 2] = (1.0 - (d62 * d63 + d45 * d54)) * d53 + (d57 * d63 - d55 * d54) * d56 + (d57 * d54 + d55 * d63) * d64;
      HEAPF32[i1 + 180 >> 2] = 0.0;
      HEAPF32[i1 + 184 >> 2] = (d62 * d54 - d55 * d58) * d49 + (d46 * (d57 * d63 + d55 * d54) + d47 * (1.0 - (d57 * d58 + d45 * d54)));
      HEAPF32[i1 + 188 >> 2] = (d57 * d63 + d55 * d54) * d50 + (1.0 - (d57 * d58 + d45 * d54)) * d51 + (d62 * d54 - d55 * d58) * d52;
      HEAPF32[i1 + 192 >> 2] = (d57 * d63 + d55 * d54) * d53 + (1.0 - (d57 * d58 + d45 * d54)) * d56 + (d62 * d54 - d55 * d58) * d64;
      HEAPF32[i1 + 196 >> 2] = 0.0;
      HEAPF32[i1 + 200 >> 2] = d46 * (d57 * d54 - d55 * d63) + d47 * (d62 * d54 + d55 * d58) + d49 * (1.0 - (d57 * d58 + d62 * d63));
      HEAPF32[i1 + 204 >> 2] = (d57 * d54 - d55 * d63) * d50 + (d62 * d54 + d55 * d58) * d51 + (1.0 - (d57 * d58 + d62 * d63)) * d52;
      HEAPF32[i1 + 208 >> 2] = (d57 * d54 - d55 * d63) * d53 + (d62 * d54 + d55 * d58) * d56 + (1.0 - (d57 * d58 + d62 * d63)) * d64;
      HEAPF32[i1 + 212 >> 2] = 0.0;
      i75 = HEAP32[i5 + 12 >> 2] | 0;
      HEAP32[i32 + 0 >> 2] = HEAP32[i75 + 0 >> 2];
      HEAP32[i32 + 4 >> 2] = HEAP32[i75 + 4 >> 2];
      HEAP32[i32 + 8 >> 2] = HEAP32[i75 + 8 >> 2];
      HEAP32[i32 + 12 >> 2] = HEAP32[i75 + 12 >> 2];
      HEAP32[i48 + 0 >> 2] = HEAP32[i75 + 16 >> 2];
      HEAP32[i48 + 4 >> 2] = HEAP32[i75 + 20 >> 2];
      HEAP32[i48 + 8 >> 2] = HEAP32[i75 + 24 >> 2];
      HEAP32[i48 + 12 >> 2] = HEAP32[i75 + 28 >> 2];
      HEAP32[i59 + 0 >> 2] = HEAP32[i75 + 32 >> 2];
      HEAP32[i59 + 4 >> 2] = HEAP32[i75 + 36 >> 2];
      HEAP32[i59 + 8 >> 2] = HEAP32[i75 + 40 >> 2];
      HEAP32[i59 + 12 >> 2] = HEAP32[i75 + 44 >> 2];
      HEAP32[i17 + 0 >> 2] = HEAP32[i75 + 48 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i75 + 52 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i75 + 56 >> 2];
      HEAP32[i17 + 12 >> 2] = HEAP32[i75 + 60 >> 2];
      i75 = HEAP32[i15 + 20 >> 2] | 0;
      HEAP32[i1 + 480 >> 2] = 18952;
      HEAP32[i1 + 512 >> 2] = i2;
      HEAP32[i71 + 0 >> 2] = HEAP32[i1 + 168 >> 2];
      HEAP32[i71 + 4 >> 2] = HEAP32[i1 + 172 >> 2];
      HEAP32[i71 + 8 >> 2] = HEAP32[i1 + 176 >> 2];
      HEAP32[i71 + 12 >> 2] = HEAP32[i1 + 180 >> 2];
      HEAP32[i68 + 0 >> 2] = HEAP32[i37 + 0 >> 2];
      HEAP32[i68 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
      HEAP32[i68 + 8 >> 2] = HEAP32[i37 + 8 >> 2];
      HEAP32[i68 + 12 >> 2] = HEAP32[i37 + 12 >> 2];
      HEAP32[i70 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
      HEAP32[i70 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
      HEAP32[i70 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
      HEAP32[i70 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
      HEAP32[i61 + 0 >> 2] = HEAP32[i60 + 0 >> 2];
      HEAP32[i61 + 4 >> 2] = HEAP32[i60 + 4 >> 2];
      HEAP32[i61 + 8 >> 2] = HEAP32[i60 + 8 >> 2];
      HEAP32[i61 + 12 >> 2] = HEAP32[i60 + 12 >> 2];
      HEAP32[i69 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
      HEAP32[i69 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
      HEAP32[i69 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
      HEAP32[i69 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
      HEAP32[i6 + 0 >> 2] = HEAP32[i48 + 0 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i48 + 8 >> 2];
      HEAP32[i6 + 12 >> 2] = HEAP32[i48 + 12 >> 2];
      HEAP32[i9 + 0 >> 2] = HEAP32[i59 + 0 >> 2];
      HEAP32[i9 + 4 >> 2] = HEAP32[i59 + 4 >> 2];
      HEAP32[i9 + 8 >> 2] = HEAP32[i59 + 8 >> 2];
      HEAP32[i9 + 12 >> 2] = HEAP32[i59 + 12 >> 2];
      HEAP32[i13 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
      HEAP32[i13 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
      HEAP32[i16 + 0 >> 2] = HEAP32[i1 + 720 >> 2];
      HEAP32[i16 + 4 >> 2] = HEAP32[i1 + 724 >> 2];
      HEAP32[i16 + 8 >> 2] = HEAP32[i1 + 728 >> 2];
      HEAP32[i16 + 12 >> 2] = HEAP32[i1 + 732 >> 2];
      HEAP32[i66 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
      HEAP32[i66 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
      HEAP32[i66 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
      HEAP32[i66 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
      HEAP32[i14 + 0 >> 2] = HEAP32[i67 + 0 >> 2];
      HEAP32[i14 + 4 >> 2] = HEAP32[i67 + 4 >> 2];
      HEAP32[i14 + 8 >> 2] = HEAP32[i67 + 8 >> 2];
      HEAP32[i14 + 12 >> 2] = HEAP32[i67 + 12 >> 2];
      HEAP32[i65 + 0 >> 2] = HEAP32[i72 + 0 >> 2];
      HEAP32[i65 + 4 >> 2] = HEAP32[i72 + 4 >> 2];
      HEAP32[i65 + 8 >> 2] = HEAP32[i72 + 8 >> 2];
      HEAP32[i65 + 12 >> 2] = HEAP32[i72 + 12 >> 2];
      HEAP8[i1 + 708 >> 0] = d18 < d19 & 1;
      HEAP32[i1 + 712 >> 2] = i75;
      __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 88 | 0, i1 + 168 | 0, i1 + 480 | 0, i75, 0);
      i73 = HEAP32[i3 + 28 >> 2] | 0;
      i74 = i74 + 1 | 0;
     } while ((i74 | 0) < (i73 | 0));
    } else {
     i74 = 0;
     do {
      d47 = +(i74 | 0) * (6.2831854820251465 / +(i73 | 0)) * .5;
      d58 = +Math_sin(+d47) / d23;
      d47 = +Math_cos(+d47);
      i75 = HEAP32[i4 + 12 >> 2] | 0;
      HEAP32[i1 + 168 >> 2] = HEAP32[i75 + 0 >> 2];
      HEAP32[i1 + 172 >> 2] = HEAP32[i75 + 4 >> 2];
      HEAP32[i1 + 176 >> 2] = HEAP32[i75 + 8 >> 2];
      HEAP32[i1 + 180 >> 2] = HEAP32[i75 + 12 >> 2];
      HEAP32[i37 + 0 >> 2] = HEAP32[i75 + 16 >> 2];
      HEAP32[i37 + 4 >> 2] = HEAP32[i75 + 20 >> 2];
      HEAP32[i37 + 8 >> 2] = HEAP32[i75 + 24 >> 2];
      HEAP32[i37 + 12 >> 2] = HEAP32[i75 + 28 >> 2];
      HEAP32[i31 + 0 >> 2] = HEAP32[i75 + 32 >> 2];
      HEAP32[i31 + 4 >> 2] = HEAP32[i75 + 36 >> 2];
      HEAP32[i31 + 8 >> 2] = HEAP32[i75 + 40 >> 2];
      HEAP32[i31 + 12 >> 2] = HEAP32[i75 + 44 >> 2];
      HEAP32[i60 + 0 >> 2] = HEAP32[i75 + 48 >> 2];
      HEAP32[i60 + 4 >> 2] = HEAP32[i75 + 52 >> 2];
      HEAP32[i60 + 8 >> 2] = HEAP32[i75 + 56 >> 2];
      HEAP32[i60 + 12 >> 2] = HEAP32[i75 + 60 >> 2];
      d54 = d22 * -(d8 * d12 * d58) + (d20 * d47 + d24 * -(d11 * d12 * d58)) - d21 * -(d10 * d12 * d58);
      d63 = d20 * -(d10 * d12 * d58) + (d21 * d47 + d24 * -(d8 * d12 * d58)) - d22 * -(d11 * d12 * d58);
      d55 = d21 * -(d11 * d12 * d58) + (d22 * d47 + d24 * -(d10 * d12 * d58)) - d20 * -(d8 * d12 * d58);
      d46 = d24 * d47 - d20 * -(d11 * d12 * d58) - d21 * -(d8 * d12 * d58) - d22 * -(d10 * d12 * d58);
      d57 = d10 * d12 * d58 * d63 + (d11 * d12 * d58 * d46 + d47 * d54) - d8 * d12 * d58 * d55;
      d62 = d11 * d12 * d58 * d55 + (d47 * d63 + d8 * d12 * d58 * d46) - d10 * d12 * d58 * d54;
      d45 = d8 * d12 * d58 * d54 + (d10 * d12 * d58 * d46 + d47 * d55) - d11 * d12 * d58 * d63;
      d55 = d47 * d46 - d11 * d12 * d58 * d54 - d8 * d12 * d58 * d63 - d10 * d12 * d58 * d55;
      d58 = d57 * (2.0 / (d55 * d55 + (d45 * d45 + (d57 * d57 + d62 * d62))));
      d63 = d62 * (2.0 / (d55 * d55 + (d45 * d45 + (d57 * d57 + d62 * d62))));
      d54 = d45 * (2.0 / (d55 * d55 + (d45 * d45 + (d57 * d57 + d62 * d62))));
      i75 = HEAP32[i5 + 12 >> 2] | 0;
      d46 = +HEAPF32[i75 >> 2];
      d47 = +HEAPF32[i75 + 16 >> 2];
      d49 = +HEAPF32[i75 + 32 >> 2];
      d50 = +HEAPF32[i75 + 4 >> 2];
      d51 = +HEAPF32[i75 + 20 >> 2];
      d52 = +HEAPF32[i75 + 36 >> 2];
      d53 = +HEAPF32[i75 + 8 >> 2];
      d56 = +HEAPF32[i75 + 24 >> 2];
      d64 = +HEAPF32[i75 + 40 >> 2];
      HEAPF32[i1 + 232 >> 2] = (d57 * d54 + d55 * d63) * d49 + (d47 * (d57 * d63 - d55 * d54) + d46 * (1.0 - (d62 * d63 + d45 * d54)));
      HEAPF32[i1 + 236 >> 2] = (1.0 - (d62 * d63 + d45 * d54)) * d50 + (d57 * d63 - d55 * d54) * d51 + (d57 * d54 + d55 * d63) * d52;
      HEAPF32[i1 + 240 >> 2] = (1.0 - (d62 * d63 + d45 * d54)) * d53 + (d57 * d63 - d55 * d54) * d56 + (d57 * d54 + d55 * d63) * d64;
      HEAPF32[i1 + 244 >> 2] = 0.0;
      HEAPF32[i1 + 248 >> 2] = (d62 * d54 - d55 * d58) * d49 + (d46 * (d57 * d63 + d55 * d54) + d47 * (1.0 - (d57 * d58 + d45 * d54)));
      HEAPF32[i1 + 252 >> 2] = (d57 * d63 + d55 * d54) * d50 + (1.0 - (d57 * d58 + d45 * d54)) * d51 + (d62 * d54 - d55 * d58) * d52;
      HEAPF32[i1 + 256 >> 2] = (d57 * d63 + d55 * d54) * d53 + (1.0 - (d57 * d58 + d45 * d54)) * d56 + (d62 * d54 - d55 * d58) * d64;
      HEAPF32[i1 + 260 >> 2] = 0.0;
      HEAPF32[i1 + 264 >> 2] = d46 * (d57 * d54 - d55 * d63) + d47 * (d62 * d54 + d55 * d58) + d49 * (1.0 - (d57 * d58 + d62 * d63));
      HEAPF32[i1 + 268 >> 2] = (d57 * d54 - d55 * d63) * d50 + (d62 * d54 + d55 * d58) * d51 + (1.0 - (d57 * d58 + d62 * d63)) * d52;
      HEAPF32[i1 + 272 >> 2] = (d57 * d54 - d55 * d63) * d53 + (d62 * d54 + d55 * d58) * d56 + (1.0 - (d57 * d58 + d62 * d63)) * d64;
      HEAPF32[i1 + 276 >> 2] = 0.0;
      i75 = HEAP32[i15 + 20 >> 2] | 0;
      HEAP32[i1 + 480 >> 2] = 18952;
      HEAP32[i1 + 512 >> 2] = i2;
      HEAP32[i71 + 0 >> 2] = HEAP32[i1 + 168 >> 2];
      HEAP32[i71 + 4 >> 2] = HEAP32[i1 + 172 >> 2];
      HEAP32[i71 + 8 >> 2] = HEAP32[i1 + 176 >> 2];
      HEAP32[i71 + 12 >> 2] = HEAP32[i1 + 180 >> 2];
      HEAP32[i68 + 0 >> 2] = HEAP32[i37 + 0 >> 2];
      HEAP32[i68 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
      HEAP32[i68 + 8 >> 2] = HEAP32[i37 + 8 >> 2];
      HEAP32[i68 + 12 >> 2] = HEAP32[i37 + 12 >> 2];
      HEAP32[i70 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
      HEAP32[i70 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
      HEAP32[i70 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
      HEAP32[i70 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
      HEAP32[i61 + 0 >> 2] = HEAP32[i60 + 0 >> 2];
      HEAP32[i61 + 4 >> 2] = HEAP32[i60 + 4 >> 2];
      HEAP32[i61 + 8 >> 2] = HEAP32[i60 + 8 >> 2];
      HEAP32[i61 + 12 >> 2] = HEAP32[i60 + 12 >> 2];
      HEAP32[i69 + 0 >> 2] = HEAP32[i32 + 0 >> 2];
      HEAP32[i69 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
      HEAP32[i69 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
      HEAP32[i69 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
      HEAP32[i6 + 0 >> 2] = HEAP32[i48 + 0 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i48 + 8 >> 2];
      HEAP32[i6 + 12 >> 2] = HEAP32[i48 + 12 >> 2];
      HEAP32[i9 + 0 >> 2] = HEAP32[i59 + 0 >> 2];
      HEAP32[i9 + 4 >> 2] = HEAP32[i59 + 4 >> 2];
      HEAP32[i9 + 8 >> 2] = HEAP32[i59 + 8 >> 2];
      HEAP32[i9 + 12 >> 2] = HEAP32[i59 + 12 >> 2];
      HEAP32[i13 + 0 >> 2] = HEAP32[i17 + 0 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
      HEAP32[i13 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
      HEAP32[i16 + 0 >> 2] = HEAP32[i1 + 720 >> 2];
      HEAP32[i16 + 4 >> 2] = HEAP32[i1 + 724 >> 2];
      HEAP32[i16 + 8 >> 2] = HEAP32[i1 + 728 >> 2];
      HEAP32[i16 + 12 >> 2] = HEAP32[i1 + 732 >> 2];
      HEAP32[i66 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
      HEAP32[i66 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
      HEAP32[i66 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
      HEAP32[i66 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
      HEAP32[i14 + 0 >> 2] = HEAP32[i67 + 0 >> 2];
      HEAP32[i14 + 4 >> 2] = HEAP32[i67 + 4 >> 2];
      HEAP32[i14 + 8 >> 2] = HEAP32[i67 + 8 >> 2];
      HEAP32[i14 + 12 >> 2] = HEAP32[i67 + 12 >> 2];
      HEAP32[i65 + 0 >> 2] = HEAP32[i72 + 0 >> 2];
      HEAP32[i65 + 4 >> 2] = HEAP32[i72 + 4 >> 2];
      HEAP32[i65 + 8 >> 2] = HEAP32[i72 + 8 >> 2];
      HEAP32[i65 + 12 >> 2] = HEAP32[i72 + 12 >> 2];
      HEAP8[i1 + 708 >> 0] = d18 < d19 & 1;
      HEAP32[i1 + 712 >> 2] = i75;
      __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 88 | 0, i1 + 168 | 0, i1 + 480 | 0, i75, 0);
      i73 = HEAP32[i3 + 28 >> 2] | 0;
      i74 = i74 + 1 | 0;
     } while ((i74 | 0) < (i73 | 0));
    }
   } else if (d18 < d19) {
    i4 = 0;
    do i4 = i4 + 1 | 0; while ((i4 | 0) < (i73 | 0));
   } else {
    i4 = 0;
    do i4 = i4 + 1 | 0; while ((i4 | 0) < (i73 | 0));
   }
  }
 }
 if ((HEAP8[i3 + 16 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 if ((HEAP32[i3 + 748 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i3 + 740 >> 2] | 0;
 i5 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0;
 if ((i4 | 0) == (i5 | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i4 + 4 | 0, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
  STACKTOP = i1;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i5 + 4 | 0);
  STACKTOP = i1;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolver15convertContactsEPP20btPersistentManifoldiRK19btContactSolverInfo(i12, i4, i2, i14) {
 i12 = i12 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, i33 = 0, d34 = 0.0, d35 = 0.0, d36 = 0.0, i37 = 0, i38 = 0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((i2 | 0) <= 0) {
  STACKTOP = i13;
  return;
 }
 i5 = 0;
 do {
  i6 = HEAP32[i4 + (i5 << 2) >> 2] | 0;
  i1 = HEAP32[i6 + 740 >> 2] | 0;
  i11 = HEAP32[i6 + 744 >> 2] | 0;
  i7 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i12, i1, +HEAPF32[i14 + 12 >> 2]) | 0;
  i8 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i12, i11, +HEAPF32[i14 + 12 >> 2]) | 0;
  i9 = HEAP32[i12 + 16 >> 2] | 0;
  do if ((i9 + (i7 * 244 | 0) | 0) != 0) {
   if ((+HEAPF32[i9 + (i7 * 244 | 0) + 128 >> 2] == 0.0 ? +HEAPF32[i9 + (i7 * 244 | 0) + 132 >> 2] == 0.0 : 0) ? +HEAPF32[i9 + (i7 * 244 | 0) + 136 >> 2] == 0.0 : 0) {
    if ((i9 + (i8 * 244 | 0) | 0) == 0) break;
    if ((+HEAPF32[i9 + (i8 * 244 | 0) + 128 >> 2] == 0.0 ? +HEAPF32[i9 + (i8 * 244 | 0) + 132 >> 2] == 0.0 : 0) ? +HEAPF32[i9 + (i8 * 244 | 0) + 136 >> 2] == 0.0 : 0) break;
   }
   i16 = HEAP32[i6 + 748 >> 2] | 0;
   if ((i16 | 0) > 0) {
    i15 = 0;
    i28 = 1;
    do {
     i17 = i6 + (i15 * 184 | 0) + 4 | 0;
     i33 = i6 + (i15 * 184 | 0) + 84 | 0;
     if (+HEAPF32[i33 >> 2] <= +HEAPF32[i6 + 756 >> 2]) {
      i16 = HEAP32[i12 + 28 >> 2] | 0;
      if ((i16 | 0) == (HEAP32[i12 + 32 >> 2] | 0) ? (i10 = (i16 | 0) == 0 ? 1 : i16 << 1, (i16 | 0) < (i10 | 0)) : 0) {
       if ((i10 | 0) == 0) {
        i18 = 0;
        i21 = i16;
       } else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i18 = _malloc((i10 * 152 | 3) + 16 | 0) | 0;
        if ((i18 | 0) == 0) i18 = 0; else {
         HEAP32[(i18 + 19 & -16) + -4 >> 2] = i18;
         i18 = i18 + 19 & -16;
        }
        i21 = HEAP32[i12 + 28 >> 2] | 0;
       }
       if ((i21 | 0) > 0) {
        i20 = 0;
        do {
         _memcpy(i18 + (i20 * 152 | 0) | 0, (HEAP32[i12 + 36 >> 2] | 0) + (i20 * 152 | 0) | 0, 152) | 0;
         i20 = i20 + 1 | 0;
        } while ((i20 | 0) != (i21 | 0));
       }
       i20 = HEAP32[i12 + 36 >> 2] | 0;
       if ((i20 | 0) != 0) {
        if ((HEAP8[i12 + 40 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i20 + -4 >> 2] | 0);
        }
        HEAP32[i12 + 36 >> 2] = 0;
       }
       HEAP8[i12 + 40 >> 0] = 1;
       HEAP32[i12 + 36 >> 2] = i18;
       HEAP32[i12 + 32 >> 2] = i10;
       i18 = HEAP32[i12 + 28 >> 2] | 0;
      } else i18 = i16;
      HEAP32[i12 + 28 >> 2] = i18 + 1;
      i18 = HEAP32[i12 + 36 >> 2] | 0;
      i30 = (HEAP32[i1 + 236 >> 2] & 2 | 0) == 0 ? 0 : i1;
      i29 = (HEAP32[i11 + 236 >> 2] & 2 | 0) == 0 ? 0 : i11;
      HEAP32[i18 + (i16 * 152 | 0) + 144 >> 2] = i7;
      HEAP32[i18 + (i16 * 152 | 0) + 148 >> 2] = i8;
      HEAP32[i18 + (i16 * 152 | 0) + 132 >> 2] = i17;
      d39 = +HEAPF32[i6 + (i15 * 184 | 0) + 52 >> 2] - +HEAPF32[i1 + 52 >> 2];
      d40 = +HEAPF32[i6 + (i15 * 184 | 0) + 56 >> 2] - +HEAPF32[i1 + 56 >> 2];
      d41 = +HEAPF32[i6 + (i15 * 184 | 0) + 60 >> 2] - +HEAPF32[i1 + 60 >> 2];
      HEAPF32[i13 + 64 >> 2] = d39;
      HEAPF32[i13 + 68 >> 2] = d40;
      HEAPF32[i13 + 72 >> 2] = d41;
      HEAPF32[i13 + 76 >> 2] = 0.0;
      d34 = +HEAPF32[i6 + (i15 * 184 | 0) + 36 >> 2] - +HEAPF32[i11 + 52 >> 2];
      d35 = +HEAPF32[i6 + (i15 * 184 | 0) + 40 >> 2] - +HEAPF32[i11 + 56 >> 2];
      d36 = +HEAPF32[i6 + (i15 * 184 | 0) + 44 >> 2] - +HEAPF32[i11 + 60 >> 2];
      HEAPF32[i13 + 48 >> 2] = d34;
      HEAPF32[i13 + 52 >> 2] = d35;
      HEAPF32[i13 + 56 >> 2] = d36;
      HEAPF32[i13 + 60 >> 2] = 0.0;
      if ((HEAP32[i9 + (i7 * 244 | 0) + 240 >> 2] | 0) == 0) {
       d19 = 0.0;
       d26 = 0.0;
       d25 = 0.0;
      } else {
       d49 = +HEAPF32[i9 + (i7 * 244 | 0) + 192 >> 2] + +HEAPF32[i9 + (i7 * 244 | 0) + 224 >> 2];
       d25 = +HEAPF32[i9 + (i7 * 244 | 0) + 196 >> 2] + +HEAPF32[i9 + (i7 * 244 | 0) + 228 >> 2];
       d26 = +HEAPF32[i9 + (i7 * 244 | 0) + 200 >> 2] + +HEAPF32[i9 + (i7 * 244 | 0) + 232 >> 2];
       d19 = +HEAPF32[i9 + (i7 * 244 | 0) + 176 >> 2] + +HEAPF32[i9 + (i7 * 244 | 0) + 208 >> 2] + (d25 * d41 - d26 * d40);
       d26 = +HEAPF32[i9 + (i7 * 244 | 0) + 180 >> 2] + +HEAPF32[i9 + (i7 * 244 | 0) + 212 >> 2] + (d26 * d39 - d49 * d41);
       d25 = +HEAPF32[i9 + (i7 * 244 | 0) + 184 >> 2] + +HEAPF32[i9 + (i7 * 244 | 0) + 216 >> 2] + (d49 * d40 - d25 * d39);
      }
      if ((HEAP32[i9 + (i8 * 244 | 0) + 240 >> 2] | 0) == 0) {
       d27 = 0.0;
       d23 = 0.0;
       d24 = 0.0;
      } else {
       d49 = +HEAPF32[i9 + (i8 * 244 | 0) + 192 >> 2] + +HEAPF32[i9 + (i8 * 244 | 0) + 224 >> 2];
       d24 = +HEAPF32[i9 + (i8 * 244 | 0) + 196 >> 2] + +HEAPF32[i9 + (i8 * 244 | 0) + 228 >> 2];
       d23 = +HEAPF32[i9 + (i8 * 244 | 0) + 200 >> 2] + +HEAPF32[i9 + (i8 * 244 | 0) + 232 >> 2];
       d27 = +HEAPF32[i9 + (i8 * 244 | 0) + 176 >> 2] + +HEAPF32[i9 + (i8 * 244 | 0) + 208 >> 2] + (d24 * d36 - d23 * d35);
       d23 = +HEAPF32[i9 + (i8 * 244 | 0) + 180 >> 2] + +HEAPF32[i9 + (i8 * 244 | 0) + 212 >> 2] + (d23 * d34 - d49 * d36);
       d24 = +HEAPF32[i9 + (i8 * 244 | 0) + 184 >> 2] + +HEAPF32[i9 + (i8 * 244 | 0) + 216 >> 2] + (d49 * d35 - d24 * d34);
      }
      d19 = d19 - d27;
      d23 = d26 - d23;
      d26 = d25 - d24;
      i21 = i6 + (i15 * 184 | 0) + 68 | 0;
      d25 = +HEAPF32[i21 >> 2];
      i22 = i6 + (i15 * 184 | 0) + 72 | 0;
      d24 = +HEAPF32[i22 >> 2];
      i20 = i6 + (i15 * 184 | 0) + 76 | 0;
      d27 = +HEAPF32[i20 >> 2];
      i31 = HEAP32[i12 + 16 >> 2] | 0;
      i38 = HEAP32[i31 + (i7 * 244 | 0) + 240 >> 2] | 0;
      i37 = HEAP32[i31 + (i8 * 244 | 0) + 240 >> 2] | 0;
      if ((i38 | 0) != 0) {
       d47 = ((d40 * d27 - d41 * d24) * +HEAPF32[i38 + 264 >> 2] + (d41 * d25 - d27 * d39) * +HEAPF32[i38 + 268 >> 2] + (d24 * d39 - d40 * d25) * +HEAPF32[i38 + 272 >> 2]) * +HEAPF32[i38 + 544 >> 2];
       d49 = ((d40 * d27 - d41 * d24) * +HEAPF32[i38 + 280 >> 2] + (d41 * d25 - d27 * d39) * +HEAPF32[i38 + 284 >> 2] + (d24 * d39 - d40 * d25) * +HEAPF32[i38 + 288 >> 2]) * +HEAPF32[i38 + 548 >> 2];
       d48 = ((d40 * d27 - d41 * d24) * +HEAPF32[i38 + 296 >> 2] + (d41 * d25 - d27 * d39) * +HEAPF32[i38 + 300 >> 2] + (d24 * d39 - d40 * d25) * +HEAPF32[i38 + 304 >> 2]) * +HEAPF32[i38 + 552 >> 2];
      } else {
       d47 = 0.0;
       d49 = 0.0;
       d48 = 0.0;
      }
      HEAPF32[i18 + (i16 * 152 | 0) + 64 >> 2] = d47;
      HEAPF32[i18 + (i16 * 152 | 0) + 68 >> 2] = d49;
      HEAPF32[i18 + (i16 * 152 | 0) + 72 >> 2] = d48;
      HEAPF32[i18 + (i16 * 152 | 0) + 76 >> 2] = 0.0;
      d43 = +HEAPF32[i20 >> 2];
      d42 = +HEAPF32[i22 >> 2];
      d32 = +HEAPF32[i21 >> 2];
      if ((i37 | 0) != 0) {
       d44 = (+HEAPF32[i37 + 264 >> 2] * -(d35 * d43 - d36 * d42) + +HEAPF32[i37 + 268 >> 2] * -(d36 * d32 - d43 * d34) + +HEAPF32[i37 + 272 >> 2] * -(d42 * d34 - d35 * d32)) * +HEAPF32[i37 + 544 >> 2];
       d45 = (+HEAPF32[i37 + 280 >> 2] * -(d35 * d43 - d36 * d42) + +HEAPF32[i37 + 284 >> 2] * -(d36 * d32 - d43 * d34) + +HEAPF32[i37 + 288 >> 2] * -(d42 * d34 - d35 * d32)) * +HEAPF32[i37 + 548 >> 2];
       d46 = (+HEAPF32[i37 + 296 >> 2] * -(d35 * d43 - d36 * d42) + +HEAPF32[i37 + 300 >> 2] * -(d36 * d32 - d43 * d34) + +HEAPF32[i37 + 304 >> 2] * -(d42 * d34 - d35 * d32)) * +HEAPF32[i37 + 552 >> 2];
      } else {
       d44 = 0.0;
       d45 = 0.0;
       d46 = 0.0;
      }
      HEAPF32[i18 + (i16 * 152 | 0) + 80 >> 2] = d44;
      HEAPF32[i18 + (i16 * 152 | 0) + 84 >> 2] = d45;
      HEAPF32[i18 + (i16 * 152 | 0) + 88 >> 2] = d46;
      HEAPF32[i18 + (i16 * 152 | 0) + 92 >> 2] = 0.0;
      if ((i38 | 0) != 0) d47 = +HEAPF32[i38 + 344 >> 2] + ((d49 * d41 - d48 * d40) * +HEAPF32[i21 >> 2] + (d48 * d39 - d41 * d47) * +HEAPF32[i22 >> 2] + (d40 * d47 - d49 * d39) * +HEAPF32[i20 >> 2]); else d47 = 0.0;
      if ((i37 | 0) != 0) {
       d49 = -d44;
       d44 = -d45;
       d48 = -d46;
       d44 = +HEAPF32[i37 + 344 >> 2] + ((d36 * d44 - d35 * d48) * +HEAPF32[i21 >> 2] + (d34 * d48 - d36 * d49) * +HEAPF32[i22 >> 2] + (d35 * d49 - d34 * d44) * +HEAPF32[i20 >> 2]);
      } else d44 = 0.0;
      HEAPF32[i18 + (i16 * 152 | 0) + 108 >> 2] = 1.0 / (d47 + d44);
      if ((i38 | 0) != 0) {
       HEAP32[i18 + (i16 * 152 | 0) + 16 >> 2] = HEAP32[i21 + 0 >> 2];
       HEAP32[i18 + (i16 * 152 | 0) + 20 >> 2] = HEAP32[i21 + 4 >> 2];
       HEAP32[i18 + (i16 * 152 | 0) + 24 >> 2] = HEAP32[i21 + 8 >> 2];
       HEAP32[i18 + (i16 * 152 | 0) + 28 >> 2] = HEAP32[i21 + 12 >> 2];
       HEAPF32[i18 + (i16 * 152 | 0) >> 2] = d40 * d27 - d41 * d24;
       HEAPF32[i18 + (i16 * 152 | 0) + 4 >> 2] = d41 * d25 - d27 * d39;
       HEAPF32[i18 + (i16 * 152 | 0) + 8 >> 2] = d24 * d39 - d40 * d25;
       HEAPF32[i18 + (i16 * 152 | 0) + 12 >> 2] = 0.0;
      } else {
       HEAP32[i18 + (i16 * 152 | 0) + 0 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 4 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 8 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 12 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 16 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 20 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 24 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 28 >> 2] = 0;
      }
      if ((i37 | 0) != 0) {
       d48 = -+HEAPF32[i22 >> 2];
       d49 = -+HEAPF32[i20 >> 2];
       HEAPF32[i18 + (i16 * 152 | 0) + 48 >> 2] = -+HEAPF32[i21 >> 2];
       HEAPF32[i18 + (i16 * 152 | 0) + 52 >> 2] = d48;
       HEAPF32[i18 + (i16 * 152 | 0) + 56 >> 2] = d49;
       HEAPF32[i18 + (i16 * 152 | 0) + 60 >> 2] = 0.0;
       HEAPF32[i18 + (i16 * 152 | 0) + 32 >> 2] = -(d35 * d43 - d36 * d42);
       HEAPF32[i18 + (i16 * 152 | 0) + 36 >> 2] = -(d36 * d32 - d43 * d34);
       HEAPF32[i18 + (i16 * 152 | 0) + 40 >> 2] = -(d42 * d34 - d35 * d32);
       HEAPF32[i18 + (i16 * 152 | 0) + 44 >> 2] = 0.0;
      } else {
       HEAP32[i18 + (i16 * 152 | 0) + 32 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 36 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 40 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 44 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 48 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 52 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 56 >> 2] = 0;
       HEAP32[i18 + (i16 * 152 | 0) + 60 >> 2] = 0;
      }
      d32 = +HEAPF32[i33 >> 2] + +HEAPF32[i14 + 56 >> 2];
      if ((i38 | 0) != 0) {
       d49 = +HEAPF32[i38 + 332 >> 2];
       d47 = +HEAPF32[i38 + 336 >> 2];
       d48 = +HEAPF32[i38 + 328 >> 2];
       d42 = d49 * d41 - d47 * d40 + +HEAPF32[i38 + 312 >> 2];
       d41 = +HEAPF32[i38 + 316 >> 2] + (d47 * d39 - d41 * d48);
       d40 = d40 * d48 - d49 * d39 + +HEAPF32[i38 + 320 >> 2];
      } else {
       d42 = 0.0;
       d41 = 0.0;
       d40 = 0.0;
      }
      if ((i37 | 0) != 0) {
       d49 = +HEAPF32[i37 + 332 >> 2];
       d47 = +HEAPF32[i37 + 336 >> 2];
       d48 = +HEAPF32[i37 + 328 >> 2];
       d39 = d49 * d36 - d47 * d35 + +HEAPF32[i37 + 312 >> 2];
       d36 = +HEAPF32[i37 + 316 >> 2] + (d47 * d34 - d36 * d48);
       d34 = d35 * d48 - d49 * d34 + +HEAPF32[i37 + 320 >> 2];
      } else {
       d39 = 0.0;
       d36 = 0.0;
       d34 = 0.0;
      }
      d34 = +HEAPF32[i21 >> 2] * (d42 - d39) + (d41 - d36) * +HEAPF32[i22 >> 2] + (d40 - d34) * +HEAPF32[i20 >> 2];
      HEAPF32[i18 + (i16 * 152 | 0) + 104 >> 2] = +HEAPF32[i6 + (i15 * 184 | 0) + 88 >> 2];
      d34 = d34 * +HEAPF32[i6 + (i15 * 184 | 0) + 96 >> 2];
      d34 = !(d34 >= -0.0) ? -d34 : 0.0;
      do if ((HEAP32[i14 + 64 >> 2] & 4 | 0) == 0) HEAPF32[i18 + (i16 * 152 | 0) + 100 >> 2] = 0.0; else {
       d35 = +HEAPF32[i6 + (i15 * 184 | 0) + 124 >> 2] * +HEAPF32[i14 + 60 >> 2];
       HEAPF32[i18 + (i16 * 152 | 0) + 100 >> 2] = d35;
       do if ((i38 | 0) != 0) {
        if ((HEAP32[i31 + (i7 * 244 | 0) + 240 >> 2] | 0) == 0) break;
        d49 = d35 * +HEAPF32[i31 + (i7 * 244 | 0) + 132 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 20 >> 2] * +HEAPF32[i38 + 352 >> 2] * +HEAPF32[i31 + (i7 * 244 | 0) + 116 >> 2];
        d48 = d35 * +HEAPF32[i31 + (i7 * 244 | 0) + 136 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 24 >> 2] * +HEAPF32[i38 + 356 >> 2] * +HEAPF32[i31 + (i7 * 244 | 0) + 120 >> 2];
        HEAPF32[i31 + (i7 * 244 | 0) + 64 >> 2] = +HEAPF32[i31 + (i7 * 244 | 0) + 112 >> 2] * d35 * +HEAPF32[i31 + (i7 * 244 | 0) + 128 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 16 >> 2] * +HEAPF32[i38 + 348 >> 2] + +HEAPF32[i31 + (i7 * 244 | 0) + 64 >> 2];
        HEAPF32[i31 + (i7 * 244 | 0) + 68 >> 2] = d49 + +HEAPF32[i31 + (i7 * 244 | 0) + 68 >> 2];
        HEAPF32[i31 + (i7 * 244 | 0) + 72 >> 2] = d48 + +HEAPF32[i31 + (i7 * 244 | 0) + 72 >> 2];
        d48 = d35 * +HEAPF32[i31 + (i7 * 244 | 0) + 100 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 68 >> 2];
        d49 = d35 * +HEAPF32[i31 + (i7 * 244 | 0) + 104 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 72 >> 2];
        HEAPF32[i31 + (i7 * 244 | 0) + 80 >> 2] = d35 * +HEAPF32[i31 + (i7 * 244 | 0) + 96 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 64 >> 2] + +HEAPF32[i31 + (i7 * 244 | 0) + 80 >> 2];
        HEAPF32[i31 + (i7 * 244 | 0) + 84 >> 2] = d48 + +HEAPF32[i31 + (i7 * 244 | 0) + 84 >> 2];
        HEAPF32[i31 + (i7 * 244 | 0) + 88 >> 2] = d49 + +HEAPF32[i31 + (i7 * 244 | 0) + 88 >> 2];
       } while (0);
       if ((i37 | 0) == 0) break;
       d35 = +HEAPF32[i18 + (i16 * 152 | 0) + 100 >> 2];
       if ((HEAP32[i31 + (i8 * 244 | 0) + 240 >> 2] | 0) == 0) break;
       d49 = +HEAPF32[i18 + (i16 * 152 | 0) + 88 >> 2];
       d48 = +HEAPF32[i18 + (i16 * 152 | 0) + 84 >> 2];
       d47 = +HEAPF32[i18 + (i16 * 152 | 0) + 80 >> 2];
       d45 = d35 * +HEAPF32[i31 + (i8 * 244 | 0) + 132 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 52 >> 2] * +HEAPF32[i37 + 352 >> 2] * +HEAPF32[i31 + (i8 * 244 | 0) + 116 >> 2];
       d46 = d35 * +HEAPF32[i31 + (i8 * 244 | 0) + 136 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 56 >> 2] * +HEAPF32[i37 + 356 >> 2] * +HEAPF32[i31 + (i8 * 244 | 0) + 120 >> 2];
       HEAPF32[i31 + (i8 * 244 | 0) + 64 >> 2] = +HEAPF32[i31 + (i8 * 244 | 0) + 112 >> 2] * d35 * +HEAPF32[i31 + (i8 * 244 | 0) + 128 >> 2] * +HEAPF32[i18 + (i16 * 152 | 0) + 48 >> 2] * +HEAPF32[i37 + 348 >> 2] + +HEAPF32[i31 + (i8 * 244 | 0) + 64 >> 2];
       HEAPF32[i31 + (i8 * 244 | 0) + 68 >> 2] = d45 + +HEAPF32[i31 + (i8 * 244 | 0) + 68 >> 2];
       HEAPF32[i31 + (i8 * 244 | 0) + 72 >> 2] = d46 + +HEAPF32[i31 + (i8 * 244 | 0) + 72 >> 2];
       d48 = d48 * +HEAPF32[i31 + (i8 * 244 | 0) + 100 >> 2] * -d35;
       d49 = d49 * +HEAPF32[i31 + (i8 * 244 | 0) + 104 >> 2] * -d35;
       HEAPF32[i31 + (i8 * 244 | 0) + 80 >> 2] = +HEAPF32[i31 + (i8 * 244 | 0) + 80 >> 2] - d47 * +HEAPF32[i31 + (i8 * 244 | 0) + 96 >> 2] * -d35;
       HEAPF32[i31 + (i8 * 244 | 0) + 84 >> 2] = +HEAPF32[i31 + (i8 * 244 | 0) + 84 >> 2] - d48;
       HEAPF32[i31 + (i8 * 244 | 0) + 88 >> 2] = +HEAPF32[i31 + (i8 * 244 | 0) + 88 >> 2] - d49;
      } while (0);
      HEAPF32[i18 + (i16 * 152 | 0) + 96 >> 2] = 0.0;
      if ((HEAP32[i31 + (i7 * 244 | 0) + 240 >> 2] | 0) == 0) {
       d48 = 0.0;
       d47 = 0.0;
       d46 = 0.0;
       d35 = 0.0;
       d44 = 0.0;
       d43 = 0.0;
      } else {
       d48 = +HEAPF32[i31 + (i7 * 244 | 0) + 208 >> 2];
       d47 = +HEAPF32[i31 + (i7 * 244 | 0) + 212 >> 2];
       d46 = +HEAPF32[i31 + (i7 * 244 | 0) + 216 >> 2];
       d35 = +HEAPF32[i31 + (i7 * 244 | 0) + 224 >> 2];
       d44 = +HEAPF32[i31 + (i7 * 244 | 0) + 228 >> 2];
       d43 = +HEAPF32[i31 + (i7 * 244 | 0) + 232 >> 2];
      }
      if ((HEAP32[i31 + (i8 * 244 | 0) + 240 >> 2] | 0) == 0) {
       d39 = 0.0;
       d45 = 0.0;
       d36 = 0.0;
       d40 = 0.0;
       d41 = 0.0;
       d42 = 0.0;
      } else {
       d39 = +HEAPF32[i31 + (i8 * 244 | 0) + 208 >> 2];
       d45 = +HEAPF32[i31 + (i8 * 244 | 0) + 212 >> 2];
       d36 = +HEAPF32[i31 + (i8 * 244 | 0) + 216 >> 2];
       d40 = +HEAPF32[i31 + (i8 * 244 | 0) + 224 >> 2];
       d41 = +HEAPF32[i31 + (i8 * 244 | 0) + 228 >> 2];
       d42 = +HEAPF32[i31 + (i8 * 244 | 0) + 232 >> 2];
      }
      d34 = d34 - ((d48 + +HEAPF32[i31 + (i7 * 244 | 0) + 176 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 16 >> 2] + (d47 + +HEAPF32[i31 + (i7 * 244 | 0) + 180 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 20 >> 2] + (d46 + +HEAPF32[i31 + (i7 * 244 | 0) + 184 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 24 >> 2] + ((d35 + +HEAPF32[i31 + (i7 * 244 | 0) + 192 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) >> 2] + (d44 + +HEAPF32[i31 + (i7 * 244 | 0) + 196 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 4 >> 2] + (d43 + +HEAPF32[i31 + (i7 * 244 | 0) + 200 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 8 >> 2]) + ((d39 + +HEAPF32[i31 + (i8 * 244 | 0) + 176 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 48 >> 2] + (d45 + +HEAPF32[i31 + (i8 * 244 | 0) + 180 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 52 >> 2] + (d36 + +HEAPF32[i31 + (i8 * 244 | 0) + 184 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 56 >> 2] + ((d40 + +HEAPF32[i31 + (i8 * 244 | 0) + 192 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 32 >> 2] + (d41 + +HEAPF32[i31 + (i8 * 244 | 0) + 196 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 36 >> 2] + (d42 + +HEAPF32[i31 + (i8 * 244 | 0) + 200 >> 2]) * +HEAPF32[i18 + (i16 * 152 | 0) + 40 >> 2])));
      i31 = (HEAP32[i14 + 44 >> 2] | 0) == 0;
      if (!i31 ? !(d32 > +HEAPF32[i14 + 48 >> 2]) : 0) i33 = i14 + 36 | 0; else i33 = i14 + 32 | 0;
      if (d32 > 0.0) {
       d35 = 0.0;
       d34 = d34 - d32 / +HEAPF32[i14 + 12 >> 2];
      } else d35 = -(d32 * +HEAPF32[i33 >> 2]) / +HEAPF32[i14 + 12 >> 2];
      d49 = +HEAPF32[i18 + (i16 * 152 | 0) + 108 >> 2];
      d35 = d35 * d49;
      d34 = d34 * d49;
      do if (i31) i3 = 69; else {
       if (d32 > +HEAPF32[i14 + 48 >> 2]) {
        i3 = 69;
        break;
       }
       HEAPF32[i18 + (i16 * 152 | 0) + 112 >> 2] = d34;
       HEAPF32[i18 + (i16 * 152 | 0) + 128 >> 2] = d35;
      } while (0);
      if ((i3 | 0) == 69) {
       i3 = 0;
       HEAPF32[i18 + (i16 * 152 | 0) + 112 >> 2] = d35 + d34;
       HEAPF32[i18 + (i16 * 152 | 0) + 128 >> 2] = 0.0;
      }
      HEAPF32[i18 + (i16 * 152 | 0) + 116 >> 2] = 0.0;
      HEAPF32[i18 + (i16 * 152 | 0) + 120 >> 2] = 0.0;
      HEAPF32[i18 + (i16 * 152 | 0) + 124 >> 2] = 1.0e10;
      HEAP32[i18 + (i16 * 152 | 0) + 140 >> 2] = HEAP32[i12 + 68 >> 2];
      if ((i30 | 0) == 0) {
       d32 = 0.0;
       d35 = 0.0;
       d34 = 0.0;
      } else {
       d32 = +HEAPF32[i30 + 328 >> 2];
       d35 = +HEAPF32[i30 + 332 >> 2];
       d34 = +HEAPF32[i30 + 336 >> 2];
      }
      if ((i29 | 0) == 0) {
       d40 = 0.0;
       d39 = 0.0;
       d36 = 0.0;
      } else {
       d40 = +HEAPF32[i29 + 328 >> 2];
       d39 = +HEAPF32[i29 + 332 >> 2];
       d36 = +HEAPF32[i29 + 336 >> 2];
      }
      d32 = d40 - d32;
      d35 = d39 - d35;
      d34 = d36 - d34;
      HEAPF32[i13 + 32 >> 2] = d32;
      HEAPF32[i13 + 36 >> 2] = d35;
      HEAPF32[i13 + 40 >> 2] = d34;
      HEAPF32[i13 + 44 >> 2] = 0.0;
      do if ((i28 | 0) > 0 ? +HEAPF32[i6 + (i15 * 184 | 0) + 92 >> 2] > 0.0 : 0) {
       i28 = i28 + -1 | 0;
       d39 = +Math_sqrt(+(d32 * d32 + d35 * d35 + d34 * d34));
       if (d39 > +HEAPF32[i14 + 80 >> 2]) {
        d36 = d32 * (1.0 / d39);
        HEAPF32[i13 + 32 >> 2] = d36;
        d32 = d35 * (1.0 / d39);
        HEAPF32[i13 + 36 >> 2] = d32;
        d34 = d34 * (1.0 / d39);
        HEAPF32[i13 + 40 >> 2] = d34;
        do if ((i1 | 0) != 0) {
         if ((HEAP32[i1 + 180 >> 2] & 2 | 0) == 0) break;
         d39 = +HEAPF32[i1 + 4 >> 2];
         d42 = +HEAPF32[i1 + 20 >> 2];
         d45 = +HEAPF32[i1 + 36 >> 2];
         d40 = +HEAPF32[i1 + 8 >> 2];
         d43 = +HEAPF32[i1 + 24 >> 2];
         d47 = +HEAPF32[i1 + 40 >> 2];
         d41 = +HEAPF32[i1 + 12 >> 2];
         d44 = +HEAPF32[i1 + 28 >> 2];
         d49 = +HEAPF32[i1 + 44 >> 2];
         d46 = (d39 * d36 + d42 * d32 + d34 * d45) * +HEAPF32[i1 + 164 >> 2];
         d48 = (d36 * d40 + d32 * d43 + d34 * d47) * +HEAPF32[i1 + 168 >> 2];
         d34 = (d36 * d41 + d32 * d44 + d34 * d49) * +HEAPF32[i1 + 172 >> 2];
         HEAPF32[i13 + 32 >> 2] = d39 * d46 + d40 * d48 + d41 * d34;
         HEAPF32[i13 + 36 >> 2] = d42 * d46 + d43 * d48 + d44 * d34;
         HEAPF32[i13 + 40 >> 2] = d45 * d46 + d47 * d48 + d49 * d34;
         HEAPF32[i13 + 44 >> 2] = 0.0;
         d36 = d39 * d46 + d40 * d48 + d41 * d34;
         d32 = d42 * d46 + d43 * d48 + d44 * d34;
         d34 = d45 * d46 + d47 * d48 + d49 * d34;
        } while (0);
        do if ((i11 | 0) != 0) {
         if ((HEAP32[i11 + 180 >> 2] & 2 | 0) == 0) break;
         d39 = +HEAPF32[i11 + 4 >> 2];
         d42 = +HEAPF32[i11 + 20 >> 2];
         d45 = +HEAPF32[i11 + 36 >> 2];
         d40 = +HEAPF32[i11 + 8 >> 2];
         d43 = +HEAPF32[i11 + 24 >> 2];
         d47 = +HEAPF32[i11 + 40 >> 2];
         d41 = +HEAPF32[i11 + 12 >> 2];
         d44 = +HEAPF32[i11 + 28 >> 2];
         d49 = +HEAPF32[i11 + 44 >> 2];
         d46 = (d39 * d36 + d42 * d32 + d45 * d34) * +HEAPF32[i11 + 164 >> 2];
         d48 = (d36 * d40 + d32 * d43 + d34 * d47) * +HEAPF32[i11 + 168 >> 2];
         d34 = (d36 * d41 + d32 * d44 + d34 * d49) * +HEAPF32[i11 + 172 >> 2];
         HEAPF32[i13 + 32 >> 2] = d39 * d46 + d40 * d48 + d41 * d34;
         HEAPF32[i13 + 36 >> 2] = d42 * d46 + d43 * d48 + d44 * d34;
         HEAPF32[i13 + 40 >> 2] = d45 * d46 + d47 * d48 + d49 * d34;
         HEAPF32[i13 + 44 >> 2] = 0.0;
         d36 = d39 * d46 + d40 * d48 + d41 * d34;
         d32 = d42 * d46 + d43 * d48 + d44 * d34;
         d34 = d45 * d46 + d47 * d48 + d49 * d34;
        } while (0);
        if (!(+Math_sqrt(+(d36 * d36 + d32 * d32 + d34 * d34)) > .001)) break;
        __ZN35btSequentialImpulseConstraintSolver28addRollingFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i13 + 32 | 0, i7, i8, i16, i17);
        break;
       }
       __ZN35btSequentialImpulseConstraintSolver28addRollingFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i21, i7, i8, i16, i17);
       d34 = +HEAPF32[i20 >> 2];
       if (+Math_abs(+d34) > .7071067690849304) {
        d35 = +HEAPF32[i22 >> 2];
        d49 = 1.0 / +Math_sqrt(+(d34 * d34 + d35 * d35));
        HEAPF32[i13 + 16 >> 2] = 0.0;
        HEAPF32[i13 + 20 >> 2] = -(d49 * d34);
        HEAPF32[i13 + 24 >> 2] = d49 * d35;
        HEAPF32[i13 >> 2] = (d34 * d34 + d35 * d35) * d49;
        d48 = +HEAPF32[i21 >> 2];
        HEAPF32[i13 + 4 >> 2] = -(d48 * d49 * d35);
        d32 = 0.0;
        d39 = -(d49 * d34);
        d40 = d49 * d35;
        d36 = (d34 * d34 + d35 * d35) * d49;
        d35 = -(d48 * d49 * d35);
        d34 = d48 * -(d49 * d34);
       } else {
        d47 = +HEAPF32[i21 >> 2];
        d48 = +HEAPF32[i22 >> 2];
        d49 = 1.0 / +Math_sqrt(+(d47 * d47 + d48 * d48));
        HEAPF32[i13 + 16 >> 2] = -(d48 * d49);
        HEAPF32[i13 + 20 >> 2] = d49 * d47;
        HEAPF32[i13 + 24 >> 2] = 0.0;
        HEAPF32[i13 >> 2] = -(d34 * d49 * d47);
        HEAPF32[i13 + 4 >> 2] = d34 * -(d48 * d49);
        d32 = -(d48 * d49);
        d39 = d49 * d47;
        d40 = 0.0;
        d36 = -(d34 * d49 * d47);
        d35 = d34 * -(d48 * d49);
        d34 = (d47 * d47 + d48 * d48) * d49;
       }
       HEAPF32[i13 + 8 >> 2] = d34;
       do if ((i1 | 0) != 0) {
        if ((HEAP32[i1 + 180 >> 2] & 2 | 0) == 0) break;
        d51 = +HEAPF32[i1 + 4 >> 2];
        d42 = +HEAPF32[i1 + 20 >> 2];
        d45 = +HEAPF32[i1 + 36 >> 2];
        d50 = +HEAPF32[i1 + 8 >> 2];
        d43 = +HEAPF32[i1 + 24 >> 2];
        d47 = +HEAPF32[i1 + 40 >> 2];
        d41 = +HEAPF32[i1 + 12 >> 2];
        d44 = +HEAPF32[i1 + 28 >> 2];
        d49 = +HEAPF32[i1 + 44 >> 2];
        d46 = (d51 * d32 + d42 * d39 + d45 * d40) * +HEAPF32[i1 + 164 >> 2];
        d48 = (d32 * d50 + d39 * d43 + d40 * d47) * +HEAPF32[i1 + 168 >> 2];
        d40 = (d32 * d41 + d39 * d44 + d40 * d49) * +HEAPF32[i1 + 172 >> 2];
        HEAPF32[i13 + 16 >> 2] = d51 * d46 + d50 * d48 + d41 * d40;
        HEAPF32[i13 + 20 >> 2] = d42 * d46 + d43 * d48 + d44 * d40;
        HEAPF32[i13 + 24 >> 2] = d45 * d46 + d47 * d48 + d49 * d40;
        HEAPF32[i13 + 28 >> 2] = 0.0;
        d32 = d51 * d46 + d50 * d48 + d41 * d40;
        d39 = d42 * d46 + d43 * d48 + d44 * d40;
        d40 = d45 * d46 + d47 * d48 + d49 * d40;
       } while (0);
       do if ((i11 | 0) != 0) {
        if ((HEAP32[i11 + 180 >> 2] & 2 | 0) == 0) break;
        d41 = +HEAPF32[i11 + 4 >> 2];
        d44 = +HEAPF32[i11 + 20 >> 2];
        d47 = +HEAPF32[i11 + 36 >> 2];
        d42 = +HEAPF32[i11 + 8 >> 2];
        d45 = +HEAPF32[i11 + 24 >> 2];
        d49 = +HEAPF32[i11 + 40 >> 2];
        d43 = +HEAPF32[i11 + 12 >> 2];
        d46 = +HEAPF32[i11 + 28 >> 2];
        d51 = +HEAPF32[i11 + 44 >> 2];
        d48 = (d41 * d32 + d44 * d39 + d47 * d40) * +HEAPF32[i11 + 164 >> 2];
        d50 = (d32 * d42 + d39 * d45 + d40 * d49) * +HEAPF32[i11 + 168 >> 2];
        d40 = (d32 * d43 + d39 * d46 + d40 * d51) * +HEAPF32[i11 + 172 >> 2];
        HEAPF32[i13 + 16 >> 2] = d41 * d48 + d42 * d50 + d43 * d40;
        HEAPF32[i13 + 20 >> 2] = d44 * d48 + d45 * d50 + d46 * d40;
        HEAPF32[i13 + 24 >> 2] = d47 * d48 + d49 * d50 + d51 * d40;
        HEAPF32[i13 + 28 >> 2] = 0.0;
        d32 = d41 * d48 + d42 * d50 + d43 * d40;
        d39 = d44 * d48 + d45 * d50 + d46 * d40;
        d40 = d47 * d48 + d49 * d50 + d51 * d40;
       } while (0);
       do if ((i1 | 0) != 0) {
        if ((HEAP32[i1 + 180 >> 2] & 2 | 0) == 0) break;
        d41 = +HEAPF32[i1 + 4 >> 2];
        d44 = +HEAPF32[i1 + 20 >> 2];
        d47 = +HEAPF32[i1 + 36 >> 2];
        d42 = +HEAPF32[i1 + 8 >> 2];
        d45 = +HEAPF32[i1 + 24 >> 2];
        d49 = +HEAPF32[i1 + 40 >> 2];
        d43 = +HEAPF32[i1 + 12 >> 2];
        d46 = +HEAPF32[i1 + 28 >> 2];
        d51 = +HEAPF32[i1 + 44 >> 2];
        d48 = (d41 * d36 + d44 * d35 + d47 * d34) * +HEAPF32[i1 + 164 >> 2];
        d50 = (d36 * d42 + d35 * d45 + d34 * d49) * +HEAPF32[i1 + 168 >> 2];
        d34 = (d36 * d43 + d35 * d46 + d34 * d51) * +HEAPF32[i1 + 172 >> 2];
        HEAPF32[i13 >> 2] = d41 * d48 + d42 * d50 + d43 * d34;
        HEAPF32[i13 + 4 >> 2] = d44 * d48 + d45 * d50 + d46 * d34;
        HEAPF32[i13 + 8 >> 2] = d47 * d48 + d49 * d50 + d51 * d34;
        HEAPF32[i13 + 12 >> 2] = 0.0;
        d36 = d41 * d48 + d42 * d50 + d43 * d34;
        d35 = d44 * d48 + d45 * d50 + d46 * d34;
        d34 = d47 * d48 + d49 * d50 + d51 * d34;
       } while (0);
       do if ((i11 | 0) != 0) {
        if ((HEAP32[i11 + 180 >> 2] & 2 | 0) == 0) break;
        d41 = +HEAPF32[i11 + 4 >> 2];
        d44 = +HEAPF32[i11 + 20 >> 2];
        d47 = +HEAPF32[i11 + 36 >> 2];
        d42 = +HEAPF32[i11 + 8 >> 2];
        d45 = +HEAPF32[i11 + 24 >> 2];
        d49 = +HEAPF32[i11 + 40 >> 2];
        d43 = +HEAPF32[i11 + 12 >> 2];
        d46 = +HEAPF32[i11 + 28 >> 2];
        d51 = +HEAPF32[i11 + 44 >> 2];
        d48 = (d41 * d36 + d44 * d35 + d47 * d34) * +HEAPF32[i11 + 164 >> 2];
        d50 = (d36 * d42 + d35 * d45 + d34 * d49) * +HEAPF32[i11 + 168 >> 2];
        d34 = (d36 * d43 + d35 * d46 + d34 * d51) * +HEAPF32[i11 + 172 >> 2];
        HEAPF32[i13 >> 2] = d41 * d48 + d42 * d50 + d43 * d34;
        HEAPF32[i13 + 4 >> 2] = d44 * d48 + d45 * d50 + d46 * d34;
        HEAPF32[i13 + 8 >> 2] = d47 * d48 + d49 * d50 + d51 * d34;
        HEAPF32[i13 + 12 >> 2] = 0.0;
        d36 = d41 * d48 + d42 * d50 + d43 * d34;
        d35 = d44 * d48 + d45 * d50 + d46 * d34;
        d34 = d47 * d48 + d49 * d50 + d51 * d34;
       } while (0);
       if (+Math_sqrt(+(d32 * d32 + d39 * d39 + d40 * d40)) > .001) __ZN35btSequentialImpulseConstraintSolver28addRollingFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i13 + 16 | 0, i7, i8, i16, i17);
       if (!(+Math_sqrt(+(d36 * d36 + d35 * d35 + d34 * d34)) > .001)) break;
       __ZN35btSequentialImpulseConstraintSolver28addRollingFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i13, i7, i8, i16, i17);
      } while (0);
      do if ((HEAP32[i14 + 64 >> 2] & 32 | 0) == 0) i3 = 106; else {
       if ((HEAP8[i6 + (i15 * 184 | 0) + 120 >> 0] | 0) == 0) {
        i3 = 106;
        break;
       }
       __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i6 + (i15 * 184 | 0) + 156 | 0, i7, i8, i16, i17, i13 + 64 | 0, i13 + 48 | 0, 1.0, +HEAPF32[i6 + (i15 * 184 | 0) + 136 >> 2], +HEAPF32[i6 + (i15 * 184 | 0) + 144 >> 2]);
       if ((HEAP32[i14 + 64 >> 2] & 16 | 0) == 0) break;
       __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i6 + (i15 * 184 | 0) + 172 | 0, i7, i8, i16, i17, i13 + 64 | 0, i13 + 48 | 0, 1.0, +HEAPF32[i6 + (i15 * 184 | 0) + 140 >> 2], +HEAPF32[i6 + (i15 * 184 | 0) + 148 >> 2]);
      } while (0);
      do if ((i3 | 0) == 106) {
       i3 = 0;
       i29 = i6 + (i15 * 184 | 0) + 156 | 0;
       d32 = +HEAPF32[i21 >> 2];
       d34 = +HEAPF32[i22 >> 2];
       d35 = +HEAPF32[i20 >> 2];
       d39 = d19 - (d25 * d19 + d23 * d24 + d26 * d27) * d32;
       d36 = d23 - (d25 * d19 + d23 * d24 + d26 * d27) * d34;
       d19 = d26 - (d25 * d19 + d23 * d24 + d26 * d27) * d35;
       HEAPF32[i6 + (i15 * 184 | 0) + 156 >> 2] = d39;
       i31 = i6 + (i15 * 184 | 0) + 160 | 0;
       HEAPF32[i31 >> 2] = d36;
       i30 = i6 + (i15 * 184 | 0) + 164 | 0;
       HEAPF32[i30 >> 2] = d19;
       HEAPF32[i6 + (i15 * 184 | 0) + 168 >> 2] = 0.0;
       if ((HEAP32[i14 + 64 >> 2] & 64 | 0) == 0 ? d39 * d39 + d36 * d36 + d19 * d19 > 1.1920928955078125e-7 : 0) {
        d51 = 1.0 / +Math_sqrt(+(d39 * d39 + d36 * d36 + d19 * d19));
        HEAPF32[i29 >> 2] = d39 * d51;
        HEAPF32[i31 >> 2] = d51 * d36;
        HEAPF32[i30 >> 2] = d51 * d19;
        __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i1, i29);
        __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i11, i29);
        __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i29, i7, i8, i16, i17, i13 + 64 | 0, i13 + 48 | 0, 1.0, 0.0, 0.0);
        if ((HEAP32[i14 + 64 >> 2] & 16 | 0) == 0) break;
        i38 = i6 + (i15 * 184 | 0) + 172 | 0;
        d49 = +HEAPF32[i31 >> 2];
        d46 = +HEAPF32[i20 >> 2];
        d45 = +HEAPF32[i30 >> 2];
        d47 = +HEAPF32[i22 >> 2];
        d50 = +HEAPF32[i21 >> 2];
        d48 = +HEAPF32[i29 >> 2];
        HEAPF32[i6 + (i15 * 184 | 0) + 172 >> 2] = d49 * d46 - d45 * d47;
        HEAPF32[i6 + (i15 * 184 | 0) + 184 >> 2] = 0.0;
        d51 = 1.0 / +Math_sqrt(+((d49 * d46 - d45 * d47) * (d49 * d46 - d45 * d47) + (d45 * d50 - d46 * d48) * (d45 * d50 - d46 * d48) + (d47 * d48 - d49 * d50) * (d47 * d48 - d49 * d50)));
        HEAPF32[i38 >> 2] = (d49 * d46 - d45 * d47) * d51;
        HEAPF32[i6 + (i15 * 184 | 0) + 176 >> 2] = (d45 * d50 - d46 * d48) * d51;
        HEAPF32[i6 + (i15 * 184 | 0) + 180 >> 2] = (d47 * d48 - d49 * d50) * d51;
        __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i1, i38);
        __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i11, i38);
        __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i38, i7, i8, i16, i17, i13 + 64 | 0, i13 + 48 | 0, 1.0, 0.0, 0.0);
        break;
       }
       i20 = i6 + (i15 * 184 | 0) + 172 | 0;
       if (+Math_abs(+d35) > .7071067690849304) {
        d51 = 1.0 / +Math_sqrt(+(d35 * d35 + d34 * d34));
        HEAPF32[i29 >> 2] = 0.0;
        HEAPF32[i31 >> 2] = -(d51 * d35);
        HEAPF32[i30 >> 2] = d51 * d34;
        HEAPF32[i20 >> 2] = (d35 * d35 + d34 * d34) * d51;
        HEAPF32[i6 + (i15 * 184 | 0) + 176 >> 2] = -(d32 * d51 * d34);
        HEAPF32[i6 + (i15 * 184 | 0) + 180 >> 2] = d32 * -(d51 * d35);
       } else {
        d51 = 1.0 / +Math_sqrt(+(d32 * d32 + d34 * d34));
        HEAPF32[i29 >> 2] = -(d34 * d51);
        HEAPF32[i31 >> 2] = d51 * d32;
        HEAPF32[i30 >> 2] = 0.0;
        HEAPF32[i20 >> 2] = -(d35 * d51 * d32);
        HEAPF32[i6 + (i15 * 184 | 0) + 176 >> 2] = d35 * -(d34 * d51);
        HEAPF32[i6 + (i15 * 184 | 0) + 180 >> 2] = (d32 * d32 + d34 * d34) * d51;
       }
       __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i1, i29);
       __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i11, i29);
       __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i29, i7, i8, i16, i17, i13 + 64 | 0, i13 + 48 | 0, 1.0, 0.0, 0.0);
       i21 = HEAP32[i14 + 64 >> 2] | 0;
       if ((i21 & 16 | 0) != 0) {
        __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i1, i20);
        __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i11, i20);
        __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i12, i20, i7, i8, i16, i17, i13 + 64 | 0, i13 + 48 | 0, 1.0, 0.0, 0.0);
        i21 = HEAP32[i14 + 64 >> 2] | 0;
       }
       if ((i21 & 80 | 0) != 80) break;
       HEAP8[i6 + (i15 * 184 | 0) + 120 >> 0] = 1;
      } while (0);
      i17 = HEAP32[i12 + 16 >> 2] | 0;
      i21 = HEAP32[i17 + (i7 * 244 | 0) + 240 >> 2] | 0;
      i20 = HEAP32[i17 + (i8 * 244 | 0) + 240 >> 2] | 0;
      i18 = HEAP32[i18 + (i16 * 152 | 0) + 140 >> 2] | 0;
      i16 = HEAP32[i12 + 76 >> 2] | 0;
      i22 = HEAP32[i14 + 64 >> 2] | 0;
      do if ((i22 & 4 | 0) == 0) HEAPF32[i16 + (i18 * 152 | 0) + 100 >> 2] = 0.0; else {
       d19 = +HEAPF32[i6 + (i15 * 184 | 0) + 128 >> 2] * +HEAPF32[i14 + 60 >> 2];
       HEAPF32[i16 + (i18 * 152 | 0) + 100 >> 2] = d19;
       if ((i21 | 0) != 0) {
        d49 = +HEAPF32[i21 + 344 >> 2];
        d51 = d19 * d49 * +HEAPF32[i16 + (i18 * 152 | 0) + 20 >> 2] * +HEAPF32[i21 + 352 >> 2] * +HEAPF32[i17 + (i7 * 244 | 0) + 116 >> 2];
        d50 = d19 * d49 * +HEAPF32[i16 + (i18 * 152 | 0) + 24 >> 2] * +HEAPF32[i21 + 356 >> 2] * +HEAPF32[i17 + (i7 * 244 | 0) + 120 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 64 >> 2] = +HEAPF32[i17 + (i7 * 244 | 0) + 112 >> 2] * d19 * d49 * +HEAPF32[i16 + (i18 * 152 | 0) + 16 >> 2] * +HEAPF32[i21 + 348 >> 2] + +HEAPF32[i17 + (i7 * 244 | 0) + 64 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 68 >> 2] = d51 + +HEAPF32[i17 + (i7 * 244 | 0) + 68 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 72 >> 2] = d50 + +HEAPF32[i17 + (i7 * 244 | 0) + 72 >> 2];
        d50 = d19 * +HEAPF32[i17 + (i7 * 244 | 0) + 100 >> 2] * +HEAPF32[i16 + (i18 * 152 | 0) + 68 >> 2];
        d51 = d19 * +HEAPF32[i17 + (i7 * 244 | 0) + 104 >> 2] * +HEAPF32[i16 + (i18 * 152 | 0) + 72 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 80 >> 2] = d19 * +HEAPF32[i17 + (i7 * 244 | 0) + 96 >> 2] * +HEAPF32[i16 + (i18 * 152 | 0) + 64 >> 2] + +HEAPF32[i17 + (i7 * 244 | 0) + 80 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 84 >> 2] = d50 + +HEAPF32[i17 + (i7 * 244 | 0) + 84 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 88 >> 2] = d51 + +HEAPF32[i17 + (i7 * 244 | 0) + 88 >> 2];
       }
       if ((i20 | 0) == 0) break;
       d23 = +HEAPF32[i20 + 344 >> 2];
       d19 = +HEAPF32[i16 + (i18 * 152 | 0) + 100 >> 2];
       if ((HEAP32[i17 + (i8 * 244 | 0) + 240 >> 2] | 0) == 0) break;
       d51 = +HEAPF32[i16 + (i18 * 152 | 0) + 88 >> 2];
       d50 = +HEAPF32[i16 + (i18 * 152 | 0) + 84 >> 2];
       d49 = +HEAPF32[i16 + (i18 * 152 | 0) + 80 >> 2];
       d47 = d19 * d23 * +HEAPF32[i16 + (i18 * 152 | 0) + 52 >> 2] * +HEAPF32[i20 + 352 >> 2] * +HEAPF32[i17 + (i8 * 244 | 0) + 116 >> 2];
       d48 = d19 * d23 * +HEAPF32[i16 + (i18 * 152 | 0) + 56 >> 2] * +HEAPF32[i20 + 356 >> 2] * +HEAPF32[i17 + (i8 * 244 | 0) + 120 >> 2];
       HEAPF32[i17 + (i8 * 244 | 0) + 64 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 112 >> 2] * d19 * d23 * +HEAPF32[i16 + (i18 * 152 | 0) + 48 >> 2] * +HEAPF32[i20 + 348 >> 2] + +HEAPF32[i17 + (i8 * 244 | 0) + 64 >> 2];
       HEAPF32[i17 + (i8 * 244 | 0) + 68 >> 2] = d47 + +HEAPF32[i17 + (i8 * 244 | 0) + 68 >> 2];
       HEAPF32[i17 + (i8 * 244 | 0) + 72 >> 2] = d48 + +HEAPF32[i17 + (i8 * 244 | 0) + 72 >> 2];
       d50 = d50 * +HEAPF32[i17 + (i8 * 244 | 0) + 100 >> 2] * -d19;
       d51 = d51 * +HEAPF32[i17 + (i8 * 244 | 0) + 104 >> 2] * -d19;
       HEAPF32[i17 + (i8 * 244 | 0) + 80 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 80 >> 2] - d49 * +HEAPF32[i17 + (i8 * 244 | 0) + 96 >> 2] * -d19;
       HEAPF32[i17 + (i8 * 244 | 0) + 84 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 84 >> 2] - d50;
       HEAPF32[i17 + (i8 * 244 | 0) + 88 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 88 >> 2] - d51;
      } while (0);
      do if ((i22 & 16 | 0) != 0) {
       if ((i22 & 4 | 0) == 0) {
        HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 100 >> 2] = 0.0;
        break;
       }
       d19 = +HEAPF32[i6 + (i15 * 184 | 0) + 132 >> 2] * +HEAPF32[i14 + 60 >> 2];
       HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 100 >> 2] = d19;
       do if ((i21 | 0) != 0) {
        d23 = +HEAPF32[i21 + 344 >> 2];
        if ((HEAP32[i17 + (i7 * 244 | 0) + 240 >> 2] | 0) == 0) break;
        d51 = d19 * d23 * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 20 >> 2] * +HEAPF32[i17 + (i7 * 244 | 0) + 116 >> 2];
        d50 = d19 * d23 * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 24 >> 2] * +HEAPF32[i17 + (i7 * 244 | 0) + 120 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 64 >> 2] = +HEAPF32[i17 + (i7 * 244 | 0) + 112 >> 2] * d19 * d23 * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 16 >> 2] + +HEAPF32[i17 + (i7 * 244 | 0) + 64 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 68 >> 2] = d51 + +HEAPF32[i17 + (i7 * 244 | 0) + 68 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 72 >> 2] = d50 + +HEAPF32[i17 + (i7 * 244 | 0) + 72 >> 2];
        d50 = d19 * +HEAPF32[i17 + (i7 * 244 | 0) + 100 >> 2] * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 68 >> 2];
        d51 = d19 * +HEAPF32[i17 + (i7 * 244 | 0) + 104 >> 2] * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 72 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 80 >> 2] = d19 * +HEAPF32[i17 + (i7 * 244 | 0) + 96 >> 2] * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 64 >> 2] + +HEAPF32[i17 + (i7 * 244 | 0) + 80 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 84 >> 2] = d50 + +HEAPF32[i17 + (i7 * 244 | 0) + 84 >> 2];
        HEAPF32[i17 + (i7 * 244 | 0) + 88 >> 2] = d51 + +HEAPF32[i17 + (i7 * 244 | 0) + 88 >> 2];
       } while (0);
       if ((i20 | 0) == 0) break;
       d23 = +HEAPF32[i20 + 344 >> 2];
       d19 = +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 100 >> 2];
       if ((HEAP32[i17 + (i8 * 244 | 0) + 240 >> 2] | 0) == 0) break;
       d51 = +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 88 >> 2];
       d50 = +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 84 >> 2];
       d49 = +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 80 >> 2];
       d47 = d19 * d23 * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 52 >> 2] * +HEAPF32[i17 + (i8 * 244 | 0) + 116 >> 2];
       d48 = d19 * d23 * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 56 >> 2] * +HEAPF32[i17 + (i8 * 244 | 0) + 120 >> 2];
       HEAPF32[i17 + (i8 * 244 | 0) + 64 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 112 >> 2] * d19 * d23 * +HEAPF32[i16 + ((i18 + 1 | 0) * 152 | 0) + 48 >> 2] + +HEAPF32[i17 + (i8 * 244 | 0) + 64 >> 2];
       HEAPF32[i17 + (i8 * 244 | 0) + 68 >> 2] = d47 + +HEAPF32[i17 + (i8 * 244 | 0) + 68 >> 2];
       HEAPF32[i17 + (i8 * 244 | 0) + 72 >> 2] = d48 + +HEAPF32[i17 + (i8 * 244 | 0) + 72 >> 2];
       d50 = d50 * +HEAPF32[i17 + (i8 * 244 | 0) + 100 >> 2] * -d19;
       d51 = d51 * +HEAPF32[i17 + (i8 * 244 | 0) + 104 >> 2] * -d19;
       HEAPF32[i17 + (i8 * 244 | 0) + 80 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 80 >> 2] - d49 * +HEAPF32[i17 + (i8 * 244 | 0) + 96 >> 2] * -d19;
       HEAPF32[i17 + (i8 * 244 | 0) + 84 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 84 >> 2] - d50;
       HEAPF32[i17 + (i8 * 244 | 0) + 88 >> 2] = +HEAPF32[i17 + (i8 * 244 | 0) + 88 >> 2] - d51;
      } while (0);
      i16 = HEAP32[i6 + 748 >> 2] | 0;
     }
     i15 = i15 + 1 | 0;
    } while ((i15 | 0) < (i16 | 0));
   }
  } while (0);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i2 | 0));
 STACKTOP = i13;
 return;
}
function __ZN21btConeTwistConstraint23solveConstraintObsoleteER12btSolverBodyS1_f(i3, i4, i2, d5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 d5 = +d5;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 if ((HEAP8[i3 + 527 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i37 = HEAP32[i3 + 28 >> 2] | 0;
 d31 = +HEAPF32[i3 + 348 >> 2];
 d27 = +HEAPF32[i3 + 352 >> 2];
 d28 = +HEAPF32[i3 + 356 >> 2];
 d25 = +HEAPF32[i37 + 52 >> 2];
 d26 = d31 * +HEAPF32[i37 + 4 >> 2] + d27 * +HEAPF32[i37 + 8 >> 2] + d28 * +HEAPF32[i37 + 12 >> 2] + d25;
 d22 = +HEAPF32[i37 + 56 >> 2];
 d24 = d31 * +HEAPF32[i37 + 20 >> 2] + d27 * +HEAPF32[i37 + 24 >> 2] + d28 * +HEAPF32[i37 + 28 >> 2] + d22;
 d12 = +HEAPF32[i37 + 60 >> 2];
 d28 = d31 * +HEAPF32[i37 + 36 >> 2] + d27 * +HEAPF32[i37 + 40 >> 2] + d28 * +HEAPF32[i37 + 44 >> 2] + d12;
 i37 = HEAP32[i3 + 32 >> 2] | 0;
 d27 = +HEAPF32[i3 + 412 >> 2];
 d31 = +HEAPF32[i3 + 416 >> 2];
 d21 = +HEAPF32[i3 + 420 >> 2];
 d19 = +HEAPF32[i37 + 52 >> 2];
 d18 = d27 * +HEAPF32[i37 + 4 >> 2] + d31 * +HEAPF32[i37 + 8 >> 2] + d21 * +HEAPF32[i37 + 12 >> 2] + d19;
 d29 = +HEAPF32[i37 + 56 >> 2];
 d30 = d27 * +HEAPF32[i37 + 20 >> 2] + d31 * +HEAPF32[i37 + 24 >> 2] + d21 * +HEAPF32[i37 + 28 >> 2] + d29;
 d17 = +HEAPF32[i37 + 60 >> 2];
 d21 = d27 * +HEAPF32[i37 + 36 >> 2] + d31 * +HEAPF32[i37 + 40 >> 2] + d21 * +HEAPF32[i37 + 44 >> 2] + d17;
 if ((HEAP8[i3 + 524 >> 0] | 0) == 0) {
  d15 = +HEAPF32[i4 + 192 >> 2] + +HEAPF32[i4 + 80 >> 2];
  d16 = +HEAPF32[i4 + 196 >> 2] + +HEAPF32[i4 + 84 >> 2];
  d14 = +HEAPF32[i4 + 200 >> 2] + +HEAPF32[i4 + 88 >> 2];
  d31 = +HEAPF32[i2 + 192 >> 2] + +HEAPF32[i2 + 80 >> 2];
  d27 = +HEAPF32[i2 + 196 >> 2] + +HEAPF32[i2 + 84 >> 2];
  d23 = +HEAPF32[i2 + 200 >> 2] + +HEAPF32[i2 + 88 >> 2];
  d20 = +HEAPF32[i4 + 176 >> 2] + +HEAPF32[i4 + 64 >> 2] + ((d28 - d12) * d16 - (d24 - d22) * d14) - (+HEAPF32[i2 + 176 >> 2] + +HEAPF32[i2 + 64 >> 2] + ((d21 - d17) * d27 - (d30 - d29) * d23));
  d23 = +HEAPF32[i4 + 180 >> 2] + +HEAPF32[i4 + 68 >> 2] + ((d26 - d25) * d14 - (d28 - d12) * d15) - (+HEAPF32[i2 + 180 >> 2] + +HEAPF32[i2 + 68 >> 2] + ((d18 - d19) * d23 - (d21 - d17) * d31));
  d27 = +HEAPF32[i4 + 184 >> 2] + +HEAPF32[i4 + 72 >> 2] + ((d24 - d22) * d15 - (d26 - d25) * d16) - (+HEAPF32[i2 + 184 >> 2] + +HEAPF32[i2 + 72 >> 2] + ((d30 - d29) * d31 - (d18 - d19) * d27));
  i10 = HEAP32[i4 + 240 >> 2] | 0;
  i6 = 0;
  do {
   d13 = 1.0 / +HEAPF32[i3 + (i6 * 84 | 0) + 128 >> 2];
   i9 = i3 + (i6 * 84 | 0) + 48 | 0;
   d15 = +HEAPF32[i9 >> 2];
   i7 = i3 + (i6 * 84 | 0) + 52 | 0;
   d14 = +HEAPF32[i7 >> 2];
   i8 = i3 + (i6 * 84 | 0) + 56 | 0;
   d16 = +HEAPF32[i8 >> 2];
   d16 = d13 * (((d26 - d18) * d15 + (d24 - d30) * d14 + (d28 - d21) * d16) * -.30000001192092896 / d5) - d13 * (d20 * d15 + d23 * d14 + d27 * d16);
   HEAPF32[i3 + 36 >> 2] = +HEAPF32[i3 + 36 >> 2] + d16;
   d14 = +HEAPF32[i8 >> 2];
   d15 = +HEAPF32[i7 >> 2];
   d13 = +HEAPF32[i9 >> 2];
   i11 = HEAP32[i3 + 28 >> 2] | 0;
   d31 = +HEAPF32[i11 + 344 >> 2];
   if ((i10 | 0) != 0) {
    d40 = ((d28 - d12) * d13 - (d26 - d25) * d14) * +HEAPF32[i11 + 300 >> 2] + ((d24 - d22) * d14 - (d28 - d12) * d15) * +HEAPF32[i11 + 296 >> 2] + ((d26 - d25) * d15 - (d24 - d22) * d13) * +HEAPF32[i11 + 304 >> 2];
    d38 = ((d28 - d12) * d13 - (d26 - d25) * d14) * +HEAPF32[i11 + 284 >> 2] + ((d24 - d22) * d14 - (d28 - d12) * d15) * +HEAPF32[i11 + 280 >> 2] + ((d26 - d25) * d15 - (d24 - d22) * d13) * +HEAPF32[i11 + 288 >> 2];
    d39 = ((d28 - d12) * d13 - (d26 - d25) * d14) * +HEAPF32[i11 + 268 >> 2] + ((d24 - d22) * d14 - (d28 - d12) * d15) * +HEAPF32[i11 + 264 >> 2] + ((d26 - d25) * d15 - (d24 - d22) * d13) * +HEAPF32[i11 + 272 >> 2];
    d42 = d16 * d15 * d31 * +HEAPF32[i4 + 116 >> 2];
    d41 = d16 * d14 * d31 * +HEAPF32[i4 + 120 >> 2];
    HEAPF32[i4 + 64 >> 2] = d16 * d13 * d31 * +HEAPF32[i4 + 112 >> 2] + +HEAPF32[i4 + 64 >> 2];
    HEAPF32[i4 + 68 >> 2] = d42 + +HEAPF32[i4 + 68 >> 2];
    HEAPF32[i4 + 72 >> 2] = d41 + +HEAPF32[i4 + 72 >> 2];
    d38 = d38 * d16 * +HEAPF32[i4 + 100 >> 2];
    d31 = d40 * d16 * +HEAPF32[i4 + 104 >> 2];
    HEAPF32[i4 + 80 >> 2] = d39 * d16 * +HEAPF32[i4 + 96 >> 2] + +HEAPF32[i4 + 80 >> 2];
    HEAPF32[i4 + 84 >> 2] = d38 + +HEAPF32[i4 + 84 >> 2];
    HEAPF32[i4 + 88 >> 2] = d31 + +HEAPF32[i4 + 88 >> 2];
   }
   i11 = HEAP32[i3 + 32 >> 2] | 0;
   d31 = +HEAPF32[i11 + 344 >> 2];
   if ((HEAP32[i2 + 240 >> 2] | 0) != 0) {
    d42 = ((d21 - d17) * d13 - (d18 - d19) * d14) * +HEAPF32[i11 + 300 >> 2] + ((d30 - d29) * d14 - (d21 - d17) * d15) * +HEAPF32[i11 + 296 >> 2] + ((d18 - d19) * d15 - (d30 - d29) * d13) * +HEAPF32[i11 + 304 >> 2];
    d41 = ((d21 - d17) * d13 - (d18 - d19) * d14) * +HEAPF32[i11 + 284 >> 2] + ((d30 - d29) * d14 - (d21 - d17) * d15) * +HEAPF32[i11 + 280 >> 2] + ((d18 - d19) * d15 - (d30 - d29) * d13) * +HEAPF32[i11 + 288 >> 2];
    d40 = ((d21 - d17) * d13 - (d18 - d19) * d14) * +HEAPF32[i11 + 268 >> 2] + ((d30 - d29) * d14 - (d21 - d17) * d15) * +HEAPF32[i11 + 264 >> 2] + ((d18 - d19) * d15 - (d30 - d29) * d13) * +HEAPF32[i11 + 272 >> 2];
    d38 = d31 * +HEAPF32[i7 >> 2] * -d16 * +HEAPF32[i2 + 116 >> 2];
    d39 = d31 * +HEAPF32[i8 >> 2] * -d16 * +HEAPF32[i2 + 120 >> 2];
    HEAPF32[i2 + 64 >> 2] = +HEAPF32[i2 + 112 >> 2] * d31 * +HEAPF32[i9 >> 2] * -d16 + +HEAPF32[i2 + 64 >> 2];
    HEAPF32[i2 + 68 >> 2] = d38 + +HEAPF32[i2 + 68 >> 2];
    HEAPF32[i2 + 72 >> 2] = d39 + +HEAPF32[i2 + 72 >> 2];
    d41 = d41 * +HEAPF32[i2 + 100 >> 2] * -d16;
    d42 = d42 * +HEAPF32[i2 + 104 >> 2] * -d16;
    HEAPF32[i2 + 80 >> 2] = d40 * +HEAPF32[i2 + 96 >> 2] * -d16 + +HEAPF32[i2 + 80 >> 2];
    HEAPF32[i2 + 84 >> 2] = d41 + +HEAPF32[i2 + 84 >> 2];
    HEAPF32[i2 + 88 >> 2] = d42 + +HEAPF32[i2 + 88 >> 2];
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != 3);
 }
 do if ((HEAP8[i3 + 552 >> 0] | 0) == 0) {
  d13 = +HEAPF32[i3 + 440 >> 2];
  if (!(d13 > 1.1920928955078125e-7)) {
   i10 = i4 + 80 | 0;
   i36 = i4 + 196 | 0;
   i9 = i4 + 84 | 0;
   i35 = i4 + 200 | 0;
   i11 = i4 + 88 | 0;
   i34 = i2 + 192 | 0;
   i7 = i2 + 80 | 0;
   i33 = i2 + 196 | 0;
   i8 = i2 + 84 | 0;
   i32 = i2 + 200 | 0;
   i6 = i2 + 88 | 0;
   i37 = i4 + 192 | 0;
   break;
  }
  d22 = +HEAPF32[i2 + 192 >> 2] + +HEAPF32[i2 + 80 >> 2] - (+HEAPF32[i4 + 192 >> 2] + +HEAPF32[i4 + 80 >> 2]);
  d24 = +HEAPF32[i2 + 196 >> 2] + +HEAPF32[i2 + 84 >> 2] - (+HEAPF32[i4 + 196 >> 2] + +HEAPF32[i4 + 84 >> 2]);
  d23 = +HEAPF32[i2 + 200 >> 2] + +HEAPF32[i2 + 88 >> 2] - (+HEAPF32[i4 + 200 >> 2] + +HEAPF32[i4 + 88 >> 2]);
  if (d22 * d22 + d24 * d24 + d23 * d23 > 1.1920928955078125e-7) {
   d42 = 1.0 / +Math_sqrt(+(d22 * d22 + d24 * d24 + d23 * d23));
   i6 = HEAP32[i3 + 28 >> 2] | 0;
   d12 = +HEAPF32[i6 + 264 >> 2];
   d20 = +HEAPF32[i6 + 280 >> 2];
   d17 = +HEAPF32[i6 + 296 >> 2];
   d15 = +HEAPF32[i6 + 268 >> 2];
   d21 = +HEAPF32[i6 + 284 >> 2];
   d18 = +HEAPF32[i6 + 300 >> 2];
   d14 = +HEAPF32[i6 + 272 >> 2];
   d19 = +HEAPF32[i6 + 288 >> 2];
   d16 = +HEAPF32[i6 + 304 >> 2];
   i6 = HEAP32[i3 + 32 >> 2] | 0;
   d42 = d13 * (1.0 / (d22 * d42 * (d22 * d42 * d12 + d24 * d42 * d20 + d23 * d42 * d17) + d24 * d42 * (d22 * d42 * d15 + d24 * d42 * d21 + d23 * d42 * d18) + d23 * d42 * (d22 * d42 * d14 + d24 * d42 * d19 + d23 * d42 * d16) + (d22 * d42 * (d22 * d42 * +HEAPF32[i6 + 264 >> 2] + d24 * d42 * +HEAPF32[i6 + 280 >> 2] + d23 * d42 * +HEAPF32[i6 + 296 >> 2]) + d24 * d42 * (d22 * d42 * +HEAPF32[i6 + 268 >> 2] + d24 * d42 * +HEAPF32[i6 + 284 >> 2] + d23 * d42 * +HEAPF32[i6 + 300 >> 2]) + d23 * d42 * (d22 * d42 * +HEAPF32[i6 + 272 >> 2] + d24 * d42 * +HEAPF32[i6 + 288 >> 2] + d23 * d42 * +HEAPF32[i6 + 304 >> 2]))));
   d13 = +Math_sqrt(+(d23 * d42 * d23 * d42 + (d22 * d42 * d22 * d42 + d24 * d42 * d24 * d42)));
   d22 = 1.0 / d13 * d22 * d42;
   d24 = 1.0 / d13 * d24 * d42;
   d23 = 1.0 / d13 * d23 * d42;
   if ((HEAP32[i4 + 240 >> 2] | 0) != 0) {
    d42 = d13 * 0.0 * +HEAPF32[i4 + 116 >> 2];
    d41 = d13 * 0.0 * +HEAPF32[i4 + 120 >> 2];
    HEAPF32[i4 + 64 >> 2] = d13 * 0.0 * +HEAPF32[i4 + 112 >> 2] + +HEAPF32[i4 + 64 >> 2];
    HEAPF32[i4 + 68 >> 2] = d42 + +HEAPF32[i4 + 68 >> 2];
    HEAPF32[i4 + 72 >> 2] = d41 + +HEAPF32[i4 + 72 >> 2];
    d41 = (d24 * d21 + d22 * d20 + d23 * d19) * d13 * +HEAPF32[i4 + 100 >> 2];
    d42 = (d24 * d18 + d22 * d17 + d23 * d16) * d13 * +HEAPF32[i4 + 104 >> 2];
    HEAPF32[i4 + 80 >> 2] = (d24 * d15 + d22 * d12 + d23 * d14) * d13 * +HEAPF32[i4 + 96 >> 2] + +HEAPF32[i4 + 80 >> 2];
    HEAPF32[i4 + 84 >> 2] = d41 + +HEAPF32[i4 + 84 >> 2];
    HEAPF32[i4 + 88 >> 2] = d42 + +HEAPF32[i4 + 88 >> 2];
    i6 = HEAP32[i3 + 32 >> 2] | 0;
   }
   if ((HEAP32[i2 + 240 >> 2] | 0) != 0) {
    d42 = d24 * +HEAPF32[i6 + 300 >> 2] + d22 * +HEAPF32[i6 + 296 >> 2] + d23 * +HEAPF32[i6 + 304 >> 2];
    d41 = d24 * +HEAPF32[i6 + 284 >> 2] + d22 * +HEAPF32[i6 + 280 >> 2] + d23 * +HEAPF32[i6 + 288 >> 2];
    d40 = d24 * +HEAPF32[i6 + 268 >> 2] + d22 * +HEAPF32[i6 + 264 >> 2] + d23 * +HEAPF32[i6 + 272 >> 2];
    d38 = d13 * -0.0 * +HEAPF32[i2 + 116 >> 2];
    d39 = d13 * -0.0 * +HEAPF32[i2 + 120 >> 2];
    HEAPF32[i2 + 64 >> 2] = d13 * -0.0 * +HEAPF32[i2 + 112 >> 2] + +HEAPF32[i2 + 64 >> 2];
    HEAPF32[i2 + 68 >> 2] = d38 + +HEAPF32[i2 + 68 >> 2];
    HEAPF32[i2 + 72 >> 2] = d39 + +HEAPF32[i2 + 72 >> 2];
    d41 = d41 * +HEAPF32[i2 + 100 >> 2] * -d13;
    d42 = d42 * +HEAPF32[i2 + 104 >> 2] * -d13;
    HEAPF32[i2 + 80 >> 2] = d40 * +HEAPF32[i2 + 96 >> 2] * -d13 + +HEAPF32[i2 + 80 >> 2];
    HEAPF32[i2 + 84 >> 2] = d41 + +HEAPF32[i2 + 84 >> 2];
    HEAPF32[i2 + 88 >> 2] = d42 + +HEAPF32[i2 + 88 >> 2];
    i10 = i4 + 80 | 0;
    i36 = i4 + 196 | 0;
    i9 = i4 + 84 | 0;
    i35 = i4 + 200 | 0;
    i11 = i4 + 88 | 0;
    i34 = i2 + 192 | 0;
    i7 = i2 + 80 | 0;
    i33 = i2 + 196 | 0;
    i8 = i2 + 84 | 0;
    i32 = i2 + 200 | 0;
    i6 = i2 + 88 | 0;
    i37 = i4 + 192 | 0;
   } else {
    i10 = i4 + 80 | 0;
    i36 = i4 + 196 | 0;
    i9 = i4 + 84 | 0;
    i35 = i4 + 200 | 0;
    i11 = i4 + 88 | 0;
    i34 = i2 + 192 | 0;
    i7 = i2 + 80 | 0;
    i33 = i2 + 196 | 0;
    i8 = i2 + 84 | 0;
    i32 = i2 + 200 | 0;
    i6 = i2 + 88 | 0;
    i37 = i4 + 192 | 0;
   }
  } else {
   i10 = i4 + 80 | 0;
   i36 = i4 + 196 | 0;
   i9 = i4 + 84 | 0;
   i35 = i4 + 200 | 0;
   i11 = i4 + 88 | 0;
   i34 = i2 + 192 | 0;
   i7 = i2 + 80 | 0;
   i33 = i2 + 196 | 0;
   i8 = i2 + 84 | 0;
   i32 = i2 + 200 | 0;
   i6 = i2 + 88 | 0;
   i37 = i4 + 192 | 0;
  }
 } else {
  i36 = HEAP32[i3 + 28 >> 2] | 0;
  HEAP32[i1 + 352 >> 2] = HEAP32[i36 + 4 >> 2];
  HEAP32[i1 + 356 >> 2] = HEAP32[i36 + 8 >> 2];
  HEAP32[i1 + 360 >> 2] = HEAP32[i36 + 12 >> 2];
  HEAP32[i1 + 364 >> 2] = HEAP32[i36 + 16 >> 2];
  HEAP32[i1 + 368 >> 2] = HEAP32[i36 + 20 >> 2];
  HEAP32[i1 + 372 >> 2] = HEAP32[i36 + 24 >> 2];
  HEAP32[i1 + 376 >> 2] = HEAP32[i36 + 28 >> 2];
  HEAP32[i1 + 380 >> 2] = HEAP32[i36 + 32 >> 2];
  HEAP32[i1 + 384 >> 2] = HEAP32[i36 + 36 >> 2];
  HEAP32[i1 + 388 >> 2] = HEAP32[i36 + 40 >> 2];
  HEAP32[i1 + 392 >> 2] = HEAP32[i36 + 44 >> 2];
  HEAP32[i1 + 396 >> 2] = HEAP32[i36 + 48 >> 2];
  HEAP32[i1 + 400 >> 2] = HEAP32[i36 + 52 >> 2];
  HEAP32[i1 + 404 >> 2] = HEAP32[i36 + 56 >> 2];
  HEAP32[i1 + 408 >> 2] = HEAP32[i36 + 60 >> 2];
  HEAP32[i1 + 412 >> 2] = HEAP32[i36 + 64 >> 2];
  i36 = HEAP32[i3 + 32 >> 2] | 0;
  HEAP32[i1 + 288 >> 2] = HEAP32[i36 + 4 >> 2];
  HEAP32[i1 + 292 >> 2] = HEAP32[i36 + 8 >> 2];
  HEAP32[i1 + 296 >> 2] = HEAP32[i36 + 12 >> 2];
  HEAP32[i1 + 300 >> 2] = HEAP32[i36 + 16 >> 2];
  HEAP32[i1 + 304 >> 2] = HEAP32[i36 + 20 >> 2];
  HEAP32[i1 + 308 >> 2] = HEAP32[i36 + 24 >> 2];
  HEAP32[i1 + 312 >> 2] = HEAP32[i36 + 28 >> 2];
  HEAP32[i1 + 316 >> 2] = HEAP32[i36 + 32 >> 2];
  HEAP32[i1 + 320 >> 2] = HEAP32[i36 + 36 >> 2];
  HEAP32[i1 + 324 >> 2] = HEAP32[i36 + 40 >> 2];
  HEAP32[i1 + 328 >> 2] = HEAP32[i36 + 44 >> 2];
  HEAP32[i1 + 332 >> 2] = HEAP32[i36 + 48 >> 2];
  HEAP32[i1 + 336 >> 2] = HEAP32[i36 + 52 >> 2];
  HEAP32[i1 + 340 >> 2] = HEAP32[i36 + 56 >> 2];
  HEAP32[i1 + 344 >> 2] = HEAP32[i36 + 60 >> 2];
  HEAP32[i1 + 348 >> 2] = HEAP32[i36 + 64 >> 2];
  d40 = +HEAPF32[i4 + 196 >> 2] + +HEAPF32[i4 + 84 >> 2];
  d25 = +HEAPF32[i4 + 200 >> 2] + +HEAPF32[i4 + 88 >> 2];
  HEAPF32[i1 + 272 >> 2] = +HEAPF32[i4 + 192 >> 2] + +HEAPF32[i4 + 80 >> 2];
  HEAPF32[i1 + 276 >> 2] = d40;
  HEAPF32[i1 + 280 >> 2] = d25;
  HEAPF32[i1 + 284 >> 2] = 0.0;
  d25 = +HEAPF32[i2 + 196 >> 2] + +HEAPF32[i2 + 84 >> 2];
  d40 = +HEAPF32[i2 + 200 >> 2] + +HEAPF32[i2 + 88 >> 2];
  HEAPF32[i1 + 256 >> 2] = +HEAPF32[i2 + 192 >> 2] + +HEAPF32[i2 + 80 >> 2];
  HEAPF32[i1 + 260 >> 2] = d25;
  HEAPF32[i1 + 264 >> 2] = d40;
  HEAPF32[i1 + 268 >> 2] = 0.0;
  HEAPF32[i1 + 192 >> 2] = 1.0;
  i36 = i1 + 196 | 0;
  HEAP32[i36 + 0 >> 2] = 0;
  HEAP32[i36 + 4 >> 2] = 0;
  HEAP32[i36 + 8 >> 2] = 0;
  HEAP32[i36 + 12 >> 2] = 0;
  HEAPF32[i1 + 212 >> 2] = 1.0;
  i37 = i1 + 216 | 0;
  HEAP32[i37 + 0 >> 2] = 0;
  HEAP32[i37 + 4 >> 2] = 0;
  HEAP32[i37 + 8 >> 2] = 0;
  HEAP32[i37 + 12 >> 2] = 0;
  HEAPF32[i1 + 232 >> 2] = 1.0;
  i34 = i1 + 236 | 0;
  HEAP32[i34 + 0 >> 2] = 0;
  HEAP32[i34 + 4 >> 2] = 0;
  HEAP32[i34 + 8 >> 2] = 0;
  HEAP32[i34 + 12 >> 2] = 0;
  HEAP32[i34 + 16 >> 2] = 0;
  __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i1 + 352 | 0, 0.0, 0.0, 0.0, i1 + 272 | 0, d5, i1 + 192 | 0);
  HEAPF32[i1 + 128 >> 2] = 1.0;
  i34 = i1 + 132 | 0;
  HEAP32[i34 + 0 >> 2] = 0;
  HEAP32[i34 + 4 >> 2] = 0;
  HEAP32[i34 + 8 >> 2] = 0;
  HEAP32[i34 + 12 >> 2] = 0;
  HEAPF32[i1 + 148 >> 2] = 1.0;
  i35 = i1 + 152 | 0;
  HEAP32[i35 + 0 >> 2] = 0;
  HEAP32[i35 + 4 >> 2] = 0;
  HEAP32[i35 + 8 >> 2] = 0;
  HEAP32[i35 + 12 >> 2] = 0;
  HEAPF32[i1 + 168 >> 2] = 1.0;
  i33 = i1 + 172 | 0;
  HEAP32[i33 + 0 >> 2] = 0;
  HEAP32[i33 + 4 >> 2] = 0;
  HEAP32[i33 + 8 >> 2] = 0;
  HEAP32[i33 + 12 >> 2] = 0;
  HEAP32[i33 + 16 >> 2] = 0;
  __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i1 + 288 | 0, 0.0, 0.0, 0.0, i1 + 256 | 0, d5, i1 + 128 | 0);
  d40 = +HEAPF32[i3 + 556 >> 2];
  d25 = +HEAPF32[i3 + 560 >> 2];
  d41 = +HEAPF32[i3 + 564 >> 2];
  d26 = +HEAPF32[i3 + 568 >> 2];
  d29 = d40 * (2.0 / (d40 * d40 + d25 * d25 + d41 * d41 + d26 * d26));
  d14 = d25 * (2.0 / (d40 * d40 + d25 * d25 + d41 * d41 + d26 * d26));
  d30 = d41 * (2.0 / (d40 * d40 + d25 * d25 + d41 * d41 + d26 * d26));
  d44 = +HEAPF32[i3 + 364 >> 2];
  d43 = +HEAPF32[i3 + 368 >> 2];
  d47 = +HEAPF32[i3 + 372 >> 2];
  d19 = (d40 * d30 - d26 * d14) * d47 + (d43 * (d40 * d14 + d26 * d30) + d44 * (1.0 - (d25 * d14 + d41 * d30)));
  d20 = d47 * (d25 * d30 + d26 * d29) + (d44 * (d40 * d14 - d26 * d30) + d43 * (1.0 - (d40 * d29 + d41 * d30)));
  d21 = d44 * (d40 * d30 + d26 * d14) + d43 * (d25 * d30 - d26 * d29) + d47 * (1.0 - (d40 * d29 + d25 * d14));
  d18 = +HEAPF32[i3 + 380 >> 2];
  d28 = +HEAPF32[i3 + 384 >> 2];
  d12 = +HEAPF32[i3 + 388 >> 2];
  d22 = (1.0 - (d25 * d14 + d41 * d30)) * d18 + (d40 * d14 + d26 * d30) * d28 + (d40 * d30 - d26 * d14) * d12;
  d23 = (d40 * d14 - d26 * d30) * d18 + (1.0 - (d40 * d29 + d41 * d30)) * d28 + (d25 * d30 + d26 * d29) * d12;
  d24 = (d40 * d30 + d26 * d14) * d18 + (d25 * d30 - d26 * d29) * d28 + (1.0 - (d40 * d29 + d25 * d14)) * d12;
  d38 = +HEAPF32[i3 + 396 >> 2];
  d13 = +HEAPF32[i3 + 400 >> 2];
  d15 = +HEAPF32[i3 + 404 >> 2];
  d39 = (1.0 - (d25 * d14 + d41 * d30)) * d38 + (d40 * d14 + d26 * d30) * d13 + (d40 * d30 - d26 * d14) * d15;
  d41 = (d40 * d14 - d26 * d30) * d38 + (1.0 - (d40 * d29 + d41 * d30)) * d13 + (d25 * d30 + d26 * d29) * d15;
  d14 = (d40 * d30 + d26 * d14) * d38 + (d25 * d30 - d26 * d29) * d13 + (1.0 - (d40 * d29 + d25 * d14)) * d15;
  d25 = +HEAPF32[i3 + 300 >> 2];
  d29 = +HEAPF32[i3 + 316 >> 2];
  d40 = +HEAPF32[i3 + 332 >> 2];
  d26 = +HEAPF32[i3 + 304 >> 2];
  d30 = +HEAPF32[i3 + 320 >> 2];
  d42 = +HEAPF32[i3 + 336 >> 2];
  d27 = +HEAPF32[i3 + 308 >> 2];
  d31 = +HEAPF32[i3 + 324 >> 2];
  d16 = +HEAPF32[i3 + 340 >> 2];
  d17 = -+HEAPF32[i3 + 348 >> 2];
  d50 = -+HEAPF32[i3 + 352 >> 2];
  d46 = -+HEAPF32[i3 + 356 >> 2];
  d47 = d44 * 0.0 + d43 * 0.0 + d47 * 0.0 + +HEAPF32[i3 + 412 >> 2] + (d21 * (d27 * d17 + d31 * d50 + d16 * d46) + (d19 * (d25 * d17 + d29 * d50 + d40 * d46) + d20 * (d26 * d17 + d30 * d50 + d42 * d46)));
  d12 = d18 * 0.0 + d28 * 0.0 + d12 * 0.0 + +HEAPF32[i3 + 416 >> 2] + (d24 * (d27 * d17 + d31 * d50 + d16 * d46) + (d22 * (d25 * d17 + d29 * d50 + d40 * d46) + d23 * (d26 * d17 + d30 * d50 + d42 * d46)));
  d46 = d38 * 0.0 + d13 * 0.0 + d15 * 0.0 + +HEAPF32[i3 + 420 >> 2] + (d14 * (d27 * d17 + d31 * d50 + d16 * d46) + (d39 * (d25 * d17 + d29 * d50 + d40 * d46) + d41 * (d26 * d17 + d30 * d50 + d42 * d46)));
  d50 = +HEAPF32[i1 + 128 >> 2];
  d17 = +HEAPF32[i34 >> 2];
  d15 = +HEAPF32[i1 + 136 >> 2];
  d13 = +HEAPF32[i1 + 144 >> 2];
  d38 = +HEAPF32[i1 + 148 >> 2];
  d28 = +HEAPF32[i35 >> 2];
  d18 = +HEAPF32[i1 + 160 >> 2];
  d43 = +HEAPF32[i1 + 164 >> 2];
  d44 = +HEAPF32[i1 + 168 >> 2];
  d45 = d15 * d46 + (d50 * d47 + d17 * d12) + +HEAPF32[i1 + 176 >> 2];
  d48 = d46 * d28 + (d13 * d47 + d38 * d12) + +HEAPF32[i1 + 180 >> 2];
  d49 = d47 * d18 + d12 * d43 + d46 * d44 + +HEAPF32[i1 + 184 >> 2];
  HEAPF32[i1 + 64 >> 2] = (d19 * d25 + d20 * d26 + d21 * d27) * d50 + (d22 * d25 + d23 * d26 + d24 * d27) * d17 + (d39 * d25 + d41 * d26 + d14 * d27) * d15;
  HEAPF32[i1 + 68 >> 2] = (d19 * d29 + d20 * d30 + d21 * d31) * d50 + (d22 * d29 + d23 * d30 + d24 * d31) * d17 + (d39 * d29 + d41 * d30 + d14 * d31) * d15;
  HEAPF32[i1 + 72 >> 2] = (d19 * d40 + d20 * d42 + d21 * d16) * d50 + (d22 * d40 + d23 * d42 + d24 * d16) * d17 + (d39 * d40 + d41 * d42 + d14 * d16) * d15;
  HEAPF32[i1 + 76 >> 2] = 0.0;
  HEAPF32[i1 + 80 >> 2] = (d19 * d25 + d20 * d26 + d21 * d27) * d13 + (d22 * d25 + d23 * d26 + d24 * d27) * d38 + (d39 * d25 + d41 * d26 + d14 * d27) * d28;
  HEAPF32[i1 + 84 >> 2] = (d19 * d29 + d20 * d30 + d21 * d31) * d13 + (d22 * d29 + d23 * d30 + d24 * d31) * d38 + (d39 * d29 + d41 * d30 + d14 * d31) * d28;
  HEAPF32[i1 + 88 >> 2] = (d19 * d40 + d20 * d42 + d21 * d16) * d13 + (d22 * d40 + d23 * d42 + d24 * d16) * d38 + (d39 * d40 + d41 * d42 + d14 * d16) * d28;
  HEAPF32[i1 + 92 >> 2] = 0.0;
  HEAPF32[i1 + 96 >> 2] = (d19 * d25 + d20 * d26 + d21 * d27) * d18 + (d22 * d25 + d23 * d26 + d24 * d27) * d43 + (d39 * d25 + d41 * d26 + d14 * d27) * d44;
  HEAPF32[i1 + 100 >> 2] = (d19 * d29 + d20 * d30 + d21 * d31) * d18 + (d22 * d29 + d23 * d30 + d24 * d31) * d43 + (d39 * d29 + d41 * d30 + d14 * d31) * d44;
  HEAPF32[i1 + 104 >> 2] = (d19 * d40 + d20 * d42 + d21 * d16) * d18 + (d22 * d40 + d23 * d42 + d24 * d16) * d43 + (d39 * d40 + d41 * d42 + d14 * d16) * d44;
  HEAPF32[i1 + 108 >> 2] = 0.0;
  HEAPF32[i1 + 112 >> 2] = d45;
  HEAPF32[i1 + 116 >> 2] = d48;
  HEAPF32[i1 + 120 >> 2] = d49;
  HEAPF32[i1 + 124 >> 2] = 0.0;
  d49 = (d39 * d25 + d41 * d26 + d14 * d27) * -d46 + ((d19 * d25 + d20 * d26 + d21 * d27) * -d47 + (d22 * d25 + d23 * d26 + d24 * d27) * -d12);
  d48 = (d39 * d29 + d41 * d30 + d14 * d31) * -d46 + ((d19 * d29 + d20 * d30 + d21 * d31) * -d47 + (d22 * d29 + d23 * d30 + d24 * d31) * -d12);
  d12 = (d39 * d40 + d41 * d42 + d14 * d16) * -d46 + ((d19 * d40 + d20 * d42 + d21 * d16) * -d47 + (d22 * d40 + d23 * d42 + d24 * d16) * -d12);
  d47 = +HEAPF32[i1 + 192 >> 2];
  d46 = +HEAPF32[i36 >> 2];
  d45 = +HEAPF32[i1 + 200 >> 2];
  d44 = +HEAPF32[i1 + 208 >> 2];
  d43 = +HEAPF32[i1 + 212 >> 2];
  d18 = +HEAPF32[i37 >> 2];
  d28 = +HEAPF32[i1 + 224 >> 2];
  d38 = +HEAPF32[i1 + 228 >> 2];
  d13 = +HEAPF32[i1 + 232 >> 2];
  d15 = d49 * d47 + d48 * d46 + d12 * d45 + +HEAPF32[i1 + 240 >> 2];
  d17 = d49 * d44 + d48 * d43 + d12 * d18 + +HEAPF32[i1 + 244 >> 2];
  d12 = d49 * d28 + d48 * d38 + d12 * d13 + +HEAPF32[i1 + 248 >> 2];
  HEAPF32[i1 >> 2] = (d19 * d25 + d20 * d26 + d21 * d27) * d47 + (d19 * d29 + d20 * d30 + d21 * d31) * d46 + (d19 * d40 + d20 * d42 + d21 * d16) * d45;
  HEAPF32[i1 + 4 >> 2] = (d22 * d25 + d23 * d26 + d24 * d27) * d47 + (d22 * d29 + d23 * d30 + d24 * d31) * d46 + (d22 * d40 + d23 * d42 + d24 * d16) * d45;
  HEAPF32[i1 + 8 >> 2] = (d39 * d25 + d41 * d26 + d14 * d27) * d47 + (d39 * d29 + d41 * d30 + d14 * d31) * d46 + (d39 * d40 + d41 * d42 + d14 * d16) * d45;
  HEAPF32[i1 + 12 >> 2] = 0.0;
  HEAPF32[i1 + 16 >> 2] = (d19 * d25 + d20 * d26 + d21 * d27) * d44 + (d19 * d29 + d20 * d30 + d21 * d31) * d43 + (d19 * d40 + d20 * d42 + d21 * d16) * d18;
  HEAPF32[i1 + 20 >> 2] = (d22 * d25 + d23 * d26 + d24 * d27) * d44 + (d22 * d29 + d23 * d30 + d24 * d31) * d43 + (d22 * d40 + d23 * d42 + d24 * d16) * d18;
  HEAPF32[i1 + 24 >> 2] = (d39 * d25 + d41 * d26 + d14 * d27) * d44 + (d39 * d29 + d41 * d30 + d14 * d31) * d43 + (d39 * d40 + d41 * d42 + d14 * d16) * d18;
  HEAPF32[i1 + 28 >> 2] = 0.0;
  HEAPF32[i1 + 32 >> 2] = (d19 * d25 + d20 * d26 + d21 * d27) * d28 + (d19 * d29 + d20 * d30 + d21 * d31) * d38 + (d19 * d40 + d20 * d42 + d21 * d16) * d13;
  HEAPF32[i1 + 36 >> 2] = (d22 * d25 + d23 * d26 + d24 * d27) * d28 + (d22 * d29 + d23 * d30 + d24 * d31) * d38 + (d22 * d40 + d23 * d42 + d24 * d16) * d13;
  HEAPF32[i1 + 40 >> 2] = (d39 * d25 + d41 * d26 + d14 * d27) * d28 + (d39 * d29 + d41 * d30 + d14 * d31) * d38 + (d39 * d40 + d41 * d42 + d14 * d16) * d13;
  HEAPF32[i1 + 44 >> 2] = 0.0;
  HEAPF32[i1 + 48 >> 2] = d15;
  HEAPF32[i1 + 52 >> 2] = d17;
  HEAPF32[i1 + 56 >> 2] = d12;
  HEAPF32[i1 + 60 >> 2] = 0.0;
  __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i1 + 352 | 0, i1 + 64 | 0, i1 + 424 | 0, i1 + 416 | 0);
  d12 = +HEAPF32[i1 + 416 >> 2];
  d17 = 1.0 / d5 * +HEAPF32[i1 + 424 >> 2] * d12;
  d15 = 1.0 / d5 * d12 * +HEAPF32[i1 + 428 >> 2];
  d12 = 1.0 / d5 * d12 * +HEAPF32[i1 + 432 >> 2];
  __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i1 + 288 | 0, i1, i1 + 424 | 0, i1 + 416 | 0);
  d13 = +HEAPF32[i1 + 416 >> 2];
  d17 = d17 - +HEAPF32[i1 + 272 >> 2];
  d15 = d15 - +HEAPF32[i1 + 276 >> 2];
  d12 = d12 - +HEAPF32[i1 + 280 >> 2];
  d16 = 1.0 / d5 * +HEAPF32[i1 + 424 >> 2] * d13 - +HEAPF32[i1 + 256 >> 2];
  d14 = 1.0 / d5 * d13 * +HEAPF32[i1 + 428 >> 2] - +HEAPF32[i1 + 260 >> 2];
  d13 = 1.0 / d5 * d13 * +HEAPF32[i1 + 432 >> 2] - +HEAPF32[i1 + 264 >> 2];
  if (d17 * d17 + d15 * d15 + d12 * d12 > 1.1920928955078125e-7) {
   d20 = 1.0 / +Math_sqrt(+(d17 * d17 + d15 * d15 + d12 * d12));
   i37 = HEAP32[i3 + 28 >> 2] | 0;
   d23 = d17 * d20 * (d17 * d20 * +HEAPF32[i37 + 264 >> 2] + d15 * d20 * +HEAPF32[i37 + 280 >> 2] + d12 * d20 * +HEAPF32[i37 + 296 >> 2]) + d15 * d20 * (d17 * d20 * +HEAPF32[i37 + 268 >> 2] + d15 * d20 * +HEAPF32[i37 + 284 >> 2] + d12 * d20 * +HEAPF32[i37 + 300 >> 2]) + d12 * d20 * (d17 * d20 * +HEAPF32[i37 + 272 >> 2] + d15 * d20 * +HEAPF32[i37 + 288 >> 2] + d12 * d20 * +HEAPF32[i37 + 304 >> 2]);
   d18 = d17 * d20;
   d21 = d15 * d20;
   d20 = d12 * d20;
  } else {
   d23 = 0.0;
   d18 = 0.0;
   d21 = 0.0;
   d20 = 0.0;
  }
  if (d16 * d16 + d14 * d14 + d13 * d13 > 1.1920928955078125e-7) {
   d19 = 1.0 / +Math_sqrt(+(d16 * d16 + d14 * d14 + d13 * d13));
   i37 = HEAP32[i3 + 32 >> 2] | 0;
   d22 = d16 * d19 * (d16 * d19 * +HEAPF32[i37 + 264 >> 2] + d14 * d19 * +HEAPF32[i37 + 280 >> 2] + d13 * d19 * +HEAPF32[i37 + 296 >> 2]) + d14 * d19 * (d16 * d19 * +HEAPF32[i37 + 268 >> 2] + d14 * d19 * +HEAPF32[i37 + 284 >> 2] + d13 * d19 * +HEAPF32[i37 + 300 >> 2]) + d13 * d19 * (d16 * d19 * +HEAPF32[i37 + 272 >> 2] + d14 * d19 * +HEAPF32[i37 + 288 >> 2] + d13 * d19 * +HEAPF32[i37 + 304 >> 2]);
   d25 = d16 * d19;
   d24 = d14 * d19;
   d19 = d13 * d19;
  } else {
   d22 = 0.0;
   d25 = 0.0;
   d24 = 0.0;
   d19 = 0.0;
  }
  d18 = d18 * d23 + d25 * d22;
  d21 = d21 * d23 + d24 * d22;
  d20 = d20 * d23 + d19 * d22;
  if (d20 * d20 + (d18 * d18 + d21 * d21) > 1.1920928955078125e-7) {
   d50 = 1.0 / +Math_sqrt(+(d20 * d20 + (d18 * d18 + d21 * d21)));
   i7 = HEAP32[i3 + 28 >> 2] | 0;
   d19 = d18 * d50 * (d18 * d50 * +HEAPF32[i7 + 264 >> 2] + d21 * d50 * +HEAPF32[i7 + 280 >> 2] + d20 * d50 * +HEAPF32[i7 + 296 >> 2]) + d21 * d50 * (d18 * d50 * +HEAPF32[i7 + 268 >> 2] + d21 * d50 * +HEAPF32[i7 + 284 >> 2] + d20 * d50 * +HEAPF32[i7 + 300 >> 2]) + d20 * d50 * (d18 * d50 * +HEAPF32[i7 + 272 >> 2] + d21 * d50 * +HEAPF32[i7 + 288 >> 2] + d20 * d50 * +HEAPF32[i7 + 304 >> 2]);
   i6 = HEAP32[i3 + 32 >> 2] | 0;
   d18 = d18 * d50 * (d18 * d50 * +HEAPF32[i6 + 264 >> 2] + d21 * d50 * +HEAPF32[i6 + 280 >> 2] + d20 * d50 * +HEAPF32[i6 + 296 >> 2]) + d21 * d50 * (d18 * d50 * +HEAPF32[i6 + 268 >> 2] + d21 * d50 * +HEAPF32[i6 + 284 >> 2] + d20 * d50 * +HEAPF32[i6 + 300 >> 2]) + d20 * d50 * (d18 * d50 * +HEAPF32[i6 + 272 >> 2] + d21 * d50 * +HEAPF32[i6 + 288 >> 2] + d20 * d50 * +HEAPF32[i6 + 304 >> 2]);
   d16 = 1.0 / ((d19 + d18) * (d19 + d18)) * (d17 * d19 - d16 * d18);
   d14 = 1.0 / ((d19 + d18) * (d19 + d18)) * (d15 * d19 - d14 * d18);
   d12 = 1.0 / ((d19 + d18) * (d19 + d18)) * (d12 * d19 - d13 * d18);
   d18 = +HEAPF32[i3 + 572 >> 2];
   if (d18 >= 0.0) {
    if ((HEAP8[i3 + 553 >> 0] | 0) != 0) d18 = d18 / d19;
    d15 = +HEAPF32[i3 + 576 >> 2];
    d13 = +HEAPF32[i3 + 580 >> 2];
    d17 = +HEAPF32[i3 + 584 >> 2];
    d19 = +Math_sqrt(+((d16 + d15) * (d16 + d15) + (d14 + d13) * (d14 + d13) + (d12 + d17) * (d12 + d17)));
    if (d19 > d18) {
     d16 = d18 * (d16 + d15) * (1.0 / d19) - d15;
     d14 = d18 * (d14 + d13) * (1.0 / d19) - d13;
     d12 = d18 * (d12 + d17) * (1.0 / d19) - d17;
    }
    HEAPF32[i3 + 576 >> 2] = d16 + d15;
    HEAPF32[i3 + 580 >> 2] = d14 + d13;
    HEAPF32[i3 + 584 >> 2] = d12 + d17;
   }
   d13 = +Math_sqrt(+(d12 * d12 + (d14 * d14 + d16 * d16)));
   d15 = d16 * (1.0 / d13);
   d14 = d14 * (1.0 / d13);
   d12 = d12 * (1.0 / d13);
   if ((HEAP32[i4 + 240 >> 2] | 0) != 0) {
    d50 = d14 * +HEAPF32[i7 + 300 >> 2] + d15 * +HEAPF32[i7 + 296 >> 2] + d12 * +HEAPF32[i7 + 304 >> 2];
    d49 = d14 * +HEAPF32[i7 + 284 >> 2] + d15 * +HEAPF32[i7 + 280 >> 2] + d12 * +HEAPF32[i7 + 288 >> 2];
    d48 = d14 * +HEAPF32[i7 + 268 >> 2] + d15 * +HEAPF32[i7 + 264 >> 2] + d12 * +HEAPF32[i7 + 272 >> 2];
    d46 = d13 * 0.0 * +HEAPF32[i4 + 116 >> 2];
    d47 = d13 * 0.0 * +HEAPF32[i4 + 120 >> 2];
    HEAPF32[i4 + 64 >> 2] = d13 * 0.0 * +HEAPF32[i4 + 112 >> 2] + +HEAPF32[i4 + 64 >> 2];
    HEAPF32[i4 + 68 >> 2] = d46 + +HEAPF32[i4 + 68 >> 2];
    HEAPF32[i4 + 72 >> 2] = d47 + +HEAPF32[i4 + 72 >> 2];
    d49 = d49 * d13 * +HEAPF32[i4 + 100 >> 2];
    d50 = d50 * d13 * +HEAPF32[i4 + 104 >> 2];
    HEAPF32[i4 + 80 >> 2] = d48 * d13 * +HEAPF32[i4 + 96 >> 2] + +HEAPF32[i4 + 80 >> 2];
    HEAPF32[i4 + 84 >> 2] = d49 + +HEAPF32[i4 + 84 >> 2];
    HEAPF32[i4 + 88 >> 2] = d50 + +HEAPF32[i4 + 88 >> 2];
    i6 = HEAP32[i3 + 32 >> 2] | 0;
   }
   if ((HEAP32[i2 + 240 >> 2] | 0) != 0) {
    d50 = d14 * +HEAPF32[i6 + 300 >> 2] + d15 * +HEAPF32[i6 + 296 >> 2] + d12 * +HEAPF32[i6 + 304 >> 2];
    d49 = d14 * +HEAPF32[i6 + 284 >> 2] + d15 * +HEAPF32[i6 + 280 >> 2] + d12 * +HEAPF32[i6 + 288 >> 2];
    d48 = d14 * +HEAPF32[i6 + 268 >> 2] + d15 * +HEAPF32[i6 + 264 >> 2] + d12 * +HEAPF32[i6 + 272 >> 2];
    d46 = d13 * -0.0 * +HEAPF32[i2 + 116 >> 2];
    d47 = d13 * -0.0 * +HEAPF32[i2 + 120 >> 2];
    HEAPF32[i2 + 64 >> 2] = d13 * -0.0 * +HEAPF32[i2 + 112 >> 2] + +HEAPF32[i2 + 64 >> 2];
    HEAPF32[i2 + 68 >> 2] = d46 + +HEAPF32[i2 + 68 >> 2];
    HEAPF32[i2 + 72 >> 2] = d47 + +HEAPF32[i2 + 72 >> 2];
    d49 = d49 * +HEAPF32[i2 + 100 >> 2] * -d13;
    d50 = d50 * +HEAPF32[i2 + 104 >> 2] * -d13;
    HEAPF32[i2 + 80 >> 2] = d48 * +HEAPF32[i2 + 96 >> 2] * -d13 + +HEAPF32[i2 + 80 >> 2];
    HEAPF32[i2 + 84 >> 2] = d49 + +HEAPF32[i2 + 84 >> 2];
    HEAPF32[i2 + 88 >> 2] = d50 + +HEAPF32[i2 + 88 >> 2];
    i10 = i4 + 80 | 0;
    i36 = i4 + 196 | 0;
    i9 = i4 + 84 | 0;
    i35 = i4 + 200 | 0;
    i11 = i4 + 88 | 0;
    i34 = i2 + 192 | 0;
    i7 = i2 + 80 | 0;
    i33 = i2 + 196 | 0;
    i8 = i2 + 84 | 0;
    i32 = i2 + 200 | 0;
    i6 = i2 + 88 | 0;
    i37 = i4 + 192 | 0;
   } else {
    i10 = i4 + 80 | 0;
    i36 = i4 + 196 | 0;
    i9 = i4 + 84 | 0;
    i35 = i4 + 200 | 0;
    i11 = i4 + 88 | 0;
    i34 = i2 + 192 | 0;
    i7 = i2 + 80 | 0;
    i33 = i2 + 196 | 0;
    i8 = i2 + 84 | 0;
    i32 = i2 + 200 | 0;
    i6 = i2 + 88 | 0;
    i37 = i4 + 192 | 0;
   }
  } else {
   i10 = i4 + 80 | 0;
   i36 = i4 + 196 | 0;
   i9 = i4 + 84 | 0;
   i35 = i4 + 200 | 0;
   i11 = i4 + 88 | 0;
   i34 = i2 + 192 | 0;
   i7 = i2 + 80 | 0;
   i33 = i2 + 196 | 0;
   i8 = i2 + 84 | 0;
   i32 = i2 + 200 | 0;
   i6 = i2 + 88 | 0;
   i37 = i4 + 192 | 0;
  }
 } while (0);
 d12 = +HEAPF32[i37 >> 2] + +HEAPF32[i10 >> 2];
 d13 = +HEAPF32[i36 >> 2] + +HEAPF32[i9 >> 2];
 d14 = +HEAPF32[i35 >> 2] + +HEAPF32[i11 >> 2];
 d15 = +HEAPF32[i34 >> 2] + +HEAPF32[i7 >> 2];
 d16 = +HEAPF32[i33 >> 2] + +HEAPF32[i8 >> 2];
 d17 = +HEAPF32[i32 >> 2] + +HEAPF32[i6 >> 2];
 if ((HEAP8[i3 + 526 >> 0] | 0) != 0) {
  d22 = +HEAPF32[i3 + 528 >> 2];
  d19 = d22 * +HEAPF32[i3 + 504 >> 2] * +HEAPF32[i3 + 432 >> 2] / d5;
  d20 = +HEAPF32[i3 + 460 >> 2];
  d21 = +HEAPF32[i3 + 464 >> 2];
  d18 = +HEAPF32[i3 + 468 >> 2];
  if ((d15 - d12) * d20 + (d16 - d13) * d21 + (d17 - d14) * d18 > 0.0) d19 = d19 + d22 * ((d15 - d12) * d20 + (d16 - d13) * d21 + (d17 - d14) * d18) * +HEAPF32[i3 + 436 >> 2];
  d48 = +HEAPF32[i3 + 516 >> 2];
  d47 = d48 + d19 * +HEAPF32[i3 + 492 >> 2];
  d47 = d47 > 0.0 ? d47 : 0.0;
  HEAPF32[i3 + 516 >> 2] = d47;
  d45 = +HEAPF32[i3 + 536 >> 2];
  d46 = +HEAPF32[i3 + 540 >> 2];
  d49 = +HEAPF32[i3 + 544 >> 2];
  d50 = d45 * d20 * (d47 - d48) + d21 * (d47 - d48) * d46 + d18 * (d47 - d48) * d49;
  d19 = +Math_sqrt(+((d18 * (d47 - d48) - d49 * d50) * (d18 * (d47 - d48) - d49 * d50) + ((d20 * (d47 - d48) - d45 * d50) * (d20 * (d47 - d48) - d45 * d50) + (d21 * (d47 - d48) - d46 * d50) * (d21 * (d47 - d48) - d46 * d50))));
  d20 = 1.0 / d19 * (d20 * (d47 - d48) - d45 * d50);
  d21 = 1.0 / d19 * (d21 * (d47 - d48) - d46 * d50);
  d18 = 1.0 / d19 * (d18 * (d47 - d48) - d49 * d50);
  i32 = HEAP32[i3 + 28 >> 2] | 0;
  if ((HEAP32[i4 + 240 >> 2] | 0) != 0) {
   d50 = d21 * +HEAPF32[i32 + 300 >> 2] + d20 * +HEAPF32[i32 + 296 >> 2] + d18 * +HEAPF32[i32 + 304 >> 2];
   d49 = d21 * +HEAPF32[i32 + 284 >> 2] + d20 * +HEAPF32[i32 + 280 >> 2] + d18 * +HEAPF32[i32 + 288 >> 2];
   d48 = d21 * +HEAPF32[i32 + 268 >> 2] + d20 * +HEAPF32[i32 + 264 >> 2] + d18 * +HEAPF32[i32 + 272 >> 2];
   d46 = d19 * 0.0 * +HEAPF32[i4 + 116 >> 2];
   d47 = d19 * 0.0 * +HEAPF32[i4 + 120 >> 2];
   HEAPF32[i4 + 64 >> 2] = d19 * 0.0 * +HEAPF32[i4 + 112 >> 2] + +HEAPF32[i4 + 64 >> 2];
   HEAPF32[i4 + 68 >> 2] = d46 + +HEAPF32[i4 + 68 >> 2];
   HEAPF32[i4 + 72 >> 2] = d47 + +HEAPF32[i4 + 72 >> 2];
   d49 = d49 * d19 * +HEAPF32[i4 + 100 >> 2];
   d50 = d50 * d19 * +HEAPF32[i4 + 104 >> 2];
   HEAPF32[i10 >> 2] = d48 * d19 * +HEAPF32[i4 + 96 >> 2] + +HEAPF32[i10 >> 2];
   HEAPF32[i9 >> 2] = d49 + +HEAPF32[i9 >> 2];
   HEAPF32[i11 >> 2] = d50 + +HEAPF32[i11 >> 2];
  }
  i32 = HEAP32[i3 + 32 >> 2] | 0;
  if ((HEAP32[i2 + 240 >> 2] | 0) != 0) {
   d50 = d21 * +HEAPF32[i32 + 300 >> 2] + d20 * +HEAPF32[i32 + 296 >> 2] + d18 * +HEAPF32[i32 + 304 >> 2];
   d49 = d21 * +HEAPF32[i32 + 284 >> 2] + d20 * +HEAPF32[i32 + 280 >> 2] + d18 * +HEAPF32[i32 + 288 >> 2];
   d48 = d21 * +HEAPF32[i32 + 268 >> 2] + d20 * +HEAPF32[i32 + 264 >> 2] + d18 * +HEAPF32[i32 + 272 >> 2];
   d46 = d19 * -0.0 * +HEAPF32[i2 + 116 >> 2];
   d47 = d19 * -0.0 * +HEAPF32[i2 + 120 >> 2];
   HEAPF32[i2 + 64 >> 2] = d19 * -0.0 * +HEAPF32[i2 + 112 >> 2] + +HEAPF32[i2 + 64 >> 2];
   HEAPF32[i2 + 68 >> 2] = d46 + +HEAPF32[i2 + 68 >> 2];
   HEAPF32[i2 + 72 >> 2] = d47 + +HEAPF32[i2 + 72 >> 2];
   d49 = d49 * +HEAPF32[i2 + 100 >> 2] * -d19;
   d50 = d50 * +HEAPF32[i2 + 104 >> 2] * -d19;
   HEAPF32[i7 >> 2] = d48 * +HEAPF32[i2 + 96 >> 2] * -d19 + +HEAPF32[i7 >> 2];
   HEAPF32[i8 >> 2] = d49 + +HEAPF32[i8 >> 2];
   HEAPF32[i6 >> 2] = d50 + +HEAPF32[i6 >> 2];
  }
 }
 if ((HEAP8[i3 + 525 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 d20 = +HEAPF32[i3 + 532 >> 2];
 d21 = d20 * +HEAPF32[i3 + 508 >> 2] * +HEAPF32[i3 + 432 >> 2] / d5;
 d18 = +HEAPF32[i3 + 476 >> 2];
 d19 = +HEAPF32[i3 + 480 >> 2];
 d5 = +HEAPF32[i3 + 484 >> 2];
 if ((d15 - d12) * d18 + (d16 - d13) * d19 + (d17 - d14) * d5 > 0.0) d21 = d21 + d20 * ((d15 - d12) * d18 + (d16 - d13) * d19 + (d17 - d14) * d5) * +HEAPF32[i3 + 436 >> 2];
 d12 = +HEAPF32[i3 + 520 >> 2];
 d13 = d12 + d21 * +HEAPF32[i3 + 496 >> 2];
 d13 = d13 > 0.0 ? d13 : 0.0;
 HEAPF32[i3 + 520 >> 2] = d13;
 i32 = HEAP32[i3 + 28 >> 2] | 0;
 if ((HEAP32[i4 + 240 >> 2] | 0) != 0) {
  d50 = d19 * +HEAPF32[i32 + 300 >> 2] + d18 * +HEAPF32[i32 + 296 >> 2] + d5 * +HEAPF32[i32 + 304 >> 2];
  d49 = d19 * +HEAPF32[i32 + 284 >> 2] + d18 * +HEAPF32[i32 + 280 >> 2] + d5 * +HEAPF32[i32 + 288 >> 2];
  d5 = d19 * +HEAPF32[i32 + 268 >> 2] + d18 * +HEAPF32[i32 + 264 >> 2] + d5 * +HEAPF32[i32 + 272 >> 2];
  d19 = (d13 - d12) * 0.0 * +HEAPF32[i4 + 116 >> 2];
  d18 = (d13 - d12) * 0.0 * +HEAPF32[i4 + 120 >> 2];
  HEAPF32[i4 + 64 >> 2] = (d13 - d12) * 0.0 * +HEAPF32[i4 + 112 >> 2] + +HEAPF32[i4 + 64 >> 2];
  HEAPF32[i4 + 68 >> 2] = d19 + +HEAPF32[i4 + 68 >> 2];
  HEAPF32[i4 + 72 >> 2] = d18 + +HEAPF32[i4 + 72 >> 2];
  d18 = d49 * (d13 - d12) * +HEAPF32[i4 + 100 >> 2];
  d19 = d50 * (d13 - d12) * +HEAPF32[i4 + 104 >> 2];
  HEAPF32[i10 >> 2] = d5 * (d13 - d12) * +HEAPF32[i4 + 96 >> 2] + +HEAPF32[i10 >> 2];
  HEAPF32[i9 >> 2] = d18 + +HEAPF32[i9 >> 2];
  HEAPF32[i11 >> 2] = d19 + +HEAPF32[i11 >> 2];
  d19 = +HEAPF32[i3 + 480 >> 2];
  d18 = +HEAPF32[i3 + 476 >> 2];
  d5 = +HEAPF32[i3 + 484 >> 2];
 }
 i3 = HEAP32[i3 + 32 >> 2] | 0;
 if ((HEAP32[i2 + 240 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 d50 = d19 * +HEAPF32[i3 + 300 >> 2] + d18 * +HEAPF32[i3 + 296 >> 2] + d5 * +HEAPF32[i3 + 304 >> 2];
 d49 = d19 * +HEAPF32[i3 + 284 >> 2] + d18 * +HEAPF32[i3 + 280 >> 2] + d5 * +HEAPF32[i3 + 288 >> 2];
 d48 = d19 * +HEAPF32[i3 + 268 >> 2] + d18 * +HEAPF32[i3 + 264 >> 2] + d5 * +HEAPF32[i3 + 272 >> 2];
 d46 = (d13 - d12) * -0.0 * +HEAPF32[i2 + 116 >> 2];
 d47 = (d13 - d12) * -0.0 * +HEAPF32[i2 + 120 >> 2];
 HEAPF32[i2 + 64 >> 2] = (d13 - d12) * -0.0 * +HEAPF32[i2 + 112 >> 2] + +HEAPF32[i2 + 64 >> 2];
 HEAPF32[i2 + 68 >> 2] = d46 + +HEAPF32[i2 + 68 >> 2];
 HEAPF32[i2 + 72 >> 2] = d47 + +HEAPF32[i2 + 72 >> 2];
 d49 = d49 * +HEAPF32[i2 + 100 >> 2] * -(d13 - d12);
 d50 = d50 * +HEAPF32[i2 + 104 >> 2] * -(d13 - d12);
 HEAPF32[i7 >> 2] = d48 * +HEAPF32[i2 + 96 >> 2] * -(d13 - d12) + +HEAPF32[i7 >> 2];
 HEAPF32[i8 >> 2] = d49 + +HEAPF32[i8 >> 2];
 HEAPF32[i6 >> 2] = d50 + +HEAPF32[i6 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i2, i6, i5, i7) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 do if ((i5 - i6 | 0) == 2) {
  i3 = HEAP32[(HEAP32[i2 + 92 >> 2] | 0) + (i6 << 2) >> 2] | 0;
  i4 = HEAP32[i3 + 88 >> 2] | 0;
  i5 = HEAP32[i3 + 200 >> 2] | 0;
  i6 = HEAP32[i3 + 92 >> 2] | 0;
  i9 = HEAP32[i3 + 204 >> 2] | 0;
  if ((i4 | 0) == (i5 | 0)) {
   if ((i6 | 0) == (i9 | 0)) if ((HEAP32[i3 + 96 >> 2] | 0) == (HEAP32[i3 + 208 >> 2] | 0)) break; else i8 = i6; else i8 = i9;
   if ((i6 | 0) == (i8 | 0)) {
    i33 = (HEAP32[i3 + 96 >> 2] | 0) > (HEAP32[i3 + 208 >> 2] | 0);
    i4 = i33 ? i3 + 112 | 0 : i3;
    HEAP32[i4 >> 2] = i4;
    HEAP32[i4 + 4 >> 2] = i4;
    HEAP32[i7 >> 2] = i4;
    HEAP32[i7 + 4 >> 2] = i4;
    HEAP32[i7 + 8 >> 2] = i4;
    HEAP32[i7 + 12 >> 2] = i4;
    i3 = i33 ? i3 : i3 + 112 | 0;
   } else {
    i9 = 0;
    i17 = 9;
   }
  } else {
   i8 = i9;
   i9 = (i6 | 0) == (i9 | 0);
   i17 = 9;
  }
  do if ((i17 | 0) == 9) {
   i6 = i6 - i8 | 0;
   HEAP32[i3 >> 2] = i3 + 112;
   HEAP32[i3 + 4 >> 2] = i3 + 112;
   HEAP32[i3 + 112 >> 2] = i3;
   HEAP32[i3 + 116 >> 2] = i3;
   if ((i4 - i5 | 0) >= 0 ? !((i4 | 0) == (i5 | 0) & (i6 | 0) < 0) : 0) {
    HEAP32[i7 >> 2] = i3 + 112;
    HEAP32[i7 + 4 >> 2] = i3;
   } else {
    HEAP32[i7 >> 2] = i3;
    HEAP32[i7 + 4 >> 2] = i3 + 112;
   }
   if ((i6 | 0) < 0 | i9 & (i4 - i5 | 0) < 0) {
    HEAP32[i7 + 8 >> 2] = i3;
    HEAP32[i7 + 12 >> 2] = i3 + 112;
    i4 = i3;
    i3 = i3 + 112 | 0;
    break;
   } else {
    HEAP32[i7 + 8 >> 2] = i3 + 112;
    HEAP32[i7 + 12 >> 2] = i3;
    i4 = i3;
    i3 = i3 + 112 | 0;
    break;
   }
  } while (0);
  i6 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i2 + 48 | 0) | 0;
  i5 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i2 + 48 | 0) | 0;
  HEAP32[i6 + 8 >> 2] = i5;
  HEAP32[i5 + 8 >> 2] = i6;
  HEAP32[i6 + 20 >> 2] = HEAP32[i2 + 100 >> 2];
  HEAP32[i5 + 20 >> 2] = HEAP32[i2 + 100 >> 2];
  HEAP32[i6 + 12 >> 2] = i3;
  HEAP32[i5 + 12 >> 2] = i4;
  HEAP32[i6 + 16 >> 2] = 0;
  HEAP32[i5 + 16 >> 2] = 0;
  i5 = HEAP32[i2 + 116 >> 2] | 0;
  HEAP32[i2 + 116 >> 2] = i5 + 1;
  if ((i5 | 0) >= (HEAP32[i2 + 120 >> 2] | 0)) HEAP32[i2 + 120 >> 2] = i5 + 1;
  HEAP32[i6 >> 2] = i6;
  HEAP32[i6 + 4 >> 2] = i6;
  HEAP32[i4 + 8 >> 2] = i6;
  i33 = HEAP32[i6 + 8 >> 2] | 0;
  HEAP32[i33 >> 2] = i33;
  HEAP32[i33 + 4 >> 2] = i33;
  HEAP32[i3 + 8 >> 2] = i33;
  STACKTOP = i1;
  return;
 } else if ((i5 - i6 | 0) == 1) i3 = HEAP32[(HEAP32[i2 + 92 >> 2] | 0) + (i6 << 2) >> 2] | 0; else if ((i5 - i6 | 0) == 0) {
  HEAP32[i7 + 0 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  STACKTOP = i1;
  return;
 } else {
  i16 = ((i5 - i6 | 0) / 2 | 0) + i6 | 0;
  i19 = HEAP32[i2 + 92 >> 2] | 0;
  i20 = HEAP32[i19 + (i16 + -1 << 2) >> 2] | 0;
  i23 = HEAP32[i20 + 88 >> 2] | 0;
  i22 = HEAP32[i20 + 92 >> 2] | 0;
  i20 = HEAP32[i20 + 96 >> 2] | 0;
  L27 : do if ((i16 | 0) < (i5 | 0)) {
   i21 = i16;
   while (1) {
    i24 = HEAP32[i19 + (i21 << 2) >> 2] | 0;
    if ((HEAP32[i24 + 88 >> 2] | 0) != (i23 | 0)) {
     i18 = i21;
     break L27;
    }
    if ((HEAP32[i24 + 92 >> 2] | 0) != (i22 | 0)) {
     i18 = i21;
     break L27;
    }
    i18 = i21 + 1 | 0;
    if ((HEAP32[i24 + 96 >> 2] | 0) != (i20 | 0)) {
     i18 = i21;
     break L27;
    }
    if ((i18 | 0) < (i5 | 0)) i21 = i18; else break;
   }
  } else i18 = i16; while (0);
  __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i2, i6, i16, i7);
  HEAP32[i1 + 96 >> 2] = 0;
  HEAP32[i1 + 100 >> 2] = 0;
  HEAP32[i1 + 104 >> 2] = 0;
  HEAP32[i1 + 108 >> 2] = 0;
  __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i2, i18, i5, i1 + 96 | 0);
  i16 = i1 + 100 | 0;
  i20 = HEAP32[i16 >> 2] | 0;
  if ((i20 | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  if ((HEAP32[i7 + 4 >> 2] | 0) == 0) {
   HEAP32[i7 + 0 >> 2] = HEAP32[i1 + 96 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 100 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 104 >> 2];
   HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 108 >> 2];
   STACKTOP = i1;
   return;
  }
  HEAP32[i2 + 100 >> 2] = (HEAP32[i2 + 100 >> 2] | 0) + -1;
  i6 = HEAP32[i7 + 12 >> 2] | 0;
  i5 = HEAP32[i1 + 104 >> 2] | 0;
  i19 = HEAP32[i6 + 88 >> 2] | 0;
  L41 : do if ((i19 | 0) == (HEAP32[i5 + 88 >> 2] | 0) ? (HEAP32[i6 + 92 >> 2] | 0) == (HEAP32[i5 + 92 >> 2] | 0) : 0) {
   i18 = HEAP32[i5 + 4 >> 2] | 0;
   if ((i18 | 0) == (i5 | 0)) {
    i7 = HEAP32[i5 + 8 >> 2] | 0;
    if ((i7 | 0) != 0) {
     i5 = HEAP32[i7 + 12 >> 2] | 0;
     i19 = HEAP32[i5 + 88 >> 2] | 0;
    }
    i21 = HEAP32[i5 + 96 >> 2] | 0;
    i18 = i19 + 1 | 0;
    break;
   }
   i6 = HEAP32[i5 >> 2] | 0;
   HEAP32[i18 >> 2] = i6;
   HEAP32[i6 + 4 >> 2] = i18;
   L50 : do if ((i5 | 0) == (HEAP32[i1 + 96 >> 2] | 0)) {
    i17 = HEAP32[i6 + 88 >> 2] | 0;
    i19 = HEAP32[i18 + 88 >> 2] | 0;
    do if ((i17 | 0) >= (i19 | 0)) {
     if ((i17 | 0) == (i19 | 0) ? (HEAP32[i6 + 92 >> 2] | 0) < (HEAP32[i18 + 92 >> 2] | 0) : 0) break;
     HEAP32[i1 + 96 >> 2] = i18;
     break L50;
    } while (0);
    HEAP32[i1 + 96 >> 2] = i6;
   } while (0);
   i20 = HEAP32[i16 >> 2] | 0;
   if ((i5 | 0) == (i20 | 0)) {
    i5 = HEAP32[i6 + 88 >> 2] | 0;
    i17 = HEAP32[i18 + 88 >> 2] | 0;
    do if ((i5 | 0) <= (i17 | 0)) {
     if ((i5 | 0) == (i17 | 0) ? (HEAP32[i6 + 92 >> 2] | 0) > (HEAP32[i18 + 92 >> 2] | 0) : 0) break;
     HEAP32[i16 >> 2] = i18;
     i20 = i18;
     i17 = 45;
     break L41;
    } while (0);
    HEAP32[i16 >> 2] = i6;
    i20 = i6;
    i17 = 45;
   } else i17 = 45;
  } else i17 = 45; while (0);
  if ((i17 | 0) == 45) {
   i17 = HEAP32[i1 + 96 >> 2] | 0;
   i19 = 0;
   i18 = 1;
   i21 = i7 + 4 | 0;
   i6 = 0;
   i5 = 0;
   L68 : while (1) {
    i24 = HEAP32[i21 >> 2] | 0;
    while (1) {
     i21 = HEAP32[i24 + 88 >> 2] | 0;
     i23 = Math_imul((HEAP32[i20 + 88 >> 2] | 0) - i21 | 0, i18) | 0;
     L72 : do if ((i23 | 0) <= 0) {
      if ((i23 | 0) >= 0) {
       i25 = HEAP32[i24 + 92 >> 2] | 0;
       i22 = (i19 | 0) != 0;
       L93 : do if (i22) {
        i23 = i24;
        while (1) {
         i26 = HEAP32[i23 >> 2] | 0;
         if ((i26 | 0) == (i24 | 0)) {
          i24 = i23;
          break L93;
         }
         if ((HEAP32[i26 + 88 >> 2] | 0) != (i21 | 0)) {
          i24 = i23;
          break L93;
         }
         i33 = i25;
         i25 = HEAP32[i26 + 92 >> 2] | 0;
         if ((i25 | 0) > (i33 | 0)) {
          i24 = i23;
          break;
         } else i23 = i26;
        }
       } else {
        i23 = i24;
        while (1) {
         i26 = HEAP32[i23 + 4 >> 2] | 0;
         if ((i26 | 0) == (i24 | 0)) {
          i24 = i23;
          break L93;
         }
         if ((HEAP32[i26 + 88 >> 2] | 0) != (i21 | 0)) {
          i24 = i23;
          break L93;
         }
         i33 = i25;
         i25 = HEAP32[i26 + 92 >> 2] | 0;
         if ((i25 | 0) > (i33 | 0)) {
          i24 = i23;
          break;
         } else i23 = i26;
        }
       } while (0);
       i23 = HEAP32[i20 + 92 >> 2] | 0;
       if (i22) {
        i22 = i20;
        while (1) {
         i25 = HEAP32[i22 + 4 >> 2] | 0;
         if ((i25 | 0) == (i20 | 0)) break L72;
         if ((HEAP32[i25 + 88 >> 2] | 0) != (i21 | 0)) break L72;
         i33 = i23;
         i23 = HEAP32[i25 + 92 >> 2] | 0;
         if ((i23 | 0) < (i33 | 0)) break L72; else i22 = i25;
        }
       } else {
        i22 = i20;
        while (1) {
         i25 = HEAP32[i22 >> 2] | 0;
         if ((i25 | 0) == (i20 | 0)) break L72;
         if ((HEAP32[i25 + 88 >> 2] | 0) != (i21 | 0)) break L72;
         i33 = i23;
         i23 = HEAP32[i25 + 92 >> 2] | 0;
         if ((i23 | 0) < (i33 | 0)) break L72; else i22 = i25;
        }
       }
      }
      i21 = HEAP32[i20 + 92 >> 2] | 0;
      i27 = HEAP32[i24 + 92 >> 2] | 0;
      if ((i19 | 0) == 0) while (1) {
       i26 = HEAP32[i20 >> 2] | 0;
       i22 = (i26 | 0) == (i20 | 0);
       i25 = i20 + 88 | 0;
       while (1) {
        i30 = i24 + 88 | 0;
        i28 = i21 - i27 | 0;
        if (!i22 ? (i14 = HEAP32[i26 + 88 >> 2] | 0, i12 = Math_imul(i14 - (HEAP32[i25 >> 2] | 0) | 0, i18) | 0, i13 = HEAP32[i26 + 92 >> 2] | 0, i8 = i13 - i21 | 0, (i8 | 0) > -1) : 0) {
         if ((i12 | 0) == 0) break;
         if ((i12 | 0) < 0 ? (Math_imul(i8, i23) | 0) <= (Math_imul(i12, i28) | 0) : 0) break;
        }
        i29 = HEAP32[i24 >> 2] | 0;
        if ((i29 | 0) == (i24 | 0)) {
         i22 = i20;
         break L72;
        }
        i33 = HEAP32[i29 + 88 >> 2] | 0;
        i31 = Math_imul(i33 - (HEAP32[i30 >> 2] | 0) | 0, i18) | 0;
        i30 = HEAP32[i29 + 92 >> 2] | 0;
        i32 = i30 - i27 | 0;
        i27 = i23;
        i23 = Math_imul((HEAP32[i25 >> 2] | 0) - i33 | 0, i18) | 0;
        if (!((i23 | 0) < 0 & (i32 | 0) > 0)) {
         i22 = i20;
         break L72;
        }
        if ((i31 | 0) == 0) {
         i27 = i30;
         i24 = i29;
         continue;
        }
        if ((i31 | 0) >= 0) {
         i22 = i20;
         break L72;
        }
        if ((Math_imul(i32, i27) | 0) >= (Math_imul(i31, i28) | 0)) {
         i22 = i20;
         break L72;
        } else {
         i27 = i30;
         i24 = i29;
        }
       }
       i21 = i13;
       i23 = Math_imul(i14 - (HEAP32[i30 >> 2] | 0) | 0, i18) | 0;
       i20 = i26;
      } else while (1) {
       i22 = HEAP32[i20 + 4 >> 2] | 0;
       i26 = (i22 | 0) == (i20 | 0);
       i25 = i20 + 88 | 0;
       while (1) {
        i30 = i24 + 88 | 0;
        i28 = i21 - i27 | 0;
        if (!i26 ? (i11 = HEAP32[i22 + 88 >> 2] | 0, i15 = Math_imul(i11 - (HEAP32[i25 >> 2] | 0) | 0, i18) | 0, i10 = HEAP32[i22 + 92 >> 2] | 0, i9 = i10 - i21 | 0, (i9 | 0) > -1) : 0) {
         if ((i15 | 0) == 0) break;
         if ((i15 | 0) < 0 ? (Math_imul(i9, i23) | 0) <= (Math_imul(i15, i28) | 0) : 0) break;
        }
        i29 = HEAP32[i24 + 4 >> 2] | 0;
        if ((i29 | 0) == (i24 | 0)) {
         i22 = i20;
         break L72;
        }
        i33 = HEAP32[i29 + 88 >> 2] | 0;
        i30 = Math_imul(i33 - (HEAP32[i30 >> 2] | 0) | 0, i18) | 0;
        i31 = HEAP32[i29 + 92 >> 2] | 0;
        i27 = i31 - i27 | 0;
        i32 = i23;
        i23 = Math_imul((HEAP32[i25 >> 2] | 0) - i33 | 0, i18) | 0;
        if (!((i23 | 0) < 0 & (i27 | 0) > 0)) {
         i22 = i20;
         break L72;
        }
        if ((i30 | 0) == 0) {
         i27 = i31;
         i24 = i29;
         continue;
        }
        if ((i30 | 0) >= 0) {
         i22 = i20;
         break L72;
        }
        if ((Math_imul(i27, i32) | 0) >= (Math_imul(i30, i28) | 0)) {
         i22 = i20;
         break L72;
        } else {
         i27 = i31;
         i24 = i29;
        }
       }
       i21 = i10;
       i23 = Math_imul(i11 - (HEAP32[i30 >> 2] | 0) | 0, i18) | 0;
       i20 = i22;
      }
     } else {
      i21 = (i19 | 0) != 0;
      i22 = HEAP32[i20 + 92 >> 2] | 0;
      i27 = i24;
      while (1) {
       i24 = i20 + 88 | 0;
       i28 = i27 + 88 | 0;
       i26 = HEAP32[i27 + 92 >> 2] | 0;
       i30 = i22 - i26 | 0;
       i25 = HEAP32[(i21 ? i27 : i27 + 4 | 0) >> 2] | 0;
       L76 : do if ((i25 | 0) == (i27 | 0)) {
        i26 = i28;
        i28 = i30;
        i29 = i23;
        i25 = i27;
       } else {
        i29 = i23;
        while (1) {
         i33 = HEAP32[i25 + 88 >> 2] | 0;
         i32 = Math_imul(i33 - (HEAP32[i28 >> 2] | 0) | 0, i18) | 0;
         i31 = i26;
         i26 = HEAP32[i25 + 92 >> 2] | 0;
         i31 = i26 - i31 | 0;
         if ((i31 | 0) >= 1) {
          i26 = i28;
          i28 = i30;
          i25 = i27;
          break L76;
         }
         if ((i32 | 0) != 0) {
          if ((i32 | 0) >= 0) {
           i26 = i28;
           i28 = i30;
           i25 = i27;
           break L76;
          }
          if ((Math_imul(i31, i29) | 0) > (Math_imul(i32, i30) | 0)) {
           i26 = i28;
           i28 = i30;
           i25 = i27;
           break L76;
          }
         }
         i29 = Math_imul((HEAP32[i24 >> 2] | 0) - i33 | 0, i18) | 0;
         i28 = i25 + 88 | 0;
         i30 = i22 - i26 | 0;
         i27 = HEAP32[(i21 ? i25 : i25 + 4 | 0) >> 2] | 0;
         if ((i27 | 0) == (i25 | 0)) {
          i26 = i28;
          i28 = i30;
          break;
         } else {
          i33 = i25;
          i25 = i27;
          i27 = i33;
         }
        }
       } while (0);
       i30 = HEAP32[(i21 ? i20 : i20 + 4 | 0) >> 2] | 0;
       if ((i30 | 0) == (i20 | 0)) {
        i24 = i25;
        i22 = i20;
        break L72;
       }
       i23 = HEAP32[i30 + 88 >> 2] | 0;
       i27 = Math_imul(i23 - (HEAP32[i24 >> 2] | 0) | 0, i18) | 0;
       i24 = i22;
       i22 = HEAP32[i30 + 92 >> 2] | 0;
       i24 = i22 - i24 | 0;
       i23 = Math_imul(i23 - (HEAP32[i26 >> 2] | 0) | 0, i18) | 0;
       if (!((i23 | 0) > 0 & (i24 | 0) < 0)) {
        i24 = i25;
        i22 = i20;
        break L72;
       }
       if ((i27 | 0) == 0) {
        i27 = i25;
        i20 = i30;
        continue;
       }
       if ((i27 | 0) >= 0) {
        i24 = i25;
        i22 = i20;
        break L72;
       }
       if ((Math_imul(i24, i29) | 0) >= (Math_imul(i27, i28) | 0)) {
        i24 = i25;
        i22 = i20;
        break;
       } else {
        i27 = i25;
        i20 = i30;
       }
      }
     } while (0);
     if ((i19 | 0) == 0) {
      i19 = 1;
      i18 = -1;
      i21 = i7;
      i6 = i24;
      i20 = i17;
      i5 = i22;
      continue L68;
     }
     i19 = i19 + 1 | 0;
     if ((i19 | 0) == 2) break L68; else i20 = i22;
    }
   }
   HEAP32[i24 + 4 >> 2] = i22;
   HEAP32[i22 >> 2] = i24;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i5 + 4 >> 2] = i6;
   i8 = HEAP32[i1 + 96 >> 2] | 0;
   if ((HEAP32[i8 + 88 >> 2] | 0) < (HEAP32[(HEAP32[i7 >> 2] | 0) + 88 >> 2] | 0)) HEAP32[i7 >> 2] = i8;
   i8 = HEAP32[i16 >> 2] | 0;
   if ((HEAP32[i8 + 88 >> 2] | 0) >= (HEAP32[(HEAP32[i7 + 4 >> 2] | 0) + 88 >> 2] | 0)) HEAP32[i7 + 4 >> 2] = i8;
   HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 108 >> 2];
   i9 = HEAP32[i5 + 88 >> 2] | 0;
   i23 = HEAP32[i6 + 88 >> 2] | 0;
   i10 = HEAP32[i5 + 92 >> 2] | 0;
   i7 = HEAP32[i6 + 92 >> 2] | 0;
   i13 = HEAP32[i5 + 96 >> 2] | 0;
   i24 = HEAP32[i6 + 96 >> 2] | 0;
   i18 = ((i10 - i7 | 0) < 0) << 31 >> 31;
   i8 = 0 - (i9 - i23) | 0;
   i17 = _i64Subtract(0, 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
   i17 = ___muldi3(i13 - i24 | 0, ((i13 - i24 | 0) < 0) << 31 >> 31 | 0, i17 | 0, tempRet0 | 0) | 0;
   i16 = tempRet0;
   i15 = ___muldi3(i13 - i24 | 0, ((i13 - i24 | 0) < 0) << 31 >> 31 | 0, i10 - i7 | 0, i18 | 0) | 0;
   i14 = tempRet0;
   i22 = ___muldi3(i9 - i23 | 0, ((i9 - i23 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
   i11 = tempRet0;
   i12 = ___muldi3(i10 - i7 | 0, i18 | 0, i10 - i7 | 0, i18 | 0) | 0;
   i12 = _i64Subtract(i22 | 0, i11 | 0, i12 | 0, tempRet0 | 0) | 0;
   i11 = tempRet0;
   i22 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i1 + 140 >> 2] = 0;
   if ((i22 | 0) == 0) i25 = 0; else {
    i19 = _i64Subtract(0, 0, i10 - i7 | 0, i18 | 0) | 0;
    i21 = tempRet0;
    i25 = 0;
    i20 = i22;
    do {
     i27 = HEAP32[i20 + 12 >> 2] | 0;
     i29 = HEAP32[i27 + 88 >> 2] | 0;
     i26 = HEAP32[i27 + 92 >> 2] | 0;
     i27 = HEAP32[i27 + 96 >> 2] | 0;
     i31 = ___muldi3(i26 - i7 | 0, ((i26 - i7 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
     i33 = tempRet0;
     i32 = ___muldi3(i29 - i23 | 0, ((i29 - i23 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i21 | 0) | 0;
     do if ((i31 | 0) == (i32 | 0) & (i33 | 0) == (tempRet0 | 0) ? (i32 = ___muldi3(i29 - i23 | 0, ((i29 - i23 | 0) < 0) << 31 >> 31 | 0, i17 | 0, i16 | 0) | 0, i31 = tempRet0, i33 = ___muldi3(i26 - i7 | 0, ((i26 - i7 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i14 | 0) | 0, i31 = _i64Add(i33 | 0, tempRet0 | 0, i32 | 0, i31 | 0) | 0, i32 = tempRet0, i33 = ___muldi3(i27 - i24 | 0, ((i27 - i24 | 0) < 0) << 31 >> 31 | 0, i12 | 0, i11 | 0) | 0, i33 = _i64Add(i31 | 0, i32 | 0, i33 | 0, tempRet0 | 0) | 0, i32 = tempRet0, (i32 | 0) > 0 | (i32 | 0) == 0 & i33 >>> 0 > 0) : 0) {
      if ((i25 | 0) != 0) {
       i28 = (HEAP32[i25 + 4 >> 2] | 0) == (i20 | 0);
       if ((HEAP32[i25 >> 2] | 0) == (i20 | 0)) {
        if (!i28) break;
        i31 = HEAP32[i25 + 12 >> 2] | 0;
        i30 = HEAP32[(HEAP32[i20 + 8 >> 2] | 0) + 12 >> 2] | 0;
        i33 = HEAP32[i30 + 88 >> 2] | 0;
        i32 = HEAP32[i30 + 92 >> 2] | 0;
        i30 = HEAP32[i30 + 96 >> 2] | 0;
        i28 = (HEAP32[i31 + 96 >> 2] | 0) - i30 | 0;
        i32 = (Math_imul(i27 - i30 | 0, (HEAP32[i31 + 92 >> 2] | 0) - i32 | 0) | 0) - (Math_imul(i28, i26 - i32 | 0) | 0) | 0;
        i26 = (Math_imul(i28, i29 - i33 | 0) | 0) - (Math_imul(i27 - i30 | 0, (HEAP32[i31 + 88 >> 2] | 0) - i33 | 0) | 0) | 0;
        i32 = ___muldi3(i32 | 0, ((i32 | 0) < 0) << 31 >> 31 | 0, i10 - i7 | 0, i18 | 0) | 0;
        i33 = tempRet0;
        i26 = ___muldi3(i26 | 0, ((i26 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
        i26 = _i64Add(i32 | 0, i33 | 0, i26 | 0, tempRet0 | 0) | 0;
        i33 = tempRet0;
        i26 = (i33 | 0) > 0 | (i33 | 0) == 0 & i26 >>> 0 > 0 ? 2 : 1;
       } else i26 = i28 & 1;
       if ((i26 | 0) != 1) break;
      }
      HEAP32[i1 + 140 >> 2] = i20;
      i25 = i20;
     } while (0);
     i20 = HEAP32[i20 >> 2] | 0;
    } while ((i20 | 0) != (i22 | 0));
   }
   i21 = HEAP32[i5 + 8 >> 2] | 0;
   HEAP32[i1 + 136 >> 2] = 0;
   if ((i21 | 0) == 0) i24 = 0; else {
    i19 = _i64Subtract(0, 0, i10 - i7 | 0, i18 | 0) | 0;
    i20 = tempRet0;
    i24 = 0;
    i22 = i21;
    do {
     i23 = HEAP32[i22 + 12 >> 2] | 0;
     i26 = HEAP32[i23 + 88 >> 2] | 0;
     i27 = HEAP32[i23 + 92 >> 2] | 0;
     i23 = HEAP32[i23 + 96 >> 2] | 0;
     i31 = ___muldi3(i27 - i10 | 0, ((i27 - i10 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
     i33 = tempRet0;
     i32 = ___muldi3(i26 - i9 | 0, ((i26 - i9 | 0) < 0) << 31 >> 31 | 0, i19 | 0, i20 | 0) | 0;
     do if ((i31 | 0) == (i32 | 0) & (i33 | 0) == (tempRet0 | 0) ? (i32 = ___muldi3(i26 - i9 | 0, ((i26 - i9 | 0) < 0) << 31 >> 31 | 0, i17 | 0, i16 | 0) | 0, i31 = tempRet0, i33 = ___muldi3(i27 - i10 | 0, ((i27 - i10 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i14 | 0) | 0, i31 = _i64Add(i33 | 0, tempRet0 | 0, i32 | 0, i31 | 0) | 0, i32 = tempRet0, i33 = ___muldi3(i23 - i13 | 0, ((i23 - i13 | 0) < 0) << 31 >> 31 | 0, i12 | 0, i11 | 0) | 0, i33 = _i64Add(i31 | 0, i32 | 0, i33 | 0, tempRet0 | 0) | 0, i32 = tempRet0, (i32 | 0) > 0 | (i32 | 0) == 0 & i33 >>> 0 > 0) : 0) {
      if ((i24 | 0) != 0) {
       if ((HEAP32[i24 >> 2] | 0) != (i22 | 0)) break;
       if ((HEAP32[i24 + 4 >> 2] | 0) == (i22 | 0) ? (i32 = HEAP32[i24 + 12 >> 2] | 0, i30 = HEAP32[(HEAP32[i22 + 8 >> 2] | 0) + 12 >> 2] | 0, i33 = HEAP32[i30 + 88 >> 2] | 0, i31 = HEAP32[i30 + 92 >> 2] | 0, i30 = HEAP32[i30 + 96 >> 2] | 0, i29 = (HEAP32[i32 + 96 >> 2] | 0) - i30 | 0, i31 = (Math_imul(i23 - i30 | 0, (HEAP32[i32 + 92 >> 2] | 0) - i31 | 0) | 0) - (Math_imul(i29, i27 - i31 | 0) | 0) | 0, i33 = (Math_imul(i29, i26 - i33 | 0) | 0) - (Math_imul(i23 - i30 | 0, (HEAP32[i32 + 88 >> 2] | 0) - i33 | 0) | 0) | 0, i31 = ___muldi3(i31 | 0, ((i31 | 0) < 0) << 31 >> 31 | 0, i10 - i7 | 0, i18 | 0) | 0, i32 = tempRet0, i33 = ___muldi3(i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0, i33 = _i64Add(i31 | 0, i32 | 0, i33 | 0, tempRet0 | 0) | 0, i32 = tempRet0, !((i32 | 0) > 0 | (i32 | 0) == 0 & i33 >>> 0 > 0)) : 0) break;
      }
      HEAP32[i1 + 136 >> 2] = i22;
      i24 = i22;
     } while (0);
     i22 = HEAP32[i22 >> 2] | 0;
    } while ((i22 | 0) != (i21 | 0));
   }
   if (!((i25 | 0) == 0 & (i24 | 0) == 0)) {
    __ZN20btConvexHullInternal24findEdgeForCoplanarFacesEPNS_6VertexES1_RPNS_4EdgeES4_S1_S1_(i2, i6, i5, i1 + 140 | 0, i1 + 136 | 0);
    i7 = HEAP32[i1 + 140 >> 2] | 0;
    if ((i7 | 0) != 0) i6 = HEAP32[i7 + 12 >> 2] | 0;
    i7 = HEAP32[i1 + 136 >> 2] | 0;
    if ((i7 | 0) != 0) i5 = HEAP32[i7 + 12 >> 2] | 0;
   }
   i21 = (HEAP32[i5 + 96 >> 2] | 0) + 1 | 0;
   i18 = HEAP32[i5 + 88 >> 2] | 0;
  }
  i19 = HEAP32[i5 + 92 >> 2] | 0;
  i17 = i19;
  i7 = i6;
  i11 = i5;
  i8 = 0;
  i15 = 0;
  i24 = 1;
  i12 = 0;
  i20 = 0;
  i13 = 0;
  i22 = 0;
  i9 = 0;
  i14 = 0;
  while (1) {
   i23 = i7 + 88 | 0;
   i30 = (HEAP32[i11 + 88 >> 2] | 0) - (HEAP32[i23 >> 2] | 0) | 0;
   i33 = i7 + 92 | 0;
   i10 = i17 - (HEAP32[i33 >> 2] | 0) | 0;
   i29 = i7 + 96 | 0;
   i27 = (HEAP32[i11 + 96 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0;
   HEAP32[i1 + 120 >> 2] = i30;
   HEAP32[i1 + 124 >> 2] = i10;
   HEAP32[i1 + 128 >> 2] = i27;
   HEAP32[i1 + 132 >> 2] = -1;
   i23 = i18 - (HEAP32[i23 >> 2] | 0) | 0;
   i33 = i19 - (HEAP32[i33 >> 2] | 0) | 0;
   i29 = i21 - (HEAP32[i29 >> 2] | 0) | 0;
   i28 = (Math_imul(i27, i33) | 0) - (Math_imul(i10, i29) | 0) | 0;
   i29 = (Math_imul(i30, i29) | 0) - (Math_imul(i27, i23) | 0) | 0;
   i33 = (Math_imul(i10, i23) | 0) - (Math_imul(i30, i33) | 0) | 0;
   HEAP32[i1 + 72 >> 2] = i28;
   HEAP32[i1 + 76 >> 2] = ((i28 | 0) < 0) << 31 >> 31;
   HEAP32[i1 + 80 >> 2] = i29;
   HEAP32[i1 + 84 >> 2] = ((i29 | 0) < 0) << 31 >> 31;
   HEAP32[i1 + 88 >> 2] = i33;
   HEAP32[i1 + 92 >> 2] = ((i33 | 0) < 0) << 31 >> 31;
   i23 = ___muldi3(i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0, i10 | 0, ((i10 | 0) < 0) << 31 >> 31 | 0) | 0;
   i32 = tempRet0;
   i31 = ___muldi3(i27 | 0, ((i27 | 0) < 0) << 31 >> 31 | 0, i29 | 0, ((i29 | 0) < 0) << 31 >> 31 | 0) | 0;
   i31 = _i64Subtract(i23 | 0, i32 | 0, i31 | 0, tempRet0 | 0) | 0;
   i32 = tempRet0;
   i27 = ___muldi3(i28 | 0, ((i28 | 0) < 0) << 31 >> 31 | 0, i27 | 0, ((i27 | 0) < 0) << 31 >> 31 | 0) | 0;
   i23 = tempRet0;
   i33 = ___muldi3(i30 | 0, ((i30 | 0) < 0) << 31 >> 31 | 0, i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0) | 0;
   i33 = _i64Subtract(i27 | 0, i23 | 0, i33 | 0, tempRet0 | 0) | 0;
   i23 = tempRet0;
   i29 = ___muldi3(i30 | 0, ((i30 | 0) < 0) << 31 >> 31 | 0, i29 | 0, ((i29 | 0) < 0) << 31 >> 31 | 0) | 0;
   i30 = tempRet0;
   i10 = ___muldi3(i28 | 0, ((i28 | 0) < 0) << 31 >> 31 | 0, i10 | 0, ((i10 | 0) < 0) << 31 >> 31 | 0) | 0;
   i10 = _i64Subtract(i29 | 0, i30 | 0, i10 | 0, tempRet0 | 0) | 0;
   HEAP32[i1 + 48 >> 2] = i31;
   HEAP32[i1 + 52 >> 2] = i32;
   HEAP32[i1 + 56 >> 2] = i33;
   HEAP32[i1 + 60 >> 2] = i23;
   HEAP32[i1 + 64 >> 2] = i10;
   HEAP32[i1 + 68 >> 2] = tempRet0;
   HEAP32[i1 + 24 >> 2] = 0;
   HEAP32[i1 + 28 >> 2] = 0;
   HEAP32[i1 + 32 >> 2] = 0;
   HEAP32[i1 + 36 >> 2] = 0;
   HEAP32[i1 + 40 >> 2] = 0;
   i10 = __ZN20btConvexHullInternal12findMaxAngleEbPKNS_6VertexERKNS_7Point32ERKNS_7Point64ES8_RNS_10Rational64E(i2, 0, i7, i1 + 120 | 0, i1 + 72 | 0, i1 + 48 | 0, i1 + 24 | 0) | 0;
   HEAP32[i1 + 0 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   HEAP32[i1 + 16 >> 2] = 0;
   i23 = __ZN20btConvexHullInternal12findMaxAngleEbPKNS_6VertexERKNS_7Point32ERKNS_7Point64ES8_RNS_10Rational64E(i2, 1, i11, i1 + 120 | 0, i1 + 72 | 0, i1 + 48 | 0, i1) | 0;
   if ((i23 | 0) == 0 & ((i10 | 0) != 0 ^ 1)) {
    i17 = 138;
    break;
   }
   if ((i23 | 0) == 0 | (i10 | 0) != 0 ^ 1) i16 = (i10 | 0) != 0 ? -1 : 1; else i16 = __ZNK20btConvexHullInternal10Rational647compareERKS0_(HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0, HEAP32[i1 + 32 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0, i1) | 0;
   do if (!i24) {
    if ((i16 | 0) > -1) {
     if ((HEAP32[i1 + 16 >> 2] | 0) >= 0) {
      i17 = 150;
      break;
     }
     if ((HEAP32[i1 + 8 >> 2] | 0) == 0 & (HEAP32[i1 + 12 >> 2] | 0) == 0) {
      i17 = 157;
      break;
     } else {
      i17 = 150;
      break;
     }
    }
    if ((HEAP32[i1 + 40 >> 2] | 0) < 0 ? (HEAP32[i1 + 32 >> 2] | 0) == 0 & (HEAP32[i1 + 36 >> 2] | 0) == 0 : 0) {
     HEAP32[i1 + 116 >> 2] = i10;
     HEAP32[i1 + 112 >> 2] = i23;
     i23 = i10;
     i16 = i20;
     i20 = i22;
     i17 = 179;
    } else i17 = 150;
   } else i17 = 150; while (0);
   if ((i17 | 0) == 150) {
    i17 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i2 + 48 | 0) | 0;
    i24 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i2 + 48 | 0) | 0;
    HEAP32[i17 + 8 >> 2] = i24;
    HEAP32[i24 + 8 >> 2] = i17;
    HEAP32[i17 + 20 >> 2] = HEAP32[i2 + 100 >> 2];
    HEAP32[i24 + 20 >> 2] = HEAP32[i2 + 100 >> 2];
    HEAP32[i17 + 12 >> 2] = i11;
    HEAP32[i24 + 12 >> 2] = i7;
    HEAP32[i17 + 16 >> 2] = 0;
    HEAP32[i24 + 16 >> 2] = 0;
    i24 = HEAP32[i2 + 116 >> 2] | 0;
    HEAP32[i2 + 116 >> 2] = i24 + 1;
    if ((i24 | 0) >= (HEAP32[i2 + 120 >> 2] | 0)) HEAP32[i2 + 120 >> 2] = i24 + 1;
    if ((i13 | 0) == 0) i12 = i17; else HEAP32[i13 + 4 >> 2] = i17;
    HEAP32[i17 >> 2] = i13;
    i24 = HEAP32[i17 + 8 >> 2] | 0;
    if ((i22 | 0) == 0) i20 = i24; else HEAP32[i22 >> 2] = i24;
    HEAP32[i24 + 4 >> 2] = i22;
    i13 = i17;
    i22 = i24;
    i17 = 157;
   }
   do if ((i17 | 0) == 157) {
    i17 = 0;
    HEAP32[i1 + 116 >> 2] = i10;
    HEAP32[i1 + 112 >> 2] = i23;
    if ((i16 | 0) != 0) if ((i16 | 0) > -1) i24 = i23; else {
     i23 = i10;
     i16 = i20;
     i20 = i22;
     i17 = 179;
     break;
    } else {
     __ZN20btConvexHullInternal24findEdgeForCoplanarFacesEPNS_6VertexES1_RPNS_4EdgeES4_S1_S1_(i2, i7, i11, i1 + 116 | 0, i1 + 112 | 0);
     i24 = HEAP32[i1 + 112 >> 2] | 0;
    }
    if ((i24 | 0) != 0) {
     i18 = (i14 | 0) != 0;
     if (i18 ? (i3 = HEAP32[i14 >> 2] | 0, (i3 | 0) != (i23 | 0)) : 0) {
      i26 = i3;
      do {
       i25 = i26;
       i26 = HEAP32[i26 >> 2] | 0;
       i21 = HEAP32[i25 + 8 >> 2] | 0;
       if ((i26 | 0) == (i25 | 0)) HEAP32[(HEAP32[i21 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
        HEAP32[i26 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
        HEAP32[HEAP32[i25 + 4 >> 2] >> 2] = i26;
        HEAP32[(HEAP32[i21 + 12 >> 2] | 0) + 8 >> 2] = i26;
       }
       i19 = HEAP32[i21 >> 2] | 0;
       if ((i19 | 0) == (i21 | 0)) HEAP32[(HEAP32[i25 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
        HEAP32[i19 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
        HEAP32[HEAP32[i21 + 4 >> 2] >> 2] = i19;
        HEAP32[(HEAP32[i25 + 12 >> 2] | 0) + 8 >> 2] = i19;
       }
       HEAP32[i25 + 0 >> 2] = 0;
       HEAP32[i25 + 4 >> 2] = 0;
       HEAP32[i25 + 8 >> 2] = 0;
       HEAP32[i25 + 12 >> 2] = 0;
       HEAP32[i25 + 16 >> 2] = 0;
       HEAP32[i25 >> 2] = HEAP32[i2 + 56 >> 2];
       HEAP32[i2 + 56 >> 2] = i25;
       HEAP32[i21 + 0 >> 2] = 0;
       HEAP32[i21 + 4 >> 2] = 0;
       HEAP32[i21 + 8 >> 2] = 0;
       HEAP32[i21 + 12 >> 2] = 0;
       HEAP32[i21 + 16 >> 2] = 0;
       HEAP32[i21 >> 2] = HEAP32[i2 + 56 >> 2];
       HEAP32[i2 + 56 >> 2] = i21;
       HEAP32[i2 + 116 >> 2] = (HEAP32[i2 + 116 >> 2] | 0) + -1;
      } while ((i26 | 0) != (i23 | 0));
     }
     if ((i22 | 0) == 0) {
      i14 = i24;
      i15 = i18 ? i15 : i23;
     } else {
      if (i18) {
       HEAP32[i14 >> 2] = i20;
       HEAP32[i20 + 4 >> 2] = i14;
       i14 = i23 + 4 | 0;
      } else {
       i14 = HEAP32[i23 + 4 >> 2] | 0;
       HEAP32[i14 >> 2] = i20;
       HEAP32[i20 + 4 >> 2] = i14;
       i14 = i23 + 4 | 0;
       i15 = i20;
      }
      HEAP32[i22 >> 2] = i23;
      HEAP32[i14 >> 2] = i22;
      i14 = HEAP32[i1 + 112 >> 2] | 0;
      i20 = 0;
     }
     i21 = HEAP32[i11 + 96 >> 2] | 0;
     i19 = HEAP32[i11 + 92 >> 2] | 0;
     i18 = HEAP32[i11 + 88 >> 2] | 0;
     i11 = HEAP32[i14 + 12 >> 2] | 0;
     i22 = 0;
     i14 = HEAP32[i14 + 8 >> 2] | 0;
    }
    if ((i16 | 0) < 1) {
     i23 = HEAP32[i1 + 116 >> 2] | 0;
     i16 = i20;
     i20 = i22;
     i17 = 179;
    } else {
     i10 = i20;
     i16 = i22;
    }
   } while (0);
   if ((i17 | 0) == 179) {
    i17 = 0;
    if ((i23 | 0) == 0) {
     i10 = i16;
     i16 = i20;
    } else {
     i18 = (i9 | 0) != 0;
     if (i18 ? (i4 = HEAP32[i9 + 4 >> 2] | 0, (i4 | 0) != (i10 | 0)) : 0) {
      i22 = i4;
      do {
       i25 = i22 + 4 | 0;
       i19 = i22;
       i22 = HEAP32[i25 >> 2] | 0;
       i24 = HEAP32[i19 >> 2] | 0;
       i21 = HEAP32[i19 + 8 >> 2] | 0;
       if ((i24 | 0) == (i19 | 0)) HEAP32[(HEAP32[i21 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
        HEAP32[i24 + 4 >> 2] = i22;
        HEAP32[HEAP32[i25 >> 2] >> 2] = i24;
        HEAP32[(HEAP32[i21 + 12 >> 2] | 0) + 8 >> 2] = i24;
       }
       i24 = HEAP32[i21 >> 2] | 0;
       if ((i24 | 0) == (i21 | 0)) HEAP32[(HEAP32[i19 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
        HEAP32[i24 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
        HEAP32[HEAP32[i21 + 4 >> 2] >> 2] = i24;
        HEAP32[(HEAP32[i19 + 12 >> 2] | 0) + 8 >> 2] = i24;
       }
       HEAP32[i19 + 0 >> 2] = 0;
       HEAP32[i19 + 4 >> 2] = 0;
       HEAP32[i19 + 8 >> 2] = 0;
       HEAP32[i19 + 12 >> 2] = 0;
       HEAP32[i19 + 16 >> 2] = 0;
       HEAP32[i19 >> 2] = HEAP32[i2 + 56 >> 2];
       HEAP32[i2 + 56 >> 2] = i19;
       HEAP32[i21 + 0 >> 2] = 0;
       HEAP32[i21 + 4 >> 2] = 0;
       HEAP32[i21 + 8 >> 2] = 0;
       HEAP32[i21 + 12 >> 2] = 0;
       HEAP32[i21 + 16 >> 2] = 0;
       HEAP32[i21 >> 2] = HEAP32[i2 + 56 >> 2];
       HEAP32[i2 + 56 >> 2] = i21;
       HEAP32[i2 + 116 >> 2] = (HEAP32[i2 + 116 >> 2] | 0) + -1;
      } while ((i22 | 0) != (i10 | 0));
     }
     if ((i13 | 0) == 0) i8 = i18 ? i8 : i10; else {
      if (i18) {
       HEAP32[i12 >> 2] = i9;
       HEAP32[i9 + 4 >> 2] = i12;
       i9 = i10;
      } else {
       i9 = HEAP32[i10 >> 2] | 0;
       HEAP32[i12 >> 2] = i9;
       HEAP32[i9 + 4 >> 2] = i12;
       i9 = i10;
       i8 = i12;
      }
      HEAP32[i9 >> 2] = i13;
      HEAP32[i13 + 4 >> 2] = i10;
      i23 = HEAP32[i1 + 116 >> 2] | 0;
      i12 = 0;
     }
     i21 = HEAP32[i7 + 96 >> 2] | 0;
     i19 = HEAP32[i7 + 92 >> 2] | 0;
     i18 = HEAP32[i7 + 88 >> 2] | 0;
     i7 = HEAP32[i23 + 12 >> 2] | 0;
     i10 = i16;
     i13 = 0;
     i16 = i20;
     i9 = HEAP32[i23 + 8 >> 2] | 0;
    }
   }
   if ((i7 | 0) == (i6 | 0) & (i11 | 0) == (i5 | 0)) break;
   i17 = HEAP32[i11 + 92 >> 2] | 0;
   i24 = 0;
   i20 = i10;
   i22 = i16;
  }
  if ((i17 | 0) == 138) {
   i4 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i2 + 48 | 0) | 0;
   i3 = __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i2 + 48 | 0) | 0;
   HEAP32[i4 + 8 >> 2] = i3;
   HEAP32[i3 + 8 >> 2] = i4;
   HEAP32[i4 + 20 >> 2] = HEAP32[i2 + 100 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i2 + 100 >> 2];
   HEAP32[i4 + 12 >> 2] = i11;
   HEAP32[i3 + 12 >> 2] = i7;
   HEAP32[i4 + 16 >> 2] = 0;
   HEAP32[i3 + 16 >> 2] = 0;
   i3 = HEAP32[i2 + 116 >> 2] | 0;
   HEAP32[i2 + 116 >> 2] = i3 + 1;
   if ((i3 | 0) >= (HEAP32[i2 + 120 >> 2] | 0)) HEAP32[i2 + 120 >> 2] = i3 + 1;
   HEAP32[i4 >> 2] = i4;
   HEAP32[i4 + 4 >> 2] = i4;
   HEAP32[i7 + 8 >> 2] = i4;
   i33 = HEAP32[i4 + 8 >> 2] | 0;
   HEAP32[i33 >> 2] = i33;
   HEAP32[i33 + 4 >> 2] = i33;
   HEAP32[i11 + 8 >> 2] = i33;
   STACKTOP = i1;
   return;
  }
  if ((i9 | 0) != 0) {
   i3 = i9 + 4 | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   if ((i7 | 0) != (i8 | 0)) do {
    i17 = i7 + 4 | 0;
    i4 = i7;
    i7 = HEAP32[i17 >> 2] | 0;
    i11 = HEAP32[i4 >> 2] | 0;
    i6 = HEAP32[i4 + 8 >> 2] | 0;
    if ((i11 | 0) == (i4 | 0)) HEAP32[(HEAP32[i6 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
     HEAP32[i11 + 4 >> 2] = i7;
     HEAP32[HEAP32[i17 >> 2] >> 2] = i11;
     HEAP32[(HEAP32[i6 + 12 >> 2] | 0) + 8 >> 2] = i11;
    }
    i11 = HEAP32[i6 >> 2] | 0;
    if ((i11 | 0) == (i6 | 0)) HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
     HEAP32[i11 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[HEAP32[i6 + 4 >> 2] >> 2] = i11;
     HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 8 >> 2] = i11;
    }
    HEAP32[i4 + 0 >> 2] = 0;
    HEAP32[i4 + 4 >> 2] = 0;
    HEAP32[i4 + 8 >> 2] = 0;
    HEAP32[i4 + 12 >> 2] = 0;
    HEAP32[i4 + 16 >> 2] = 0;
    HEAP32[i4 >> 2] = HEAP32[i2 + 56 >> 2];
    HEAP32[i2 + 56 >> 2] = i4;
    HEAP32[i6 + 0 >> 2] = 0;
    HEAP32[i6 + 4 >> 2] = 0;
    HEAP32[i6 + 8 >> 2] = 0;
    HEAP32[i6 + 12 >> 2] = 0;
    HEAP32[i6 + 16 >> 2] = 0;
    HEAP32[i6 >> 2] = HEAP32[i2 + 56 >> 2];
    HEAP32[i2 + 56 >> 2] = i6;
    HEAP32[i2 + 116 >> 2] = (HEAP32[i2 + 116 >> 2] | 0) + -1;
   } while ((i7 | 0) != (i8 | 0));
   if ((i13 | 0) != 0) {
    HEAP32[i12 >> 2] = i9;
    HEAP32[i3 >> 2] = i12;
    HEAP32[i8 >> 2] = i13;
    HEAP32[i13 + 4 >> 2] = i8;
   }
  } else {
   HEAP32[i12 >> 2] = i13;
   HEAP32[i13 + 4 >> 2] = i12;
   HEAP32[i6 + 8 >> 2] = i13;
  }
  if ((i14 | 0) == 0) {
   HEAP32[i16 >> 2] = i10;
   HEAP32[i10 + 4 >> 2] = i16;
   HEAP32[i5 + 8 >> 2] = i16;
   STACKTOP = i1;
   return;
  }
  i3 = HEAP32[i14 >> 2] | 0;
  if ((i3 | 0) != (i15 | 0)) do {
   i5 = i3;
   i3 = HEAP32[i3 >> 2] | 0;
   i4 = HEAP32[i5 + 8 >> 2] | 0;
   if ((i3 | 0) == (i5 | 0)) HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
    HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
    HEAP32[HEAP32[i5 + 4 >> 2] >> 2] = i3;
    HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 8 >> 2] = i3;
   }
   i6 = HEAP32[i4 >> 2] | 0;
   if ((i6 | 0) == (i4 | 0)) HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 8 >> 2] = 0; else {
    HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    HEAP32[HEAP32[i4 + 4 >> 2] >> 2] = i6;
    HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 8 >> 2] = i6;
   }
   HEAP32[i5 + 0 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP32[i5 + 16 >> 2] = 0;
   HEAP32[i5 >> 2] = HEAP32[i2 + 56 >> 2];
   HEAP32[i2 + 56 >> 2] = i5;
   HEAP32[i4 + 0 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 12 >> 2] = 0;
   HEAP32[i4 + 16 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i2 + 56 >> 2];
   HEAP32[i2 + 56 >> 2] = i4;
   HEAP32[i2 + 116 >> 2] = (HEAP32[i2 + 116 >> 2] | 0) + -1;
  } while ((i3 | 0) != (i15 | 0));
  if ((i16 | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  HEAP32[i14 >> 2] = i10;
  HEAP32[i10 + 4 >> 2] = i14;
  HEAP32[i16 >> 2] = i15;
  HEAP32[i15 + 4 >> 2] = i16;
  STACKTOP = i1;
  return;
 } while (0);
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = i3;
 HEAP32[i3 + 4 >> 2] = i3;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i7 + 4 >> 2] = i3;
 HEAP32[i7 + 8 >> 2] = i3;
 HEAP32[i7 + 12 >> 2] = i3;
 STACKTOP = i1;
 return;
}
function _malloc(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0;
 i1 = STACKTOP;
 do if (i27 >>> 0 < 245) {
  if (i27 >>> 0 < 11) i12 = 16; else i12 = i27 + 11 & -8;
  i18 = i12 >>> 3;
  i13 = HEAP32[5286] | 0;
  if ((i13 >>> i18 & 3 | 0) != 0) {
   i3 = HEAP32[21184 + (((i13 >>> i18 & 1 ^ 1) + i18 << 1) + 2 << 2) >> 2] | 0;
   i2 = HEAP32[i3 + 8 >> 2] | 0;
   do if ((21184 + ((i13 >>> i18 & 1 ^ 1) + i18 << 1 << 2) | 0) != (i2 | 0)) {
    if (i2 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
    if ((HEAP32[i2 + 12 >> 2] | 0) == (i3 | 0)) {
     HEAP32[i2 + 12 >> 2] = 21184 + ((i13 >>> i18 & 1 ^ 1) + i18 << 1 << 2);
     HEAP32[21184 + (((i13 >>> i18 & 1 ^ 1) + i18 << 1) + 2 << 2) >> 2] = i2;
     break;
    } else _abort();
   } else HEAP32[5286] = i13 & ~(1 << (i13 >>> i18 & 1 ^ 1) + i18); while (0);
   HEAP32[i3 + 4 >> 2] = (i13 >>> i18 & 1 ^ 1) + i18 << 3 | 3;
   HEAP32[i3 + ((i13 >>> i18 & 1 ^ 1) + i18 << 3 | 4) >> 2] = HEAP32[i3 + ((i13 >>> i18 & 1 ^ 1) + i18 << 3 | 4) >> 2] | 1;
   i29 = i3 + 8 | 0;
   STACKTOP = i1;
   return i29 | 0;
  }
  if (i12 >>> 0 > (HEAP32[5288] | 0) >>> 0) {
   if ((i13 >>> i18 | 0) != 0) {
    i3 = (i13 >>> i18 << i18 & (2 << i18 | 0 - (2 << i18)) & 0 - (i13 >>> i18 << i18 & (2 << i18 | 0 - (2 << i18)))) + -1 | 0;
    i2 = i3 >>> (i3 >>> 12 & 16) >>> (i3 >>> (i3 >>> 12 & 16) >>> 5 & 8);
    i5 = i2 >>> (i2 >>> 2 & 4) >>> (i2 >>> (i2 >>> 2 & 4) >>> 1 & 2);
    i5 = (i3 >>> (i3 >>> 12 & 16) >>> 5 & 8 | i3 >>> 12 & 16 | i2 >>> 2 & 4 | i2 >>> (i2 >>> 2 & 4) >>> 1 & 2 | i5 >>> 1 & 1) + (i5 >>> (i5 >>> 1 & 1)) | 0;
    i2 = HEAP32[21184 + ((i5 << 1) + 2 << 2) >> 2] | 0;
    i3 = HEAP32[i2 + 8 >> 2] | 0;
    do if ((21184 + (i5 << 1 << 2) | 0) != (i3 | 0)) {
     if (i3 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
     if ((HEAP32[i3 + 12 >> 2] | 0) == (i2 | 0)) {
      HEAP32[i3 + 12 >> 2] = 21184 + (i5 << 1 << 2);
      HEAP32[21184 + ((i5 << 1) + 2 << 2) >> 2] = i3;
      break;
     } else _abort();
    } else HEAP32[5286] = i13 & ~(1 << i5); while (0);
    i4 = (i5 << 3) - i12 | 0;
    HEAP32[i2 + 4 >> 2] = i12 | 3;
    i3 = i2 + i12 | 0;
    HEAP32[i2 + (i12 | 4) >> 2] = i4 | 1;
    HEAP32[i2 + (i5 << 3) >> 2] = i4;
    i6 = HEAP32[5288] | 0;
    if ((i6 | 0) != 0) {
     i5 = HEAP32[5291] | 0;
     i7 = HEAP32[5286] | 0;
     if ((i7 & 1 << (i6 >>> 3) | 0) != 0) {
      i7 = HEAP32[21184 + ((i6 >>> 3 << 1) + 2 << 2) >> 2] | 0;
      if (i7 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
       i26 = 21184 + ((i6 >>> 3 << 1) + 2 << 2) | 0;
       i25 = i7;
      }
     } else {
      HEAP32[5286] = i7 | 1 << (i6 >>> 3);
      i26 = 21184 + ((i6 >>> 3 << 1) + 2 << 2) | 0;
      i25 = 21184 + (i6 >>> 3 << 1 << 2) | 0;
     }
     HEAP32[i26 >> 2] = i5;
     HEAP32[i25 + 12 >> 2] = i5;
     HEAP32[i5 + 8 >> 2] = i25;
     HEAP32[i5 + 12 >> 2] = 21184 + (i6 >>> 3 << 1 << 2);
    }
    HEAP32[5288] = i4;
    HEAP32[5291] = i3;
    i29 = i2 + 8 | 0;
    STACKTOP = i1;
    return i29 | 0;
   }
   i13 = HEAP32[5287] | 0;
   if ((i13 | 0) != 0) {
    i3 = ((i13 & 0 - i13) + -1 | 0) >>> (((i13 & 0 - i13) + -1 | 0) >>> 12 & 16);
    i2 = i3 >>> (i3 >>> 5 & 8) >>> (i3 >>> (i3 >>> 5 & 8) >>> 2 & 4);
    i2 = HEAP32[21448 + ((i3 >>> 5 & 8 | ((i13 & 0 - i13) + -1 | 0) >>> 12 & 16 | i3 >>> (i3 >>> 5 & 8) >>> 2 & 4 | i2 >>> 1 & 2 | i2 >>> (i2 >>> 1 & 2) >>> 1 & 1) + (i2 >>> (i2 >>> 1 & 2) >>> (i2 >>> (i2 >>> 1 & 2) >>> 1 & 1)) << 2) >> 2] | 0;
    i3 = (HEAP32[i2 + 4 >> 2] & -8) - i12 | 0;
    i4 = i2;
    while (1) {
     i5 = HEAP32[i4 + 16 >> 2] | 0;
     if ((i5 | 0) == 0) {
      i5 = HEAP32[i4 + 20 >> 2] | 0;
      if ((i5 | 0) == 0) break;
     }
     i4 = (HEAP32[i5 + 4 >> 2] & -8) - i12 | 0;
     i29 = i4 >>> 0 < i3 >>> 0;
     i3 = i29 ? i4 : i3;
     i4 = i5;
     i2 = i29 ? i5 : i2;
    }
    i6 = HEAP32[5290] | 0;
    if (i2 >>> 0 < i6 >>> 0) _abort();
    i4 = i2 + i12 | 0;
    if (!(i2 >>> 0 < i4 >>> 0)) _abort();
    i5 = HEAP32[i2 + 24 >> 2] | 0;
    i7 = HEAP32[i2 + 12 >> 2] | 0;
    do if ((i7 | 0) == (i2 | 0)) {
     i8 = i2 + 20 | 0;
     i7 = HEAP32[i8 >> 2] | 0;
     if ((i7 | 0) == 0) {
      i8 = i2 + 16 | 0;
      i7 = HEAP32[i8 >> 2] | 0;
      if ((i7 | 0) == 0) {
       i24 = 0;
       break;
      }
     }
     while (1) {
      i9 = i7 + 20 | 0;
      i10 = HEAP32[i9 >> 2] | 0;
      if ((i10 | 0) != 0) {
       i7 = i10;
       i8 = i9;
       continue;
      }
      i10 = i7 + 16 | 0;
      i9 = HEAP32[i10 >> 2] | 0;
      if ((i9 | 0) == 0) break; else {
       i7 = i9;
       i8 = i10;
      }
     }
     if (i8 >>> 0 < i6 >>> 0) _abort(); else {
      HEAP32[i8 >> 2] = 0;
      i24 = i7;
      break;
     }
    } else {
     i8 = HEAP32[i2 + 8 >> 2] | 0;
     if (i8 >>> 0 < i6 >>> 0) _abort();
     if ((HEAP32[i8 + 12 >> 2] | 0) != (i2 | 0)) _abort();
     if ((HEAP32[i7 + 8 >> 2] | 0) == (i2 | 0)) {
      HEAP32[i8 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i8;
      i24 = i7;
      break;
     } else _abort();
    } while (0);
    do if ((i5 | 0) != 0) {
     i6 = HEAP32[i2 + 28 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[21448 + (i6 << 2) >> 2] | 0)) {
      HEAP32[21448 + (i6 << 2) >> 2] = i24;
      if ((i24 | 0) == 0) {
       HEAP32[5287] = HEAP32[5287] & ~(1 << i6);
       break;
      }
     } else {
      if (i5 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
      if ((HEAP32[i5 + 16 >> 2] | 0) == (i2 | 0)) HEAP32[i5 + 16 >> 2] = i24; else HEAP32[i5 + 20 >> 2] = i24;
      if ((i24 | 0) == 0) break;
     }
     if (i24 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
     HEAP32[i24 + 24 >> 2] = i5;
     i5 = HEAP32[i2 + 16 >> 2] | 0;
     do if ((i5 | 0) != 0) if (i5 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
      HEAP32[i24 + 16 >> 2] = i5;
      HEAP32[i5 + 24 >> 2] = i24;
      break;
     } while (0);
     i5 = HEAP32[i2 + 20 >> 2] | 0;
     if ((i5 | 0) != 0) if (i5 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
      HEAP32[i24 + 20 >> 2] = i5;
      HEAP32[i5 + 24 >> 2] = i24;
      break;
     }
    } while (0);
    if (i3 >>> 0 < 16) {
     i29 = i3 + i12 | 0;
     HEAP32[i2 + 4 >> 2] = i29 | 3;
     i29 = i2 + (i29 + 4) | 0;
     HEAP32[i29 >> 2] = HEAP32[i29 >> 2] | 1;
    } else {
     HEAP32[i2 + 4 >> 2] = i12 | 3;
     HEAP32[i2 + (i12 | 4) >> 2] = i3 | 1;
     HEAP32[i2 + (i3 + i12) >> 2] = i3;
     i5 = HEAP32[5288] | 0;
     if ((i5 | 0) != 0) {
      i6 = HEAP32[5291] | 0;
      i7 = HEAP32[5286] | 0;
      if ((i7 & 1 << (i5 >>> 3) | 0) != 0) {
       i7 = HEAP32[21184 + ((i5 >>> 3 << 1) + 2 << 2) >> 2] | 0;
       if (i7 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
        i23 = 21184 + ((i5 >>> 3 << 1) + 2 << 2) | 0;
        i22 = i7;
       }
      } else {
       HEAP32[5286] = i7 | 1 << (i5 >>> 3);
       i23 = 21184 + ((i5 >>> 3 << 1) + 2 << 2) | 0;
       i22 = 21184 + (i5 >>> 3 << 1 << 2) | 0;
      }
      HEAP32[i23 >> 2] = i6;
      HEAP32[i22 + 12 >> 2] = i6;
      HEAP32[i6 + 8 >> 2] = i22;
      HEAP32[i6 + 12 >> 2] = 21184 + (i5 >>> 3 << 1 << 2);
     }
     HEAP32[5288] = i3;
     HEAP32[5291] = i4;
    }
    i29 = i2 + 8 | 0;
    STACKTOP = i1;
    return i29 | 0;
   }
  }
 } else if (!(i27 >>> 0 > 4294967231)) {
  i12 = i27 + 11 & -8;
  i24 = HEAP32[5287] | 0;
  if ((i24 | 0) != 0) {
   if (((i27 + 11 | 0) >>> 8 | 0) != 0) if (i12 >>> 0 > 16777215) i25 = 31; else {
    i25 = (i27 + 11 | 0) >>> 8 << ((((i27 + 11 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8);
    i25 = 14 - ((i25 + 520192 | 0) >>> 16 & 4 | (((i27 + 11 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8 | ((i25 << ((i25 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) + (i25 << ((i25 + 520192 | 0) >>> 16 & 4) << (((i25 << ((i25 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
    i25 = i12 >>> (i25 + 7 | 0) & 1 | i25 << 1;
   } else i25 = 0;
   i26 = HEAP32[21448 + (i25 << 2) >> 2] | 0;
   L126 : do if ((i26 | 0) == 0) {
    i23 = 0 - i12 | 0;
    i27 = 0;
    i22 = 0;
   } else {
    if ((i25 | 0) == 31) i22 = 0; else i22 = 25 - (i25 >>> 1) | 0;
    i23 = 0 - i12 | 0;
    i27 = 0;
    i28 = i12 << i22;
    i22 = 0;
    while (1) {
     i29 = HEAP32[i26 + 4 >> 2] & -8;
     if ((i29 - i12 | 0) >>> 0 < i23 >>> 0) if ((i29 | 0) == (i12 | 0)) {
      i23 = i29 - i12 | 0;
      i27 = i26;
      i22 = i26;
      break L126;
     } else {
      i23 = i29 - i12 | 0;
      i22 = i26;
     }
     i29 = HEAP32[i26 + 20 >> 2] | 0;
     i26 = HEAP32[i26 + (i28 >>> 31 << 2) + 16 >> 2] | 0;
     i27 = (i29 | 0) == 0 | (i29 | 0) == (i26 | 0) ? i27 : i29;
     if ((i26 | 0) == 0) break; else i28 = i28 << 1;
    }
   } while (0);
   if ((i27 | 0) == 0 & (i22 | 0) == 0) {
    i25 = 2 << i25;
    if ((i24 & (i25 | 0 - i25) | 0) == 0) break;
    i28 = (i24 & (i25 | 0 - i25) & 0 - (i24 & (i25 | 0 - i25))) + -1 | 0;
    i29 = i28 >>> (i28 >>> 12 & 16) >>> (i28 >>> (i28 >>> 12 & 16) >>> 5 & 8);
    i27 = i29 >>> (i29 >>> 2 & 4) >>> (i29 >>> (i29 >>> 2 & 4) >>> 1 & 2);
    i27 = HEAP32[21448 + ((i28 >>> (i28 >>> 12 & 16) >>> 5 & 8 | i28 >>> 12 & 16 | i29 >>> 2 & 4 | i29 >>> (i29 >>> 2 & 4) >>> 1 & 2 | i27 >>> 1 & 1) + (i27 >>> (i27 >>> 1 & 1)) << 2) >> 2] | 0;
   }
   if ((i27 | 0) != 0) while (1) {
    i29 = (HEAP32[i27 + 4 >> 2] & -8) - i12 | 0;
    i24 = i29 >>> 0 < i23 >>> 0;
    i23 = i24 ? i29 : i23;
    i22 = i24 ? i27 : i22;
    i24 = HEAP32[i27 + 16 >> 2] | 0;
    if ((i24 | 0) != 0) {
     i27 = i24;
     continue;
    }
    i27 = HEAP32[i27 + 20 >> 2] | 0;
    if ((i27 | 0) == 0) break;
   }
   if ((i22 | 0) != 0 ? i23 >>> 0 < ((HEAP32[5288] | 0) - i12 | 0) >>> 0 : 0) {
    i4 = HEAP32[5290] | 0;
    if (i22 >>> 0 < i4 >>> 0) _abort();
    i2 = i22 + i12 | 0;
    if (!(i22 >>> 0 < i2 >>> 0)) _abort();
    i3 = HEAP32[i22 + 24 >> 2] | 0;
    i5 = HEAP32[i22 + 12 >> 2] | 0;
    do if ((i5 | 0) == (i22 | 0)) {
     i6 = i22 + 20 | 0;
     i5 = HEAP32[i6 >> 2] | 0;
     if ((i5 | 0) == 0) {
      i6 = i22 + 16 | 0;
      i5 = HEAP32[i6 >> 2] | 0;
      if ((i5 | 0) == 0) {
       i21 = 0;
       break;
      }
     }
     while (1) {
      i8 = i5 + 20 | 0;
      i7 = HEAP32[i8 >> 2] | 0;
      if ((i7 | 0) != 0) {
       i5 = i7;
       i6 = i8;
       continue;
      }
      i8 = i5 + 16 | 0;
      i7 = HEAP32[i8 >> 2] | 0;
      if ((i7 | 0) == 0) break; else {
       i5 = i7;
       i6 = i8;
      }
     }
     if (i6 >>> 0 < i4 >>> 0) _abort(); else {
      HEAP32[i6 >> 2] = 0;
      i21 = i5;
      break;
     }
    } else {
     i6 = HEAP32[i22 + 8 >> 2] | 0;
     if (i6 >>> 0 < i4 >>> 0) _abort();
     if ((HEAP32[i6 + 12 >> 2] | 0) != (i22 | 0)) _abort();
     if ((HEAP32[i5 + 8 >> 2] | 0) == (i22 | 0)) {
      HEAP32[i6 + 12 >> 2] = i5;
      HEAP32[i5 + 8 >> 2] = i6;
      i21 = i5;
      break;
     } else _abort();
    } while (0);
    do if ((i3 | 0) != 0) {
     i4 = HEAP32[i22 + 28 >> 2] | 0;
     if ((i22 | 0) == (HEAP32[21448 + (i4 << 2) >> 2] | 0)) {
      HEAP32[21448 + (i4 << 2) >> 2] = i21;
      if ((i21 | 0) == 0) {
       HEAP32[5287] = HEAP32[5287] & ~(1 << i4);
       break;
      }
     } else {
      if (i3 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
      if ((HEAP32[i3 + 16 >> 2] | 0) == (i22 | 0)) HEAP32[i3 + 16 >> 2] = i21; else HEAP32[i3 + 20 >> 2] = i21;
      if ((i21 | 0) == 0) break;
     }
     if (i21 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
     HEAP32[i21 + 24 >> 2] = i3;
     i3 = HEAP32[i22 + 16 >> 2] | 0;
     do if ((i3 | 0) != 0) if (i3 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
      HEAP32[i21 + 16 >> 2] = i3;
      HEAP32[i3 + 24 >> 2] = i21;
      break;
     } while (0);
     i3 = HEAP32[i22 + 20 >> 2] | 0;
     if ((i3 | 0) != 0) if (i3 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
      HEAP32[i21 + 20 >> 2] = i3;
      HEAP32[i3 + 24 >> 2] = i21;
      break;
     }
    } while (0);
    L204 : do if (!(i23 >>> 0 < 16)) {
     HEAP32[i22 + 4 >> 2] = i12 | 3;
     HEAP32[i22 + (i12 | 4) >> 2] = i23 | 1;
     HEAP32[i22 + (i23 + i12) >> 2] = i23;
     i3 = i23 >>> 3;
     if (i23 >>> 0 < 256) {
      i4 = HEAP32[5286] | 0;
      do if ((i4 & 1 << i3 | 0) == 0) {
       HEAP32[5286] = i4 | 1 << i3;
       i19 = 21184 + ((i3 << 1) + 2 << 2) | 0;
       i18 = 21184 + (i3 << 1 << 2) | 0;
      } else {
       i4 = HEAP32[21184 + ((i3 << 1) + 2 << 2) >> 2] | 0;
       if (!(i4 >>> 0 < (HEAP32[5290] | 0) >>> 0)) {
        i19 = 21184 + ((i3 << 1) + 2 << 2) | 0;
        i18 = i4;
        break;
       }
       _abort();
      } while (0);
      HEAP32[i19 >> 2] = i2;
      HEAP32[i18 + 12 >> 2] = i2;
      HEAP32[i22 + (i12 + 8) >> 2] = i18;
      HEAP32[i22 + (i12 + 12) >> 2] = 21184 + (i3 << 1 << 2);
      break;
     }
     i3 = i23 >>> 8;
     if ((i3 | 0) != 0) if (i23 >>> 0 > 16777215) i3 = 31; else {
      i29 = i3 << ((i3 + 1048320 | 0) >>> 16 & 8) << (((i3 << ((i3 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4);
      i3 = 14 - (((i3 << ((i3 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4 | (i3 + 1048320 | 0) >>> 16 & 8 | (i29 + 245760 | 0) >>> 16 & 2) + (i29 << ((i29 + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
      i3 = i23 >>> (i3 + 7 | 0) & 1 | i3 << 1;
     } else i3 = 0;
     i4 = 21448 + (i3 << 2) | 0;
     HEAP32[i22 + (i12 + 28) >> 2] = i3;
     HEAP32[i22 + (i12 + 20) >> 2] = 0;
     HEAP32[i22 + (i12 + 16) >> 2] = 0;
     i6 = HEAP32[5287] | 0;
     i5 = 1 << i3;
     if ((i6 & i5 | 0) == 0) {
      HEAP32[5287] = i6 | i5;
      HEAP32[i4 >> 2] = i2;
      HEAP32[i22 + (i12 + 24) >> 2] = i4;
      HEAP32[i22 + (i12 + 12) >> 2] = i2;
      HEAP32[i22 + (i12 + 8) >> 2] = i2;
      break;
     }
     i4 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) == 31) i3 = 0; else i3 = 25 - (i3 >>> 1) | 0;
     L224 : do if ((HEAP32[i4 + 4 >> 2] & -8 | 0) != (i23 | 0)) {
      i3 = i23 << i3;
      while (1) {
       i5 = i4 + (i3 >>> 31 << 2) + 16 | 0;
       i6 = HEAP32[i5 >> 2] | 0;
       if ((i6 | 0) == 0) break;
       if ((HEAP32[i6 + 4 >> 2] & -8 | 0) == (i23 | 0)) {
        i13 = i6;
        break L224;
       } else {
        i3 = i3 << 1;
        i4 = i6;
       }
      }
      if (i5 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
       HEAP32[i5 >> 2] = i2;
       HEAP32[i22 + (i12 + 24) >> 2] = i4;
       HEAP32[i22 + (i12 + 12) >> 2] = i2;
       HEAP32[i22 + (i12 + 8) >> 2] = i2;
       break L204;
      }
     } else i13 = i4; while (0);
     i3 = i13 + 8 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i5 = HEAP32[5290] | 0;
     if (i13 >>> 0 < i5 >>> 0) _abort();
     if (i4 >>> 0 < i5 >>> 0) _abort(); else {
      HEAP32[i4 + 12 >> 2] = i2;
      HEAP32[i3 >> 2] = i2;
      HEAP32[i22 + (i12 + 8) >> 2] = i4;
      HEAP32[i22 + (i12 + 12) >> 2] = i13;
      HEAP32[i22 + (i12 + 24) >> 2] = 0;
      break;
     }
    } else {
     i29 = i23 + i12 | 0;
     HEAP32[i22 + 4 >> 2] = i29 | 3;
     i29 = i22 + (i29 + 4) | 0;
     HEAP32[i29 >> 2] = HEAP32[i29 >> 2] | 1;
    } while (0);
    i29 = i22 + 8 | 0;
    STACKTOP = i1;
    return i29 | 0;
   }
  }
 } else i12 = -1; while (0);
 i13 = HEAP32[5288] | 0;
 if (!(i12 >>> 0 > i13 >>> 0)) {
  i2 = i13 - i12 | 0;
  i3 = HEAP32[5291] | 0;
  if (i2 >>> 0 > 15) {
   HEAP32[5291] = i3 + i12;
   HEAP32[5288] = i2;
   HEAP32[i3 + (i12 + 4) >> 2] = i2 | 1;
   HEAP32[i3 + i13 >> 2] = i2;
   HEAP32[i3 + 4 >> 2] = i12 | 3;
  } else {
   HEAP32[5288] = 0;
   HEAP32[5291] = 0;
   HEAP32[i3 + 4 >> 2] = i13 | 3;
   HEAP32[i3 + (i13 + 4) >> 2] = HEAP32[i3 + (i13 + 4) >> 2] | 1;
  }
  i29 = i3 + 8 | 0;
  STACKTOP = i1;
  return i29 | 0;
 }
 i13 = HEAP32[5289] | 0;
 if (i12 >>> 0 < i13 >>> 0) {
  i28 = i13 - i12 | 0;
  HEAP32[5289] = i28;
  i29 = HEAP32[5292] | 0;
  HEAP32[5292] = i29 + i12;
  HEAP32[i29 + (i12 + 4) >> 2] = i28 | 1;
  HEAP32[i29 + 4 >> 2] = i12 | 3;
  i29 = i29 + 8 | 0;
  STACKTOP = i1;
  return i29 | 0;
 }
 do if ((HEAP32[5404] | 0) == 0) {
  i13 = _sysconf(30) | 0;
  if ((i13 + -1 & i13 | 0) == 0) {
   HEAP32[5406] = i13;
   HEAP32[5405] = i13;
   HEAP32[5407] = -1;
   HEAP32[5408] = -1;
   HEAP32[5409] = 0;
   HEAP32[5397] = 0;
   i29 = (_time(0) | 0) & -16 ^ 1431655768;
   HEAP32[5404] = i29;
   break;
  } else _abort();
 } while (0);
 i19 = i12 + 48 | 0;
 i13 = HEAP32[5406] | 0;
 i21 = i12 + 47 | 0;
 i18 = i13 + i21 & 0 - i13;
 if (!(i18 >>> 0 > i12 >>> 0)) {
  i29 = 0;
  STACKTOP = i1;
  return i29 | 0;
 }
 i22 = HEAP32[5396] | 0;
 if ((i22 | 0) != 0 ? (i29 = HEAP32[5394] | 0, (i29 + i18 | 0) >>> 0 <= i29 >>> 0 | (i29 + i18 | 0) >>> 0 > i22 >>> 0) : 0) {
  i29 = 0;
  STACKTOP = i1;
  return i29 | 0;
 }
 L269 : do if ((HEAP32[5397] & 4 | 0) == 0) {
  i22 = HEAP32[5292] | 0;
  L271 : do if ((i22 | 0) != 0) {
   i23 = 21592 | 0;
   while (1) {
    i24 = HEAP32[i23 >> 2] | 0;
    if (!(i24 >>> 0 > i22 >>> 0) ? (i20 = i23 + 4 | 0, (i24 + (HEAP32[i20 >> 2] | 0) | 0) >>> 0 > i22 >>> 0) : 0) break;
    i23 = HEAP32[i23 + 8 >> 2] | 0;
    if ((i23 | 0) == 0) {
     i11 = 182;
     break L271;
    }
   }
   if ((i23 | 0) != 0) {
    i24 = i13 + i21 - (HEAP32[5289] | 0) & 0 - i13;
    if (i24 >>> 0 < 2147483647) {
     i13 = _sbrk(i24 | 0) | 0;
     i23 = (i13 | 0) == ((HEAP32[i23 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) | 0);
     i20 = i13;
     i22 = i24;
     i13 = i23 ? i13 : -1;
     i23 = i23 ? i24 : 0;
     i11 = 191;
    } else i23 = 0;
   } else i11 = 182;
  } else i11 = 182; while (0);
  do if ((i11 | 0) == 182) {
   i23 = _sbrk(0) | 0;
   if ((i23 | 0) != (-1 | 0)) {
    i13 = HEAP32[5405] | 0;
    if ((i13 + -1 & i23 | 0) == 0) i24 = i18; else i24 = i18 - i23 + (i13 + -1 + i23 & 0 - i13) | 0;
    i20 = HEAP32[5394] | 0;
    i13 = i20 + i24 | 0;
    if (i24 >>> 0 > i12 >>> 0 & i24 >>> 0 < 2147483647) {
     i29 = HEAP32[5396] | 0;
     if ((i29 | 0) != 0 ? i13 >>> 0 <= i20 >>> 0 | i13 >>> 0 > i29 >>> 0 : 0) {
      i23 = 0;
      break;
     }
     i11 = _sbrk(i24 | 0) | 0;
     i20 = i11;
     i22 = i24;
     i13 = (i11 | 0) == (i23 | 0) ? i23 : -1;
     i23 = (i11 | 0) == (i23 | 0) ? i24 : 0;
     i11 = 191;
    } else i23 = 0;
   } else i23 = 0;
  } while (0);
  L291 : do if ((i11 | 0) == 191) {
   i11 = 0 - i22 | 0;
   if ((i13 | 0) != (-1 | 0)) {
    i14 = i23;
    i11 = 202;
    break L269;
   }
   do if ((i20 | 0) != (-1 | 0) & i22 >>> 0 < 2147483647 & i22 >>> 0 < i19 >>> 0 ? (i17 = HEAP32[5406] | 0, i17 = i21 - i22 + i17 & 0 - i17, i17 >>> 0 < 2147483647) : 0) if ((_sbrk(i17 | 0) | 0) == (-1 | 0)) {
    _sbrk(i11 | 0) | 0;
    break L291;
   } else {
    i22 = i17 + i22 | 0;
    break;
   } while (0);
   if ((i20 | 0) != (-1 | 0)) {
    i13 = i20;
    i14 = i22;
    i11 = 202;
    break L269;
   }
  } while (0);
  HEAP32[5397] = HEAP32[5397] | 4;
  i11 = 199;
 } else {
  i23 = 0;
  i11 = 199;
 } while (0);
 if ((((i11 | 0) == 199 ? i18 >>> 0 < 2147483647 : 0) ? (i16 = _sbrk(i18 | 0) | 0, i15 = _sbrk(0) | 0, (i15 | 0) != (-1 | 0) & (i16 | 0) != (-1 | 0) & i16 >>> 0 < i15 >>> 0) : 0) ? (i14 = (i15 - i16 | 0) >>> 0 > (i12 + 40 | 0) >>> 0, i14) : 0) {
  i13 = i16;
  i14 = i14 ? i15 - i16 | 0 : i23;
  i11 = 202;
 }
 if ((i11 | 0) == 202) {
  i15 = (HEAP32[5394] | 0) + i14 | 0;
  HEAP32[5394] = i15;
  if (i15 >>> 0 > (HEAP32[5395] | 0) >>> 0) HEAP32[5395] = i15;
  i15 = HEAP32[5292] | 0;
  L311 : do if ((i15 | 0) != 0) {
   i20 = 21592 | 0;
   while (1) {
    i17 = HEAP32[i20 >> 2] | 0;
    i18 = i20 + 4 | 0;
    i19 = HEAP32[i18 >> 2] | 0;
    if ((i13 | 0) == (i17 + i19 | 0)) {
     i11 = 214;
     break;
    }
    i16 = HEAP32[i20 + 8 >> 2] | 0;
    if ((i16 | 0) == 0) break; else i20 = i16;
   }
   if (((i11 | 0) == 214 ? (HEAP32[i20 + 12 >> 2] & 8 | 0) == 0 : 0) ? i15 >>> 0 >= i17 >>> 0 & i15 >>> 0 < i13 >>> 0 : 0) {
    HEAP32[i18 >> 2] = i19 + i14;
    i3 = (HEAP32[5289] | 0) + i14 | 0;
    if ((i15 + 8 & 7 | 0) == 0) i2 = 0; else i2 = 0 - (i15 + 8) & 7;
    i29 = i3 - i2 | 0;
    HEAP32[5292] = i15 + i2;
    HEAP32[5289] = i29;
    HEAP32[i15 + (i2 + 4) >> 2] = i29 | 1;
    HEAP32[i15 + (i3 + 4) >> 2] = 40;
    HEAP32[5293] = HEAP32[5408];
    break;
   }
   if (i13 >>> 0 < (HEAP32[5290] | 0) >>> 0) HEAP32[5290] = i13;
   i17 = i13 + i14 | 0;
   i16 = 21592 | 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) == (i17 | 0)) {
     i11 = 224;
     break;
    }
    i18 = HEAP32[i16 + 8 >> 2] | 0;
    if ((i18 | 0) == 0) break; else i16 = i18;
   }
   if ((i11 | 0) == 224 ? (HEAP32[i16 + 12 >> 2] & 8 | 0) == 0 : 0) {
    HEAP32[i16 >> 2] = i13;
    i6 = i16 + 4 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i14;
    i6 = i13 + 8 | 0;
    if ((i6 & 7 | 0) == 0) i6 = 0; else i6 = 0 - i6 & 7;
    i8 = i13 + (i14 + 8) | 0;
    if ((i8 & 7 | 0) == 0) i15 = 0; else i15 = 0 - i8 & 7;
    i16 = i13 + (i15 + i14) | 0;
    i8 = i6 + i12 | 0;
    i9 = i13 + i8 | 0;
    i10 = i16 - (i13 + i6) - i12 | 0;
    HEAP32[i13 + (i6 + 4) >> 2] = i12 | 3;
    L348 : do if ((i16 | 0) != (HEAP32[5292] | 0)) {
     if ((i16 | 0) == (HEAP32[5291] | 0)) {
      i29 = (HEAP32[5288] | 0) + i10 | 0;
      HEAP32[5288] = i29;
      HEAP32[5291] = i9;
      HEAP32[i13 + (i8 + 4) >> 2] = i29 | 1;
      HEAP32[i13 + (i29 + i8) >> 2] = i29;
      break;
     }
     i12 = i14 + 4 | 0;
     i11 = HEAP32[i13 + (i12 + i15) >> 2] | 0;
     if ((i11 & 3 | 0) == 1) {
      L355 : do if (!(i11 >>> 0 < 256)) {
       i7 = HEAP32[i13 + ((i15 | 24) + i14) >> 2] | 0;
       i18 = HEAP32[i13 + (i14 + 12 + i15) >> 2] | 0;
       do if ((i18 | 0) == (i16 | 0)) {
        i19 = i15 | 16;
        i18 = i13 + (i12 + i19) | 0;
        i17 = HEAP32[i18 >> 2] | 0;
        if ((i17 | 0) == 0) {
         i18 = i13 + (i19 + i14) | 0;
         i17 = HEAP32[i18 >> 2] | 0;
         if ((i17 | 0) == 0) {
          i5 = 0;
          break;
         }
        }
        while (1) {
         i19 = i17 + 20 | 0;
         i20 = HEAP32[i19 >> 2] | 0;
         if ((i20 | 0) != 0) {
          i17 = i20;
          i18 = i19;
          continue;
         }
         i19 = i17 + 16 | 0;
         i20 = HEAP32[i19 >> 2] | 0;
         if ((i20 | 0) == 0) break; else {
          i17 = i20;
          i18 = i19;
         }
        }
        if (i18 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
         HEAP32[i18 >> 2] = 0;
         i5 = i17;
         break;
        }
       } else {
        i17 = HEAP32[i13 + ((i15 | 8) + i14) >> 2] | 0;
        if (i17 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
        if ((HEAP32[i17 + 12 >> 2] | 0) != (i16 | 0)) _abort();
        if ((HEAP32[i18 + 8 >> 2] | 0) == (i16 | 0)) {
         HEAP32[i17 + 12 >> 2] = i18;
         HEAP32[i18 + 8 >> 2] = i17;
         i5 = i18;
         break;
        } else _abort();
       } while (0);
       if ((i7 | 0) == 0) break;
       i17 = HEAP32[i13 + (i14 + 28 + i15) >> 2] | 0;
       do if ((i16 | 0) != (HEAP32[21448 + (i17 << 2) >> 2] | 0)) {
        if (i7 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
        if ((HEAP32[i7 + 16 >> 2] | 0) == (i16 | 0)) HEAP32[i7 + 16 >> 2] = i5; else HEAP32[i7 + 20 >> 2] = i5;
        if ((i5 | 0) == 0) break L355;
       } else {
        HEAP32[21448 + (i17 << 2) >> 2] = i5;
        if ((i5 | 0) != 0) break;
        HEAP32[5287] = HEAP32[5287] & ~(1 << i17);
        break L355;
       } while (0);
       if (i5 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
       HEAP32[i5 + 24 >> 2] = i7;
       i7 = i15 | 16;
       i16 = HEAP32[i13 + (i7 + i14) >> 2] | 0;
       do if ((i16 | 0) != 0) if (i16 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
        HEAP32[i5 + 16 >> 2] = i16;
        HEAP32[i16 + 24 >> 2] = i5;
        break;
       } while (0);
       i7 = HEAP32[i13 + (i12 + i7) >> 2] | 0;
       if ((i7 | 0) == 0) break;
       if (i7 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
        HEAP32[i5 + 20 >> 2] = i7;
        HEAP32[i7 + 24 >> 2] = i5;
        break;
       }
      } else {
       i5 = HEAP32[i13 + ((i15 | 8) + i14) >> 2] | 0;
       i12 = HEAP32[i13 + (i14 + 12 + i15) >> 2] | 0;
       do if ((i5 | 0) != (21184 + (i11 >>> 3 << 1 << 2) | 0)) {
        if (i5 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
        if ((HEAP32[i5 + 12 >> 2] | 0) == (i16 | 0)) break;
        _abort();
       } while (0);
       if ((i12 | 0) == (i5 | 0)) {
        HEAP32[5286] = HEAP32[5286] & ~(1 << (i11 >>> 3));
        break;
       }
       do if ((i12 | 0) == (21184 + (i11 >>> 3 << 1 << 2) | 0)) i7 = i12 + 8 | 0; else {
        if (i12 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
        if ((HEAP32[i12 + 8 >> 2] | 0) == (i16 | 0)) {
         i7 = i12 + 8 | 0;
         break;
        }
        _abort();
       } while (0);
       HEAP32[i5 + 12 >> 2] = i12;
       HEAP32[i7 >> 2] = i5;
      } while (0);
      i16 = i13 + ((i11 & -8 | i15) + i14) | 0;
      i10 = (i11 & -8) + i10 | 0;
     }
     i5 = i16 + 4 | 0;
     HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
     HEAP32[i13 + (i8 + 4) >> 2] = i10 | 1;
     HEAP32[i13 + (i10 + i8) >> 2] = i10;
     i5 = i10 >>> 3;
     if (i10 >>> 0 < 256) {
      i2 = HEAP32[5286] | 0;
      do if ((i2 & 1 << i5 | 0) == 0) {
       HEAP32[5286] = i2 | 1 << i5;
       i4 = 21184 + ((i5 << 1) + 2 << 2) | 0;
       i3 = 21184 + (i5 << 1 << 2) | 0;
      } else {
       i2 = HEAP32[21184 + ((i5 << 1) + 2 << 2) >> 2] | 0;
       if (!(i2 >>> 0 < (HEAP32[5290] | 0) >>> 0)) {
        i4 = 21184 + ((i5 << 1) + 2 << 2) | 0;
        i3 = i2;
        break;
       }
       _abort();
      } while (0);
      HEAP32[i4 >> 2] = i9;
      HEAP32[i3 + 12 >> 2] = i9;
      HEAP32[i13 + (i8 + 8) >> 2] = i3;
      HEAP32[i13 + (i8 + 12) >> 2] = 21184 + (i5 << 1 << 2);
      break;
     }
     i3 = i10 >>> 8;
     do if ((i3 | 0) == 0) i3 = 0; else {
      if (i10 >>> 0 > 16777215) {
       i3 = 31;
       break;
      }
      i29 = i3 << ((i3 + 1048320 | 0) >>> 16 & 8) << (((i3 << ((i3 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4);
      i3 = 14 - (((i3 << ((i3 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4 | (i3 + 1048320 | 0) >>> 16 & 8 | (i29 + 245760 | 0) >>> 16 & 2) + (i29 << ((i29 + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
      i3 = i10 >>> (i3 + 7 | 0) & 1 | i3 << 1;
     } while (0);
     i7 = 21448 + (i3 << 2) | 0;
     HEAP32[i13 + (i8 + 28) >> 2] = i3;
     HEAP32[i13 + (i8 + 20) >> 2] = 0;
     HEAP32[i13 + (i8 + 16) >> 2] = 0;
     i4 = HEAP32[5287] | 0;
     i5 = 1 << i3;
     if ((i4 & i5 | 0) == 0) {
      HEAP32[5287] = i4 | i5;
      HEAP32[i7 >> 2] = i9;
      HEAP32[i13 + (i8 + 24) >> 2] = i7;
      HEAP32[i13 + (i8 + 12) >> 2] = i9;
      HEAP32[i13 + (i8 + 8) >> 2] = i9;
      break;
     }
     i4 = HEAP32[i7 >> 2] | 0;
     if ((i3 | 0) == 31) i3 = 0; else i3 = 25 - (i3 >>> 1) | 0;
     L444 : do if ((HEAP32[i4 + 4 >> 2] & -8 | 0) != (i10 | 0)) {
      i3 = i10 << i3;
      while (1) {
       i5 = i4 + (i3 >>> 31 << 2) + 16 | 0;
       i7 = HEAP32[i5 >> 2] | 0;
       if ((i7 | 0) == 0) break;
       if ((HEAP32[i7 + 4 >> 2] & -8 | 0) == (i10 | 0)) {
        i2 = i7;
        break L444;
       } else {
        i3 = i3 << 1;
        i4 = i7;
       }
      }
      if (i5 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
       HEAP32[i5 >> 2] = i9;
       HEAP32[i13 + (i8 + 24) >> 2] = i4;
       HEAP32[i13 + (i8 + 12) >> 2] = i9;
       HEAP32[i13 + (i8 + 8) >> 2] = i9;
       break L348;
      }
     } else i2 = i4; while (0);
     i4 = i2 + 8 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i5 = HEAP32[5290] | 0;
     if (i2 >>> 0 < i5 >>> 0) _abort();
     if (i3 >>> 0 < i5 >>> 0) _abort(); else {
      HEAP32[i3 + 12 >> 2] = i9;
      HEAP32[i4 >> 2] = i9;
      HEAP32[i13 + (i8 + 8) >> 2] = i3;
      HEAP32[i13 + (i8 + 12) >> 2] = i2;
      HEAP32[i13 + (i8 + 24) >> 2] = 0;
      break;
     }
    } else {
     i29 = (HEAP32[5289] | 0) + i10 | 0;
     HEAP32[5289] = i29;
     HEAP32[5292] = i9;
     HEAP32[i13 + (i8 + 4) >> 2] = i29 | 1;
    } while (0);
    i29 = i13 + (i6 | 8) | 0;
    STACKTOP = i1;
    return i29 | 0;
   }
   i2 = 21592 | 0;
   while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    if (!(i3 >>> 0 > i15 >>> 0) ? (i10 = HEAP32[i2 + 4 >> 2] | 0, (i3 + i10 | 0) >>> 0 > i15 >>> 0) : 0) break;
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   }
   if ((i3 + (i10 + -39) & 7 | 0) == 0) i2 = 0; else i2 = 0 - (i3 + (i10 + -39)) & 7;
   i2 = i3 + (i10 + -47 + i2) | 0;
   i2 = i2 >>> 0 < (i15 + 16 | 0) >>> 0 ? i15 : i2;
   i4 = i13 + 8 | 0;
   if ((i4 & 7 | 0) == 0) i4 = 0; else i4 = 0 - i4 & 7;
   i29 = i14 + -40 - i4 | 0;
   HEAP32[5292] = i13 + i4;
   HEAP32[5289] = i29;
   HEAP32[i13 + (i4 + 4) >> 2] = i29 | 1;
   HEAP32[i13 + (i14 + -36) >> 2] = 40;
   HEAP32[5293] = HEAP32[5408];
   HEAP32[i2 + 4 >> 2] = 27;
   HEAP32[i2 + 8 >> 2] = HEAP32[5398];
   HEAP32[i2 + 12 >> 2] = HEAP32[5399];
   HEAP32[i2 + 16 >> 2] = HEAP32[5400];
   HEAP32[i2 + 20 >> 2] = HEAP32[5401];
   HEAP32[5398] = i13;
   HEAP32[5399] = i14;
   HEAP32[5401] = 0;
   HEAP32[5400] = i2 + 8;
   HEAP32[i2 + 28 >> 2] = 7;
   if ((i2 + 32 | 0) >>> 0 < (i3 + i10 | 0) >>> 0) {
    i4 = i2 + 28 | 0;
    do {
     i29 = i4;
     i4 = i4 + 4 | 0;
     HEAP32[i4 >> 2] = 7;
    } while ((i29 + 8 | 0) >>> 0 < (i3 + i10 | 0) >>> 0);
   }
   if ((i2 | 0) != (i15 | 0)) {
    HEAP32[i15 + (i2 - i15 + 4) >> 2] = HEAP32[i15 + (i2 - i15 + 4) >> 2] & -2;
    HEAP32[i15 + 4 >> 2] = i2 - i15 | 1;
    HEAP32[i15 + (i2 - i15) >> 2] = i2 - i15;
    if ((i2 - i15 | 0) >>> 0 < 256) {
     i3 = HEAP32[5286] | 0;
     do if ((i3 & 1 << ((i2 - i15 | 0) >>> 3) | 0) == 0) {
      HEAP32[5286] = i3 | 1 << ((i2 - i15 | 0) >>> 3);
      i9 = 21184 + (((i2 - i15 | 0) >>> 3 << 1) + 2 << 2) | 0;
      i8 = 21184 + ((i2 - i15 | 0) >>> 3 << 1 << 2) | 0;
     } else {
      i3 = HEAP32[21184 + (((i2 - i15 | 0) >>> 3 << 1) + 2 << 2) >> 2] | 0;
      if (!(i3 >>> 0 < (HEAP32[5290] | 0) >>> 0)) {
       i9 = 21184 + (((i2 - i15 | 0) >>> 3 << 1) + 2 << 2) | 0;
       i8 = i3;
       break;
      }
      _abort();
     } while (0);
     HEAP32[i9 >> 2] = i15;
     HEAP32[i8 + 12 >> 2] = i15;
     HEAP32[i15 + 8 >> 2] = i8;
     HEAP32[i15 + 12 >> 2] = 21184 + ((i2 - i15 | 0) >>> 3 << 1 << 2);
     break;
    }
    if (((i2 - i15 | 0) >>> 8 | 0) != 0) if ((i2 - i15 | 0) >>> 0 > 16777215) i3 = 31; else {
     i3 = (i2 - i15 | 0) >>> 8 << ((((i2 - i15 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8);
     i3 = 14 - ((i3 + 520192 | 0) >>> 16 & 4 | (((i2 - i15 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8 | ((i3 << ((i3 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) + (i3 << ((i3 + 520192 | 0) >>> 16 & 4) << (((i3 << ((i3 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
     i3 = (i2 - i15 | 0) >>> (i3 + 7 | 0) & 1 | i3 << 1;
    } else i3 = 0;
    i7 = 21448 + (i3 << 2) | 0;
    HEAP32[i15 + 28 >> 2] = i3;
    HEAP32[i15 + 20 >> 2] = 0;
    HEAP32[i15 + 16 >> 2] = 0;
    i4 = HEAP32[5287] | 0;
    i5 = 1 << i3;
    if ((i4 & i5 | 0) == 0) {
     HEAP32[5287] = i4 | i5;
     HEAP32[i7 >> 2] = i15;
     HEAP32[i15 + 24 >> 2] = i7;
     HEAP32[i15 + 12 >> 2] = i15;
     HEAP32[i15 + 8 >> 2] = i15;
     break;
    }
    i5 = HEAP32[i7 >> 2] | 0;
    if ((i3 | 0) == 31) i3 = 0; else i3 = 25 - (i3 >>> 1) | 0;
    L499 : do if ((HEAP32[i5 + 4 >> 2] & -8 | 0) != (i2 - i15 | 0)) {
     i3 = i2 - i15 << i3;
     while (1) {
      i4 = i5 + (i3 >>> 31 << 2) + 16 | 0;
      i7 = HEAP32[i4 >> 2] | 0;
      if ((i7 | 0) == 0) break;
      if ((HEAP32[i7 + 4 >> 2] & -8 | 0) == (i2 - i15 | 0)) {
       i6 = i7;
       break L499;
      } else {
       i3 = i3 << 1;
       i5 = i7;
      }
     }
     if (i4 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
      HEAP32[i4 >> 2] = i15;
      HEAP32[i15 + 24 >> 2] = i5;
      HEAP32[i15 + 12 >> 2] = i15;
      HEAP32[i15 + 8 >> 2] = i15;
      break L311;
     }
    } else i6 = i5; while (0);
    i3 = i6 + 8 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    i4 = HEAP32[5290] | 0;
    if (i6 >>> 0 < i4 >>> 0) _abort();
    if (i2 >>> 0 < i4 >>> 0) _abort(); else {
     HEAP32[i2 + 12 >> 2] = i15;
     HEAP32[i3 >> 2] = i15;
     HEAP32[i15 + 8 >> 2] = i2;
     HEAP32[i15 + 12 >> 2] = i6;
     HEAP32[i15 + 24 >> 2] = 0;
     break;
    }
   }
  } else {
   i29 = HEAP32[5290] | 0;
   if ((i29 | 0) == 0 | i13 >>> 0 < i29 >>> 0) HEAP32[5290] = i13;
   HEAP32[5398] = i13;
   HEAP32[5399] = i14;
   HEAP32[5401] = 0;
   HEAP32[5295] = HEAP32[5404];
   HEAP32[5294] = -1;
   i2 = 0;
   do {
    i29 = i2 << 1;
    HEAP32[21184 + (i29 + 3 << 2) >> 2] = 21184 + (i29 << 2);
    HEAP32[21184 + (i29 + 2 << 2) >> 2] = 21184 + (i29 << 2);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 32);
   i2 = i13 + 8 | 0;
   if ((i2 & 7 | 0) == 0) i2 = 0; else i2 = 0 - i2 & 7;
   i29 = i14 + -40 - i2 | 0;
   HEAP32[5292] = i13 + i2;
   HEAP32[5289] = i29;
   HEAP32[i13 + (i2 + 4) >> 2] = i29 | 1;
   HEAP32[i13 + (i14 + -36) >> 2] = 40;
   HEAP32[5293] = HEAP32[5408];
  } while (0);
  i2 = HEAP32[5289] | 0;
  if (i2 >>> 0 > i12 >>> 0) {
   i28 = i2 - i12 | 0;
   HEAP32[5289] = i28;
   i29 = HEAP32[5292] | 0;
   HEAP32[5292] = i29 + i12;
   HEAP32[i29 + (i12 + 4) >> 2] = i28 | 1;
   HEAP32[i29 + 4 >> 2] = i12 | 3;
   i29 = i29 + 8 | 0;
   STACKTOP = i1;
   return i29 | 0;
  }
 }
 i29 = ___errno_location() | 0;
 HEAP32[i29 >> 2] = 12;
 i29 = 0;
 STACKTOP = i1;
 return i29 | 0;
}
function __ZN23btDiscreteDynamicsWorld14debugDrawWorldEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, i31 = 0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1576);
 __ZN16btCollisionWorld14debugDrawWorldEv(i2);
 L1 : do if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0) != 0 ? (i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0, ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 48 >> 2] & 127](i31) | 0) & 6144 | 0) != 0) : 0) {
  i3 = i1 + 988 | 0;
  i11 = i1 + 896 | 0;
  i10 = i1 + 832 | 0;
  i13 = i1 + 912 | 0;
  i12 = i1 + 848 | 0;
  i15 = i1 + 928 | 0;
  i14 = i1 + 864 | 0;
  i17 = i1 + 720 | 0;
  i16 = i1 + 656 | 0;
  i19 = i1 + 736 | 0;
  i18 = i1 + 672 | 0;
  i21 = i1 + 752 | 0;
  i20 = i1 + 688 | 0;
  i4 = i1 + 336 | 0;
  i5 = i1 + 352 | 0;
  i6 = i1 + 368 | 0;
  i7 = i1 + 112 | 0;
  i8 = i1 + 128 | 0;
  i9 = i1 + 144 | 0;
  i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 104 >> 2] & 127](i2) | 0;
  L4 : while (1) {
   i22 = i24 + -1 | 0;
   if ((i24 | 0) <= 0) break L1;
   i24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 108 >> 2] & 31](i2, i22) | 0;
   i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   i31 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 48 >> 2] & 127](i31) | 0) >>> 11;
   i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   i25 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 48 >> 2] & 127](i25) | 0) >>> 12;
   d23 = +HEAPF32[i24 + 40 >> 2];
   if (d23 <= 0.0) {
    i24 = i22;
    continue;
   }
   switch (HEAP32[i24 + 4 >> 2] | 0) {
   case 3:
    {
     HEAPF32[i1 + 944 >> 2] = 1.0;
     HEAP32[i1 + 948 >> 2] = 0;
     HEAP32[i1 + 952 >> 2] = 0;
     HEAP32[i1 + 956 >> 2] = 0;
     HEAP32[i1 + 960 >> 2] = 0;
     HEAPF32[i1 + 964 >> 2] = 1.0;
     HEAP32[i1 + 968 >> 2] = 0;
     HEAP32[i1 + 972 >> 2] = 0;
     HEAP32[i1 + 976 >> 2] = 0;
     HEAP32[i1 + 980 >> 2] = 0;
     HEAPF32[i1 + 984 >> 2] = 1.0;
     HEAP32[i3 + 0 >> 2] = 0;
     HEAP32[i3 + 4 >> 2] = 0;
     HEAP32[i3 + 8 >> 2] = 0;
     HEAP32[i3 + 12 >> 2] = 0;
     HEAP32[i3 + 16 >> 2] = 0;
     d30 = +HEAPF32[i24 + 300 >> 2];
     d29 = +HEAPF32[i24 + 304 >> 2];
     d32 = +HEAPF32[i24 + 308 >> 2];
     i28 = HEAP32[i24 + 28 >> 2] | 0;
     d33 = d30 * +HEAPF32[i28 + 20 >> 2] + d29 * +HEAPF32[i28 + 24 >> 2] + d32 * +HEAPF32[i28 + 28 >> 2] + +HEAPF32[i28 + 56 >> 2];
     d34 = d30 * +HEAPF32[i28 + 36 >> 2] + d29 * +HEAPF32[i28 + 40 >> 2] + d32 * +HEAPF32[i28 + 44 >> 2] + +HEAPF32[i28 + 60 >> 2];
     HEAPF32[i1 + 992 >> 2] = d30 * +HEAPF32[i28 + 4 >> 2] + d29 * +HEAPF32[i28 + 8 >> 2] + d32 * +HEAPF32[i28 + 12 >> 2] + +HEAPF32[i28 + 52 >> 2];
     HEAPF32[i1 + 996 >> 2] = d33;
     HEAPF32[i1 + 1e3 >> 2] = d34;
     HEAPF32[i1 + 1004 >> 2] = 0.0;
     i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     FUNCTION_TABLE_viid[HEAP32[(HEAP32[i28 >> 2] | 0) + 56 >> 2] & 7](i28, i1 + 944 | 0, d23);
     d34 = +HEAPF32[i24 + 316 >> 2];
     d33 = +HEAPF32[i24 + 320 >> 2];
     d32 = +HEAPF32[i24 + 324 >> 2];
     i28 = HEAP32[i24 + 32 >> 2] | 0;
     d29 = d34 * +HEAPF32[i28 + 20 >> 2] + d33 * +HEAPF32[i28 + 24 >> 2] + d32 * +HEAPF32[i28 + 28 >> 2] + +HEAPF32[i28 + 56 >> 2];
     d30 = d34 * +HEAPF32[i28 + 36 >> 2] + d33 * +HEAPF32[i28 + 40 >> 2] + d32 * +HEAPF32[i28 + 44 >> 2] + +HEAPF32[i28 + 60 >> 2];
     HEAPF32[i1 + 992 >> 2] = d34 * +HEAPF32[i28 + 4 >> 2] + d33 * +HEAPF32[i28 + 8 >> 2] + d32 * +HEAPF32[i28 + 12 >> 2] + +HEAPF32[i28 + 52 >> 2];
     HEAPF32[i1 + 996 >> 2] = d29;
     HEAPF32[i1 + 1e3 >> 2] = d30;
     HEAPF32[i1 + 1004 >> 2] = 0.0;
     if ((i31 & 1 | 0) == 0) {
      i24 = i22;
      continue L4;
     }
     i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     FUNCTION_TABLE_viid[HEAP32[(HEAP32[i24 >> 2] | 0) + 56 >> 2] & 7](i24, i1 + 944 | 0, d23);
     i24 = i22;
     continue L4;
    }
   case 4:
    {
     __ZNK11btTransformmlERKS_(i1 + 880 | 0, (HEAP32[i24 + 28 >> 2] | 0) + 4 | 0, i24 + 552 | 0);
     if ((i31 & 1 | 0) == 0) {
      __ZNK11btTransformmlERKS_(i1 + 816 | 0, (HEAP32[i24 + 32 >> 2] | 0) + 4 | 0, i24 + 616 | 0);
      HEAP32[i1 + 880 >> 2] = HEAP32[i1 + 816 >> 2];
      HEAP32[i1 + 884 >> 2] = HEAP32[i1 + 820 >> 2];
      HEAP32[i1 + 888 >> 2] = HEAP32[i1 + 824 >> 2];
      HEAP32[i1 + 892 >> 2] = HEAP32[i1 + 828 >> 2];
      HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
      HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
      HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
      HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
      HEAP32[i13 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
      HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
      HEAP32[i15 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
      HEAP32[i15 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
      HEAP32[i15 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
     } else {
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i31 >> 2] | 0) + 56 >> 2] & 7](i31, i1 + 880 | 0, d23);
      __ZNK11btTransformmlERKS_(i1 + 816 | 0, (HEAP32[i24 + 32 >> 2] | 0) + 4 | 0, i24 + 616 | 0);
      HEAP32[i1 + 880 >> 2] = HEAP32[i1 + 816 >> 2];
      HEAP32[i1 + 884 >> 2] = HEAP32[i1 + 820 >> 2];
      HEAP32[i1 + 888 >> 2] = HEAP32[i1 + 824 >> 2];
      HEAP32[i1 + 892 >> 2] = HEAP32[i1 + 828 >> 2];
      HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
      HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
      HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
      HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
      HEAP32[i13 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
      HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
      HEAP32[i15 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
      HEAP32[i15 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
      HEAP32[i15 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i31 >> 2] | 0) + 56 >> 2] & 7](i31, i1 + 880 | 0, d23);
     }
     d29 = +_fmodf(+(+HEAPF32[i24 + 688 >> 2] - +HEAPF32[i24 + 692 >> 2]), 6.2831854820251465);
     if (!(d29 < -3.1415927410125732)) {
      if (d29 > 3.1415927410125732) d29 = d29 + -6.2831854820251465;
     } else d29 = d29 + 6.2831854820251465;
     d30 = +_fmodf(+(+HEAPF32[i24 + 688 >> 2] + +HEAPF32[i24 + 692 >> 2]), 6.2831854820251465);
     if (!(d30 < -3.1415927410125732)) {
      if (d30 > 3.1415927410125732) d30 = d30 + -6.2831854820251465;
     } else d30 = d30 + 6.2831854820251465;
     if (d29 == d30) {
      i24 = i22;
      continue L4;
     }
     i24 = d29 > d30;
     if ((i25 & 1 | 0) == 0) {
      i24 = i22;
      continue L4;
     }
     HEAPF32[i1 + 800 >> 2] = +HEAPF32[i1 + 888 >> 2];
     HEAPF32[i1 + 804 >> 2] = +HEAPF32[i1 + 904 >> 2];
     HEAPF32[i1 + 808 >> 2] = +HEAPF32[i1 + 920 >> 2];
     HEAPF32[i1 + 812 >> 2] = 0.0;
     HEAPF32[i1 + 784 >> 2] = +HEAPF32[i1 + 880 >> 2];
     HEAPF32[i1 + 788 >> 2] = +HEAPF32[i1 + 896 >> 2];
     HEAPF32[i1 + 792 >> 2] = +HEAPF32[i1 + 912 >> 2];
     HEAPF32[i1 + 796 >> 2] = 0.0;
     i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     i28 = HEAP32[(HEAP32[i31 >> 2] | 0) + 60 >> 2] | 0;
     HEAP32[i1 + 768 >> 2] = 0;
     HEAP32[i1 + 772 >> 2] = 0;
     HEAP32[i1 + 776 >> 2] = 0;
     HEAP32[i1 + 780 >> 2] = 0;
     FUNCTION_TABLE_viiiiddddiid[i28 & 0](i31, i15, i1 + 800 | 0, i1 + 784 | 0, d23, d23, i24 ? 0.0 : d29, i24 ? 6.2831854820251465 : d30, i1 + 768 | 0, i24 ^ 1, 10.0);
     i24 = i22;
     continue L4;
    }
   case 5:
    {
     __ZNK11btTransformmlERKS_(i1 + 704 | 0, (HEAP32[i24 + 28 >> 2] | 0) + 4 | 0, i24 + 300 | 0);
     if ((i31 & 1 | 0) == 0) {
      __ZNK11btTransformmlERKS_(i1 + 640 | 0, (HEAP32[i24 + 32 >> 2] | 0) + 4 | 0, i24 + 364 | 0);
      HEAP32[i1 + 704 >> 2] = HEAP32[i1 + 640 >> 2];
      HEAP32[i1 + 708 >> 2] = HEAP32[i1 + 644 >> 2];
      HEAP32[i1 + 712 >> 2] = HEAP32[i1 + 648 >> 2];
      HEAP32[i1 + 716 >> 2] = HEAP32[i1 + 652 >> 2];
      HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
      HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
      HEAP32[i19 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
      HEAP32[i19 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
      HEAP32[i19 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
      HEAP32[i19 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
      HEAP32[i21 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
      HEAP32[i21 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
      HEAP32[i21 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
      HEAP32[i21 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
     } else {
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i31 >> 2] | 0) + 56 >> 2] & 7](i31, i1 + 704 | 0, d23);
      __ZNK11btTransformmlERKS_(i1 + 640 | 0, (HEAP32[i24 + 32 >> 2] | 0) + 4 | 0, i24 + 364 | 0);
      HEAP32[i1 + 704 >> 2] = HEAP32[i1 + 640 >> 2];
      HEAP32[i1 + 708 >> 2] = HEAP32[i1 + 644 >> 2];
      HEAP32[i1 + 712 >> 2] = HEAP32[i1 + 648 >> 2];
      HEAP32[i1 + 716 >> 2] = HEAP32[i1 + 652 >> 2];
      HEAP32[i17 + 0 >> 2] = HEAP32[i16 + 0 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
      HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
      HEAP32[i19 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
      HEAP32[i19 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
      HEAP32[i19 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
      HEAP32[i19 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
      HEAP32[i21 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
      HEAP32[i21 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
      HEAP32[i21 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
      HEAP32[i21 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i31 >> 2] | 0) + 56 >> 2] & 7](i31, i1 + 704 | 0, d23);
     }
     if ((i25 & 1 | 0) == 0) {
      i24 = i22;
      continue L4;
     }
     __ZNK21btConeTwistConstraint16GetPointForAngleEff(i1 + 624 | 0, i24, 6.0868353843688965, d23);
     d29 = +HEAPF32[i1 + 624 >> 2];
     d30 = +HEAPF32[i1 + 628 >> 2];
     d32 = +HEAPF32[i1 + 632 >> 2];
     d33 = d29 * +HEAPF32[i1 + 720 >> 2] + d30 * +HEAPF32[i1 + 724 >> 2] + d32 * +HEAPF32[i1 + 728 >> 2] + +HEAPF32[i1 + 756 >> 2];
     d34 = d29 * +HEAPF32[i1 + 736 >> 2] + d30 * +HEAPF32[i1 + 740 >> 2] + d32 * +HEAPF32[i1 + 744 >> 2] + +HEAPF32[i1 + 760 >> 2];
     HEAPF32[i1 + 624 >> 2] = d29 * +HEAPF32[i1 + 704 >> 2] + d30 * +HEAPF32[i1 + 708 >> 2] + d32 * +HEAPF32[i1 + 712 >> 2] + +HEAPF32[i1 + 752 >> 2];
     HEAPF32[i1 + 628 >> 2] = d33;
     HEAPF32[i1 + 632 >> 2] = d34;
     HEAPF32[i1 + 636 >> 2] = 0.0;
     i25 = 0;
     do {
      __ZNK21btConeTwistConstraint16GetPointForAngleEff(i1 + 608 | 0, i24, +(i25 | 0) * 6.283185005187988 * .03125, d23);
      d29 = +HEAPF32[i1 + 608 >> 2];
      d30 = +HEAPF32[i1 + 612 >> 2];
      d32 = +HEAPF32[i1 + 616 >> 2];
      d33 = d29 * +HEAPF32[i1 + 720 >> 2] + d30 * +HEAPF32[i1 + 724 >> 2] + d32 * +HEAPF32[i1 + 728 >> 2] + +HEAPF32[i1 + 756 >> 2];
      d34 = d29 * +HEAPF32[i1 + 736 >> 2] + d30 * +HEAPF32[i1 + 740 >> 2] + d32 * +HEAPF32[i1 + 744 >> 2] + +HEAPF32[i1 + 760 >> 2];
      HEAPF32[i1 + 608 >> 2] = d29 * +HEAPF32[i1 + 704 >> 2] + d30 * +HEAPF32[i1 + 708 >> 2] + d32 * +HEAPF32[i1 + 712 >> 2] + +HEAPF32[i1 + 752 >> 2];
      HEAPF32[i1 + 612 >> 2] = d33;
      HEAPF32[i1 + 616 >> 2] = d34;
      HEAPF32[i1 + 620 >> 2] = 0.0;
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      i28 = HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0;
      HEAP32[i1 + 592 >> 2] = 0;
      HEAP32[i1 + 596 >> 2] = 0;
      HEAP32[i1 + 600 >> 2] = 0;
      HEAP32[i1 + 604 >> 2] = 0;
      FUNCTION_TABLE_viiii[i28 & 127](i31, i1 + 624 | 0, i1 + 608 | 0, i1 + 592 | 0);
      if ((i25 & 3 | 0) == 0) {
       i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
       i28 = HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] | 0;
       HEAP32[i1 + 576 >> 2] = 0;
       HEAP32[i1 + 580 >> 2] = 0;
       HEAP32[i1 + 584 >> 2] = 0;
       HEAP32[i1 + 588 >> 2] = 0;
       FUNCTION_TABLE_viiii[i28 & 127](i31, i21, i1 + 608 | 0, i1 + 576 | 0);
      }
      HEAP32[i1 + 624 >> 2] = HEAP32[i1 + 608 >> 2];
      HEAP32[i1 + 628 >> 2] = HEAP32[i1 + 612 >> 2];
      HEAP32[i1 + 632 >> 2] = HEAP32[i1 + 616 >> 2];
      HEAP32[i1 + 636 >> 2] = HEAP32[i1 + 620 >> 2];
      i25 = i25 + 1 | 0;
     } while ((i25 | 0) != 32);
     d30 = +HEAPF32[i24 + 452 >> 2];
     d29 = +HEAPF32[i24 + 512 >> 2];
     i25 = HEAP32[i24 + 32 >> 2] | 0;
     if (+HEAPF32[i25 + 344 >> 2] > 0.0) {
      __ZNK11btTransformmlERKS_(i1 + 512 | 0, i25 + 4 | 0, i24 + 364 | 0);
      HEAP32[i1 + 704 >> 2] = HEAP32[i1 + 512 >> 2];
      HEAP32[i1 + 708 >> 2] = HEAP32[i1 + 516 >> 2];
      HEAP32[i1 + 712 >> 2] = HEAP32[i1 + 520 >> 2];
      HEAP32[i1 + 716 >> 2] = HEAP32[i1 + 524 >> 2];
      HEAP32[i17 + 0 >> 2] = HEAP32[i1 + 528 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i1 + 532 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i1 + 536 >> 2];
      HEAP32[i17 + 12 >> 2] = HEAP32[i1 + 540 >> 2];
      HEAP32[i19 + 0 >> 2] = HEAP32[i1 + 544 >> 2];
      HEAP32[i19 + 4 >> 2] = HEAP32[i1 + 548 >> 2];
      HEAP32[i19 + 8 >> 2] = HEAP32[i1 + 552 >> 2];
      HEAP32[i19 + 12 >> 2] = HEAP32[i1 + 556 >> 2];
      HEAP32[i21 + 0 >> 2] = HEAP32[i1 + 560 >> 2];
      HEAP32[i21 + 4 >> 2] = HEAP32[i1 + 564 >> 2];
      HEAP32[i21 + 8 >> 2] = HEAP32[i1 + 568 >> 2];
      HEAP32[i21 + 12 >> 2] = HEAP32[i1 + 572 >> 2];
     } else {
      __ZNK11btTransformmlERKS_(i1 + 448 | 0, (HEAP32[i24 + 28 >> 2] | 0) + 4 | 0, i24 + 300 | 0);
      HEAP32[i1 + 704 >> 2] = HEAP32[i1 + 448 >> 2];
      HEAP32[i1 + 708 >> 2] = HEAP32[i1 + 452 >> 2];
      HEAP32[i1 + 712 >> 2] = HEAP32[i1 + 456 >> 2];
      HEAP32[i1 + 716 >> 2] = HEAP32[i1 + 460 >> 2];
      HEAP32[i17 + 0 >> 2] = HEAP32[i1 + 464 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i1 + 468 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i1 + 472 >> 2];
      HEAP32[i17 + 12 >> 2] = HEAP32[i1 + 476 >> 2];
      HEAP32[i19 + 0 >> 2] = HEAP32[i1 + 480 >> 2];
      HEAP32[i19 + 4 >> 2] = HEAP32[i1 + 484 >> 2];
      HEAP32[i19 + 8 >> 2] = HEAP32[i1 + 488 >> 2];
      HEAP32[i19 + 12 >> 2] = HEAP32[i1 + 492 >> 2];
      HEAP32[i21 + 0 >> 2] = HEAP32[i1 + 496 >> 2];
      HEAP32[i21 + 4 >> 2] = HEAP32[i1 + 500 >> 2];
      HEAP32[i21 + 8 >> 2] = HEAP32[i1 + 504 >> 2];
      HEAP32[i21 + 12 >> 2] = HEAP32[i1 + 508 >> 2];
     }
     HEAP32[i1 + 432 >> 2] = HEAP32[i21 + 0 >> 2];
     HEAP32[i1 + 436 >> 2] = HEAP32[i21 + 4 >> 2];
     HEAP32[i1 + 440 >> 2] = HEAP32[i21 + 8 >> 2];
     HEAP32[i1 + 444 >> 2] = HEAP32[i21 + 12 >> 2];
     HEAPF32[i1 + 416 >> 2] = +HEAPF32[i1 + 704 >> 2];
     HEAPF32[i1 + 420 >> 2] = +HEAPF32[i1 + 720 >> 2];
     HEAPF32[i1 + 424 >> 2] = +HEAPF32[i1 + 736 >> 2];
     HEAPF32[i1 + 428 >> 2] = 0.0;
     HEAPF32[i1 + 400 >> 2] = +HEAPF32[i1 + 708 >> 2];
     HEAPF32[i1 + 404 >> 2] = +HEAPF32[i1 + 724 >> 2];
     HEAPF32[i1 + 408 >> 2] = +HEAPF32[i1 + 740 >> 2];
     HEAPF32[i1 + 412 >> 2] = 0.0;
     i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     i31 = HEAP32[(HEAP32[i24 >> 2] | 0) + 60 >> 2] | 0;
     HEAP32[i1 + 384 >> 2] = 0;
     HEAP32[i1 + 388 >> 2] = 0;
     HEAP32[i1 + 392 >> 2] = 0;
     HEAP32[i1 + 396 >> 2] = 0;
     FUNCTION_TABLE_viiiiddddiid[i31 & 0](i24, i1 + 432 | 0, i1 + 416 | 0, i1 + 400 | 0, d23, d23, -d29 - d30, d30 - d29, i1 + 384 | 0, 1, 10.0);
     i24 = i22;
     continue L4;
    }
   case 6:
   case 9:
    {
     HEAP32[i1 + 320 >> 2] = HEAP32[i24 + 1064 >> 2];
     HEAP32[i1 + 324 >> 2] = HEAP32[i24 + 1068 >> 2];
     HEAP32[i1 + 328 >> 2] = HEAP32[i24 + 1072 >> 2];
     HEAP32[i1 + 332 >> 2] = HEAP32[i24 + 1076 >> 2];
     i27 = i24 + 1080 | 0;
     HEAP32[i4 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
     i28 = i24 + 1096 | 0;
     HEAP32[i5 + 0 >> 2] = HEAP32[i28 + 0 >> 2];
     HEAP32[i5 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
     HEAP32[i5 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
     HEAP32[i5 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
     i26 = i24 + 1112 | 0;
     HEAP32[i6 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
     if ((i31 & 1 | 0) == 0) {
      HEAP32[i1 + 320 >> 2] = HEAP32[i24 + 1128 >> 2];
      HEAP32[i1 + 324 >> 2] = HEAP32[i24 + 1132 >> 2];
      HEAP32[i1 + 328 >> 2] = HEAP32[i24 + 1136 >> 2];
      HEAP32[i1 + 332 >> 2] = HEAP32[i24 + 1140 >> 2];
      HEAP32[i4 + 0 >> 2] = HEAP32[i24 + 1144 >> 2];
      HEAP32[i4 + 4 >> 2] = HEAP32[i24 + 1148 >> 2];
      HEAP32[i4 + 8 >> 2] = HEAP32[i24 + 1152 >> 2];
      HEAP32[i4 + 12 >> 2] = HEAP32[i24 + 1156 >> 2];
      HEAP32[i5 + 0 >> 2] = HEAP32[i24 + 1160 >> 2];
      HEAP32[i5 + 4 >> 2] = HEAP32[i24 + 1164 >> 2];
      HEAP32[i5 + 8 >> 2] = HEAP32[i24 + 1168 >> 2];
      HEAP32[i5 + 12 >> 2] = HEAP32[i24 + 1172 >> 2];
      HEAP32[i6 + 0 >> 2] = HEAP32[i24 + 1176 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i24 + 1180 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i24 + 1184 >> 2];
      HEAP32[i6 + 12 >> 2] = HEAP32[i24 + 1188 >> 2];
     } else {
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i31 >> 2] | 0) + 56 >> 2] & 7](i31, i1 + 320 | 0, d23);
      HEAP32[i1 + 320 >> 2] = HEAP32[i24 + 1128 >> 2];
      HEAP32[i1 + 324 >> 2] = HEAP32[i24 + 1132 >> 2];
      HEAP32[i1 + 328 >> 2] = HEAP32[i24 + 1136 >> 2];
      HEAP32[i1 + 332 >> 2] = HEAP32[i24 + 1140 >> 2];
      HEAP32[i4 + 0 >> 2] = HEAP32[i24 + 1144 >> 2];
      HEAP32[i4 + 4 >> 2] = HEAP32[i24 + 1148 >> 2];
      HEAP32[i4 + 8 >> 2] = HEAP32[i24 + 1152 >> 2];
      HEAP32[i4 + 12 >> 2] = HEAP32[i24 + 1156 >> 2];
      HEAP32[i5 + 0 >> 2] = HEAP32[i24 + 1160 >> 2];
      HEAP32[i5 + 4 >> 2] = HEAP32[i24 + 1164 >> 2];
      HEAP32[i5 + 8 >> 2] = HEAP32[i24 + 1168 >> 2];
      HEAP32[i5 + 12 >> 2] = HEAP32[i24 + 1172 >> 2];
      HEAP32[i6 + 0 >> 2] = HEAP32[i24 + 1176 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i24 + 1180 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i24 + 1184 >> 2];
      HEAP32[i6 + 12 >> 2] = HEAP32[i24 + 1188 >> 2];
      i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i31 >> 2] | 0) + 56 >> 2] & 7](i31, i1 + 320 | 0, d23);
     }
     if ((i25 & 1 | 0) == 0) {
      i24 = i22;
      continue L4;
     }
     HEAP32[i1 + 320 >> 2] = HEAP32[i24 + 1064 >> 2];
     HEAP32[i1 + 324 >> 2] = HEAP32[i24 + 1068 >> 2];
     HEAP32[i1 + 328 >> 2] = HEAP32[i24 + 1072 >> 2];
     HEAP32[i1 + 332 >> 2] = HEAP32[i24 + 1076 >> 2];
     HEAP32[i4 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
     HEAP32[i5 + 0 >> 2] = HEAP32[i28 + 0 >> 2];
     HEAP32[i5 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
     HEAP32[i5 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
     HEAP32[i5 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
     HEAP32[i6 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
     i25 = i24 + 1176 | 0;
     HEAPF32[i1 + 304 >> 2] = +HEAPF32[i1 + 328 >> 2];
     HEAPF32[i1 + 308 >> 2] = +HEAPF32[i1 + 344 >> 2];
     HEAPF32[i1 + 312 >> 2] = +HEAPF32[i1 + 360 >> 2];
     HEAPF32[i1 + 316 >> 2] = 0.0;
     HEAPF32[i1 + 288 >> 2] = +HEAPF32[i1 + 320 >> 2];
     HEAPF32[i1 + 292 >> 2] = +HEAPF32[i1 + 336 >> 2];
     HEAPF32[i1 + 296 >> 2] = +HEAPF32[i1 + 352 >> 2];
     HEAPF32[i1 + 300 >> 2] = 0.0;
     d32 = +HEAPF32[i24 + 932 >> 2];
     d30 = +HEAPF32[i24 + 936 >> 2];
     d34 = +HEAPF32[i24 + 996 >> 2];
     d35 = +HEAPF32[i24 + 1e3 >> 2];
     i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     i37 = HEAP32[(HEAP32[i31 >> 2] | 0) + 64 >> 2] | 0;
     HEAP32[i1 + 272 >> 2] = 0;
     HEAP32[i1 + 276 >> 2] = 0;
     HEAP32[i1 + 280 >> 2] = 0;
     HEAP32[i1 + 284 >> 2] = 0;
     FUNCTION_TABLE_viiiidddddidi[i37 & 0](i31, i25, i1 + 304 | 0, i1 + 288 | 0, d23 * .8999999761581421, d32, d30, d34, d35, i1 + 272 | 0, 10.0, 1);
     d35 = +HEAPF32[i1 + 324 >> 2];
     d34 = +HEAPF32[i1 + 340 >> 2];
     d30 = +HEAPF32[i1 + 356 >> 2];
     HEAPF32[i1 + 288 >> 2] = d35;
     HEAPF32[i1 + 292 >> 2] = d34;
     HEAPF32[i1 + 296 >> 2] = d30;
     HEAPF32[i1 + 300 >> 2] = 0.0;
     d32 = +HEAPF32[i24 + 1196 >> 2];
     d33 = +HEAPF32[i24 + 1200 >> 2];
     d29 = +Math_cos(+d32);
     d32 = +Math_sin(+d32);
     d36 = +Math_cos(+d33);
     d33 = +Math_sin(+d33);
     HEAPF32[i1 + 256 >> 2] = d29 * d36 * d35 + d29 * d33 * d34 - d32 * d30;
     HEAPF32[i1 + 260 >> 2] = d36 * d34 - d33 * d35;
     HEAPF32[i1 + 264 >> 2] = d32 * d36 * d35 + d32 * d33 * d34 + d29 * d30;
     HEAP32[i1 + 320 >> 2] = HEAP32[i24 + 1128 >> 2];
     HEAP32[i1 + 324 >> 2] = HEAP32[i24 + 1132 >> 2];
     HEAP32[i1 + 328 >> 2] = HEAP32[i24 + 1136 >> 2];
     HEAP32[i1 + 332 >> 2] = HEAP32[i24 + 1140 >> 2];
     HEAP32[i4 + 0 >> 2] = HEAP32[i24 + 1144 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i24 + 1148 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i24 + 1152 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i24 + 1156 >> 2];
     HEAP32[i5 + 0 >> 2] = HEAP32[i24 + 1160 >> 2];
     HEAP32[i5 + 4 >> 2] = HEAP32[i24 + 1164 >> 2];
     HEAP32[i5 + 8 >> 2] = HEAP32[i24 + 1168 >> 2];
     HEAP32[i5 + 12 >> 2] = HEAP32[i24 + 1172 >> 2];
     HEAP32[i6 + 0 >> 2] = HEAP32[i25 + 0 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
     d30 = -+HEAPF32[i1 + 336 >> 2];
     d29 = -+HEAPF32[i1 + 352 >> 2];
     HEAPF32[i1 + 240 >> 2] = -+HEAPF32[i1 + 320 >> 2];
     HEAPF32[i1 + 244 >> 2] = d30;
     HEAPF32[i1 + 248 >> 2] = d29;
     HEAPF32[i1 + 252 >> 2] = 0.0;
     d29 = +HEAPF32[i24 + 868 >> 2];
     d30 = +HEAPF32[i24 + 872 >> 2];
     if (!(d29 > d30)) {
      if (d29 < d30) {
       i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
       i31 = HEAP32[(HEAP32[i37 >> 2] | 0) + 60 >> 2] | 0;
       HEAP32[i1 + 208 >> 2] = 0;
       HEAP32[i1 + 212 >> 2] = 0;
       HEAP32[i1 + 216 >> 2] = 0;
       HEAP32[i1 + 220 >> 2] = 0;
       FUNCTION_TABLE_viiiiddddiid[i31 & 0](i37, i25, i1 + 240 | 0, i1 + 256 | 0, d23, d23, d29, d30, i1 + 208 | 0, 1, 10.0);
      }
     } else {
      i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      i31 = HEAP32[(HEAP32[i37 >> 2] | 0) + 60 >> 2] | 0;
      HEAP32[i1 + 224 >> 2] = 0;
      HEAP32[i1 + 228 >> 2] = 0;
      HEAP32[i1 + 232 >> 2] = 0;
      HEAP32[i1 + 236 >> 2] = 0;
      FUNCTION_TABLE_viiiiddddiid[i31 & 0](i37, i25, i1 + 240 | 0, i1 + 256 | 0, d23, d23, -3.1415927410125732, 3.1415927410125732, i1 + 224 | 0, 0, 10.0);
     }
     HEAP32[i1 + 320 >> 2] = HEAP32[i24 + 1064 >> 2];
     HEAP32[i1 + 324 >> 2] = HEAP32[i24 + 1068 >> 2];
     HEAP32[i1 + 328 >> 2] = HEAP32[i24 + 1072 >> 2];
     HEAP32[i1 + 332 >> 2] = HEAP32[i24 + 1076 >> 2];
     HEAP32[i4 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
     HEAP32[i5 + 0 >> 2] = HEAP32[i28 + 0 >> 2];
     HEAP32[i5 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
     HEAP32[i5 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
     HEAP32[i5 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
     HEAP32[i6 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
     HEAP32[i1 + 192 >> 2] = HEAP32[i24 + 680 >> 2];
     HEAP32[i1 + 196 >> 2] = HEAP32[i24 + 684 >> 2];
     HEAP32[i1 + 200 >> 2] = HEAP32[i24 + 688 >> 2];
     HEAP32[i1 + 204 >> 2] = HEAP32[i24 + 692 >> 2];
     HEAP32[i1 + 176 >> 2] = HEAP32[i24 + 696 >> 2];
     HEAP32[i1 + 180 >> 2] = HEAP32[i24 + 700 >> 2];
     HEAP32[i1 + 184 >> 2] = HEAP32[i24 + 704 >> 2];
     HEAP32[i1 + 188 >> 2] = HEAP32[i24 + 708 >> 2];
     i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     i37 = HEAP32[(HEAP32[i24 >> 2] | 0) + 72 >> 2] | 0;
     HEAP32[i1 + 160 >> 2] = 0;
     HEAP32[i1 + 164 >> 2] = 0;
     HEAP32[i1 + 168 >> 2] = 0;
     HEAP32[i1 + 172 >> 2] = 0;
     FUNCTION_TABLE_viiiii[i37 & 31](i24, i1 + 192 | 0, i1 + 176 | 0, i1 + 320 | 0, i1 + 160 | 0);
     i24 = i22;
     continue L4;
    }
   case 7:
    {
     HEAP32[i1 + 96 >> 2] = HEAP32[i24 + 824 >> 2];
     HEAP32[i1 + 100 >> 2] = HEAP32[i24 + 828 >> 2];
     HEAP32[i1 + 104 >> 2] = HEAP32[i24 + 832 >> 2];
     HEAP32[i1 + 108 >> 2] = HEAP32[i24 + 836 >> 2];
     HEAP32[i7 + 0 >> 2] = HEAP32[i24 + 840 >> 2];
     HEAP32[i7 + 4 >> 2] = HEAP32[i24 + 844 >> 2];
     HEAP32[i7 + 8 >> 2] = HEAP32[i24 + 848 >> 2];
     HEAP32[i7 + 12 >> 2] = HEAP32[i24 + 852 >> 2];
     HEAP32[i8 + 0 >> 2] = HEAP32[i24 + 856 >> 2];
     HEAP32[i8 + 4 >> 2] = HEAP32[i24 + 860 >> 2];
     HEAP32[i8 + 8 >> 2] = HEAP32[i24 + 864 >> 2];
     HEAP32[i8 + 12 >> 2] = HEAP32[i24 + 868 >> 2];
     HEAP32[i9 + 0 >> 2] = HEAP32[i24 + 872 >> 2];
     HEAP32[i9 + 4 >> 2] = HEAP32[i24 + 876 >> 2];
     HEAP32[i9 + 8 >> 2] = HEAP32[i24 + 880 >> 2];
     HEAP32[i9 + 12 >> 2] = HEAP32[i24 + 884 >> 2];
     if ((i31 & 1 | 0) == 0) {
      HEAP32[i1 + 96 >> 2] = HEAP32[i24 + 888 >> 2];
      HEAP32[i1 + 100 >> 2] = HEAP32[i24 + 892 >> 2];
      HEAP32[i1 + 104 >> 2] = HEAP32[i24 + 896 >> 2];
      HEAP32[i1 + 108 >> 2] = HEAP32[i24 + 900 >> 2];
      HEAP32[i7 + 0 >> 2] = HEAP32[i24 + 904 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i24 + 908 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i24 + 912 >> 2];
      HEAP32[i7 + 12 >> 2] = HEAP32[i24 + 916 >> 2];
      HEAP32[i8 + 0 >> 2] = HEAP32[i24 + 920 >> 2];
      HEAP32[i8 + 4 >> 2] = HEAP32[i24 + 924 >> 2];
      HEAP32[i8 + 8 >> 2] = HEAP32[i24 + 928 >> 2];
      HEAP32[i8 + 12 >> 2] = HEAP32[i24 + 932 >> 2];
      HEAP32[i9 + 0 >> 2] = HEAP32[i24 + 936 >> 2];
      HEAP32[i9 + 4 >> 2] = HEAP32[i24 + 940 >> 2];
      HEAP32[i9 + 8 >> 2] = HEAP32[i24 + 944 >> 2];
      HEAP32[i9 + 12 >> 2] = HEAP32[i24 + 948 >> 2];
     } else {
      i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i37 >> 2] | 0) + 56 >> 2] & 7](i37, i1 + 96 | 0, d23);
      HEAP32[i1 + 96 >> 2] = HEAP32[i24 + 888 >> 2];
      HEAP32[i1 + 100 >> 2] = HEAP32[i24 + 892 >> 2];
      HEAP32[i1 + 104 >> 2] = HEAP32[i24 + 896 >> 2];
      HEAP32[i1 + 108 >> 2] = HEAP32[i24 + 900 >> 2];
      HEAP32[i7 + 0 >> 2] = HEAP32[i24 + 904 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i24 + 908 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i24 + 912 >> 2];
      HEAP32[i7 + 12 >> 2] = HEAP32[i24 + 916 >> 2];
      HEAP32[i8 + 0 >> 2] = HEAP32[i24 + 920 >> 2];
      HEAP32[i8 + 4 >> 2] = HEAP32[i24 + 924 >> 2];
      HEAP32[i8 + 8 >> 2] = HEAP32[i24 + 928 >> 2];
      HEAP32[i8 + 12 >> 2] = HEAP32[i24 + 932 >> 2];
      HEAP32[i9 + 0 >> 2] = HEAP32[i24 + 936 >> 2];
      HEAP32[i9 + 4 >> 2] = HEAP32[i24 + 940 >> 2];
      HEAP32[i9 + 8 >> 2] = HEAP32[i24 + 944 >> 2];
      HEAP32[i9 + 12 >> 2] = HEAP32[i24 + 948 >> 2];
      i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viid[HEAP32[(HEAP32[i37 >> 2] | 0) + 56 >> 2] & 7](i37, i1 + 96 | 0, d23);
     }
     if ((i25 & 1 | 0) == 0) {
      i24 = i22;
      continue L4;
     }
     i37 = (HEAP8[i24 + 180 >> 0] | 0) != 0 ? i24 + 824 | 0 : i24 + 888 | 0;
     d30 = +HEAPF32[i37 >> 2];
     d34 = +HEAPF32[i37 + 4 >> 2];
     d32 = +HEAPF32[i37 + 16 >> 2];
     d36 = +HEAPF32[i37 + 20 >> 2];
     d33 = +HEAPF32[i37 + 32 >> 2];
     d35 = +HEAPF32[i37 + 36 >> 2];
     d43 = +HEAPF32[i37 + 48 >> 2];
     d41 = +HEAPF32[i37 + 52 >> 2];
     d39 = +HEAPF32[i37 + 56 >> 2];
     d29 = +HEAPF32[i24 + 184 >> 2];
     d42 = +HEAPF32[i37 + 8 >> 2] * 0.0;
     d40 = +HEAPF32[i37 + 24 >> 2] * 0.0;
     d38 = +HEAPF32[i37 + 40 >> 2] * 0.0;
     HEAPF32[i1 + 80 >> 2] = d43 + (d42 + (d34 * 0.0 + d30 * d29));
     HEAPF32[i1 + 84 >> 2] = d41 + (d40 + (d36 * 0.0 + d32 * d29));
     HEAPF32[i1 + 88 >> 2] = d39 + (d38 + (d35 * 0.0 + d33 * d29));
     HEAPF32[i1 + 92 >> 2] = 0.0;
     d29 = +HEAPF32[i24 + 188 >> 2];
     HEAPF32[i1 + 64 >> 2] = d43 + (d42 + (d34 * 0.0 + d30 * d29));
     HEAPF32[i1 + 68 >> 2] = d41 + (d40 + (d36 * 0.0 + d32 * d29));
     HEAPF32[i1 + 72 >> 2] = d39 + (d38 + (d35 * 0.0 + d33 * d29));
     HEAPF32[i1 + 76 >> 2] = 0.0;
     i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     i31 = HEAP32[(HEAP32[i37 >> 2] | 0) + 8 >> 2] | 0;
     HEAP32[i1 + 48 >> 2] = 0;
     HEAP32[i1 + 52 >> 2] = 0;
     HEAP32[i1 + 56 >> 2] = 0;
     HEAP32[i1 + 60 >> 2] = 0;
     FUNCTION_TABLE_viiii[i31 & 127](i37, i1 + 80 | 0, i1 + 64 | 0, i1 + 48 | 0);
     HEAPF32[i1 + 32 >> 2] = d30;
     HEAPF32[i1 + 36 >> 2] = d32;
     HEAPF32[i1 + 40 >> 2] = d33;
     HEAPF32[i1 + 44 >> 2] = 0.0;
     HEAPF32[i1 + 16 >> 2] = d34;
     HEAPF32[i1 + 20 >> 2] = d36;
     HEAPF32[i1 + 24 >> 2] = d35;
     HEAPF32[i1 + 28 >> 2] = 0.0;
     d35 = +HEAPF32[i24 + 192 >> 2];
     d36 = +HEAPF32[i24 + 196 >> 2];
     i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
     i31 = HEAP32[(HEAP32[i37 >> 2] | 0) + 60 >> 2] | 0;
     HEAP32[i1 + 0 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 + 8 >> 2] = 0;
     HEAP32[i1 + 12 >> 2] = 0;
     FUNCTION_TABLE_viiiiddddiid[i31 & 0](i37, i24 + 936 | 0, i1 + 32 | 0, i1 + 16 | 0, d23, d23, d35, d36, i1, 1, 10.0);
     i24 = i22;
     continue L4;
    }
   default:
    {
     i24 = i22;
     continue L4;
    }
   }
  }
 } while (0);
 if (((((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0) != 0 ? (i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0, ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i37 >> 2] | 0) + 48 >> 2] & 127](i37) | 0) & 16387 | 0) != 0) : 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0) != 0 : 0) ? (i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i37 >> 2] | 0) + 48 >> 2] & 127](i37) | 0) != 0) : 0) ? (HEAP32[i2 + 280 >> 2] | 0) > 0 : 0) {
  i3 = 0;
  do {
   i37 = HEAP32[(HEAP32[i2 + 288 >> 2] | 0) + (i3 << 2) >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i37 >> 2] | 0) + 12 >> 2] & 127](i37, HEAP32[i2 + 72 >> 2] | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i2 + 280 >> 2] | 0));
 }
 i2 = HEAP32[5022] | 0;
 i37 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i37;
 if ((i37 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 + 1008 | 0, 0) | 0;
  i37 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 1012 >> 2] | 0) - (HEAP32[i37 + 4 >> 2] | 0) + (((HEAP32[i1 + 1008 >> 2] | 0) - (HEAP32[i37 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN16btBoxBoxDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i30, i8, i1, i2, i25) {
 i30 = i30 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, i44 = 0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, d61 = 0.0, d62 = 0.0, d63 = 0.0, i64 = 0, d65 = 0.0, d66 = 0.0, i67 = 0, i68 = 0, i69 = 0, d70 = 0.0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 656 | 0;
 HEAPF32[i2 + 48 >> 2] = +HEAPF32[i8 >> 2];
 HEAPF32[i2 >> 2] = +HEAPF32[i8 + 64 >> 2];
 i25 = i2 + 52 | 0;
 HEAPF32[i25 >> 2] = +HEAPF32[i8 + 4 >> 2];
 HEAPF32[i2 + 4 >> 2] = +HEAPF32[i8 + 68 >> 2];
 HEAPF32[i2 + 56 >> 2] = +HEAPF32[i8 + 8 >> 2];
 HEAPF32[i2 + 8 >> 2] = +HEAPF32[i8 + 72 >> 2];
 HEAPF32[i2 + 64 >> 2] = +HEAPF32[i8 + 16 >> 2];
 HEAPF32[i2 + 16 >> 2] = +HEAPF32[i8 + 80 >> 2];
 HEAPF32[i2 + 68 >> 2] = +HEAPF32[i8 + 20 >> 2];
 HEAPF32[i2 + 20 >> 2] = +HEAPF32[i8 + 84 >> 2];
 HEAPF32[i2 + 72 >> 2] = +HEAPF32[i8 + 24 >> 2];
 HEAPF32[i2 + 24 >> 2] = +HEAPF32[i8 + 88 >> 2];
 HEAPF32[i2 + 80 >> 2] = +HEAPF32[i8 + 32 >> 2];
 HEAPF32[i2 + 32 >> 2] = +HEAPF32[i8 + 96 >> 2];
 HEAPF32[i2 + 84 >> 2] = +HEAPF32[i8 + 36 >> 2];
 HEAPF32[i2 + 36 >> 2] = +HEAPF32[i8 + 100 >> 2];
 HEAPF32[i2 + 88 >> 2] = +HEAPF32[i8 + 40 >> 2];
 HEAPF32[i2 + 40 >> 2] = +HEAPF32[i8 + 104 >> 2];
 i78 = HEAP32[i30 + 4 >> 2] | 0;
 d22 = +HEAPF32[i78 + 28 >> 2];
 d23 = +HEAPF32[i78 + 32 >> 2];
 d27 = +HEAPF32[i78 + 36 >> 2];
 d24 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i78 >> 2] | 0) + 48 >> 2] & 15](i78);
 d26 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i78 >> 2] | 0) + 48 >> 2] & 15](i78);
 d27 = (d27 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i78 >> 2] | 0) + 48 >> 2] & 15](i78)) * 2.0;
 i78 = HEAP32[i30 + 8 >> 2] | 0;
 d18 = +HEAPF32[i78 + 28 >> 2];
 d20 = +HEAPF32[i78 + 32 >> 2];
 d12 = +HEAPF32[i78 + 36 >> 2];
 d17 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i78 >> 2] | 0) + 48 >> 2] & 15](i78);
 d19 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i78 >> 2] | 0) + 48 >> 2] & 15](i78);
 d12 = (d12 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i78 >> 2] | 0) + 48 >> 2] & 15](i78)) * 2.0;
 d39 = +HEAPF32[i8 + 112 >> 2] - +HEAPF32[i8 + 48 >> 2];
 d40 = +HEAPF32[i8 + 116 >> 2] - +HEAPF32[i8 + 52 >> 2];
 d38 = +HEAPF32[i8 + 120 >> 2] - +HEAPF32[i8 + 56 >> 2];
 d5 = +HEAPF32[i2 + 48 >> 2];
 d4 = +HEAPF32[i2 + 64 >> 2];
 d3 = +HEAPF32[i2 + 80 >> 2];
 d32 = +HEAPF32[i25 >> 2];
 d33 = +HEAPF32[i2 + 68 >> 2];
 d31 = +HEAPF32[i2 + 84 >> 2];
 d29 = +HEAPF32[i2 + 56 >> 2];
 d28 = +HEAPF32[i2 + 72 >> 2];
 d21 = +HEAPF32[i2 + 88 >> 2];
 HEAPF32[i2 + 548 >> 2] = (d22 + d24) * 2.0 * .5;
 HEAPF32[i2 + 552 >> 2] = (d23 + d26) * 2.0 * .5;
 HEAPF32[i2 + 556 >> 2] = d27 * .5;
 HEAPF32[i2 + 536 >> 2] = (d18 + d17) * 2.0 * .5;
 HEAPF32[i2 + 540 >> 2] = (d20 + d19) * 2.0 * .5;
 HEAPF32[i2 + 544 >> 2] = d12 * .5;
 d11 = +HEAPF32[i2 >> 2];
 d16 = +HEAPF32[i2 + 16 >> 2];
 d13 = +HEAPF32[i2 + 32 >> 2];
 d10 = +HEAPF32[i2 + 4 >> 2];
 d15 = +HEAPF32[i2 + 20 >> 2];
 d14 = +HEAPF32[i2 + 36 >> 2];
 d9 = +HEAPF32[i2 + 8 >> 2];
 d7 = +HEAPF32[i2 + 24 >> 2];
 d6 = +HEAPF32[i2 + 40 >> 2];
 d45 = +Math_abs(+(d5 * d11 + d4 * d16 + d3 * d13));
 d41 = +Math_abs(+(d5 * d10 + d4 * d15 + d3 * d14));
 d34 = +Math_abs(+(d5 * d9 + d4 * d7 + d3 * d6));
 d46 = +Math_abs(+(d11 * d32 + d16 * d33 + d13 * d31));
 d43 = +Math_abs(+(d10 * d32 + d15 * d33 + d14 * d31));
 d37 = +Math_abs(+(d9 * d32 + d7 * d33 + d6 * d31));
 d35 = +Math_abs(+(d11 * d29 + d16 * d28 + d13 * d21));
 d36 = +Math_abs(+(d10 * d29 + d15 * d28 + d14 * d21));
 d42 = +Math_abs(+(d9 * d29 + d7 * d28 + d6 * d21));
 d48 = +Math_abs(+(d39 * d5 + d40 * d4 + d38 * d3)) - (d12 * .5 * d34 + ((d22 + d24) * 2.0 * .5 + d45 * (d18 + d17) * 2.0 * .5 + d41 * (d20 + d19) * 2.0 * .5));
 if (d48 > 0.0) {
  STACKTOP = i2;
  return;
 }
 if (d48 > -3.4028234663852886e+38) {
  i55 = 1;
  i44 = d39 * d5 + d40 * d4 + d38 * d3 < 0.0 & 1;
  i30 = i2 + 48 | 0;
 } else {
  i55 = 0;
  i44 = 0;
  i30 = 0;
  d48 = -3.4028234663852886e+38;
 }
 d47 = +Math_abs(+(d39 * d32 + d40 * d33 + d38 * d31)) - ((d23 + d26) * 2.0 * .5 + d46 * (d18 + d17) * 2.0 * .5 + d43 * (d20 + d19) * 2.0 * .5 + d37 * d12 * .5);
 if (d47 > 0.0) {
  STACKTOP = i2;
  return;
 }
 if (d47 > d48) {
  i55 = 2;
  i44 = d39 * d32 + d40 * d33 + d38 * d31 < 0.0 & 1;
  i30 = i25;
 } else d47 = d48;
 d48 = +Math_abs(+(d39 * d29 + d40 * d28 + d38 * d21)) - (d27 * .5 + d35 * (d18 + d17) * 2.0 * .5 + d36 * (d20 + d19) * 2.0 * .5 + d42 * d12 * .5);
 if (d48 > 0.0) {
  STACKTOP = i2;
  return;
 }
 if (d48 > d47) {
  i55 = 3;
  i44 = d39 * d29 + d40 * d28 + d38 * d21 < 0.0 & 1;
  i30 = i2 + 56 | 0;
  d47 = d48;
 }
 d48 = +Math_abs(+(d39 * d11 + d40 * d16 + d38 * d13)) - ((d18 + d17) * 2.0 * .5 + (d45 * (d22 + d24) * 2.0 * .5 + d46 * (d23 + d26) * 2.0 * .5 + d35 * d27 * .5));
 if (d48 > 0.0) {
  STACKTOP = i2;
  return;
 }
 if (d48 > d47) {
  i55 = 4;
  i44 = d39 * d11 + d40 * d16 + d38 * d13 < 0.0 & 1;
  i30 = i2;
  d47 = d48;
 }
 d48 = +Math_abs(+(d39 * d10 + d40 * d15 + d38 * d14)) - ((d20 + d19) * 2.0 * .5 + (d41 * (d22 + d24) * 2.0 * .5 + d43 * (d23 + d26) * 2.0 * .5 + d36 * d27 * .5));
 if (d48 > 0.0) {
  STACKTOP = i2;
  return;
 }
 if (d48 > d47) {
  i55 = 5;
  i44 = d39 * d10 + d40 * d15 + d38 * d14 < 0.0 & 1;
  i30 = i2 + 4 | 0;
  d47 = d48;
 }
 d65 = +Math_abs(+(d39 * d9 + d40 * d7 + d38 * d6)) - (d12 * .5 + (d34 * (d22 + d24) * 2.0 * .5 + d37 * (d23 + d26) * 2.0 * .5 + d42 * d27 * .5));
 if (d65 > 0.0) {
  STACKTOP = i2;
  return;
 }
 if (d65 > d47) {
  i55 = 6;
  i44 = d39 * d9 + d40 * d7 + d38 * d6 < 0.0 & 1;
  i30 = i2 + 8 | 0;
 } else d65 = d47;
 d50 = (d39 * d29 + d40 * d28 + d38 * d21) * (d11 * d32 + d16 * d33 + d13 * d31) - (d39 * d32 + d40 * d33 + d38 * d31) * (d11 * d29 + d16 * d28 + d13 * d21);
 d48 = +Math_abs(+d50) - ((d35 + 9999999747378752.0e-21) * (d23 + d26) * 2.0 * .5 + (d46 + 9999999747378752.0e-21) * d27 * .5 + (d34 + 9999999747378752.0e-21) * (d20 + d19) * 2.0 * .5 + (d41 + 9999999747378752.0e-21) * d12 * .5);
 if (d48 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d52 = (d11 * d29 + d16 * d28 + d13 * d21) * (d11 * d29 + d16 * d28 + d13 * d21) + 0.0;
 d49 = (d11 * d32 + d16 * d33 + d13 * d31) * (d11 * d32 + d16 * d33 + d13 * d31);
 d47 = +Math_sqrt(+(d49 + d52));
 if (d47 > 1.1920928955078125e-7 ? d48 / d47 * 1.0499999523162842 > d65 : 0) {
  d63 = (d11 * d32 + d16 * d33 + d13 * d31) / d47;
  d62 = -(d11 * d29 + d16 * d28 + d13 * d21) / d47;
  d61 = 0.0 / d47;
  i55 = 7;
  i44 = d50 < 0.0 & 1;
  i30 = 0;
  d65 = d48 / d47;
 } else {
  d63 = 0.0;
  d62 = 0.0;
  d61 = 0.0;
 }
 d51 = (d39 * d29 + d40 * d28 + d38 * d21) * (d10 * d32 + d15 * d33 + d14 * d31) - (d39 * d32 + d40 * d33 + d38 * d31) * (d10 * d29 + d15 * d28 + d14 * d21);
 d48 = +Math_abs(+d51) - ((d36 + 9999999747378752.0e-21) * (d23 + d26) * 2.0 * .5 + (d43 + 9999999747378752.0e-21) * d27 * .5 + (d34 + 9999999747378752.0e-21) * (d18 + d17) * 2.0 * .5 + (d45 + 9999999747378752.0e-21) * d12 * .5);
 if (d48 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d53 = (d10 * d29 + d15 * d28 + d14 * d21) * (d10 * d29 + d15 * d28 + d14 * d21) + 0.0;
 d47 = (d10 * d32 + d15 * d33 + d14 * d31) * (d10 * d32 + d15 * d33 + d14 * d31);
 d50 = +Math_sqrt(+(d47 + d53));
 if (d50 > 1.1920928955078125e-7 ? d48 / d50 * 1.0499999523162842 > d65 : 0) {
  d63 = (d10 * d32 + d15 * d33 + d14 * d31) / d50;
  d62 = -(d10 * d29 + d15 * d28 + d14 * d21) / d50;
  d61 = 0.0 / d50;
  i55 = 8;
  i44 = d51 < 0.0 & 1;
  i30 = 0;
  d65 = d48 / d50;
 }
 d70 = (d39 * d29 + d40 * d28 + d38 * d21) * (d9 * d32 + d7 * d33 + d6 * d31) - (d39 * d32 + d40 * d33 + d38 * d31) * (d9 * d29 + d7 * d28 + d6 * d21);
 d50 = +Math_abs(+d70) - ((d42 + 9999999747378752.0e-21) * (d23 + d26) * 2.0 * .5 + (d37 + 9999999747378752.0e-21) * d27 * .5 + (d41 + 9999999747378752.0e-21) * (d18 + d17) * 2.0 * .5 + (d45 + 9999999747378752.0e-21) * (d20 + d19) * 2.0 * .5);
 if (d50 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d51 = (d9 * d29 + d7 * d28 + d6 * d21) * (d9 * d29 + d7 * d28 + d6 * d21) + 0.0;
 d48 = (d9 * d32 + d7 * d33 + d6 * d31) * (d9 * d32 + d7 * d33 + d6 * d31);
 d66 = +Math_sqrt(+(d48 + d51));
 if (d66 > 1.1920928955078125e-7 ? d50 / d66 * 1.0499999523162842 > d65 : 0) {
  d63 = (d9 * d32 + d7 * d33 + d6 * d31) / d66;
  d62 = -(d9 * d29 + d7 * d28 + d6 * d21) / d66;
  d61 = 0.0 / d66;
  i55 = 9;
  i44 = d70 < 0.0 & 1;
  i30 = 0;
  d65 = d50 / d66;
 }
 d70 = (d39 * d5 + d40 * d4 + d38 * d3) * (d11 * d29 + d16 * d28 + d13 * d21) - (d39 * d29 + d40 * d28 + d38 * d21) * (d5 * d11 + d4 * d16 + d3 * d13);
 d66 = +Math_abs(+d70) - ((d35 + 9999999747378752.0e-21) * (d22 + d24) * 2.0 * .5 + (d45 + 9999999747378752.0e-21) * d27 * .5 + (d37 + 9999999747378752.0e-21) * (d20 + d19) * 2.0 * .5 + (d43 + 9999999747378752.0e-21) * d12 * .5);
 if (d66 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d50 = (d5 * d11 + d4 * d16 + d3 * d13) * (d5 * d11 + d4 * d16 + d3 * d13);
 d52 = +Math_sqrt(+(d50 + d52));
 do if (d52 > 1.1920928955078125e-7) {
  if (!(d66 / d52 * 1.0499999523162842 > d65)) break;
  d63 = -(d5 * d11 + d4 * d16 + d3 * d13) / d52;
  d62 = 0.0 / d52;
  d61 = (d11 * d29 + d16 * d28 + d13 * d21) / d52;
  i55 = 10;
  i44 = d70 < 0.0 & 1;
  i30 = 0;
  d65 = d66 / d52;
 } while (0);
 d70 = (d39 * d5 + d40 * d4 + d38 * d3) * (d10 * d29 + d15 * d28 + d14 * d21) - (d39 * d29 + d40 * d28 + d38 * d21) * (d5 * d10 + d4 * d15 + d3 * d14);
 d66 = +Math_abs(+d70) - ((d36 + 9999999747378752.0e-21) * (d22 + d24) * 2.0 * .5 + (d41 + 9999999747378752.0e-21) * d27 * .5 + (d37 + 9999999747378752.0e-21) * (d18 + d17) * 2.0 * .5 + (d46 + 9999999747378752.0e-21) * d12 * .5);
 if (d66 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d52 = (d5 * d10 + d4 * d15 + d3 * d14) * (d5 * d10 + d4 * d15 + d3 * d14);
 d53 = +Math_sqrt(+(d52 + d53));
 do if (d53 > 1.1920928955078125e-7) {
  if (!(d66 / d53 * 1.0499999523162842 > d65)) break;
  d63 = -(d5 * d10 + d4 * d15 + d3 * d14) / d53;
  d62 = 0.0 / d53;
  d61 = (d10 * d29 + d15 * d28 + d14 * d21) / d53;
  i55 = 11;
  i44 = d70 < 0.0 & 1;
  i30 = 0;
  d65 = d66 / d53;
 } while (0);
 d70 = (d39 * d5 + d40 * d4 + d38 * d3) * (d9 * d29 + d7 * d28 + d6 * d21) - (d39 * d29 + d40 * d28 + d38 * d21) * (d5 * d9 + d4 * d7 + d3 * d6);
 d66 = +Math_abs(+d70) - ((d42 + 9999999747378752.0e-21) * (d22 + d24) * 2.0 * .5 + (d34 + 9999999747378752.0e-21) * d27 * .5 + (d43 + 9999999747378752.0e-21) * (d18 + d17) * 2.0 * .5 + (d46 + 9999999747378752.0e-21) * (d20 + d19) * 2.0 * .5);
 if (d66 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d53 = (d5 * d9 + d4 * d7 + d3 * d6) * (d5 * d9 + d4 * d7 + d3 * d6);
 d51 = +Math_sqrt(+(d53 + d51));
 do if (d51 > 1.1920928955078125e-7) {
  if (!(d66 / d51 * 1.0499999523162842 > d65)) break;
  d63 = -(d5 * d9 + d4 * d7 + d3 * d6) / d51;
  d62 = 0.0 / d51;
  d61 = (d9 * d29 + d7 * d28 + d6 * d21) / d51;
  i55 = 12;
  i44 = d70 < 0.0 & 1;
  i30 = 0;
  d65 = d66 / d51;
 } while (0);
 d51 = (d39 * d32 + d40 * d33 + d38 * d31) * (d5 * d11 + d4 * d16 + d3 * d13) - (d39 * d5 + d40 * d4 + d38 * d3) * (d11 * d32 + d16 * d33 + d13 * d31);
 d45 = +Math_abs(+d51) - ((d46 + 9999999747378752.0e-21) * (d22 + d24) * 2.0 * .5 + (d45 + 9999999747378752.0e-21) * (d23 + d26) * 2.0 * .5 + (d42 + 9999999747378752.0e-21) * (d20 + d19) * 2.0 * .5 + (d36 + 9999999747378752.0e-21) * d12 * .5);
 if (d45 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d46 = +Math_sqrt(+(d50 + d49 + 0.0));
 do if (d46 > 1.1920928955078125e-7) {
  if (!(d45 / d46 * 1.0499999523162842 > d65)) break;
  d63 = 0.0 / d46;
  d62 = (d5 * d11 + d4 * d16 + d3 * d13) / d46;
  d61 = -(d11 * d32 + d16 * d33 + d13 * d31) / d46;
  i55 = 13;
  i44 = d51 < 0.0 & 1;
  i30 = 0;
  d65 = d45 / d46;
 } while (0);
 d45 = (d39 * d32 + d40 * d33 + d38 * d31) * (d5 * d10 + d4 * d15 + d3 * d14) - (d39 * d5 + d40 * d4 + d38 * d3) * (d10 * d32 + d15 * d33 + d14 * d31);
 d41 = +Math_abs(+d45) - ((d43 + 9999999747378752.0e-21) * (d22 + d24) * 2.0 * .5 + (d41 + 9999999747378752.0e-21) * (d23 + d26) * 2.0 * .5 + (d42 + 9999999747378752.0e-21) * (d18 + d17) * 2.0 * .5 + (d35 + 9999999747378752.0e-21) * d12 * .5);
 if (d41 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d42 = +Math_sqrt(+(d52 + d47 + 0.0));
 do if (d42 > 1.1920928955078125e-7) {
  if (!(d41 / d42 * 1.0499999523162842 > d65)) {
   i54 = i30;
   break;
  }
  d63 = 0.0 / d42;
  d62 = (d5 * d10 + d4 * d15 + d3 * d14) / d42;
  d61 = -(d10 * d32 + d15 * d33 + d14 * d31) / d42;
  i55 = 14;
  i44 = d45 < 0.0 & 1;
  i54 = 0;
  d65 = d41 / d42;
 } else i54 = i30; while (0);
 d38 = (d39 * d32 + d40 * d33 + d38 * d31) * (d5 * d9 + d4 * d7 + d3 * d6) - (d39 * d5 + d40 * d4 + d38 * d3) * (d9 * d32 + d7 * d33 + d6 * d31);
 d34 = +Math_abs(+d38) - ((d37 + 9999999747378752.0e-21) * (d22 + d24) * 2.0 * .5 + (d34 + 9999999747378752.0e-21) * (d23 + d26) * 2.0 * .5 + (d36 + 9999999747378752.0e-21) * (d18 + d17) * 2.0 * .5 + (d35 + 9999999747378752.0e-21) * (d20 + d19) * 2.0 * .5);
 if (d34 > 1.1920928955078125e-7) {
  STACKTOP = i2;
  return;
 }
 d35 = +Math_sqrt(+(d53 + d48 + 0.0));
 do if (d35 > 1.1920928955078125e-7) {
  if (!(d34 / d35 * 1.0499999523162842 > d65)) {
   i30 = 55;
   break;
  }
  d61 = -(d9 * d32 + d7 * d33 + d6 * d31) / d35;
  d62 = (d5 * d9 + d4 * d7 + d3 * d6) / d35;
  d63 = 0.0 / d35;
  i55 = 15;
  i44 = d38 < 0.0 & 1;
  d65 = d34 / d35;
  i30 = 58;
 } else i30 = 55; while (0);
 do if ((i30 | 0) == 55) {
  if ((i55 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
  if ((i54 | 0) == 0) {
   i30 = 58;
   break;
  }
  d3 = +HEAPF32[i54 >> 2];
  d4 = +HEAPF32[i54 + 16 >> 2];
  d5 = +HEAPF32[i54 + 32 >> 2];
 } while (0);
 if ((i30 | 0) == 58) {
  d3 = d61 * +HEAPF32[i2 + 48 >> 2] + d62 * +HEAPF32[i25 >> 2] + d63 * d29;
  d4 = d61 * +HEAPF32[i2 + 64 >> 2] + d62 * +HEAPF32[i2 + 68 >> 2] + d63 * d28;
  d5 = d61 * +HEAPF32[i2 + 80 >> 2] + d62 * +HEAPF32[i2 + 84 >> 2] + d63 * d21;
 }
 if ((i44 | 0) != 0) {
  d3 = -d3;
  d4 = -d4;
  d5 = -d5;
 }
 if ((i55 | 0) > 6) {
  d51 = +HEAPF32[i2 + 48 >> 2];
  d52 = +HEAPF32[i2 + 64 >> 2];
  d62 = +HEAPF32[i2 + 80 >> 2];
  d61 = (d3 * d51 + d4 * d52 + d5 * d62 > 0.0 ? 1.0 : -1.0) * (d22 + d24) * 2.0 * .5;
  d22 = +HEAPF32[i25 >> 2];
  d53 = +HEAPF32[i2 + 68 >> 2];
  d66 = +HEAPF32[i2 + 84 >> 2];
  d63 = (d3 * d22 + d4 * d53 + d5 * d66 > 0.0 ? 1.0 : -1.0) * (d23 + d26) * 2.0 * .5;
  d70 = (d3 * d29 + d4 * d28 + d5 * d21 > 0.0 ? 1.0 : -1.0) * d27 * .5;
  d22 = +HEAPF32[i8 + 48 >> 2] + d61 * d51 + d63 * d22 + d70 * d29;
  d23 = +HEAPF32[i8 + 52 >> 2] + d61 * d52 + d63 * d53 + d70 * d28;
  d21 = +HEAPF32[i8 + 56 >> 2] + d61 * d62 + d63 * d66 + d70 * d21;
  HEAP32[i2 + 520 >> 2] = HEAP32[i8 + 112 >> 2];
  HEAP32[i2 + 524 >> 2] = HEAP32[i8 + 116 >> 2];
  HEAP32[i2 + 528 >> 2] = HEAP32[i8 + 120 >> 2];
  d18 = (d3 * d11 + d4 * d16 + d5 * d13 > 0.0 ? -1.0 : 1.0) * (d18 + d17) * 2.0 * .5;
  d19 = (d3 * d10 + d4 * d15 + d5 * d14 > 0.0 ? -1.0 : 1.0) * (d20 + d19) * 2.0 * .5;
  d15 = +HEAPF32[i2 + 524 >> 2] + d18 * d16 + d19 * d15;
  d13 = +HEAPF32[i2 + 528 >> 2] + d18 * d13 + d19 * d14;
  d12 = (d3 * d9 + d4 * d7 + d5 * d6 > 0.0 ? -1.0 : 1.0) * d12 * .5;
  d9 = +HEAPF32[i2 + 520 >> 2] + d18 * d11 + d19 * d10 + d12 * d9;
  HEAPF32[i2 + 520 >> 2] = d9;
  HEAPF32[i2 + 524 >> 2] = d15 + d12 * d7;
  HEAPF32[i2 + 528 >> 2] = d13 + d12 * d6;
  i78 = i55 + -7 | 0;
  d16 = +HEAPF32[i2 + 48 + (((i78 | 0) / 3 | 0) << 2) >> 2];
  d19 = +HEAPF32[i2 + 48 + (((i78 | 0) / 3 | 0) + 4 << 2) >> 2];
  d18 = +HEAPF32[i2 + 48 + (((i78 | 0) / 3 | 0) + 8 << 2) >> 2];
  d14 = +HEAPF32[i2 + (((i78 | 0) % 3 | 0) << 2) >> 2];
  d11 = +HEAPF32[i2 + (((i78 | 0) % 3 | 0) + 4 << 2) >> 2];
  d10 = +HEAPF32[i2 + (((i78 | 0) % 3 | 0) + 8 << 2) >> 2];
  d17 = 1.0 - (d16 * d14 + d19 * d11 + d18 * d10) * (d16 * d14 + d19 * d11 + d18 * d10);
  if (!(d17 <= 9999999747378752.0e-20)) d16 = (((d9 - d22) * d16 + (d15 + d12 * d7 - d23) * d19 + (d13 + d12 * d6 - d21) * d18) * (d16 * d14 + d19 * d11 + d18 * d10) - ((d9 - d22) * d14 + (d15 + d12 * d7 - d23) * d11 + (d13 + d12 * d6 - d21) * d10)) * (1.0 / d17); else d16 = 0.0;
  HEAPF32[i2 + 520 >> 2] = d9 + d16 * d14;
  HEAPF32[i2 + 524 >> 2] = d15 + d12 * d7 + d16 * d11;
  HEAPF32[i2 + 528 >> 2] = d13 + d12 * d6 + d16 * d10;
  i78 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
  HEAPF32[i2 + 504 >> 2] = -d3;
  HEAPF32[i2 + 508 >> 2] = -d4;
  HEAPF32[i2 + 512 >> 2] = -d5;
  HEAPF32[i2 + 516 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[i78 & 15](i1, i2 + 504 | 0, i2 + 520 | 0, d65);
  STACKTOP = i2;
  return;
 }
 i44 = (i55 | 0) < 4;
 if (i44) {
  d6 = d3;
  d7 = d4;
  d9 = d5;
  i56 = i2 + 48 | 0;
  i68 = i2;
  i54 = i2 + 548 | 0;
  i64 = i2 + 536 | 0;
  i25 = i8 + 48 | 0;
  i8 = i8 + 112 | 0;
 } else {
  d6 = -d3;
  d7 = -d4;
  d9 = -d5;
  i56 = i2;
  i68 = i2 + 48 | 0;
  i54 = i2 + 536 | 0;
  i64 = i2 + 548 | 0;
  i25 = i8 + 112 | 0;
  i8 = i8 + 48 | 0;
 }
 d10 = d6 * +HEAPF32[i68 >> 2] + d7 * +HEAPF32[i68 + 16 >> 2] + d9 * +HEAPF32[i68 + 32 >> 2];
 HEAPF32[i2 + 488 >> 2] = d10;
 d12 = d6 * +HEAPF32[i68 + 4 >> 2] + d7 * +HEAPF32[i68 + 20 >> 2] + d9 * +HEAPF32[i68 + 36 >> 2];
 HEAPF32[i2 + 492 >> 2] = d12;
 d11 = d6 * +HEAPF32[i68 + 8 >> 2] + d7 * +HEAPF32[i68 + 24 >> 2] + d9 * +HEAPF32[i68 + 40 >> 2];
 HEAPF32[i2 + 496 >> 2] = d11;
 d10 = +Math_abs(+d10);
 d12 = +Math_abs(+d12);
 d11 = +Math_abs(+d11);
 if (d12 > d10) {
  i58 = d12 > d11;
  i67 = 0;
  i57 = d12 > d11 ? 1 : 2;
 } else {
  i58 = d10 > d11;
  i67 = d10 > d11 & 1;
  i57 = d10 > d11 ? 0 : 2;
 }
 i69 = i58 ? 2 : 1;
 d12 = +HEAPF32[i64 + (i57 << 2) >> 2];
 d11 = +HEAPF32[i8 >> 2] - +HEAPF32[i25 >> 2];
 d10 = d12 * +HEAPF32[i68 + (i57 << 2) >> 2];
 if (+HEAPF32[i2 + 488 + (i57 << 2) >> 2] < 0.0) {
  d10 = d11 + d10;
  d11 = +HEAPF32[i8 + 4 >> 2] - +HEAPF32[i25 + 4 >> 2] + d12 * +HEAPF32[i68 + ((i57 | 4) << 2) >> 2];
  d12 = +HEAPF32[i8 + 8 >> 2] - +HEAPF32[i25 + 8 >> 2] + d12 * +HEAPF32[i68 + ((i57 | 8) << 2) >> 2];
 } else {
  d10 = d11 - d10;
  d11 = +HEAPF32[i8 + 4 >> 2] - +HEAPF32[i25 + 4 >> 2] - d12 * +HEAPF32[i68 + ((i57 | 4) << 2) >> 2];
  d12 = +HEAPF32[i8 + 8 >> 2] - +HEAPF32[i25 + 8 >> 2] - d12 * +HEAPF32[i68 + ((i57 | 8) << 2) >> 2];
 }
 i60 = (i44 ? -1 : -4) + i55 | 0;
 if ((i60 | 0) == 1) {
  i71 = 0;
  i72 = 2;
 } else if ((i60 | 0) == 0) {
  i71 = 1;
  i72 = 2;
 } else {
  i71 = 0;
  i72 = 1;
 }
 d15 = +HEAPF32[i56 + (i71 << 2) >> 2];
 d16 = +HEAPF32[i56 + ((i71 | 4) << 2) >> 2];
 d17 = +HEAPF32[i56 + ((i71 | 8) << 2) >> 2];
 d13 = d10 * d15 + d11 * d16 + d12 * d17;
 d18 = +HEAPF32[i56 + (i72 << 2) >> 2];
 d14 = +HEAPF32[i56 + ((i72 | 4) << 2) >> 2];
 d20 = +HEAPF32[i56 + ((i72 | 8) << 2) >> 2];
 d22 = d10 * d18 + d11 * d14 + d12 * d20;
 i59 = i68 + (i67 << 2) | 0;
 d19 = +HEAPF32[i59 >> 2];
 i57 = i68 + ((i67 | 4) << 2) | 0;
 d24 = +HEAPF32[i57 >> 2];
 i8 = i68 + ((i67 | 8) << 2) | 0;
 d26 = +HEAPF32[i8 >> 2];
 i58 = i68 + (i69 << 2) | 0;
 d21 = +HEAPF32[i58 >> 2];
 i56 = i68 + ((i69 | 4) << 2) | 0;
 d23 = +HEAPF32[i56 >> 2];
 i55 = i68 + ((i69 | 8) << 2) | 0;
 d27 = +HEAPF32[i55 >> 2];
 d66 = +HEAPF32[i64 + (i67 << 2) >> 2];
 d70 = +HEAPF32[i64 + (i69 << 2) >> 2];
 d65 = (d15 * d21 + d16 * d23 + d17 * d27) * d70;
 d70 = (d18 * d21 + d14 * d23 + d20 * d27) * d70;
 HEAPF32[i2 + 456 >> 2] = d13 - (d15 * d19 + d16 * d24 + d17 * d26) * d66 - d65;
 HEAPF32[i2 + 460 >> 2] = d22 - (d18 * d19 + d14 * d24 + d20 * d26) * d66 - d70;
 HEAPF32[i2 + 464 >> 2] = d13 - (d15 * d19 + d16 * d24 + d17 * d26) * d66 + d65;
 HEAPF32[i2 + 468 >> 2] = d22 - (d18 * d19 + d14 * d24 + d20 * d26) * d66 + d70;
 HEAPF32[i2 + 472 >> 2] = d13 + (d15 * d19 + d16 * d24 + d17 * d26) * d66 + d65;
 HEAPF32[i2 + 476 >> 2] = d22 + (d18 * d19 + d14 * d24 + d20 * d26) * d66 + d70;
 HEAPF32[i2 + 480 >> 2] = d13 + (d15 * d19 + d16 * d24 + d17 * d26) * d66 - d65;
 HEAPF32[i2 + 484 >> 2] = d22 + (d18 * d19 + d14 * d24 + d20 * d26) * d66 - d70;
 HEAPF32[i2 + 448 >> 2] = +HEAPF32[i54 + (i71 << 2) >> 2];
 HEAPF32[i2 + 452 >> 2] = +HEAPF32[i54 + (i72 << 2) >> 2];
 i69 = 0;
 i74 = 4;
 i72 = i2 + 456 | 0;
 i68 = i2 + 384 | 0;
 L133 : while (1) {
  i67 = i2 + 448 + (i69 << 2) | 0;
  i64 = 1 - i69 | 0;
  i71 = -1;
  while (1) {
   if ((i74 | 0) > 0) {
    d28 = +(i71 | 0);
    i76 = 0;
    i73 = i72;
    i75 = i68;
    while (1) {
     i77 = i73 + (i69 << 2) | 0;
     d29 = +HEAPF32[i77 >> 2];
     d31 = +HEAPF32[i67 >> 2];
     if (d28 * d29 < d31) {
      HEAPF32[i75 >> 2] = +HEAPF32[i73 >> 2];
      HEAPF32[i75 + 4 >> 2] = +HEAPF32[i73 + 4 >> 2];
      i76 = i76 + 1 | 0;
      if ((i76 & 8 | 0) != 0) {
       i74 = i76;
       break L133;
      }
      d29 = +HEAPF32[i77 >> 2];
      d31 = +HEAPF32[i67 >> 2];
      i75 = i75 + 8 | 0;
     }
     i77 = i73;
     i73 = i73 + 8 | 0;
     i78 = (i74 | 0) > 1 ? i73 : i72;
     d32 = +HEAPF32[i78 + (i69 << 2) >> 2];
     if (d28 * d29 < d31 ^ d28 * d32 < d31) {
      d70 = +HEAPF32[i77 + (i64 << 2) >> 2];
      HEAPF32[i75 + (i64 << 2) >> 2] = d70 + (d28 * d31 - d29) * ((+HEAPF32[i78 + (i64 << 2) >> 2] - d70) / (d32 - d29));
      HEAPF32[i75 + (i69 << 2) >> 2] = d28 * +HEAPF32[i67 >> 2];
      i76 = i76 + 1 | 0;
      if ((i76 & 8 | 0) == 0) i75 = i75 + 8 | 0; else {
       i74 = i76;
       break L133;
      }
     }
     i74 = i74 + -1 | 0;
     if ((i74 | 0) <= 0) {
      i74 = i76;
      break;
     }
    }
   } else i74 = 0;
   i73 = (i68 | 0) == (i2 + 384 | 0) ? i2 + 592 | 0 : i2 + 384 | 0;
   if ((i71 | 0) < 0) {
    i72 = i68;
    i68 = i73;
    i71 = i71 + 2 | 0;
   } else break;
  }
  i69 = i69 + 1 | 0;
  if ((i69 | 0) < 2) {
   i72 = i68;
   i68 = i73;
  } else break;
 }
 if ((i68 | 0) != (i2 + 384 | 0)) _memcpy(i2 + 384 | 0, i68 | 0, i74 << 3 | 0) | 0;
 if ((i74 | 0) < 1) {
  STACKTOP = i2;
  return;
 }
 d28 = 1.0 / ((d15 * d19 + d16 * d24 + d17 * d26) * (d18 * d21 + d14 * d23 + d20 * d27) - (d18 * d19 + d14 * d24 + d20 * d26) * (d15 * d21 + d16 * d23 + d17 * d27));
 d29 = +HEAPF32[i54 + (i60 << 2) >> 2];
 d31 = +HEAPF32[i59 >> 2];
 d32 = +HEAPF32[i58 >> 2];
 d33 = +HEAPF32[i57 >> 2];
 d34 = +HEAPF32[i56 >> 2];
 d35 = +HEAPF32[i8 >> 2];
 d36 = +HEAPF32[i55 >> 2];
 i8 = 0;
 i54 = 0;
 do {
  i78 = i54 << 1;
  d38 = +HEAPF32[i2 + 384 + (i78 << 2) >> 2];
  d37 = +HEAPF32[i2 + 384 + ((i78 | 1) << 2) >> 2];
  d63 = (d18 * d21 + d14 * d23 + d20 * d27) * d28 * (d38 - d13) - (d15 * d21 + d16 * d23 + d17 * d27) * d28 * (d37 - d22);
  d70 = (d15 * d19 + d16 * d24 + d17 * d26) * d28 * (d37 - d22) - (d18 * d19 + d14 * d24 + d20 * d26) * d28 * (d38 - d13);
  i78 = i8 * 3 | 0;
  d65 = d10 + d63 * d31 + d70 * d32;
  HEAPF32[i2 + 288 + (i78 << 2) >> 2] = d65;
  d66 = d11 + d63 * d33 + d70 * d34;
  HEAPF32[i2 + 288 + (i78 + 1 << 2) >> 2] = d66;
  d70 = d12 + d63 * d35 + d70 * d36;
  HEAPF32[i2 + 288 + (i78 + 2 << 2) >> 2] = d70;
  d70 = d29 - (d6 * d65 + d7 * d66 + d9 * d70);
  HEAPF32[i2 + 256 + (i8 << 2) >> 2] = d70;
  if (d70 >= 0.0) {
   i78 = i8 << 1;
   HEAPF32[i2 + 384 + (i78 << 2) >> 2] = d38;
   HEAPF32[i2 + 384 + ((i78 | 1) << 2) >> 2] = d37;
   i8 = i8 + 1 | 0;
  }
  i54 = i54 + 1 | 0;
 } while ((i54 | 0) != (i74 | 0));
 if ((i8 | 0) < 1) {
  STACKTOP = i2;
  return;
 }
 i54 = (i8 | 0) < 4 ? i8 : 4;
 i54 = (i54 | 0) < 1 ? 1 : i54;
 if ((i8 | 0) <= (i54 | 0)) {
  i30 = (i8 | 0) > 0;
  if (i44) {
   if (!i30) {
    STACKTOP = i2;
    return;
   }
   i30 = i25 + 4 | 0;
   i44 = i25 + 8 | 0;
   d3 = -d3;
   d4 = -d4;
   d5 = -d5;
   i54 = 0;
   do {
    i78 = i54 * 3 | 0;
    HEAPF32[i2 + 240 >> 2] = +HEAPF32[i2 + 288 + (i78 << 2) >> 2] + +HEAPF32[i25 >> 2];
    HEAPF32[i2 + 244 >> 2] = +HEAPF32[i2 + 288 + (i78 + 1 << 2) >> 2] + +HEAPF32[i30 >> 2];
    HEAPF32[i2 + 248 >> 2] = +HEAPF32[i2 + 288 + (i78 + 2 << 2) >> 2] + +HEAPF32[i44 >> 2];
    i78 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
    HEAPF32[i2 + 224 >> 2] = d3;
    HEAPF32[i2 + 228 >> 2] = d4;
    HEAPF32[i2 + 232 >> 2] = d5;
    HEAPF32[i2 + 236 >> 2] = 0.0;
    FUNCTION_TABLE_viiid[i78 & 15](i1, i2 + 224 | 0, i2 + 240 | 0, -+HEAPF32[i2 + 256 + (i54 << 2) >> 2]);
    i54 = i54 + 1 | 0;
   } while ((i54 | 0) != (i8 | 0));
   STACKTOP = i2;
   return;
  } else {
   if (!i30) {
    STACKTOP = i2;
    return;
   }
   i44 = i25 + 4 | 0;
   i54 = i25 + 8 | 0;
   d6 = -d3;
   d9 = -d4;
   d7 = -d5;
   i30 = 0;
   do {
    i78 = i30 * 3 | 0;
    d70 = +HEAPF32[i2 + 256 + (i30 << 2) >> 2];
    HEAPF32[i2 + 208 >> 2] = +HEAPF32[i2 + 288 + (i78 << 2) >> 2] + +HEAPF32[i25 >> 2] - d3 * d70;
    HEAPF32[i2 + 212 >> 2] = +HEAPF32[i2 + 288 + (i78 + 1 << 2) >> 2] + +HEAPF32[i44 >> 2] - d4 * d70;
    HEAPF32[i2 + 216 >> 2] = +HEAPF32[i2 + 288 + (i78 + 2 << 2) >> 2] + +HEAPF32[i54 >> 2] - d5 * d70;
    i78 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
    HEAPF32[i2 + 192 >> 2] = d6;
    HEAPF32[i2 + 196 >> 2] = d9;
    HEAPF32[i2 + 200 >> 2] = d7;
    HEAPF32[i2 + 204 >> 2] = 0.0;
    FUNCTION_TABLE_viiid[i78 & 15](i1, i2 + 192 | 0, i2 + 208 | 0, -d70);
    i30 = i30 + 1 | 0;
   } while ((i30 | 0) != (i8 | 0));
   STACKTOP = i2;
   return;
  }
 }
 if ((i8 | 0) > 1) {
  i56 = 1;
  i55 = 0;
  d6 = +HEAPF32[i2 + 256 >> 2];
  while (1) {
   d7 = +HEAPF32[i2 + 256 + (i56 << 2) >> 2];
   i57 = d7 > d6;
   i55 = i57 ? i56 : i55;
   i56 = i56 + 1 | 0;
   if ((i56 | 0) == (i8 | 0)) break; else d6 = i57 ? d7 : d6;
  }
 } else i55 = 0;
 if ((i8 | 0) == 1) {
  d12 = +HEAPF32[i2 + 384 >> 2];
  d6 = +HEAPF32[i2 + 388 >> 2];
  i30 = 115;
 } else if ((i8 | 0) != 2) {
  i56 = i8 + -1 | 0;
  if ((i56 | 0) > 0) {
   d13 = 0.0;
   d12 = 0.0;
   d11 = 0.0;
   i57 = 0;
   do {
    i78 = i57 << 1;
    d63 = +HEAPF32[i2 + 384 + (i78 << 2) >> 2];
    d65 = +HEAPF32[i2 + 384 + (i78 + 3 << 2) >> 2];
    d66 = +HEAPF32[i2 + 384 + (i78 + 2 << 2) >> 2];
    d70 = +HEAPF32[i2 + 384 + ((i78 | 1) << 2) >> 2];
    d13 = d13 + (d63 * d65 - d66 * d70);
    d12 = d12 + (d63 + d66) * (d63 * d65 - d66 * d70);
    d11 = d11 + (d65 + d70) * (d63 * d65 - d66 * d70);
    i57 = i57 + 1 | 0;
   } while ((i57 | 0) != (i56 | 0));
  } else {
   d13 = 0.0;
   d12 = 0.0;
   d11 = 0.0;
  }
  i78 = i8 << 1;
  d10 = +HEAPF32[i2 + 384 + (i78 + -2 << 2) >> 2];
  d9 = +HEAPF32[i2 + 388 >> 2];
  d7 = +HEAPF32[i2 + 384 >> 2];
  d6 = +HEAPF32[i2 + 384 + (i78 + -1 << 2) >> 2];
  d13 = d13 + (d10 * d9 - d7 * d6);
  if (+Math_abs(+d13) > 1.1920928955078125e-7) d13 = 1.0 / (d13 * 3.0); else d13 = 999999984306749400.0;
  if ((i8 | 0) > 0) {
   d12 = d13 * (d12 + (d10 * d9 - d7 * d6) * (d10 + d7));
   d6 = d13 * (d11 + (d10 * d9 - d7 * d6) * (d6 + d9));
   i30 = 115;
  } else i56 = 0;
 } else {
  d12 = (+HEAPF32[i2 + 384 >> 2] + +HEAPF32[i2 + 392 >> 2]) * .5;
  d6 = (+HEAPF32[i2 + 388 >> 2] + +HEAPF32[i2 + 396 >> 2]) * .5;
  i30 = 115;
 }
 if ((i30 | 0) == 115) {
  i30 = 0;
  do {
   i78 = i30 << 1;
   d70 = +Math_atan2(+(+HEAPF32[i2 + 384 + ((i78 | 1) << 2) >> 2] - d6), +(+HEAPF32[i2 + 384 + (i78 << 2) >> 2] - d12));
   HEAPF32[i2 + 592 + (i30 << 2) >> 2] = d70;
   i30 = i30 + 1 | 0;
  } while ((i30 | 0) != (i8 | 0));
  i30 = 0;
  do {
   HEAP32[i2 + 560 + (i30 << 2) >> 2] = 1;
   i30 = i30 + 1 | 0;
  } while ((i30 | 0) != (i8 | 0));
  i56 = 1;
 }
 i30 = i2 + 560 + (i55 << 2) | 0;
 HEAP32[i30 >> 2] = 0;
 HEAP32[i2 + 160 >> 2] = i55;
 L207 : do if ((i54 | 0) > 1) {
  d6 = +HEAPF32[i2 + 592 + (i55 << 2) >> 2];
  if (i56) {
   i56 = i2 + 164 | 0;
   i30 = 1;
  } else {
   i56 = i2 + 164 | 0;
   i8 = 1;
   while (1) {
    HEAP32[i56 >> 2] = i55;
    HEAP32[i30 >> 2] = 0;
    i8 = i8 + 1 | 0;
    if ((i8 | 0) == (i54 | 0)) break L207; else i56 = i56 + 4 | 0;
   }
  }
  while (1) {
   d7 = +(i30 | 0) * (6.2831854820251465 / +(i54 | 0)) + d6;
   if (d7 > 3.1415927410125732) d7 = d7 + -6.2831854820251465;
   HEAP32[i56 >> 2] = i55;
   i58 = i55;
   i57 = 0;
   d9 = 1.0e9;
   do {
    do if ((HEAP32[i2 + 560 + (i57 << 2) >> 2] | 0) != 0) {
     d10 = +Math_abs(+(+HEAPF32[i2 + 592 + (i57 << 2) >> 2] - d7));
     if (d10 > 3.1415927410125732) d10 = 6.2831854820251465 - d10;
     if (!(d10 < d9)) break;
     HEAP32[i56 >> 2] = i57;
     i58 = i57;
     d9 = d10;
    } while (0);
    i57 = i57 + 1 | 0;
   } while ((i57 | 0) != (i8 | 0));
   HEAP32[i2 + 560 + (i58 << 2) >> 2] = 0;
   i30 = i30 + 1 | 0;
   if ((i30 | 0) == (i54 | 0)) break; else i56 = i56 + 4 | 0;
  }
 } while (0);
 if ((i54 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i30 = i25 + 4 | 0;
 i8 = i25 + 8 | 0;
 d7 = -d5;
 d6 = -d4;
 d9 = -d3;
 if (i44) {
  i44 = 0;
  do {
   i78 = HEAP32[i2 + 160 + (i44 << 2) >> 2] | 0;
   HEAPF32[i2 + 144 >> 2] = +HEAPF32[i2 + 288 + (i78 * 3 << 2) >> 2] + +HEAPF32[i25 >> 2];
   HEAPF32[i2 + 148 >> 2] = +HEAPF32[i2 + 288 + ((i78 * 3 | 0) + 1 << 2) >> 2] + +HEAPF32[i30 >> 2];
   HEAPF32[i2 + 152 >> 2] = +HEAPF32[i2 + 288 + ((i78 * 3 | 0) + 2 << 2) >> 2] + +HEAPF32[i8 >> 2];
   i77 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
   HEAPF32[i2 + 128 >> 2] = d9;
   HEAPF32[i2 + 132 >> 2] = d6;
   HEAPF32[i2 + 136 >> 2] = d7;
   HEAPF32[i2 + 140 >> 2] = 0.0;
   FUNCTION_TABLE_viiid[i77 & 15](i1, i2 + 128 | 0, i2 + 144 | 0, -+HEAPF32[i2 + 256 + (i78 << 2) >> 2]);
   i44 = i44 + 1 | 0;
  } while ((i44 | 0) < (i54 | 0));
  STACKTOP = i2;
  return;
 } else {
  i44 = 0;
  do {
   i77 = HEAP32[i2 + 160 + (i44 << 2) >> 2] | 0;
   d63 = +HEAPF32[i2 + 288 + (i77 * 3 << 2) >> 2] + +HEAPF32[i25 >> 2];
   HEAPF32[i2 + 144 >> 2] = d63;
   d65 = +HEAPF32[i2 + 288 + ((i77 * 3 | 0) + 1 << 2) >> 2] + +HEAPF32[i30 >> 2];
   HEAPF32[i2 + 148 >> 2] = d65;
   d66 = +HEAPF32[i2 + 288 + ((i77 * 3 | 0) + 2 << 2) >> 2] + +HEAPF32[i8 >> 2];
   HEAPF32[i2 + 152 >> 2] = d66;
   i78 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
   HEAPF32[i2 + 112 >> 2] = d9;
   HEAPF32[i2 + 116 >> 2] = d6;
   HEAPF32[i2 + 120 >> 2] = d7;
   HEAPF32[i2 + 124 >> 2] = 0.0;
   d70 = +HEAPF32[i2 + 256 + (i77 << 2) >> 2];
   HEAPF32[i2 + 96 >> 2] = d63 - d3 * d70;
   HEAPF32[i2 + 100 >> 2] = d65 - d70 * d4;
   HEAPF32[i2 + 104 >> 2] = d66 - d70 * d5;
   HEAPF32[i2 + 108 >> 2] = 0.0;
   FUNCTION_TABLE_viiid[i78 & 15](i1, i2 + 112 | 0, i2 + 96 | 0, -d70);
   i44 = i44 + 1 | 0;
  } while ((i44 | 0) < (i54 | 0));
  STACKTOP = i2;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw(i2, i10, i8, i6, i7, i5, i4, i3, i1) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, i45 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 HEAP32[i2 + 188 >> 2] = -1;
 __ZN15CProfileManager13Start_ProfileEPKc(4080);
 HEAP32[i2 + 184 >> 2] = 0;
 if ((i8 | 0) > 0) {
  i12 = 0;
  do {
   HEAP32[(HEAP32[i10 + (i12 << 2) >> 2] | 0) + 212 >> 2] = -1;
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i8 | 0));
 }
 i12 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i12 | 0) < (i8 + 1 | 0)) {
  if ((i8 + 1 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i11 = _malloc(((i8 + 1 | 0) * 244 | 3) + 16 | 0) | 0, (i11 | 0) != 0) : 0) {
   HEAP32[(i11 + 19 & -16) + -4 >> 2] = i11;
   i11 = i11 + 19 & -16;
  } else i11 = 0;
  i12 = HEAP32[i2 + 8 >> 2] | 0;
  if ((i12 | 0) > 0) {
   i13 = 0;
   do {
    i20 = i11 + (i13 * 244 | 0) | 0;
    i45 = HEAP32[i2 + 16 >> 2] | 0;
    i19 = i45 + (i13 * 244 | 0) | 0;
    HEAP32[i20 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
    HEAP32[i20 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
    HEAP32[i20 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
    HEAP32[i20 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
    i20 = i11 + (i13 * 244 | 0) + 16 | 0;
    i19 = i45 + (i13 * 244 | 0) + 16 | 0;
    HEAP32[i20 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
    HEAP32[i20 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
    HEAP32[i20 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
    HEAP32[i20 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
    i20 = i11 + (i13 * 244 | 0) + 32 | 0;
    i19 = i45 + (i13 * 244 | 0) + 32 | 0;
    HEAP32[i20 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
    HEAP32[i20 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
    HEAP32[i20 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
    HEAP32[i20 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
    i20 = i11 + (i13 * 244 | 0) + 48 | 0;
    i19 = i45 + (i13 * 244 | 0) + 48 | 0;
    HEAP32[i20 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
    HEAP32[i20 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
    HEAP32[i20 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
    HEAP32[i20 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
    _memcpy(i11 + (i13 * 244 | 0) + 64 | 0, i45 + (i13 * 244 | 0) + 64 | 0, 180) | 0;
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != (i12 | 0));
  }
  i12 = HEAP32[i2 + 16 >> 2] | 0;
  if ((i12 | 0) != 0) {
   if ((HEAP8[i2 + 20 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i12 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 16 >> 2] = 0;
  }
  HEAP8[i2 + 20 >> 0] = 1;
  HEAP32[i2 + 16 >> 2] = i11;
  HEAP32[i2 + 12 >> 2] = i8 + 1;
  i11 = i2 + 8 | 0;
  i13 = i8 + 1 | 0;
 } else {
  i11 = i2 + 8 | 0;
  i13 = i12;
 }
 _memset(i1 + 56 | 0, 0, 244) | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 if ((i12 | 0) < 0) {
  if ((i13 | 0) < 0) {
   i13 = HEAP32[i2 + 16 >> 2] | 0;
   if ((i13 | 0) != 0) {
    if ((HEAP8[i2 + 20 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i13 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 16 >> 2] = 0;
   }
   HEAP8[i2 + 20 >> 0] = 1;
   HEAP32[i2 + 16 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
  }
  do {
   i45 = HEAP32[i2 + 16 >> 2] | 0;
   i20 = i45 + (i12 * 244 | 0) | 0;
   HEAP32[i20 + 0 >> 2] = HEAP32[i1 + 56 >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[i1 + 60 >> 2];
   HEAP32[i20 + 8 >> 2] = HEAP32[i1 + 64 >> 2];
   HEAP32[i20 + 12 >> 2] = HEAP32[i1 + 68 >> 2];
   i20 = i45 + (i12 * 244 | 0) + 16 | 0;
   HEAP32[i20 + 0 >> 2] = HEAP32[i1 + 72 >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[i1 + 76 >> 2];
   HEAP32[i20 + 8 >> 2] = HEAP32[i1 + 80 >> 2];
   HEAP32[i20 + 12 >> 2] = HEAP32[i1 + 84 >> 2];
   i20 = i45 + (i12 * 244 | 0) + 32 | 0;
   HEAP32[i20 + 0 >> 2] = HEAP32[i1 + 88 >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[i1 + 92 >> 2];
   HEAP32[i20 + 8 >> 2] = HEAP32[i1 + 96 >> 2];
   HEAP32[i20 + 12 >> 2] = HEAP32[i1 + 100 >> 2];
   i20 = i45 + (i12 * 244 | 0) + 48 | 0;
   HEAP32[i20 + 0 >> 2] = HEAP32[i1 + 104 >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[i1 + 108 >> 2];
   HEAP32[i20 + 8 >> 2] = HEAP32[i1 + 112 >> 2];
   HEAP32[i20 + 12 >> 2] = HEAP32[i1 + 116 >> 2];
   _memcpy(i45 + (i12 * 244 | 0) + 64 | 0, i1 + 120 | 0, 180) | 0;
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != 0);
 }
 HEAP32[i11 >> 2] = 0;
 if ((i8 | 0) > 0) {
  i11 = 0;
  do {
   i12 = i10 + (i11 << 2) | 0;
   i13 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i2, HEAP32[i12 >> 2] | 0, +HEAPF32[i3 + 12 >> 2]) | 0;
   i12 = HEAP32[i12 >> 2] | 0;
   if ((!((i12 | 0) == 0 ? 1 : (HEAP32[i12 + 236 >> 2] & 2 | 0) == 0) ? +HEAPF32[i12 + 344 >> 2] != 0.0 : 0) ? (i9 = HEAP32[i2 + 16 >> 2] | 0, (HEAP32[i12 + 504 >> 2] & 2 | 0) != 0) : 0) {
    d27 = +HEAPF32[i3 + 76 >> 2];
    d39 = 1.0 / +HEAPF32[i12 + 396 >> 2];
    d42 = 1.0 / +HEAPF32[i12 + 400 >> 2];
    d28 = 1.0 / +HEAPF32[i12 + 404 >> 2];
    d35 = +HEAPF32[i12 + 4 >> 2];
    d36 = +HEAPF32[i12 + 8 >> 2];
    d37 = +HEAPF32[i12 + 12 >> 2];
    d38 = +HEAPF32[i12 + 20 >> 2];
    d41 = +HEAPF32[i12 + 24 >> 2];
    d44 = +HEAPF32[i12 + 28 >> 2];
    d40 = +HEAPF32[i12 + 36 >> 2];
    d43 = +HEAPF32[i12 + 40 >> 2];
    d25 = +HEAPF32[i12 + 44 >> 2];
    d24 = +HEAPF32[i12 + 328 >> 2];
    d22 = +HEAPF32[i12 + 332 >> 2];
    d26 = +HEAPF32[i12 + 336 >> 2];
    d21 = (d35 * d39 * d35 + d36 * d42 * d36 + d37 * d28 * d37) * d24 + (d39 * d35 * d38 + d42 * d36 * d41 + d28 * d37 * d44) * d22 + (d39 * d35 * d40 + d42 * d36 * d43 + d28 * d37 * d25) * d26;
    d23 = (d35 * d39 * d38 + d36 * d42 * d41 + d37 * d28 * d44) * d24 + (d38 * d39 * d38 + d41 * d42 * d41 + d44 * d28 * d44) * d22 + (d39 * d38 * d40 + d42 * d41 * d43 + d28 * d44 * d25) * d26;
    d25 = d26 * (d40 * d39 * d40 + d43 * d42 * d43 + d25 * d28 * d25) + (d24 * (d35 * d39 * d40 + d36 * d42 * d43 + d37 * d28 * d25) + d22 * (d38 * d39 * d40 + d41 * d42 * d43 + d44 * d28 * d25));
    d28 = (d22 * d25 - d26 * d23) * (d22 * d25 - d26 * d23) + (d26 * d21 - d24 * d25) * (d26 * d21 - d24 * d25) + (d24 * d23 - d22 * d21) * (d24 * d23 - d22 * d21);
    if (d28 > d27 * d27) {
     d44 = 1.0 / +Math_sqrt(+d28) * d27;
     d27 = (d22 * d25 - d26 * d23) * d44;
     d25 = d44 * (d26 * d21 - d24 * d25);
     d21 = d44 * (d24 * d23 - d22 * d21);
    } else {
     d27 = d22 * d25 - d26 * d23;
     d25 = d26 * d21 - d24 * d25;
     d21 = d24 * d23 - d22 * d21;
    }
    d42 = +HEAPF32[i3 + 12 >> 2];
    d43 = (d27 * +HEAPF32[i12 + 268 >> 2] + d25 * +HEAPF32[i12 + 284 >> 2] + d21 * +HEAPF32[i12 + 300 >> 2]) * d42;
    d44 = d42 * (d27 * +HEAPF32[i12 + 272 >> 2] + d25 * +HEAPF32[i12 + 288 >> 2] + d21 * +HEAPF32[i12 + 304 >> 2]);
    HEAPF32[i9 + (i13 * 244 | 0) + 224 >> 2] = +HEAPF32[i9 + (i13 * 244 | 0) + 224 >> 2] - (d27 * +HEAPF32[i12 + 264 >> 2] + d25 * +HEAPF32[i12 + 280 >> 2] + d21 * +HEAPF32[i12 + 296 >> 2]) * d42;
    HEAPF32[i9 + (i13 * 244 | 0) + 228 >> 2] = +HEAPF32[i9 + (i13 * 244 | 0) + 228 >> 2] - d43;
    HEAPF32[i9 + (i13 * 244 | 0) + 232 >> 2] = +HEAPF32[i9 + (i13 * 244 | 0) + 232 >> 2] - d44;
   }
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < (i8 | 0));
 }
 if ((i4 | 0) > 0) {
  i8 = 0;
  do {
   i45 = HEAP32[i5 + (i8 << 2) >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i45 >> 2] | 0) + 8 >> 2] & 511](i45);
   HEAPF32[i45 + 36 >> 2] = 0.0;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) < (i4 | 0));
 }
 i11 = HEAP32[i2 + 168 >> 2] | 0;
 if ((i11 | 0) < (i4 | 0) ? (HEAP32[i2 + 172 >> 2] | 0) < (i4 | 0) : 0) {
  if ((i4 | 0) == 0) i8 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i8 = _malloc((i4 << 3 | 3) + 16 | 0) | 0;
   if ((i8 | 0) == 0) i8 = 0; else {
    HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
    i8 = i8 + 19 & -16;
   }
   i11 = HEAP32[i2 + 168 >> 2] | 0;
  }
  if ((i11 | 0) > 0) {
   i9 = 0;
   do {
    i10 = i8 + (i9 << 3) | 0;
    if ((i10 | 0) != 0) {
     i20 = (HEAP32[i2 + 176 >> 2] | 0) + (i9 << 3) | 0;
     i45 = HEAP32[i20 + 4 >> 2] | 0;
     HEAP32[i10 >> 2] = HEAP32[i20 >> 2];
     HEAP32[i10 + 4 >> 2] = i45;
    }
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i11 | 0));
  }
  i9 = HEAP32[i2 + 176 >> 2] | 0;
  if ((i9 | 0) != 0) {
   if ((HEAP8[i2 + 180 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i9 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 176 >> 2] = 0;
  }
  HEAP8[i2 + 180 >> 0] = 1;
  HEAP32[i2 + 176 >> 2] = i8;
  HEAP32[i2 + 172 >> 2] = i4;
 }
 HEAP32[i2 + 168 >> 2] = i4;
 if ((i4 | 0) > 0) {
  i8 = 0;
  i9 = 0;
  do {
   i10 = HEAP32[i2 + 176 >> 2] | 0;
   i11 = i10 + (i8 << 3) | 0;
   i12 = i5 + (i8 << 2) | 0;
   i13 = HEAP32[i12 >> 2] | 0;
   i14 = HEAP32[i13 + 44 >> 2] | 0;
   if ((i14 | 0) != 0) {
    i13 = i14 + 0 | 0;
    i14 = i13 + 64 | 0;
    do {
     HEAP32[i13 >> 2] = 0;
     i13 = i13 + 4 | 0;
    } while ((i13 | 0) < (i14 | 0));
    i13 = HEAP32[i12 >> 2] | 0;
   }
   if ((HEAP8[i13 + 20 >> 0] | 0) == 0) {
    HEAP32[i11 >> 2] = 0;
    HEAP32[i10 + (i8 << 3) + 4 >> 2] = 0;
    i10 = 0;
   } else {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] & 127](i13, i11);
    i10 = HEAP32[i11 >> 2] | 0;
   }
   i9 = i10 + i9 | 0;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) < (i4 | 0));
 } else i9 = 0;
 i11 = HEAP32[i2 + 48 >> 2] | 0;
 if ((i11 | 0) < (i9 | 0) ? (HEAP32[i2 + 52 >> 2] | 0) < (i9 | 0) : 0) {
  if ((i9 | 0) == 0) i8 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i8 = _malloc((i9 * 152 | 3) + 16 | 0) | 0;
   if ((i8 | 0) == 0) i8 = 0; else {
    HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
    i8 = i8 + 19 & -16;
   }
   i11 = HEAP32[i2 + 48 >> 2] | 0;
  }
  if ((i11 | 0) > 0) {
   i10 = 0;
   do {
    _memcpy(i8 + (i10 * 152 | 0) | 0, (HEAP32[i2 + 56 >> 2] | 0) + (i10 * 152 | 0) | 0, 152) | 0;
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i11 | 0));
  }
  i10 = HEAP32[i2 + 56 >> 2] | 0;
  if ((i10 | 0) != 0) {
   if ((HEAP8[i2 + 60 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i10 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 56 >> 2] = 0;
  }
  HEAP8[i2 + 60 >> 0] = 1;
  HEAP32[i2 + 56 >> 2] = i8;
  HEAP32[i2 + 52 >> 2] = i9;
 }
 HEAP32[i2 + 48 >> 2] = i9;
 if ((i4 | 0) > 0) {
  i11 = HEAP32[i2 + 176 >> 2] | 0;
  i8 = 0;
  i9 = 0;
  while (1) {
   i10 = i11 + (i9 << 3) | 0;
   if ((HEAP32[i10 >> 2] | 0) == 0) i10 = 0; else {
    i18 = HEAP32[i2 + 56 >> 2] | 0;
    i17 = i5 + (i9 << 2) | 0;
    i16 = HEAP32[i17 >> 2] | 0;
    i11 = HEAP32[i16 + 28 >> 2] | 0;
    i12 = HEAP32[i16 + 32 >> 2] | 0;
    i15 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i2, i11, +HEAPF32[i3 + 12 >> 2]) | 0;
    i14 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i2, i12, +HEAPF32[i3 + 12 >> 2]) | 0;
    i13 = HEAP32[i2 + 16 >> 2] | 0;
    i20 = HEAP32[i16 + 24 >> 2] | 0;
    if ((i20 | 0) <= 0) i20 = HEAP32[i3 + 20 >> 2] | 0;
    if ((i20 | 0) > (HEAP32[i2 + 184 >> 2] | 0)) HEAP32[i2 + 184 >> 2] = i20;
    if ((HEAP32[i10 >> 2] | 0) > 0) {
     i19 = 0;
     do {
      i45 = i19 + i8 | 0;
      _memset(i18 + (i45 * 152 | 0) | 0, 0, 152) | 0;
      HEAPF32[i18 + (i45 * 152 | 0) + 120 >> 2] = -3.4028234663852886e+38;
      HEAPF32[i18 + (i45 * 152 | 0) + 124 >> 2] = 3.4028234663852886e+38;
      HEAPF32[i18 + (i45 * 152 | 0) + 100 >> 2] = 0.0;
      HEAPF32[i18 + (i45 * 152 | 0) + 96 >> 2] = 0.0;
      HEAP32[i18 + (i45 * 152 | 0) + 144 >> 2] = i15;
      HEAP32[i18 + (i45 * 152 | 0) + 148 >> 2] = i14;
      HEAP32[i18 + (i45 * 152 | 0) + 136 >> 2] = i20;
      i19 = i19 + 1 | 0;
     } while ((i19 | 0) < (HEAP32[i10 >> 2] | 0));
    }
    HEAP32[i13 + (i15 * 244 | 0) + 64 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 68 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 72 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 76 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 80 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 84 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 88 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 92 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 144 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 148 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 152 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 156 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 160 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 164 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 168 >> 2] = 0;
    HEAP32[i13 + (i15 * 244 | 0) + 172 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 64 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 68 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 72 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 76 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 80 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 84 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 88 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 92 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 144 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 148 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 152 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 156 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 160 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 164 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 168 >> 2] = 0;
    HEAP32[i13 + (i14 * 244 | 0) + 172 >> 2] = 0;
    HEAPF32[i1 >> 2] = 1.0 / +HEAPF32[i3 + 12 >> 2];
    HEAPF32[i1 + 4 >> 2] = +HEAPF32[i3 + 32 >> 2];
    HEAP32[i1 + 8 >> 2] = i18 + (i8 * 152 | 0) + 16;
    HEAP32[i1 + 12 >> 2] = i18 + (i8 * 152 | 0);
    HEAP32[i1 + 16 >> 2] = i18 + (i8 * 152 | 0) + 48;
    HEAP32[i1 + 20 >> 2] = i18 + (i8 * 152 | 0) + 32;
    HEAP32[i1 + 24 >> 2] = 38;
    HEAP32[i1 + 28 >> 2] = i18 + (i8 * 152 | 0) + 112;
    i45 = i18 + (i8 * 152 | 0) + 116 | 0;
    HEAPF32[i45 >> 2] = +HEAPF32[i3 + 40 >> 2];
    HEAPF32[i1 + 52 >> 2] = +HEAPF32[i3 + 4 >> 2];
    HEAP32[i1 + 32 >> 2] = i45;
    HEAP32[i1 + 36 >> 2] = i18 + (i8 * 152 | 0) + 120;
    HEAP32[i1 + 40 >> 2] = i18 + (i8 * 152 | 0) + 124;
    HEAP32[i1 + 48 >> 2] = HEAP32[i3 + 20 >> 2];
    i45 = HEAP32[i17 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i45 >> 2] | 0) + 20 >> 2] & 127](i45, i1);
    if ((HEAP32[i10 >> 2] | 0) > 0) {
     i19 = 0;
     do {
      i20 = i19 + i8 | 0;
      i45 = (HEAP32[i17 >> 2] | 0) + 16 | 0;
      d21 = +HEAPF32[i45 >> 2];
      if (+HEAPF32[i18 + (i20 * 152 | 0) + 124 >> 2] >= d21) {
       HEAPF32[i18 + (i20 * 152 | 0) + 124 >> 2] = d21;
       d21 = +HEAPF32[i45 >> 2];
      }
      d21 = -d21;
      if (+HEAPF32[i18 + (i20 * 152 | 0) + 120 >> 2] <= d21) HEAPF32[i18 + (i20 * 152 | 0) + 120 >> 2] = d21;
      HEAP32[i18 + (i20 * 152 | 0) + 132 >> 2] = i16;
      i45 = HEAP32[i16 + 28 >> 2] | 0;
      d43 = +HEAPF32[i18 + (i20 * 152 | 0) >> 2];
      d31 = +HEAPF32[i18 + (i20 * 152 | 0) + 4 >> 2];
      d32 = +HEAPF32[i18 + (i20 * 152 | 0) + 8 >> 2];
      d21 = (d43 * +HEAPF32[i45 + 280 >> 2] + d31 * +HEAPF32[i45 + 284 >> 2] + d32 * +HEAPF32[i45 + 288 >> 2]) * +HEAPF32[i45 + 548 >> 2];
      d30 = (d43 * +HEAPF32[i45 + 296 >> 2] + d31 * +HEAPF32[i45 + 300 >> 2] + d32 * +HEAPF32[i45 + 304 >> 2]) * +HEAPF32[i45 + 552 >> 2];
      HEAPF32[i18 + (i20 * 152 | 0) + 64 >> 2] = (+HEAPF32[i45 + 264 >> 2] * d43 + +HEAPF32[i45 + 268 >> 2] * d31 + +HEAPF32[i45 + 272 >> 2] * d32) * +HEAPF32[i45 + 544 >> 2];
      HEAPF32[i18 + (i20 * 152 | 0) + 68 >> 2] = d21;
      HEAPF32[i18 + (i20 * 152 | 0) + 72 >> 2] = d30;
      HEAPF32[i18 + (i20 * 152 | 0) + 76 >> 2] = 0.0;
      i45 = HEAP32[i16 + 32 >> 2] | 0;
      d30 = +HEAPF32[i18 + (i20 * 152 | 0) + 32 >> 2];
      d21 = +HEAPF32[i18 + (i20 * 152 | 0) + 36 >> 2];
      d32 = +HEAPF32[i18 + (i20 * 152 | 0) + 40 >> 2];
      d31 = (d30 * +HEAPF32[i45 + 280 >> 2] + d21 * +HEAPF32[i45 + 284 >> 2] + d32 * +HEAPF32[i45 + 288 >> 2]) * +HEAPF32[i45 + 548 >> 2];
      d43 = (d30 * +HEAPF32[i45 + 296 >> 2] + d21 * +HEAPF32[i45 + 300 >> 2] + d32 * +HEAPF32[i45 + 304 >> 2]) * +HEAPF32[i45 + 552 >> 2];
      HEAPF32[i18 + (i20 * 152 | 0) + 80 >> 2] = (+HEAPF32[i45 + 264 >> 2] * d30 + +HEAPF32[i45 + 268 >> 2] * d21 + +HEAPF32[i45 + 272 >> 2] * d32) * +HEAPF32[i45 + 544 >> 2];
      HEAPF32[i18 + (i20 * 152 | 0) + 84 >> 2] = d31;
      HEAPF32[i18 + (i20 * 152 | 0) + 88 >> 2] = d43;
      HEAPF32[i18 + (i20 * 152 | 0) + 92 >> 2] = 0.0;
      d43 = +HEAPF32[i11 + 344 >> 2];
      d31 = +HEAPF32[i18 + (i20 * 152 | 0) + 16 >> 2];
      d30 = +HEAPF32[i18 + (i20 * 152 | 0) + 20 >> 2];
      d29 = +HEAPF32[i18 + (i20 * 152 | 0) + 24 >> 2];
      d28 = +HEAPF32[i18 + (i20 * 152 | 0) >> 2];
      d27 = +HEAPF32[i18 + (i20 * 152 | 0) + 4 >> 2];
      d26 = +HEAPF32[i18 + (i20 * 152 | 0) + 8 >> 2];
      d44 = +HEAPF32[i12 + 344 >> 2];
      d25 = +HEAPF32[i18 + (i20 * 152 | 0) + 48 >> 2];
      d24 = +HEAPF32[i18 + (i20 * 152 | 0) + 52 >> 2];
      d23 = +HEAPF32[i18 + (i20 * 152 | 0) + 56 >> 2];
      d22 = +HEAPF32[i18 + (i20 * 152 | 0) + 32 >> 2];
      d32 = d31 * d43 * d31 + d30 * d43 * d30 + d29 * d43 * d29 + (d28 * (+HEAPF32[i11 + 264 >> 2] * d28 + +HEAPF32[i11 + 268 >> 2] * d27 + +HEAPF32[i11 + 272 >> 2] * d26) + d27 * (d28 * +HEAPF32[i11 + 280 >> 2] + d27 * +HEAPF32[i11 + 284 >> 2] + d26 * +HEAPF32[i11 + 288 >> 2]) + d26 * (d28 * +HEAPF32[i11 + 296 >> 2] + d27 * +HEAPF32[i11 + 300 >> 2] + d26 * +HEAPF32[i11 + 304 >> 2])) + (d25 * d44 * d25 + d24 * d44 * d24 + d23 * d44 * d23) + (d22 * (+HEAPF32[i12 + 264 >> 2] * d22 + +HEAPF32[i12 + 268 >> 2] * d21 + +HEAPF32[i12 + 272 >> 2] * d32) + d21 * (d22 * +HEAPF32[i12 + 280 >> 2] + d21 * +HEAPF32[i12 + 284 >> 2] + d32 * +HEAPF32[i12 + 288 >> 2]) + d32 * (d22 * +HEAPF32[i12 + 296 >> 2] + d21 * +HEAPF32[i12 + 300 >> 2] + d32 * +HEAPF32[i12 + 304 >> 2]));
      if (+Math_abs(+d32) > 1.1920928955078125e-7) d40 = 1.0 / d32; else d40 = 0.0;
      HEAPF32[i18 + (i20 * 152 | 0) + 108 >> 2] = d40;
      if ((HEAP32[i13 + (i15 * 244 | 0) + 240 >> 2] | 0) == 0) {
       d44 = 0.0;
       d33 = 0.0;
       d34 = 0.0;
       d35 = 0.0;
       d36 = 0.0;
       d37 = 0.0;
      } else {
       d44 = +HEAPF32[i13 + (i15 * 244 | 0) + 208 >> 2];
       d33 = +HEAPF32[i13 + (i15 * 244 | 0) + 212 >> 2];
       d34 = +HEAPF32[i13 + (i15 * 244 | 0) + 216 >> 2];
       d35 = +HEAPF32[i13 + (i15 * 244 | 0) + 224 >> 2];
       d36 = +HEAPF32[i13 + (i15 * 244 | 0) + 228 >> 2];
       d37 = +HEAPF32[i13 + (i15 * 244 | 0) + 232 >> 2];
      }
      if ((HEAP32[i13 + (i14 * 244 | 0) + 240 >> 2] | 0) == 0) {
       d43 = 0.0;
       d42 = 0.0;
       d41 = 0.0;
       d32 = 0.0;
       d39 = 0.0;
       d38 = 0.0;
      } else {
       d43 = +HEAPF32[i13 + (i14 * 244 | 0) + 208 >> 2];
       d42 = +HEAPF32[i13 + (i14 * 244 | 0) + 212 >> 2];
       d41 = +HEAPF32[i13 + (i14 * 244 | 0) + 216 >> 2];
       d32 = +HEAPF32[i13 + (i14 * 244 | 0) + 224 >> 2];
       d39 = +HEAPF32[i13 + (i14 * 244 | 0) + 228 >> 2];
       d38 = +HEAPF32[i13 + (i14 * 244 | 0) + 232 >> 2];
      }
      HEAPF32[i18 + (i20 * 152 | 0) + 112 >> 2] = +HEAPF32[i18 + (i20 * 152 | 0) + 112 >> 2] * d40 + d40 * (0.0 - +HEAPF32[i1 + 52 >> 2] * ((d44 + +HEAPF32[i11 + 312 >> 2]) * d31 + (d33 + +HEAPF32[i11 + 316 >> 2]) * d30 + (d34 + +HEAPF32[i11 + 320 >> 2]) * d29 + ((d35 + +HEAPF32[i11 + 328 >> 2]) * d28 + (d36 + +HEAPF32[i11 + 332 >> 2]) * d27 + (d37 + +HEAPF32[i11 + 336 >> 2]) * d26) + ((d43 + +HEAPF32[i12 + 312 >> 2]) * d25 + (d42 + +HEAPF32[i12 + 316 >> 2]) * d24 + (d41 + +HEAPF32[i12 + 320 >> 2]) * d23 + ((d32 + +HEAPF32[i12 + 328 >> 2]) * d22 + (d39 + +HEAPF32[i12 + 332 >> 2]) * d21 + (d38 + +HEAPF32[i12 + 336 >> 2]) * +HEAPF32[i18 + (i20 * 152 | 0) + 40 >> 2]))));
      HEAPF32[i18 + (i20 * 152 | 0) + 100 >> 2] = 0.0;
      i19 = i19 + 1 | 0;
     } while ((i19 | 0) < (HEAP32[i10 >> 2] | 0));
    }
    i10 = HEAP32[i2 + 176 >> 2] | 0;
    i11 = i10;
    i10 = HEAP32[i10 + (i9 << 3) >> 2] | 0;
   }
   i9 = i9 + 1 | 0;
   if ((i9 | 0) >= (i4 | 0)) break; else i8 = i10 + i8 | 0;
  }
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2, i6, i7, i3);
 i6 = HEAP32[i2 + 48 >> 2] | 0;
 i5 = HEAP32[i2 + 28 >> 2] | 0;
 i4 = HEAP32[i2 + 68 >> 2] | 0;
 i8 = HEAP32[i2 + 128 >> 2] | 0;
 if ((i8 | 0) < (i6 | 0) ? (HEAP32[i2 + 132 >> 2] | 0) < (i6 | 0) : 0) {
  if ((i6 | 0) == 0) i7 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i7 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
   if ((i7 | 0) == 0) i7 = 0; else {
    HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
    i7 = i7 + 19 & -16;
   }
   i8 = HEAP32[i2 + 128 >> 2] | 0;
  }
  if ((i8 | 0) > 0) {
   i9 = 0;
   do {
    i10 = i7 + (i9 << 2) | 0;
    if ((i10 | 0) != 0) HEAP32[i10 >> 2] = HEAP32[(HEAP32[i2 + 136 >> 2] | 0) + (i9 << 2) >> 2];
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i8 | 0));
  }
  i8 = HEAP32[i2 + 136 >> 2] | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i2 + 140 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i8 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 136 >> 2] = 0;
  }
  HEAP8[i2 + 140 >> 0] = 1;
  HEAP32[i2 + 136 >> 2] = i7;
  HEAP32[i2 + 132 >> 2] = i6;
 }
 HEAP32[i2 + 128 >> 2] = i6;
 if ((HEAP32[i3 + 64 >> 2] & 16 | 0) == 0) {
  i7 = HEAP32[i2 + 108 >> 2] | 0;
  if ((i7 | 0) < (i5 | 0) ? (HEAP32[i2 + 112 >> 2] | 0) < (i5 | 0) : 0) {
   if ((i5 | 0) == 0) i3 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i3 = _malloc((i5 << 2 | 3) + 16 | 0) | 0;
    if ((i3 | 0) == 0) i3 = 0; else {
     HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
     i3 = i3 + 19 & -16;
    }
    i7 = HEAP32[i2 + 108 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i8 = 0;
    do {
     i9 = i3 + (i8 << 2) | 0;
     if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i2 + 116 >> 2] | 0) + (i8 << 2) >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i7 | 0));
   }
   i7 = HEAP32[i2 + 116 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i2 + 120 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 116 >> 2] = 0;
   }
   HEAP8[i2 + 120 >> 0] = 1;
   HEAP32[i2 + 116 >> 2] = i3;
   HEAP32[i2 + 112 >> 2] = i5;
  }
  HEAP32[i2 + 108 >> 2] = i5;
 } else {
  i9 = HEAP32[i2 + 108 >> 2] | 0;
  if ((i9 | 0) < (i5 << 1 | 0) ? (HEAP32[i2 + 112 >> 2] | 0) < (i5 << 1 | 0) : 0) {
   if ((i5 | 0) == 0) i3 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i3 = _malloc((i5 << 3 | 3) + 16 | 0) | 0;
    if ((i3 | 0) == 0) i3 = 0; else {
     HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
     i3 = i3 + 19 & -16;
    }
    i9 = HEAP32[i2 + 108 >> 2] | 0;
   }
   if ((i9 | 0) > 0) {
    i8 = 0;
    do {
     i7 = i3 + (i8 << 2) | 0;
     if ((i7 | 0) != 0) HEAP32[i7 >> 2] = HEAP32[(HEAP32[i2 + 116 >> 2] | 0) + (i8 << 2) >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i9 | 0));
   }
   i7 = HEAP32[i2 + 116 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i2 + 120 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 116 >> 2] = 0;
   }
   HEAP8[i2 + 120 >> 0] = 1;
   HEAP32[i2 + 116 >> 2] = i3;
   HEAP32[i2 + 112 >> 2] = i5 << 1;
  }
  HEAP32[i2 + 108 >> 2] = i5 << 1;
 }
 i8 = HEAP32[i2 + 148 >> 2] | 0;
 if ((i8 | 0) < (i4 | 0) ? (HEAP32[i2 + 152 >> 2] | 0) < (i4 | 0) : 0) {
  if ((i4 | 0) == 0) i3 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i3 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i3 | 0) == 0) i3 = 0; else {
    HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
    i3 = i3 + 19 & -16;
   }
   i8 = HEAP32[i2 + 148 >> 2] | 0;
  }
  if ((i8 | 0) > 0) {
   i7 = 0;
   do {
    i9 = i3 + (i7 << 2) | 0;
    if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i2 + 156 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i8 | 0));
  }
  i7 = HEAP32[i2 + 156 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i2 + 160 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 156 >> 2] = 0;
  }
  HEAP8[i2 + 160 >> 0] = 1;
  HEAP32[i2 + 156 >> 2] = i3;
  HEAP32[i2 + 152 >> 2] = i4;
 }
 HEAP32[i2 + 148 >> 2] = i4;
 if ((i6 | 0) > 0) {
  i7 = HEAP32[i2 + 136 >> 2] | 0;
  i3 = 0;
  do {
   HEAP32[i7 + (i3 << 2) >> 2] = i3;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i6 | 0));
 }
 if ((i5 | 0) > 0) {
  i3 = HEAP32[i2 + 116 >> 2] | 0;
  i6 = 0;
  do {
   HEAP32[i3 + (i6 << 2) >> 2] = i6;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i5 | 0));
 }
 if ((i4 | 0) > 0) {
  i2 = HEAP32[i2 + 156 >> 2] | 0;
  i3 = 0;
  do {
   HEAP32[i2 + (i3 << 2) >> 2] = i3;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i4 | 0));
 }
 i2 = HEAP32[5022] | 0;
 i45 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i45;
 if ((i45 | 0) != 0) {
  STACKTOP = i1;
  return 0.0;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 + 304 | 0, 0) | 0;
  i45 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 308 >> 2] | 0) - (HEAP32[i45 + 4 >> 2] | 0) + (((HEAP32[i1 + 304 >> 2] | 0) - (HEAP32[i45 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return 0.0;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return 0.0;
}
function __ZN20btConvexHullInternal24findEdgeForCoplanarFacesEPNS_6VertexES1_RPNS_4EdgeES4_S1_S1_(i2, i9, i8, i4, i1) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i17 = HEAP32[i4 >> 2] | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 if ((i17 | 0) != 0) i6 = HEAP32[i17 + 12 >> 2] | 0; else i6 = i9;
 i22 = HEAP32[i6 + 88 >> 2] | 0;
 i21 = HEAP32[i6 + 92 >> 2] | 0;
 i20 = HEAP32[i6 + 96 >> 2] | 0;
 if ((i5 | 0) == 0) i6 = i8; else i6 = HEAP32[i5 + 12 >> 2] | 0;
 i26 = HEAP32[i6 + 88 >> 2] | 0;
 i25 = HEAP32[i6 + 92 >> 2] | 0;
 i24 = HEAP32[i6 + 96 >> 2] | 0;
 i16 = HEAP32[i9 + 88 >> 2] | 0;
 i6 = (HEAP32[i8 + 88 >> 2] | 0) - i16 | 0;
 i27 = HEAP32[i9 + 92 >> 2] | 0;
 i7 = (HEAP32[i8 + 92 >> 2] | 0) - i27 | 0;
 i30 = HEAP32[i9 + 96 >> 2] | 0;
 i14 = (HEAP32[i8 + 96 >> 2] | 0) - i30 | 0;
 i8 = HEAP32[((i17 | 0) != 0 ? i17 : i5) + 12 >> 2] | 0;
 i13 = (HEAP32[i8 + 88 >> 2] | 0) - i16 | 0;
 i19 = (HEAP32[i8 + 92 >> 2] | 0) - i27 | 0;
 i8 = (HEAP32[i8 + 96 >> 2] | 0) - i30 | 0;
 i15 = (Math_imul(i19, i14) | 0) - (Math_imul(i8, i7) | 0) | 0;
 i8 = (Math_imul(i8, i6) | 0) - (Math_imul(i13, i14) | 0) | 0;
 i19 = (Math_imul(i13, i7) | 0) - (Math_imul(i19, i6) | 0) | 0;
 i16 = ___muldi3(i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0, i16 | 0, ((i16 | 0) < 0) << 31 >> 31 | 0) | 0;
 i13 = tempRet0;
 i27 = ___muldi3(i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0, i27 | 0, ((i27 | 0) < 0) << 31 >> 31 | 0) | 0;
 i28 = tempRet0;
 i30 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i30 | 0, ((i30 | 0) < 0) << 31 >> 31 | 0) | 0;
 i30 = _i64Add(i16 | 0, i13 | 0, i30 | 0, tempRet0 | 0) | 0;
 i28 = _i64Add(i30 | 0, tempRet0 | 0, i27 | 0, i28 | 0) | 0;
 i27 = tempRet0;
 i30 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0) | 0;
 i13 = tempRet0;
 i16 = ___muldi3(i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0, i14 | 0, ((i14 | 0) < 0) << 31 >> 31 | 0) | 0;
 i16 = _i64Subtract(i30 | 0, i13 | 0, i16 | 0, tempRet0 | 0) | 0;
 i13 = tempRet0;
 i30 = ___muldi3(i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0, i14 | 0, ((i14 | 0) < 0) << 31 >> 31 | 0) | 0;
 i10 = tempRet0;
 i9 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i6 | 0, ((i6 | 0) < 0) << 31 >> 31 | 0) | 0;
 i9 = _i64Subtract(i30 | 0, i10 | 0, i9 | 0, tempRet0 | 0) | 0;
 i10 = tempRet0;
 i30 = ___muldi3(i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0, i6 | 0, ((i6 | 0) < 0) << 31 >> 31 | 0) | 0;
 i12 = tempRet0;
 i11 = ___muldi3(i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0, i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0) | 0;
 i11 = _i64Subtract(i30 | 0, i12 | 0, i11 | 0, tempRet0 | 0) | 0;
 i12 = tempRet0;
 i30 = ___muldi3(i16 | 0, i13 | 0, i22 | 0, ((i22 | 0) < 0) << 31 >> 31 | 0) | 0;
 i49 = tempRet0;
 i29 = ___muldi3(i9 | 0, i10 | 0, i21 | 0, ((i21 | 0) < 0) << 31 >> 31 | 0) | 0;
 i49 = _i64Add(i29 | 0, tempRet0 | 0, i30 | 0, i49 | 0) | 0;
 i30 = tempRet0;
 i29 = ___muldi3(i11 | 0, i12 | 0, i20 | 0, ((i20 | 0) < 0) << 31 >> 31 | 0) | 0;
 i29 = _i64Add(i49 | 0, i30 | 0, i29 | 0, tempRet0 | 0) | 0;
 i30 = tempRet0;
 if ((i17 | 0) != 0 ? (HEAP32[i17 + 12 >> 2] | 0) != 0 : 0) {
  i23 = i17;
  while (1) {
   i23 = HEAP32[(HEAP32[i23 + 8 >> 2] | 0) + 4 >> 2] | 0;
   i33 = i23 + 12 | 0;
   i32 = HEAP32[i33 >> 2] | 0;
   i34 = HEAP32[i32 + 88 >> 2] | 0;
   i48 = ___muldi3(i34 | 0, ((i34 | 0) < 0) << 31 >> 31 | 0, i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0) | 0;
   i47 = tempRet0;
   i31 = HEAP32[i32 + 92 >> 2] | 0;
   i49 = ___muldi3(i31 | 0, ((i31 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
   i47 = _i64Add(i49 | 0, tempRet0 | 0, i48 | 0, i47 | 0) | 0;
   i48 = tempRet0;
   i32 = HEAP32[i32 + 96 >> 2] | 0;
   i49 = ___muldi3(i32 | 0, ((i32 | 0) < 0) << 31 >> 31 | 0, i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0) | 0;
   i49 = _i64Add(i47 | 0, i48 | 0, i49 | 0, tempRet0 | 0) | 0;
   i48 = tempRet0;
   if ((i48 | 0) < (i27 | 0) | (i48 | 0) == (i27 | 0) & i49 >>> 0 < i28 >>> 0) break;
   if ((HEAP32[i23 + 20 >> 2] | 0) == (HEAP32[i2 + 100 >> 2] | 0)) break;
   i48 = ___muldi3(i34 | 0, ((i34 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
   i49 = tempRet0;
   i31 = ___muldi3(i31 | 0, ((i31 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
   i49 = _i64Add(i31 | 0, tempRet0 | 0, i48 | 0, i49 | 0) | 0;
   i31 = tempRet0;
   i32 = ___muldi3(i32 | 0, ((i32 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
   i32 = _i64Add(i49 | 0, i31 | 0, i32 | 0, tempRet0 | 0) | 0;
   i31 = tempRet0;
   if (!((i31 | 0) > (i30 | 0) | (i31 | 0) == (i30 | 0) & i32 >>> 0 > i29 >>> 0)) break;
   HEAP32[i4 >> 2] = i23;
   i49 = HEAP32[i33 >> 2] | 0;
   i22 = HEAP32[i49 + 88 >> 2] | 0;
   i21 = HEAP32[i49 + 92 >> 2] | 0;
   i20 = HEAP32[i49 + 96 >> 2] | 0;
   if ((i49 | 0) == 0) {
    i29 = i32;
    i30 = i31;
    break;
   } else {
    i30 = i31;
    i29 = i32;
   }
  }
  i23 = HEAP32[i1 >> 2] | 0;
 } else i23 = i5;
 i31 = ___muldi3(i16 | 0, i13 | 0, i26 | 0, ((i26 | 0) < 0) << 31 >> 31 | 0) | 0;
 i49 = tempRet0;
 i32 = ___muldi3(i9 | 0, i10 | 0, i25 | 0, ((i25 | 0) < 0) << 31 >> 31 | 0) | 0;
 i49 = _i64Add(i32 | 0, tempRet0 | 0, i31 | 0, i49 | 0) | 0;
 i31 = tempRet0;
 i32 = ___muldi3(i11 | 0, i12 | 0, i24 | 0, ((i24 | 0) < 0) << 31 >> 31 | 0) | 0;
 i32 = _i64Add(i49 | 0, i31 | 0, i32 | 0, tempRet0 | 0) | 0;
 i31 = tempRet0;
 L17 : do if ((i23 | 0) != 0) if ((HEAP32[i23 + 12 >> 2] | 0) == 0) i27 = i32; else while (1) {
  i33 = HEAP32[HEAP32[i23 + 8 >> 2] >> 2] | 0;
  i36 = HEAP32[i33 + 12 >> 2] | 0;
  i34 = HEAP32[i36 + 88 >> 2] | 0;
  i48 = ___muldi3(i34 | 0, ((i34 | 0) < 0) << 31 >> 31 | 0, i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0) | 0;
  i47 = tempRet0;
  i35 = HEAP32[i36 + 92 >> 2] | 0;
  i49 = ___muldi3(i35 | 0, ((i35 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
  i47 = _i64Add(i49 | 0, tempRet0 | 0, i48 | 0, i47 | 0) | 0;
  i48 = tempRet0;
  i36 = HEAP32[i36 + 96 >> 2] | 0;
  i49 = ___muldi3(i36 | 0, ((i36 | 0) < 0) << 31 >> 31 | 0, i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0) | 0;
  i49 = _i64Add(i47 | 0, i48 | 0, i49 | 0, tempRet0 | 0) | 0;
  i48 = tempRet0;
  if ((i48 | 0) < (i27 | 0) | (i48 | 0) == (i27 | 0) & i49 >>> 0 < i28 >>> 0) {
   i27 = i32;
   break L17;
  }
  if ((HEAP32[i33 + 20 >> 2] | 0) == (HEAP32[i2 + 100 >> 2] | 0)) {
   i27 = i32;
   break L17;
  }
  i34 = ___muldi3(i34 | 0, ((i34 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
  i49 = tempRet0;
  i35 = ___muldi3(i35 | 0, ((i35 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
  i49 = _i64Add(i35 | 0, tempRet0 | 0, i34 | 0, i49 | 0) | 0;
  i34 = tempRet0;
  i35 = ___muldi3(i36 | 0, ((i36 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
  i35 = _i64Add(i49 | 0, i34 | 0, i35 | 0, tempRet0 | 0) | 0;
  i34 = tempRet0;
  if (!((i34 | 0) > (i31 | 0) | (i34 | 0) == (i31 | 0) & i35 >>> 0 > i32 >>> 0)) {
   i27 = i32;
   break L17;
  }
  HEAP32[i1 >> 2] = i33;
  i49 = HEAP32[i33 + 12 >> 2] | 0;
  i26 = HEAP32[i49 + 88 >> 2] | 0;
  i25 = HEAP32[i49 + 92 >> 2] | 0;
  i24 = HEAP32[i49 + 96 >> 2] | 0;
  if ((i49 | 0) == 0) {
   i27 = i35;
   i31 = i34;
   i23 = i33;
   break;
  } else {
   i23 = i33;
   i31 = i34;
   i32 = i35;
  }
 } else {
  i27 = i32;
  i23 = 0;
 } while (0);
 i28 = _i64Subtract(i27 | 0, i31 | 0, i29 | 0, i30 | 0) | 0;
 i27 = tempRet0;
 if ((i27 | 0) > 0 | (i27 | 0) == 0 & i28 >>> 0 > 0) {
  i32 = _i64Subtract(0, 0, i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0) | 0;
  i33 = tempRet0;
  i31 = i20;
  i30 = i21;
  i29 = i22;
  i37 = i24;
  i38 = i25;
  i39 = i26;
  i35 = i28;
  i34 = i27;
  L28 : while (1) {
   L30 : while (1) {
    i36 = (Math_imul(i38 - i30 | 0, i7) | 0) + (Math_imul(i37 - i31 | 0, i14) | 0) + (Math_imul(i39 - i29 | 0, i6) | 0) | 0;
    i40 = HEAP32[i4 >> 2] | 0;
    do if (((i40 | 0) != 0 ? (HEAP32[i40 + 12 >> 2] | 0) != 0 : 0) ? (i18 = HEAP32[(HEAP32[i40 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[i18 + 20 >> 2] | 0) > (HEAP32[i2 + 100 >> 2] | 0)) : 0) {
     i43 = HEAP32[i18 + 12 >> 2] | 0;
     i41 = HEAP32[i43 + 88 >> 2] | 0;
     i49 = i41 - i29 | 0;
     i44 = HEAP32[i43 + 92 >> 2] | 0;
     i47 = i44 - i30 | 0;
     i43 = HEAP32[i43 + 96 >> 2] | 0;
     i45 = i43 - i31 | 0;
     i46 = ___muldi3(i49 | 0, ((i49 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
     i42 = tempRet0;
     i48 = ___muldi3(i47 | 0, ((i47 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
     i42 = _i64Add(i48 | 0, tempRet0 | 0, i46 | 0, i42 | 0) | 0;
     i46 = tempRet0;
     i48 = ___muldi3(i45 | 0, ((i45 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
     i48 = _i64Add(i42 | 0, i46 | 0, i48 | 0, tempRet0 | 0) | 0;
     i46 = tempRet0;
     i45 = (Math_imul(i47, i7) | 0) + (Math_imul(i49, i6) | 0) + (Math_imul(i45, i14) | 0) | 0;
     if ((i48 | 0) == 0 & (i46 | 0) == 0) if ((i45 | 0) < 0) break L30; else break;
     if ((i46 | 0) < 0) {
      if ((i45 | 0) > 0) {
       i47 = 1;
       i49 = 1;
       i42 = i45;
       i45 = ((i45 | 0) < 0) << 31 >> 31;
      } else {
       i42 = _i64Subtract(0, 0, i45 | 0, ((i45 | 0) < 0) << 31 >> 31 | 0) | 0;
       i47 = (i45 | 0) < 0 ? -1 : 0;
       i49 = (i45 | 0) < 0 ? -1 : 0;
       i42 = (i45 | 0) < 0 ? i42 : 0;
       i45 = (i45 | 0) < 0 ? tempRet0 : 0;
      }
      if (!((i46 | 0) > 0 | (i46 | 0) == 0 & i48 >>> 0 > 0)) {
       i48 = _i64Subtract(0, 0, i48 | 0, i46 | 0) | 0;
       i47 = 0 - i49 | 0;
       i46 = tempRet0;
      }
      do if ((i36 | 0) <= 0) if ((i36 | 0) < 0) {
       HEAP32[i3 + 88 >> 2] = -1;
       i49 = _i64Subtract(0, 0, i36 | 0, ((i36 | 0) < 0) << 31 >> 31 | 0) | 0;
       HEAP32[i3 + 72 >> 2] = i49;
       HEAP32[i3 + 76 >> 2] = tempRet0;
       i49 = -1;
       break;
      } else {
       HEAP32[i3 + 88 >> 2] = 0;
       HEAP32[i3 + 72 >> 2] = 0;
       HEAP32[i3 + 76 >> 2] = 0;
       i49 = 0;
       break;
      } else {
       HEAP32[i3 + 88 >> 2] = 1;
       HEAP32[i3 + 72 >> 2] = i36;
       HEAP32[i3 + 76 >> 2] = ((i36 | 0) < 0) << 31 >> 31;
       i49 = 1;
      } while (0);
      do if (!((i34 | 0) > 0 | (i34 | 0) == 0 & i35 >>> 0 > 0)) if ((i34 | 0) < 0) {
       HEAP32[i3 + 88 >> 2] = 0 - i49;
       i49 = _i64Subtract(0, 0, i35 | 0, i34 | 0) | 0;
       HEAP32[i3 + 80 >> 2] = i49;
       HEAP32[i3 + 84 >> 2] = tempRet0;
       break;
      } else {
       HEAP32[i3 + 80 >> 2] = 0;
       HEAP32[i3 + 84 >> 2] = 0;
       break;
      } else {
       HEAP32[i3 + 80 >> 2] = i35;
       HEAP32[i3 + 84 >> 2] = i34;
      } while (0);
      if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i42, i45, i48, i46, i47, i3 + 72 | 0) | 0) > -1) break L30;
     }
    } while (0);
    i40 = HEAP32[i1 >> 2] | 0;
    if ((i40 | 0) == 0) {
     i17 = 117;
     break L28;
    }
    if ((HEAP32[i40 + 12 >> 2] | 0) == 0) {
     i17 = 117;
     break L28;
    }
    i40 = HEAP32[HEAP32[i40 + 8 >> 2] >> 2] | 0;
    if ((HEAP32[i40 + 20 >> 2] | 0) <= (HEAP32[i2 + 100 >> 2] | 0)) {
     i17 = 117;
     break L28;
    }
    i44 = HEAP32[i40 + 12 >> 2] | 0;
    i41 = HEAP32[i44 + 88 >> 2] | 0;
    i42 = i41 - i39 | 0;
    i39 = HEAP32[i44 + 92 >> 2] | 0;
    i43 = i39 - i38 | 0;
    i44 = HEAP32[i44 + 96 >> 2] | 0;
    i45 = i44 - i37 | 0;
    i49 = ___muldi3(i42 | 0, ((i42 | 0) < 0) << 31 >> 31 | 0, i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0) | 0;
    i47 = tempRet0;
    i48 = ___muldi3(i43 | 0, ((i43 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
    i47 = _i64Add(i48 | 0, tempRet0 | 0, i49 | 0, i47 | 0) | 0;
    i49 = tempRet0;
    i48 = ___muldi3(i45 | 0, ((i45 | 0) < 0) << 31 >> 31 | 0, i32 | 0, i33 | 0) | 0;
    if (!((i47 | 0) == (i48 | 0) & (i49 | 0) == (tempRet0 | 0))) {
     i17 = 117;
     break L28;
    }
    i37 = ___muldi3(i42 | 0, ((i42 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
    i48 = tempRet0;
    i38 = ___muldi3(i43 | 0, ((i43 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
    i48 = _i64Add(i38 | 0, tempRet0 | 0, i37 | 0, i48 | 0) | 0;
    i37 = tempRet0;
    i38 = ___muldi3(i45 | 0, ((i45 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
    i38 = _i64Add(i48 | 0, i37 | 0, i38 | 0, tempRet0 | 0) | 0;
    i37 = tempRet0;
    i43 = (Math_imul(i43, i7) | 0) + (Math_imul(i42, i6) | 0) + (Math_imul(i45, i14) | 0) | 0;
    i41 = i41 - i29 | 0;
    i48 = i39 - i30 | 0;
    i42 = i44 - i31 | 0;
    i41 = ___muldi3(i41 | 0, ((i41 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
    i49 = tempRet0;
    i48 = ___muldi3(i48 | 0, ((i48 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
    i49 = _i64Add(i48 | 0, tempRet0 | 0, i41 | 0, i49 | 0) | 0;
    i41 = tempRet0;
    i42 = ___muldi3(i42 | 0, ((i42 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
    i42 = _i64Add(i49 | 0, i41 | 0, i42 | 0, tempRet0 | 0) | 0;
    i41 = tempRet0;
    if (!((i41 | 0) > 0 | (i41 | 0) == 0 & i42 >>> 0 > 0)) {
     i17 = 117;
     break L28;
    }
    if ((i38 | 0) == 0 & (i37 | 0) == 0) {
     if ((i43 | 0) >= 0) {
      i17 = 117;
      break L28;
     }
    } else {
     if ((i37 | 0) >= 0) {
      i17 = 117;
      break L28;
     }
     if ((i43 | 0) > 0) {
      i44 = 1;
      i45 = 1;
      i39 = i43;
      i43 = ((i43 | 0) < 0) << 31 >> 31;
     } else {
      i39 = _i64Subtract(0, 0, i43 | 0, ((i43 | 0) < 0) << 31 >> 31 | 0) | 0;
      i44 = (i43 | 0) < 0 ? -1 : 0;
      i45 = (i43 | 0) < 0 ? -1 : 0;
      i39 = (i43 | 0) < 0 ? i39 : 0;
      i43 = (i43 | 0) < 0 ? tempRet0 : 0;
     }
     if (!((i37 | 0) > 0 | (i37 | 0) == 0 & i38 >>> 0 > 0)) {
      i38 = _i64Subtract(0, 0, i38 | 0, i37 | 0) | 0;
      i44 = 0 - i45 | 0;
      i37 = tempRet0;
     }
     do if ((i36 | 0) <= 0) if ((i36 | 0) < 0) {
      HEAP32[i3 + 64 >> 2] = -1;
      i36 = _i64Subtract(0, 0, i36 | 0, ((i36 | 0) < 0) << 31 >> 31 | 0) | 0;
      HEAP32[i3 + 48 >> 2] = i36;
      HEAP32[i3 + 52 >> 2] = tempRet0;
      i36 = -1;
      break;
     } else {
      HEAP32[i3 + 64 >> 2] = 0;
      HEAP32[i3 + 48 >> 2] = 0;
      HEAP32[i3 + 52 >> 2] = 0;
      i36 = 0;
      break;
     } else {
      HEAP32[i3 + 64 >> 2] = 1;
      HEAP32[i3 + 48 >> 2] = i36;
      HEAP32[i3 + 52 >> 2] = ((i36 | 0) < 0) << 31 >> 31;
      i36 = 1;
     } while (0);
     do if (!((i34 | 0) > 0 | (i34 | 0) == 0 & i35 >>> 0 > 0)) if ((i34 | 0) < 0) {
      HEAP32[i3 + 64 >> 2] = 0 - i36;
      i49 = _i64Subtract(0, 0, i35 | 0, i34 | 0) | 0;
      HEAP32[i3 + 56 >> 2] = i49;
      HEAP32[i3 + 60 >> 2] = tempRet0;
      break;
     } else {
      HEAP32[i3 + 56 >> 2] = 0;
      HEAP32[i3 + 60 >> 2] = 0;
      break;
     } else {
      HEAP32[i3 + 56 >> 2] = i35;
      HEAP32[i3 + 60 >> 2] = i34;
     } while (0);
     if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i39, i43, i38, i37, i44, i3 + 48 | 0) | 0) <= 0) {
      i17 = 117;
      break L28;
     }
    }
    HEAP32[i1 >> 2] = i40;
    i37 = HEAP32[i40 + 12 >> 2] | 0;
    i39 = HEAP32[i37 + 88 >> 2] | 0;
    i38 = HEAP32[i37 + 92 >> 2] | 0;
    i37 = HEAP32[i37 + 96 >> 2] | 0;
    i34 = i41;
    i35 = i42;
   }
   i31 = i39 - i41 | 0;
   i29 = i38 - i44 | 0;
   i35 = i37 - i43 | 0;
   i31 = ___muldi3(i31 | 0, ((i31 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
   i30 = tempRet0;
   i29 = ___muldi3(i29 | 0, ((i29 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
   i30 = _i64Add(i29 | 0, tempRet0 | 0, i31 | 0, i30 | 0) | 0;
   i31 = tempRet0;
   i35 = ___muldi3(i35 | 0, ((i35 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
   i35 = _i64Add(i30 | 0, i31 | 0, i35 | 0, tempRet0 | 0) | 0;
   HEAP32[i4 >> 2] = (i40 | 0) == (i17 | 0) ? 0 : i18;
   i31 = i43;
   i30 = i44;
   i29 = i41;
   i34 = tempRet0;
  }
  if ((i17 | 0) == 117) {
   STACKTOP = i3;
   return;
  }
 }
 if ((i27 | 0) >= 0) {
  STACKTOP = i3;
  return;
 }
 i17 = _i64Subtract(0, 0, i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0) | 0;
 i18 = tempRet0;
 while (1) {
  i29 = (Math_imul(i25 - i21 | 0, i7) | 0) + (Math_imul(i24 - i20 | 0, i14) | 0) + (Math_imul(i26 - i22 | 0, i6) | 0) | 0;
  L107 : do if ((i23 | 0) == 0) {
   i19 = i29;
   i23 = i29;
   i29 = ((i29 | 0) < 0) << 31 >> 31;
  } else {
   i19 = i29;
   i30 = i29;
   i29 = ((i29 | 0) < 0) << 31 >> 31;
   while (1) {
    if ((HEAP32[i23 + 12 >> 2] | 0) == 0) {
     i23 = i30;
     break L107;
    }
    i34 = HEAP32[(HEAP32[i23 + 4 >> 2] | 0) + 8 >> 2] | 0;
    if ((HEAP32[i34 + 20 >> 2] | 0) <= (HEAP32[i2 + 100 >> 2] | 0)) {
     i23 = i30;
     break L107;
    }
    i33 = HEAP32[i34 + 12 >> 2] | 0;
    i31 = HEAP32[i33 + 88 >> 2] | 0;
    i49 = i31 - i26 | 0;
    i32 = HEAP32[i33 + 92 >> 2] | 0;
    i48 = i32 - i25 | 0;
    i33 = HEAP32[i33 + 96 >> 2] | 0;
    i36 = i33 - i24 | 0;
    i37 = ___muldi3(i49 | 0, ((i49 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
    i47 = tempRet0;
    i39 = ___muldi3(i48 | 0, ((i48 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
    i47 = _i64Add(i39 | 0, tempRet0 | 0, i37 | 0, i47 | 0) | 0;
    i37 = tempRet0;
    i39 = ___muldi3(i36 | 0, ((i36 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
    i39 = _i64Add(i47 | 0, i37 | 0, i39 | 0, tempRet0 | 0) | 0;
    i37 = tempRet0;
    i36 = (Math_imul(i48, i7) | 0) + (Math_imul(i49, i6) | 0) + (Math_imul(i36, i14) | 0) | 0;
    if ((i39 | 0) == 0 & (i37 | 0) == 0) {
     if ((i36 | 0) <= 0) {
      i23 = i30;
      break L107;
     }
    } else {
     if ((i37 | 0) >= 0) {
      i23 = i30;
      break L107;
     }
     if ((i36 | 0) > 0) {
      i38 = 1;
      i40 = 1;
      i35 = i36;
      i36 = ((i36 | 0) < 0) << 31 >> 31;
     } else {
      i35 = _i64Subtract(0, 0, i36 | 0, ((i36 | 0) < 0) << 31 >> 31 | 0) | 0;
      i38 = (i36 | 0) < 0 ? -1 : 0;
      i40 = (i36 | 0) < 0 ? -1 : 0;
      i35 = (i36 | 0) < 0 ? i35 : 0;
      i36 = (i36 | 0) < 0 ? tempRet0 : 0;
     }
     if (!((i37 | 0) > 0 | (i37 | 0) == 0 & i39 >>> 0 > 0)) {
      i39 = _i64Subtract(0, 0, i39 | 0, i37 | 0) | 0;
      i38 = 0 - i40 | 0;
      i37 = tempRet0;
     }
     do if ((i19 | 0) <= 0) if ((i19 | 0) < 0) {
      HEAP32[i3 + 40 >> 2] = -1;
      i40 = _i64Subtract(0, 0, i30 | 0, i29 | 0) | 0;
      HEAP32[i3 + 24 >> 2] = i40;
      HEAP32[i3 + 28 >> 2] = tempRet0;
      i40 = -1;
      break;
     } else {
      HEAP32[i3 + 40 >> 2] = 0;
      HEAP32[i3 + 24 >> 2] = 0;
      HEAP32[i3 + 28 >> 2] = 0;
      i40 = 0;
      break;
     } else {
      HEAP32[i3 + 40 >> 2] = 1;
      HEAP32[i3 + 24 >> 2] = i30;
      HEAP32[i3 + 28 >> 2] = i29;
      i40 = 1;
     } while (0);
     do if (!((i27 | 0) > 0 | (i27 | 0) == 0 & i28 >>> 0 > 0)) if ((i27 | 0) < 0) {
      HEAP32[i3 + 40 >> 2] = 0 - i40;
      i49 = _i64Subtract(0, 0, i28 | 0, i27 | 0) | 0;
      HEAP32[i3 + 32 >> 2] = i49;
      HEAP32[i3 + 36 >> 2] = tempRet0;
      break;
     } else {
      HEAP32[i3 + 32 >> 2] = 0;
      HEAP32[i3 + 36 >> 2] = 0;
      break;
     } else {
      HEAP32[i3 + 32 >> 2] = i28;
      HEAP32[i3 + 36 >> 2] = i27;
     } while (0);
     if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i35, i36, i39, i37, i38, i3 + 24 | 0) | 0) >= 1) {
      i23 = i30;
      break L107;
     }
    }
    i29 = i31 - i22 | 0;
    i48 = i32 - i21 | 0;
    i49 = i33 - i20 | 0;
    i27 = ___muldi3(i29 | 0, ((i29 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
    i47 = tempRet0;
    i28 = ___muldi3(i48 | 0, ((i48 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
    i47 = _i64Add(i28 | 0, tempRet0 | 0, i27 | 0, i47 | 0) | 0;
    i27 = tempRet0;
    i28 = ___muldi3(i49 | 0, ((i49 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
    i28 = _i64Add(i47 | 0, i27 | 0, i28 | 0, tempRet0 | 0) | 0;
    i27 = tempRet0;
    i23 = (i23 | 0) == (i5 | 0) ? 0 : i34;
    HEAP32[i1 >> 2] = i23;
    i29 = (Math_imul(i48, i7) | 0) + (Math_imul(i49, i14) | 0) + (Math_imul(i29, i6) | 0) | 0;
    if ((i23 | 0) == 0) {
     i24 = i33;
     i25 = i32;
     i26 = i31;
     i19 = i29;
     i23 = i29;
     i29 = ((i29 | 0) < 0) << 31 >> 31;
     break;
    } else {
     i26 = i31;
     i25 = i32;
     i24 = i33;
     i19 = i29;
     i30 = i29;
     i29 = ((i29 | 0) < 0) << 31 >> 31;
    }
   }
  } while (0);
  i30 = HEAP32[i4 >> 2] | 0;
  if ((i30 | 0) == 0) {
   i17 = 117;
   break;
  }
  if ((HEAP32[i30 + 12 >> 2] | 0) == 0) {
   i17 = 117;
   break;
  }
  i30 = HEAP32[(HEAP32[i30 + 8 >> 2] | 0) + 4 >> 2] | 0;
  if ((HEAP32[i30 + 20 >> 2] | 0) <= (HEAP32[i2 + 100 >> 2] | 0)) {
   i17 = 117;
   break;
  }
  i34 = HEAP32[i30 + 12 >> 2] | 0;
  i31 = HEAP32[i34 + 88 >> 2] | 0;
  i32 = i31 - i22 | 0;
  i22 = HEAP32[i34 + 92 >> 2] | 0;
  i33 = i22 - i21 | 0;
  i34 = HEAP32[i34 + 96 >> 2] | 0;
  i35 = i34 - i20 | 0;
  i49 = ___muldi3(i32 | 0, ((i32 | 0) < 0) << 31 >> 31 | 0, i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0) | 0;
  i47 = tempRet0;
  i48 = ___muldi3(i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0, i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0) | 0;
  i47 = _i64Add(i48 | 0, tempRet0 | 0, i49 | 0, i47 | 0) | 0;
  i49 = tempRet0;
  i48 = ___muldi3(i35 | 0, ((i35 | 0) < 0) << 31 >> 31 | 0, i17 | 0, i18 | 0) | 0;
  if (!((i47 | 0) == (i48 | 0) & (i49 | 0) == (tempRet0 | 0))) {
   i17 = 117;
   break;
  }
  i20 = ___muldi3(i32 | 0, ((i32 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
  i48 = tempRet0;
  i21 = ___muldi3(i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
  i48 = _i64Add(i21 | 0, tempRet0 | 0, i20 | 0, i48 | 0) | 0;
  i20 = tempRet0;
  i21 = ___muldi3(i35 | 0, ((i35 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
  i21 = _i64Add(i48 | 0, i20 | 0, i21 | 0, tempRet0 | 0) | 0;
  i20 = tempRet0;
  i33 = (Math_imul(i33, i7) | 0) + (Math_imul(i32, i6) | 0) + (Math_imul(i35, i14) | 0) | 0;
  i31 = i26 - i31 | 0;
  i48 = i25 - i22 | 0;
  i32 = i24 - i34 | 0;
  i31 = ___muldi3(i31 | 0, ((i31 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i13 | 0) | 0;
  i49 = tempRet0;
  i48 = ___muldi3(i48 | 0, ((i48 | 0) < 0) << 31 >> 31 | 0, i9 | 0, i10 | 0) | 0;
  i49 = _i64Add(i48 | 0, tempRet0 | 0, i31 | 0, i49 | 0) | 0;
  i31 = tempRet0;
  i32 = ___muldi3(i32 | 0, ((i32 | 0) < 0) << 31 >> 31 | 0, i11 | 0, i12 | 0) | 0;
  i32 = _i64Add(i49 | 0, i31 | 0, i32 | 0, tempRet0 | 0) | 0;
  i31 = tempRet0;
  if ((i31 | 0) >= 0) {
   i17 = 117;
   break;
  }
  if ((i21 | 0) == 0 & (i20 | 0) == 0) {
   if ((i33 | 0) <= 0) {
    i17 = 117;
    break;
   }
  } else {
   if ((i20 | 0) >= 0) {
    i17 = 117;
    break;
   }
   if ((i33 | 0) > 0) {
    i34 = 1;
    i35 = 1;
    i22 = i33;
    i33 = ((i33 | 0) < 0) << 31 >> 31;
   } else {
    i22 = _i64Subtract(0, 0, i33 | 0, ((i33 | 0) < 0) << 31 >> 31 | 0) | 0;
    i34 = (i33 | 0) < 0 ? -1 : 0;
    i35 = (i33 | 0) < 0 ? -1 : 0;
    i22 = (i33 | 0) < 0 ? i22 : 0;
    i33 = (i33 | 0) < 0 ? tempRet0 : 0;
   }
   if (!((i20 | 0) > 0 | (i20 | 0) == 0 & i21 >>> 0 > 0)) {
    i21 = _i64Subtract(0, 0, i21 | 0, i20 | 0) | 0;
    i34 = 0 - i35 | 0;
    i20 = tempRet0;
   }
   do if ((i19 | 0) <= 0) if ((i19 | 0) < 0) {
    HEAP32[i3 + 16 >> 2] = -1;
    i19 = _i64Subtract(0, 0, i23 | 0, i29 | 0) | 0;
    HEAP32[i3 >> 2] = i19;
    HEAP32[i3 + 4 >> 2] = tempRet0;
    i19 = -1;
    break;
   } else {
    HEAP32[i3 + 16 >> 2] = 0;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i3 + 4 >> 2] = 0;
    i19 = 0;
    break;
   } else {
    HEAP32[i3 + 16 >> 2] = 1;
    HEAP32[i3 >> 2] = i23;
    HEAP32[i3 + 4 >> 2] = i29;
    i19 = 1;
   } while (0);
   do if (!((i27 | 0) > 0 | (i27 | 0) == 0 & i28 >>> 0 > 0)) if ((i27 | 0) < 0) {
    HEAP32[i3 + 16 >> 2] = 0 - i19;
    i49 = _i64Subtract(0, 0, i28 | 0, i27 | 0) | 0;
    HEAP32[i3 + 8 >> 2] = i49;
    HEAP32[i3 + 12 >> 2] = tempRet0;
    break;
   } else {
    HEAP32[i3 + 8 >> 2] = 0;
    HEAP32[i3 + 12 >> 2] = 0;
    break;
   } else {
    HEAP32[i3 + 8 >> 2] = i28;
    HEAP32[i3 + 12 >> 2] = i27;
   } while (0);
   if ((__ZNK20btConvexHullInternal10Rational647compareERKS0_(i22, i33, i21, i20, i34, i3) | 0) >= 0) {
    i17 = 117;
    break;
   }
  }
  HEAP32[i4 >> 2] = i30;
  i22 = HEAP32[i30 + 12 >> 2] | 0;
  i20 = HEAP32[i22 + 96 >> 2] | 0;
  i21 = HEAP32[i22 + 92 >> 2] | 0;
  i22 = HEAP32[i22 + 88 >> 2] | 0;
  i23 = HEAP32[i1 >> 2] | 0;
  i28 = i32;
  i27 = i31;
 }
 if ((i17 | 0) == 117) {
  STACKTOP = i3;
  return;
 }
}
function __ZN20btConvexHullComputer7computeEPKvbiiff(i1, i11, i3) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((i3 | 0) < 1) {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i3 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i3 = HEAP32[i1 + 32 >> 2] | 0;
  if ((i3 | 0) != 0) {
   if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i3 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 32 >> 2] = 0;
  }
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  if ((i3 | 0) != 0) {
   if ((HEAP8[i1 + 56 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i3 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 52 >> 2] = 0;
  }
  HEAP8[i1 + 56 >> 0] = 1;
  HEAP32[i1 + 52 >> 2] = 0;
  HEAP32[i1 + 44 >> 2] = 0;
  HEAP32[i1 + 48 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i2 + 88 >> 2] = 0;
 HEAP32[i2 + 92 >> 2] = 0;
 i4 = i2 + 96 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i2 + 100 >> 2] = 256;
 HEAP32[i2 + 104 >> 2] = 0;
 HEAP32[i2 + 108 >> 2] = 0;
 HEAP32[i2 + 112 >> 2] = 0;
 HEAP32[i2 + 116 >> 2] = 256;
 HEAP32[i2 + 120 >> 2] = 0;
 HEAP32[i2 + 124 >> 2] = 0;
 HEAP32[i2 + 128 >> 2] = 0;
 HEAP32[i2 + 132 >> 2] = 256;
 HEAP8[i2 + 152 >> 0] = 1;
 i5 = i2 + 148 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i2 + 140 >> 2] = 0;
 HEAP32[i2 + 144 >> 2] = 0;
 d16 = 1.0000000150474662e+30;
 d20 = 1.0000000150474662e+30;
 d17 = 1.0000000150474662e+30;
 d21 = -1.0000000150474662e+30;
 d19 = -1.0000000150474662e+30;
 d18 = -1.0000000150474662e+30;
 i9 = 0;
 i8 = i11;
 while (1) {
  d13 = +HEAPF32[i8 >> 2];
  d14 = +HEAPF32[i8 + 4 >> 2];
  d15 = +HEAPF32[i8 + 8 >> 2];
  d16 = d13 < d16 ? d13 : d16;
  d20 = d14 < d20 ? d14 : d20;
  d17 = d15 < d17 ? d15 : d17;
  d21 = d21 < d13 ? d13 : d21;
  d19 = d19 < d14 ? d14 : d19;
  d18 = d18 < d15 ? d15 : d18;
  i9 = i9 + 1 | 0;
  if ((i9 | 0) == (i3 | 0)) break; else i8 = i8 + 16 | 0;
 }
 d13 = d21 - d16;
 d14 = d19 - d20;
 d15 = d18 - d17;
 if (d13 < d14) {
  HEAP32[i2 + 168 >> 2] = d14 < d15 ? 2 : 1;
  i8 = d13 < d15 ? 0 : 2;
  i12 = i2 + 168 | 0;
 } else {
  HEAP32[i2 + 168 >> 2] = d13 < d15 ? 2 : 0;
  i8 = d14 < d15 ? 1 : 2;
  i12 = i2 + 168 | 0;
 }
 HEAP32[i2 + 160 >> 2] = i8;
 i9 = HEAP32[i12 >> 2] | 0;
 if ((i8 | 0) == (i9 | 0)) {
  i8 = ((i8 + 1 | 0) >>> 0) % 3 | 0;
  HEAP32[i2 + 160 >> 2] = i8;
  i9 = HEAP32[i12 >> 2] | 0;
 }
 i27 = 3 - i9 - i8 | 0;
 HEAP32[i2 + 164 >> 2] = i27;
 if (((i27 + 1 | 0) % 3 | 0 | 0) == (HEAP32[i12 >> 2] | 0)) {
  d13 = d13 * 9788566967472434.0e-20;
  d14 = d14 * 9788566967472434.0e-20;
  d15 = d15 * 9788566967472434.0e-20;
 } else {
  d13 = d13 * 9788566967472434.0e-20 * -1.0;
  d14 = d14 * 9788566967472434.0e-20 * -1.0;
  d15 = d15 * 9788566967472434.0e-20 * -1.0;
 }
 HEAPF32[i2 + 56 >> 2] = d13;
 HEAPF32[i2 + 60 >> 2] = d14;
 HEAPF32[i2 + 64 >> 2] = d15;
 HEAPF32[i2 + 68 >> 2] = 0.0;
 if (d13 != 0.0) d13 = 1.0 / d13;
 if (d14 != 0.0) d14 = 1.0 / d14;
 if (d15 != 0.0) d15 = 1.0 / d15;
 HEAPF32[i2 + 72 >> 2] = (d16 + d21) * .5;
 HEAPF32[i2 + 76 >> 2] = (d20 + d19) * .5;
 HEAPF32[i2 + 80 >> 2] = (d17 + d18) * .5;
 HEAPF32[i2 + 84 >> 2] = 0.0;
 i8 = i2 + 248 | 0;
 HEAP8[i8 >> 0] = 1;
 i9 = i2 + 244 | 0;
 HEAP32[i9 >> 2] = 0;
 i10 = i2 + 236 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i2 + 240 >> 2] = 0;
 if ((i3 | 0) > 0) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i22 = _malloc((i3 << 4 | 3) + 16 | 0) | 0;
  if ((i22 | 0) == 0) i22 = 0; else {
   HEAP32[(i22 + 19 & -16) + -4 >> 2] = i22;
   i22 = i22 + 19 & -16;
  }
  i25 = HEAP32[i10 >> 2] | 0;
  if ((i25 | 0) > 0) {
   i23 = 0;
   do {
    i24 = i22 + (i23 << 4) | 0;
    if ((i24 | 0) != 0) {
     i27 = (HEAP32[i9 >> 2] | 0) + (i23 << 4) | 0;
     HEAP32[i24 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
     HEAP32[i24 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
     HEAP32[i24 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
     HEAP32[i24 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
    }
    i23 = i23 + 1 | 0;
   } while ((i23 | 0) != (i25 | 0));
  }
  i23 = HEAP32[i9 >> 2] | 0;
  if ((i23 | 0) != 0) {
   if ((HEAP8[i8 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i23 + -4 >> 2] | 0);
   }
   HEAP32[i9 >> 2] = 0;
  }
  HEAP8[i8 >> 0] = 1;
  HEAP32[i9 >> 2] = i22;
  HEAP32[i2 + 240 >> 2] = i3;
  i23 = 0;
  while (1) {
   i22 = i22 + (i23 << 4) | 0;
   if ((i22 | 0) != 0) {
    HEAP32[i22 + 0 >> 2] = HEAP32[i2 + 216 >> 2];
    HEAP32[i22 + 4 >> 2] = HEAP32[i2 + 220 >> 2];
    HEAP32[i22 + 8 >> 2] = HEAP32[i2 + 224 >> 2];
    HEAP32[i22 + 12 >> 2] = HEAP32[i2 + 228 >> 2];
   }
   i23 = i23 + 1 | 0;
   if ((i23 | 0) == (i3 | 0)) break;
   i22 = HEAP32[i9 >> 2] | 0;
  }
  HEAP32[i10 >> 2] = i3;
  i22 = HEAP32[i9 >> 2] | 0;
  d17 = +HEAPF32[i2 + 72 >> 2];
  d18 = +HEAPF32[i2 + 76 >> 2];
  d16 = +HEAPF32[i2 + 80 >> 2];
  i23 = 0;
  while (1) {
   d19 = +HEAPF32[i11 >> 2];
   HEAPF32[i2 + 200 >> 2] = d19;
   d20 = +HEAPF32[i11 + 4 >> 2];
   HEAPF32[i2 + 204 >> 2] = d20;
   d21 = d15 * (+HEAPF32[i11 + 8 >> 2] - d16);
   HEAPF32[i2 + 200 >> 2] = d13 * (d19 - d17);
   HEAPF32[i2 + 204 >> 2] = d14 * (d20 - d18);
   HEAPF32[i2 + 208 >> 2] = d21;
   HEAPF32[i2 + 212 >> 2] = 0.0;
   HEAP32[i22 + (i23 << 4) >> 2] = ~~+HEAPF32[i2 + 200 + (HEAP32[i2 + 164 >> 2] << 2) >> 2];
   HEAP32[i22 + (i23 << 4) + 4 >> 2] = ~~+HEAPF32[i2 + 200 + (HEAP32[i12 >> 2] << 2) >> 2];
   HEAP32[i22 + (i23 << 4) + 8 >> 2] = ~~+HEAPF32[i2 + 200 + (HEAP32[i2 + 160 >> 2] << 2) >> 2];
   HEAP32[i22 + (i23 << 4) + 12 >> 2] = i23;
   i23 = i23 + 1 | 0;
   if ((i23 | 0) == (i3 | 0)) break;
   i11 = i11 + 16 | 0;
  }
  i11 = HEAP32[i10 >> 2] | 0;
  if ((i11 | 0) > 1) __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalI8pointCmpEEvRKT_ii(i2 + 232 | 0, 0, i11 + -1 | 0);
 } else HEAP32[i10 >> 2] = i3;
 HEAP32[i2 + 92 >> 2] = HEAP32[i2 + 88 >> 2];
 HEAP32[i4 >> 2] = 0;
 HEAP32[i2 + 100 >> 2] = i3;
 i11 = HEAP32[i2 + 140 >> 2] | 0;
 if ((i11 | 0) < (i3 | 0)) {
  if ((HEAP32[i2 + 144 >> 2] | 0) < (i3 | 0)) {
   if ((i3 | 0) == 0) {
    i12 = 0;
    i22 = i11;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i12 = _malloc((i3 << 2 | 3) + 16 | 0) | 0;
    if ((i12 | 0) == 0) i12 = 0; else {
     HEAP32[(i12 + 19 & -16) + -4 >> 2] = i12;
     i12 = i12 + 19 & -16;
    }
    i22 = HEAP32[i2 + 140 >> 2] | 0;
   }
   if ((i22 | 0) > 0) {
    i24 = 0;
    do {
     i23 = i12 + (i24 << 2) | 0;
     if ((i23 | 0) != 0) HEAP32[i23 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + (i24 << 2) >> 2];
     i24 = i24 + 1 | 0;
    } while ((i24 | 0) != (i22 | 0));
   }
   i22 = HEAP32[i5 >> 2] | 0;
   if ((i22 | 0) != 0) {
    if ((HEAP8[i2 + 152 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i22 + -4 >> 2] | 0);
    }
    HEAP32[i5 >> 2] = 0;
   }
   HEAP8[i2 + 152 >> 0] = 1;
   HEAP32[i5 >> 2] = i12;
   HEAP32[i2 + 144 >> 2] = i3;
  }
  do {
   i12 = (HEAP32[i5 >> 2] | 0) + (i11 << 2) | 0;
   if ((i12 | 0) != 0) HEAP32[i12 >> 2] = 0;
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) != (i3 | 0));
 }
 HEAP32[i2 + 140 >> 2] = i3;
 if ((i3 | 0) > 0) {
  i11 = 0;
  do {
   i12 = HEAP32[i4 >> 2] | 0;
   if ((i12 | 0) == 0) {
    i12 = HEAP32[i2 + 92 >> 2] | 0;
    if ((i12 | 0) == 0) {
     HEAP32[5004] = (HEAP32[5004] | 0) + 1;
     i12 = _malloc(31) | 0;
     if ((i12 | 0) != 0 ? (i7 = i12 + 19 & -16, HEAP32[i7 + -4 >> 2] = i12, (i12 + 19 & -16 | 0) != 0) : 0) {
      i22 = HEAP32[i2 + 100 >> 2] | 0;
      HEAP32[i7 + 4 >> 2] = i22;
      HEAP32[i7 + 8 >> 2] = 0;
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i22 = _malloc((i22 * 112 | 3) + 16 | 0) | 0;
      if ((i22 | 0) == 0) i22 = 0; else {
       HEAP32[(i22 + 19 & -16) + -4 >> 2] = i22;
       i22 = i22 + 19 & -16;
      }
      HEAP32[(i12 + 19 & -16) >> 2] = i22;
      i12 = i12 + 19 & -16;
     } else i12 = 0;
     HEAP32[i12 + 8 >> 2] = HEAP32[i2 + 88 >> 2];
     HEAP32[i2 + 88 >> 2] = i12;
    } else HEAP32[i2 + 92 >> 2] = HEAP32[i12 + 8 >> 2];
    i22 = HEAP32[i12 + 4 >> 2] | 0;
    if ((i22 | 0) > 0) {
     i23 = 0;
     i24 = HEAP32[i12 >> 2] | 0;
     do {
      i23 = i23 + 1 | 0;
      i27 = i24;
      i24 = i24 + 112 | 0;
      HEAP32[i27 >> 2] = (i23 | 0) < (i22 | 0) ? i24 : 0;
     } while ((i23 | 0) != (i22 | 0));
    }
    i12 = HEAP32[i12 >> 2] | 0;
    HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
    if ((i12 | 0) == 0) i12 = 0; else i6 = 85;
   } else {
    HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
    i6 = 85;
   }
   if ((i6 | 0) == 85) {
    i6 = 0;
    i27 = i12 + 104 | 0;
    HEAP32[i12 + 0 >> 2] = 0;
    HEAP32[i12 + 4 >> 2] = 0;
    HEAP32[i12 + 8 >> 2] = 0;
    HEAP32[i12 + 12 >> 2] = 0;
    HEAP32[i12 + 16 >> 2] = 0;
    HEAP32[i27 >> 2] = -1;
   }
   HEAP32[i12 + 8 >> 2] = 0;
   i27 = i12 + 88 | 0;
   i26 = (HEAP32[i9 >> 2] | 0) + (i11 << 4) | 0;
   HEAP32[i27 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
   HEAP32[i27 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
   HEAP32[i27 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
   HEAP32[i27 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
   HEAP32[i12 + 104 >> 2] = -1;
   HEAP32[(HEAP32[i5 >> 2] | 0) + (i11 << 2) >> 2] = i12;
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) < (i3 | 0));
 }
 i4 = HEAP32[i9 >> 2] | 0;
 if ((i4 | 0) != 0) {
  if ((HEAP8[i8 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
  }
  HEAP32[i9 >> 2] = 0;
 }
 HEAP8[i8 >> 0] = 1;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i2 + 240 >> 2] = 0;
 HEAP32[i2 + 108 >> 2] = HEAP32[i2 + 104 >> 2];
 HEAP32[i2 + 112 >> 2] = 0;
 HEAP32[i2 + 116 >> 2] = i3 * 6;
 HEAP32[i2 + 172 >> 2] = 0;
 HEAP32[i2 + 176 >> 2] = 0;
 HEAP32[i2 + 156 >> 2] = -3;
 HEAP32[i2 + 184 >> 2] = 0;
 HEAP32[i2 + 188 >> 2] = 0;
 HEAP32[i2 + 192 >> 2] = 0;
 HEAP32[i2 + 196 >> 2] = 0;
 __ZN20btConvexHullInternal15computeInternalEiiRNS_16IntermediateHullE(i2 + 56 | 0, 0, i3, i2 + 184 | 0);
 HEAP32[i2 + 180 >> 2] = HEAP32[i2 + 184 >> 2];
 i3 = HEAP32[i9 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i8 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i9 >> 2] = 0;
 }
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i3 | 0) < 0) {
  if ((HEAP32[i1 + 8 >> 2] | 0) < 0) {
   i4 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i4 | 0) != 0) {
    if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i4 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 12 >> 2] = 0;
   }
   HEAP8[i1 + 16 >> 0] = 1;
   HEAP32[i1 + 12 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
  }
  do {
   i27 = (HEAP32[i1 + 12 >> 2] | 0) + (i3 << 4) | 0;
   HEAP32[i27 + 0 >> 2] = HEAP32[i2 + 40 >> 2];
   HEAP32[i27 + 4 >> 2] = HEAP32[i2 + 44 >> 2];
   HEAP32[i27 + 8 >> 2] = HEAP32[i2 + 48 >> 2];
   HEAP32[i27 + 12 >> 2] = HEAP32[i2 + 52 >> 2];
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 0);
 }
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i2 + 32 >> 2] = 0;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i4 | 0) < 0) {
  if ((HEAP32[i1 + 28 >> 2] | 0) < 0) {
   i3 = HEAP32[i1 + 32 >> 2] | 0;
   if ((i3 | 0) != 0) {
    if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i3 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 32 >> 2] = 0;
   }
   HEAP8[i1 + 36 >> 0] = 1;
   HEAP32[i1 + 32 >> 2] = 0;
   HEAP32[i1 + 28 >> 2] = 0;
  }
  do {
   i3 = (HEAP32[i1 + 32 >> 2] | 0) + (i4 * 12 | 0) | 0;
   if ((i3 | 0) != 0) {
    HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 24 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 28 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 32 >> 2];
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 0);
 }
 HEAP32[i1 + 24 >> 2] = 0;
 i4 = HEAP32[i1 + 44 >> 2] | 0;
 if ((i4 | 0) < 0) {
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  if ((HEAP32[i1 + 48 >> 2] | 0) < 0) {
   if ((i3 | 0) != 0) {
    if ((HEAP8[i1 + 56 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i3 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 52 >> 2] = 0;
   }
   HEAP8[i1 + 56 >> 0] = 1;
   HEAP32[i1 + 52 >> 2] = 0;
   HEAP32[i1 + 48 >> 2] = 0;
   i3 = 0;
  }
  i5 = i4;
  do {
   i4 = i3 + (i5 << 2) | 0;
   if ((i4 | 0) != 0) HEAP32[i4 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 0);
 }
 HEAP32[i1 + 44 >> 2] = 0;
 i3 = HEAP32[i2 + 180 >> 2] | 0;
 if ((HEAP32[i3 + 104 >> 2] | 0) < 0) {
  HEAP32[i3 + 104 >> 2] = 0;
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i4 = _malloc(23) | 0;
  if ((i4 | 0) != 0) {
   HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
   i12 = i4 + 19 & -16;
   if ((i4 + 19 & -16 | 0) != 0) HEAP32[i12 >> 2] = i3;
  } else i12 = 0;
  i5 = 1;
  i10 = 1;
  i3 = 0;
  while (1) {
   i4 = HEAP32[i12 + (i3 << 2) >> 2] | 0;
   if ((HEAP32[i4 + 100 >> 2] | 0) > -1) {
    HEAPF32[i2 + 232 + (HEAP32[i2 + 164 >> 2] << 2) >> 2] = +(HEAP32[i4 + 88 >> 2] | 0);
    HEAPF32[i2 + 232 + (HEAP32[i2 + 168 >> 2] << 2) >> 2] = +(HEAP32[i4 + 92 >> 2] | 0);
    d13 = +(HEAP32[i4 + 96 >> 2] | 0);
   } else {
    d13 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i4 + 24 | 0);
    d13 = d13 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i4 + 72 | 0);
    HEAPF32[i2 + 232 + (HEAP32[i2 + 164 >> 2] << 2) >> 2] = d13;
    d13 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i4 + 40 | 0);
    d13 = d13 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i4 + 72 | 0);
    HEAPF32[i2 + 232 + (HEAP32[i2 + 168 >> 2] << 2) >> 2] = d13;
    d13 = +__ZNK20btConvexHullInternal6Int1288toScalarEv(i4 + 56 | 0);
    d13 = d13 / +__ZNK20btConvexHullInternal6Int1288toScalarEv(i4 + 72 | 0);
   }
   HEAPF32[i2 + 232 + (HEAP32[i2 + 160 >> 2] << 2) >> 2] = d13;
   d15 = +HEAPF32[i2 + 232 >> 2] * +HEAPF32[i2 + 56 >> 2] + +HEAPF32[i2 + 72 >> 2];
   d13 = +HEAPF32[i2 + 236 >> 2] * +HEAPF32[i2 + 60 >> 2] + +HEAPF32[i2 + 76 >> 2];
   d14 = +HEAPF32[i2 + 240 >> 2] * +HEAPF32[i2 + 64 >> 2] + +HEAPF32[i2 + 80 >> 2];
   i8 = HEAP32[i1 + 4 >> 2] | 0;
   do if ((i8 | 0) == (HEAP32[i1 + 8 >> 2] | 0)) {
    i6 = (i8 | 0) == 0 ? 1 : i8 << 1;
    if ((i8 | 0) >= (i6 | 0)) break;
    if ((i6 | 0) == 0) i7 = 0; else {
     HEAP32[5004] = (HEAP32[5004] | 0) + 1;
     i7 = _malloc((i6 << 4 | 3) + 16 | 0) | 0;
     if ((i7 | 0) == 0) i7 = 0; else {
      HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
      i7 = i7 + 19 & -16;
     }
     i8 = HEAP32[i1 + 4 >> 2] | 0;
    }
    if ((i8 | 0) > 0) {
     i9 = 0;
     do {
      i27 = i7 + (i9 << 4) | 0;
      i26 = (HEAP32[i1 + 12 >> 2] | 0) + (i9 << 4) | 0;
      HEAP32[i27 + 0 >> 2] = HEAP32[i26 + 0 >> 2];
      HEAP32[i27 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
      HEAP32[i27 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
      HEAP32[i27 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
      i9 = i9 + 1 | 0;
     } while ((i9 | 0) != (i8 | 0));
    }
    i8 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i8 | 0) != 0) {
     if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i8 + -4 >> 2] | 0);
     }
     HEAP32[i1 + 12 >> 2] = 0;
    }
    HEAP8[i1 + 16 >> 0] = 1;
    HEAP32[i1 + 12 >> 2] = i7;
    HEAP32[i1 + 8 >> 2] = i6;
    i8 = HEAP32[i1 + 4 >> 2] | 0;
   } while (0);
   i27 = HEAP32[i1 + 12 >> 2] | 0;
   HEAPF32[i27 + (i8 << 4) >> 2] = d15;
   HEAPF32[i27 + (i8 << 4) + 4 >> 2] = d13;
   HEAPF32[i27 + (i8 << 4) + 8 >> 2] = d14;
   HEAPF32[i27 + (i8 << 4) + 12 >> 2] = 0.0;
   HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + 1;
   i4 = HEAP32[i4 + 8 >> 2] | 0;
   if ((i4 | 0) != 0) {
    i6 = i4;
    i7 = -1;
    i8 = -1;
    do {
     i9 = i6 + 20 | 0;
     i11 = HEAP32[i9 >> 2] | 0;
     if ((i11 | 0) < 0) {
      i11 = HEAP32[i1 + 24 >> 2] | 0;
      HEAP32[i2 + 12 >> 2] = 0;
      HEAP32[i2 + 16 >> 2] = 0;
      HEAP32[i2 + 20 >> 2] = 0;
      i22 = HEAP32[i1 + 28 >> 2] | 0;
      do if ((i11 | 0) == (i22 | 0)) {
       i22 = (i11 | 0) == 0 ? 1 : i11 << 1;
       if ((i11 | 0) >= (i22 | 0)) {
        i23 = i11;
        i22 = i11;
        break;
       }
       if ((i22 | 0) == 0) {
        i23 = 0;
        i26 = i11;
       } else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i23 = _malloc((i22 * 12 | 3) + 16 | 0) | 0;
        if ((i23 | 0) == 0) i23 = 0; else {
         HEAP32[(i23 + 19 & -16) + -4 >> 2] = i23;
         i23 = i23 + 19 & -16;
        }
        i26 = HEAP32[i1 + 24 >> 2] | 0;
       }
       if ((i26 | 0) > 0) {
        i25 = 0;
        do {
         i24 = i23 + (i25 * 12 | 0) | 0;
         if ((i24 | 0) != 0) {
          i27 = (HEAP32[i1 + 32 >> 2] | 0) + (i25 * 12 | 0) | 0;
          HEAP32[i24 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
          HEAP32[i24 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
          HEAP32[i24 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
         }
         i25 = i25 + 1 | 0;
        } while ((i25 | 0) != (i26 | 0));
       }
       i24 = HEAP32[i1 + 32 >> 2] | 0;
       if ((i24 | 0) != 0) {
        if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i24 + -4 >> 2] | 0);
        }
        HEAP32[i1 + 32 >> 2] = 0;
       }
       HEAP8[i1 + 36 >> 0] = 1;
       HEAP32[i1 + 32 >> 2] = i23;
       HEAP32[i1 + 28 >> 2] = i22;
       i23 = HEAP32[i1 + 24 >> 2] | 0;
      } else i23 = i11; while (0);
      i24 = (HEAP32[i1 + 32 >> 2] | 0) + (i23 * 12 | 0) | 0;
      if ((i24 | 0) == 0) i26 = i22; else {
       HEAP32[i24 + 0 >> 2] = HEAP32[i2 + 12 >> 2];
       HEAP32[i24 + 4 >> 2] = HEAP32[i2 + 16 >> 2];
       HEAP32[i24 + 8 >> 2] = HEAP32[i2 + 20 >> 2];
       i23 = HEAP32[i1 + 24 >> 2] | 0;
       i26 = HEAP32[i1 + 28 >> 2] | 0;
      }
      i22 = i23 + 1 | 0;
      HEAP32[i1 + 24 >> 2] = i22;
      HEAP32[i2 + 0 >> 2] = 0;
      HEAP32[i2 + 4 >> 2] = 0;
      HEAP32[i2 + 8 >> 2] = 0;
      do if ((i22 | 0) == (i26 | 0)) {
       i22 = (i26 | 0) == 0 ? 1 : i26 << 1;
       if ((i26 | 0) >= (i22 | 0)) break;
       if ((i22 | 0) == 0) i23 = 0; else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i23 = _malloc((i22 * 12 | 3) + 16 | 0) | 0;
        if ((i23 | 0) == 0) i23 = 0; else {
         HEAP32[(i23 + 19 & -16) + -4 >> 2] = i23;
         i23 = i23 + 19 & -16;
        }
        i26 = HEAP32[i1 + 24 >> 2] | 0;
       }
       if ((i26 | 0) > 0) {
        i25 = 0;
        do {
         i24 = i23 + (i25 * 12 | 0) | 0;
         if ((i24 | 0) != 0) {
          i27 = (HEAP32[i1 + 32 >> 2] | 0) + (i25 * 12 | 0) | 0;
          HEAP32[i24 + 0 >> 2] = HEAP32[i27 + 0 >> 2];
          HEAP32[i24 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
          HEAP32[i24 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
         }
         i25 = i25 + 1 | 0;
        } while ((i25 | 0) != (i26 | 0));
       }
       i24 = HEAP32[i1 + 32 >> 2] | 0;
       if ((i24 | 0) != 0) {
        if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i24 + -4 >> 2] | 0);
        }
        HEAP32[i1 + 32 >> 2] = 0;
       }
       HEAP8[i1 + 36 >> 0] = 1;
       HEAP32[i1 + 32 >> 2] = i23;
       HEAP32[i1 + 28 >> 2] = i22;
       i26 = HEAP32[i1 + 24 >> 2] | 0;
      } else i26 = i22; while (0);
      i22 = HEAP32[i1 + 32 >> 2] | 0;
      i23 = i22 + (i26 * 12 | 0) | 0;
      if ((i23 | 0) != 0) {
       HEAP32[i23 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
       HEAP32[i23 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
       HEAP32[i23 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
       i26 = HEAP32[i1 + 24 >> 2] | 0;
       i22 = HEAP32[i1 + 32 >> 2] | 0;
      }
      HEAP32[i1 + 24 >> 2] = i26 + 1;
      HEAP32[i9 >> 2] = i11;
      HEAP32[(HEAP32[i6 + 8 >> 2] | 0) + 20 >> 2] = i11 + 1;
      HEAP32[i22 + (i11 * 12 | 0) + 4 >> 2] = 1;
      HEAP32[i22 + ((i11 + 1 | 0) * 12 | 0) + 4 >> 2] = -1;
      i23 = HEAP32[i6 + 12 >> 2] | 0;
      i24 = HEAP32[i23 + 104 >> 2] | 0;
      if ((i24 | 0) < 0) {
       HEAP32[i23 + 104 >> 2] = i5;
       do if ((i5 | 0) == (i10 | 0)) {
        i24 = (i10 | 0) == 0 ? 1 : i10 << 1;
        if ((i10 | 0) >= (i24 | 0)) break;
        do if ((i24 | 0) == 0) i25 = 0; else {
         HEAP32[5004] = (HEAP32[5004] | 0) + 1;
         i25 = _malloc((i24 << 2 | 3) + 16 | 0) | 0;
         if ((i25 | 0) == 0) {
          i25 = 0;
          break;
         }
         HEAP32[(i25 + 19 & -16) + -4 >> 2] = i25;
         i25 = i25 + 19 & -16;
        } while (0);
        if ((i10 | 0) > 0) {
         i27 = 0;
         do {
          i26 = i25 + (i27 << 2) | 0;
          if ((i26 | 0) != 0) HEAP32[i26 >> 2] = HEAP32[i12 + (i27 << 2) >> 2];
          i27 = i27 + 1 | 0;
         } while ((i27 | 0) != (i10 | 0));
        }
        if ((i12 | 0) == 0) {
         i12 = i25;
         i10 = i24;
         break;
        }
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i12 + -4 >> 2] | 0);
        i12 = i25;
        i10 = i24;
       } while (0);
       i24 = i12 + (i5 << 2) | 0;
       if ((i24 | 0) != 0) HEAP32[i24 >> 2] = i23;
       i23 = i5 + 1 | 0;
      } else {
       i23 = i5;
       i5 = i24;
      }
      HEAP32[i22 + (i11 * 12 | 0) + 8 >> 2] = i5;
      HEAP32[i22 + ((i11 + 1 | 0) * 12 | 0) + 8 >> 2] = i3;
      i11 = HEAP32[i9 >> 2] | 0;
      i5 = i23;
     }
     if ((i8 | 0) > -1) {
      HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + (i11 * 12 | 0) >> 2] = i8 - i11;
      i8 = HEAP32[i9 >> 2] | 0;
     } else {
      i8 = i11;
      i7 = i11;
     }
     i6 = HEAP32[i6 >> 2] | 0;
    } while ((i6 | 0) != (i4 | 0));
    HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + (i7 * 12 | 0) >> 2] = i8 - i7;
   }
   i4 = i3 + 1 | 0;
   if ((i4 | 0) < (i5 | 0)) i3 = i4; else break;
  }
  if ((i3 | 0) > -1) {
   i6 = 0;
   do {
    i3 = HEAP32[(HEAP32[i12 + (i6 << 2) >> 2] | 0) + 8 >> 2] | 0;
    if ((i3 | 0) != 0) {
     i5 = i3;
     do {
      i7 = i5 + 20 | 0;
      if ((HEAP32[i7 >> 2] | 0) > -1) {
       i11 = HEAP32[i1 + 44 >> 2] | 0;
       do if ((i11 | 0) == (HEAP32[i1 + 48 >> 2] | 0)) {
        i8 = (i11 | 0) == 0 ? 1 : i11 << 1;
        if ((i11 | 0) >= (i8 | 0)) break;
        if ((i8 | 0) == 0) i9 = 0; else {
         HEAP32[5004] = (HEAP32[5004] | 0) + 1;
         i9 = _malloc((i8 << 2 | 3) + 16 | 0) | 0;
         if ((i9 | 0) == 0) i9 = 0; else {
          HEAP32[(i9 + 19 & -16) + -4 >> 2] = i9;
          i9 = i9 + 19 & -16;
         }
         i11 = HEAP32[i1 + 44 >> 2] | 0;
        }
        if ((i11 | 0) > 0) {
         i10 = 0;
         do {
          i22 = i9 + (i10 << 2) | 0;
          if ((i22 | 0) != 0) HEAP32[i22 >> 2] = HEAP32[(HEAP32[i1 + 52 >> 2] | 0) + (i10 << 2) >> 2];
          i10 = i10 + 1 | 0;
         } while ((i10 | 0) != (i11 | 0));
        }
        i10 = HEAP32[i1 + 52 >> 2] | 0;
        if ((i10 | 0) != 0) {
         if ((HEAP8[i1 + 56 >> 0] | 0) != 0) {
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i10 + -4 >> 2] | 0);
         }
         HEAP32[i1 + 52 >> 2] = 0;
        }
        HEAP8[i1 + 56 >> 0] = 1;
        HEAP32[i1 + 52 >> 2] = i9;
        HEAP32[i1 + 48 >> 2] = i8;
        i11 = HEAP32[i1 + 44 >> 2] | 0;
       } while (0);
       i8 = (HEAP32[i1 + 52 >> 2] | 0) + (i11 << 2) | 0;
       if ((i8 | 0) != 0) {
        HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
        i11 = HEAP32[i1 + 44 >> 2] | 0;
       }
       HEAP32[i1 + 44 >> 2] = i11 + 1;
       i7 = i5;
       do {
        HEAP32[i7 + 20 >> 2] = -1;
        i7 = HEAP32[(HEAP32[i7 + 8 >> 2] | 0) + 4 >> 2] | 0;
       } while ((i7 | 0) != (i5 | 0));
      }
      i5 = HEAP32[i5 >> 2] | 0;
     } while ((i5 | 0) != (i3 | 0));
    }
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) < (i4 | 0));
  }
  if ((i12 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i12 + -4 >> 2] | 0);
  }
 }
 __ZN20btConvexHullInternalD2Ev(i2 + 56 | 0);
 STACKTOP = i2;
 return;
}
function __ZN30btGjkEpaPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDraw(i5, i11, i6, i8, i2, i7, i4, i1, i3, i9) {
 i5 = i5 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, d20 = 0.0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 10240 | 0;
 d41 = +HEAPF32[i7 + 52 >> 2] - +HEAPF32[i2 + 52 >> 2];
 d29 = +HEAPF32[i7 + 56 >> 2] - +HEAPF32[i2 + 56 >> 2];
 HEAPF32[i5 >> 2] = +HEAPF32[i7 + 48 >> 2] - +HEAPF32[i2 + 48 >> 2];
 HEAPF32[i5 + 4 >> 2] = d41;
 HEAPF32[i5 + 8 >> 2] = d29;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 HEAP32[i5 + 10088 >> 2] = i6;
 HEAP32[i5 + 10092 >> 2] = i8;
 d29 = +HEAPF32[i7 >> 2];
 d41 = +HEAPF32[i2 >> 2];
 d28 = +HEAPF32[i7 + 16 >> 2];
 d20 = +HEAPF32[i2 + 16 >> 2];
 d23 = +HEAPF32[i7 + 32 >> 2];
 d42 = +HEAPF32[i2 + 32 >> 2];
 d33 = +HEAPF32[i2 + 4 >> 2];
 d43 = +HEAPF32[i2 + 20 >> 2];
 d34 = +HEAPF32[i2 + 36 >> 2];
 d17 = +HEAPF32[i2 + 8 >> 2];
 d32 = +HEAPF32[i2 + 24 >> 2];
 d30 = +HEAPF32[i2 + 40 >> 2];
 d40 = +HEAPF32[i7 + 4 >> 2];
 d39 = +HEAPF32[i7 + 20 >> 2];
 d38 = +HEAPF32[i7 + 36 >> 2];
 d37 = +HEAPF32[i7 + 8 >> 2];
 d36 = +HEAPF32[i7 + 24 >> 2];
 d35 = +HEAPF32[i7 + 40 >> 2];
 HEAPF32[i5 + 10096 >> 2] = d29 * d41 + d28 * d20 + d23 * d42;
 HEAPF32[i5 + 10100 >> 2] = d29 * d33 + d28 * d43 + d23 * d34;
 HEAPF32[i5 + 10104 >> 2] = d29 * d17 + d28 * d32 + d23 * d30;
 HEAPF32[i5 + 10108 >> 2] = 0.0;
 HEAPF32[i5 + 10112 >> 2] = d41 * d40 + d20 * d39 + d42 * d38;
 HEAPF32[i5 + 10116 >> 2] = d33 * d40 + d43 * d39 + d34 * d38;
 HEAPF32[i5 + 10120 >> 2] = d17 * d40 + d32 * d39 + d30 * d38;
 HEAPF32[i5 + 10124 >> 2] = 0.0;
 HEAPF32[i5 + 10128 >> 2] = d41 * d37 + d20 * d36 + d42 * d35;
 HEAPF32[i5 + 10132 >> 2] = d33 * d37 + d43 * d36 + d34 * d35;
 HEAPF32[i5 + 10136 >> 2] = d17 * d37 + d32 * d36 + d30 * d35;
 HEAPF32[i5 + 10140 >> 2] = 0.0;
 d30 = +HEAPF32[i7 + 48 >> 2] - +HEAPF32[i2 + 48 >> 2];
 d32 = +HEAPF32[i7 + 52 >> 2] - +HEAPF32[i2 + 52 >> 2];
 d17 = +HEAPF32[i7 + 56 >> 2] - +HEAPF32[i2 + 56 >> 2];
 d34 = +HEAPF32[i2 >> 2];
 d43 = +HEAPF32[i7 >> 2];
 d33 = +HEAPF32[i2 + 16 >> 2];
 d42 = +HEAPF32[i7 + 16 >> 2];
 d20 = +HEAPF32[i2 + 32 >> 2];
 d41 = +HEAPF32[i7 + 32 >> 2];
 d23 = +HEAPF32[i2 + 4 >> 2];
 d28 = +HEAPF32[i2 + 20 >> 2];
 d29 = +HEAPF32[i2 + 36 >> 2];
 d31 = +HEAPF32[i2 + 8 >> 2];
 d18 = +HEAPF32[i2 + 24 >> 2];
 d16 = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i5 + 10144 >> 2] = d34 * d43 + d33 * d42 + d20 * d41;
 HEAPF32[i5 + 10148 >> 2] = d34 * d40 + d33 * d39 + d20 * d38;
 HEAPF32[i5 + 10152 >> 2] = d34 * d37 + d33 * d36 + d20 * d35;
 HEAPF32[i5 + 10156 >> 2] = 0.0;
 HEAPF32[i5 + 10160 >> 2] = d43 * d23 + d42 * d28 + d41 * d29;
 HEAPF32[i5 + 10164 >> 2] = d40 * d23 + d39 * d28 + d38 * d29;
 HEAPF32[i5 + 10168 >> 2] = d37 * d23 + d36 * d28 + d35 * d29;
 HEAPF32[i5 + 10172 >> 2] = 0.0;
 HEAPF32[i5 + 10176 >> 2] = d43 * d31 + d42 * d18 + d41 * d16;
 HEAPF32[i5 + 10180 >> 2] = d40 * d31 + d39 * d18 + d38 * d16;
 HEAPF32[i5 + 10184 >> 2] = d37 * d31 + d36 * d18 + d35 * d16;
 HEAPF32[i5 + 10188 >> 2] = 0.0;
 HEAPF32[i5 + 10192 >> 2] = d30 * d34 + d32 * d33 + d17 * d20;
 HEAPF32[i5 + 10196 >> 2] = d30 * d23 + d32 * d28 + d17 * d29;
 HEAPF32[i5 + 10200 >> 2] = d30 * d31 + d32 * d18 + d17 * d16;
 HEAPF32[i5 + 10204 >> 2] = 0.0;
 HEAP32[i5 + 10208 >> 2] = 70;
 HEAP32[i5 + 10212 >> 2] = 0;
 HEAP32[i5 + 10072 >> 2] = 0;
 HEAP32[i5 + 9836 >> 2] = 0;
 HEAP32[i5 + 9840 >> 2] = 0;
 HEAP32[i5 + 9844 >> 2] = 0;
 HEAP32[i5 + 9848 >> 2] = 0;
 HEAP32[i5 + 10084 >> 2] = 2;
 HEAP32[i5 + 10076 >> 2] = 0;
 HEAPF32[i5 + 9852 >> 2] = 0.0;
 d16 = +HEAPF32[i5 >> 2];
 d17 = +HEAPF32[i5 + 4 >> 2];
 d18 = +HEAPF32[i5 + 8 >> 2];
 HEAPF32[i5 + 9328 >> 2] = -d16;
 HEAPF32[i5 + 9332 >> 2] = -d17;
 HEAPF32[i5 + 9336 >> 2] = -d18;
 HEAPF32[i5 + 9340 >> 2] = 0.0;
 do if ((__ZN12gjkepa2_impl3GJK8EvaluateERKNS_13MinkowskiDiffERK9btVector3(i5 + 9708 | 0, i5 + 10088 | 0, i5 + 9328 | 0) | 0) == 1) {
  i11 = i5 + 9296 | 0;
  i13 = i5 + 9304 | 0;
  i12 = i5 + 9308 | 0;
  HEAP32[i11 + 0 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  HEAP32[i11 + 12 >> 2] = 0;
  HEAP32[i5 + 16 >> 2] = 9;
  i9 = i5 + 56 | 0;
  HEAP32[i5 + 9292 >> 2] = 0;
  HEAP32[i9 + 0 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  HEAP32[i9 + 12 >> 2] = 0;
  HEAP32[i9 + 16 >> 2] = 0;
  i14 = 0;
  do {
   i15 = 128 - i14 + -1 | 0;
   HEAP32[i5 + 16 + (i15 * 56 | 0) + 2152 >> 2] = 0;
   i19 = HEAP32[i13 >> 2] | 0;
   HEAP32[i5 + 16 + (i15 * 56 | 0) + 2156 >> 2] = i19;
   if ((i19 | 0) != 0) HEAP32[i19 + 44 >> 2] = i5 + 16 + (i15 * 56 | 0) + 2108;
   HEAP32[i13 >> 2] = i5 + 16 + (i15 * 56 | 0) + 2108;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) != 128);
  i14 = HEAP32[i5 + 10080 >> 2] | 0;
  if ((HEAP32[i14 + 32 >> 2] | 0) >>> 0 > 1 ? __ZN12gjkepa2_impl3GJK13EncloseOriginEv(i5 + 9708 | 0) | 0 : 0) {
   i15 = HEAP32[i11 >> 2] | 0;
   if ((i15 | 0) != 0) {
    i21 = HEAP32[i5 + 9300 >> 2] | 0;
    i19 = HEAP32[i12 >> 2] | 0;
    do {
     i24 = i15 + 48 | 0;
     i25 = HEAP32[i24 >> 2] | 0;
     i22 = i15 + 44 | 0;
     if ((i25 | 0) != 0) HEAP32[i25 + 44 >> 2] = HEAP32[i22 >> 2];
     i25 = HEAP32[i22 >> 2] | 0;
     if ((i25 | 0) != 0) HEAP32[i25 + 48 >> 2] = HEAP32[i24 >> 2];
     if ((HEAP32[i11 >> 2] | 0) == (i15 | 0)) HEAP32[i11 >> 2] = HEAP32[i24 >> 2];
     i21 = i21 + -1 | 0;
     HEAP32[i22 >> 2] = 0;
     HEAP32[i24 >> 2] = HEAP32[i13 >> 2];
     i22 = HEAP32[i13 >> 2] | 0;
     if ((i22 | 0) != 0) HEAP32[i22 + 44 >> 2] = i15;
     HEAP32[i13 >> 2] = i15;
     i19 = i19 + 1 | 0;
     i15 = HEAP32[i11 >> 2] | 0;
    } while ((i15 | 0) != 0);
    HEAP32[i5 + 9300 >> 2] = i21;
    HEAP32[i12 >> 2] = i19;
   }
   HEAP32[i5 + 16 >> 2] = 0;
   HEAP32[i5 + 9292 >> 2] = 0;
   i21 = HEAP32[i14 >> 2] | 0;
   i22 = HEAP32[i14 + 12 >> 2] | 0;
   d43 = +HEAPF32[i22 + 16 >> 2];
   d35 = +HEAPF32[i21 + 16 >> 2] - d43;
   d37 = +HEAPF32[i22 + 20 >> 2];
   d38 = +HEAPF32[i21 + 20 >> 2] - d37;
   d40 = +HEAPF32[i22 + 24 >> 2];
   d41 = +HEAPF32[i21 + 24 >> 2] - d40;
   i22 = HEAP32[i14 + 4 >> 2] | 0;
   d39 = +HEAPF32[i22 + 16 >> 2] - d43;
   d42 = +HEAPF32[i22 + 20 >> 2] - d37;
   d36 = +HEAPF32[i22 + 24 >> 2] - d40;
   i19 = HEAP32[i14 + 8 >> 2] | 0;
   d43 = +HEAPF32[i19 + 16 >> 2] - d43;
   d37 = +HEAPF32[i19 + 20 >> 2] - d37;
   d40 = +HEAPF32[i19 + 24 >> 2] - d40;
   if (d35 * d42 * d40 + (d38 * d36 * d43 + d41 * d39 * d37 - d35 * d36 * d37 - d38 * d39 * d40) - d41 * d42 * d43 < 0.0) {
    HEAP32[i14 >> 2] = i22;
    HEAP32[i14 + 4 >> 2] = i21;
    d43 = +HEAPF32[i14 + 16 >> 2];
    HEAPF32[i14 + 16 >> 2] = +HEAPF32[i14 + 20 >> 2];
    HEAPF32[i14 + 20 >> 2] = d43;
    i15 = i22;
   } else {
    i15 = i21;
    i21 = i22;
   }
   i15 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i5 + 16 | 0, i15, i21, i19, 1) | 0;
   i19 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i5 + 16 | 0, HEAP32[i14 + 4 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i14 + 12 >> 2] | 0, 1) | 0;
   i21 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i5 + 16 | 0, HEAP32[i14 + 8 >> 2] | 0, HEAP32[i14 + 4 >> 2] | 0, HEAP32[i14 + 12 >> 2] | 0, 1) | 0;
   i22 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i5 + 16 | 0, HEAP32[i14 >> 2] | 0, HEAP32[i14 + 8 >> 2] | 0, HEAP32[i14 + 12 >> 2] | 0, 1) | 0;
   if ((HEAP32[i5 + 9300 >> 2] | 0) == 4) {
    i24 = HEAP32[i11 >> 2] | 0;
    d23 = +HEAPF32[i24 + 16 >> 2];
    i14 = HEAP32[i24 + 48 >> 2] | 0;
    if ((i14 | 0) != 0) {
     d16 = d23 * d23;
     while (1) {
      d17 = +HEAPF32[i14 + 16 >> 2];
      i25 = d17 * d17 < d16;
      i24 = i25 ? i14 : i24;
      i14 = HEAP32[i14 + 48 >> 2] | 0;
      if ((i14 | 0) == 0) break; else d16 = i25 ? d17 * d17 : d16;
     }
     d23 = +HEAPF32[i24 + 16 >> 2];
    }
    d20 = +HEAPF32[i24 >> 2];
    d18 = +HEAPF32[i24 + 4 >> 2];
    d16 = +HEAPF32[i24 + 8 >> 2];
    d17 = +HEAPF32[i24 + 12 >> 2];
    i26 = HEAP32[i24 + 20 >> 2] | 0;
    i27 = HEAP32[i24 + 24 >> 2] | 0;
    i14 = HEAP32[i24 + 28 >> 2] | 0;
    HEAP8[i15 + 52 >> 0] = 0;
    HEAP32[i15 + 32 >> 2] = i19;
    HEAP8[i19 + 52 >> 0] = 0;
    HEAP32[i19 + 32 >> 2] = i15;
    HEAP8[i15 + 53 >> 0] = 0;
    HEAP32[i15 + 36 >> 2] = i21;
    HEAP8[i21 + 52 >> 0] = 1;
    HEAP32[i21 + 32 >> 2] = i15;
    HEAP8[i15 + 54 >> 0] = 0;
    HEAP32[i15 + 40 >> 2] = i22;
    HEAP8[i22 + 52 >> 0] = 2;
    HEAP32[i22 + 32 >> 2] = i15;
    HEAP8[i19 + 53 >> 0] = 2;
    HEAP32[i19 + 36 >> 2] = i22;
    HEAP8[i22 + 54 >> 0] = 1;
    HEAP32[i22 + 40 >> 2] = i19;
    HEAP8[i19 + 54 >> 0] = 1;
    HEAP32[i19 + 40 >> 2] = i21;
    HEAP8[i21 + 53 >> 0] = 2;
    HEAP32[i21 + 36 >> 2] = i19;
    HEAP8[i21 + 54 >> 0] = 1;
    HEAP32[i21 + 40 >> 2] = i22;
    HEAP8[i22 + 53 >> 0] = 2;
    HEAP32[i22 + 36 >> 2] = i21;
    HEAP32[i5 + 16 >> 2] = 0;
    i22 = i26;
    i21 = i27;
    i19 = i14;
    i15 = 0;
    i14 = 1;
    while (1) {
     i25 = HEAP32[i5 + 9292 >> 2] | 0;
     if (!(i25 >>> 0 < 64)) {
      i10 = 48;
      break;
     }
     HEAP32[i5 + 10216 >> 2] = 0;
     HEAP32[i5 + 10220 >> 2] = 0;
     HEAP32[i5 + 10224 >> 2] = 0;
     HEAP32[i5 + 9292 >> 2] = i25 + 1;
     HEAP8[i24 + 55 >> 0] = i14;
     i26 = i24 + 4 | 0;
     i27 = i24 + 8 | 0;
     __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i5 + 9708 | 0, +HEAPF32[i24 >> 2], +HEAPF32[i26 >> 2], +HEAPF32[i27 >> 2], i5 + 16 + (i25 << 5) + 60 | 0);
     if (+HEAPF32[i24 >> 2] * +HEAPF32[i5 + 16 + (i25 << 5) + 76 >> 2] + +HEAPF32[i26 >> 2] * +HEAPF32[i5 + 16 + (i25 << 5) + 80 >> 2] + +HEAPF32[i27 >> 2] * +HEAPF32[i5 + 16 + (i25 << 5) + 84 >> 2] - +HEAPF32[i24 + 16 >> 2] > 9999999747378752.0e-20) {
      i26 = 0;
      i27 = 1;
     } else {
      i10 = 47;
      break;
     }
     do {
      i27 = i27 & (__ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i5 + 16 | 0, i14, i5 + 16 + (i25 << 5) + 60 | 0, HEAP32[i24 + (i26 << 2) + 32 >> 2] | 0, HEAPU8[i24 + i26 + 52 >> 0] | 0, i5 + 10216 | 0) | 0);
      i26 = i26 + 1 | 0;
     } while (!(i26 >>> 0 > 2 | i27 ^ 1));
     if (!i27) {
      i10 = 46;
      break;
     }
     if (!((HEAP32[i5 + 10224 >> 2] | 0) >>> 0 > 2)) {
      i10 = 46;
      break;
     }
     i22 = HEAP32[i5 + 10216 >> 2] | 0;
     i21 = HEAP32[i5 + 10220 >> 2] | 0;
     HEAP8[i22 + 53 >> 0] = 2;
     HEAP32[i22 + 36 >> 2] = i21;
     HEAP8[i21 + 54 >> 0] = 1;
     HEAP32[i21 + 40 >> 2] = i22;
     i21 = i24 + 48 | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i19 = i24 + 44 | 0;
     if ((i22 | 0) != 0) HEAP32[i22 + 44 >> 2] = HEAP32[i19 >> 2];
     i22 = HEAP32[i19 >> 2] | 0;
     if ((i22 | 0) != 0) HEAP32[i22 + 48 >> 2] = HEAP32[i21 >> 2];
     if ((HEAP32[i11 >> 2] | 0) == (i24 | 0)) HEAP32[i11 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i5 + 9300 >> 2] = (HEAP32[i5 + 9300 >> 2] | 0) + -1;
     HEAP32[i19 >> 2] = 0;
     HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
     i19 = HEAP32[i13 >> 2] | 0;
     if ((i19 | 0) != 0) HEAP32[i19 + 44 >> 2] = i24;
     HEAP32[i13 >> 2] = i24;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
     i24 = HEAP32[i11 >> 2] | 0;
     d23 = +HEAPF32[i24 + 16 >> 2];
     i19 = HEAP32[i24 + 48 >> 2] | 0;
     if ((i19 | 0) != 0) {
      d16 = d23 * d23;
      while (1) {
       d17 = +HEAPF32[i19 + 16 >> 2];
       i21 = d17 * d17 < d16;
       i24 = i21 ? i19 : i24;
       i19 = HEAP32[i19 + 48 >> 2] | 0;
       if ((i19 | 0) == 0) break; else d16 = i21 ? d17 * d17 : d16;
      }
      d23 = +HEAPF32[i24 + 16 >> 2];
     }
     d20 = +HEAPF32[i24 >> 2];
     d18 = +HEAPF32[i24 + 4 >> 2];
     d16 = +HEAPF32[i24 + 8 >> 2];
     d17 = +HEAPF32[i24 + 12 >> 2];
     i22 = HEAP32[i24 + 20 >> 2] | 0;
     i21 = HEAP32[i24 + 24 >> 2] | 0;
     i19 = HEAP32[i24 + 28 >> 2] | 0;
     i15 = i15 + 1 | 0;
     if (!(i15 >>> 0 < 255)) break; else i14 = i14 + 1 | 0;
    }
    if ((i10 | 0) == 46) HEAP32[i5 + 16 >> 2] = 4; else if ((i10 | 0) == 47) HEAP32[i5 + 16 >> 2] = 7; else if ((i10 | 0) == 48) HEAP32[i5 + 16 >> 2] = 6;
    d39 = d23 * d20;
    d37 = d23 * d18;
    d41 = d23 * d16;
    HEAPF32[i9 >> 2] = d20;
    HEAPF32[i5 + 60 >> 2] = d18;
    HEAPF32[i5 + 64 >> 2] = d16;
    HEAPF32[i5 + 68 >> 2] = d17;
    HEAPF32[i5 + 72 >> 2] = d23;
    HEAP32[i5 + 52 >> 2] = 3;
    HEAP32[i5 + 20 >> 2] = i22;
    HEAP32[i5 + 24 >> 2] = i21;
    HEAP32[i5 + 28 >> 2] = i19;
    i25 = i21 + 16 | 0;
    d40 = +HEAPF32[i25 >> 2] - d39;
    i26 = i21 + 20 | 0;
    d35 = +HEAPF32[i26 >> 2] - d37;
    i27 = i21 + 24 | 0;
    d38 = +HEAPF32[i27 >> 2] - d41;
    i24 = i19 + 16 | 0;
    d34 = +HEAPF32[i24 >> 2] - d39;
    i21 = i19 + 20 | 0;
    d36 = +HEAPF32[i21 >> 2] - d37;
    i19 = i19 + 24 | 0;
    d42 = +HEAPF32[i19 >> 2] - d41;
    d42 = +Math_sqrt(+((d40 * d36 - d35 * d34) * (d40 * d36 - d35 * d34) + ((d35 * d42 - d38 * d36) * (d35 * d42 - d38 * d36) + (d38 * d34 - d40 * d42) * (d38 * d34 - d40 * d42))));
    HEAPF32[i5 + 36 >> 2] = d42;
    d40 = +HEAPF32[i24 >> 2] - d39;
    d34 = +HEAPF32[i21 >> 2] - d37;
    d38 = +HEAPF32[i19 >> 2] - d41;
    i19 = i22 + 16 | 0;
    d36 = +HEAPF32[i19 >> 2] - d39;
    i21 = i22 + 20 | 0;
    d35 = +HEAPF32[i21 >> 2] - d37;
    i24 = i22 + 24 | 0;
    d43 = +HEAPF32[i24 >> 2] - d41;
    d43 = +Math_sqrt(+((d40 * d35 - d34 * d36) * (d40 * d35 - d34 * d36) + ((d34 * d43 - d38 * d35) * (d34 * d43 - d38 * d35) + (d38 * d36 - d40 * d43) * (d38 * d36 - d40 * d43))));
    HEAPF32[i5 + 40 >> 2] = d43;
    d40 = +HEAPF32[i19 >> 2] - d39;
    d36 = +HEAPF32[i21 >> 2] - d37;
    d38 = +HEAPF32[i24 >> 2] - d41;
    d39 = +HEAPF32[i25 >> 2] - d39;
    d37 = +HEAPF32[i26 >> 2] - d37;
    d41 = +HEAPF32[i27 >> 2] - d41;
    d41 = +Math_sqrt(+((d40 * d37 - d36 * d39) * (d40 * d37 - d36 * d39) + ((d36 * d41 - d38 * d37) * (d36 * d41 - d38 * d37) + (d38 * d39 - d40 * d41) * (d38 * d39 - d40 * d41))));
    HEAPF32[i5 + 36 >> 2] = d42 / (d41 + (d42 + d43));
    HEAPF32[i5 + 40 >> 2] = d43 / (d41 + (d42 + d43));
    HEAPF32[i5 + 44 >> 2] = d41 / (d41 + (d42 + d43));
    if ((HEAP32[i5 + 16 >> 2] | 0) == 9) {
     i9 = 0;
     d16 = 0.0;
     d17 = 0.0;
     d18 = 0.0;
     d23 = 0.0;
     d29 = 0.0;
     d30 = 0.0;
     d31 = 0.0;
     d28 = 0.0;
     d20 = 0.0;
     break;
    }
    if ((HEAP32[i5 + 52 >> 2] | 0) == 0) {
     d20 = 0.0;
     d23 = 0.0;
     d18 = 0.0;
    } else {
     i11 = i5 + 52 | 0;
     i10 = 54;
    }
   } else i10 = 49;
  } else i10 = 49;
  if ((i10 | 0) == 49) {
   HEAP32[i5 + 16 >> 2] = 8;
   HEAPF32[i9 >> 2] = d16;
   HEAPF32[i5 + 60 >> 2] = d17;
   HEAPF32[i5 + 64 >> 2] = d18;
   HEAPF32[i5 + 68 >> 2] = 0.0;
   d20 = +Math_sqrt(+(d16 * d16 + d17 * d17 + d18 * d18));
   if (d20 > 0.0) {
    d18 = 1.0 / d20 * d18;
    d17 = 1.0 / d20 * d17;
    d16 = 1.0 / d20 * d16;
   } else {
    d18 = 0.0;
    d17 = 0.0;
    d16 = 1.0;
   }
   HEAPF32[i9 >> 2] = d16;
   HEAPF32[i5 + 60 >> 2] = d17;
   HEAPF32[i5 + 64 >> 2] = d18;
   HEAPF32[i5 + 68 >> 2] = 0.0;
   HEAPF32[i5 + 72 >> 2] = 0.0;
   HEAP32[i5 + 52 >> 2] = 1;
   HEAP32[i5 + 20 >> 2] = HEAP32[i14 >> 2];
   HEAPF32[i5 + 36 >> 2] = 1.0;
   i11 = i5 + 52 | 0;
   i10 = 54;
  }
  if ((i10 | 0) == 54) {
   d18 = 0.0;
   d16 = 0.0;
   d17 = 0.0;
   i10 = 0;
   do {
    i13 = HEAP32[i5 + 10208 >> 2] | 0;
    i27 = HEAP32[i5 + 10212 >> 2] | 0;
    i12 = (HEAP32[i5 + 10088 >> 2] | 0) + (i27 >> 1) | 0;
    if ((i27 & 1 | 0) != 0) i13 = HEAP32[(HEAP32[i12 >> 2] | 0) + i13 >> 2] | 0;
    FUNCTION_TABLE_viii[i13 & 127](i5 + 9312 | 0, i12, HEAP32[i5 + 16 + (i10 << 2) + 4 >> 2] | 0);
    d43 = +HEAPF32[i5 + 16 + (i10 << 2) + 20 >> 2];
    d18 = d18 + +HEAPF32[i5 + 9312 >> 2] * d43;
    d16 = d16 + d43 * +HEAPF32[i5 + 9316 >> 2];
    d17 = d17 + d43 * +HEAPF32[i5 + 9320 >> 2];
    i10 = i10 + 1 | 0;
   } while (i10 >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0);
   d20 = d17;
   d23 = d16;
  }
  d45 = +HEAPF32[i2 >> 2];
  d44 = +HEAPF32[i2 + 4 >> 2];
  d32 = +HEAPF32[i2 + 8 >> 2];
  d34 = +HEAPF32[i2 + 16 >> 2];
  d35 = +HEAPF32[i2 + 20 >> 2];
  d36 = +HEAPF32[i2 + 24 >> 2];
  d38 = +HEAPF32[i2 + 32 >> 2];
  d40 = +HEAPF32[i2 + 36 >> 2];
  d42 = +HEAPF32[i2 + 40 >> 2];
  d33 = +HEAPF32[i2 + 48 >> 2];
  d29 = +HEAPF32[i2 + 52 >> 2];
  d30 = +HEAPF32[i2 + 56 >> 2];
  d31 = +HEAPF32[i9 >> 2];
  d41 = +HEAPF32[i5 + 72 >> 2];
  d28 = +HEAPF32[i5 + 60 >> 2];
  d43 = +HEAPF32[i5 + 64 >> 2];
  d37 = d18 - d31 * d41;
  d39 = d23 - d41 * d28;
  d41 = d20 - d41 * d43;
  i9 = 1;
  d16 = d18 * d45 + d23 * d44 + d20 * d32 + d33;
  d17 = d18 * d34 + d23 * d35 + d20 * d36 + d29;
  d18 = d18 * d38 + d23 * d40 + d20 * d42 + d30;
  d23 = d37 * d45 + d39 * d44 + d41 * d32 + d33;
  d29 = d37 * d34 + d39 * d35 + d41 * d36 + d29;
  d30 = d37 * d38 + d39 * d40 + d41 * d42 + d30;
  d31 = -d31;
  d28 = -d28;
  d20 = -d43;
 } else {
  i9 = 0;
  d16 = 0.0;
  d17 = 0.0;
  d18 = 0.0;
  d23 = 0.0;
  d29 = 0.0;
  d30 = 0.0;
  d31 = 0.0;
  d28 = 0.0;
  d20 = 0.0;
 } while (0);
 if (i9) {
  HEAPF32[i1 >> 2] = d16;
  HEAPF32[i1 + 4 >> 2] = d17;
  HEAPF32[i1 + 8 >> 2] = d18;
  HEAPF32[i1 + 12 >> 2] = 0.0;
  HEAPF32[i3 >> 2] = d23;
  HEAPF32[i3 + 4 >> 2] = d29;
  HEAPF32[i3 + 8 >> 2] = d30;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  HEAPF32[i4 >> 2] = d31;
  HEAPF32[i4 + 4 >> 2] = d28;
  HEAPF32[i4 + 8 >> 2] = d20;
  HEAPF32[i4 + 12 >> 2] = 0.0;
  i27 = 1;
  STACKTOP = i5;
  return i27 | 0;
 }
 HEAP32[i5 + 9708 >> 2] = i6;
 HEAP32[i5 + 9712 >> 2] = i8;
 d18 = +HEAPF32[i7 >> 2];
 d34 = +HEAPF32[i2 >> 2];
 d20 = +HEAPF32[i7 + 16 >> 2];
 d35 = +HEAPF32[i2 + 16 >> 2];
 d23 = +HEAPF32[i7 + 32 >> 2];
 d36 = +HEAPF32[i2 + 32 >> 2];
 d37 = +HEAPF32[i2 + 4 >> 2];
 d38 = +HEAPF32[i2 + 20 >> 2];
 d39 = +HEAPF32[i2 + 36 >> 2];
 d41 = +HEAPF32[i2 + 8 >> 2];
 d43 = +HEAPF32[i2 + 24 >> 2];
 d45 = +HEAPF32[i2 + 40 >> 2];
 d28 = +HEAPF32[i7 + 4 >> 2];
 d29 = +HEAPF32[i7 + 20 >> 2];
 d30 = +HEAPF32[i7 + 36 >> 2];
 d31 = +HEAPF32[i7 + 8 >> 2];
 d32 = +HEAPF32[i7 + 24 >> 2];
 d33 = +HEAPF32[i7 + 40 >> 2];
 HEAPF32[i5 + 9716 >> 2] = d18 * d34 + d20 * d35 + d23 * d36;
 HEAPF32[i5 + 9720 >> 2] = d18 * d37 + d20 * d38 + d23 * d39;
 HEAPF32[i5 + 9724 >> 2] = d18 * d41 + d20 * d43 + d23 * d45;
 HEAPF32[i5 + 9728 >> 2] = 0.0;
 HEAPF32[i5 + 9732 >> 2] = d34 * d28 + d35 * d29 + d36 * d30;
 HEAPF32[i5 + 9736 >> 2] = d37 * d28 + d38 * d29 + d39 * d30;
 HEAPF32[i5 + 9740 >> 2] = d41 * d28 + d43 * d29 + d45 * d30;
 HEAPF32[i5 + 9744 >> 2] = 0.0;
 HEAPF32[i5 + 9748 >> 2] = d34 * d31 + d35 * d32 + d36 * d33;
 HEAPF32[i5 + 9752 >> 2] = d37 * d31 + d38 * d32 + d39 * d33;
 HEAPF32[i5 + 9756 >> 2] = d41 * d31 + d43 * d32 + d45 * d33;
 HEAPF32[i5 + 9760 >> 2] = 0.0;
 d40 = +HEAPF32[i7 + 48 >> 2] - +HEAPF32[i2 + 48 >> 2];
 d42 = +HEAPF32[i7 + 52 >> 2] - +HEAPF32[i2 + 52 >> 2];
 d44 = +HEAPF32[i7 + 56 >> 2] - +HEAPF32[i2 + 56 >> 2];
 HEAPF32[i5 + 9764 >> 2] = d18 * d34 + d20 * d35 + d23 * d36;
 HEAPF32[i5 + 9768 >> 2] = d34 * d28 + d35 * d29 + d36 * d30;
 HEAPF32[i5 + 9772 >> 2] = d34 * d31 + d35 * d32 + d36 * d33;
 HEAPF32[i5 + 9776 >> 2] = 0.0;
 HEAPF32[i5 + 9780 >> 2] = d18 * d37 + d20 * d38 + d23 * d39;
 HEAPF32[i5 + 9784 >> 2] = d37 * d28 + d38 * d29 + d39 * d30;
 HEAPF32[i5 + 9788 >> 2] = d37 * d31 + d38 * d32 + d39 * d33;
 HEAPF32[i5 + 9792 >> 2] = 0.0;
 HEAPF32[i5 + 9796 >> 2] = d18 * d41 + d20 * d43 + d23 * d45;
 HEAPF32[i5 + 9800 >> 2] = d41 * d28 + d43 * d29 + d45 * d30;
 HEAPF32[i5 + 9804 >> 2] = d41 * d31 + d43 * d32 + d45 * d33;
 HEAPF32[i5 + 9808 >> 2] = 0.0;
 HEAPF32[i5 + 9812 >> 2] = d40 * d34 + d42 * d35 + d44 * d36;
 HEAPF32[i5 + 9816 >> 2] = d40 * d37 + d42 * d38 + d44 * d39;
 HEAPF32[i5 + 9820 >> 2] = d40 * d41 + d42 * d43 + d44 * d45;
 HEAPF32[i5 + 9824 >> 2] = 0.0;
 HEAP32[i5 + 9828 >> 2] = 71;
 HEAP32[i5 + 9832 >> 2] = 0;
 HEAP32[i5 + 9692 >> 2] = 0;
 HEAP32[i5 + 9456 >> 2] = 0;
 HEAP32[i5 + 9460 >> 2] = 0;
 HEAP32[i5 + 9464 >> 2] = 0;
 HEAP32[i5 + 9468 >> 2] = 0;
 HEAP32[i5 + 9704 >> 2] = 2;
 HEAP32[i5 + 9696 >> 2] = 0;
 HEAPF32[i5 + 9472 >> 2] = 0.0;
 if ((__ZN12gjkepa2_impl3GJK8EvaluateERKNS_13MinkowskiDiffERK9btVector3(i5 + 9328 | 0, i5 + 9708 | 0, i5) | 0) != 0) {
  i27 = 0;
  STACKTOP = i5;
  return i27 | 0;
 }
 i7 = HEAP32[i5 + 9700 >> 2] | 0;
 if ((HEAP32[i7 + 32 >> 2] | 0) == 0) {
  d29 = 0.0;
  d28 = 0.0;
  d23 = 0.0;
  d16 = 0.0;
  d17 = 0.0;
  d20 = 0.0;
 } else {
  d23 = 0.0;
  d28 = 0.0;
  d29 = 0.0;
  d20 = 0.0;
  d17 = 0.0;
  d16 = 0.0;
  i6 = 0;
  do {
   d18 = +HEAPF32[i7 + (i6 << 2) + 16 >> 2];
   i9 = HEAP32[i5 + 9828 >> 2] | 0;
   i27 = HEAP32[i5 + 9832 >> 2] | 0;
   i8 = (HEAP32[i5 + 9708 >> 2] | 0) + (i27 >> 1) | 0;
   if ((i27 & 1 | 0) != 0) i9 = HEAP32[(HEAP32[i8 >> 2] | 0) + i9 >> 2] | 0;
   FUNCTION_TABLE_viii[i9 & 127](i5 + 9312 | 0, i8, HEAP32[i7 + (i6 << 2) >> 2] | 0);
   d23 = d23 + d18 * +HEAPF32[i5 + 9312 >> 2];
   d28 = d28 + d18 * +HEAPF32[i5 + 9316 >> 2];
   d29 = d29 + d18 * +HEAPF32[i5 + 9320 >> 2];
   i8 = HEAP32[(HEAP32[i5 + 9700 >> 2] | 0) + (i6 << 2) >> 2] | 0;
   d30 = -+HEAPF32[i8 >> 2];
   d31 = -+HEAPF32[i8 + 4 >> 2];
   d32 = -+HEAPF32[i8 + 8 >> 2];
   i8 = HEAP32[i5 + 9828 >> 2] | 0;
   i27 = HEAP32[i5 + 9832 >> 2] | 0;
   i7 = (HEAP32[i5 + 9712 >> 2] | 0) + (i27 >> 1) | 0;
   if ((i27 & 1 | 0) != 0) i8 = HEAP32[(HEAP32[i7 >> 2] | 0) + i8 >> 2] | 0;
   d44 = +HEAPF32[i5 + 9732 >> 2] * d30 + +HEAPF32[i5 + 9736 >> 2] * d31 + +HEAPF32[i5 + 9740 >> 2] * d32;
   d43 = +HEAPF32[i5 + 9748 >> 2] * d30 + +HEAPF32[i5 + 9752 >> 2] * d31 + +HEAPF32[i5 + 9756 >> 2] * d32;
   HEAPF32[i5 + 10088 >> 2] = +HEAPF32[i5 + 9716 >> 2] * d30 + +HEAPF32[i5 + 9720 >> 2] * d31 + +HEAPF32[i5 + 9724 >> 2] * d32;
   HEAPF32[i5 + 10092 >> 2] = d44;
   HEAPF32[i5 + 10096 >> 2] = d43;
   HEAPF32[i5 + 10100 >> 2] = 0.0;
   FUNCTION_TABLE_viii[i8 & 127](i5 + 10216 | 0, i7, i5 + 10088 | 0);
   d43 = +HEAPF32[i5 + 10216 >> 2];
   d44 = +HEAPF32[i5 + 10220 >> 2];
   d45 = +HEAPF32[i5 + 10224 >> 2];
   d20 = d20 + d18 * (d43 * +HEAPF32[i5 + 9764 >> 2] + d44 * +HEAPF32[i5 + 9768 >> 2] + d45 * +HEAPF32[i5 + 9772 >> 2] + +HEAPF32[i5 + 9812 >> 2]);
   d17 = d17 + d18 * (d43 * +HEAPF32[i5 + 9780 >> 2] + d44 * +HEAPF32[i5 + 9784 >> 2] + d45 * +HEAPF32[i5 + 9788 >> 2] + +HEAPF32[i5 + 9816 >> 2]);
   d16 = d16 + d18 * (d43 * +HEAPF32[i5 + 9796 >> 2] + d44 * +HEAPF32[i5 + 9800 >> 2] + d45 * +HEAPF32[i5 + 9804 >> 2] + +HEAPF32[i5 + 9820 >> 2]);
   i6 = i6 + 1 | 0;
   i7 = HEAP32[i5 + 9700 >> 2] | 0;
  } while (i6 >>> 0 < (HEAP32[i7 + 32 >> 2] | 0) >>> 0);
 }
 d30 = +HEAPF32[i2 >> 2];
 d31 = +HEAPF32[i2 + 4 >> 2];
 d32 = +HEAPF32[i2 + 8 >> 2];
 d34 = +HEAPF32[i2 + 16 >> 2];
 d35 = +HEAPF32[i2 + 20 >> 2];
 d36 = +HEAPF32[i2 + 24 >> 2];
 d38 = +HEAPF32[i2 + 32 >> 2];
 d39 = +HEAPF32[i2 + 36 >> 2];
 d40 = +HEAPF32[i2 + 40 >> 2];
 d33 = +HEAPF32[i2 + 48 >> 2];
 d37 = +HEAPF32[i2 + 52 >> 2];
 d41 = +HEAPF32[i2 + 56 >> 2];
 d42 = d23 - d20;
 d43 = d28 - d17;
 d45 = d29 - d16;
 d44 = +Math_sqrt(+(d42 * d42 + d43 * d43 + d45 * d45));
 d44 = 1.0 / (d44 > 9999999747378752.0e-20 ? d44 : 1.0);
 HEAPF32[i1 >> 2] = d23 * d30 + d28 * d31 + d29 * d32 + d33;
 HEAPF32[i1 + 4 >> 2] = d23 * d34 + d28 * d35 + d29 * d36 + d37;
 HEAPF32[i1 + 8 >> 2] = d23 * d38 + d28 * d39 + d29 * d40 + d41;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i3 >> 2] = d20 * d30 + d17 * d31 + d16 * d32 + d33;
 HEAPF32[i3 + 4 >> 2] = d20 * d34 + d17 * d35 + d16 * d36 + d37;
 HEAPF32[i3 + 8 >> 2] = d20 * d38 + d17 * d39 + d16 * d40 + d41;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 HEAPF32[i4 >> 2] = d44 * d42;
 HEAPF32[i4 + 4 >> 2] = d44 * d43;
 HEAPF32[i4 + 8 >> 2] = d44 * d45;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 i27 = 0;
 STACKTOP = i5;
 return i27 | 0;
}
function __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i2, i4, i3, i20, i10) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i10 = i10 | 0;
 var i1 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, i26 = 0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, i36 = 0, i37 = 0, d38 = 0.0, d39 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 HEAPF32[i2 + 56 >> 2] = 0.0;
 i11 = i10 + 276 | 0;
 i12 = i10 + 280 | 0;
 HEAP32[i10 + 272 >> 2] = 0;
 HEAP32[i10 + 276 >> 2] = 0;
 HEAP32[i10 + 280 >> 2] = 0;
 HEAP32[i10 + 284 >> 2] = 0;
 HEAP32[i10 + 208 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i10 + 212 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i10 + 216 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i10 + 220 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i10 + 224 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i10 + 228 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i10 + 232 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i10 + 236 >> 2] = HEAP32[i4 + 28 >> 2];
 HEAP32[i10 + 240 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i10 + 244 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i10 + 248 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i10 + 252 >> 2] = HEAP32[i4 + 44 >> 2];
 i36 = i10 + 256 | 0;
 HEAP32[i36 + 0 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i36 + 4 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i36 + 8 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i36 + 12 >> 2] = HEAP32[i4 + 60 >> 2];
 HEAP32[i10 + 144 >> 2] = HEAP32[i4 + 64 >> 2];
 HEAP32[i10 + 148 >> 2] = HEAP32[i4 + 68 >> 2];
 HEAP32[i10 + 152 >> 2] = HEAP32[i4 + 72 >> 2];
 HEAP32[i10 + 156 >> 2] = HEAP32[i4 + 76 >> 2];
 HEAP32[i10 + 160 >> 2] = HEAP32[i4 + 80 >> 2];
 HEAP32[i10 + 164 >> 2] = HEAP32[i4 + 84 >> 2];
 HEAP32[i10 + 168 >> 2] = HEAP32[i4 + 88 >> 2];
 HEAP32[i10 + 172 >> 2] = HEAP32[i4 + 92 >> 2];
 HEAP32[i10 + 176 >> 2] = HEAP32[i4 + 96 >> 2];
 HEAP32[i10 + 180 >> 2] = HEAP32[i4 + 100 >> 2];
 HEAP32[i10 + 184 >> 2] = HEAP32[i4 + 104 >> 2];
 HEAP32[i10 + 188 >> 2] = HEAP32[i4 + 108 >> 2];
 i37 = i10 + 192 | 0;
 HEAP32[i37 + 0 >> 2] = HEAP32[i4 + 112 >> 2];
 HEAP32[i37 + 4 >> 2] = HEAP32[i4 + 116 >> 2];
 HEAP32[i37 + 8 >> 2] = HEAP32[i4 + 120 >> 2];
 HEAP32[i37 + 12 >> 2] = HEAP32[i4 + 124 >> 2];
 d13 = +HEAPF32[i36 >> 2];
 d14 = +HEAPF32[i37 >> 2];
 d15 = +HEAPF32[i10 + 260 >> 2];
 d16 = +HEAPF32[i10 + 196 >> 2];
 d8 = +HEAPF32[i10 + 264 >> 2];
 d9 = +HEAPF32[i10 + 200 >> 2];
 HEAPF32[i36 >> 2] = d13 - (d13 + d14) * .5;
 HEAPF32[i10 + 260 >> 2] = d15 - (d15 + d16) * .5;
 HEAPF32[i10 + 264 >> 2] = d8 - (d8 + d9) * .5;
 HEAPF32[i37 >> 2] = d14 - (d13 + d14) * .5;
 HEAPF32[i10 + 196 >> 2] = d16 - (d15 + d16) * .5;
 HEAPF32[i10 + 200 >> 2] = d9 - (d8 + d9) * .5;
 if (((HEAP32[(HEAP32[i2 + 28 >> 2] | 0) + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2) i21 = ((HEAP32[(HEAP32[i2 + 32 >> 2] | 0) + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2; else i21 = 0;
 d18 = +HEAPF32[i2 + 44 >> 2];
 d17 = +HEAPF32[i2 + 48 >> 2];
 HEAP32[3344] = (HEAP32[3344] | 0) + 1;
 i37 = (HEAP8[i2 + 52 >> 0] | 0) == 0;
 d17 = i37 ? d17 : 0.0;
 HEAP32[i2 + 64 >> 2] = 0;
 HEAPF32[i2 + 4 >> 2] = 0.0;
 HEAPF32[i2 + 8 >> 2] = 1.0;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i2 + 16 >> 2] = 0.0;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 60 >> 2] = -1;
 d18 = (i37 ? d18 : 0.0) + d17;
 i37 = HEAP32[i2 + 24 >> 2] | 0;
 HEAP8[i37 + 312 >> 0] = 0;
 HEAP32[i37 >> 2] = 0;
 HEAP8[i37 + 356 >> 0] = 1;
 HEAPF32[i37 + 292 >> 2] = 999999984306749400.0;
 HEAPF32[i37 + 296 >> 2] = 999999984306749400.0;
 HEAPF32[i37 + 300 >> 2] = 999999984306749400.0;
 HEAPF32[i37 + 304 >> 2] = 0.0;
 HEAP32[i37 + 336 >> 2] = 0;
 HEAP32[i37 + 340 >> 2] = 0;
 HEAP32[i37 + 344 >> 2] = 0;
 HEAP32[i37 + 348 >> 2] = 0;
 HEAP8[i37 + 352 >> 0] = 0;
 HEAP8[i37 + 332 >> 0] = HEAP8[i37 + 332 >> 0] & -16;
 d23 = +HEAPF32[i2 + 4 >> 2];
 d24 = +HEAPF32[i2 + 8 >> 2];
 d28 = +HEAPF32[i2 + 12 >> 2];
 L4 : do if (i21) {
  d22 = 999999984306749400.0;
  while (1) {
   d33 = -d23;
   d34 = -d24;
   d25 = -d28;
   d35 = +HEAPF32[i4 + 4 >> 2] * d33 + +HEAPF32[i4 + 20 >> 2] * d34 + +HEAPF32[i4 + 36 >> 2] * d25;
   d27 = +HEAPF32[i4 + 8 >> 2] * d33 + +HEAPF32[i4 + 24 >> 2] * d34 + +HEAPF32[i4 + 40 >> 2] * d25;
   HEAPF32[i10 + 128 >> 2] = +HEAPF32[i4 >> 2] * d33 + +HEAPF32[i4 + 16 >> 2] * d34 + +HEAPF32[i4 + 32 >> 2] * d25;
   HEAPF32[i10 + 132 >> 2] = d35;
   HEAPF32[i10 + 136 >> 2] = d27;
   HEAPF32[i10 + 140 >> 2] = 0.0;
   d27 = d23 * +HEAPF32[i4 + 68 >> 2] + d24 * +HEAPF32[i4 + 84 >> 2] + d28 * +HEAPF32[i4 + 100 >> 2];
   d35 = d23 * +HEAPF32[i4 + 72 >> 2] + d24 * +HEAPF32[i4 + 88 >> 2] + d28 * +HEAPF32[i4 + 104 >> 2];
   HEAPF32[i10 + 112 >> 2] = +HEAPF32[i4 + 64 >> 2] * d23 + +HEAPF32[i4 + 80 >> 2] * d24 + +HEAPF32[i4 + 96 >> 2] * d28;
   HEAPF32[i10 + 116 >> 2] = d27;
   HEAPF32[i10 + 120 >> 2] = d35;
   HEAPF32[i10 + 124 >> 2] = 0.0;
   __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i10 + 96 | 0, HEAP32[i2 + 28 >> 2] | 0, i10 + 128 | 0);
   __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i10 + 80 | 0, HEAP32[i2 + 32 >> 2] | 0, i10 + 112 | 0);
   d28 = +HEAPF32[i10 + 96 >> 2];
   d35 = +HEAPF32[i10 + 100 >> 2];
   d24 = +HEAPF32[i10 + 104 >> 2];
   d27 = d28 * +HEAPF32[i10 + 208 >> 2] + d35 * +HEAPF32[i10 + 212 >> 2] + d24 * +HEAPF32[i10 + 216 >> 2] + +HEAPF32[i10 + 256 >> 2];
   d24 = d28 * +HEAPF32[i10 + 224 >> 2] + d35 * +HEAPF32[i10 + 228 >> 2] + d24 * +HEAPF32[i10 + 232 >> 2] + +HEAPF32[i10 + 260 >> 2];
   d35 = +HEAPF32[i10 + 80 >> 2];
   d28 = +HEAPF32[i10 + 84 >> 2];
   d25 = +HEAPF32[i10 + 88 >> 2];
   d23 = d35 * +HEAPF32[i10 + 144 >> 2] + d28 * +HEAPF32[i10 + 148 >> 2] + d25 * +HEAPF32[i10 + 152 >> 2] + +HEAPF32[i10 + 192 >> 2];
   d25 = d35 * +HEAPF32[i10 + 160 >> 2] + d28 * +HEAPF32[i10 + 164 >> 2] + d25 * +HEAPF32[i10 + 168 >> 2] + +HEAPF32[i10 + 196 >> 2];
   d28 = +HEAPF32[i2 + 4 >> 2] * (d27 - d23) + +HEAPF32[i2 + 8 >> 2] * (d24 - d25) + +HEAPF32[i2 + 12 >> 2] * 0.0;
   if (d28 > 0.0 ? d28 * d28 > d22 * +HEAPF32[i4 + 128 >> 2] : 0) {
    i1 = 22;
    break L4;
   }
   i21 = HEAP32[i2 + 24 >> 2] | 0;
   i26 = HEAP32[i21 >> 2] | 0;
   if ((i26 | 0) > 0) {
    d29 = +HEAPF32[i21 + 308 >> 2];
    i37 = 0;
    i36 = 0;
    do {
     d33 = d27 - d23 - +HEAPF32[i21 + (i36 << 4) + 4 >> 2];
     d34 = d24 - d25 - +HEAPF32[i21 + (i36 << 4) + 8 >> 2];
     d35 = 0.0 - +HEAPF32[i21 + (i36 << 4) + 12 >> 2];
     i37 = i37 | d33 * d33 + d34 * d34 + d35 * d35 <= d29;
     i36 = i36 + 1 | 0;
    } while ((i36 | 0) != (i26 | 0));
   } else i37 = 0;
   if ((+HEAPF32[i21 + 304 >> 2] == 0.0 ? +HEAPF32[i21 + 300 >> 2] == 0.0 : 0) ? d24 - d25 == +HEAPF32[i21 + 296 >> 2] : 0) i36 = d27 - d23 == +HEAPF32[i21 + 292 >> 2]; else i36 = 0;
   if (i36 | i37) {
    i1 = 31;
    break L4;
   }
   d30 = d22 - d28;
   if (d30 <= d22 * 9.999999974752427e-7) {
    i1 = 33;
    break L4;
   }
   HEAPF32[i21 + 292 >> 2] = d27 - d23;
   HEAPF32[i21 + 296 >> 2] = d24 - d25;
   HEAPF32[i21 + 300 >> 2] = 0.0;
   HEAPF32[i21 + 304 >> 2] = 0.0;
   HEAP8[i21 + 356 >> 0] = 1;
   HEAPF32[i21 + (i26 << 4) + 4 >> 2] = d27 - d23;
   HEAPF32[i21 + (i26 << 4) + 8 >> 2] = d24 - d25;
   HEAPF32[i21 + (i26 << 4) + 12 >> 2] = 0.0;
   HEAPF32[i21 + (i26 << 4) + 16 >> 2] = 0.0;
   i36 = HEAP32[i21 >> 2] | 0;
   HEAPF32[i21 + (i36 << 4) + 84 >> 2] = d27;
   HEAPF32[i21 + (i36 << 4) + 88 >> 2] = d24;
   HEAPF32[i21 + (i36 << 4) + 92 >> 2] = 0.0;
   HEAPF32[i21 + (i36 << 4) + 96 >> 2] = 0.0;
   i36 = HEAP32[i21 >> 2] | 0;
   HEAPF32[i21 + (i36 << 4) + 164 >> 2] = d23;
   HEAPF32[i21 + (i36 << 4) + 168 >> 2] = d25;
   HEAPF32[i21 + (i36 << 4) + 172 >> 2] = 0.0;
   HEAPF32[i21 + (i36 << 4) + 176 >> 2] = 0.0;
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
   i36 = HEAP32[i2 + 24 >> 2] | 0;
   i37 = __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i36) | 0;
   d23 = +HEAPF32[i36 + 276 >> 2];
   d24 = +HEAPF32[i36 + 280 >> 2];
   d28 = +HEAPF32[i36 + 284 >> 2];
   d27 = +HEAPF32[i36 + 288 >> 2];
   if (!i37) {
    i1 = 35;
    break L4;
   }
   d25 = d22;
   d22 = d23 * d23 + d24 * d24 + d28 * d28;
   if (d22 < 9.999999974752427e-7) {
    d22 = d25;
    i1 = 37;
    break L4;
   }
   if (d25 - d22 <= d25 * 1.1920928955078125e-7) {
    i1 = 39;
    break L4;
   }
   HEAPF32[i2 + 4 >> 2] = d23;
   HEAPF32[i2 + 8 >> 2] = d24;
   HEAPF32[i2 + 12 >> 2] = d28;
   HEAPF32[i2 + 16 >> 2] = d27;
   i37 = HEAP32[i2 + 64 >> 2] | 0;
   HEAP32[i2 + 64 >> 2] = i37 + 1;
   if ((i37 | 0) > 1e3) {
    d22 = 0.0;
    i21 = 0;
    d23 = 0.0;
    d24 = 0.0;
    d25 = 0.0;
    break L4;
   }
   if ((HEAP32[HEAP32[i2 + 24 >> 2] >> 2] | 0) == 4) {
    i1 = 42;
    break;
   }
  }
 } else {
  d22 = 999999984306749400.0;
  while (1) {
   d29 = -d23;
   d27 = -d24;
   d25 = -d28;
   d30 = +HEAPF32[i4 + 4 >> 2] * d29 + +HEAPF32[i4 + 20 >> 2] * d27 + +HEAPF32[i4 + 36 >> 2] * d25;
   d35 = +HEAPF32[i4 + 8 >> 2] * d29 + +HEAPF32[i4 + 24 >> 2] * d27 + +HEAPF32[i4 + 40 >> 2] * d25;
   HEAPF32[i10 + 128 >> 2] = +HEAPF32[i4 >> 2] * d29 + +HEAPF32[i4 + 16 >> 2] * d27 + +HEAPF32[i4 + 32 >> 2] * d25;
   HEAPF32[i10 + 132 >> 2] = d30;
   HEAPF32[i10 + 136 >> 2] = d35;
   HEAPF32[i10 + 140 >> 2] = 0.0;
   d35 = d23 * +HEAPF32[i4 + 68 >> 2] + d24 * +HEAPF32[i4 + 84 >> 2] + d28 * +HEAPF32[i4 + 100 >> 2];
   d30 = d23 * +HEAPF32[i4 + 72 >> 2] + d24 * +HEAPF32[i4 + 88 >> 2] + d28 * +HEAPF32[i4 + 104 >> 2];
   HEAPF32[i10 + 112 >> 2] = +HEAPF32[i4 + 64 >> 2] * d23 + +HEAPF32[i4 + 80 >> 2] * d24 + +HEAPF32[i4 + 96 >> 2] * d28;
   HEAPF32[i10 + 116 >> 2] = d35;
   HEAPF32[i10 + 120 >> 2] = d30;
   HEAPF32[i10 + 124 >> 2] = 0.0;
   __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i10 + 96 | 0, HEAP32[i2 + 28 >> 2] | 0, i10 + 128 | 0);
   __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i10 + 80 | 0, HEAP32[i2 + 32 >> 2] | 0, i10 + 112 | 0);
   d30 = +HEAPF32[i10 + 96 >> 2];
   d35 = +HEAPF32[i10 + 100 >> 2];
   d28 = +HEAPF32[i10 + 104 >> 2];
   d24 = d30 * +HEAPF32[i10 + 208 >> 2] + d35 * +HEAPF32[i10 + 212 >> 2] + d28 * +HEAPF32[i10 + 216 >> 2] + +HEAPF32[i10 + 256 >> 2];
   d25 = d30 * +HEAPF32[i10 + 224 >> 2] + d35 * +HEAPF32[i10 + 228 >> 2] + d28 * +HEAPF32[i10 + 232 >> 2] + +HEAPF32[i10 + 260 >> 2];
   d28 = d30 * +HEAPF32[i10 + 240 >> 2] + d35 * +HEAPF32[i10 + 244 >> 2] + d28 * +HEAPF32[i10 + 248 >> 2] + +HEAPF32[i10 + 264 >> 2];
   d35 = +HEAPF32[i10 + 80 >> 2];
   d30 = +HEAPF32[i10 + 84 >> 2];
   d27 = +HEAPF32[i10 + 88 >> 2];
   d23 = d35 * +HEAPF32[i10 + 144 >> 2] + d30 * +HEAPF32[i10 + 148 >> 2] + d27 * +HEAPF32[i10 + 152 >> 2] + +HEAPF32[i10 + 192 >> 2];
   d29 = d35 * +HEAPF32[i10 + 160 >> 2] + d30 * +HEAPF32[i10 + 164 >> 2] + d27 * +HEAPF32[i10 + 168 >> 2] + +HEAPF32[i10 + 196 >> 2];
   d27 = d35 * +HEAPF32[i10 + 176 >> 2] + d30 * +HEAPF32[i10 + 180 >> 2] + d27 * +HEAPF32[i10 + 184 >> 2] + +HEAPF32[i10 + 200 >> 2];
   d30 = +HEAPF32[i2 + 4 >> 2] * (d24 - d23) + +HEAPF32[i2 + 8 >> 2] * (d25 - d29) + +HEAPF32[i2 + 12 >> 2] * (d28 - d27);
   if (d30 > 0.0 ? d30 * d30 > d22 * +HEAPF32[i4 + 128 >> 2] : 0) {
    i1 = 22;
    break L4;
   }
   i26 = HEAP32[i2 + 24 >> 2] | 0;
   i21 = HEAP32[i26 >> 2] | 0;
   if ((i21 | 0) > 0) {
    d31 = +HEAPF32[i26 + 308 >> 2];
    i37 = 0;
    i36 = 0;
    do {
     d33 = d24 - d23 - +HEAPF32[i26 + (i36 << 4) + 4 >> 2];
     d34 = d25 - d29 - +HEAPF32[i26 + (i36 << 4) + 8 >> 2];
     d35 = d28 - d27 - +HEAPF32[i26 + (i36 << 4) + 12 >> 2];
     i37 = i37 | d33 * d33 + d34 * d34 + d35 * d35 <= d31;
     i36 = i36 + 1 | 0;
    } while ((i36 | 0) != (i21 | 0));
   } else i37 = 0;
   if ((+HEAPF32[i26 + 304 >> 2] == 0.0 ? d28 - d27 == +HEAPF32[i26 + 300 >> 2] : 0) ? d25 - d29 == +HEAPF32[i26 + 296 >> 2] : 0) i36 = d24 - d23 == +HEAPF32[i26 + 292 >> 2]; else i36 = 0;
   if (i36 | i37) {
    i1 = 31;
    break L4;
   }
   d30 = d22 - d30;
   if (d30 <= d22 * 9.999999974752427e-7) {
    i1 = 33;
    break L4;
   }
   HEAPF32[i26 + 292 >> 2] = d24 - d23;
   HEAPF32[i26 + 296 >> 2] = d25 - d29;
   HEAPF32[i26 + 300 >> 2] = d28 - d27;
   HEAPF32[i26 + 304 >> 2] = 0.0;
   HEAP8[i26 + 356 >> 0] = 1;
   HEAPF32[i26 + (i21 << 4) + 4 >> 2] = d24 - d23;
   HEAPF32[i26 + (i21 << 4) + 8 >> 2] = d25 - d29;
   HEAPF32[i26 + (i21 << 4) + 12 >> 2] = d28 - d27;
   HEAPF32[i26 + (i21 << 4) + 16 >> 2] = 0.0;
   i36 = HEAP32[i26 >> 2] | 0;
   HEAPF32[i26 + (i36 << 4) + 84 >> 2] = d24;
   HEAPF32[i26 + (i36 << 4) + 88 >> 2] = d25;
   HEAPF32[i26 + (i36 << 4) + 92 >> 2] = d28;
   HEAPF32[i26 + (i36 << 4) + 96 >> 2] = 0.0;
   i36 = HEAP32[i26 >> 2] | 0;
   HEAPF32[i26 + (i36 << 4) + 164 >> 2] = d23;
   HEAPF32[i26 + (i36 << 4) + 168 >> 2] = d29;
   HEAPF32[i26 + (i36 << 4) + 172 >> 2] = d27;
   HEAPF32[i26 + (i36 << 4) + 176 >> 2] = 0.0;
   HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
   i36 = HEAP32[i2 + 24 >> 2] | 0;
   i37 = __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i36) | 0;
   d23 = +HEAPF32[i36 + 276 >> 2];
   d24 = +HEAPF32[i36 + 280 >> 2];
   d28 = +HEAPF32[i36 + 284 >> 2];
   d27 = +HEAPF32[i36 + 288 >> 2];
   if (!i37) {
    i1 = 35;
    break L4;
   }
   d25 = d22;
   d22 = d23 * d23 + d24 * d24 + d28 * d28;
   if (d22 < 9.999999974752427e-7) {
    d22 = d25;
    i1 = 37;
    break L4;
   }
   if (d25 - d22 <= d25 * 1.1920928955078125e-7) {
    i1 = 39;
    break L4;
   }
   HEAPF32[i2 + 4 >> 2] = d23;
   HEAPF32[i2 + 8 >> 2] = d24;
   HEAPF32[i2 + 12 >> 2] = d28;
   HEAPF32[i2 + 16 >> 2] = d27;
   i37 = HEAP32[i2 + 64 >> 2] | 0;
   HEAP32[i2 + 64 >> 2] = i37 + 1;
   if ((i37 | 0) > 1e3) {
    d22 = 0.0;
    i21 = 0;
    d23 = 0.0;
    d24 = 0.0;
    d25 = 0.0;
    break L4;
   }
   if ((HEAP32[HEAP32[i2 + 24 >> 2] >> 2] | 0) == 4) {
    i1 = 42;
    break;
   }
  }
 } while (0);
 if ((i1 | 0) == 22) {
  HEAP32[i2 + 68 >> 2] = 10;
  i1 = 43;
 } else if ((i1 | 0) == 31) {
  HEAP32[i2 + 68 >> 2] = 1;
  i1 = 43;
 } else if ((i1 | 0) == 33) {
  HEAP32[i2 + 68 >> 2] = !(d30 <= 0.0) ? 11 : 2;
  i1 = 43;
 } else if ((i1 | 0) == 35) {
  HEAP32[i2 + 68 >> 2] = 3;
  i1 = 43;
 } else if ((i1 | 0) == 37) {
  HEAPF32[i2 + 4 >> 2] = d23;
  HEAPF32[i2 + 8 >> 2] = d24;
  HEAPF32[i2 + 12 >> 2] = d28;
  HEAPF32[i2 + 16 >> 2] = d27;
  HEAP32[i2 + 68 >> 2] = 6;
  i1 = 43;
 } else if ((i1 | 0) == 39) {
  HEAP32[i2 + 68 >> 2] = 12;
  i1 = 43;
 } else if ((i1 | 0) == 42) {
  HEAP32[i2 + 68 >> 2] = 13;
  d22 = 0.0;
  i21 = 0;
  d23 = 0.0;
  d24 = 0.0;
  d25 = 0.0;
 }
 do if ((i1 | 0) == 43) {
  i37 = HEAP32[i2 + 24 >> 2] | 0;
  __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i37) | 0;
  d23 = +HEAPF32[i37 + 260 >> 2];
  d24 = +HEAPF32[i37 + 264 >> 2];
  d25 = +HEAPF32[i37 + 268 >> 2];
  HEAP32[i10 + 272 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i10 + 276 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i10 + 280 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i10 + 284 >> 2] = HEAP32[i2 + 16 >> 2];
  d29 = +HEAPF32[i2 + 4 >> 2];
  d28 = +HEAPF32[i2 + 8 >> 2];
  d27 = +HEAPF32[i2 + 12 >> 2];
  if (d29 * d29 + d28 * d28 + d27 * d27 < 1.0e-4) HEAP32[i2 + 68 >> 2] = 5;
  if (d29 * d29 + d28 * d28 + d27 * d27 > 1.4210854715202004e-14) {
   d34 = 1.0 / +Math_sqrt(+(d29 * d29 + d28 * d28 + d27 * d27));
   HEAPF32[i10 + 272 >> 2] = d34 * +HEAPF32[i10 + 272 >> 2];
   HEAPF32[i11 >> 2] = d34 * +HEAPF32[i11 >> 2];
   HEAPF32[i12 >> 2] = d34 * +HEAPF32[i12 >> 2];
   d35 = d17 / +Math_sqrt(+d22);
   HEAP32[i2 + 60 >> 2] = 1;
   d22 = 1.0 / d34 - d18;
   i21 = 1;
   d23 = d35 * d29 + d23;
   d24 = d35 * d28 + d24;
   d25 = d35 * d27 + d25;
   break;
  } else {
   HEAP32[i2 + 60 >> 2] = 2;
   d22 = 0.0;
   i21 = 0;
   break;
  }
 } while (0);
 if (((HEAP32[i2 + 72 >> 2] | 0) != 0 ? (HEAP32[i2 + 20 >> 2] | 0) != 0 : 0) ? (HEAP32[i2 + 68 >> 2] | 0) != 0 : 0) i36 = d18 + d22 < .01; else i36 = 0;
 i26 = i21 ^ 1;
 do if (i36 | i26 ? (i19 = HEAP32[i2 + 20 >> 2] | 0, (i19 | 0) != 0) : 0) {
  HEAP32[3342] = (HEAP32[3342] | 0) + 1;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  HEAP32[i2 + 16 >> 2] = 0;
  if (!(FUNCTION_TABLE_iiiiiiiiiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] & 3](i19, HEAP32[i2 + 24 >> 2] | 0, HEAP32[i2 + 28 >> 2] | 0, HEAP32[i2 + 32 >> 2] | 0, i10 + 208 | 0, i10 + 144 | 0, i2 + 4 | 0, i10 + 64 | 0, i10 + 48 | 0, i20) | 0)) {
   d31 = +HEAPF32[i2 + 4 >> 2];
   d30 = +HEAPF32[i2 + 8 >> 2];
   d27 = +HEAPF32[i2 + 12 >> 2];
   if (!(d31 * d31 + d30 * d30 + d27 * d27 > 0.0)) {
    i1 = 66;
    break;
   }
   d32 = +HEAPF32[i10 + 48 >> 2];
   d33 = +HEAPF32[i10 + 64 >> 2] - d32;
   d29 = +HEAPF32[i10 + 52 >> 2];
   d34 = +HEAPF32[i10 + 68 >> 2] - d29;
   d28 = +HEAPF32[i10 + 56 >> 2];
   d35 = +HEAPF32[i10 + 72 >> 2] - d28;
   d18 = +Math_sqrt(+(d33 * d33 + d34 * d34 + d35 * d35)) - d18;
   if (d18 < d22 | i26) {
    HEAP32[i10 + 272 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i10 + 276 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i10 + 280 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i10 + 284 >> 2] = HEAP32[i2 + 16 >> 2];
    d25 = +HEAPF32[i10 + 272 >> 2];
    d24 = +HEAPF32[i11 >> 2];
    d23 = +HEAPF32[i12 >> 2];
    d22 = 1.0 / +Math_sqrt(+(d25 * d25 + d24 * d24 + d23 * d23));
    HEAPF32[i10 + 272 >> 2] = d25 * d22;
    HEAPF32[i11 >> 2] = d24 * d22;
    HEAPF32[i12 >> 2] = d23 * d22;
    HEAP32[i2 + 60 >> 2] = 6;
    d22 = d18;
    d23 = d17 * d31 + d32;
    d24 = d17 * d30 + d29;
    d25 = d17 * d27 + d28;
    break;
   }
   HEAP32[i2 + 60 >> 2] = 5;
   if (i21) break;
   STACKTOP = i10;
   return;
  }
  d27 = +HEAPF32[i10 + 48 >> 2];
  d34 = +HEAPF32[i10 + 64 >> 2];
  d18 = +HEAPF32[i10 + 52 >> 2];
  d33 = +HEAPF32[i10 + 68 >> 2];
  d17 = +HEAPF32[i10 + 56 >> 2];
  d32 = +HEAPF32[i10 + 72 >> 2];
  if (!((d27 - d34) * (d27 - d34) + (d18 - d33) * (d18 - d33) + (d17 - d32) * (d17 - d32) <= 1.4210854715202004e-14)) {
   d30 = d17 - d32;
   d29 = d18 - d33;
   d31 = d27 - d34;
   d28 = 0.0;
   d35 = (d27 - d34) * (d27 - d34) + (d18 - d33) * (d18 - d33) + (d17 - d32) * (d17 - d32);
  } else {
   d39 = +HEAPF32[i2 + 4 >> 2];
   d38 = +HEAPF32[i2 + 8 >> 2];
   d35 = +HEAPF32[i2 + 12 >> 2];
   d30 = d35;
   d29 = d38;
   d31 = d39;
   d28 = +HEAPF32[i2 + 16 >> 2];
   d35 = d39 * d39 + d38 * d38 + d35 * d35;
  }
  if (!(d35 > 1.4210854715202004e-14)) {
   HEAP32[i2 + 60 >> 2] = 9;
   if (i21) break;
   STACKTOP = i10;
   return;
  }
  d35 = 1.0 / +Math_sqrt(+d35);
  d32 = -+Math_sqrt(+((d34 - d27) * (d34 - d27) + (d33 - d18) * (d33 - d18) + (d32 - d17) * (d32 - d17)));
  if (d22 > d32 | i26) {
   HEAPF32[i10 + 272 >> 2] = d31 * d35;
   HEAPF32[i11 >> 2] = d29 * d35;
   HEAPF32[i12 >> 2] = d30 * d35;
   HEAPF32[i10 + 284 >> 2] = d28;
   HEAP32[i2 + 60 >> 2] = 3;
   d22 = d32;
   d23 = d27;
   d24 = d18;
   d25 = d17;
   break;
  }
  HEAP32[i2 + 60 >> 2] = 8;
  if (!i21) {
   STACKTOP = i10;
   return;
  }
 } else i1 = 66; while (0);
 if ((i1 | 0) == 66) if (!i21) {
  STACKTOP = i10;
  return;
 }
 if (!(d22 < 0.0) ? !(d22 * d22 < +HEAPF32[i4 + 128 >> 2]) : 0) {
  STACKTOP = i10;
  return;
 }
 if ((HEAP32[i2 + 76 >> 2] | 0) != 0 ? (i37 = HEAP32[i2 + 28 >> 2] | 0, FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i37 >> 2] | 0) + 8 >> 2] & 127](i37, i10 + 208 | 0, i10 + 32 | 0, i10 + 16 | 0), d35 = (+HEAPF32[i10 + 16 >> 2] + +HEAPF32[i10 + 32 >> 2]) * .5, d38 = (+HEAPF32[i10 + 20 >> 2] + +HEAPF32[i10 + 36 >> 2]) * .5, d39 = (+HEAPF32[i10 + 24 >> 2] + +HEAPF32[i10 + 40 >> 2]) * .5, i37 = HEAP32[i2 + 32 >> 2] | 0, FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i37 >> 2] | 0) + 8 >> 2] & 127](i37, i10 + 144 | 0, i10 + 32 | 0, i10 + 16 | 0), d5 = +HEAPF32[i10 + 272 >> 2], d6 = +HEAPF32[i11 >> 2], d7 = +HEAPF32[i12 >> 2], (d35 - (+HEAPF32[i10 + 32 >> 2] + +HEAPF32[i10 + 16 >> 2]) * .5) * d5 + (d38 - (+HEAPF32[i10 + 36 >> 2] + +HEAPF32[i10 + 20 >> 2]) * .5) * d6 + (d39 - (+HEAPF32[i10 + 40 >> 2] + +HEAPF32[i10 + 24 >> 2]) * .5) * d7 < 0.0) : 0) {
  HEAPF32[i10 + 272 >> 2] = d5 * -1.0;
  HEAPF32[i11 >> 2] = d6 * -1.0;
  HEAPF32[i12 >> 2] = d7 * -1.0;
 }
 HEAP32[i2 + 4 >> 2] = HEAP32[i10 + 272 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i10 + 276 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i10 + 280 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i10 + 284 >> 2];
 HEAPF32[i2 + 56 >> 2] = d22;
 i37 = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0;
 HEAPF32[i10 >> 2] = (d13 + d14) * .5 + d23;
 HEAPF32[i10 + 4 >> 2] = (d15 + d16) * .5 + d24;
 HEAPF32[i10 + 8 >> 2] = (d8 + d9) * .5 + d25;
 HEAPF32[i10 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiid[i37 & 15](i3, i10 + 272 | 0, i10, d22);
 STACKTOP = i10;
 return;
}
function __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i1, i41, i28, i4, i5) {
 i1 = i1 | 0;
 i41 = i41 | 0;
 i28 = i28 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, d3 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, i29 = 0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 HEAPF32[i1 + 504 >> 2] = 0.0;
 HEAPF32[i1 + 500 >> 2] = 0.0;
 HEAP8[i1 + 525 >> 0] = 0;
 HEAP8[i1 + 526 >> 0] = 0;
 if ((HEAP8[i1 + 552 >> 0] | 0) != 0 ? (HEAP8[i1 + 527 >> 0] | 0) == 0 : 0) {
  d52 = +HEAPF32[i1 + 556 >> 2];
  d45 = +HEAPF32[i1 + 560 >> 2];
  d53 = +HEAPF32[i1 + 564 >> 2];
  d46 = +HEAPF32[i1 + 568 >> 2];
  d48 = d52 * (2.0 / (d52 * d52 + d45 * d45 + d53 * d53 + d46 * d46));
  d55 = d45 * (2.0 / (d52 * d52 + d45 * d45 + d53 * d53 + d46 * d46));
  d49 = d53 * (2.0 / (d52 * d52 + d45 * d45 + d53 * d53 + d46 * d46));
  __ZNK11btTransformmlERKS_(i2 + 208 | 0, i41, i1 + 300 | 0);
  __ZNK11btTransformmlERKS_(i2 + 144 | 0, i28, i1 + 364 | 0);
  d27 = +HEAPF32[i2 + 144 >> 2];
  d30 = +HEAPF32[i2 + 148 >> 2];
  d7 = +HEAPF32[i2 + 152 >> 2];
  d38 = (1.0 - (d45 * d55 + d53 * d49)) * d27 + (d52 * d55 + d46 * d49) * d30 + (d52 * d49 - d46 * d55) * d7;
  d39 = (d52 * d55 - d46 * d49) * d27 + (1.0 - (d52 * d48 + d53 * d49)) * d30 + (d45 * d49 + d46 * d48) * d7;
  d40 = (d52 * d49 + d46 * d55) * d27 + (d45 * d49 - d46 * d48) * d30 + (1.0 - (d52 * d48 + d45 * d55)) * d7;
  d31 = +HEAPF32[i2 + 160 >> 2];
  d32 = +HEAPF32[i2 + 164 >> 2];
  d6 = +HEAPF32[i2 + 168 >> 2];
  d42 = (1.0 - (d45 * d55 + d53 * d49)) * d31 + (d52 * d55 + d46 * d49) * d32 + (d52 * d49 - d46 * d55) * d6;
  d43 = (d52 * d55 - d46 * d49) * d31 + (1.0 - (d52 * d48 + d53 * d49)) * d32 + (d45 * d49 + d46 * d48) * d6;
  d44 = (d52 * d49 + d46 * d55) * d31 + (d45 * d49 - d46 * d48) * d32 + (1.0 - (d52 * d48 + d45 * d55)) * d6;
  d33 = +HEAPF32[i2 + 176 >> 2];
  d34 = +HEAPF32[i2 + 180 >> 2];
  d35 = +HEAPF32[i2 + 184 >> 2];
  d51 = (1.0 - (d45 * d55 + d53 * d49)) * d33 + (d52 * d55 + d46 * d49) * d34 + (d52 * d49 - d46 * d55) * d35;
  d53 = (d52 * d55 - d46 * d49) * d33 + (1.0 - (d52 * d48 + d53 * d49)) * d34 + (d45 * d49 + d46 * d48) * d35;
  d55 = (d52 * d49 + d46 * d55) * d33 + (d45 * d49 - d46 * d48) * d34 + (1.0 - (d52 * d48 + d45 * d55)) * d35;
  d45 = +HEAPF32[i2 + 208 >> 2];
  d48 = +HEAPF32[i2 + 224 >> 2];
  d52 = +HEAPF32[i2 + 240 >> 2];
  d46 = +HEAPF32[i2 + 212 >> 2];
  d49 = +HEAPF32[i2 + 228 >> 2];
  d54 = +HEAPF32[i2 + 244 >> 2];
  d47 = +HEAPF32[i2 + 216 >> 2];
  d50 = +HEAPF32[i2 + 232 >> 2];
  d56 = +HEAPF32[i2 + 248 >> 2];
  d36 = -+HEAPF32[i2 + 256 >> 2];
  d37 = -+HEAPF32[i2 + 260 >> 2];
  d3 = -+HEAPF32[i2 + 264 >> 2];
  d7 = d27 * 0.0 + d30 * 0.0 + d7 * 0.0 + +HEAPF32[i2 + 192 >> 2] + (d40 * (d47 * d36 + d50 * d37 + d56 * d3) + (d38 * (d45 * d36 + d48 * d37 + d52 * d3) + d39 * (d46 * d36 + d49 * d37 + d54 * d3)));
  d6 = d31 * 0.0 + d32 * 0.0 + d6 * 0.0 + +HEAPF32[i2 + 196 >> 2] + (d44 * (d47 * d36 + d50 * d37 + d56 * d3) + (d42 * (d45 * d36 + d48 * d37 + d52 * d3) + d43 * (d46 * d36 + d49 * d37 + d54 * d3)));
  d3 = d33 * 0.0 + d34 * 0.0 + d35 * 0.0 + +HEAPF32[i2 + 200 >> 2] + (d55 * (d47 * d36 + d50 * d37 + d56 * d3) + (d51 * (d45 * d36 + d48 * d37 + d52 * d3) + d53 * (d46 * d36 + d49 * d37 + d54 * d3)));
  HEAPF32[i2 + 80 >> 2] = d38 * d45 + d39 * d46 + d40 * d47;
  HEAPF32[i2 + 84 >> 2] = d38 * d48 + d39 * d49 + d40 * d50;
  HEAPF32[i2 + 88 >> 2] = d38 * d52 + d39 * d54 + d40 * d56;
  HEAPF32[i2 + 92 >> 2] = 0.0;
  HEAPF32[i2 + 96 >> 2] = d42 * d45 + d43 * d46 + d44 * d47;
  HEAPF32[i2 + 100 >> 2] = d42 * d48 + d43 * d49 + d44 * d50;
  HEAPF32[i2 + 104 >> 2] = d42 * d52 + d43 * d54 + d44 * d56;
  HEAPF32[i2 + 108 >> 2] = 0.0;
  HEAPF32[i2 + 112 >> 2] = d51 * d45 + d53 * d46 + d55 * d47;
  HEAPF32[i2 + 116 >> 2] = d51 * d48 + d53 * d49 + d55 * d50;
  HEAPF32[i2 + 120 >> 2] = d51 * d52 + d53 * d54 + d55 * d56;
  HEAPF32[i2 + 124 >> 2] = 0.0;
  HEAPF32[i2 + 128 >> 2] = d7;
  HEAPF32[i2 + 132 >> 2] = d6;
  HEAPF32[i2 + 136 >> 2] = d3;
  HEAPF32[i2 + 140 >> 2] = 0.0;
  __ZNK11btMatrix3x311getRotationER12btQuaternion(i2 + 80 | 0, i2 + 64 | 0);
  d3 = +HEAPF32[i2 + 64 >> 2];
  d6 = +HEAPF32[i2 + 68 >> 2];
  d7 = +HEAPF32[i2 + 72 >> 2];
  if (+Math_abs(+(d3 * d3 + d6 * d6 + d7 * d7)) < 1.1920928955078125e-7) {
   STACKTOP = i2;
   return;
  }
  HEAPF32[i1 + 472 >> 2] = 0.0;
  d56 = 1.0 / +Math_sqrt(+(d3 * d3 + d6 * d6 + d7 * d7));
  HEAPF32[i1 + 460 >> 2] = d3 * d56;
  HEAPF32[i1 + 464 >> 2] = d6 * d56;
  HEAPF32[i1 + 468 >> 2] = d7 * d56;
  d56 = +HEAPF32[i2 + 76 >> 2];
  d56 = d56 < -1.0 ? -1.0 : d56;
  d56 = +Math_acos(+(d56 > 1.0 ? 1.0 : d56)) * 2.0;
  HEAPF32[i1 + 504 >> 2] = d56;
  if (+Math_abs(+d56) < 1.1920928955078125e-7) {
   STACKTOP = i2;
   return;
  }
  HEAP8[i1 + 526 >> 0] = 1;
  STACKTOP = i2;
  return;
 }
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i41, i2 + 48 | 0);
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i1 + 300 | 0, i2 + 32 | 0);
 d21 = +HEAPF32[i2 + 60 >> 2];
 d17 = +HEAPF32[i2 + 32 >> 2];
 d23 = +HEAPF32[i2 + 48 >> 2];
 d19 = +HEAPF32[i2 + 44 >> 2];
 d20 = +HEAPF32[i2 + 52 >> 2];
 d15 = +HEAPF32[i2 + 40 >> 2];
 d18 = +HEAPF32[i2 + 56 >> 2];
 d22 = +HEAPF32[i2 + 36 >> 2];
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i28, i2 + 16 | 0);
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i1 + 364 | 0, i2);
 d10 = +HEAPF32[i2 + 28 >> 2];
 d6 = +HEAPF32[i2 >> 2];
 d12 = +HEAPF32[i2 + 16 >> 2];
 d8 = +HEAPF32[i2 + 12 >> 2];
 d9 = +HEAPF32[i2 + 20 >> 2];
 d13 = +HEAPF32[i2 + 8 >> 2];
 d7 = +HEAPF32[i2 + 24 >> 2];
 d11 = +HEAPF32[i2 + 4 >> 2];
 d3 = -(d10 * d6 + d12 * d8 + d9 * d13 - d7 * d11);
 d16 = -(d6 * d7 + (d8 * d9 + d10 * d11) - d12 * d13);
 d14 = -(d10 * d13 + d8 * d7 + d12 * d11 - d6 * d9);
 d33 = (d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22) * (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) + (d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d3 + (d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20) * d16 - (d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15) * d14;
 d35 = (d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22) * d14 + ((d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15) * (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) + (d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d16) - (d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20) * d3;
 d27 = (d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15) * d3 + ((d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20) * (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) + (d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d14) - (d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22) * d16;
 d36 = (d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) - (d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22) * d3 - (d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15) * d16 - (d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20) * d14;
 d24 = -d33 - d35 * 0.0 - d27 * 0.0;
 d26 = (d27 + d36 * 0.0 - d33 * 0.0) * -d27 + (d36 * (d36 + d35 * 0.0 - d27 * 0.0) + d24 * -d33) - (d36 * 0.0 + d33 * 0.0 - d35) * -d35;
 d32 = (d36 * 0.0 + d33 * 0.0 - d35) * -d33 + (d36 * (d27 + d36 * 0.0 - d33 * 0.0) + d24 * -d35) - (d36 + d35 * 0.0 - d27 * 0.0) * -d27;
 d24 = (d36 + d35 * 0.0 - d27 * 0.0) * -d35 + (d36 * (d36 * 0.0 + d33 * 0.0 - d35) + d24 * -d27) - (d27 + d36 * 0.0 - d33 * 0.0) * -d33;
 d31 = 1.0 / +Math_sqrt(+(d24 * d24 + (d26 * d26 + d32 * d32)));
 if (d31 * d24 * 0.0 + (d31 * d32 * 0.0 + d31 * d26) < -.9999998807907104) if (+Math_abs(0.0) > .7071067690849304) {
  d25 = 0.0;
  d24 = nan;
  d34 = nan;
  d26 = 0.0;
 } else {
  d25 = -0.0;
  d24 = 1.0;
  d34 = 0.0;
  d26 = 0.0;
 } else {
  d56 = +Math_sqrt(+((d31 * d24 * 0.0 + (d31 * d32 * 0.0 + d31 * d26) + 1.0) * 2.0));
  d25 = (d31 * d24 * 0.0 - d31 * d32 * 0.0) * (1.0 / d56);
  d24 = (d31 * d26 * 0.0 - d31 * d24) * (1.0 / d56);
  d34 = (d31 * d32 - d31 * d26 * 0.0) * (1.0 / d56);
  d26 = d56 * .5;
 }
 d37 = 1.0 / +Math_sqrt(+(d26 * d26 + (d34 * d34 + (d24 * d24 + d25 * d25))));
 d31 = d25 * d37;
 d32 = d24 * d37;
 d34 = d34 * d37;
 d37 = d26 * d37;
 d56 = 1.0 / +Math_sqrt(+((d36 * d37 - d33 * -d31 - d35 * -d32 - d27 * -d34) * (d36 * d37 - d33 * -d31 - d35 * -d32 - d27 * -d34) + ((d35 * -d31 + (d27 * d37 + d36 * -d34) - d33 * -d32) * (d35 * -d31 + (d27 * d37 + d36 * -d34) - d33 * -d32) + ((d27 * -d32 + (d33 * d37 + d36 * -d31) - d35 * -d34) * (d27 * -d32 + (d33 * d37 + d36 * -d31) - d35 * -d34) + (d33 * -d34 + (d35 * d37 + d36 * -d32) - d27 * -d31) * (d33 * -d34 + (d35 * d37 + d36 * -d32) - d27 * -d31)))));
 d26 = d56 * (d27 * -d32 + (d33 * d37 + d36 * -d31) - d35 * -d34);
 d25 = d56 * (d33 * -d34 + (d35 * d37 + d36 * -d32) - d27 * -d31);
 d24 = d56 * (d35 * -d31 + (d27 * d37 + d36 * -d34) - d33 * -d32);
 d27 = d56 * (d36 * d37 - d33 * -d31 - d35 * -d32 - d27 * -d34);
 d33 = +HEAPF32[i1 + 444 >> 2];
 d35 = +HEAPF32[i1 + 456 >> 2];
 if (d33 >= d35 ? (d30 = +HEAPF32[i1 + 448 >> 2], d30 >= d35) : 0) {
  d35 = d37 < -1.0 ? -1.0 : d37;
  d35 = +Math_acos(+(d35 > 1.0 ? 1.0 : d35)) * 2.0;
  if (d35 > 1.1920928955078125e-7) {
   d37 = 1.0 / +Math_sqrt(+(d34 * d34 + (d31 * d31 + d32 * d32)));
   if (+Math_abs(+(d32 * d37)) > 1.1920928955078125e-7) {
    d36 = +Math_sqrt(+((d34 * d37 * d34 * d37 / (d32 * d37 * d32 * d37) + 1.0) / (1.0 / (d30 * d30) + d34 * d37 * d34 * d37 / (d32 * d37 * d32 * d37) / (d33 * d33))));
    d32 = d32 * d37;
    d34 = d34 * d37;
    d31 = d31 * d37;
   } else {
    d36 = d33;
    d32 = d32 * d37;
    d34 = d34 * d37;
    d31 = d31 * d37;
   }
  } else {
   d36 = 0.0;
   d32 = 0.0;
   d34 = 0.0;
   d31 = 0.0;
  }
  d38 = +HEAPF32[i1 + 428 >> 2];
  d37 = d36 * d38;
  if (d35 > d37) {
   HEAP8[i1 + 526 >> 0] = 1;
   if (d35 < d36 & d38 < .9999998807907104) d36 = (d35 - d37) / (d36 - d37); else d36 = 1.0;
   HEAPF32[i1 + 528 >> 2] = d36;
   HEAPF32[i1 + 504 >> 2] = d35 - d37;
   if (+Math_abs(+d32) > 1.1920928955078125e-7) {
    d30 = +Math_abs(+(d32 * -d34 / d32 * (d30 / d33)));
    if (!(d34 < -0.0)) d30 = -d30;
    d34 = 1.0 / +Math_sqrt(+(d32 * d32 + d31 * d31 + d30 * d30));
    d31 = d31 * d34;
    d32 = d32 * d34;
    d34 = -(d30 * d34);
   }
   d55 = -d31;
   d54 = -d32;
   d53 = -d34;
   d51 = (d6 * d7 + (d8 * d9 + d10 * d11) - d12 * d13) * d53 + (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d55 - (d10 * d13 + d8 * d7 + d12 * d11 - d6 * d9) * d54;
   d56 = (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d54 + (d10 * d13 + d8 * d7 + d12 * d11 - d6 * d9) * d55 - (d10 * d6 + d12 * d8 + d9 * d13 - d7 * d11) * d53;
   d52 = (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d53 + (d10 * d6 + d12 * d8 + d9 * d13 - d7 * d11) * d54 - (d6 * d7 + (d8 * d9 + d10 * d11) - d12 * d13) * d55;
   d53 = -((d10 * d6 + d12 * d8 + d9 * d13 - d7 * d11) * d55) - (d6 * d7 + (d8 * d9 + d10 * d11) - d12 * d13) * d54 - (d10 * d13 + d8 * d7 + d12 * d11 - d6 * d9) * d53;
   d54 = d56 * d14 + ((d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d51 + d53 * d3) - d52 * d16;
   d55 = d52 * d3 + ((d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d56 + d53 * d16) - d51 * d14;
   d56 = d51 * d16 + ((d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d52 + d53 * d14) - d56 * d3;
   HEAPF32[i1 + 460 >> 2] = d54;
   HEAPF32[i1 + 464 >> 2] = d55;
   HEAPF32[i1 + 468 >> 2] = d56;
   HEAPF32[i1 + 472 >> 2] = 0.0;
   HEAP32[i1 + 536 >> 2] = 0;
   HEAP32[i1 + 540 >> 2] = 0;
   HEAP32[i1 + 544 >> 2] = 0;
   HEAP32[i1 + 548 >> 2] = 0;
   HEAPF32[i1 + 492 >> 2] = 1.0 / (d54 * (+HEAPF32[i4 >> 2] * d54 + +HEAPF32[i4 + 16 >> 2] * d55 + +HEAPF32[i4 + 32 >> 2] * d56) + d55 * (d54 * +HEAPF32[i4 + 4 >> 2] + d55 * +HEAPF32[i4 + 20 >> 2] + d56 * +HEAPF32[i4 + 36 >> 2]) + d56 * (d54 * +HEAPF32[i4 + 8 >> 2] + d55 * +HEAPF32[i4 + 24 >> 2] + d56 * +HEAPF32[i4 + 40 >> 2]) + (d54 * (d54 * +HEAPF32[i5 >> 2] + d55 * +HEAPF32[i5 + 16 >> 2] + d56 * +HEAPF32[i5 + 32 >> 2]) + d55 * (d54 * +HEAPF32[i5 + 4 >> 2] + d55 * +HEAPF32[i5 + 20 >> 2] + d56 * +HEAPF32[i5 + 36 >> 2]) + d56 * (d54 * +HEAPF32[i5 + 8 >> 2] + d55 * +HEAPF32[i5 + 24 >> 2] + d56 * +HEAPF32[i5 + 40 >> 2])));
  }
 } else i29 = 23;
 L34 : do if ((i29 | 0) == 23) {
  d34 = +HEAPF32[i1 + 300 >> 2];
  d36 = +HEAPF32[i1 + 316 >> 2];
  d31 = +HEAPF32[i1 + 332 >> 2];
  d40 = +HEAPF32[i41 >> 2];
  d39 = +HEAPF32[i41 + 4 >> 2];
  d38 = +HEAPF32[i41 + 8 >> 2];
  d33 = +HEAPF32[i41 + 16 >> 2];
  d32 = +HEAPF32[i41 + 20 >> 2];
  d30 = +HEAPF32[i41 + 24 >> 2];
  d35 = +HEAPF32[i41 + 32 >> 2];
  d37 = +HEAPF32[i41 + 36 >> 2];
  d42 = +HEAPF32[i41 + 40 >> 2];
  d47 = +HEAPF32[i1 + 304 >> 2];
  d46 = +HEAPF32[i1 + 320 >> 2];
  d45 = +HEAPF32[i1 + 336 >> 2];
  d50 = +HEAPF32[i1 + 308 >> 2];
  d49 = +HEAPF32[i1 + 324 >> 2];
  d48 = +HEAPF32[i1 + 340 >> 2];
  d53 = +HEAPF32[i1 + 364 >> 2];
  d55 = +HEAPF32[i1 + 380 >> 2];
  d51 = +HEAPF32[i1 + 396 >> 2];
  d43 = d53 * +HEAPF32[i28 >> 2] + d55 * +HEAPF32[i28 + 4 >> 2] + d51 * +HEAPF32[i28 + 8 >> 2];
  d44 = d53 * +HEAPF32[i28 + 16 >> 2] + d55 * +HEAPF32[i28 + 20 >> 2] + d51 * +HEAPF32[i28 + 24 >> 2];
  d51 = d53 * +HEAPF32[i28 + 32 >> 2] + d55 * +HEAPF32[i28 + 36 >> 2] + d51 * +HEAPF32[i28 + 40 >> 2];
  d55 = (d34 * d40 + d36 * d39 + d31 * d38) * d43 + (d34 * d33 + d36 * d32 + d31 * d30) * d44 + (d34 * d35 + d36 * d37 + d31 * d42) * d51;
  d53 = (d40 * d47 + d39 * d46 + d38 * d45) * d43 + (d33 * d47 + d32 * d46 + d30 * d45) * d44 + (d35 * d47 + d37 * d46 + d42 * d45) * d51;
  d52 = (d40 * d50 + d39 * d49 + d38 * d48) * d43 + (d33 * d50 + d32 * d49 + d30 * d48) * d44 + (d35 * d50 + d37 * d49 + d42 * d48) * d51;
  d54 = +HEAPF32[i1 + 444 >> 2];
  d56 = +HEAPF32[i1 + 456 >> 2];
  do if (d54 < d56) {
   d54 = +HEAPF32[i1 + 448 >> 2];
   if (d54 < d56) {
    if (+Math_abs(+d53) < 1.1920928955078125e-7 ? +Math_abs(+d52) < 1.1920928955078125e-7 : 0) break L34;
    HEAP8[i1 + 526 >> 0] = 1;
    HEAPF32[i1 + 460 >> 2] = -((d34 * d35 + d36 * d37 + d31 * d42) * d44 - (d34 * d33 + d36 * d32 + d31 * d30) * d51);
    HEAPF32[i1 + 464 >> 2] = -((d34 * d40 + d36 * d39 + d31 * d38) * d51 - (d34 * d35 + d36 * d37 + d31 * d42) * d43);
    HEAPF32[i1 + 468 >> 2] = -((d34 * d33 + d36 * d32 + d31 * d30) * d43 - (d34 * d40 + d36 * d39 + d31 * d38) * d44);
    HEAPF32[i1 + 472 >> 2] = 0.0;
    break L34;
   }
   if (+Math_abs(+d55) < 1.1920928955078125e-7 ? +Math_abs(+d52) < 1.1920928955078125e-7 : 0) break;
   HEAP8[i1 + 526 >> 0] = 1;
   if (d54 >= d56) {
    d53 = +Math_atan2(+d52, +d55);
    if (d53 > d54) {
     d55 = +Math_cos(+d54);
     d53 = 0.0;
     d52 = +Math_sin(+d54);
     break;
    }
    if (d53 < -d54) {
     d55 = +Math_cos(+d54);
     d53 = 0.0;
     d52 = -+Math_sin(+d54);
    } else d53 = 0.0;
   }
  } else {
   if (+Math_abs(+d55) < 1.1920928955078125e-7 ? +Math_abs(+d53) < 1.1920928955078125e-7 : 0) break;
   HEAP8[i1 + 526 >> 0] = 1;
   if (d54 >= d56) {
    d52 = +Math_atan2(+d53, +d55);
    if (d52 > d54) {
     d55 = +Math_cos(+d54);
     d53 = +Math_sin(+d54);
     d52 = 0.0;
     break;
    }
    if (d52 < -d54) {
     d55 = +Math_cos(+d54);
     d53 = -+Math_sin(+d54);
     d52 = 0.0;
    } else d52 = 0.0;
   }
  } while (0);
  d54 = (d40 * d50 + d39 * d49 + d38 * d48) * d52 + ((d40 * d47 + d39 * d46 + d38 * d45) * d53 + (d34 * d40 + d36 * d39 + d31 * d38) * d55);
  d40 = (d33 * d50 + d32 * d49 + d30 * d48) * d52 + ((d33 * d47 + d32 * d46 + d30 * d45) * d53 + (d34 * d33 + d36 * d32 + d31 * d30) * d55);
  d53 = (d35 * d50 + d37 * d49 + d42 * d48) * d52 + ((d35 * d47 + d37 * d46 + d42 * d45) * d53 + (d34 * d35 + d36 * d37 + d31 * d42) * d55);
  d55 = 1.0 / +Math_sqrt(+(d53 * d53 + (d54 * d54 + d40 * d40)));
  HEAPF32[i1 + 472 >> 2] = 0.0;
  d56 = +Math_sqrt(+((d44 * d55 * d53 - d51 * d55 * d40) * (d44 * d55 * d53 - d51 * d55 * d40) + (d51 * d55 * d54 - d43 * d55 * d53) * (d51 * d55 * d54 - d43 * d55 * d53) + (d43 * d55 * d40 - d44 * d55 * d54) * (d43 * d55 * d40 - d44 * d55 * d54)));
  HEAPF32[i1 + 504 >> 2] = d56;
  HEAPF32[i1 + 460 >> 2] = -((d44 * d55 * d53 - d51 * d55 * d40) * (1.0 / d56));
  HEAPF32[i1 + 464 >> 2] = -((d51 * d55 * d54 - d43 * d55 * d53) * (1.0 / d56));
  HEAPF32[i1 + 468 >> 2] = -((d43 * d55 * d40 - d44 * d55 * d54) * (1.0 / d56));
 } while (0);
 d30 = +HEAPF32[i1 + 452 >> 2];
 if (!(d30 >= 0.0)) {
  HEAPF32[i1 + 512 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 }
 d31 = d27 < -1.0 ? -1.0 : d27;
 d31 = +Math_acos(+(d31 > 1.0 ? 1.0 : d31)) * 2.0;
 if (d31 > 3.1415927410125732) {
  d27 = d27 > 1.0 ? -1.0 : -d27;
  d27 = +Math_acos(+(d27 > 1.0 ? 1.0 : d27)) * 2.0;
  d26 = -d26;
  d25 = -d25;
  d24 = -d24;
 } else d27 = d31;
 HEAPF32[i1 + 512 >> 2] = d27;
 if (d27 > 1.1920928955078125e-7) {
  d56 = 1.0 / +Math_sqrt(+(d24 * d24 + (d25 * d25 + d26 * d26)));
  d26 = d26 * d56;
  d25 = d25 * d56;
  d24 = d24 * d56;
 }
 d32 = +HEAPF32[i1 + 428 >> 2];
 if (d27 > d30 * d32) {
  HEAP8[i1 + 525 >> 0] = 1;
  d31 = d27 - d30 * d32;
  if (d27 < d30 & d32 < .9999998807907104) d27 = d31 / (d30 - d30 * d32); else d27 = 1.0;
  HEAPF32[i1 + 532 >> 2] = d27;
  HEAPF32[i1 + 508 >> 2] = d31;
  d55 = -d26;
  d54 = -d25;
  d53 = -d24;
  d51 = (d6 * d7 + (d8 * d9 + d10 * d11) - d12 * d13) * d53 + (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d55 - (d10 * d13 + d8 * d7 + d12 * d11 - d6 * d9) * d54;
  d56 = (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d54 + (d10 * d13 + d8 * d7 + d12 * d11 - d6 * d9) * d55 - (d10 * d6 + d12 * d8 + d9 * d13 - d7 * d11) * d53;
  d52 = (d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d53 + (d10 * d6 + d12 * d8 + d9 * d13 - d7 * d11) * d54 - (d6 * d7 + (d8 * d9 + d10 * d11) - d12 * d13) * d55;
  d53 = -((d10 * d6 + d12 * d8 + d9 * d13 - d7 * d11) * d55) - (d6 * d7 + (d8 * d9 + d10 * d11) - d12 * d13) * d54 - (d10 * d13 + d8 * d7 + d12 * d11 - d6 * d9) * d53;
  d54 = d56 * d14 + ((d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d51 + d53 * d3) - d52 * d16;
  d55 = d52 * d3 + ((d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d56 + d53 * d16) - d51 * d14;
  d56 = d51 * d16 + ((d10 * d8 - d6 * d12 - d9 * d11 - d13 * d7) * d52 + d53 * d14) - d56 * d3;
  HEAPF32[i1 + 476 >> 2] = d54;
  HEAPF32[i1 + 480 >> 2] = d55;
  HEAPF32[i1 + 484 >> 2] = d56;
  HEAPF32[i1 + 488 >> 2] = 0.0;
  HEAPF32[i1 + 496 >> 2] = 1.0 / (d54 * (+HEAPF32[i4 >> 2] * d54 + +HEAPF32[i4 + 16 >> 2] * d55 + +HEAPF32[i4 + 32 >> 2] * d56) + d55 * (d54 * +HEAPF32[i4 + 4 >> 2] + d55 * +HEAPF32[i4 + 20 >> 2] + d56 * +HEAPF32[i4 + 36 >> 2]) + d56 * (d54 * +HEAPF32[i4 + 8 >> 2] + d55 * +HEAPF32[i4 + 24 >> 2] + d56 * +HEAPF32[i4 + 40 >> 2]) + (d54 * (d54 * +HEAPF32[i5 >> 2] + d55 * +HEAPF32[i5 + 16 >> 2] + d56 * +HEAPF32[i5 + 32 >> 2]) + d55 * (d54 * +HEAPF32[i5 + 4 >> 2] + d55 * +HEAPF32[i5 + 20 >> 2] + d56 * +HEAPF32[i5 + 36 >> 2]) + d56 * (d54 * +HEAPF32[i5 + 8 >> 2] + d55 * +HEAPF32[i5 + 24 >> 2] + d56 * +HEAPF32[i5 + 40 >> 2])));
 }
 if ((HEAP8[i1 + 526 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 d51 = -d26;
 d56 = -d25;
 d53 = -d24;
 d50 = (d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15) * d53 + (d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d51 - (d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20) * d56;
 d55 = (d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d56 + (d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20) * d51 - (d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22) * d53;
 d52 = (d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d53 + (d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22) * d56 - (d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15) * d51;
 d53 = -((d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22) * d51) - (d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15) * d56 - (d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20) * d53;
 d56 = -(d21 * d17 + d23 * d19 + d20 * d15 - d18 * d22);
 d51 = -(d17 * d18 + (d19 * d20 + d21 * d22) - d23 * d15);
 d54 = -(d21 * d15 + d19 * d18 + d23 * d22 - d17 * d20);
 HEAPF32[i1 + 536 >> 2] = d55 * d54 + ((d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d50 + d53 * d56) - d52 * d51;
 HEAPF32[i1 + 540 >> 2] = d52 * d56 + ((d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d55 + d53 * d51) - d50 * d54;
 HEAPF32[i1 + 544 >> 2] = d50 * d51 + ((d21 * d19 - d17 * d23 - d20 * d22 - d15 * d18) * d52 + d53 * d54) - d55 * d56;
 HEAPF32[i1 + 548 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN14btQuantizedBvh9buildTreeEii(i2, i7, i5) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, i25 = 0, d26 = 0.0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, d33 = 0.0, d34 = 0.0, d35 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i6 = HEAP32[i2 + 56 >> 2] | 0;
 if ((i5 - i7 | 0) == 1) {
  if ((HEAP8[i2 + 60 >> 0] | 0) == 0) {
   i25 = (HEAP32[i2 + 96 >> 2] | 0) + (i6 << 6) + 0 | 0;
   i16 = (HEAP32[i2 + 76 >> 2] | 0) + (i7 << 6) + 0 | 0;
   i12 = i25 + 64 | 0;
   do {
    HEAP32[i25 >> 2] = HEAP32[i16 >> 2];
    i25 = i25 + 4 | 0;
    i16 = i16 + 4 | 0;
   } while ((i25 | 0) < (i12 | 0));
  } else {
   i32 = (HEAP32[i2 + 136 >> 2] | 0) + (i6 << 4) | 0;
   i31 = (HEAP32[i2 + 116 >> 2] | 0) + (i7 << 4) | 0;
   HEAP32[i32 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
   HEAP32[i32 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
   HEAP32[i32 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
   HEAP32[i32 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
  }
  HEAP32[i2 + 56 >> 2] = (HEAP32[i2 + 56 >> 2] | 0) + 1;
  STACKTOP = i1;
  return;
 }
 if ((i7 | 0) < (i5 | 0)) {
  i9 = (HEAP8[i2 + 60 >> 0] | 0) == 0;
  d14 = 0.0;
  d15 = 0.0;
  d21 = 0.0;
  i10 = i7;
  do {
   if (i9) {
    i32 = HEAP32[i2 + 76 >> 2] | 0;
    d19 = +HEAPF32[i32 + (i10 << 6) >> 2];
    d20 = +HEAPF32[i32 + (i10 << 6) + 16 >> 2];
    d17 = +HEAPF32[i32 + (i10 << 6) + 4 >> 2];
    d18 = +HEAPF32[i32 + (i10 << 6) + 20 >> 2];
    d22 = +HEAPF32[i32 + (i10 << 6) + 8 >> 2];
    d13 = +HEAPF32[i32 + (i10 << 6) + 24 >> 2];
   } else {
    i32 = HEAP32[i2 + 116 >> 2] | 0;
    d17 = +HEAPF32[i2 + 36 >> 2];
    d22 = +HEAPF32[i2 + 40 >> 2];
    d26 = +HEAPF32[i2 + 44 >> 2];
    d20 = +HEAPF32[i2 + 4 >> 2];
    d18 = +HEAPF32[i2 + 8 >> 2];
    d13 = +HEAPF32[i2 + 12 >> 2];
    d19 = +(HEAPU16[i32 + (i10 << 4) >> 1] | 0) / d17 + d20;
    d20 = +(HEAPU16[i32 + (i10 << 4) + 6 >> 1] | 0) / d17 + d20;
    d17 = +(HEAPU16[i32 + (i10 << 4) + 2 >> 1] | 0) / d22 + d18;
    d18 = +(HEAPU16[i32 + (i10 << 4) + 8 >> 1] | 0) / d22 + d18;
    d22 = +(HEAPU16[i32 + (i10 << 4) + 4 >> 1] | 0) / d26 + d13;
    d13 = +(HEAPU16[i32 + (i10 << 4) + 10 >> 1] | 0) / d26 + d13;
   }
   d21 = d21 + (d20 + d19) * .5;
   d14 = d14 + (d18 + d17) * .5;
   d15 = d15 + (d13 + d22) * .5;
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i5 | 0));
  d26 = 1.0 / +(i5 - i7 | 0);
  d13 = d21 * d26;
  d14 = d14 * d26;
  d15 = d15 * d26;
  if (i9) {
   i9 = HEAP32[i2 + 76 >> 2] | 0;
   d17 = 0.0;
   d20 = 0.0;
   d26 = 0.0;
   i10 = i7;
   do {
    d22 = (+HEAPF32[i9 + (i10 << 6) + 16 >> 2] + +HEAPF32[i9 + (i10 << 6) >> 2]) * .5 - d13;
    d23 = (+HEAPF32[i9 + (i10 << 6) + 20 >> 2] + +HEAPF32[i9 + (i10 << 6) + 4 >> 2]) * .5 - d14;
    d24 = (+HEAPF32[i9 + (i10 << 6) + 24 >> 2] + +HEAPF32[i9 + (i10 << 6) + 8 >> 2]) * .5 - d15;
    d17 = d17 + d22 * d22;
    d20 = d20 + d23 * d23;
    d26 = d26 + d24 * d24;
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i5 | 0));
   d13 = +(i5 - i7 | 0);
  } else {
   i10 = HEAP32[i2 + 116 >> 2] | 0;
   d19 = +HEAPF32[i2 + 36 >> 2];
   d22 = +HEAPF32[i2 + 40 >> 2];
   d24 = +HEAPF32[i2 + 44 >> 2];
   d21 = +HEAPF32[i2 + 4 >> 2];
   d23 = +HEAPF32[i2 + 8 >> 2];
   d18 = +HEAPF32[i2 + 12 >> 2];
   d17 = 0.0;
   d20 = 0.0;
   d26 = 0.0;
   i9 = i7;
   do {
    d35 = (+(HEAPU16[i10 + (i9 << 4) + 6 >> 1] | 0) / d19 + d21 + (+(HEAPU16[i10 + (i9 << 4) >> 1] | 0) / d19 + d21)) * .5 - d13;
    d34 = (+(HEAPU16[i10 + (i9 << 4) + 8 >> 1] | 0) / d22 + d23 + (+(HEAPU16[i10 + (i9 << 4) + 2 >> 1] | 0) / d22 + d23)) * .5 - d14;
    d33 = (+(HEAPU16[i10 + (i9 << 4) + 10 >> 1] | 0) / d24 + d18 + (+(HEAPU16[i10 + (i9 << 4) + 4 >> 1] | 0) / d24 + d18)) * .5 - d15;
    d17 = d17 + d35 * d35;
    d20 = d20 + d34 * d34;
    d26 = d26 + d33 * d33;
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i5 | 0));
   d13 = +(i5 - i7 | 0);
  }
 } else {
  d26 = 0.0;
  d20 = 0.0;
  d17 = 0.0;
  d13 = +(i5 - i7 | 0);
 }
 d15 = 1.0 / (d13 + -1.0);
 d13 = d17 * d15;
 d14 = d20 * d15;
 d15 = d26 * d15;
 if (d13 < d14) i9 = d14 < d15 ? 2 : 1; else i9 = d13 < d15 ? 2 : 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 if ((i7 | 0) < (i5 | 0)) {
  i11 = (HEAP8[i2 + 60 >> 0] | 0) == 0;
  d15 = 0.0;
  d14 = 0.0;
  d13 = 0.0;
  i10 = i7;
  do {
   if (i11) {
    i32 = HEAP32[i2 + 76 >> 2] | 0;
    d20 = +HEAPF32[i32 + (i10 << 6) >> 2];
    d19 = +HEAPF32[i32 + (i10 << 6) + 16 >> 2];
    d17 = +HEAPF32[i32 + (i10 << 6) + 4 >> 2];
    d21 = +HEAPF32[i32 + (i10 << 6) + 20 >> 2];
    d18 = +HEAPF32[i32 + (i10 << 6) + 8 >> 2];
    d22 = +HEAPF32[i32 + (i10 << 6) + 24 >> 2];
   } else {
    i32 = HEAP32[i2 + 116 >> 2] | 0;
    d17 = +HEAPF32[i2 + 36 >> 2];
    d18 = +HEAPF32[i2 + 40 >> 2];
    d35 = +HEAPF32[i2 + 44 >> 2];
    d19 = +HEAPF32[i2 + 4 >> 2];
    d21 = +HEAPF32[i2 + 8 >> 2];
    d22 = +HEAPF32[i2 + 12 >> 2];
    d20 = +(HEAPU16[i32 + (i10 << 4) >> 1] | 0) / d17 + d19;
    d19 = +(HEAPU16[i32 + (i10 << 4) + 6 >> 1] | 0) / d17 + d19;
    d17 = +(HEAPU16[i32 + (i10 << 4) + 2 >> 1] | 0) / d18 + d21;
    d21 = +(HEAPU16[i32 + (i10 << 4) + 8 >> 1] | 0) / d18 + d21;
    d18 = +(HEAPU16[i32 + (i10 << 4) + 4 >> 1] | 0) / d35 + d22;
    d22 = +(HEAPU16[i32 + (i10 << 4) + 10 >> 1] | 0) / d35 + d22;
   }
   d15 = d15 + (d19 + d20) * .5;
   d14 = (d21 + d17) * .5 + d14;
   d13 = (d22 + d18) * .5 + d13;
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i5 | 0));
  HEAPF32[i1 + 16 >> 2] = d15;
  HEAPF32[i1 + 20 >> 2] = d14;
  HEAPF32[i1 + 24 >> 2] = d13;
 } else {
  d15 = 0.0;
  d14 = 0.0;
  d13 = 0.0;
 }
 HEAPF32[i1 + 16 >> 2] = 1.0 / +(i5 - i7 | 0) * d15;
 HEAPF32[i1 + 20 >> 2] = 1.0 / +(i5 - i7 | 0) * d14;
 HEAPF32[i1 + 24 >> 2] = 1.0 / +(i5 - i7 | 0) * d13;
 d13 = +HEAPF32[i1 + 16 + (i9 << 2) >> 2];
 if ((i7 | 0) < (i5 | 0)) {
  i9 = i1 + (i9 << 2) | 0;
  i11 = i7;
  i10 = i7;
  do {
   i12 = (HEAP8[i2 + 60 >> 0] | 0) == 0;
   if (i12) {
    i32 = HEAP32[i2 + 76 >> 2] | 0;
    d18 = +HEAPF32[i32 + (i11 << 6) >> 2];
    d19 = +HEAPF32[i32 + (i11 << 6) + 16 >> 2];
    d15 = +HEAPF32[i32 + (i11 << 6) + 4 >> 2];
    d17 = +HEAPF32[i32 + (i11 << 6) + 20 >> 2];
    d14 = +HEAPF32[i32 + (i11 << 6) + 8 >> 2];
    d20 = +HEAPF32[i32 + (i11 << 6) + 24 >> 2];
   } else {
    i32 = HEAP32[i2 + 116 >> 2] | 0;
    d15 = +HEAPF32[i2 + 36 >> 2];
    d14 = +HEAPF32[i2 + 40 >> 2];
    d35 = +HEAPF32[i2 + 44 >> 2];
    d19 = +HEAPF32[i2 + 4 >> 2];
    d17 = +HEAPF32[i2 + 8 >> 2];
    d20 = +HEAPF32[i2 + 12 >> 2];
    d18 = +(HEAPU16[i32 + (i11 << 4) >> 1] | 0) / d15 + d19;
    d19 = +(HEAPU16[i32 + (i11 << 4) + 6 >> 1] | 0) / d15 + d19;
    d15 = +(HEAPU16[i32 + (i11 << 4) + 2 >> 1] | 0) / d14 + d17;
    d17 = +(HEAPU16[i32 + (i11 << 4) + 8 >> 1] | 0) / d14 + d17;
    d14 = +(HEAPU16[i32 + (i11 << 4) + 4 >> 1] | 0) / d35 + d20;
    d20 = +(HEAPU16[i32 + (i11 << 4) + 10 >> 1] | 0) / d35 + d20;
   }
   HEAPF32[i1 >> 2] = (d19 + d18) * .5;
   HEAPF32[i1 + 4 >> 2] = (d17 + d15) * .5;
   HEAPF32[i1 + 8 >> 2] = (d20 + d14) * .5;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   if (+HEAPF32[i9 >> 2] > d13) {
    if (i12) {
     i27 = HEAP32[i2 + 76 >> 2] | 0;
     i28 = i27 + (i11 << 6) | 0;
     i25 = i1 + 32 | 0;
     i16 = i28 + 0 | 0;
     i12 = i25 + 64 | 0;
     do {
      HEAP32[i25 >> 2] = HEAP32[i16 >> 2];
      i25 = i25 + 4 | 0;
      i16 = i16 + 4 | 0;
     } while ((i25 | 0) < (i12 | 0));
     i25 = i28 + 0 | 0;
     i16 = i27 + (i10 << 6) + 0 | 0;
     i12 = i25 + 64 | 0;
     do {
      HEAP32[i25 >> 2] = HEAP32[i16 >> 2];
      i25 = i25 + 4 | 0;
      i16 = i16 + 4 | 0;
     } while ((i25 | 0) < (i12 | 0));
     i25 = (HEAP32[i2 + 76 >> 2] | 0) + (i10 << 6) + 0 | 0;
     i16 = i1 + 32 | 0;
     i12 = i25 + 64 | 0;
     do {
      HEAP32[i25 >> 2] = HEAP32[i16 >> 2];
      i25 = i25 + 4 | 0;
      i16 = i16 + 4 | 0;
     } while ((i25 | 0) < (i12 | 0));
    } else {
     i31 = HEAP32[i2 + 116 >> 2] | 0;
     i32 = i31 + (i11 << 4) | 0;
     HEAP32[i1 + 96 >> 2] = HEAP32[i32 + 0 >> 2];
     HEAP32[i1 + 100 >> 2] = HEAP32[i32 + 4 >> 2];
     HEAP32[i1 + 104 >> 2] = HEAP32[i32 + 8 >> 2];
     HEAP32[i1 + 108 >> 2] = HEAP32[i32 + 12 >> 2];
     i31 = i31 + (i10 << 4) | 0;
     HEAP32[i32 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
     HEAP32[i32 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
     HEAP32[i32 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
     HEAP32[i32 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
     i32 = (HEAP32[i2 + 116 >> 2] | 0) + (i10 << 4) | 0;
     HEAP32[i32 + 0 >> 2] = HEAP32[i1 + 96 >> 2];
     HEAP32[i32 + 4 >> 2] = HEAP32[i1 + 100 >> 2];
     HEAP32[i32 + 8 >> 2] = HEAP32[i1 + 104 >> 2];
     HEAP32[i32 + 12 >> 2] = HEAP32[i1 + 108 >> 2];
    }
    i10 = i10 + 1 | 0;
   }
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) != (i5 | 0));
 } else i10 = i7;
 if (!((i10 | 0) > (((i5 - i7 | 0) / 3 | 0) + i7 | 0) ? (i10 | 0) < (i5 + -1 - ((i5 - i7 | 0) / 3 | 0) | 0) : 0)) i10 = (i5 - i7 >> 1) + i7 | 0;
 i9 = HEAP32[i2 + 56 >> 2] | 0;
 do if ((HEAP8[i2 + 60 >> 0] | 0) == 0) {
  i11 = (HEAP32[i2 + 96 >> 2] | 0) + (i9 << 6) | 0;
  HEAP32[i11 + 0 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i2 + 24 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i2 + 28 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i2 + 32 >> 2];
  i11 = HEAP32[i2 + 56 >> 2] | 0;
  if ((HEAP8[i2 + 60 >> 0] | 0) == 0) {
   i11 = (HEAP32[i2 + 96 >> 2] | 0) + (i11 << 6) + 16 | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i2 + 16 >> 2];
   i11 = HEAP32[i2 + 56 >> 2] | 0;
   break;
  } else {
   i12 = HEAP32[i2 + 136 >> 2] | 0;
   i16 = i2 + 4 | 0;
   d18 = +HEAPF32[i2 + 8 >> 2];
   d14 = +HEAPF32[i2 + 12 >> 2];
   d17 = +HEAPF32[i2 + 36 >> 2];
   d13 = +HEAPF32[i2 + 40 >> 2];
   d15 = +HEAPF32[i2 + 44 >> 2];
   i8 = 46;
   break;
  }
 } else {
  i12 = HEAP32[i2 + 136 >> 2] | 0;
  d18 = +HEAPF32[i2 + 8 >> 2];
  d14 = +HEAPF32[i2 + 12 >> 2];
  d17 = +HEAPF32[i2 + 36 >> 2];
  d13 = +HEAPF32[i2 + 40 >> 2];
  d34 = (+HEAPF32[i2 + 24 >> 2] - d18) * d13;
  d15 = +HEAPF32[i2 + 44 >> 2];
  d35 = (+HEAPF32[i2 + 28 >> 2] - d14) * d15;
  HEAP16[i12 + (i9 << 4) >> 1] = ~~((+HEAPF32[i2 + 20 >> 2] - +HEAPF32[i2 + 4 >> 2]) * d17) & 65534;
  HEAP16[i12 + (i9 << 4) + 2 >> 1] = ~~d34 & 65534;
  HEAP16[i12 + (i9 << 4) + 4 >> 1] = ~~d35 & 65534;
  i11 = i9;
  i16 = i2 + 4 | 0;
  i8 = 46;
 } while (0);
 if ((i8 | 0) == 46) {
  d35 = +HEAPF32[i16 >> 2];
  HEAP16[i12 + (i11 << 4) + 6 >> 1] = ~~((d35 - d35) * d17 + 1.0) & 65535 | 1;
  HEAP16[i12 + (i11 << 4) + 8 >> 1] = ~~((d18 - d18) * d13 + 1.0) & 65535 | 1;
  HEAP16[i12 + (i11 << 4) + 10 >> 1] = ~~((d14 - d14) * d15 + 1.0) & 65535 | 1;
 }
 if ((i7 | 0) < (i5 | 0)) {
  i8 = HEAP8[i2 + 60 >> 0] | 0;
  i12 = i7;
  do {
   if (i8 << 24 >> 24 == 0) {
    i16 = HEAP32[i2 + 76 >> 2] | 0;
    d21 = +HEAPF32[i16 + (i12 << 6) >> 2];
    d20 = +HEAPF32[i16 + (i12 << 6) + 4 >> 2];
    d19 = +HEAPF32[i16 + (i12 << 6) + 8 >> 2];
    d18 = +HEAPF32[i16 + (i12 << 6) + 12 >> 2];
    d17 = +HEAPF32[i16 + (i12 << 6) + 16 >> 2];
    d15 = +HEAPF32[i16 + (i12 << 6) + 20 >> 2];
    d14 = +HEAPF32[i16 + (i12 << 6) + 24 >> 2];
    d13 = +HEAPF32[i16 + (i12 << 6) + 28 >> 2];
    i16 = HEAP32[i2 + 96 >> 2] | 0;
    i25 = i16 + (i11 << 6) | 0;
    if (d21 < +HEAPF32[i25 >> 2]) HEAPF32[i25 >> 2] = d21;
    i25 = i16 + (i11 << 6) + 4 | 0;
    if (d20 < +HEAPF32[i25 >> 2]) HEAPF32[i25 >> 2] = d20;
    i25 = i16 + (i11 << 6) + 8 | 0;
    if (d19 < +HEAPF32[i25 >> 2]) HEAPF32[i25 >> 2] = d19;
    i25 = i16 + (i11 << 6) + 12 | 0;
    if (d18 < +HEAPF32[i25 >> 2]) HEAPF32[i25 >> 2] = d18;
    i25 = i16 + (i11 << 6) + 16 | 0;
    if (+HEAPF32[i25 >> 2] < d17) HEAPF32[i25 >> 2] = d17;
    i25 = i16 + (i11 << 6) + 20 | 0;
    if (+HEAPF32[i25 >> 2] < d15) HEAPF32[i25 >> 2] = d15;
    i25 = i16 + (i11 << 6) + 24 | 0;
    if (+HEAPF32[i25 >> 2] < d14) HEAPF32[i25 >> 2] = d14;
    i16 = i16 + (i11 << 6) + 28 | 0;
    if (+HEAPF32[i16 >> 2] < d13) HEAPF32[i16 >> 2] = d13;
   } else {
    i16 = HEAP32[i2 + 116 >> 2] | 0;
    d17 = +HEAPF32[i2 + 36 >> 2];
    d21 = +HEAPF32[i2 + 40 >> 2];
    d26 = +HEAPF32[i2 + 44 >> 2];
    d18 = +HEAPF32[i2 + 4 >> 2];
    d22 = +HEAPF32[i2 + 8 >> 2];
    d33 = +HEAPF32[i2 + 12 >> 2];
    d19 = +HEAPF32[i2 + 4 >> 2];
    d23 = +HEAPF32[i2 + 8 >> 2];
    d34 = +HEAPF32[i2 + 12 >> 2];
    d20 = +HEAPF32[i2 + 36 >> 2];
    d24 = +HEAPF32[i2 + 40 >> 2];
    d35 = +HEAPF32[i2 + 44 >> 2];
    i31 = ~~((+(HEAPU16[i16 + (i12 << 4) >> 1] | 0) / d17 + d18 - d19) * d20) & 65534;
    i29 = ~~((+(HEAPU16[i16 + (i12 << 4) + 2 >> 1] | 0) / d21 + d22 - d23) * d24) & 65534;
    i27 = ~~((+(HEAPU16[i16 + (i12 << 4) + 4 >> 1] | 0) / d26 + d33 - d34) * d35) & 65534;
    i30 = (~~((+(HEAPU16[i16 + (i12 << 4) + 6 >> 1] | 0) / d17 + d18 - d19) * d20 + 1.0) & 65535 | 1) & 65535;
    i28 = (~~((+(HEAPU16[i16 + (i12 << 4) + 8 >> 1] | 0) / d21 + d22 - d23) * d24 + 1.0) & 65535 | 1) & 65535;
    i16 = (~~((+(HEAPU16[i16 + (i12 << 4) + 10 >> 1] | 0) / d26 + d33 - d34) * d35 + 1.0) & 65535 | 1) & 65535;
    i25 = HEAP32[i2 + 136 >> 2] | 0;
    i32 = i25 + (i11 << 4) | 0;
    if ((HEAPU16[i32 >> 1] | 0) > (i31 & 65535)) HEAP16[i32 >> 1] = i31;
    i31 = i25 + (i11 << 4) + 6 | 0;
    if ((HEAPU16[i31 >> 1] | 0) < (i30 & 65535)) HEAP16[i31 >> 1] = i30;
    i30 = i25 + (i11 << 4) + 2 | 0;
    if ((HEAPU16[i30 >> 1] | 0) > (i29 & 65535)) HEAP16[i30 >> 1] = i29;
    i29 = i25 + (i11 << 4) + 8 | 0;
    if ((HEAPU16[i29 >> 1] | 0) < (i28 & 65535)) HEAP16[i29 >> 1] = i28;
    i28 = i25 + (i11 << 4) + 4 | 0;
    if ((HEAPU16[i28 >> 1] | 0) > (i27 & 65535)) HEAP16[i28 >> 1] = i27;
    i25 = i25 + (i11 << 4) + 10 | 0;
    if ((HEAPU16[i25 >> 1] | 0) < (i16 & 65535)) HEAP16[i25 >> 1] = i16;
   }
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i5 | 0));
 }
 i11 = i11 + 1 | 0;
 HEAP32[i2 + 56 >> 2] = i11;
 __ZN14btQuantizedBvh9buildTreeEii(i2, i7, i10);
 i7 = HEAP32[i2 + 56 >> 2] | 0;
 __ZN14btQuantizedBvh9buildTreeEii(i2, i10, i5);
 i5 = (HEAP32[i2 + 56 >> 2] | 0) - i6 | 0;
 do if ((HEAP8[i2 + 60 >> 0] | 0) != 0) {
  if ((i5 << 4 | 0) > 2048) {
   i6 = HEAP32[i2 + 136 >> 2] | 0;
   i10 = HEAP32[i6 + (i11 << 4) + 12 >> 2] | 0;
   i10 = (i10 | 0) > -1 ? 1 : 0 - i10 | 0;
   i8 = HEAP32[i6 + (i7 << 4) + 12 >> 2] | 0;
   i8 = (i8 | 0) > -1 ? 1 : 0 - i8 | 0;
   if ((i10 << 4 | 0) < 2049) {
    i12 = HEAP32[i2 + 152 >> 2] | 0;
    if ((i12 | 0) == (HEAP32[i2 + 156 >> 2] | 0) ? (i4 = (i12 | 0) == 0 ? 1 : i12 << 1, (i12 | 0) < (i4 | 0)) : 0) {
     if ((i4 | 0) == 0) {
      i16 = 0;
      i27 = i12;
     } else {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i16 = _malloc(i4 << 5 | 19) | 0;
      if ((i16 | 0) == 0) i16 = 0; else {
       HEAP32[(i16 + 19 & -16) + -4 >> 2] = i16;
       i16 = i16 + 19 & -16;
      }
      i27 = HEAP32[i2 + 152 >> 2] | 0;
     }
     if ((i27 | 0) > 0) {
      i25 = 0;
      do {
       i32 = i16 + (i25 << 5) | 0;
       i31 = (HEAP32[i2 + 160 >> 2] | 0) + (i25 << 5) | 0;
       HEAP32[i32 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
       HEAP32[i32 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
       HEAP32[i32 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
       HEAP32[i32 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
       HEAP32[i32 + 16 >> 2] = HEAP32[i31 + 16 >> 2];
       HEAP32[i32 + 20 >> 2] = HEAP32[i31 + 20 >> 2];
       HEAP32[i32 + 24 >> 2] = HEAP32[i31 + 24 >> 2];
       HEAP32[i32 + 28 >> 2] = HEAP32[i31 + 28 >> 2];
       i25 = i25 + 1 | 0;
      } while ((i25 | 0) != (i27 | 0));
     }
     i25 = HEAP32[i2 + 160 >> 2] | 0;
     if ((i25 | 0) != 0) {
      if ((HEAP8[i2 + 164 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i25 + -4 >> 2] | 0);
      }
      HEAP32[i2 + 160 >> 2] = 0;
     }
     HEAP8[i2 + 164 >> 0] = 1;
     HEAP32[i2 + 160 >> 2] = i16;
     HEAP32[i2 + 156 >> 2] = i4;
     i4 = HEAP32[i2 + 152 >> 2] | 0;
    } else i4 = i12;
    HEAP32[i2 + 152 >> 2] = i4 + 1;
    i4 = (HEAP32[i2 + 160 >> 2] | 0) + (i12 << 5) | 0;
    HEAP32[i4 + 0 >> 2] = HEAP32[i1 + 96 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 100 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 104 >> 2];
    HEAP32[i4 + 12 >> 2] = HEAP32[i1 + 108 >> 2];
    HEAP32[i4 + 16 >> 2] = HEAP32[i1 + 112 >> 2];
    HEAP32[i4 + 20 >> 2] = HEAP32[i1 + 116 >> 2];
    HEAP32[i4 + 24 >> 2] = HEAP32[i1 + 120 >> 2];
    HEAP32[i4 + 28 >> 2] = HEAP32[i1 + 124 >> 2];
    i4 = HEAP32[i2 + 160 >> 2] | 0;
    HEAP16[i4 + (i12 << 5) >> 1] = HEAP16[i6 + (i11 << 4) >> 1] | 0;
    HEAP16[i4 + (i12 << 5) + 2 >> 1] = HEAP16[i6 + (i11 << 4) + 2 >> 1] | 0;
    HEAP16[i4 + (i12 << 5) + 4 >> 1] = HEAP16[i6 + (i11 << 4) + 4 >> 1] | 0;
    HEAP16[i4 + (i12 << 5) + 6 >> 1] = HEAP16[i6 + (i11 << 4) + 6 >> 1] | 0;
    HEAP16[i4 + (i12 << 5) + 8 >> 1] = HEAP16[i6 + (i11 << 4) + 8 >> 1] | 0;
    HEAP16[i4 + (i12 << 5) + 10 >> 1] = HEAP16[i6 + (i11 << 4) + 10 >> 1] | 0;
    HEAP32[i4 + (i12 << 5) + 12 >> 2] = i11;
    HEAP32[i4 + (i12 << 5) + 16 >> 2] = i10;
    i4 = i2 + 152 | 0;
   } else i4 = i2 + 152 | 0;
   if ((i8 << 4 | 0) < 2049) {
    i10 = HEAP32[i4 >> 2] | 0;
    if ((i10 | 0) == (HEAP32[i2 + 156 >> 2] | 0) ? (i3 = (i10 | 0) == 0 ? 1 : i10 << 1, (i10 | 0) < (i3 | 0)) : 0) {
     if ((i3 | 0) == 0) {
      i11 = 0;
      i16 = i10;
     } else {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i11 = _malloc(i3 << 5 | 19) | 0;
      if ((i11 | 0) == 0) i11 = 0; else {
       HEAP32[(i11 + 19 & -16) + -4 >> 2] = i11;
       i11 = i11 + 19 & -16;
      }
      i16 = HEAP32[i4 >> 2] | 0;
     }
     if ((i16 | 0) > 0) {
      i12 = 0;
      do {
       i32 = i11 + (i12 << 5) | 0;
       i31 = (HEAP32[i2 + 160 >> 2] | 0) + (i12 << 5) | 0;
       HEAP32[i32 + 0 >> 2] = HEAP32[i31 + 0 >> 2];
       HEAP32[i32 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
       HEAP32[i32 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
       HEAP32[i32 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
       HEAP32[i32 + 16 >> 2] = HEAP32[i31 + 16 >> 2];
       HEAP32[i32 + 20 >> 2] = HEAP32[i31 + 20 >> 2];
       HEAP32[i32 + 24 >> 2] = HEAP32[i31 + 24 >> 2];
       HEAP32[i32 + 28 >> 2] = HEAP32[i31 + 28 >> 2];
       i12 = i12 + 1 | 0;
      } while ((i12 | 0) != (i16 | 0));
     }
     i12 = HEAP32[i2 + 160 >> 2] | 0;
     if ((i12 | 0) != 0) {
      if ((HEAP8[i2 + 164 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i12 + -4 >> 2] | 0);
      }
      HEAP32[i2 + 160 >> 2] = 0;
     }
     HEAP8[i2 + 164 >> 0] = 1;
     HEAP32[i2 + 160 >> 2] = i11;
     HEAP32[i2 + 156 >> 2] = i3;
     i3 = HEAP32[i4 >> 2] | 0;
    } else i3 = i10;
    HEAP32[i4 >> 2] = i3 + 1;
    i32 = (HEAP32[i2 + 160 >> 2] | 0) + (i10 << 5) | 0;
    HEAP32[i32 + 0 >> 2] = HEAP32[i1 + 32 >> 2];
    HEAP32[i32 + 4 >> 2] = HEAP32[i1 + 36 >> 2];
    HEAP32[i32 + 8 >> 2] = HEAP32[i1 + 40 >> 2];
    HEAP32[i32 + 12 >> 2] = HEAP32[i1 + 44 >> 2];
    HEAP32[i32 + 16 >> 2] = HEAP32[i1 + 48 >> 2];
    HEAP32[i32 + 20 >> 2] = HEAP32[i1 + 52 >> 2];
    HEAP32[i32 + 24 >> 2] = HEAP32[i1 + 56 >> 2];
    HEAP32[i32 + 28 >> 2] = HEAP32[i1 + 60 >> 2];
    i32 = HEAP32[i2 + 160 >> 2] | 0;
    HEAP16[i32 + (i10 << 5) >> 1] = HEAP16[i6 + (i7 << 4) >> 1] | 0;
    HEAP16[i32 + (i10 << 5) + 2 >> 1] = HEAP16[i6 + (i7 << 4) + 2 >> 1] | 0;
    HEAP16[i32 + (i10 << 5) + 4 >> 1] = HEAP16[i6 + (i7 << 4) + 4 >> 1] | 0;
    HEAP16[i32 + (i10 << 5) + 6 >> 1] = HEAP16[i6 + (i7 << 4) + 6 >> 1] | 0;
    HEAP16[i32 + (i10 << 5) + 8 >> 1] = HEAP16[i6 + (i7 << 4) + 8 >> 1] | 0;
    HEAP16[i32 + (i10 << 5) + 10 >> 1] = HEAP16[i6 + (i7 << 4) + 10 >> 1] | 0;
    HEAP32[i32 + (i10 << 5) + 12 >> 2] = i7;
    HEAP32[i32 + (i10 << 5) + 16 >> 2] = i8;
   }
   HEAP32[i2 + 168 >> 2] = HEAP32[i4 >> 2];
   if ((HEAP8[i2 + 60 >> 0] | 0) == 0) break; else i2 = i2 + 136 | 0;
  } else i2 = i2 + 136 | 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + (i9 << 4) + 12 >> 2] = 0 - i5;
  STACKTOP = i1;
  return;
 } while (0);
 HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + (i9 << 6) + 32 >> 2] = i5;
 STACKTOP = i1;
 return;
}
function __ZN30btKinematicCharacterController10playerStepEP16btCollisionWorldf(i1, i4, d3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, i13 = 0, d14 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 if ((HEAP8[i1 + 171 >> 0] | 0) == 0 ? +HEAPF32[i1 + 172 >> 2] <= 0.0 : 0) {
  STACKTOP = i2;
  return;
 }
 i13 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1) | 0) & 1;
 HEAP8[i1 + 168 >> 0] = i13;
 d11 = +HEAPF32[i1 + 16 >> 2] - +HEAPF32[i1 + 44 >> 2] * d3;
 HEAPF32[i1 + 16 >> 2] = d11;
 if (d11 > 0.0 ? (d7 = +HEAPF32[i1 + 28 >> 2], d11 > d7) : 0) HEAPF32[i1 + 16 >> 2] = d7; else d7 = d11;
 if (d7 < 0.0 ? (d14 = +Math_abs(+d7), d6 = +Math_abs(+(+HEAPF32[i1 + 24 >> 2])), d14 > d6) : 0) {
  HEAPF32[i1 + 16 >> 2] = -d6;
  d7 = -d6;
 }
 HEAPF32[i1 + 20 >> 2] = d7 * d3;
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i8 + 20 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i8 + 24 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i8 + 28 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i8 + 32 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i8 + 36 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i8 + 40 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i8 + 44 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i8 + 48 >> 2];
 HEAP32[i2 + 48 >> 2] = HEAP32[i8 + 52 >> 2];
 HEAP32[i2 + 52 >> 2] = HEAP32[i8 + 56 >> 2];
 HEAP32[i2 + 56 >> 2] = HEAP32[i8 + 60 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i8 + 64 >> 2];
 i8 = HEAP32[i1 + 176 >> 2] | 0;
 if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
  HEAPF32[672] = 1.0;
  HEAP32[673] = 0;
  HEAP32[674] = 0;
  HEAP32[675] = 0;
  HEAP32[676] = 0;
  HEAPF32[677] = 1.0;
  HEAP32[678] = 0;
  HEAP32[679] = 0;
  HEAP32[680] = 0;
  HEAP32[681] = 0;
  HEAPF32[682] = 1.0;
  HEAPF32[683] = 0.0;
  ___cxa_guard_release(2736);
 }
 d11 = +HEAPF32[i1 + 20 >> 2];
 d11 = +HEAPF32[i1 + 52 >> 2] + (d11 > 0.0 ? d11 : 0.0);
 d12 = +HEAPF32[2692 + (i8 << 4) >> 2] * d11 + +HEAPF32[i1 + 96 >> 2];
 d14 = d11 * +HEAPF32[2696 + (i8 << 4) >> 2] + +HEAPF32[i1 + 100 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i1 + 92 >> 2] + +HEAPF32[2688 + (i8 << 4) >> 2] * d11;
 HEAPF32[i1 + 116 >> 2] = d12;
 HEAPF32[i1 + 120 >> 2] = d14;
 HEAPF32[i1 + 124 >> 2] = 0.0;
 HEAPF32[i2 + 456 >> 2] = 1.0;
 HEAP32[i2 + 460 >> 2] = 0;
 HEAP32[i2 + 464 >> 2] = 0;
 HEAP32[i2 + 468 >> 2] = 0;
 HEAP32[i2 + 472 >> 2] = 0;
 HEAPF32[i2 + 476 >> 2] = 1.0;
 HEAP32[i2 + 480 >> 2] = 0;
 HEAP32[i2 + 484 >> 2] = 0;
 HEAP32[i2 + 488 >> 2] = 0;
 HEAP32[i2 + 492 >> 2] = 0;
 HEAPF32[i2 + 496 >> 2] = 1.0;
 i8 = i2 + 500 | 0;
 HEAP32[i8 + 0 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 HEAPF32[i2 + 392 >> 2] = 1.0;
 HEAP32[i2 + 396 >> 2] = 0;
 HEAP32[i2 + 400 >> 2] = 0;
 HEAP32[i2 + 404 >> 2] = 0;
 HEAP32[i2 + 408 >> 2] = 0;
 HEAPF32[i2 + 412 >> 2] = 1.0;
 HEAP32[i2 + 416 >> 2] = 0;
 HEAP32[i2 + 420 >> 2] = 0;
 HEAP32[i2 + 424 >> 2] = 0;
 HEAP32[i2 + 428 >> 2] = 0;
 HEAPF32[i2 + 432 >> 2] = 1.0;
 i8 = i2 + 436 | 0;
 HEAP32[i8 + 0 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i8 = HEAP32[i1 + 176 >> 2] | 0;
 if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
  HEAPF32[672] = 1.0;
  HEAP32[673] = 0;
  HEAP32[674] = 0;
  HEAP32[675] = 0;
  HEAP32[676] = 0;
  HEAPF32[677] = 1.0;
  HEAP32[678] = 0;
  HEAP32[679] = 0;
  HEAP32[680] = 0;
  HEAP32[681] = 0;
  HEAPF32[682] = 1.0;
  HEAPF32[683] = 0.0;
  ___cxa_guard_release(2736);
 }
 i9 = HEAP32[i1 + 12 >> 2] | 0;
 d11 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 15](i9);
 d11 = d11 + +HEAPF32[i1 + 56 >> 2];
 d12 = d11 * +HEAPF32[2692 + (i8 << 4) >> 2] + +HEAPF32[i1 + 96 >> 2];
 d14 = d11 * +HEAPF32[2696 + (i8 << 4) >> 2] + +HEAPF32[i1 + 100 >> 2];
 HEAPF32[i2 + 504 >> 2] = +HEAPF32[2688 + (i8 << 4) >> 2] * d11 + +HEAPF32[i1 + 92 >> 2];
 HEAPF32[i2 + 508 >> 2] = d12;
 HEAPF32[i2 + 512 >> 2] = d14;
 HEAPF32[i2 + 516 >> 2] = 0.0;
 HEAP32[i2 + 440 >> 2] = HEAP32[i1 + 112 >> 2];
 HEAP32[i2 + 444 >> 2] = HEAP32[i1 + 116 >> 2];
 HEAP32[i2 + 448 >> 2] = HEAP32[i1 + 120 >> 2];
 HEAP32[i2 + 452 >> 2] = HEAP32[i1 + 124 >> 2];
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 i9 = HEAP32[i1 + 176 >> 2] | 0;
 if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
  HEAPF32[672] = 1.0;
  HEAP32[673] = 0;
  HEAP32[674] = 0;
  HEAP32[675] = 0;
  HEAP32[676] = 0;
  HEAPF32[677] = 1.0;
  HEAP32[678] = 0;
  HEAP32[679] = 0;
  HEAP32[680] = 0;
  HEAP32[681] = 0;
  HEAPF32[682] = 1.0;
  HEAPF32[683] = 0.0;
  ___cxa_guard_release(2736);
 }
 d11 = -+HEAPF32[2688 + (i9 << 4) >> 2];
 d12 = -+HEAPF32[2692 + (i9 << 4) >> 2];
 d14 = -+HEAPF32[2696 + (i9 << 4) >> 2];
 HEAPF32[i2 + 292 >> 2] = 1.0;
 HEAP16[i2 + 296 >> 1] = 1;
 HEAP16[i2 + 298 >> 1] = -1;
 i13 = i2 + 300 | 0;
 HEAP32[i2 + 364 >> 2] = 0;
 HEAP32[i13 + 0 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i13 + 12 >> 2] = 0;
 HEAP32[i13 + 16 >> 2] = 0;
 HEAP32[i13 + 20 >> 2] = 0;
 HEAP32[i13 + 24 >> 2] = 0;
 HEAP32[i13 + 28 >> 2] = 0;
 HEAP32[i2 + 288 >> 2] = 2896;
 HEAP32[i2 + 368 >> 2] = i8;
 HEAPF32[i2 + 372 >> 2] = d11;
 HEAPF32[i2 + 376 >> 2] = d12;
 HEAPF32[i2 + 380 >> 2] = d14;
 HEAPF32[i2 + 384 >> 2] = 0.0;
 HEAPF32[i2 + 388 >> 2] = .707099974155426;
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 i13 = HEAP32[i8 + 188 >> 2] | 0;
 HEAP16[i2 + 296 >> 1] = HEAP16[i13 + 4 >> 1] | 0;
 HEAP16[i2 + 298 >> 1] = HEAP16[i13 + 6 >> 1] | 0;
 if ((HEAP8[i1 + 170 >> 0] | 0) == 0) __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i4, HEAP32[i1 + 12 >> 2] | 0, i2 + 456 | 0, i2 + 392 | 0, i2 + 288 | 0, 0.0); else __ZNK13btGhostObject15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RN16btCollisionWorld20ConvexResultCallbackEf(i8, HEAP32[i1 + 12 >> 2] | 0, i2 + 456 | 0, i2 + 392 | 0, i2 + 288 | 0, +HEAPF32[i4 + 56 >> 2]);
 if (+HEAPF32[i2 + 292 >> 2] < 1.0) {
  i8 = HEAP32[i1 + 176 >> 2] | 0;
  if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
   HEAPF32[672] = 1.0;
   HEAP32[673] = 0;
   HEAP32[674] = 0;
   HEAP32[675] = 0;
   HEAP32[676] = 0;
   HEAPF32[677] = 1.0;
   HEAP32[678] = 0;
   HEAP32[679] = 0;
   HEAP32[680] = 0;
   HEAP32[681] = 0;
   HEAPF32[682] = 1.0;
   HEAPF32[683] = 0.0;
   ___cxa_guard_release(2736);
  }
  do if (+HEAPF32[i2 + 332 >> 2] * +HEAPF32[2688 + (i8 << 4) >> 2] + +HEAPF32[i2 + 336 >> 2] * +HEAPF32[2692 + (i8 << 4) >> 2] + +HEAPF32[i2 + 340 >> 2] * +HEAPF32[2696 + (i8 << 4) >> 2] > 0.0) {
   d6 = +HEAPF32[i2 + 292 >> 2];
   HEAPF32[i1 + 108 >> 2] = +HEAPF32[i1 + 52 >> 2] * d6;
   if ((HEAP8[i1 + 180 >> 0] | 0) == 0) {
    HEAP32[i1 + 92 >> 2] = HEAP32[i1 + 112 >> 2];
    HEAP32[i1 + 96 >> 2] = HEAP32[i1 + 116 >> 2];
    HEAP32[i1 + 100 >> 2] = HEAP32[i1 + 120 >> 2];
    HEAP32[i1 + 104 >> 2] = HEAP32[i1 + 124 >> 2];
    break;
   } else {
    HEAPF32[i1 + 92 >> 2] = (1.0 - d6) * +HEAPF32[i1 + 92 >> 2] + d6 * +HEAPF32[i1 + 112 >> 2];
    HEAPF32[i1 + 96 >> 2] = (1.0 - d6) * +HEAPF32[i1 + 96 >> 2] + d6 * +HEAPF32[i1 + 116 >> 2];
    HEAPF32[i1 + 100 >> 2] = (1.0 - d6) * +HEAPF32[i1 + 100 >> 2] + d6 * +HEAPF32[i1 + 120 >> 2];
    break;
   }
  } while (0);
  HEAPF32[i1 + 16 >> 2] = 0.0;
  HEAPF32[i1 + 20 >> 2] = 0.0;
 } else {
  HEAPF32[i1 + 108 >> 2] = +HEAPF32[i1 + 52 >> 2];
  HEAP32[i1 + 92 >> 2] = HEAP32[i1 + 112 >> 2];
  HEAP32[i1 + 96 >> 2] = HEAP32[i1 + 116 >> 2];
  HEAP32[i1 + 100 >> 2] = HEAP32[i1 + 120 >> 2];
  HEAP32[i1 + 104 >> 2] = HEAP32[i1 + 124 >> 2];
 }
 if ((HEAP8[i1 + 171 >> 0] | 0) == 0) {
  d12 = +HEAPF32[i1 + 172 >> 2];
  d14 = d12 > d3 ? d3 : d12;
  HEAPF32[i1 + 172 >> 2] = d12 - d3;
  __ZN30btKinematicCharacterController20stepForwardAndStrafeEP16btCollisionWorldRK9btVector3(i1, i4, +HEAPF32[i1 + 60 >> 2] * d14, d14 * +HEAPF32[i1 + 64 >> 2], d14 * +HEAPF32[i1 + 68 >> 2]);
 } else __ZN30btKinematicCharacterController20stepForwardAndStrafeEP16btCollisionWorldRK9btVector3(i1, i4, +HEAPF32[i1 + 60 >> 2], +HEAPF32[i1 + 64 >> 2], +HEAPF32[i1 + 68 >> 2]);
 HEAP32[i2 + 272 >> 2] = HEAP32[i1 + 112 >> 2];
 HEAP32[i2 + 276 >> 2] = HEAP32[i1 + 116 >> 2];
 HEAP32[i2 + 280 >> 2] = HEAP32[i1 + 120 >> 2];
 HEAP32[i2 + 284 >> 2] = HEAP32[i1 + 124 >> 2];
 d6 = +HEAPF32[i1 + 16 >> 2];
 if (d6 < 0.0) d6 = -d6; else d6 = 0.0;
 d6 = d6 * d3;
 do if (d6 > 0.0 ? (d5 = +HEAPF32[i1 + 24 >> 2], d6 > d5) : 0) {
  if ((HEAP8[i1 + 168 >> 0] | 0) == 0 ? (HEAP8[i1 + 169 >> 0] | 0) != 0 : 0) {
   d5 = d6;
   break;
  }
 } else d5 = d6; while (0);
 i8 = HEAP32[i1 + 176 >> 2] | 0;
 if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
  HEAPF32[672] = 1.0;
  HEAP32[673] = 0;
  HEAP32[674] = 0;
  HEAP32[675] = 0;
  HEAP32[676] = 0;
  HEAPF32[677] = 1.0;
  HEAP32[678] = 0;
  HEAP32[679] = 0;
  HEAP32[680] = 0;
  HEAP32[681] = 0;
  HEAPF32[682] = 1.0;
  HEAPF32[683] = 0.0;
  ___cxa_guard_release(2736);
 }
 d7 = d5 + +HEAPF32[i1 + 108 >> 2];
 d6 = +HEAPF32[2688 + (i8 << 4) >> 2] * d7;
 d5 = d7 * +HEAPF32[2692 + (i8 << 4) >> 2];
 d7 = d7 * +HEAPF32[2696 + (i8 << 4) >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i1 + 112 >> 2] - d6;
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i1 + 116 >> 2] - d5;
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i1 + 120 >> 2] - d7;
 i9 = HEAP32[i1 + 8 >> 2] | 0;
 i10 = HEAP32[i1 + 176 >> 2] | 0;
 if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
  HEAPF32[672] = 1.0;
  HEAP32[673] = 0;
  HEAP32[674] = 0;
  HEAP32[675] = 0;
  HEAP32[676] = 0;
  HEAPF32[677] = 1.0;
  HEAP32[678] = 0;
  HEAP32[679] = 0;
  HEAP32[680] = 0;
  HEAP32[681] = 0;
  HEAPF32[682] = 1.0;
  HEAPF32[683] = 0.0;
  ___cxa_guard_release(2736);
 }
 d14 = +HEAPF32[i1 + 40 >> 2];
 i8 = i2 + 172 | 0;
 HEAPF32[i8 >> 2] = 1.0;
 HEAP16[i2 + 176 >> 1] = 1;
 HEAP16[i2 + 178 >> 1] = -1;
 i13 = i2 + 180 | 0;
 HEAP32[i2 + 244 >> 2] = 0;
 HEAP32[i13 + 0 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i13 + 12 >> 2] = 0;
 HEAP32[i13 + 16 >> 2] = 0;
 HEAP32[i13 + 20 >> 2] = 0;
 HEAP32[i13 + 24 >> 2] = 0;
 HEAP32[i13 + 28 >> 2] = 0;
 HEAP32[i2 + 168 >> 2] = 2896;
 HEAP32[i2 + 248 >> 2] = i9;
 HEAP32[i2 + 252 >> 2] = HEAP32[2688 + (i10 << 4) >> 2];
 HEAP32[i2 + 256 >> 2] = HEAP32[2692 + (i10 << 4) >> 2];
 HEAP32[i2 + 260 >> 2] = HEAP32[2696 + (i10 << 4) >> 2];
 HEAP32[i2 + 264 >> 2] = HEAP32[2700 + (i10 << 4) >> 2];
 HEAPF32[i2 + 268 >> 2] = d14;
 i10 = HEAP32[i1 + 8 >> 2] | 0;
 i9 = HEAP32[i10 + 188 >> 2] | 0;
 HEAP16[i2 + 176 >> 1] = HEAP16[i9 + 4 >> 1] | 0;
 HEAP16[i2 + 178 >> 1] = HEAP16[i9 + 6 >> 1] | 0;
 i9 = HEAP32[i1 + 176 >> 2] | 0;
 if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
  HEAPF32[672] = 1.0;
  HEAP32[673] = 0;
  HEAP32[674] = 0;
  HEAP32[675] = 0;
  HEAP32[676] = 0;
  HEAPF32[677] = 1.0;
  HEAP32[678] = 0;
  HEAP32[679] = 0;
  HEAP32[680] = 0;
  HEAP32[681] = 0;
  HEAPF32[682] = 1.0;
  HEAPF32[683] = 0.0;
  ___cxa_guard_release(2736);
 }
 d14 = +HEAPF32[i1 + 40 >> 2];
 HEAPF32[i2 + 68 >> 2] = 1.0;
 HEAP16[i2 + 72 >> 1] = 1;
 HEAP16[i2 + 74 >> 1] = -1;
 i13 = i2 + 76 | 0;
 HEAP32[i2 + 140 >> 2] = 0;
 HEAP32[i13 + 0 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i13 + 12 >> 2] = 0;
 HEAP32[i13 + 16 >> 2] = 0;
 HEAP32[i13 + 20 >> 2] = 0;
 HEAP32[i13 + 24 >> 2] = 0;
 HEAP32[i13 + 28 >> 2] = 0;
 HEAP32[i2 + 64 >> 2] = 2896;
 HEAP32[i2 + 144 >> 2] = i10;
 HEAP32[i2 + 148 >> 2] = HEAP32[2688 + (i9 << 4) >> 2];
 HEAP32[i2 + 152 >> 2] = HEAP32[2692 + (i9 << 4) >> 2];
 HEAP32[i2 + 156 >> 2] = HEAP32[2696 + (i9 << 4) >> 2];
 HEAP32[i2 + 160 >> 2] = HEAP32[2700 + (i9 << 4) >> 2];
 HEAPF32[i2 + 164 >> 2] = d14;
 i9 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 188 >> 2] | 0;
 HEAP16[i2 + 72 >> 1] = HEAP16[i9 + 4 >> 1] | 0;
 HEAP16[i2 + 74 >> 1] = HEAP16[i9 + 6 >> 1] | 0;
 d14 = +HEAPF32[i1 + 112 >> 2];
 d12 = +HEAPF32[i1 + 116 >> 2];
 d11 = +HEAPF32[i1 + 120 >> 2];
 i9 = 0;
 while (1) {
  HEAPF32[i2 + 456 >> 2] = 1.0;
  HEAP32[i2 + 460 >> 2] = 0;
  HEAP32[i2 + 464 >> 2] = 0;
  HEAP32[i2 + 468 >> 2] = 0;
  HEAP32[i2 + 472 >> 2] = 0;
  HEAPF32[i2 + 476 >> 2] = 1.0;
  HEAP32[i2 + 480 >> 2] = 0;
  HEAP32[i2 + 484 >> 2] = 0;
  HEAP32[i2 + 488 >> 2] = 0;
  HEAP32[i2 + 492 >> 2] = 0;
  HEAPF32[i2 + 496 >> 2] = 1.0;
  HEAP32[i2 + 500 >> 2] = 0;
  HEAPF32[i2 + 392 >> 2] = 1.0;
  HEAP32[i2 + 396 >> 2] = 0;
  HEAP32[i2 + 400 >> 2] = 0;
  HEAP32[i2 + 404 >> 2] = 0;
  HEAP32[i2 + 408 >> 2] = 0;
  HEAPF32[i2 + 412 >> 2] = 1.0;
  HEAP32[i2 + 416 >> 2] = 0;
  HEAP32[i2 + 420 >> 2] = 0;
  HEAP32[i2 + 424 >> 2] = 0;
  HEAP32[i2 + 428 >> 2] = 0;
  HEAPF32[i2 + 432 >> 2] = 1.0;
  HEAP32[i2 + 436 >> 2] = 0;
  HEAPF32[i2 + 288 >> 2] = 1.0;
  HEAP32[i2 + 292 >> 2] = 0;
  HEAP32[i2 + 296 >> 2] = 0;
  HEAP32[i2 + 300 >> 2] = 0;
  HEAP32[i2 + 304 >> 2] = 0;
  HEAPF32[i2 + 308 >> 2] = 1.0;
  HEAP32[i2 + 312 >> 2] = 0;
  HEAP32[i2 + 316 >> 2] = 0;
  HEAP32[i2 + 320 >> 2] = 0;
  HEAP32[i2 + 324 >> 2] = 0;
  HEAPF32[i2 + 328 >> 2] = 1.0;
  HEAP32[i2 + 332 >> 2] = 0;
  HEAP32[i2 + 336 >> 2] = 0;
  HEAP32[i2 + 340 >> 2] = 0;
  HEAP32[i2 + 504 >> 2] = HEAP32[i1 + 92 >> 2];
  HEAP32[i2 + 508 >> 2] = HEAP32[i1 + 96 >> 2];
  HEAP32[i2 + 512 >> 2] = HEAP32[i1 + 100 >> 2];
  HEAP32[i2 + 516 >> 2] = HEAP32[i1 + 104 >> 2];
  HEAP32[i2 + 440 >> 2] = HEAP32[i1 + 112 >> 2];
  HEAP32[i2 + 444 >> 2] = HEAP32[i1 + 116 >> 2];
  HEAP32[i2 + 448 >> 2] = HEAP32[i1 + 120 >> 2];
  HEAP32[i2 + 452 >> 2] = HEAP32[i1 + 124 >> 2];
  HEAPF32[i2 + 336 >> 2] = d14 - d6;
  HEAPF32[i2 + 340 >> 2] = d12 - d5;
  HEAPF32[i2 + 344 >> 2] = d11 - d7;
  HEAPF32[i2 + 348 >> 2] = 0.0;
  if ((HEAP8[i1 + 170 >> 0] | 0) == 0) {
   __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i4, HEAP32[i1 + 12 >> 2] | 0, i2 + 456 | 0, i2 + 392 | 0, i2 + 168 | 0, +HEAPF32[i4 + 56 >> 2]);
   if (!(+HEAPF32[i8 >> 2] < 1.0)) __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i4, HEAP32[i1 + 12 >> 2] | 0, i2 + 456 | 0, i2 + 288 | 0, i2 + 64 | 0, +HEAPF32[i4 + 56 >> 2]);
  } else {
   __ZNK13btGhostObject15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RN16btCollisionWorld20ConvexResultCallbackEf(HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, i2 + 456 | 0, i2 + 392 | 0, i2 + 168 | 0, +HEAPF32[i4 + 56 >> 2]);
   if (!(+HEAPF32[i8 >> 2] < 1.0)) __ZNK13btGhostObject15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RN16btCollisionWorld20ConvexResultCallbackEf(HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, i2 + 456 | 0, i2 + 288 | 0, i2 + 64 | 0, +HEAPF32[i4 + 56 >> 2]);
  }
  d11 = +HEAPF32[i1 + 16 >> 2];
  if (d11 < 0.0) d12 = -d11; else d12 = 0.0;
  d14 = d12 * d3;
  i10 = (HEAP8[i1 + 182 >> 0] | 0) == 0;
  if (!i10 ? +HEAPF32[i8 >> 2] < 1.0 : 0) i13 = 1; else i13 = +HEAPF32[i2 + 68 >> 2] < 1.0;
  if (!(d14 > 0.0)) break;
  d12 = +HEAPF32[i1 + 52 >> 2];
  if (!(d14 < d12) | i13 ^ 1 | i9) break;
  if ((HEAP8[i1 + 168 >> 0] | 0) == 0 ? (HEAP8[i1 + 169 >> 0] | 0) != 0 : 0) {
   i9 = 0;
   break;
  }
  HEAP32[i1 + 112 >> 2] = HEAP32[i2 + 272 >> 2];
  HEAP32[i1 + 116 >> 2] = HEAP32[i2 + 276 >> 2];
  HEAP32[i1 + 120 >> 2] = HEAP32[i2 + 280 >> 2];
  HEAP32[i1 + 124 >> 2] = HEAP32[i2 + 284 >> 2];
  i9 = HEAP32[i1 + 176 >> 2] | 0;
  do if ((HEAP8[2736] | 0) == 0) {
   if ((___cxa_guard_acquire(2736) | 0) == 0) break;
   HEAPF32[672] = 1.0;
   HEAP32[673] = 0;
   HEAP32[674] = 0;
   HEAP32[675] = 0;
   HEAP32[676] = 0;
   HEAPF32[677] = 1.0;
   HEAP32[678] = 0;
   HEAP32[679] = 0;
   HEAP32[680] = 0;
   HEAP32[681] = 0;
   HEAPF32[682] = 1.0;
   HEAPF32[683] = 0.0;
   ___cxa_guard_release(2736);
  } while (0);
  d14 = d12 + +HEAPF32[i1 + 108 >> 2];
  d12 = d14 * +HEAPF32[2692 + (i9 << 4) >> 2];
  d11 = d14 * +HEAPF32[2696 + (i9 << 4) >> 2];
  d14 = +HEAPF32[i1 + 112 >> 2] - +HEAPF32[2688 + (i9 << 4) >> 2] * d14;
  HEAPF32[i1 + 112 >> 2] = d14;
  d12 = +HEAPF32[i1 + 116 >> 2] - d12;
  HEAPF32[i1 + 116 >> 2] = d12;
  d11 = +HEAPF32[i1 + 120 >> 2] - d11;
  HEAPF32[i1 + 120 >> 2] = d11;
  i9 = 1;
 }
 d12 = +HEAPF32[i8 >> 2];
 if (d12 < 1.0 | i9) {
  d5 = +HEAPF32[i1 + 96 >> 2];
  d3 = (d5 - +HEAPF32[i2 + 232 >> 2]) * .5;
  do if (!i10) if ((HEAP8[i1 + 181 >> 0] | 0) == 0) {
   HEAPF32[i1 + 92 >> 2] = (1.0 - d3) * +HEAPF32[i1 + 92 >> 2] + d3 * +HEAPF32[i1 + 112 >> 2];
   HEAPF32[i1 + 96 >> 2] = (1.0 - d3) * d5 + d3 * +HEAPF32[i1 + 116 >> 2];
   HEAPF32[i1 + 100 >> 2] = (1.0 - d3) * +HEAPF32[i1 + 100 >> 2] + d3 * +HEAPF32[i1 + 120 >> 2];
   i4 = i1 + 181 | 0;
   break;
  } else {
   HEAPF32[i1 + 92 >> 2] = (1.0 - d12) * +HEAPF32[i1 + 92 >> 2] + d12 * +HEAPF32[i1 + 112 >> 2];
   HEAPF32[i1 + 96 >> 2] = (1.0 - d12) * d5 + d12 * +HEAPF32[i1 + 116 >> 2];
   HEAPF32[i1 + 100 >> 2] = (1.0 - d12) * +HEAPF32[i1 + 100 >> 2] + d12 * +HEAPF32[i1 + 120 >> 2];
   i4 = i1 + 181 | 0;
   break;
  } else {
   HEAPF32[i1 + 92 >> 2] = (1.0 - d12) * +HEAPF32[i1 + 92 >> 2] + d12 * +HEAPF32[i1 + 112 >> 2];
   HEAPF32[i1 + 96 >> 2] = (1.0 - d12) * d5 + d12 * +HEAPF32[i1 + 116 >> 2];
   HEAPF32[i1 + 100 >> 2] = (1.0 - d12) * +HEAPF32[i1 + 100 >> 2] + d12 * +HEAPF32[i1 + 120 >> 2];
   i4 = i1 + 181 | 0;
  } while (0);
  HEAP8[i4 >> 0] = 0;
  HEAPF32[i1 + 16 >> 2] = 0.0;
  HEAPF32[i1 + 20 >> 2] = 0.0;
  HEAP8[i1 + 169 >> 0] = 0;
 } else {
  HEAP8[i1 + 181 >> 0] = 1;
  do if (!i10) {
   if (d11 < 0.0) d12 = -d11; else d12 = 0.0;
   d11 = +HEAPF32[i1 + 24 >> 2];
   if (d12 * d3 > d11) {
    if ((HEAP8[i1 + 168 >> 0] | 0) == 0 ? (HEAP8[i1 + 169 >> 0] | 0) != 0 : 0) break;
    HEAPF32[i1 + 112 >> 2] = d6 + +HEAPF32[i1 + 112 >> 2];
    HEAPF32[i1 + 116 >> 2] = d5 + +HEAPF32[i1 + 116 >> 2];
    HEAPF32[i1 + 120 >> 2] = d7 + +HEAPF32[i1 + 120 >> 2];
    i4 = HEAP32[i1 + 176 >> 2] | 0;
    do if ((HEAP8[2736] | 0) == 0) {
     if ((___cxa_guard_acquire(2736) | 0) == 0) break;
     HEAPF32[672] = 1.0;
     HEAP32[673] = 0;
     HEAP32[674] = 0;
     HEAP32[675] = 0;
     HEAP32[676] = 0;
     HEAPF32[677] = 1.0;
     HEAP32[678] = 0;
     HEAP32[679] = 0;
     HEAP32[680] = 0;
     HEAP32[681] = 0;
     HEAPF32[682] = 1.0;
     HEAPF32[683] = 0.0;
     ___cxa_guard_release(2736);
    } while (0);
    d11 = d11 + +HEAPF32[i1 + 108 >> 2];
    d12 = d11 * +HEAPF32[2692 + (i4 << 4) >> 2];
    d14 = d11 * +HEAPF32[2696 + (i4 << 4) >> 2];
    HEAPF32[i1 + 112 >> 2] = +HEAPF32[i1 + 112 >> 2] - +HEAPF32[2688 + (i4 << 4) >> 2] * d11;
    HEAPF32[i1 + 116 >> 2] = +HEAPF32[i1 + 116 >> 2] - d12;
    HEAPF32[i1 + 120 >> 2] = +HEAPF32[i1 + 120 >> 2] - d14;
   }
  } while (0);
  HEAP32[i1 + 92 >> 2] = HEAP32[i1 + 112 >> 2];
  HEAP32[i1 + 96 >> 2] = HEAP32[i1 + 116 >> 2];
  HEAP32[i1 + 100 >> 2] = HEAP32[i1 + 120 >> 2];
  HEAP32[i1 + 104 >> 2] = HEAP32[i1 + 124 >> 2];
 }
 HEAP32[i2 + 48 >> 2] = HEAP32[i1 + 92 >> 2];
 HEAP32[i2 + 52 >> 2] = HEAP32[i1 + 96 >> 2];
 HEAP32[i2 + 56 >> 2] = HEAP32[i1 + 100 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i1 + 104 >> 2];
 i13 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i13 + 260 >> 2] = (HEAP32[i13 + 260 >> 2] | 0) + 1;
 HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i13 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i13 + 20 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i13 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i13 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i13 + 32 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i13 + 36 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i13 + 40 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i13 + 44 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i13 + 48 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i13 + 52 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i13 + 56 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i13 + 60 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i13 + 64 >> 2] = HEAP32[i2 + 60 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEf(i7, i8, i9, i2, i3, d6) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d6 = +d6;
 var i1 = 0, i4 = 0, i5 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, i25 = 0, i26 = 0, i27 = 0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 1664 | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i5 = HEAP32[i2 + 12 >> 2] | 0;
 i25 = HEAP32[i4 + 4 >> 2] | 0;
 if ((i25 | 0) < 20) {
  HEAP32[i1 + 1424 >> 2] = 9440;
  HEAP32[i1 + 1592 >> 2] = 0;
  HEAPF32[i1 + 1596 >> 2] = d6;
  HEAPF32[i1 + 1588 >> 2] = +HEAPF32[i3 + 4 >> 2];
  HEAPF32[i1 + 1372 >> 2] = 9999999747378752.0e-20;
  HEAP8[i1 + 1396 >> 0] = 0;
  HEAP32[i1 + 1056 >> 2] = 13248;
  HEAP32[i1 + 1032 >> 2] = 10152;
  HEAP32[i1 + 1036 >> 2] = i1 + 1064;
  HEAP32[i1 + 1040 >> 2] = i1 + 1056;
  HEAP32[i1 + 1044 >> 2] = i7;
  HEAP32[i1 + 1048 >> 2] = i4;
  HEAP32[i1 + 1052 >> 2] = 0;
  if (!(__ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i1 + 1032 | 0, i8, i9, i5, i5, i1 + 1424 | 0) | 0)) {
   STACKTOP = i1;
   return;
  }
  i4 = i1 + 1556 | 0;
  d12 = +HEAPF32[i4 >> 2];
  d11 = +HEAPF32[i1 + 1560 >> 2];
  d10 = +HEAPF32[i1 + 1564 >> 2];
  if (!(d12 * d12 + d11 * d11 + d10 * d10 > 9999999747378752.0e-20)) {
   STACKTOP = i1;
   return;
  }
  d6 = +HEAPF32[i1 + 1588 >> 2];
  if (!(d6 < +HEAPF32[i3 + 4 >> 2])) {
   STACKTOP = i1;
   return;
  }
  d24 = 1.0 / +Math_sqrt(+(d12 * d12 + d11 * d11 + d10 * d10));
  HEAPF32[i4 >> 2] = d12 * d24;
  HEAPF32[i1 + 1560 >> 2] = d11 * d24;
  HEAPF32[i1 + 1564 >> 2] = d10 * d24;
  HEAP32[i1 + 984 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 988 >> 2] = 0;
  HEAP32[i1 + 992 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i1 + 996 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i1 + 1e3 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i1 + 1004 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i1 + 1008 >> 2] = HEAP32[i1 + 1572 >> 2];
  HEAP32[i1 + 1012 >> 2] = HEAP32[i1 + 1576 >> 2];
  HEAP32[i1 + 1016 >> 2] = HEAP32[i1 + 1580 >> 2];
  HEAP32[i1 + 1020 >> 2] = HEAP32[i1 + 1584 >> 2];
  HEAPF32[i1 + 1024 >> 2] = d6;
  +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 15](i3, i1 + 984 | 0, 1);
  STACKTOP = i1;
  return;
 }
 if (!((i25 + -21 | 0) >>> 0 < 9)) {
  if ((i25 | 0) != 31) {
   STACKTOP = i1;
   return;
  }
  __ZN15CProfileManager13Start_ProfileEPKc(7544);
  if ((HEAP32[i4 + 16 >> 2] | 0) > 0) {
   i25 = 0;
   do {
    i27 = HEAP32[i4 + 24 >> 2] | 0;
    d10 = +HEAPF32[i27 + (i25 * 80 | 0) >> 2];
    d13 = +HEAPF32[i27 + (i25 * 80 | 0) + 4 >> 2];
    d16 = +HEAPF32[i27 + (i25 * 80 | 0) + 8 >> 2];
    d11 = +HEAPF32[i27 + (i25 * 80 | 0) + 16 >> 2];
    d14 = +HEAPF32[i27 + (i25 * 80 | 0) + 20 >> 2];
    d18 = +HEAPF32[i27 + (i25 * 80 | 0) + 24 >> 2];
    d12 = +HEAPF32[i27 + (i25 * 80 | 0) + 32 >> 2];
    d15 = +HEAPF32[i27 + (i25 * 80 | 0) + 36 >> 2];
    d20 = +HEAPF32[i27 + (i25 * 80 | 0) + 40 >> 2];
    d35 = +HEAPF32[i27 + (i25 * 80 | 0) + 48 >> 2];
    d34 = +HEAPF32[i27 + (i25 * 80 | 0) + 52 >> 2];
    d24 = +HEAPF32[i27 + (i25 * 80 | 0) + 56 >> 2];
    i27 = HEAP32[i27 + (i25 * 80 | 0) + 64 >> 2] | 0;
    d33 = +HEAPF32[i5 >> 2];
    d32 = +HEAPF32[i5 + 4 >> 2];
    d31 = +HEAPF32[i5 + 8 >> 2];
    d30 = +HEAPF32[i5 + 16 >> 2];
    d29 = +HEAPF32[i5 + 20 >> 2];
    d28 = +HEAPF32[i5 + 24 >> 2];
    d17 = +HEAPF32[i5 + 32 >> 2];
    d19 = +HEAPF32[i5 + 36 >> 2];
    d21 = +HEAPF32[i5 + 40 >> 2];
    d22 = d35 * d33 + d34 * d32 + d24 * d31 + +HEAPF32[i5 + 48 >> 2];
    d23 = d35 * d30 + d34 * d29 + d24 * d28 + +HEAPF32[i5 + 52 >> 2];
    d24 = d35 * d17 + d34 * d19 + d24 * d21 + +HEAPF32[i5 + 56 >> 2];
    HEAPF32[i1 + 1600 >> 2] = d10 * d33 + d11 * d32 + d12 * d31;
    HEAPF32[i1 + 1604 >> 2] = d13 * d33 + d14 * d32 + d15 * d31;
    HEAPF32[i1 + 1608 >> 2] = d16 * d33 + d18 * d32 + d20 * d31;
    HEAPF32[i1 + 1612 >> 2] = 0.0;
    HEAPF32[i1 + 1616 >> 2] = d10 * d30 + d11 * d29 + d12 * d28;
    HEAPF32[i1 + 1620 >> 2] = d13 * d30 + d14 * d29 + d15 * d28;
    HEAPF32[i1 + 1624 >> 2] = d16 * d30 + d18 * d29 + d20 * d28;
    HEAPF32[i1 + 1628 >> 2] = 0.0;
    HEAPF32[i1 + 1632 >> 2] = d10 * d17 + d11 * d19 + d12 * d21;
    HEAPF32[i1 + 1636 >> 2] = d13 * d17 + d14 * d19 + d15 * d21;
    HEAPF32[i1 + 1640 >> 2] = d16 * d17 + d18 * d19 + d20 * d21;
    HEAPF32[i1 + 1644 >> 2] = 0.0;
    HEAPF32[i1 + 1648 >> 2] = d22;
    HEAPF32[i1 + 1652 >> 2] = d23;
    HEAPF32[i1 + 1656 >> 2] = d24;
    HEAPF32[i1 + 1660 >> 2] = 0.0;
    HEAP16[i1 + 32 >> 1] = 1;
    HEAP16[i1 + 34 >> 1] = -1;
    HEAP32[i1 + 24 >> 2] = 8024;
    HEAP32[i1 + 36 >> 2] = i3;
    HEAP32[i1 + 40 >> 2] = i25;
    HEAPF32[i1 + 28 >> 2] = +HEAPF32[i3 + 4 >> 2];
    i26 = HEAP32[i2 + 8 >> 2] | 0;
    HEAP32[i1 >> 2] = i2;
    HEAP32[i1 + 4 >> 2] = i27;
    HEAP32[i1 + 8 >> 2] = i26;
    HEAP32[i1 + 12 >> 2] = i1 + 1600;
    HEAP32[i1 + 16 >> 2] = -1;
    HEAP32[i1 + 20 >> 2] = i25;
    __ZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEf(i7, i8, i9, i1, i1 + 24 | 0, d6);
    i25 = i25 + 1 | 0;
   } while ((i25 | 0) < (HEAP32[i4 + 16 >> 2] | 0));
  }
  i2 = HEAP32[5022] | 0;
  i27 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
  HEAP32[i2 + 16 >> 2] = i27;
  if ((i27 | 0) != 0) {
   STACKTOP = i1;
   return;
  }
  do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i1 + 1600 | 0, 0) | 0;
   i27 = HEAP32[5008] | 0;
   HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 1604 >> 2] | 0) - (HEAP32[i27 + 4 >> 2] | 0) + (((HEAP32[i1 + 1600 >> 2] | 0) - (HEAP32[i27 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
   if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
    i2 = HEAP32[5022] | 0;
    break;
   } else {
    STACKTOP = i1;
    return;
   }
  } while (0);
  HEAP32[5022] = HEAP32[i2 + 20 >> 2];
  STACKTOP = i1;
  return;
 }
 if ((i25 | 0) == 28) {
  HEAP32[i1 + 472 >> 2] = 9440;
  HEAP32[i1 + 640 >> 2] = 0;
  HEAPF32[i1 + 644 >> 2] = d6;
  HEAPF32[i1 + 636 >> 2] = +HEAPF32[i3 + 4 >> 2];
  HEAP32[i1 + 448 >> 2] = 10152;
  HEAP32[i1 + 452 >> 2] = 0;
  HEAP32[i1 + 456 >> 2] = 0;
  HEAP32[i1 + 460 >> 2] = i7;
  HEAP32[i1 + 464 >> 2] = 0;
  HEAP32[i1 + 468 >> 2] = i4;
  if (!(__ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i1 + 448 | 0, i8, i9, i5, i5, i1 + 472 | 0) | 0)) {
   STACKTOP = i1;
   return;
  }
  i4 = i1 + 604 | 0;
  d6 = +HEAPF32[i4 >> 2];
  d12 = +HEAPF32[i1 + 608 >> 2];
  d11 = +HEAPF32[i1 + 612 >> 2];
  if (!(d6 * d6 + d12 * d12 + d11 * d11 > 9999999747378752.0e-20)) {
   STACKTOP = i1;
   return;
  }
  d10 = +HEAPF32[i1 + 636 >> 2];
  if (!(d10 < +HEAPF32[i3 + 4 >> 2])) {
   STACKTOP = i1;
   return;
  }
  d35 = 1.0 / +Math_sqrt(+(d6 * d6 + d12 * d12 + d11 * d11));
  HEAPF32[i4 >> 2] = d6 * d35;
  HEAPF32[i1 + 608 >> 2] = d12 * d35;
  HEAPF32[i1 + 612 >> 2] = d11 * d35;
  HEAP32[i1 + 400 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 404 >> 2] = 0;
  HEAP32[i1 + 408 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i1 + 412 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i1 + 416 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i1 + 420 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i1 + 424 >> 2] = HEAP32[i1 + 620 >> 2];
  HEAP32[i1 + 428 >> 2] = HEAP32[i1 + 624 >> 2];
  HEAP32[i1 + 432 >> 2] = HEAP32[i1 + 628 >> 2];
  HEAP32[i1 + 436 >> 2] = HEAP32[i1 + 632 >> 2];
  HEAPF32[i1 + 440 >> 2] = d10;
  +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 15](i3, i1 + 400 | 0, 1);
  STACKTOP = i1;
  return;
 } else if ((i25 | 0) == 21) {
  d22 = +HEAPF32[i5 >> 2];
  d11 = +HEAPF32[i5 + 16 >> 2];
  d12 = +HEAPF32[i5 + 32 >> 2];
  d13 = +HEAPF32[i5 + 4 >> 2];
  d14 = +HEAPF32[i5 + 20 >> 2];
  d15 = +HEAPF32[i5 + 36 >> 2];
  d19 = +HEAPF32[i5 + 8 >> 2];
  d21 = +HEAPF32[i5 + 24 >> 2];
  d23 = +HEAPF32[i5 + 40 >> 2];
  d16 = -+HEAPF32[i5 + 48 >> 2];
  d17 = -+HEAPF32[i5 + 52 >> 2];
  d18 = -+HEAPF32[i5 + 56 >> 2];
  d24 = +HEAPF32[i8 + 48 >> 2];
  d10 = +HEAPF32[i8 + 52 >> 2];
  d20 = +HEAPF32[i8 + 56 >> 2];
  HEAPF32[i1 + 968 >> 2] = d22 * d16 + d11 * d17 + d12 * d18 + (d22 * d24 + d11 * d10 + d12 * d20);
  HEAPF32[i1 + 972 >> 2] = d13 * d16 + d14 * d17 + d15 * d18 + (d13 * d24 + d14 * d10 + d15 * d20);
  HEAPF32[i1 + 976 >> 2] = d19 * d16 + d21 * d17 + d23 * d18 + (d19 * d24 + d21 * d10 + d23 * d20);
  HEAPF32[i1 + 980 >> 2] = 0.0;
  d20 = +HEAPF32[i9 + 48 >> 2];
  d10 = +HEAPF32[i9 + 52 >> 2];
  d24 = +HEAPF32[i9 + 56 >> 2];
  d36 = +HEAPF32[i9 >> 2];
  d28 = +HEAPF32[i9 + 16 >> 2];
  d29 = +HEAPF32[i9 + 32 >> 2];
  d30 = +HEAPF32[i9 + 4 >> 2];
  d31 = +HEAPF32[i9 + 20 >> 2];
  d32 = +HEAPF32[i9 + 36 >> 2];
  d33 = +HEAPF32[i9 + 8 >> 2];
  d34 = +HEAPF32[i9 + 24 >> 2];
  d35 = +HEAPF32[i9 + 40 >> 2];
  HEAPF32[i1 + 904 >> 2] = d22 * d36 + d11 * d28 + d12 * d29;
  HEAPF32[i1 + 908 >> 2] = d22 * d30 + d11 * d31 + d12 * d32;
  HEAPF32[i1 + 912 >> 2] = d22 * d33 + d11 * d34 + d12 * d35;
  HEAPF32[i1 + 916 >> 2] = 0.0;
  HEAPF32[i1 + 920 >> 2] = d13 * d36 + d14 * d28 + d15 * d29;
  HEAPF32[i1 + 924 >> 2] = d13 * d30 + d14 * d31 + d15 * d32;
  HEAPF32[i1 + 928 >> 2] = d13 * d33 + d14 * d34 + d15 * d35;
  HEAPF32[i1 + 932 >> 2] = 0.0;
  HEAPF32[i1 + 936 >> 2] = d19 * d36 + d21 * d28 + d23 * d29;
  HEAPF32[i1 + 940 >> 2] = d19 * d30 + d21 * d31 + d23 * d32;
  HEAPF32[i1 + 944 >> 2] = d19 * d33 + d21 * d34 + d23 * d35;
  i27 = i1 + 948 | 0;
  HEAP32[i27 + 0 >> 2] = 0;
  HEAP32[i27 + 4 >> 2] = 0;
  HEAP32[i27 + 8 >> 2] = 0;
  HEAP32[i27 + 12 >> 2] = 0;
  HEAP32[i27 + 16 >> 2] = 0;
  i2 = HEAP32[i2 + 8 >> 2] | 0;
  d35 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
  HEAP32[i1 + 680 >> 2] = 16256;
  HEAP32[i1 + 684 >> 2] = i7;
  HEAP32[i1 + 688 >> 2] = HEAP32[i8 + 0 >> 2];
  HEAP32[i1 + 692 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i1 + 696 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i1 + 700 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i1 + 704 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP32[i1 + 708 >> 2] = HEAP32[i8 + 20 >> 2];
  HEAP32[i1 + 712 >> 2] = HEAP32[i8 + 24 >> 2];
  HEAP32[i1 + 716 >> 2] = HEAP32[i8 + 28 >> 2];
  HEAP32[i1 + 720 >> 2] = HEAP32[i8 + 32 >> 2];
  HEAP32[i1 + 724 >> 2] = HEAP32[i8 + 36 >> 2];
  HEAP32[i1 + 728 >> 2] = HEAP32[i8 + 40 >> 2];
  HEAP32[i1 + 732 >> 2] = HEAP32[i8 + 44 >> 2];
  HEAP32[i1 + 736 >> 2] = HEAP32[i8 + 48 >> 2];
  HEAP32[i1 + 740 >> 2] = HEAP32[i8 + 52 >> 2];
  HEAP32[i1 + 744 >> 2] = HEAP32[i8 + 56 >> 2];
  HEAP32[i1 + 748 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i1 + 752 >> 2] = HEAP32[i9 + 0 >> 2];
  HEAP32[i1 + 756 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i1 + 760 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i1 + 764 >> 2] = HEAP32[i9 + 12 >> 2];
  HEAP32[i1 + 768 >> 2] = HEAP32[i9 + 16 >> 2];
  HEAP32[i1 + 772 >> 2] = HEAP32[i9 + 20 >> 2];
  HEAP32[i1 + 776 >> 2] = HEAP32[i9 + 24 >> 2];
  HEAP32[i1 + 780 >> 2] = HEAP32[i9 + 28 >> 2];
  HEAP32[i1 + 784 >> 2] = HEAP32[i9 + 32 >> 2];
  HEAP32[i1 + 788 >> 2] = HEAP32[i9 + 36 >> 2];
  HEAP32[i1 + 792 >> 2] = HEAP32[i9 + 40 >> 2];
  HEAP32[i1 + 796 >> 2] = HEAP32[i9 + 44 >> 2];
  HEAP32[i1 + 800 >> 2] = HEAP32[i9 + 48 >> 2];
  HEAP32[i1 + 804 >> 2] = HEAP32[i9 + 52 >> 2];
  HEAP32[i1 + 808 >> 2] = HEAP32[i9 + 56 >> 2];
  HEAP32[i1 + 812 >> 2] = HEAP32[i9 + 60 >> 2];
  HEAP32[i1 + 816 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i1 + 820 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i1 + 824 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i1 + 828 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i1 + 832 >> 2] = HEAP32[i5 + 16 >> 2];
  HEAP32[i1 + 836 >> 2] = HEAP32[i5 + 20 >> 2];
  HEAP32[i1 + 840 >> 2] = HEAP32[i5 + 24 >> 2];
  HEAP32[i1 + 844 >> 2] = HEAP32[i5 + 28 >> 2];
  HEAP32[i1 + 848 >> 2] = HEAP32[i5 + 32 >> 2];
  HEAP32[i1 + 852 >> 2] = HEAP32[i5 + 36 >> 2];
  HEAP32[i1 + 856 >> 2] = HEAP32[i5 + 40 >> 2];
  HEAP32[i1 + 860 >> 2] = HEAP32[i5 + 44 >> 2];
  HEAP32[i1 + 864 >> 2] = HEAP32[i5 + 48 >> 2];
  HEAP32[i1 + 868 >> 2] = HEAP32[i5 + 52 >> 2];
  HEAP32[i1 + 872 >> 2] = HEAP32[i5 + 56 >> 2];
  HEAP32[i1 + 876 >> 2] = HEAP32[i5 + 60 >> 2];
  HEAPF32[i1 + 884 >> 2] = d35;
  HEAP32[i1 + 680 >> 2] = 8448;
  HEAP32[i1 + 892 >> 2] = i3;
  HEAP32[i1 + 896 >> 2] = i2;
  HEAP32[i1 + 900 >> 2] = i4;
  HEAPF32[i1 + 880 >> 2] = +HEAPF32[i3 + 4 >> 2];
  HEAPF32[i1 + 888 >> 2] = d6;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 127](i7, i1 + 904 | 0, i1 + 664 | 0, i1 + 648 | 0);
  i2 = HEAP32[i4 + 48 >> 2] | 0;
  HEAP32[i1 + 1600 >> 2] = 5992;
  HEAP32[i1 + 1604 >> 2] = i2;
  HEAP32[i1 + 1608 >> 2] = i1 + 680;
  i2 = HEAP32[i4 + 52 >> 2] | 0;
  if ((HEAP8[i2 + 60 >> 0] | 0) == 0) {
   __ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i2, i1 + 1600 | 0, i1 + 968 | 0, d22 * d16 + d11 * d17 + d12 * d18 + (d22 * d20 + d11 * d10 + d12 * d24), d13 * d16 + d14 * d17 + d15 * d18 + (d13 * d20 + d14 * d10 + d15 * d24), d19 * d16 + d21 * d17 + d23 * d18 + (d19 * d20 + d21 * d10 + d23 * d24), i1 + 664 | 0, i1 + 648 | 0);
   STACKTOP = i1;
   return;
  } else {
   __ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i2, i1 + 1600 | 0, i1 + 968 | 0, d22 * d16 + d11 * d17 + d12 * d18 + (d22 * d20 + d11 * d10 + d12 * d24), d13 * d16 + d14 * d17 + d15 * d18 + (d13 * d20 + d14 * d10 + d15 * d24), d19 * d16 + d21 * d17 + d23 * d18 + (d19 * d20 + d21 * d10 + d23 * d24), i1 + 664 | 0, i1 + 648 | 0, HEAP32[i2 + 56 >> 2] | 0);
   STACKTOP = i1;
   return;
  }
 } else {
  d16 = +HEAPF32[i5 >> 2];
  d17 = +HEAPF32[i5 + 16 >> 2];
  d18 = +HEAPF32[i5 + 32 >> 2];
  d19 = +HEAPF32[i5 + 4 >> 2];
  d20 = +HEAPF32[i5 + 20 >> 2];
  d21 = +HEAPF32[i5 + 36 >> 2];
  d31 = +HEAPF32[i5 + 8 >> 2];
  d33 = +HEAPF32[i5 + 24 >> 2];
  d35 = +HEAPF32[i5 + 40 >> 2];
  d29 = -+HEAPF32[i5 + 48 >> 2];
  d28 = -+HEAPF32[i5 + 52 >> 2];
  d24 = -+HEAPF32[i5 + 56 >> 2];
  d22 = +HEAPF32[i8 + 48 >> 2];
  d23 = +HEAPF32[i8 + 52 >> 2];
  d11 = +HEAPF32[i8 + 56 >> 2];
  d14 = d16 * d29 + d17 * d28 + d18 * d24 + (d16 * d22 + d17 * d23 + d18 * d11);
  d13 = d19 * d29 + d20 * d28 + d21 * d24 + (d19 * d22 + d20 * d23 + d21 * d11);
  d11 = d31 * d29 + d33 * d28 + d35 * d24 + (d31 * d22 + d33 * d23 + d35 * d11);
  d23 = +HEAPF32[i9 + 48 >> 2];
  d22 = +HEAPF32[i9 + 52 >> 2];
  d10 = +HEAPF32[i9 + 56 >> 2];
  d15 = d16 * d29 + d17 * d28 + d18 * d24 + (d16 * d23 + d17 * d22 + d18 * d10);
  d12 = d19 * d29 + d20 * d28 + d21 * d24 + (d19 * d23 + d20 * d22 + d21 * d10);
  d10 = d31 * d29 + d33 * d28 + d35 * d24 + (d31 * d23 + d33 * d22 + d35 * d10);
  d22 = +HEAPF32[i9 >> 2];
  d23 = +HEAPF32[i9 + 16 >> 2];
  d24 = +HEAPF32[i9 + 32 >> 2];
  d28 = +HEAPF32[i9 + 4 >> 2];
  d29 = +HEAPF32[i9 + 20 >> 2];
  d30 = +HEAPF32[i9 + 36 >> 2];
  d32 = +HEAPF32[i9 + 8 >> 2];
  d34 = +HEAPF32[i9 + 24 >> 2];
  d36 = +HEAPF32[i9 + 40 >> 2];
  HEAPF32[i1 + 336 >> 2] = d16 * d22 + d17 * d23 + d18 * d24;
  HEAPF32[i1 + 340 >> 2] = d16 * d28 + d17 * d29 + d18 * d30;
  HEAPF32[i1 + 344 >> 2] = d16 * d32 + d17 * d34 + d18 * d36;
  HEAPF32[i1 + 348 >> 2] = 0.0;
  HEAPF32[i1 + 352 >> 2] = d19 * d22 + d20 * d23 + d21 * d24;
  HEAPF32[i1 + 356 >> 2] = d19 * d28 + d20 * d29 + d21 * d30;
  HEAPF32[i1 + 360 >> 2] = d19 * d32 + d20 * d34 + d21 * d36;
  HEAPF32[i1 + 364 >> 2] = 0.0;
  HEAPF32[i1 + 368 >> 2] = d31 * d22 + d33 * d23 + d35 * d24;
  HEAPF32[i1 + 372 >> 2] = d31 * d28 + d33 * d29 + d35 * d30;
  HEAPF32[i1 + 376 >> 2] = d31 * d32 + d33 * d34 + d35 * d36;
  i27 = i1 + 380 | 0;
  HEAP32[i27 + 0 >> 2] = 0;
  HEAP32[i27 + 4 >> 2] = 0;
  HEAP32[i27 + 8 >> 2] = 0;
  HEAP32[i27 + 12 >> 2] = 0;
  HEAP32[i27 + 16 >> 2] = 0;
  i27 = HEAP32[i2 + 8 >> 2] | 0;
  d36 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
  HEAP32[i1 + 112 >> 2] = 16256;
  HEAP32[i1 + 116 >> 2] = i7;
  HEAP32[i1 + 120 >> 2] = HEAP32[i8 + 0 >> 2];
  HEAP32[i1 + 124 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i1 + 128 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i1 + 132 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i1 + 136 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP32[i1 + 140 >> 2] = HEAP32[i8 + 20 >> 2];
  HEAP32[i1 + 144 >> 2] = HEAP32[i8 + 24 >> 2];
  HEAP32[i1 + 148 >> 2] = HEAP32[i8 + 28 >> 2];
  HEAP32[i1 + 152 >> 2] = HEAP32[i8 + 32 >> 2];
  HEAP32[i1 + 156 >> 2] = HEAP32[i8 + 36 >> 2];
  HEAP32[i1 + 160 >> 2] = HEAP32[i8 + 40 >> 2];
  HEAP32[i1 + 164 >> 2] = HEAP32[i8 + 44 >> 2];
  HEAP32[i1 + 168 >> 2] = HEAP32[i8 + 48 >> 2];
  HEAP32[i1 + 172 >> 2] = HEAP32[i8 + 52 >> 2];
  HEAP32[i1 + 176 >> 2] = HEAP32[i8 + 56 >> 2];
  HEAP32[i1 + 180 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i1 + 184 >> 2] = HEAP32[i9 + 0 >> 2];
  HEAP32[i1 + 188 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i1 + 192 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i1 + 196 >> 2] = HEAP32[i9 + 12 >> 2];
  HEAP32[i1 + 200 >> 2] = HEAP32[i9 + 16 >> 2];
  HEAP32[i1 + 204 >> 2] = HEAP32[i9 + 20 >> 2];
  HEAP32[i1 + 208 >> 2] = HEAP32[i9 + 24 >> 2];
  HEAP32[i1 + 212 >> 2] = HEAP32[i9 + 28 >> 2];
  HEAP32[i1 + 216 >> 2] = HEAP32[i9 + 32 >> 2];
  HEAP32[i1 + 220 >> 2] = HEAP32[i9 + 36 >> 2];
  HEAP32[i1 + 224 >> 2] = HEAP32[i9 + 40 >> 2];
  HEAP32[i1 + 228 >> 2] = HEAP32[i9 + 44 >> 2];
  HEAP32[i1 + 232 >> 2] = HEAP32[i9 + 48 >> 2];
  HEAP32[i1 + 236 >> 2] = HEAP32[i9 + 52 >> 2];
  HEAP32[i1 + 240 >> 2] = HEAP32[i9 + 56 >> 2];
  HEAP32[i1 + 244 >> 2] = HEAP32[i9 + 60 >> 2];
  HEAP32[i1 + 248 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i1 + 252 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i1 + 256 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i1 + 260 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i1 + 264 >> 2] = HEAP32[i5 + 16 >> 2];
  HEAP32[i1 + 268 >> 2] = HEAP32[i5 + 20 >> 2];
  HEAP32[i1 + 272 >> 2] = HEAP32[i5 + 24 >> 2];
  HEAP32[i1 + 276 >> 2] = HEAP32[i5 + 28 >> 2];
  HEAP32[i1 + 280 >> 2] = HEAP32[i5 + 32 >> 2];
  HEAP32[i1 + 284 >> 2] = HEAP32[i5 + 36 >> 2];
  HEAP32[i1 + 288 >> 2] = HEAP32[i5 + 40 >> 2];
  HEAP32[i1 + 292 >> 2] = HEAP32[i5 + 44 >> 2];
  HEAP32[i1 + 296 >> 2] = HEAP32[i5 + 48 >> 2];
  HEAP32[i1 + 300 >> 2] = HEAP32[i5 + 52 >> 2];
  HEAP32[i1 + 304 >> 2] = HEAP32[i5 + 56 >> 2];
  HEAP32[i1 + 308 >> 2] = HEAP32[i5 + 60 >> 2];
  HEAPF32[i1 + 316 >> 2] = d36;
  HEAP32[i1 + 112 >> 2] = 8224;
  HEAP32[i1 + 324 >> 2] = i3;
  HEAP32[i1 + 328 >> 2] = i27;
  HEAP32[i1 + 332 >> 2] = i4;
  HEAPF32[i1 + 312 >> 2] = +HEAPF32[i3 + 4 >> 2];
  HEAPF32[i1 + 320 >> 2] = d6;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 127](i7, i1 + 336 | 0, i1 + 96 | 0, i1 + 80 | 0);
  HEAPF32[i1 + 64 >> 2] = d14;
  HEAPF32[i1 + 68 >> 2] = d13;
  HEAPF32[i1 + 72 >> 2] = d11;
  HEAPF32[i1 + 76 >> 2] = 0.0;
  if (d15 < d14) {
   HEAPF32[i1 + 64 >> 2] = d15;
   d17 = d15;
  } else d17 = d14;
  if (d12 < d13) {
   HEAPF32[i1 + 68 >> 2] = d12;
   d16 = d12;
  } else d16 = d13;
  if (d10 < d11) {
   HEAPF32[i1 + 72 >> 2] = d10;
   d6 = d10;
  } else d6 = d11;
  HEAPF32[i1 + 48 >> 2] = d14;
  HEAPF32[i1 + 52 >> 2] = d13;
  HEAPF32[i1 + 56 >> 2] = d11;
  HEAPF32[i1 + 60 >> 2] = 0.0;
  if (d14 < d15) {
   HEAPF32[i1 + 48 >> 2] = d15;
   d14 = d15;
  }
  if (d13 < d12) HEAPF32[i1 + 52 >> 2] = d12; else d12 = d13;
  if (d11 < d10) HEAPF32[i1 + 56 >> 2] = d10; else d10 = d11;
  HEAPF32[i1 + 64 >> 2] = +HEAPF32[i1 + 96 >> 2] + d17;
  HEAPF32[i1 + 68 >> 2] = +HEAPF32[i1 + 100 >> 2] + d16;
  HEAPF32[i1 + 72 >> 2] = +HEAPF32[i1 + 104 >> 2] + d6;
  HEAPF32[i1 + 48 >> 2] = +HEAPF32[i1 + 80 >> 2] + d14;
  HEAPF32[i1 + 52 >> 2] = +HEAPF32[i1 + 84 >> 2] + d12;
  HEAPF32[i1 + 56 >> 2] = +HEAPF32[i1 + 88 >> 2] + d10;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 64 >> 2] & 127](i4, i1 + 112 | 0, i1 + 64 | 0, i1 + 48 | 0);
  STACKTOP = i1;
  return;
 }
}
function __ZN16btRaycastVehicle14updateFrictionEf(i2, d5) {
 i2 = i2 | 0;
 d5 = +d5;
 var i1 = 0, i3 = 0, d4 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i6 = HEAP32[i2 + 136 >> 2] | 0;
 if ((i6 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i7 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i7 | 0) < (i6 | 0)) {
  if ((HEAP32[i2 + 12 >> 2] | 0) < (i6 | 0)) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i8 = _malloc((i6 << 4 | 3) + 16 | 0) | 0;
   if ((i8 | 0) == 0) i8 = 0; else {
    HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
    i8 = i8 + 19 & -16;
   }
   i9 = HEAP32[i2 + 8 >> 2] | 0;
   if ((i9 | 0) > 0) {
    i10 = 0;
    do {
     i15 = i8 + (i10 << 4) | 0;
     i13 = (HEAP32[i2 + 16 >> 2] | 0) + (i10 << 4) | 0;
     HEAP32[i15 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i15 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i15 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i15 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     i10 = i10 + 1 | 0;
    } while ((i10 | 0) != (i9 | 0));
   }
   i9 = HEAP32[i2 + 16 >> 2] | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i2 + 20 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i9 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 16 >> 2] = 0;
   }
   HEAP8[i2 + 20 >> 0] = 1;
   HEAP32[i2 + 16 >> 2] = i8;
   HEAP32[i2 + 12 >> 2] = i6;
   i8 = i2 + 16 | 0;
  } else i8 = i2 + 16 | 0;
  do {
   i15 = (HEAP32[i8 >> 2] | 0) + (i7 << 4) | 0;
   HEAP32[i15 + 0 >> 2] = HEAP32[i1 + 144 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i1 + 148 >> 2];
   HEAP32[i15 + 8 >> 2] = HEAP32[i1 + 152 >> 2];
   HEAP32[i15 + 12 >> 2] = HEAP32[i1 + 156 >> 2];
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 HEAP32[i2 + 8 >> 2] = i6;
 i7 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i7 | 0) < (i6 | 0)) {
  if ((HEAP32[i2 + 32 >> 2] | 0) < (i6 | 0)) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i8 = _malloc((i6 << 4 | 3) + 16 | 0) | 0;
   if ((i8 | 0) == 0) i8 = 0; else {
    HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
    i8 = i8 + 19 & -16;
   }
   i10 = HEAP32[i2 + 28 >> 2] | 0;
   if ((i10 | 0) > 0) {
    i9 = 0;
    do {
     i15 = i8 + (i9 << 4) | 0;
     i13 = (HEAP32[i2 + 36 >> 2] | 0) + (i9 << 4) | 0;
     HEAP32[i15 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i15 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i15 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i15 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) != (i10 | 0));
   }
   i9 = HEAP32[i2 + 36 >> 2] | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i2 + 40 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i9 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 36 >> 2] = 0;
   }
   HEAP8[i2 + 40 >> 0] = 1;
   HEAP32[i2 + 36 >> 2] = i8;
   HEAP32[i2 + 32 >> 2] = i6;
   i8 = i2 + 36 | 0;
  } else i8 = i2 + 36 | 0;
  do {
   i15 = (HEAP32[i8 >> 2] | 0) + (i7 << 4) | 0;
   HEAP32[i15 + 0 >> 2] = HEAP32[i1 + 128 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i1 + 132 >> 2];
   HEAP32[i15 + 8 >> 2] = HEAP32[i1 + 136 >> 2];
   HEAP32[i15 + 12 >> 2] = HEAP32[i1 + 140 >> 2];
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 HEAP32[i2 + 28 >> 2] = i6;
 i7 = HEAP32[i2 + 48 >> 2] | 0;
 if ((i7 | 0) < (i6 | 0)) {
  if ((HEAP32[i2 + 52 >> 2] | 0) < (i6 | 0)) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i8 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
   if ((i8 | 0) == 0) i8 = 0; else {
    HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
    i8 = i8 + 19 & -16;
   }
   i9 = HEAP32[i2 + 48 >> 2] | 0;
   if ((i9 | 0) > 0) {
    i10 = 0;
    do {
     i11 = i8 + (i10 << 2) | 0;
     if ((i11 | 0) != 0) HEAPF32[i11 >> 2] = +HEAPF32[(HEAP32[i2 + 56 >> 2] | 0) + (i10 << 2) >> 2];
     i10 = i10 + 1 | 0;
    } while ((i10 | 0) != (i9 | 0));
   }
   i9 = HEAP32[i2 + 56 >> 2] | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i2 + 60 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i9 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 56 >> 2] = 0;
   }
   HEAP8[i2 + 60 >> 0] = 1;
   HEAP32[i2 + 56 >> 2] = i8;
   HEAP32[i2 + 52 >> 2] = i6;
  } else i8 = HEAP32[i2 + 56 >> 2] | 0;
  do {
   i9 = i8 + (i7 << 2) | 0;
   if ((i9 | 0) != 0) HEAPF32[i9 >> 2] = 0.0;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 HEAP32[i2 + 48 >> 2] = i6;
 i7 = HEAP32[i2 + 68 >> 2] | 0;
 if ((i7 | 0) < (i6 | 0)) {
  if ((HEAP32[i2 + 72 >> 2] | 0) < (i6 | 0)) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i8 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
   if ((i8 | 0) == 0) i8 = 0; else {
    HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
    i8 = i8 + 19 & -16;
   }
   i10 = HEAP32[i2 + 68 >> 2] | 0;
   if ((i10 | 0) > 0) {
    i9 = 0;
    do {
     i11 = i8 + (i9 << 2) | 0;
     if ((i11 | 0) != 0) HEAPF32[i11 >> 2] = +HEAPF32[(HEAP32[i2 + 76 >> 2] | 0) + (i9 << 2) >> 2];
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) != (i10 | 0));
   }
   i9 = HEAP32[i2 + 76 >> 2] | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i2 + 80 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i9 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 76 >> 2] = 0;
   }
   HEAP8[i2 + 80 >> 0] = 1;
   HEAP32[i2 + 76 >> 2] = i8;
   HEAP32[i2 + 72 >> 2] = i6;
  } else i8 = HEAP32[i2 + 76 >> 2] | 0;
  do {
   i9 = i8 + (i7 << 2) | 0;
   if ((i9 | 0) != 0) HEAPF32[i9 >> 2] = 0.0;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 HEAP32[i2 + 68 >> 2] = i6;
 i9 = HEAP32[i2 + 136 >> 2] | 0;
 if ((i9 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i7 = HEAP32[i2 + 76 >> 2] | 0;
 i8 = HEAP32[i2 + 56 >> 2] | 0;
 i6 = 0;
 do {
  HEAPF32[i7 + (i6 << 2) >> 2] = 0.0;
  HEAPF32[i8 + (i6 << 2) >> 2] = 0.0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (i9 | 0));
 i6 = 0;
 do {
  i7 = HEAP32[i2 + 144 >> 2] | 0;
  i8 = HEAP32[i7 + (i6 * 284 | 0) + 88 >> 2] | 0;
  if ((i8 | 0) != 0) {
   i9 = i7 + (i6 * 284 | 0) + 92 | 0;
   HEAP32[i1 + 80 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i1 + 84 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i1 + 88 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i1 + 92 >> 2] = HEAP32[i9 + 12 >> 2];
   i9 = i7 + (i6 * 284 | 0) + 108 | 0;
   HEAP32[i1 + 96 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i1 + 100 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i1 + 104 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i1 + 108 >> 2] = HEAP32[i9 + 12 >> 2];
   i9 = i7 + (i6 * 284 | 0) + 124 | 0;
   HEAP32[i1 + 112 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i1 + 116 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i1 + 120 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i1 + 124 >> 2] = HEAP32[i9 + 12 >> 2];
   i9 = HEAP32[i2 + 36 >> 2] | 0;
   i21 = HEAP32[i2 + 120 >> 2] | 0;
   d12 = +HEAPF32[i1 + 80 + (i21 << 2) + 16 >> 2];
   d22 = +HEAPF32[i1 + 80 + (i21 << 2) + 32 >> 2];
   HEAPF32[i9 + (i6 << 4) >> 2] = +HEAPF32[i1 + 80 + (i21 << 2) >> 2];
   HEAPF32[i9 + (i6 << 4) + 4 >> 2] = d12;
   HEAPF32[i9 + (i6 << 4) + 8 >> 2] = d22;
   HEAPF32[i9 + (i6 << 4) + 12 >> 2] = 0.0;
   i9 = HEAP32[i2 + 36 >> 2] | 0;
   i21 = i9 + (i6 << 4) | 0;
   d22 = +HEAPF32[i21 >> 2];
   i10 = i7 + (i6 * 284 | 0) | 0;
   d12 = +HEAPF32[i10 >> 2];
   i11 = i9 + (i6 << 4) + 4 | 0;
   d20 = +HEAPF32[i11 >> 2];
   i15 = i7 + (i6 * 284 | 0) + 4 | 0;
   d14 = +HEAPF32[i15 >> 2];
   i9 = i9 + (i6 << 4) + 8 | 0;
   d17 = +HEAPF32[i9 >> 2];
   i13 = i7 + (i6 * 284 | 0) + 8 | 0;
   d19 = +HEAPF32[i13 >> 2];
   d16 = d22 - d12 * (d22 * d12 + d20 * d14 + d17 * d19);
   d18 = d20 - d14 * (d22 * d12 + d20 * d14 + d17 * d19);
   d19 = d17 - d19 * (d22 * d12 + d20 * d14 + d17 * d19);
   d17 = 1.0 / +Math_sqrt(+(d16 * d16 + d18 * d18 + d19 * d19));
   HEAPF32[i21 >> 2] = d16 * d17;
   HEAPF32[i11 >> 2] = d18 * d17;
   HEAPF32[i9 >> 2] = d19 * d17;
   i9 = HEAP32[i2 + 16 >> 2] | 0;
   d14 = +HEAPF32[i15 >> 2];
   d20 = +HEAPF32[i13 >> 2];
   d12 = +HEAPF32[i10 >> 2];
   HEAPF32[i9 + (i6 << 4) >> 2] = d14 * d19 * d17 - d20 * d18 * d17;
   HEAPF32[i9 + (i6 << 4) + 4 >> 2] = d20 * d16 * d17 - d19 * d17 * d12;
   HEAPF32[i9 + (i6 << 4) + 8 >> 2] = d18 * d17 * d12 - d14 * d16 * d17;
   HEAPF32[i9 + (i6 << 4) + 12 >> 2] = 0.0;
   i9 = HEAP32[i2 + 16 >> 2] | 0;
   i10 = i9 + (i6 << 4) | 0;
   d17 = +HEAPF32[i10 >> 2];
   i13 = i9 + (i6 << 4) + 4 | 0;
   d16 = +HEAPF32[i13 >> 2];
   i9 = i9 + (i6 << 4) + 8 | 0;
   d14 = +HEAPF32[i9 >> 2];
   d12 = 1.0 / +Math_sqrt(+(d17 * d17 + d16 * d16 + d14 * d14));
   HEAPF32[i10 >> 2] = d17 * d12;
   HEAPF32[i13 >> 2] = d16 * d12;
   HEAPF32[i9 >> 2] = d14 * d12;
   i9 = HEAP32[i2 + 116 >> 2] | 0;
   i13 = HEAP32[i2 + 36 >> 2] | 0;
   i10 = i13 + (i6 << 4) | 0;
   i15 = (HEAP32[i2 + 76 >> 2] | 0) + (i6 << 2) | 0;
   d12 = +HEAPF32[i10 >> 2];
   i11 = i13 + (i6 << 4) + 4 | 0;
   d14 = +HEAPF32[i11 >> 2];
   i13 = i13 + (i6 << 4) + 8 | 0;
   d16 = +HEAPF32[i13 >> 2];
   if (d12 * d12 + d14 * d14 + d16 * d16 > 1.100000023841858) HEAPF32[i15 >> 2] = 0.0; else {
    d22 = +HEAPF32[i7 + (i6 * 284 | 0) + 16 >> 2];
    d14 = d22 - +HEAPF32[i9 + 52 >> 2];
    d16 = +HEAPF32[i7 + (i6 * 284 | 0) + 20 >> 2];
    d24 = d16 - +HEAPF32[i9 + 56 >> 2];
    d20 = +HEAPF32[i7 + (i6 * 284 | 0) + 24 >> 2];
    d26 = d20 - +HEAPF32[i9 + 60 >> 2];
    HEAPF32[i1 + 360 >> 2] = d14;
    HEAPF32[i1 + 364 >> 2] = d24;
    HEAPF32[i1 + 368 >> 2] = d26;
    HEAPF32[i1 + 372 >> 2] = 0.0;
    d22 = d22 - +HEAPF32[i8 + 52 >> 2];
    d16 = d16 - +HEAPF32[i8 + 56 >> 2];
    d20 = d20 - +HEAPF32[i8 + 60 >> 2];
    HEAPF32[i1 + 344 >> 2] = d22;
    HEAPF32[i1 + 348 >> 2] = d16;
    HEAPF32[i1 + 352 >> 2] = d20;
    HEAPF32[i1 + 356 >> 2] = 0.0;
    d12 = +HEAPF32[i9 + 332 >> 2];
    d27 = +HEAPF32[i9 + 336 >> 2];
    d23 = +HEAPF32[i9 + 328 >> 2];
    d18 = +HEAPF32[i8 + 332 >> 2];
    d25 = +HEAPF32[i8 + 336 >> 2];
    d17 = +HEAPF32[i8 + 328 >> 2];
    d19 = d12 * d26 - d27 * d24 + +HEAPF32[i9 + 312 >> 2] - (d18 * d20 - d25 * d16 + +HEAPF32[i8 + 312 >> 2]);
    d20 = +HEAPF32[i9 + 316 >> 2] + (d27 * d14 - d26 * d23) - (+HEAPF32[i8 + 316 >> 2] + (d25 * d22 - d20 * d17));
    d22 = d24 * d23 - d12 * d14 + +HEAPF32[i9 + 320 >> 2] - (d16 * d17 - d18 * d22 + +HEAPF32[i8 + 320 >> 2]);
    HEAPF32[i1 + 208 >> 2] = +HEAPF32[i9 + 4 >> 2];
    HEAPF32[i1 + 212 >> 2] = +HEAPF32[i9 + 20 >> 2];
    HEAPF32[i1 + 216 >> 2] = +HEAPF32[i9 + 36 >> 2];
    HEAPF32[i1 + 220 >> 2] = 0.0;
    HEAPF32[i1 + 224 >> 2] = +HEAPF32[i9 + 8 >> 2];
    HEAPF32[i1 + 228 >> 2] = +HEAPF32[i9 + 24 >> 2];
    HEAPF32[i1 + 232 >> 2] = +HEAPF32[i9 + 40 >> 2];
    HEAPF32[i1 + 236 >> 2] = 0.0;
    HEAPF32[i1 + 240 >> 2] = +HEAPF32[i9 + 12 >> 2];
    HEAPF32[i1 + 244 >> 2] = +HEAPF32[i9 + 28 >> 2];
    HEAPF32[i1 + 248 >> 2] = +HEAPF32[i9 + 44 >> 2];
    HEAPF32[i1 + 252 >> 2] = 0.0;
    HEAPF32[i1 + 160 >> 2] = +HEAPF32[i8 + 4 >> 2];
    HEAPF32[i1 + 164 >> 2] = +HEAPF32[i8 + 20 >> 2];
    HEAPF32[i1 + 168 >> 2] = +HEAPF32[i8 + 36 >> 2];
    HEAPF32[i1 + 172 >> 2] = 0.0;
    HEAPF32[i1 + 176 >> 2] = +HEAPF32[i8 + 8 >> 2];
    HEAPF32[i1 + 180 >> 2] = +HEAPF32[i8 + 24 >> 2];
    HEAPF32[i1 + 184 >> 2] = +HEAPF32[i8 + 40 >> 2];
    HEAPF32[i1 + 188 >> 2] = 0.0;
    HEAPF32[i1 + 192 >> 2] = +HEAPF32[i8 + 12 >> 2];
    HEAPF32[i1 + 196 >> 2] = +HEAPF32[i8 + 28 >> 2];
    HEAPF32[i1 + 200 >> 2] = +HEAPF32[i8 + 44 >> 2];
    HEAPF32[i1 + 204 >> 2] = 0.0;
    __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1 + 256 | 0, i1 + 208 | 0, i1 + 160 | 0, i1 + 360 | 0, i1 + 344 | 0, i10, i9 + 396 | 0, +HEAPF32[i9 + 344 >> 2], i8 + 396 | 0, +HEAPF32[i8 + 344 >> 2]);
    HEAPF32[i15 >> 2] = 1.0 / +HEAPF32[i1 + 336 >> 2] * (d19 * +HEAPF32[i10 >> 2] + d20 * +HEAPF32[i11 >> 2] + d22 * +HEAPF32[i13 >> 2]) * -.20000000298023224;
   }
   i9 = HEAP32[i2 + 136 >> 2] | 0;
  }
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (i9 | 0));
 if ((i9 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i11 = HEAP32[i2 + 144 >> 2] | 0;
 i7 = 0;
 i6 = 0;
 while (1) {
  i8 = HEAP32[i11 + (i6 * 284 | 0) + 88 >> 2] | 0;
  if ((i8 | 0) != 0) {
   d12 = +HEAPF32[i11 + (i6 * 284 | 0) + 252 >> 2];
   if (d12 != 0.0) {
    i8 = HEAP32[i2 + 56 >> 2] | 0;
    i13 = i8 + (i6 << 2) | 0;
    HEAPF32[i13 >> 2] = 0.0;
    i10 = i11 + (i6 * 284 | 0) + 280 | 0;
    HEAPF32[i10 >> 2] = 1.0;
    i9 = i11;
    d14 = d12 * d5;
   } else {
    d27 = +HEAPF32[i11 + (i6 * 284 | 0) + 256 >> 2];
    d27 = d27 != 0.0 ? d27 : 0.0;
    i9 = HEAP32[i2 + 116 >> 2] | 0;
    i13 = HEAP32[i2 + 16 >> 2] | 0;
    d20 = +HEAPF32[i11 + (i6 * 284 | 0) + 16 >> 2];
    d18 = +HEAPF32[i11 + (i6 * 284 | 0) + 20 >> 2];
    d28 = +HEAPF32[i11 + (i6 * 284 | 0) + 24 >> 2];
    d30 = +HEAPF32[i13 + (i6 << 4) >> 2];
    d17 = +HEAPF32[i13 + (i6 << 4) + 4 >> 2];
    d14 = +HEAPF32[i13 + (i6 << 4) + 8 >> 2];
    d37 = d20 - +HEAPF32[i9 + 52 >> 2];
    d38 = d18 - +HEAPF32[i9 + 56 >> 2];
    d35 = d28 - +HEAPF32[i9 + 60 >> 2];
    d34 = +HEAPF32[i9 + 264 >> 2] * (d38 * d14 - d35 * d17) + +HEAPF32[i9 + 280 >> 2] * (d35 * d30 - d37 * d14) + (d37 * d17 - d38 * d30) * +HEAPF32[i9 + 296 >> 2];
    d39 = (d38 * d14 - d35 * d17) * +HEAPF32[i9 + 268 >> 2] + (d35 * d30 - d37 * d14) * +HEAPF32[i9 + 284 >> 2] + (d37 * d17 - d38 * d30) * +HEAPF32[i9 + 300 >> 2];
    d36 = (d38 * d14 - d35 * d17) * +HEAPF32[i9 + 272 >> 2] + (d35 * d30 - d37 * d14) * +HEAPF32[i9 + 288 >> 2] + (d37 * d17 - d38 * d30) * +HEAPF32[i9 + 304 >> 2];
    d25 = d20 - +HEAPF32[i8 + 52 >> 2];
    d23 = d18 - +HEAPF32[i8 + 56 >> 2];
    d16 = d28 - +HEAPF32[i8 + 60 >> 2];
    d31 = (d17 * d25 - d30 * d23) * +HEAPF32[i8 + 296 >> 2] + (+HEAPF32[i8 + 264 >> 2] * (d14 * d23 - d17 * d16) + +HEAPF32[i8 + 280 >> 2] * (d30 * d16 - d14 * d25));
    d33 = (d14 * d23 - d17 * d16) * +HEAPF32[i8 + 268 >> 2] + (d30 * d16 - d14 * d25) * +HEAPF32[i8 + 284 >> 2] + (d17 * d25 - d30 * d23) * +HEAPF32[i8 + 300 >> 2];
    d32 = (d14 * d23 - d17 * d16) * +HEAPF32[i8 + 272 >> 2] + (d30 * d16 - d14 * d25) * +HEAPF32[i8 + 288 >> 2] + (d17 * d25 - d30 * d23) * +HEAPF32[i8 + 304 >> 2];
    d20 = d20 - +HEAPF32[i9 + 52 >> 2];
    d18 = d18 - +HEAPF32[i9 + 56 >> 2];
    d28 = d28 - +HEAPF32[i9 + 60 >> 2];
    d22 = +HEAPF32[i9 + 332 >> 2];
    d29 = +HEAPF32[i9 + 336 >> 2];
    d19 = +HEAPF32[i9 + 328 >> 2];
    d26 = +HEAPF32[i8 + 332 >> 2];
    d12 = +HEAPF32[i8 + 336 >> 2];
    d24 = +HEAPF32[i8 + 328 >> 2];
    d14 = -(1.0 / (+HEAPF32[i9 + 344 >> 2] + (d14 * (d38 * d34 - d37 * d39) + (d30 * (d35 * d39 - d38 * d36) + d17 * (d37 * d36 - d35 * d34))) + (+HEAPF32[i8 + 344 >> 2] + (d14 * (d23 * d31 - d25 * d33) + (d30 * (d16 * d33 - d23 * d32) + d17 * (d25 * d32 - d16 * d31))))) * ((d28 * d22 - d18 * d29 + +HEAPF32[i9 + 312 >> 2] - (d16 * d26 - d23 * d12 + +HEAPF32[i8 + 312 >> 2])) * d30 + (+HEAPF32[i9 + 316 >> 2] + (d20 * d29 - d28 * d19) - (+HEAPF32[i8 + 316 >> 2] + (d25 * d12 - d16 * d24))) * d17 + (d18 * d19 - d20 * d22 + +HEAPF32[i9 + 320 >> 2] - (d23 * d24 - d25 * d26 + +HEAPF32[i8 + 320 >> 2])) * d14));
    d14 = d27 < d14 ? d27 : d14;
    i9 = HEAP32[i2 + 144 >> 2] | 0;
    i8 = HEAP32[i2 + 56 >> 2] | 0;
    i13 = i8 + (i6 << 2) | 0;
    HEAPF32[i13 >> 2] = 0.0;
    i10 = i9 + (i6 * 284 | 0) + 280 | 0;
    HEAPF32[i10 >> 2] = 1.0;
    d14 = d14 < -d27 ? -d27 : d14;
   }
   HEAPF32[i10 >> 2] = 1.0;
   d12 = +HEAPF32[i11 + (i6 * 284 | 0) + 276 >> 2] * d5 * +HEAPF32[i11 + (i6 * 284 | 0) + 228 >> 2];
   HEAPF32[i13 >> 2] = d14;
   d14 = d14 * .5;
   d16 = +HEAPF32[(HEAP32[i2 + 76 >> 2] | 0) + (i6 << 2) >> 2];
   if (d14 * d14 + d16 * d16 > d12 * d12) {
    d39 = d12 / +Math_sqrt(+(d14 * d14 + d16 * d16));
    HEAPF32[i10 >> 2] = d39 * +HEAPF32[i10 >> 2];
    i7 = 1;
   }
  } else {
   i8 = HEAP32[i2 + 56 >> 2] | 0;
   HEAPF32[i8 + (i6 << 2) >> 2] = 0.0;
   HEAPF32[i11 + (i6 * 284 | 0) + 280 >> 2] = 1.0;
   i9 = i11;
  }
  i6 = i6 + 1 | 0;
  i10 = HEAP32[i2 + 136 >> 2] | 0;
  if ((i6 | 0) >= (i10 | 0)) break; else i11 = i9;
 }
 if (i7) {
  if ((i10 | 0) <= 0) {
   STACKTOP = i1;
   return;
  }
  i6 = HEAP32[i2 + 76 >> 2] | 0;
  i7 = 0;
  do {
   i11 = i6 + (i7 << 2) | 0;
   if (+HEAPF32[i11 >> 2] != 0.0 ? (i3 = i9 + (i7 * 284 | 0) + 280 | 0, d4 = +HEAPF32[i3 >> 2], d4 < 1.0) : 0) {
    i21 = i8 + (i7 << 2) | 0;
    HEAPF32[i21 >> 2] = d4 * +HEAPF32[i21 >> 2];
    HEAPF32[i11 >> 2] = +HEAPF32[i3 >> 2] * +HEAPF32[i11 >> 2];
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) < (i10 | 0));
 }
 if ((i10 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i10 = 0;
 while (1) {
  i11 = HEAP32[i2 + 116 >> 2] | 0;
  i7 = i9 + (i10 * 284 | 0) + 16 | 0;
  i3 = i9 + (i10 * 284 | 0) + 20 | 0;
  d39 = +HEAPF32[i3 >> 2] - +HEAPF32[i11 + 56 >> 2];
  i6 = i9 + (i10 * 284 | 0) + 24 | 0;
  d4 = +HEAPF32[i6 >> 2] - +HEAPF32[i11 + 60 >> 2];
  HEAPF32[i1 + 64 >> 2] = +HEAPF32[i7 >> 2] - +HEAPF32[i11 + 52 >> 2];
  HEAPF32[i1 + 68 >> 2] = d39;
  HEAPF32[i1 + 72 >> 2] = d4;
  HEAPF32[i1 + 76 >> 2] = 0.0;
  d4 = +HEAPF32[i8 + (i10 << 2) >> 2];
  if (d4 != 0.0) {
   i21 = HEAP32[i2 + 16 >> 2] | 0;
   d38 = d4 * +HEAPF32[i21 + (i10 << 4) + 4 >> 2];
   d39 = d4 * +HEAPF32[i21 + (i10 << 4) + 8 >> 2];
   HEAPF32[i1 + 48 >> 2] = d4 * +HEAPF32[i21 + (i10 << 4) >> 2];
   HEAPF32[i1 + 52 >> 2] = d38;
   HEAPF32[i1 + 56 >> 2] = d39;
   HEAPF32[i1 + 60 >> 2] = 0.0;
   __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i11, i1 + 48 | 0, i1 + 64 | 0);
  }
  d4 = +HEAPF32[(HEAP32[i2 + 76 >> 2] | 0) + (i10 << 2) >> 2];
  if (d4 != 0.0) {
   i21 = HEAP32[(HEAP32[i2 + 144 >> 2] | 0) + (i10 * 284 | 0) + 88 >> 2] | 0;
   d34 = +HEAPF32[i3 >> 2] - +HEAPF32[i21 + 56 >> 2];
   d36 = +HEAPF32[i6 >> 2] - +HEAPF32[i21 + 60 >> 2];
   HEAPF32[i1 + 32 >> 2] = +HEAPF32[i7 >> 2] - +HEAPF32[i21 + 52 >> 2];
   HEAPF32[i1 + 36 >> 2] = d34;
   HEAPF32[i1 + 40 >> 2] = d36;
   HEAPF32[i1 + 44 >> 2] = 0.0;
   i15 = HEAP32[i2 + 36 >> 2] | 0;
   d36 = d4 * +HEAPF32[i15 + (i10 << 4) + 4 >> 2];
   d34 = d4 * +HEAPF32[i15 + (i10 << 4) + 8 >> 2];
   HEAPF32[i1 + 16 >> 2] = +HEAPF32[i15 + (i10 << 4) >> 2] * d4;
   HEAPF32[i1 + 20 >> 2] = d36;
   HEAPF32[i1 + 24 >> 2] = d34;
   HEAPF32[i1 + 28 >> 2] = 0.0;
   i15 = HEAP32[i2 + 116 >> 2] | 0;
   i13 = HEAP32[i2 + 124 >> 2] | 0;
   d34 = +HEAPF32[i15 + (i13 << 2) + 4 >> 2];
   d36 = +HEAPF32[i15 + (i13 << 2) + 20 >> 2];
   d39 = +HEAPF32[i15 + (i13 << 2) + 36 >> 2];
   d33 = +HEAPF32[i1 + 64 >> 2];
   d35 = +HEAPF32[i1 + 68 >> 2];
   d37 = +HEAPF32[i1 + 72 >> 2];
   d38 = (d34 * d33 + d36 * d35 + d39 * d37) * (1.0 - +HEAPF32[i9 + (i10 * 284 | 0) + 244 >> 2]);
   HEAPF32[i1 + 64 >> 2] = d33 - d34 * d38;
   HEAPF32[i1 + 68 >> 2] = d35 - d36 * d38;
   HEAPF32[i1 + 72 >> 2] = d37 - d39 * d38;
   __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i15, i1 + 16 | 0, i1 + 64 | 0);
   d38 = -+HEAPF32[i1 + 20 >> 2];
   d39 = -+HEAPF32[i1 + 24 >> 2];
   HEAPF32[i1 >> 2] = -+HEAPF32[i1 + 16 >> 2];
   HEAPF32[i1 + 4 >> 2] = d38;
   HEAPF32[i1 + 8 >> 2] = d39;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i21, i1, i1 + 32 | 0);
  }
  i10 = i10 + 1 | 0;
  if ((i10 | 0) >= (HEAP32[i2 + 136 >> 2] | 0)) break;
  i9 = HEAP32[i2 + 144 >> 2] | 0;
  i8 = HEAP32[i2 + 56 >> 2] | 0;
 }
 STACKTOP = i1;
 return;
}
function __ZN17btHingeConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i1 + 32 >> 2] | 0;
 i10 = HEAP32[i5 + 24 >> 2] | 0;
 if ((HEAP8[i1 + 739 >> 0] | 0) == 0) {
  __ZNK11btTransformmlERKS_(i2 + 192 | 0, i3 + 4 | 0, i1 + 552 | 0);
  __ZNK11btTransformmlERKS_(i2 + 128 | 0, i4 + 4 | 0, i1 + 616 | 0);
  d13 = +HEAPF32[i2 + 240 >> 2];
  d11 = +HEAPF32[i2 + 244 >> 2];
  d6 = +HEAPF32[i2 + 248 >> 2];
  d7 = +HEAPF32[i2 + 176 >> 2];
  d12 = +HEAPF32[i2 + 180 >> 2];
  d8 = +HEAPF32[i2 + 184 >> 2];
  i46 = (HEAP8[i1 + 736 >> 0] | 0) == 0;
  if (i46) {
   i36 = HEAP32[i5 + 8 >> 2] | 0;
   HEAPF32[i36 >> 2] = 1.0;
   HEAPF32[i36 + (i10 + 1 << 2) >> 2] = 1.0;
   HEAPF32[i36 + ((i10 << 1) + 2 << 2) >> 2] = 1.0;
   i36 = HEAP32[i5 + 16 >> 2] | 0;
   HEAPF32[i36 >> 2] = -1.0;
   HEAPF32[i36 + (i10 + 1 << 2) >> 2] = -1.0;
   HEAPF32[i36 + ((i10 << 1) + 2 << 2) >> 2] = -1.0;
   i36 = i10 << 1;
   i48 = i10 + 1 | 0;
   i47 = (i10 << 1) + 2 | 0;
  } else {
   i36 = i10 << 1;
   i48 = i10 + 1 | 0;
   i47 = (i10 << 1) + 2 | 0;
  }
  d9 = d13 - +HEAPF32[i3 + 52 >> 2];
  d43 = d11 - +HEAPF32[i3 + 56 >> 2];
  d42 = d6 - +HEAPF32[i3 + 60 >> 2];
  i45 = HEAP32[i5 + 12 >> 2] | 0;
  HEAPF32[i45 >> 2] = 0.0;
  HEAPF32[i45 + 4 >> 2] = d42;
  HEAPF32[i45 + 8 >> 2] = -d43;
  HEAPF32[i45 + 12 >> 2] = 0.0;
  HEAPF32[i45 + (i10 << 2) >> 2] = -d42;
  HEAPF32[i45 + (i48 << 2) >> 2] = 0.0;
  HEAPF32[i45 + (i10 + 2 << 2) >> 2] = d9;
  HEAPF32[i45 + (i10 + 3 << 2) >> 2] = 0.0;
  HEAPF32[i45 + (i36 << 2) >> 2] = d43;
  i50 = i36 | 1;
  HEAPF32[i45 + (i50 << 2) >> 2] = -d9;
  HEAPF32[i45 + (i47 << 2) >> 2] = 0.0;
  i49 = i36 + 3 | 0;
  HEAPF32[i45 + (i49 << 2) >> 2] = 0.0;
  d9 = d7 - +HEAPF32[i4 + 52 >> 2];
  d43 = d12 - +HEAPF32[i4 + 56 >> 2];
  d42 = d8 - +HEAPF32[i4 + 60 >> 2];
  i44 = HEAP32[i5 + 20 >> 2] | 0;
  HEAPF32[i44 >> 2] = 0.0;
  HEAPF32[i44 + 4 >> 2] = -d42;
  HEAPF32[i44 + 8 >> 2] = d43;
  HEAPF32[i44 + 12 >> 2] = 0.0;
  HEAPF32[i44 + (i10 << 2) >> 2] = d42;
  HEAPF32[i44 + (i48 << 2) >> 2] = 0.0;
  HEAPF32[i44 + (i10 + 2 << 2) >> 2] = -d9;
  HEAPF32[i44 + (i10 + 3 << 2) >> 2] = 0.0;
  HEAPF32[i44 + (i36 << 2) >> 2] = -d43;
  HEAPF32[i44 + (i50 << 2) >> 2] = d9;
  HEAPF32[i44 + (i47 << 2) >> 2] = 0.0;
  HEAPF32[i44 + (i49 << 2) >> 2] = 0.0;
  d9 = +HEAPF32[i5 >> 2] * +HEAPF32[i5 + 4 >> 2];
  i36 = HEAP32[i5 + 28 >> 2] | 0;
  if (i46) {
   HEAPF32[i36 >> 2] = d9 * (d7 - d13);
   HEAPF32[i36 + (i10 << 2) >> 2] = d9 * (d12 - d11);
   HEAPF32[i36 + (i10 << 1 << 2) >> 2] = d9 * (d8 - d6);
  }
  d8 = +HEAPF32[i2 + 200 >> 2];
  d7 = +HEAPF32[i2 + 216 >> 2];
  d6 = +HEAPF32[i2 + 232 >> 2];
  d35 = +HEAPF32[i2 + 192 >> 2];
  d37 = +HEAPF32[i2 + 208 >> 2];
  d34 = +HEAPF32[i2 + 224 >> 2];
  d39 = +HEAPF32[i2 + 196 >> 2];
  d41 = +HEAPF32[i2 + 212 >> 2];
  d38 = +HEAPF32[i2 + 228 >> 2];
  i10 = HEAP32[i5 + 24 >> 2] | 0;
  HEAPF32[i45 + (i10 * 3 << 2) >> 2] = d35;
  HEAPF32[i45 + ((i10 * 3 | 0) + 1 << 2) >> 2] = d37;
  HEAPF32[i45 + ((i10 * 3 | 0) + 2 << 2) >> 2] = d34;
  HEAPF32[i45 + (i10 << 2 << 2) >> 2] = d39;
  HEAPF32[i45 + ((i10 << 2 | 1) << 2) >> 2] = d41;
  HEAPF32[i45 + ((i10 << 2 | 2) << 2) >> 2] = d38;
  HEAPF32[i44 + (i10 * 3 << 2) >> 2] = -d35;
  HEAPF32[i44 + ((i10 * 3 | 0) + 1 << 2) >> 2] = -d37;
  HEAPF32[i44 + ((i10 * 3 | 0) + 2 << 2) >> 2] = -d34;
  HEAPF32[i44 + (i10 << 2 << 2) >> 2] = -d39;
  HEAPF32[i44 + ((i10 << 2 | 1) << 2) >> 2] = -d41;
  HEAPF32[i44 + ((i10 << 2 | 2) << 2) >> 2] = -d38;
  d42 = +HEAPF32[i2 + 136 >> 2];
  d40 = +HEAPF32[i2 + 152 >> 2];
  d43 = +HEAPF32[i2 + 168 >> 2];
  HEAPF32[i36 + (i10 * 3 << 2) >> 2] = d9 * (d34 * (d8 * d40 - d7 * d42) + (d35 * (d7 * d43 - d6 * d40) + d37 * (d6 * d42 - d8 * d43)));
  HEAPF32[i36 + (i10 << 2 << 2) >> 2] = d9 * (d38 * (d8 * d40 - d7 * d42) + (d39 * (d7 * d43 - d6 * d40) + d41 * (d6 * d42 - d8 * d43)));
  if ((HEAP8[i1 + 716 >> 0] | 0) == 0) if ((HEAP8[i1 + 737 >> 0] | 0) == 0) {
   STACKTOP = i2;
   return;
  } else {
   i46 = 0;
   i48 = 0;
   i36 = 0;
   d9 = 0.0;
  } else {
   d9 = +HEAPF32[i1 + 708 >> 2] * +HEAPF32[i1 + 732 >> 2];
   i46 = 1;
   i48 = (HEAP8[i1 + 737 >> 0] | 0) == 0;
   i36 = d9 > 0.0 ? 1 : 2;
  }
  HEAPF32[i45 + (i10 * 5 << 2) >> 2] = d8;
  HEAPF32[i45 + ((i10 * 5 | 0) + 1 << 2) >> 2] = d7;
  HEAPF32[i45 + ((i10 * 5 | 0) + 2 << 2) >> 2] = d6;
  HEAPF32[i44 + (i10 * 5 << 2) >> 2] = -d8;
  HEAPF32[i44 + ((i10 * 5 | 0) + 1 << 2) >> 2] = -d7;
  HEAPF32[i44 + ((i10 * 5 | 0) + 2 << 2) >> 2] = -d6;
  d12 = +_fmodf(+(+HEAPF32[i1 + 688 >> 2] - +HEAPF32[i1 + 692 >> 2]), 6.2831854820251465);
  if (!(d12 < -3.1415927410125732)) {
   if (d12 > 3.1415927410125732) d12 = d12 + -6.2831854820251465;
  } else d12 = d12 + 6.2831854820251465;
  d14 = +_fmodf(+(+HEAPF32[i1 + 688 >> 2] + +HEAPF32[i1 + 692 >> 2]), 6.2831854820251465);
  if (!(d14 < -3.1415927410125732)) {
   if (d14 > 3.1415927410125732) d14 = d14 + -6.2831854820251465;
  } else d14 = d14 + 6.2831854820251465;
  i45 = d12 == d14;
  i44 = (HEAP32[i5 + 28 >> 2] | 0) + (i10 * 5 << 2) | 0;
  HEAPF32[i44 >> 2] = 0.0;
  i47 = HEAP32[i1 + 748 >> 2] | 0;
  d11 = +HEAPF32[((i47 & 2 | 0) == 0 ? i5 + 4 | 0 : i1 + 760 | 0) >> 2];
  if (!(i46 & i45 | i48)) {
   if ((i47 & 4 | 0) != 0) HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i10 * 5 << 2) >> 2] = +HEAPF32[i1 + 752 >> 2];
   d15 = +HEAPF32[i1 + 728 >> 2];
   d13 = +HEAPF32[i1 + 680 >> 2];
   i48 = d12 > d14;
   do if (!(i48 | i45)) {
    d16 = d13 / (d11 * +HEAPF32[i5 >> 2]);
    if (d16 < 0.0) {
     if (d15 >= d12 ? d12 - d16 > d15 : 0) {
      d12 = (d12 - d15) / d16;
      break;
     }
     d12 = d15 < d12 ? 0.0 : 1.0;
     break;
    }
    if (d16 > 0.0) {
     if (d15 <= d14 ? d14 - d16 < d15 : 0) {
      d12 = (d14 - d15) / d16;
      break;
     }
     d12 = d15 > d14 ? 0.0 : 1.0;
    } else d12 = 0.0;
   } else d12 = i48 ? 1.0 : 0.0; while (0);
   HEAPF32[i44 >> 2] = d12 * d13 * +HEAPF32[i1 + 732 >> 2] + +HEAPF32[i44 >> 2];
   HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i10 * 5 << 2) >> 2] = -+HEAPF32[i1 + 684 >> 2];
   HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i10 * 5 << 2) >> 2] = +HEAPF32[i1 + 684 >> 2];
  }
  if (!i46) {
   STACKTOP = i2;
   return;
  }
  HEAPF32[i44 >> 2] = +HEAPF32[i44 >> 2] + d9 * d11 * +HEAPF32[i5 >> 2];
  if ((i47 & 1 | 0) != 0) HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i10 * 5 << 2) >> 2] = +HEAPF32[i1 + 756 >> 2];
  do if (!i45) {
   i45 = (HEAP32[i5 + 36 >> 2] | 0) + (i10 * 5 << 2) | 0;
   if ((i36 | 0) == 1) {
    HEAPF32[i45 >> 2] = 0.0;
    HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i10 * 5 << 2) >> 2] = 3.4028234663852886e+38;
    break;
   } else {
    HEAPF32[i45 >> 2] = -3.4028234663852886e+38;
    HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i10 * 5 << 2) >> 2] = 0.0;
    break;
   }
  } else {
   HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i10 * 5 << 2) >> 2] = -3.4028234663852886e+38;
   HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i10 * 5 << 2) >> 2] = 3.4028234663852886e+38;
  } while (0);
  d9 = +HEAPF32[i1 + 704 >> 2];
  do if (d9 > 0.0) {
   d6 = d8 * +HEAPF32[i3 + 328 >> 2] + d7 * +HEAPF32[i3 + 332 >> 2] + d6 * +HEAPF32[i3 + 336 >> 2] - (d8 * +HEAPF32[i4 + 328 >> 2] + d7 * +HEAPF32[i4 + 332 >> 2] + d6 * +HEAPF32[i4 + 336 >> 2]);
   if ((i36 | 0) == 1) {
    if (!(d6 < 0.0)) break;
    if (!(+HEAPF32[i44 >> 2] < -(d9 * d6))) break;
    HEAPF32[i44 >> 2] = -(d9 * d6);
    break;
   } else {
    if (!(d6 > 0.0)) break;
    if (!(+HEAPF32[i44 >> 2] > -(d9 * d6))) break;
    HEAPF32[i44 >> 2] = -(d9 * d6);
    break;
   }
  } while (0);
  HEAPF32[i44 >> 2] = +HEAPF32[i1 + 700 >> 2] * +HEAPF32[i44 >> 2];
  STACKTOP = i2;
  return;
 }
 __ZNK11btTransformmlERKS_(i2 + 64 | 0, i3 + 4 | 0, i1 + 552 | 0);
 __ZNK11btTransformmlERKS_(i2, i4 + 4 | 0, i1 + 616 | 0);
 d26 = +HEAPF32[i2 + 48 >> 2];
 d24 = +HEAPF32[i2 + 112 >> 2];
 d27 = +HEAPF32[i2 + 52 >> 2];
 d25 = +HEAPF32[i2 + 116 >> 2];
 d28 = +HEAPF32[i2 + 56 >> 2];
 d23 = +HEAPF32[i2 + 120 >> 2];
 d7 = +HEAPF32[(HEAP32[i1 + 28 >> 2] | 0) + 344 >> 2];
 d6 = +HEAPF32[(HEAP32[i1 + 32 >> 2] | 0) + 344 >> 2];
 if (d7 < 1.1920928955078125e-7) i36 = 1; else i36 = d6 < 1.1920928955078125e-7;
 if (d7 + d6 > 0.0) d31 = d6 / (d7 + d6); else d31 = .5;
 d34 = 1.0 - d31;
 d13 = +HEAPF32[i2 + 72 >> 2];
 d12 = +HEAPF32[i2 + 88 >> 2];
 d16 = +HEAPF32[i2 + 104 >> 2];
 d14 = +HEAPF32[i2 + 8 >> 2];
 d15 = +HEAPF32[i2 + 24 >> 2];
 d11 = +HEAPF32[i2 + 40 >> 2];
 d9 = d31 * d13 + d34 * d14;
 d7 = d31 * d12 + d34 * d15;
 d6 = d31 * d16 + d34 * d11;
 d8 = 1.0 / +Math_sqrt(+(d9 * d9 + d7 * d7 + d6 * d6));
 d20 = d26 - +HEAPF32[i4 + 52 >> 2];
 d38 = d27 - +HEAPF32[i4 + 56 >> 2];
 d41 = d28 - +HEAPF32[i4 + 60 >> 2];
 d21 = d9 * d8 * (d20 * d9 * d8 + d38 * d7 * d8 + d41 * d6 * d8);
 d39 = d7 * d8 * (d20 * d9 * d8 + d38 * d7 * d8 + d41 * d6 * d8);
 d42 = d6 * d8 * (d20 * d9 * d8 + d38 * d7 * d8 + d41 * d6 * d8);
 d22 = d24 - +HEAPF32[i3 + 52 >> 2];
 d40 = d25 - +HEAPF32[i3 + 56 >> 2];
 d43 = d23 - +HEAPF32[i3 + 60 >> 2];
 d17 = d9 * d8 * (d9 * d8 * d22 + d7 * d8 * d40 + d6 * d8 * d43);
 d18 = d7 * d8 * (d9 * d8 * d22 + d7 * d8 * d40 + d6 * d8 * d43);
 d19 = d6 * d8 * (d9 * d8 * d22 + d7 * d8 * d40 + d6 * d8 * d43);
 d30 = d22 - d17 + d31 * (d17 - d21);
 d29 = d40 - d18 + d31 * (d18 - d39);
 d32 = d43 - d19 + d31 * (d19 - d42);
 d35 = d20 - d21 - d34 * (d17 - d21);
 d33 = d38 - d39 - d34 * (d18 - d39);
 d37 = d41 - d42 - d34 * (d19 - d42);
 d17 = d31 * (d20 - d21) + d34 * (d22 - d17);
 d18 = d31 * (d38 - d39) + d34 * (d40 - d18);
 d19 = d31 * (d41 - d42) + d34 * (d43 - d19);
 if (d17 * d17 + d18 * d18 + d19 * d19 > 1.1920928955078125e-7) {
  d22 = 1.0 / +Math_sqrt(+(d17 * d17 + d18 * d18 + d19 * d19));
  d17 = d17 * d22;
  d18 = d22 * d18;
  d22 = d22 * d19;
 } else {
  d17 = +HEAPF32[i2 + 68 >> 2];
  d18 = +HEAPF32[i2 + 84 >> 2];
  d22 = +HEAPF32[i2 + 100 >> 2];
 }
 d21 = d7 * d8 * d22 - d6 * d8 * d18;
 d20 = d6 * d8 * d17 - d22 * d9 * d8;
 d19 = d18 * d9 * d8 - d7 * d8 * d17;
 i50 = HEAP32[i5 + 12 >> 2] | 0;
 HEAPF32[i50 >> 2] = d29 * d22 - d32 * d18;
 HEAPF32[i50 + 4 >> 2] = d32 * d17 - d30 * d22;
 HEAPF32[i50 + 8 >> 2] = d30 * d18 - d29 * d17;
 i50 = HEAP32[i5 + 20 >> 2] | 0;
 HEAPF32[i50 >> 2] = -(d33 * d22 - d37 * d18);
 HEAPF32[i50 + 4 >> 2] = -(d37 * d17 - d35 * d22);
 HEAPF32[i50 + 8 >> 2] = -(d35 * d18 - d33 * d17);
 if (i36 ? (HEAP8[i1 + 716 >> 0] | 0) != 0 : 0) {
  d40 = d34 * (d33 * d19 - d37 * d20);
  d39 = d34 * (d37 * d21 - d35 * d19);
  d38 = d34 * (d35 * d20 - d33 * d21);
  d41 = d31 * (d29 * d19 - d32 * d20);
  d42 = d31 * (d32 * d21 - d30 * d19);
  d43 = d31 * (d30 * d20 - d29 * d21);
 } else {
  d40 = d33 * d19 - d37 * d20;
  d39 = d37 * d21 - d35 * d19;
  d38 = d35 * d20 - d33 * d21;
  d41 = d29 * d19 - d32 * d20;
  d42 = d32 * d21 - d30 * d19;
  d43 = d30 * d20 - d29 * d21;
 }
 i50 = HEAP32[i5 + 12 >> 2] | 0;
 HEAPF32[i50 + (i10 << 2) >> 2] = d41;
 HEAPF32[i50 + (i10 + 1 << 2) >> 2] = d42;
 HEAPF32[i50 + (i10 + 2 << 2) >> 2] = d43;
 i50 = HEAP32[i5 + 20 >> 2] | 0;
 HEAPF32[i50 + (i10 << 2) >> 2] = -d40;
 HEAPF32[i50 + (i10 + 1 << 2) >> 2] = -d39;
 HEAPF32[i50 + (i10 + 2 << 2) >> 2] = -d38;
 if (i36) {
  d38 = d34 * (d33 * d6 * d8 - d37 * d7 * d8);
  d37 = d34 * (d37 * d9 * d8 - d35 * d6 * d8);
  d33 = d34 * (d35 * d7 * d8 - d33 * d9 * d8);
  d34 = d31 * (d29 * d6 * d8 - d32 * d7 * d8);
  d32 = d31 * (d32 * d9 * d8 - d30 * d6 * d8);
  d29 = d31 * (d30 * d7 * d8 - d29 * d9 * d8);
 } else {
  d38 = d33 * d6 * d8 - d37 * d7 * d8;
  d37 = d37 * d9 * d8 - d35 * d6 * d8;
  d33 = d35 * d7 * d8 - d33 * d9 * d8;
  d34 = d29 * d6 * d8 - d32 * d7 * d8;
  d32 = d32 * d9 * d8 - d30 * d6 * d8;
  d29 = d30 * d7 * d8 - d29 * d9 * d8;
 }
 i36 = HEAP32[i5 + 12 >> 2] | 0;
 HEAPF32[i36 + (i10 << 1 << 2) >> 2] = d34;
 HEAPF32[i36 + ((i10 << 1 | 1) << 2) >> 2] = d32;
 HEAPF32[i36 + ((i10 << 1) + 2 << 2) >> 2] = d29;
 i36 = HEAP32[i5 + 20 >> 2] | 0;
 HEAPF32[i36 + (i10 << 1 << 2) >> 2] = -d38;
 HEAPF32[i36 + ((i10 << 1 | 1) << 2) >> 2] = -d37;
 HEAPF32[i36 + ((i10 << 1) + 2 << 2) >> 2] = -d33;
 d29 = +HEAPF32[i5 >> 2] * +HEAPF32[i5 + 4 >> 2];
 if ((HEAP8[i1 + 736 >> 0] | 0) == 0) {
  i45 = HEAP32[i5 + 8 >> 2] | 0;
  HEAPF32[i45 >> 2] = d17;
  HEAPF32[i45 + 4 >> 2] = d18;
  HEAPF32[i45 + 8 >> 2] = d22;
  i45 = HEAP32[i5 + 8 >> 2] | 0;
  HEAPF32[i45 + (i10 << 2) >> 2] = d21;
  HEAPF32[i45 + (i10 + 1 << 2) >> 2] = d20;
  HEAPF32[i45 + (i10 + 2 << 2) >> 2] = d19;
  i45 = HEAP32[i5 + 8 >> 2] | 0;
  HEAPF32[i45 + (i10 << 1 << 2) >> 2] = d9 * d8;
  HEAPF32[i45 + ((i10 << 1 | 1) << 2) >> 2] = d7 * d8;
  HEAPF32[i45 + ((i10 << 1) + 2 << 2) >> 2] = d6 * d8;
  i45 = HEAP32[i5 + 16 >> 2] | 0;
  d43 = -d17;
  HEAPF32[i45 >> 2] = d43;
  d41 = -d18;
  HEAPF32[i45 + 4 >> 2] = d41;
  d42 = -d22;
  HEAPF32[i45 + 8 >> 2] = d42;
  HEAPF32[i45 + (i10 << 2) >> 2] = -d21;
  HEAPF32[i45 + (i10 + 1 << 2) >> 2] = -d20;
  HEAPF32[i45 + (i10 + 2 << 2) >> 2] = -d19;
  HEAPF32[i45 + (i10 << 1 << 2) >> 2] = -(d9 * d8);
  HEAPF32[i45 + ((i10 << 1 | 1) << 2) >> 2] = -(d7 * d8);
  HEAPF32[i45 + ((i10 << 1) + 2 << 2) >> 2] = -(d6 * d8);
  i45 = HEAP32[i5 + 28 >> 2] | 0;
  HEAPF32[i45 >> 2] = d29 * ((d26 - d24) * d17 + (d27 - d25) * d18 + (d28 - d23) * d22);
  HEAPF32[i45 + (i10 << 2) >> 2] = d29 * ((d26 - d24) * d21 + (d27 - d25) * d20 + (d28 - d23) * d19);
  HEAPF32[i45 + (i10 << 1 << 2) >> 2] = d29 * ((d26 - d24) * d9 * d8 + (d27 - d25) * d7 * d8 + (d28 - d23) * d6 * d8);
  d24 = -d21;
  d25 = -d20;
  d26 = -d19;
  d28 = d41;
  d23 = d42;
  d27 = d43;
  i36 = HEAP32[i5 + 20 >> 2] | 0;
 } else {
  d24 = -d21;
  d25 = -d20;
  d26 = -d19;
  d28 = -d18;
  d23 = -d22;
  d27 = -d17;
  i45 = HEAP32[i5 + 28 >> 2] | 0;
 }
 i44 = HEAP32[i5 + 12 >> 2] | 0;
 HEAPF32[i44 + (i10 * 3 << 2) >> 2] = d17;
 HEAPF32[i44 + ((i10 * 3 | 0) + 1 << 2) >> 2] = d18;
 HEAPF32[i44 + ((i10 * 3 | 0) + 2 << 2) >> 2] = d22;
 HEAPF32[i44 + (i10 << 2 << 2) >> 2] = d21;
 HEAPF32[i44 + ((i10 << 2 | 1) << 2) >> 2] = d20;
 HEAPF32[i44 + ((i10 << 2 | 2) << 2) >> 2] = d19;
 HEAPF32[i36 + (i10 * 3 << 2) >> 2] = d27;
 HEAPF32[i36 + ((i10 * 3 | 0) + 1 << 2) >> 2] = d28;
 HEAPF32[i36 + ((i10 * 3 | 0) + 2 << 2) >> 2] = d23;
 HEAPF32[i36 + (i10 << 2 << 2) >> 2] = d24;
 HEAPF32[i36 + ((i10 << 2 | 1) << 2) >> 2] = d25;
 HEAPF32[i36 + ((i10 << 2 | 2) << 2) >> 2] = d26;
 d43 = +HEAPF32[i5 >> 2] * +HEAPF32[i5 + 4 >> 2];
 HEAPF32[i45 + (i10 * 3 << 2) >> 2] = d43 * ((d12 * d11 - d16 * d15) * d17 + (d16 * d14 - d13 * d11) * d18 + (d13 * d15 - d12 * d14) * d22);
 HEAPF32[i45 + (i10 << 2 << 2) >> 2] = d43 * ((d12 * d11 - d16 * d15) * d21 + (d16 * d14 - d13 * d11) * d20 + (d13 * d15 - d12 * d14) * d19);
 if ((HEAP8[i1 + 716 >> 0] | 0) == 0) if ((HEAP8[i1 + 737 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 } else {
  i46 = 0;
  i48 = 0;
  i10 = 0;
  d11 = 0.0;
 } else {
  d11 = +HEAPF32[i1 + 708 >> 2] * +HEAPF32[i1 + 732 >> 2];
  i46 = 1;
  i48 = (HEAP8[i1 + 737 >> 0] | 0) == 0;
  i10 = d11 > 0.0 ? 1 : 2;
 }
 i45 = (HEAP32[i5 + 24 >> 2] | 0) * 5 | 0;
 HEAPF32[i44 + (i45 << 2) >> 2] = d9 * d8;
 HEAPF32[i44 + (i45 + 1 << 2) >> 2] = d7 * d8;
 HEAPF32[i44 + (i45 + 2 << 2) >> 2] = d6 * d8;
 HEAPF32[i36 + (i45 << 2) >> 2] = -(d9 * d8);
 HEAPF32[i36 + (i45 + 1 << 2) >> 2] = -(d7 * d8);
 HEAPF32[i36 + (i45 + 2 << 2) >> 2] = -(d6 * d8);
 d12 = +_fmodf(+(+HEAPF32[i1 + 688 >> 2] - +HEAPF32[i1 + 692 >> 2]), 6.2831854820251465);
 if (!(d12 < -3.1415927410125732)) {
  if (d12 > 3.1415927410125732) d12 = d12 + -6.2831854820251465;
 } else d12 = d12 + 6.2831854820251465;
 d14 = +_fmodf(+(+HEAPF32[i1 + 688 >> 2] + +HEAPF32[i1 + 692 >> 2]), 6.2831854820251465);
 if (!(d14 < -3.1415927410125732)) {
  if (d14 > 3.1415927410125732) d14 = d14 + -6.2831854820251465;
 } else d14 = d14 + 6.2831854820251465;
 i44 = d12 == d14;
 i36 = (HEAP32[i5 + 28 >> 2] | 0) + (i45 << 2) | 0;
 HEAPF32[i36 >> 2] = 0.0;
 i47 = HEAP32[i1 + 748 >> 2] | 0;
 d13 = +HEAPF32[((i47 & 2 | 0) == 0 ? i5 + 4 | 0 : i1 + 760 | 0) >> 2];
 if (!(i46 & i44 | i48)) {
  if ((i47 & 4 | 0) != 0) HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i45 << 2) >> 2] = +HEAPF32[i1 + 752 >> 2];
  d16 = +HEAPF32[i1 + 728 >> 2];
  d15 = +HEAPF32[i1 + 680 >> 2];
  i48 = d12 > d14;
  do if (!(i48 | i44)) {
   d17 = d15 / (d13 * +HEAPF32[i5 >> 2]);
   if (d17 < 0.0) {
    if (d16 >= d12 ? d12 - d17 > d16 : 0) {
     d12 = (d12 - d16) / d17;
     break;
    }
    d12 = d16 < d12 ? 0.0 : 1.0;
    break;
   }
   if (d17 > 0.0) {
    if (d16 <= d14 ? d14 - d17 < d16 : 0) {
     d12 = (d14 - d16) / d17;
     break;
    }
    d12 = d16 > d14 ? 0.0 : 1.0;
   } else d12 = 0.0;
  } else d12 = i48 ? 1.0 : 0.0; while (0);
  HEAPF32[i36 >> 2] = d12 * d15 * +HEAPF32[i1 + 732 >> 2] + +HEAPF32[i36 >> 2];
  HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i45 << 2) >> 2] = -+HEAPF32[i1 + 684 >> 2];
  HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i45 << 2) >> 2] = +HEAPF32[i1 + 684 >> 2];
 }
 if (!i46) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i36 >> 2] = +HEAPF32[i36 >> 2] + d11 * d13 * +HEAPF32[i5 >> 2];
 if ((i47 & 1 | 0) != 0) HEAPF32[(HEAP32[i5 + 32 >> 2] | 0) + (i45 << 2) >> 2] = +HEAPF32[i1 + 756 >> 2];
 do if (!i44) {
  i44 = (HEAP32[i5 + 36 >> 2] | 0) + (i45 << 2) | 0;
  if ((i10 | 0) == 1) {
   HEAPF32[i44 >> 2] = 0.0;
   HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i45 << 2) >> 2] = 3.4028234663852886e+38;
   break;
  } else {
   HEAPF32[i44 >> 2] = -3.4028234663852886e+38;
   HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i45 << 2) >> 2] = 0.0;
   break;
  }
 } else {
  HEAPF32[(HEAP32[i5 + 36 >> 2] | 0) + (i45 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[(HEAP32[i5 + 40 >> 2] | 0) + (i45 << 2) >> 2] = 3.4028234663852886e+38;
 } while (0);
 d11 = +HEAPF32[i1 + 704 >> 2];
 do if (d11 > 0.0) {
  d6 = +HEAPF32[i3 + 328 >> 2] * d9 * d8 + +HEAPF32[i3 + 332 >> 2] * d7 * d8 + +HEAPF32[i3 + 336 >> 2] * d6 * d8 - (d9 * d8 * +HEAPF32[i4 + 328 >> 2] + d7 * d8 * +HEAPF32[i4 + 332 >> 2] + d6 * d8 * +HEAPF32[i4 + 336 >> 2]);
  if ((i10 | 0) == 1) {
   if (!(d6 < 0.0)) break;
   if (!(+HEAPF32[i36 >> 2] < -(d11 * d6))) break;
   HEAPF32[i36 >> 2] = -(d11 * d6);
   break;
  } else {
   if (!(d6 > 0.0)) break;
   if (!(+HEAPF32[i36 >> 2] > -(d11 * d6))) break;
   HEAPF32[i36 >> 2] = -(d11 * d6);
   break;
  }
 } while (0);
 HEAPF32[i36 >> 2] = +HEAPF32[i1 + 700 >> 2] * +HEAPF32[i36 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN36btCompoundCompoundCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i1, i3, i4, i42, i43) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i42 = i42 | 0;
 i43 = i43 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, i64 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i5 = HEAP32[i3 + 4 >> 2] | 0;
 i7 = HEAP32[i4 + 4 >> 2] | 0;
 if ((HEAP32[i5 + 68 >> 2] | 0) == (HEAP32[i1 + 40 >> 2] | 0) ? (HEAP32[i7 + 68 >> 2] | 0) == (HEAP32[i1 + 44 >> 2] | 0) : 0) i8 = i1 + 8 | 0; else {
  i8 = HEAP32[i1 + 8 >> 2] | 0;
  i46 = HEAP32[i8 + 8 >> 2] | 0;
  if ((i46 | 0) > 0) {
   i45 = 0;
   do {
    i44 = HEAP32[(HEAP32[i8 + 16 >> 2] | 0) + (i45 * 12 | 0) + 8 >> 2] | 0;
    if ((i44 | 0) != 0) {
     FUNCTION_TABLE_vi[HEAP32[HEAP32[i44 >> 2] >> 2] & 511](i44);
     i52 = HEAP32[i1 + 4 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i52 >> 2] | 0) + 60 >> 2] & 127](i52, i44);
    }
    i45 = i45 + 1 | 0;
   } while ((i45 | 0) != (i46 | 0));
   i8 = HEAP32[i1 + 8 >> 2] | 0;
  }
  __ZN23btHashedSimplePairCache14removeAllPairsEv(i8);
  i8 = i1 + 8 | 0;
 }
 i44 = i2 + 180 | 0;
 HEAP8[i44 >> 0] = 1;
 i45 = i2 + 176 | 0;
 HEAP32[i45 >> 2] = 0;
 i46 = i2 + 168 | 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i2 + 172 >> 2] = 0;
 i47 = HEAP32[i8 >> 2] | 0;
 i49 = HEAP32[i47 + 8 >> 2] | 0;
 if ((i49 | 0) > 0) {
  i48 = 0;
  do {
   i50 = HEAP32[(HEAP32[i47 + 16 >> 2] | 0) + (i48 * 12 | 0) + 8 >> 2] | 0;
   if ((i50 | 0) != 0) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i50 >> 2] | 0) + 16 >> 2] & 127](i50, i2 + 164 | 0);
    i51 = HEAP32[i46 >> 2] | 0;
    if ((i51 | 0) > 0) {
     i49 = 0;
     do {
      i50 = HEAP32[(HEAP32[i45 >> 2] | 0) + (i49 << 2) >> 2] | 0;
      if ((HEAP32[i50 + 748 >> 2] | 0) != 0) {
       HEAP32[i43 + 4 >> 2] = i50;
       i51 = HEAP32[i50 + 740 >> 2] | 0;
       i52 = HEAP32[(HEAP32[i43 + 8 >> 2] | 0) + 8 >> 2] | 0;
       if ((i51 | 0) == (i52 | 0)) __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i50, i51 + 4 | 0, (HEAP32[(HEAP32[i43 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0); else __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i50, (HEAP32[(HEAP32[i43 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i52 + 4 | 0);
       HEAP32[i43 + 4 >> 2] = 0;
       i51 = HEAP32[i46 >> 2] | 0;
      }
      i49 = i49 + 1 | 0;
     } while ((i49 | 0) < (i51 | 0));
    }
    if ((i51 | 0) < 0) {
     if ((HEAP32[i2 + 172 >> 2] | 0) < 0) {
      i49 = HEAP32[i45 >> 2] | 0;
      if ((i51 | 0) > 0) {
       i50 = 0;
       do {
        if ((i50 | 0) != 0) HEAP32[0 + (i50 << 2) >> 2] = HEAP32[i49 + (i50 << 2) >> 2];
        i50 = i50 + 1 | 0;
       } while ((i50 | 0) != (i51 | 0));
      }
      if ((i49 | 0) != 0) {
       if ((HEAP8[i44 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i49 + -4 >> 2] | 0);
       }
       HEAP32[i45 >> 2] = 0;
      }
      HEAP8[i44 >> 0] = 1;
      HEAP32[i45 >> 2] = 0;
      HEAP32[i2 + 172 >> 2] = 0;
     }
     do {
      i49 = (HEAP32[i45 >> 2] | 0) + (i51 << 2) | 0;
      if ((i49 | 0) != 0) HEAP32[i49 >> 2] = 0;
      i51 = i51 + 1 | 0;
     } while ((i51 | 0) != 0);
    }
    HEAP32[i46 >> 2] = 0;
    i49 = HEAP32[i47 + 8 >> 2] | 0;
   }
   i48 = i48 + 1 | 0;
  } while ((i48 | 0) < (i49 | 0));
  i47 = HEAP32[i45 >> 2] | 0;
  if ((i47 | 0) != 0) {
   if ((HEAP8[i44 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i47 + -4 >> 2] | 0);
   }
   HEAP32[i45 >> 2] = 0;
  }
 }
 HEAP8[i44 >> 0] = 1;
 HEAP32[i45 >> 2] = 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i2 + 172 >> 2] = 0;
 i51 = HEAP32[i5 + 64 >> 2] | 0;
 i52 = HEAP32[i7 + 64 >> 2] | 0;
 i48 = HEAP32[i1 + 4 >> 2] | 0;
 i49 = HEAP32[i8 >> 2] | 0;
 i50 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i2 + 128 >> 2] = 18296;
 HEAP32[i2 + 132 >> 2] = 0;
 HEAP32[i2 + 136 >> 2] = i3;
 HEAP32[i2 + 140 >> 2] = i4;
 HEAP32[i2 + 144 >> 2] = i48;
 HEAP32[i2 + 148 >> 2] = i42;
 HEAP32[i2 + 152 >> 2] = i43;
 HEAP32[i2 + 156 >> 2] = i49;
 HEAP32[i2 + 160 >> 2] = i50;
 i42 = HEAP32[i3 + 12 >> 2] | 0;
 d20 = +HEAPF32[i42 >> 2];
 d22 = +HEAPF32[i42 + 16 >> 2];
 d24 = +HEAPF32[i42 + 32 >> 2];
 d14 = +HEAPF32[i42 + 4 >> 2];
 d13 = +HEAPF32[i42 + 20 >> 2];
 d12 = +HEAPF32[i42 + 36 >> 2];
 d11 = +HEAPF32[i42 + 8 >> 2];
 d10 = +HEAPF32[i42 + 24 >> 2];
 d9 = +HEAPF32[i42 + 40 >> 2];
 d21 = -+HEAPF32[i42 + 48 >> 2];
 d23 = -+HEAPF32[i42 + 52 >> 2];
 d25 = -+HEAPF32[i42 + 56 >> 2];
 i42 = HEAP32[i4 + 12 >> 2] | 0;
 d29 = +HEAPF32[i42 >> 2];
 d30 = +HEAPF32[i42 + 16 >> 2];
 d31 = +HEAPF32[i42 + 32 >> 2];
 d32 = +HEAPF32[i42 + 4 >> 2];
 d19 = +HEAPF32[i42 + 20 >> 2];
 d18 = +HEAPF32[i42 + 36 >> 2];
 d17 = +HEAPF32[i42 + 8 >> 2];
 d16 = +HEAPF32[i42 + 24 >> 2];
 d15 = +HEAPF32[i42 + 40 >> 2];
 d26 = +HEAPF32[i42 + 48 >> 2];
 d27 = +HEAPF32[i42 + 52 >> 2];
 d28 = +HEAPF32[i42 + 56 >> 2];
 i42 = HEAP32[i51 >> 2] | 0;
 i43 = HEAP32[i52 >> 2] | 0;
 if (!((i42 | 0) == 0 | (i43 | 0) == 0)) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i48 = _malloc(1043) | 0;
  HEAP32[(i48 + 19 & -16) + -4 >> 2] = i48;
  HEAP32[(i48 + 19 & -16) >> 2] = i42;
  HEAP32[(i48 + 19 & -16) + 4 >> 2] = i43;
  d41 = +Math_abs(+(d20 * d29 + d22 * d30 + d24 * d31));
  d40 = +Math_abs(+(d20 * d32 + d22 * d19 + d24 * d18));
  d39 = +Math_abs(+(d20 * d17 + d22 * d16 + d24 * d15));
  d33 = +Math_abs(+(d14 * d29 + d13 * d30 + d12 * d31));
  d38 = +Math_abs(+(d14 * d32 + d13 * d19 + d12 * d18));
  d37 = +Math_abs(+(d14 * d17 + d13 * d16 + d12 * d15));
  d36 = +Math_abs(+(d11 * d29 + d10 * d30 + d9 * d31));
  d35 = +Math_abs(+(d11 * d32 + d10 * d19 + d9 * d18));
  d34 = +Math_abs(+(d11 * d17 + d10 * d16 + d9 * d15));
  i48 = i48 + 19 & -16;
  i46 = 128;
  i49 = 128;
  i42 = 1;
  i47 = 124;
  do {
   i43 = i42 + -1 | 0;
   i45 = HEAP32[i48 + (i43 << 3) >> 2] | 0;
   i44 = HEAP32[i48 + (i43 << 3) + 4 >> 2] | 0;
   d63 = +HEAPF32[i44 + 16 >> 2];
   d62 = +HEAPF32[i44 >> 2];
   d61 = +HEAPF32[i44 + 20 >> 2];
   d60 = +HEAPF32[i44 + 4 >> 2];
   d59 = +HEAPF32[i44 + 24 >> 2];
   d53 = +HEAPF32[i44 + 8 >> 2];
   d58 = d20 * d21 + d22 * d23 + d24 * d25 + (d20 * d26 + d22 * d27 + d24 * d28) + ((d20 * d29 + d22 * d30 + d24 * d31) * (d63 + d62) * .5 + (d20 * d32 + d22 * d19 + d24 * d18) * (d61 + d60) * .5 + (d20 * d17 + d22 * d16 + d24 * d15) * (d59 + d53) * .5);
   d56 = d14 * d21 + d13 * d23 + d12 * d25 + (d14 * d26 + d13 * d27 + d12 * d28) + ((d14 * d29 + d13 * d30 + d12 * d31) * (d63 + d62) * .5 + (d14 * d32 + d13 * d19 + d12 * d18) * (d61 + d60) * .5 + (d14 * d17 + d13 * d16 + d12 * d15) * (d59 + d53) * .5);
   d54 = d11 * d21 + d10 * d23 + d9 * d25 + (d11 * d26 + d10 * d27 + d9 * d28) + ((d11 * d29 + d10 * d30 + d9 * d31) * (d63 + d62) * .5 + (d11 * d32 + d10 * d19 + d9 * d18) * (d61 + d60) * .5 + (d11 * d17 + d10 * d16 + d9 * d15) * (d59 + d53) * .5);
   d57 = ((d63 - d62) * .5 + 0.0) * d41 + ((d61 - d60) * .5 + 0.0) * d40 + ((d59 - d53) * .5 + 0.0) * d39;
   d55 = ((d63 - d62) * .5 + 0.0) * d33 + ((d61 - d60) * .5 + 0.0) * d38 + ((d59 - d53) * .5 + 0.0) * d37;
   d53 = ((d63 - d62) * .5 + 0.0) * d36 + ((d61 - d60) * .5 + 0.0) * d35 + ((d59 - d53) * .5 + 0.0) * d34;
   do if (((((+HEAPF32[i45 >> 2] <= d57 + d58 ? +HEAPF32[i45 + 16 >> 2] >= d58 - d57 : 0) ? +HEAPF32[i45 + 4 >> 2] <= d56 + d55 : 0) ? +HEAPF32[i45 + 20 >> 2] >= d56 - d55 : 0) ? +HEAPF32[i45 + 8 >> 2] <= d54 + d53 : 0) ? +HEAPF32[i45 + 24 >> 2] >= d54 - d53 : 0) {
    if ((i43 | 0) > (i47 | 0)) {
     i47 = i46 << 1;
     if ((i46 | 0) < (i47 | 0) & (i49 | 0) < (i47 | 0)) {
      if ((i46 | 0) != 0) {
       HEAP32[5004] = (HEAP32[5004] | 0) + 1;
       i49 = _malloc((i46 << 4 | 3) + 16 | 0) | 0;
       if ((i49 | 0) == 0) i49 = 0; else {
        HEAP32[(i49 + 19 & -16) + -4 >> 2] = i49;
        i49 = i49 + 19 & -16;
       }
       if ((i46 | 0) > 0) {
        i50 = 0;
        do {
         i51 = i49 + (i50 << 3) | 0;
         if ((i51 | 0) != 0) {
          i64 = i48 + (i50 << 3) | 0;
          i52 = HEAP32[i64 + 4 >> 2] | 0;
          HEAP32[i51 >> 2] = HEAP32[i64 >> 2];
          HEAP32[i51 + 4 >> 2] = i52;
         }
         i50 = i50 + 1 | 0;
        } while ((i50 | 0) != (i46 | 0));
       }
      } else i49 = 0;
      if ((i48 | 0) == 0) {
       i48 = i49;
       i49 = i47;
      } else {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i48 + -4 >> 2] | 0);
       i48 = i49;
       i49 = i47;
      }
     }
     i46 = i47;
     i47 = i47 + -4 | 0;
    }
    i50 = (HEAP32[i44 + 40 >> 2] | 0) != 0;
    if ((HEAP32[i45 + 40 >> 2] | 0) == 0) if (i50) {
     i64 = HEAP32[i44 + 36 >> 2] | 0;
     i52 = i48 + (i43 << 3) | 0;
     HEAP32[i52 >> 2] = i45;
     HEAP32[i52 + 4 >> 2] = i64;
     i52 = HEAP32[i44 + 40 >> 2] | 0;
     i64 = i48 + (i42 << 3) | 0;
     HEAP32[i64 >> 2] = i45;
     HEAP32[i64 + 4 >> 2] = i52;
     i42 = i42 + 1 | 0;
     break;
    } else {
     FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 + 128 >> 2] | 0) + 8 >> 2] & 127](i2 + 128 | 0, i45, i44);
     i42 = i43;
     break;
    } else {
     i43 = i48 + (i43 << 3) | 0;
     i51 = HEAP32[i45 + 36 >> 2] | 0;
     if (i50) {
      i52 = HEAP32[i44 + 36 >> 2] | 0;
      HEAP32[i43 >> 2] = i51;
      HEAP32[i43 + 4 >> 2] = i52;
      i52 = HEAP32[i44 + 36 >> 2] | 0;
      i64 = i48 + (i42 << 3) | 0;
      HEAP32[i64 >> 2] = HEAP32[i45 + 40 >> 2];
      HEAP32[i64 + 4 >> 2] = i52;
      i64 = HEAP32[i44 + 40 >> 2] | 0;
      i52 = i48 + (i42 + 1 << 3) | 0;
      HEAP32[i52 >> 2] = HEAP32[i45 + 36 >> 2];
      HEAP32[i52 + 4 >> 2] = i64;
      i52 = HEAP32[i44 + 40 >> 2] | 0;
      i64 = i48 + (i42 + 2 << 3) | 0;
      HEAP32[i64 >> 2] = HEAP32[i45 + 40 >> 2];
      HEAP32[i64 + 4 >> 2] = i52;
      i42 = i42 + 3 | 0;
      break;
     } else {
      HEAP32[i43 >> 2] = i51;
      HEAP32[i43 + 4 >> 2] = i44;
      i64 = i48 + (i42 << 3) | 0;
      HEAP32[i64 >> 2] = HEAP32[i45 + 40 >> 2];
      HEAP32[i64 + 4 >> 2] = i44;
      i42 = i42 + 1 | 0;
      break;
     }
    }
   } else i42 = i43; while (0);
  } while ((i42 | 0) != 0);
  if ((i48 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i48 + -4 >> 2] | 0);
  }
 }
 i42 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[i42 + 8 >> 2] | 0) > 0) {
  i43 = 0;
  do {
   i45 = HEAP32[i42 + 16 >> 2] | 0;
   i44 = HEAP32[i45 + (i43 * 12 | 0) + 8 >> 2] | 0;
   do if ((i44 | 0) != 0) {
    i64 = HEAP32[i45 + (i43 * 12 | 0) >> 2] | 0;
    i52 = HEAP32[i5 + 24 >> 2] | 0;
    i51 = HEAP32[i52 + (i64 * 80 | 0) + 64 >> 2] | 0;
    i50 = HEAP32[i3 + 12 >> 2] | 0;
    d63 = +HEAPF32[i50 >> 2];
    d31 = +HEAPF32[i50 + 4 >> 2];
    d30 = +HEAPF32[i50 + 8 >> 2];
    d60 = +HEAPF32[i50 + 16 >> 2];
    d58 = +HEAPF32[i50 + 20 >> 2];
    d56 = +HEAPF32[i50 + 24 >> 2];
    d59 = +HEAPF32[i50 + 32 >> 2];
    d55 = +HEAPF32[i50 + 36 >> 2];
    d36 = +HEAPF32[i50 + 40 >> 2];
    d54 = +HEAPF32[i52 + (i64 * 80 | 0) >> 2];
    d53 = +HEAPF32[i52 + (i64 * 80 | 0) + 16 >> 2];
    d41 = +HEAPF32[i52 + (i64 * 80 | 0) + 32 >> 2];
    d40 = +HEAPF32[i52 + (i64 * 80 | 0) + 4 >> 2];
    d39 = +HEAPF32[i52 + (i64 * 80 | 0) + 20 >> 2];
    d38 = +HEAPF32[i52 + (i64 * 80 | 0) + 36 >> 2];
    d57 = +HEAPF32[i52 + (i64 * 80 | 0) + 8 >> 2];
    d37 = +HEAPF32[i52 + (i64 * 80 | 0) + 24 >> 2];
    d35 = +HEAPF32[i52 + (i64 * 80 | 0) + 40 >> 2];
    d62 = +HEAPF32[i52 + (i64 * 80 | 0) + 48 >> 2];
    d61 = +HEAPF32[i52 + (i64 * 80 | 0) + 52 >> 2];
    d32 = +HEAPF32[i52 + (i64 * 80 | 0) + 56 >> 2];
    d34 = +HEAPF32[i50 + 48 >> 2] + (d63 * d62 + d31 * d61 + d30 * d32);
    d33 = +HEAPF32[i50 + 52 >> 2] + (d60 * d62 + d58 * d61 + d56 * d32);
    d32 = +HEAPF32[i50 + 56 >> 2] + (d59 * d62 + d55 * d61 + d36 * d32);
    HEAPF32[i2 >> 2] = d63 * d54 + d31 * d53 + d30 * d41;
    HEAPF32[i2 + 4 >> 2] = d63 * d40 + d31 * d39 + d30 * d38;
    HEAPF32[i2 + 8 >> 2] = d63 * d57 + d31 * d37 + d30 * d35;
    HEAPF32[i2 + 12 >> 2] = 0.0;
    HEAPF32[i2 + 16 >> 2] = d60 * d54 + d58 * d53 + d56 * d41;
    HEAPF32[i2 + 20 >> 2] = d60 * d40 + d58 * d39 + d56 * d38;
    HEAPF32[i2 + 24 >> 2] = d60 * d57 + d58 * d37 + d56 * d35;
    HEAPF32[i2 + 28 >> 2] = 0.0;
    HEAPF32[i2 + 32 >> 2] = d59 * d54 + d55 * d53 + d36 * d41;
    HEAPF32[i2 + 36 >> 2] = d59 * d40 + d55 * d39 + d36 * d38;
    HEAPF32[i2 + 40 >> 2] = d59 * d57 + d55 * d37 + d36 * d35;
    HEAPF32[i2 + 44 >> 2] = 0.0;
    HEAPF32[i2 + 48 >> 2] = d34;
    HEAPF32[i2 + 52 >> 2] = d33;
    HEAPF32[i2 + 56 >> 2] = d32;
    HEAPF32[i2 + 60 >> 2] = 0.0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i51 >> 2] | 0) + 8 >> 2] & 127](i51, i2, i2 + 112 | 0, i2 + 96 | 0);
    i51 = HEAP32[(HEAP32[i42 + 16 >> 2] | 0) + (i43 * 12 | 0) + 4 >> 2] | 0;
    i50 = HEAP32[i7 + 24 >> 2] | 0;
    i64 = HEAP32[i50 + (i51 * 80 | 0) + 64 >> 2] | 0;
    i52 = HEAP32[i4 + 12 >> 2] | 0;
    d32 = +HEAPF32[i52 >> 2];
    d33 = +HEAPF32[i52 + 4 >> 2];
    d34 = +HEAPF32[i52 + 8 >> 2];
    d35 = +HEAPF32[i52 + 16 >> 2];
    d36 = +HEAPF32[i52 + 20 >> 2];
    d37 = +HEAPF32[i52 + 24 >> 2];
    d55 = +HEAPF32[i52 + 32 >> 2];
    d57 = +HEAPF32[i52 + 36 >> 2];
    d59 = +HEAPF32[i52 + 40 >> 2];
    d38 = +HEAPF32[i50 + (i51 * 80 | 0) >> 2];
    d39 = +HEAPF32[i50 + (i51 * 80 | 0) + 16 >> 2];
    d40 = +HEAPF32[i50 + (i51 * 80 | 0) + 32 >> 2];
    d41 = +HEAPF32[i50 + (i51 * 80 | 0) + 4 >> 2];
    d53 = +HEAPF32[i50 + (i51 * 80 | 0) + 20 >> 2];
    d54 = +HEAPF32[i50 + (i51 * 80 | 0) + 36 >> 2];
    d56 = +HEAPF32[i50 + (i51 * 80 | 0) + 8 >> 2];
    d58 = +HEAPF32[i50 + (i51 * 80 | 0) + 24 >> 2];
    d60 = +HEAPF32[i50 + (i51 * 80 | 0) + 40 >> 2];
    d30 = +HEAPF32[i50 + (i51 * 80 | 0) + 48 >> 2];
    d31 = +HEAPF32[i50 + (i51 * 80 | 0) + 52 >> 2];
    d63 = +HEAPF32[i50 + (i51 * 80 | 0) + 56 >> 2];
    d61 = +HEAPF32[i52 + 48 >> 2] + (d32 * d30 + d33 * d31 + d34 * d63);
    d62 = +HEAPF32[i52 + 52 >> 2] + (d35 * d30 + d36 * d31 + d37 * d63);
    d63 = +HEAPF32[i52 + 56 >> 2] + (d55 * d30 + d57 * d31 + d59 * d63);
    HEAPF32[i2 >> 2] = d32 * d38 + d33 * d39 + d34 * d40;
    HEAPF32[i2 + 4 >> 2] = d32 * d41 + d33 * d53 + d34 * d54;
    HEAPF32[i2 + 8 >> 2] = d32 * d56 + d33 * d58 + d34 * d60;
    HEAPF32[i2 + 12 >> 2] = 0.0;
    HEAPF32[i2 + 16 >> 2] = d35 * d38 + d36 * d39 + d37 * d40;
    HEAPF32[i2 + 20 >> 2] = d35 * d41 + d36 * d53 + d37 * d54;
    HEAPF32[i2 + 24 >> 2] = d35 * d56 + d36 * d58 + d37 * d60;
    HEAPF32[i2 + 28 >> 2] = 0.0;
    HEAPF32[i2 + 32 >> 2] = d55 * d38 + d57 * d39 + d59 * d40;
    HEAPF32[i2 + 36 >> 2] = d55 * d41 + d57 * d53 + d59 * d54;
    HEAPF32[i2 + 40 >> 2] = d55 * d56 + d57 * d58 + d59 * d60;
    HEAPF32[i2 + 44 >> 2] = 0.0;
    HEAPF32[i2 + 48 >> 2] = d61;
    HEAPF32[i2 + 52 >> 2] = d62;
    HEAPF32[i2 + 56 >> 2] = d63;
    HEAPF32[i2 + 60 >> 2] = 0.0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i64 >> 2] | 0) + 8 >> 2] & 127](i64, i2, i2 + 80 | 0, i2 + 64 | 0);
    if (!(+HEAPF32[i2 + 112 >> 2] > +HEAPF32[i2 + 64 >> 2]) ? !(+HEAPF32[i2 + 96 >> 2] < +HEAPF32[i2 + 80 >> 2]) : 0) i45 = 1; else i45 = 0;
    if (!(!(+HEAPF32[i2 + 120 >> 2] > +HEAPF32[i2 + 72 >> 2]) ? !(+HEAPF32[i2 + 104 >> 2] < +HEAPF32[i2 + 88 >> 2]) : 0)) i45 = 0;
    if (!(+HEAPF32[i2 + 116 >> 2] > +HEAPF32[i2 + 68 >> 2]) ? !(+HEAPF32[i2 + 100 >> 2] < +HEAPF32[i2 + 84 >> 2] | i45 ^ 1) : 0) break;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i44 >> 2] >> 2] & 511](i44);
    i45 = HEAP32[i1 + 4 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i45 >> 2] | 0) + 60 >> 2] & 127](i45, i44);
    i45 = HEAP32[i42 + 16 >> 2] | 0;
    i44 = HEAP32[i45 + (i43 * 12 | 0) >> 2] | 0;
    i45 = HEAP32[i45 + (i43 * 12 | 0) + 4 >> 2] | 0;
    i49 = HEAP32[i1 + 16 >> 2] | 0;
    if ((i49 | 0) == (HEAP32[i1 + 20 >> 2] | 0) ? (i6 = (i49 | 0) == 0 ? 1 : i49 << 1, (i49 | 0) < (i6 | 0)) : 0) {
     if ((i6 | 0) == 0) i46 = 0; else {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i46 = _malloc((i6 * 12 | 3) + 16 | 0) | 0;
      if ((i46 | 0) == 0) i46 = 0; else {
       HEAP32[(i46 + 19 & -16) + -4 >> 2] = i46;
       i46 = i46 + 19 & -16;
      }
      i49 = HEAP32[i1 + 16 >> 2] | 0;
     }
     if ((i49 | 0) > 0) {
      i48 = 0;
      do {
       i47 = i46 + (i48 * 12 | 0) | 0;
       if ((i47 | 0) != 0) {
        i64 = (HEAP32[i1 + 24 >> 2] | 0) + (i48 * 12 | 0) | 0;
        HEAP32[i47 + 0 >> 2] = HEAP32[i64 + 0 >> 2];
        HEAP32[i47 + 4 >> 2] = HEAP32[i64 + 4 >> 2];
        HEAP32[i47 + 8 >> 2] = HEAP32[i64 + 8 >> 2];
       }
       i48 = i48 + 1 | 0;
      } while ((i48 | 0) != (i49 | 0));
     }
     i47 = HEAP32[i1 + 24 >> 2] | 0;
     if ((i47 | 0) != 0) {
      if ((HEAP8[i1 + 28 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i47 + -4 >> 2] | 0);
      }
      HEAP32[i1 + 24 >> 2] = 0;
     }
     HEAP8[i1 + 28 >> 0] = 1;
     HEAP32[i1 + 24 >> 2] = i46;
     HEAP32[i1 + 20 >> 2] = i6;
     i49 = HEAP32[i1 + 16 >> 2] | 0;
    }
    i47 = HEAP32[i1 + 24 >> 2] | 0;
    i46 = i47 + (i49 * 12 | 0) | 0;
    if ((i46 | 0) != 0) {
     HEAP32[i46 >> 2] = i44;
     HEAP32[i47 + (i49 * 12 | 0) + 4 >> 2] = i45;
     HEAP32[i47 + (i49 * 12 | 0) + 8 >> 2] = 0;
     i49 = HEAP32[i1 + 16 >> 2] | 0;
    }
    HEAP32[i1 + 16 >> 2] = i49 + 1;
   } while (0);
   i43 = i43 + 1 | 0;
  } while ((i43 | 0) < (HEAP32[i42 + 8 >> 2] | 0));
  i3 = i1 + 24 | 0;
  i4 = i1 + 16 | 0;
 } else {
  i3 = i1 + 24 | 0;
  i4 = i1 + 16 | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i5 = 0;
  do {
   i52 = HEAP32[i8 >> 2] | 0;
   i64 = HEAP32[i3 >> 2] | 0;
   FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i52 >> 2] | 0) + 8 >> 2] & 31](i52, HEAP32[i64 + (i5 * 12 | 0) >> 2] | 0, HEAP32[i64 + (i5 * 12 | 0) + 4 >> 2] | 0) | 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 i5 = HEAP32[i3 >> 2] | 0;
 if ((i5 | 0) == 0) {
  HEAP8[i1 + 28 >> 0] = 1;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i64 = i1 + 20 | 0;
  HEAP32[i64 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 28 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i5 + -4 >> 2] | 0);
 }
 HEAP32[i3 >> 2] = 0;
 HEAP8[i1 + 28 >> 0] = 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i64 = i1 + 20 | 0;
 HEAP32[i64 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld15debugDrawObjectERK11btTransformPK16btCollisionShapeRK9btVector3(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, i36 = 0, i37 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[i6 >> 2] | 0) + 56 >> 2] & 7](i6, i3, 1.0);
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 switch (i6 | 0) {
 case 31:
  {
   i6 = HEAP32[i1 + 16 >> 2] | 0;
   if ((i6 | 0) <= 0) {
    STACKTOP = i5;
    return;
   }
   do {
    i6 = i6 + -1 | 0;
    i15 = HEAP32[i1 + 24 >> 2] | 0;
    d27 = +HEAPF32[i15 + (i6 * 80 | 0) >> 2];
    d24 = +HEAPF32[i15 + (i6 * 80 | 0) + 4 >> 2];
    d21 = +HEAPF32[i15 + (i6 * 80 | 0) + 8 >> 2];
    d26 = +HEAPF32[i15 + (i6 * 80 | 0) + 16 >> 2];
    d23 = +HEAPF32[i15 + (i6 * 80 | 0) + 20 >> 2];
    d19 = +HEAPF32[i15 + (i6 * 80 | 0) + 24 >> 2];
    d25 = +HEAPF32[i15 + (i6 * 80 | 0) + 32 >> 2];
    d22 = +HEAPF32[i15 + (i6 * 80 | 0) + 36 >> 2];
    d17 = +HEAPF32[i15 + (i6 * 80 | 0) + 40 >> 2];
    d35 = +HEAPF32[i15 + (i6 * 80 | 0) + 48 >> 2];
    d34 = +HEAPF32[i15 + (i6 * 80 | 0) + 52 >> 2];
    d12 = +HEAPF32[i15 + (i6 * 80 | 0) + 56 >> 2];
    i15 = HEAP32[i15 + (i6 * 80 | 0) + 64 >> 2] | 0;
    i14 = HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] | 0;
    d33 = +HEAPF32[i3 >> 2];
    d32 = +HEAPF32[i3 + 4 >> 2];
    d31 = +HEAPF32[i3 + 8 >> 2];
    d30 = +HEAPF32[i3 + 16 >> 2];
    d29 = +HEAPF32[i3 + 20 >> 2];
    d28 = +HEAPF32[i3 + 24 >> 2];
    d20 = +HEAPF32[i3 + 32 >> 2];
    d18 = +HEAPF32[i3 + 36 >> 2];
    d16 = +HEAPF32[i3 + 40 >> 2];
    d9 = d35 * d33 + d34 * d32 + d12 * d31 + +HEAPF32[i3 + 48 >> 2];
    d10 = d35 * d30 + d34 * d29 + d12 * d28 + +HEAPF32[i3 + 52 >> 2];
    d12 = d35 * d20 + d34 * d18 + d12 * d16 + +HEAPF32[i3 + 56 >> 2];
    HEAPF32[i5 + 416 >> 2] = d27 * d33 + d26 * d32 + d25 * d31;
    HEAPF32[i5 + 420 >> 2] = d24 * d33 + d23 * d32 + d22 * d31;
    HEAPF32[i5 + 424 >> 2] = d21 * d33 + d19 * d32 + d17 * d31;
    HEAPF32[i5 + 428 >> 2] = 0.0;
    HEAPF32[i5 + 432 >> 2] = d27 * d30 + d26 * d29 + d25 * d28;
    HEAPF32[i5 + 436 >> 2] = d24 * d30 + d23 * d29 + d22 * d28;
    HEAPF32[i5 + 440 >> 2] = d21 * d30 + d19 * d29 + d17 * d28;
    HEAPF32[i5 + 444 >> 2] = 0.0;
    HEAPF32[i5 + 448 >> 2] = d27 * d20 + d26 * d18 + d25 * d16;
    HEAPF32[i5 + 452 >> 2] = d24 * d20 + d23 * d18 + d22 * d16;
    HEAPF32[i5 + 456 >> 2] = d21 * d20 + d19 * d18 + d17 * d16;
    HEAPF32[i5 + 460 >> 2] = 0.0;
    HEAPF32[i5 + 464 >> 2] = d9;
    HEAPF32[i5 + 468 >> 2] = d10;
    HEAPF32[i5 + 472 >> 2] = d12;
    HEAPF32[i5 + 476 >> 2] = 0.0;
    FUNCTION_TABLE_viiii[i14 & 127](i2, i5 + 416 | 0, i15, i4);
   } while ((i6 | 0) > 0);
   STACKTOP = i5;
   return;
  }
 case 0:
  {
   HEAP32[i5 + 400 >> 2] = HEAP32[i1 + 28 >> 2];
   HEAP32[i5 + 404 >> 2] = HEAP32[i1 + 32 >> 2];
   HEAP32[i5 + 408 >> 2] = HEAP32[i1 + 36 >> 2];
   HEAP32[i5 + 412 >> 2] = HEAP32[i1 + 40 >> 2];
   d33 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
   d34 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
   d35 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
   d33 = d33 + +HEAPF32[i5 + 400 >> 2];
   HEAPF32[i5 + 400 >> 2] = d33;
   d34 = d34 + +HEAPF32[i5 + 404 >> 2];
   HEAPF32[i5 + 404 >> 2] = d34;
   d35 = d35 + +HEAPF32[i5 + 408 >> 2];
   HEAPF32[i5 + 408 >> 2] = d35;
   i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   i14 = HEAP32[(HEAP32[i15 >> 2] | 0) + 72 >> 2] | 0;
   HEAPF32[i5 + 384 >> 2] = -d33;
   HEAPF32[i5 + 388 >> 2] = -d34;
   HEAPF32[i5 + 392 >> 2] = -d35;
   HEAPF32[i5 + 396 >> 2] = 0.0;
   FUNCTION_TABLE_viiiii[i14 & 31](i15, i5 + 384 | 0, i5 + 400 | 0, i3, i4);
   STACKTOP = i5;
   return;
  }
 case 8:
  {
   d35 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
   i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_vidii[HEAP32[(HEAP32[i15 >> 2] | 0) + 16 >> 2] & 0](i15, d35, i3, i4);
   STACKTOP = i5;
   return;
  }
 case 28:
  {
   d35 = +HEAPF32[i1 + 64 >> 2];
   i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viidii[HEAP32[(HEAP32[i15 >> 2] | 0) + 88 >> 2] & 0](i15, i1 + 48 | 0, d35, i3, i4);
   STACKTOP = i5;
   return;
  }
 case 10:
  {
   i15 = HEAP32[i1 + 52 >> 2] | 0;
   d34 = +HEAPF32[i1 + (((i15 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
   d35 = +HEAPF32[i1 + (i15 << 2) + 28 >> 2];
   i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viddiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 76 >> 2] & 0](i14, d34, d35, i15, i3, i4);
   STACKTOP = i5;
   return;
  }
 case 11:
  {
   d34 = +HEAPF32[i1 + 56 >> 2];
   d35 = +HEAPF32[i1 + 60 >> 2];
   i15 = HEAP32[i1 + 68 >> 2] | 0;
   i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viddiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 84 >> 2] & 0](i14, d34, d35, i15, i3, i4);
   STACKTOP = i5;
   return;
  }
 case 13:
  {
   i15 = HEAP32[i1 + 52 >> 2] | 0;
   d34 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 92 >> 2] & 15](i1);
   HEAP32[i5 + 304 >> 2] = HEAP32[i1 + 28 >> 2];
   HEAP32[i5 + 308 >> 2] = HEAP32[i1 + 32 >> 2];
   HEAP32[i5 + 312 >> 2] = HEAP32[i1 + 36 >> 2];
   HEAP32[i5 + 316 >> 2] = HEAP32[i1 + 40 >> 2];
   d32 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
   d33 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
   d35 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
   HEAPF32[i5 + 304 >> 2] = d32 + +HEAPF32[i5 + 304 >> 2];
   HEAPF32[i5 + 308 >> 2] = d33 + +HEAPF32[i5 + 308 >> 2];
   HEAPF32[i5 + 312 >> 2] = d35 + +HEAPF32[i5 + 312 >> 2];
   d35 = +HEAPF32[i5 + 304 + (i15 << 2) >> 2];
   i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   FUNCTION_TABLE_viddiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 80 >> 2] & 0](i14, d34, d35, i15, i3, i4);
   STACKTOP = i5;
   return;
  }
 case 9:
  {
   i6 = HEAP32[i1 + 92 >> 2] | 0;
   if ((i6 | 0) <= 0) {
    STACKTOP = i5;
    return;
   }
   do {
    i6 = i6 + -1 | 0;
    i15 = HEAP32[i1 + 100 >> 2] | 0;
    d21 = +HEAPF32[i15 + (i6 << 4) >> 2];
    d22 = +HEAPF32[i15 + (i6 << 4) + 4 >> 2];
    d34 = +HEAPF32[i15 + (i6 << 4) + 8 >> 2];
    i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
    i14 = HEAP32[(HEAP32[i15 >> 2] | 0) + 16 >> 2] | 0;
    d35 = +HEAPF32[(HEAP32[i1 + 120 >> 2] | 0) + (i6 << 2) >> 2];
    d24 = +HEAPF32[i3 >> 2];
    d25 = +HEAPF32[i3 + 4 >> 2];
    d23 = +HEAPF32[i3 + 8 >> 2];
    d27 = +HEAPF32[i3 + 16 >> 2];
    d28 = +HEAPF32[i3 + 20 >> 2];
    d26 = +HEAPF32[i3 + 24 >> 2];
    d30 = +HEAPF32[i3 + 32 >> 2];
    d31 = +HEAPF32[i3 + 36 >> 2];
    d29 = +HEAPF32[i3 + 40 >> 2];
    d32 = d21 * d24 + d22 * d25 + d34 * d23 + +HEAPF32[i3 + 48 >> 2];
    d33 = d21 * d27 + d22 * d28 + d34 * d26 + +HEAPF32[i3 + 52 >> 2];
    d34 = d21 * d30 + d22 * d31 + d34 * d29 + +HEAPF32[i3 + 56 >> 2];
    HEAPF32[i5 + 320 >> 2] = d24 + d25 * 0.0 + d23 * 0.0;
    HEAPF32[i5 + 324 >> 2] = d24 * 0.0 + d25 + d23 * 0.0;
    HEAPF32[i5 + 328 >> 2] = d23 + (d24 * 0.0 + d25 * 0.0);
    HEAPF32[i5 + 332 >> 2] = 0.0;
    HEAPF32[i5 + 336 >> 2] = d27 + d28 * 0.0 + d26 * 0.0;
    HEAPF32[i5 + 340 >> 2] = d27 * 0.0 + d28 + d26 * 0.0;
    HEAPF32[i5 + 344 >> 2] = d26 + (d27 * 0.0 + d28 * 0.0);
    HEAPF32[i5 + 348 >> 2] = 0.0;
    HEAPF32[i5 + 352 >> 2] = d30 + d31 * 0.0 + d29 * 0.0;
    HEAPF32[i5 + 356 >> 2] = d30 * 0.0 + d31 + d29 * 0.0;
    HEAPF32[i5 + 360 >> 2] = d29 + (d30 * 0.0 + d31 * 0.0);
    HEAPF32[i5 + 364 >> 2] = 0.0;
    HEAPF32[i5 + 368 >> 2] = d32;
    HEAPF32[i5 + 372 >> 2] = d33;
    HEAPF32[i5 + 376 >> 2] = d34;
    HEAPF32[i5 + 380 >> 2] = 0.0;
    FUNCTION_TABLE_vidii[i14 & 0](i15, d35, i5 + 320 | 0, i4);
   } while ((i6 | 0) > 0);
   STACKTOP = i5;
   return;
  }
 default:
  {
   L14 : do if ((i6 | 0) < 7) {
    i7 = HEAP32[i1 + 52 >> 2] | 0;
    if ((i7 | 0) == 0) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] & 127](i1) | 0) <= 0) break;
     i6 = 0;
     while (1) {
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 104 >> 2] & 127](i1, i6, i5 + 208 | 0, i5 + 192 | 0);
      d33 = +HEAPF32[i5 + 208 >> 2];
      d21 = +HEAPF32[i3 >> 2];
      d31 = +HEAPF32[i5 + 212 >> 2];
      d22 = +HEAPF32[i3 + 4 >> 2];
      d29 = +HEAPF32[i5 + 216 >> 2];
      d23 = +HEAPF32[i3 + 8 >> 2];
      d25 = +HEAPF32[i3 + 16 >> 2];
      d26 = +HEAPF32[i3 + 20 >> 2];
      d27 = +HEAPF32[i3 + 24 >> 2];
      d30 = +HEAPF32[i3 + 32 >> 2];
      d32 = +HEAPF32[i3 + 36 >> 2];
      d34 = +HEAPF32[i3 + 40 >> 2];
      d24 = +HEAPF32[i3 + 48 >> 2];
      d28 = +HEAPF32[i3 + 52 >> 2];
      d35 = +HEAPF32[i3 + 56 >> 2];
      HEAPF32[i5 + 176 >> 2] = d33 * d21 + d31 * d22 + d29 * d23 + d24;
      HEAPF32[i5 + 180 >> 2] = d33 * d25 + d31 * d26 + d29 * d27 + d28;
      HEAPF32[i5 + 184 >> 2] = d33 * d30 + d31 * d32 + d29 * d34 + d35;
      HEAPF32[i5 + 188 >> 2] = 0.0;
      d29 = +HEAPF32[i5 + 192 >> 2];
      d31 = +HEAPF32[i5 + 196 >> 2];
      d33 = +HEAPF32[i5 + 200 >> 2];
      HEAPF32[i5 + 160 >> 2] = d29 * d21 + d31 * d22 + d33 * d23 + d24;
      HEAPF32[i5 + 164 >> 2] = d29 * d25 + d31 * d26 + d33 * d27 + d28;
      HEAPF32[i5 + 168 >> 2] = d29 * d30 + d31 * d32 + d33 * d34 + d35;
      HEAPF32[i5 + 172 >> 2] = 0.0;
      i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 8 >> 2] & 127](i15, i5 + 176 | 0, i5 + 160 | 0, i4);
      i6 = i6 + 1 | 0;
      if ((i6 | 0) >= (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] & 127](i1) | 0)) break L14;
     }
    }
    if ((HEAP32[i7 + 28 >> 2] | 0) > 0) {
     i6 = 0;
     do {
      i11 = HEAP32[i7 + 36 >> 2] | 0;
      i8 = HEAP32[i11 + (i6 * 36 | 0) + 4 >> 2] | 0;
      L25 : do if ((i8 | 0) > 0) {
       i13 = HEAP32[i11 + (i6 * 36 | 0) + 12 >> 2] | 0;
       i14 = i13;
       d12 = 0.0;
       d10 = 0.0;
       d9 = 0.0;
       i13 = HEAP32[i13 + (i8 + -1 << 2) >> 2] | 0;
       i15 = 0;
       while (1) {
        i11 = HEAP32[i14 + (i15 << 2) >> 2] | 0;
        i14 = HEAP32[i7 + 16 >> 2] | 0;
        d12 = d12 + +HEAPF32[i14 + (i11 << 4) >> 2];
        d10 = d10 + +HEAPF32[i14 + (i11 << 4) + 4 >> 2];
        d9 = d9 + +HEAPF32[i14 + (i11 << 4) + 8 >> 2];
        i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
        i36 = HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] | 0;
        i37 = HEAP32[i7 + 16 >> 2] | 0;
        d33 = +HEAPF32[i37 + (i13 << 4) >> 2];
        d21 = +HEAPF32[i3 >> 2];
        d31 = +HEAPF32[i37 + (i13 << 4) + 4 >> 2];
        d22 = +HEAPF32[i3 + 4 >> 2];
        d29 = +HEAPF32[i37 + (i13 << 4) + 8 >> 2];
        d23 = +HEAPF32[i3 + 8 >> 2];
        d25 = +HEAPF32[i3 + 16 >> 2];
        d26 = +HEAPF32[i3 + 20 >> 2];
        d27 = +HEAPF32[i3 + 24 >> 2];
        d30 = +HEAPF32[i3 + 32 >> 2];
        d32 = +HEAPF32[i3 + 36 >> 2];
        d34 = +HEAPF32[i3 + 40 >> 2];
        d24 = +HEAPF32[i3 + 48 >> 2];
        d28 = +HEAPF32[i3 + 52 >> 2];
        d35 = +HEAPF32[i3 + 56 >> 2];
        HEAPF32[i5 + 288 >> 2] = d33 * d21 + d31 * d22 + d29 * d23 + d24;
        HEAPF32[i5 + 292 >> 2] = d33 * d25 + d31 * d26 + d29 * d27 + d28;
        HEAPF32[i5 + 296 >> 2] = d33 * d30 + d31 * d32 + d29 * d34 + d35;
        HEAPF32[i5 + 300 >> 2] = 0.0;
        d29 = +HEAPF32[i37 + (i11 << 4) >> 2];
        d31 = +HEAPF32[i37 + (i11 << 4) + 4 >> 2];
        d33 = +HEAPF32[i37 + (i11 << 4) + 8 >> 2];
        HEAPF32[i5 + 272 >> 2] = d29 * d21 + d31 * d22 + d33 * d23 + d24;
        HEAPF32[i5 + 276 >> 2] = d29 * d25 + d31 * d26 + d33 * d27 + d28;
        HEAPF32[i5 + 280 >> 2] = d29 * d30 + d31 * d32 + d33 * d34 + d35;
        HEAPF32[i5 + 284 >> 2] = 0.0;
        FUNCTION_TABLE_viiii[i36 & 127](i14, i5 + 288 | 0, i5 + 272 | 0, i4);
        i15 = i15 + 1 | 0;
        i13 = HEAP32[i7 + 36 >> 2] | 0;
        if ((i15 | 0) >= (HEAP32[i13 + (i6 * 36 | 0) + 4 >> 2] | 0)) break L25;
        i14 = HEAP32[i13 + (i6 * 36 | 0) + 12 >> 2] | 0;
        i13 = i11;
       }
      } else {
       d12 = 0.0;
       d10 = 0.0;
       d9 = 0.0;
      } while (0);
      d12 = d12 * (1.0 / +(i8 | 0));
      d10 = d10 * (1.0 / +(i8 | 0));
      d9 = d9 * (1.0 / +(i8 | 0));
      i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
      if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i37 >> 2] | 0) + 48 >> 2] & 127](i37) | 0) & 16384 | 0) != 0) {
       HEAPF32[i5 + 256 >> 2] = 1.0;
       HEAPF32[i5 + 260 >> 2] = 1.0;
       HEAPF32[i5 + 264 >> 2] = 0.0;
       HEAPF32[i5 + 268 >> 2] = 0.0;
       i37 = HEAP32[i7 + 36 >> 2] | 0;
       d29 = +HEAPF32[i37 + (i6 * 36 | 0) + 20 >> 2];
       d31 = +HEAPF32[i37 + (i6 * 36 | 0) + 24 >> 2];
       d33 = +HEAPF32[i37 + (i6 * 36 | 0) + 28 >> 2];
       i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
       i36 = HEAP32[(HEAP32[i37 >> 2] | 0) + 8 >> 2] | 0;
       d21 = +HEAPF32[i3 >> 2];
       d22 = +HEAPF32[i3 + 4 >> 2];
       d23 = +HEAPF32[i3 + 8 >> 2];
       d25 = +HEAPF32[i3 + 16 >> 2];
       d26 = +HEAPF32[i3 + 20 >> 2];
       d27 = +HEAPF32[i3 + 24 >> 2];
       d30 = +HEAPF32[i3 + 32 >> 2];
       d32 = +HEAPF32[i3 + 36 >> 2];
       d34 = +HEAPF32[i3 + 40 >> 2];
       d24 = +HEAPF32[i3 + 48 >> 2];
       d28 = +HEAPF32[i3 + 52 >> 2];
       d35 = +HEAPF32[i3 + 56 >> 2];
       HEAPF32[i5 + 240 >> 2] = d12 * d21 + d10 * d22 + d9 * d23 + d24;
       HEAPF32[i5 + 244 >> 2] = d12 * d25 + d10 * d26 + d9 * d27 + d28;
       HEAPF32[i5 + 248 >> 2] = d12 * d30 + d10 * d32 + d9 * d34 + d35;
       HEAPF32[i5 + 252 >> 2] = 0.0;
       HEAPF32[i5 + 224 >> 2] = (d12 + d29) * d21 + (d10 + d31) * d22 + (d9 + d33) * d23 + d24;
       HEAPF32[i5 + 228 >> 2] = (d12 + d29) * d25 + (d10 + d31) * d26 + (d9 + d33) * d27 + d28;
       HEAPF32[i5 + 232 >> 2] = (d12 + d29) * d30 + (d10 + d31) * d32 + (d9 + d33) * d34 + d35;
       HEAPF32[i5 + 236 >> 2] = 0.0;
       FUNCTION_TABLE_viiii[i36 & 127](i37, i5 + 240 | 0, i5 + 224 | 0, i5 + 256 | 0);
      }
      i6 = i6 + 1 | 0;
     } while ((i6 | 0) < (HEAP32[i7 + 28 >> 2] | 0));
    }
   } while (0);
   i6 = HEAP32[i1 + 4 >> 2] | 0;
   if ((i6 + -21 | 0) >>> 0 < 9) {
    HEAPF32[i5 + 144 >> 2] = 999999984306749400.0;
    HEAPF32[i5 + 148 >> 2] = 999999984306749400.0;
    HEAPF32[i5 + 152 >> 2] = 999999984306749400.0;
    HEAPF32[i5 + 156 >> 2] = 0.0;
    HEAPF32[i5 + 128 >> 2] = -999999984306749400.0;
    HEAPF32[i5 + 132 >> 2] = -999999984306749400.0;
    HEAPF32[i5 + 136 >> 2] = -999999984306749400.0;
    HEAPF32[i5 + 140 >> 2] = 0.0;
    i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
    HEAP32[i5 + 32 >> 2] = 7624;
    HEAP32[i5 + 36 >> 2] = 7648;
    HEAP32[i5 + 40 >> 2] = i6;
    HEAP32[i5 + 44 >> 2] = HEAP32[i4 + 0 >> 2];
    HEAP32[i5 + 48 >> 2] = HEAP32[i4 + 4 >> 2];
    HEAP32[i5 + 52 >> 2] = HEAP32[i4 + 8 >> 2];
    HEAP32[i5 + 56 >> 2] = HEAP32[i4 + 12 >> 2];
    HEAP32[i5 + 60 >> 2] = HEAP32[i3 + 0 >> 2];
    HEAP32[i5 + 64 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i5 + 68 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i5 + 72 >> 2] = HEAP32[i3 + 12 >> 2];
    HEAP32[i5 + 76 >> 2] = HEAP32[i3 + 16 >> 2];
    HEAP32[i5 + 80 >> 2] = HEAP32[i3 + 20 >> 2];
    HEAP32[i5 + 84 >> 2] = HEAP32[i3 + 24 >> 2];
    HEAP32[i5 + 88 >> 2] = HEAP32[i3 + 28 >> 2];
    HEAP32[i5 + 92 >> 2] = HEAP32[i3 + 32 >> 2];
    HEAP32[i5 + 96 >> 2] = HEAP32[i3 + 36 >> 2];
    HEAP32[i5 + 100 >> 2] = HEAP32[i3 + 40 >> 2];
    HEAP32[i5 + 104 >> 2] = HEAP32[i3 + 44 >> 2];
    HEAP32[i5 + 108 >> 2] = HEAP32[i3 + 48 >> 2];
    HEAP32[i5 + 112 >> 2] = HEAP32[i3 + 52 >> 2];
    HEAP32[i5 + 116 >> 2] = HEAP32[i3 + 56 >> 2];
    HEAP32[i5 + 120 >> 2] = HEAP32[i3 + 60 >> 2];
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] & 127](i1, i5 + 32 | 0, i5 + 128 | 0, i5 + 144 | 0);
    i6 = HEAP32[i1 + 4 >> 2] | 0;
   }
   if ((i6 | 0) != 3) {
    STACKTOP = i5;
    return;
   }
   HEAPF32[i5 + 16 >> 2] = 999999984306749400.0;
   HEAPF32[i5 + 20 >> 2] = 999999984306749400.0;
   HEAPF32[i5 + 24 >> 2] = 999999984306749400.0;
   HEAPF32[i5 + 28 >> 2] = 0.0;
   HEAPF32[i5 >> 2] = -999999984306749400.0;
   HEAPF32[i5 + 4 >> 2] = -999999984306749400.0;
   HEAPF32[i5 + 8 >> 2] = -999999984306749400.0;
   HEAPF32[i5 + 12 >> 2] = 0.0;
   i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
   HEAP32[i5 + 32 >> 2] = 7624;
   HEAP32[i5 + 36 >> 2] = 7648;
   HEAP32[i5 + 40 >> 2] = i37;
   HEAP32[i5 + 44 >> 2] = HEAP32[i4 + 0 >> 2];
   HEAP32[i5 + 48 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i5 + 52 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i5 + 56 >> 2] = HEAP32[i4 + 12 >> 2];
   HEAP32[i5 + 60 >> 2] = HEAP32[i3 + 0 >> 2];
   HEAP32[i5 + 64 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i5 + 68 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAP32[i5 + 72 >> 2] = HEAP32[i3 + 12 >> 2];
   HEAP32[i5 + 76 >> 2] = HEAP32[i3 + 16 >> 2];
   HEAP32[i5 + 80 >> 2] = HEAP32[i3 + 20 >> 2];
   HEAP32[i5 + 84 >> 2] = HEAP32[i3 + 24 >> 2];
   HEAP32[i5 + 88 >> 2] = HEAP32[i3 + 28 >> 2];
   HEAP32[i5 + 92 >> 2] = HEAP32[i3 + 32 >> 2];
   HEAP32[i5 + 96 >> 2] = HEAP32[i3 + 36 >> 2];
   HEAP32[i5 + 100 >> 2] = HEAP32[i3 + 40 >> 2];
   HEAP32[i5 + 104 >> 2] = HEAP32[i3 + 44 >> 2];
   HEAP32[i5 + 108 >> 2] = HEAP32[i3 + 48 >> 2];
   HEAP32[i5 + 112 >> 2] = HEAP32[i3 + 52 >> 2];
   HEAP32[i5 + 116 >> 2] = HEAP32[i3 + 56 >> 2];
   HEAP32[i5 + 120 >> 2] = HEAP32[i3 + 60 >> 2];
   i37 = HEAP32[i1 + 92 >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i37 >> 2] | 0) + 8 >> 2] & 127](i37, i5 + 36 | 0, i5, i5 + 16 | 0);
   STACKTOP = i5;
   return;
  }
 }
}
function __ZN18btSliderConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, i30 = 0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, i42 = 0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, i48 = 0;
 i1 = STACKTOP;
 i8 = HEAP32[i2 + 28 >> 2] | 0;
 i9 = HEAP32[i2 + 32 >> 2] | 0;
 d4 = +HEAPF32[i8 + 344 >> 2];
 d5 = +HEAPF32[i9 + 344 >> 2];
 i17 = HEAP32[i3 + 24 >> 2] | 0;
 d7 = (HEAP8[i2 + 180 >> 0] | 0) != 0 ? 1.0 : -1.0;
 d14 = +HEAPF32[i2 + 936 >> 2] - +HEAPF32[i2 + 872 >> 2];
 d15 = +HEAPF32[i2 + 940 >> 2] - +HEAPF32[i2 + 876 >> 2];
 d16 = +HEAPF32[i2 + 944 >> 2] - +HEAPF32[i2 + 880 >> 2];
 if (d4 < 1.1920928955078125e-7) i11 = 1; else i11 = d5 < 1.1920928955078125e-7;
 if (d4 + d5 > 0.0) d13 = d5 / (d4 + d5); else d13 = .5;
 d12 = 1.0 - d13;
 d31 = +HEAPF32[i2 + 824 >> 2];
 d26 = +HEAPF32[i2 + 840 >> 2];
 d22 = +HEAPF32[i2 + 856 >> 2];
 d35 = +HEAPF32[i2 + 888 >> 2];
 d37 = +HEAPF32[i2 + 904 >> 2];
 d24 = +HEAPF32[i2 + 920 >> 2];
 i29 = (HEAP8[i2 + 49 >> 0] | 0) == 0;
 do if (!i29) {
  d25 = d13 * d31 + d12 * d35;
  d34 = d13 * d26 + d12 * d37;
  d32 = d13 * d22 + d12 * d24;
  d27 = 1.0 / +Math_sqrt(+(d25 * d25 + d34 * d34 + d32 * d32));
  if (+Math_abs(+(d32 * d27)) > .7071067690849304) {
   d40 = 1.0 / +Math_sqrt(+(d32 * d27 * d32 * d27 + d34 * d27 * d34 * d27));
   d4 = d25 * d27;
   d5 = d34 * d27;
   d6 = d32 * d27;
   d21 = 0.0;
   d23 = -(d32 * d27 * d40);
   d28 = d34 * d27 * d40;
   d33 = (d32 * d27 * d32 * d27 + d34 * d27 * d34 * d27) * d40;
   d39 = -(d25 * d27 * d34 * d27 * d40);
   d40 = d25 * d27 * -(d32 * d27 * d40);
   break;
  } else {
   d40 = 1.0 / +Math_sqrt(+(d25 * d27 * d25 * d27 + d34 * d27 * d34 * d27));
   d4 = d25 * d27;
   d5 = d34 * d27;
   d6 = d32 * d27;
   d21 = -(d34 * d27 * d40);
   d23 = d25 * d27 * d40;
   d28 = 0.0;
   d33 = -(d32 * d27 * d25 * d27 * d40);
   d39 = d32 * d27 * -(d34 * d27 * d40);
   d40 = (d25 * d27 * d25 * d27 + d34 * d27 * d34 * d27) * d40;
   break;
  }
 } else {
  d4 = d31;
  d5 = d26;
  d6 = d22;
  d21 = +HEAPF32[i2 + 828 >> 2];
  d23 = +HEAPF32[i2 + 844 >> 2];
  d28 = +HEAPF32[i2 + 860 >> 2];
  d33 = +HEAPF32[i2 + 832 >> 2];
  d39 = +HEAPF32[i2 + 848 >> 2];
  d40 = +HEAPF32[i2 + 864 >> 2];
 } while (0);
 i19 = HEAP32[i3 + 12 >> 2] | 0;
 HEAPF32[i19 >> 2] = d21;
 HEAPF32[i19 + 4 >> 2] = d23;
 HEAPF32[i19 + 8 >> 2] = d28;
 HEAPF32[i19 + (i17 << 2) >> 2] = d33;
 HEAPF32[i19 + (i17 + 1 << 2) >> 2] = d39;
 HEAPF32[i19 + (i17 + 2 << 2) >> 2] = d40;
 d27 = -d21;
 i20 = HEAP32[i3 + 20 >> 2] | 0;
 HEAPF32[i20 >> 2] = d27;
 d34 = -d23;
 HEAPF32[i20 + 4 >> 2] = d34;
 d36 = -d28;
 HEAPF32[i20 + 8 >> 2] = d36;
 d25 = -d33;
 HEAPF32[i20 + (i17 << 2) >> 2] = d25;
 d38 = -d39;
 HEAPF32[i20 + (i17 + 1 << 2) >> 2] = d38;
 d32 = -d40;
 HEAPF32[i20 + (i17 + 2 << 2) >> 2] = d32;
 i18 = HEAP32[i2 + 300 >> 2] | 0;
 d41 = +HEAPF32[i2 + 280 >> 2];
 if ((i18 & 128 | 0) == 0) d41 = d41 * +HEAPF32[i3 + 4 >> 2];
 d47 = d41 * +HEAPF32[i3 >> 2];
 i48 = HEAP32[i3 + 28 >> 2] | 0;
 HEAPF32[i48 >> 2] = d47 * ((d26 * d24 - d22 * d37) * d21 + (d22 * d35 - d31 * d24) * d23 + (d31 * d37 - d26 * d35) * d28);
 HEAPF32[i48 + (i17 << 2) >> 2] = d47 * ((d26 * d24 - d22 * d37) * d33 + (d22 * d35 - d31 * d24) * d39 + (d31 * d37 - d26 * d35) * d40);
 if ((i18 & 64 | 0) != 0) {
  i48 = HEAP32[i3 + 32 >> 2] | 0;
  HEAPF32[i48 >> 2] = +HEAPF32[i2 + 292 >> 2];
  HEAPF32[i48 + (i17 << 2) >> 2] = +HEAPF32[i2 + 292 >> 2];
 }
 d31 = +HEAPF32[i8 + 52 >> 2];
 d37 = +HEAPF32[i8 + 56 >> 2];
 d35 = +HEAPF32[i8 + 60 >> 2];
 d22 = +HEAPF32[i9 + 52 >> 2];
 d26 = +HEAPF32[i9 + 56 >> 2];
 d24 = +HEAPF32[i9 + 60 >> 2];
 if (i29) {
  d47 = (d26 - d37) * d28 - (d24 - d35) * d23;
  d46 = (d24 - d35) * d21 - (d22 - d31) * d28;
  d45 = (d22 - d31) * d23 - (d26 - d37) * d21;
  HEAPF32[i19 + (i17 << 1 << 2) >> 2] = d13 * d47;
  HEAPF32[i19 + ((i17 << 1 | 1) << 2) >> 2] = d13 * d46;
  HEAPF32[i19 + ((i17 << 1) + 2 << 2) >> 2] = d13 * d45;
  HEAPF32[i20 + (i17 << 1 << 2) >> 2] = d12 * d47;
  HEAPF32[i20 + ((i17 << 1 | 1) << 2) >> 2] = d12 * d46;
  HEAPF32[i20 + ((i17 << 1) + 2 << 2) >> 2] = d12 * d45;
  d45 = (d26 - d37) * d40 - (d24 - d35) * d39;
  d46 = (d24 - d35) * d33 - (d22 - d31) * d40;
  d47 = (d22 - d31) * d39 - (d26 - d37) * d33;
  HEAPF32[i19 + (i17 * 3 << 2) >> 2] = d13 * d45;
  HEAPF32[i19 + ((i17 * 3 | 0) + 1 << 2) >> 2] = d13 * d46;
  HEAPF32[i19 + ((i17 * 3 | 0) + 2 << 2) >> 2] = d13 * d47;
  HEAPF32[i20 + (i17 * 3 << 2) >> 2] = d12 * d45;
  HEAPF32[i20 + ((i17 * 3 | 0) + 1 << 2) >> 2] = d12 * d46;
  HEAPF32[i20 + ((i17 * 3 | 0) + 2 << 2) >> 2] = d12 * d47;
  i30 = HEAP32[i3 + 8 >> 2] | 0;
  HEAPF32[i30 + (i17 << 1 << 2) >> 2] = d21;
  HEAPF32[i30 + ((i17 << 1 | 1) << 2) >> 2] = d23;
  HEAPF32[i30 + ((i17 << 1) + 2 << 2) >> 2] = d28;
  HEAPF32[i30 + (i17 * 3 << 2) >> 2] = d33;
  HEAPF32[i30 + ((i17 * 3 | 0) + 1 << 2) >> 2] = d39;
  HEAPF32[i30 + ((i17 * 3 | 0) + 2 << 2) >> 2] = d40;
  i29 = HEAP32[i3 + 16 >> 2] | 0;
  HEAPF32[i29 + (i17 << 1 << 2) >> 2] = d27;
  HEAPF32[i29 + ((i17 << 1 | 1) << 2) >> 2] = d34;
  HEAPF32[i29 + ((i17 << 1) + 2 << 2) >> 2] = d36;
  HEAPF32[i29 + (i17 * 3 << 2) >> 2] = d25;
  HEAPF32[i29 + ((i17 * 3 | 0) + 1 << 2) >> 2] = d38;
  HEAPF32[i29 + ((i17 * 3 | 0) + 2 << 2) >> 2] = d32;
  d34 = 0.0;
  d36 = 0.0;
  d38 = 0.0;
  d25 = 0.0;
  d27 = 0.0;
  d32 = 0.0;
  d26 = d26 - d37;
  d24 = d24 - d35;
  d22 = d22 - d31;
 } else {
  d22 = +HEAPF32[i2 + 936 >> 2] - d22;
  d25 = +HEAPF32[i2 + 940 >> 2] - d26;
  d26 = +HEAPF32[i2 + 944 >> 2] - d24;
  d27 = d4 * d22 + d5 * d25 + d6 * d26;
  d24 = d4 * d27;
  d32 = d5 * d27;
  d27 = d6 * d27;
  d45 = +HEAPF32[i2 + 872 >> 2] - d31;
  d46 = +HEAPF32[i2 + 876 >> 2] - d37;
  d47 = +HEAPF32[i2 + 880 >> 2] - d35;
  d28 = d4 * d45 + d5 * d46 + d6 * d47;
  d21 = d4 * d28;
  d23 = d5 * d28;
  d28 = d6 * d28;
  d35 = +HEAPF32[i2 + 1080 >> 2] - +HEAPF32[i2 + 1032 >> 2];
  d31 = d21 + d4 * d35 - d24;
  d37 = d23 + d5 * d35 - d32;
  d35 = d28 + d6 * d35 - d27;
  d38 = d45 - d21 + d13 * d31;
  d34 = d46 - d23 + d13 * d37;
  d36 = d47 - d28 + d13 * d35;
  d21 = d13 * (d22 - d24) + d12 * (d45 - d21);
  d23 = d13 * (d25 - d32) + d12 * (d46 - d23);
  d28 = d13 * (d26 - d27) + d12 * (d47 - d28);
  if (d21 * d21 + d23 * d23 + d28 * d28 > 1.1920928955078125e-7) {
   d47 = 1.0 / +Math_sqrt(+(d21 * d21 + d23 * d23 + d28 * d28));
   d21 = d21 * d47;
   d23 = d47 * d23;
   d28 = d47 * d28;
  } else {
   d21 = +HEAPF32[i2 + 828 >> 2];
   d23 = +HEAPF32[i2 + 844 >> 2];
   d28 = +HEAPF32[i2 + 860 >> 2];
  }
  d33 = d5 * d28 - d6 * d23;
  d39 = d6 * d21 - d4 * d28;
  d40 = d4 * d23 - d5 * d21;
  HEAPF32[i19 + (i17 << 1 << 2) >> 2] = d34 * d28 - d36 * d23;
  HEAPF32[i19 + ((i17 << 1 | 1) << 2) >> 2] = d36 * d21 - d38 * d28;
  HEAPF32[i19 + ((i17 << 1) + 2 << 2) >> 2] = d38 * d23 - d34 * d21;
  i48 = HEAP32[i3 + 20 >> 2] | 0;
  HEAPF32[i48 + (i17 << 1 << 2) >> 2] = -((d25 - d32 - d12 * d37) * d28 - (d26 - d27 - d12 * d35) * d23);
  HEAPF32[i48 + ((i17 << 1 | 1) << 2) >> 2] = -((d26 - d27 - d12 * d35) * d21 - (d22 - d24 - d12 * d31) * d28);
  HEAPF32[i48 + ((i17 << 1) + 2 << 2) >> 2] = -((d22 - d24 - d12 * d31) * d23 - (d25 - d32 - d12 * d37) * d21);
  d41 = (d25 - d32 - d12 * d37) * d40 - (d26 - d27 - d12 * d35) * d39;
  d43 = (d26 - d27 - d12 * d35) * d33 - (d22 - d24 - d12 * d31) * d40;
  d47 = (d22 - d24 - d12 * d31) * d39 - (d25 - d32 - d12 * d37) * d33;
  if (i11 ? (HEAP8[i2 + 297 >> 0] | 0) != 0 : 0) {
   d41 = d12 * d41;
   d43 = d12 * d43;
   d47 = d12 * d47;
   d46 = d13 * (d34 * d40 - d36 * d39);
   d44 = d13 * (d36 * d33 - d38 * d40);
   d45 = d13 * (d38 * d39 - d34 * d33);
  } else {
   d46 = d34 * d40 - d36 * d39;
   d44 = d36 * d33 - d38 * d40;
   d45 = d38 * d39 - d34 * d33;
  }
  i20 = HEAP32[i3 + 12 >> 2] | 0;
  HEAPF32[i20 + (i17 * 3 << 2) >> 2] = d46;
  HEAPF32[i20 + ((i17 * 3 | 0) + 1 << 2) >> 2] = d44;
  HEAPF32[i20 + ((i17 * 3 | 0) + 2 << 2) >> 2] = d45;
  i20 = HEAP32[i3 + 20 >> 2] | 0;
  HEAPF32[i20 + (i17 * 3 << 2) >> 2] = -d41;
  HEAPF32[i20 + ((i17 * 3 | 0) + 1 << 2) >> 2] = -d43;
  HEAPF32[i20 + ((i17 * 3 | 0) + 2 << 2) >> 2] = -d47;
  i30 = HEAP32[i3 + 8 >> 2] | 0;
  HEAPF32[i30 + (i17 << 1 << 2) >> 2] = d21;
  HEAPF32[i30 + ((i17 << 1 | 1) << 2) >> 2] = d23;
  HEAPF32[i30 + ((i17 << 1) + 2 << 2) >> 2] = d28;
  HEAPF32[i30 + (i17 * 3 << 2) >> 2] = d33;
  HEAPF32[i30 + ((i17 * 3 | 0) + 1 << 2) >> 2] = d39;
  HEAPF32[i30 + ((i17 * 3 | 0) + 2 << 2) >> 2] = d40;
  i29 = HEAP32[i3 + 16 >> 2] | 0;
  HEAPF32[i29 + (i17 << 1 << 2) >> 2] = -d21;
  HEAPF32[i29 + ((i17 << 1 | 1) << 2) >> 2] = -d23;
  HEAPF32[i29 + ((i17 << 1) + 2 << 2) >> 2] = -d28;
  HEAPF32[i29 + (i17 * 3 << 2) >> 2] = -d33;
  HEAPF32[i29 + ((i17 * 3 | 0) + 1 << 2) >> 2] = -d39;
  HEAPF32[i29 + ((i17 * 3 | 0) + 2 << 2) >> 2] = -d40;
  i18 = HEAP32[i2 + 300 >> 2] | 0;
  d25 = d25 - d32 - d12 * d37;
  d27 = d26 - d27 - d12 * d35;
  d32 = d22 - d24 - d12 * d31;
  d26 = 0.0;
  d24 = 0.0;
  d22 = 0.0;
 }
 d31 = +HEAPF32[i2 + 264 >> 2];
 if ((i18 & 32 | 0) == 0) d31 = d31 * +HEAPF32[i3 + 4 >> 2];
 d47 = d31 * +HEAPF32[i3 >> 2];
 i19 = HEAP32[i3 + 28 >> 2] | 0;
 HEAPF32[i19 + (i17 << 1 << 2) >> 2] = d47 * (d14 * d21 + d15 * d23 + d16 * d28);
 HEAPF32[i19 + (i17 * 3 << 2) >> 2] = d47 * (d14 * d33 + d15 * d39 + d16 * d40);
 if ((i18 & 16 | 0) != 0) {
  i48 = HEAP32[i3 + 32 >> 2] | 0;
  HEAPF32[i48 + (i17 << 1 << 2) >> 2] = +HEAPF32[i2 + 276 >> 2];
  HEAPF32[i48 + (i17 * 3 << 2) >> 2] = +HEAPF32[i2 + 276 >> 2];
 }
 if ((HEAP8[i2 + 296 >> 0] | 0) == 0) if ((HEAP8[i2 + 1096 >> 0] | 0) == 0) i9 = 4; else {
  i42 = 0;
  i48 = 0;
  i17 = 0;
  d14 = 0.0;
  i10 = 30;
 } else {
  d14 = d7 * +HEAPF32[i2 + 1032 >> 2];
  i42 = 1;
  i48 = (HEAP8[i2 + 1096 >> 0] | 0) == 0;
  i17 = d14 > 0.0 ? 2 : 1;
  i10 = 30;
 }
 if ((i10 | 0) == 30) {
  i10 = HEAP32[i3 + 24 >> 2] << 2;
  HEAPF32[i30 + (i10 << 2) >> 2] = d4;
  HEAPF32[i30 + ((i10 | 1) << 2) >> 2] = d5;
  HEAPF32[i30 + ((i10 | 2) << 2) >> 2] = d6;
  HEAPF32[i29 + (i10 << 2) >> 2] = -d4;
  HEAPF32[i29 + ((i10 | 1) << 2) >> 2] = -d5;
  HEAPF32[i29 + ((i10 | 2) << 2) >> 2] = -d6;
  if ((HEAP8[i2 + 49 >> 0] | 0) != 0) {
   if (!i11) {
    i30 = HEAP32[i3 + 12 >> 2] | 0;
    HEAPF32[i30 + (i10 << 2) >> 2] = d6 * d34 - d5 * d36;
    HEAPF32[i30 + ((i10 | 1) << 2) >> 2] = d4 * d36 - d6 * d38;
    HEAPF32[i30 + ((i10 | 2) << 2) >> 2] = d5 * d38 - d4 * d34;
    HEAPF32[i20 + (i10 << 2) >> 2] = -(d6 * d25 - d5 * d27);
    HEAPF32[i20 + ((i10 | 1) << 2) >> 2] = -(d4 * d27 - d6 * d32);
    HEAPF32[i20 + ((i10 | 2) << 2) >> 2] = -(d5 * d32 - d4 * d25);
   }
  } else {
   d45 = d6 * d26 - d5 * d24;
   d46 = d4 * d24 - d6 * d22;
   d47 = d5 * d22 - d4 * d26;
   i30 = HEAP32[i3 + 12 >> 2] | 0;
   HEAPF32[i30 + (i10 << 2) >> 2] = d13 * d45;
   HEAPF32[i30 + ((i10 | 1) << 2) >> 2] = d13 * d46;
   HEAPF32[i30 + ((i10 | 2) << 2) >> 2] = d13 * d47;
   HEAPF32[i20 + (i10 << 2) >> 2] = d12 * d45;
   HEAPF32[i20 + ((i10 | 1) << 2) >> 2] = d12 * d46;
   HEAPF32[i20 + ((i10 | 2) << 2) >> 2] = d12 * d47;
  }
  i29 = +HEAPF32[i2 + 184 >> 2] == +HEAPF32[i2 + 188 >> 2];
  HEAPF32[i19 + (i10 << 2) >> 2] = 0.0;
  i11 = (HEAP32[i3 + 36 >> 2] | 0) + (i10 << 2) | 0;
  HEAPF32[i11 >> 2] = 0.0;
  i30 = (HEAP32[i3 + 40 >> 2] | 0) + (i10 << 2) | 0;
  HEAPF32[i30 >> 2] = 0.0;
  d12 = +HEAPF32[((i18 & 512 | 0) == 0 ? i3 + 4 | 0 : i2 + 232 | 0) >> 2];
  if (!(i42 & i29 | i48)) {
   if ((i18 & 1 | 0) != 0) HEAPF32[(HEAP32[i3 + 32 >> 2] | 0) + (i10 << 2) >> 2] = +HEAPF32[i2 + 212 >> 2];
   d13 = +HEAPF32[i2 + 1100 >> 2];
   d21 = +HEAPF32[i2 + 1080 >> 2];
   d22 = +HEAPF32[i2 + 184 >> 2];
   d16 = +HEAPF32[i2 + 188 >> 2];
   d15 = d12 * +HEAPF32[i3 >> 2];
   L53 : do if (!(d22 > d16)) if (!(d22 == d16)) {
    if (d13 / d15 < 0.0) {
     do if (d21 >= d22) {
      if (!(d22 - d13 / d15 > d21)) break;
      d15 = (d22 - d21) / (d13 / d15);
      break L53;
     } while (0);
     d15 = d21 < d22 ? 0.0 : 1.0;
     break;
    }
    if (d13 / d15 > 0.0) {
     do if (d21 <= d16) {
      if (!(d16 - d13 / d15 < d21)) break;
      d15 = (d16 - d21) / (d13 / d15);
      break L53;
     } while (0);
     d15 = d21 > d16 ? 0.0 : 1.0;
    } else d15 = 0.0;
   } else d15 = 0.0; else d15 = 1.0; while (0);
   HEAPF32[i19 + (i10 << 2) >> 2] = +HEAPF32[i19 + (i10 << 2) >> 2] - d7 * d15 * d13;
   HEAPF32[i11 >> 2] = +HEAPF32[i11 >> 2] - +HEAPF32[i2 + 1104 >> 2] * +HEAPF32[i3 >> 2];
   HEAPF32[i30 >> 2] = +HEAPF32[i2 + 1104 >> 2] * +HEAPF32[i3 >> 2] + +HEAPF32[i30 >> 2];
  }
  if (i42) {
   HEAPF32[i19 + (i10 << 2) >> 2] = +HEAPF32[i19 + (i10 << 2) >> 2] + d14 * d12 * +HEAPF32[i3 >> 2];
   if ((i18 & 256 | 0) != 0) HEAPF32[(HEAP32[i3 + 32 >> 2] | 0) + (i10 << 2) >> 2] = +HEAPF32[i2 + 244 >> 2];
   do if (!i29) if ((i17 | 0) == 1) {
    HEAPF32[i11 >> 2] = -3.4028234663852886e+38;
    HEAPF32[i30 >> 2] = 0.0;
    break;
   } else {
    HEAPF32[i11 >> 2] = 0.0;
    HEAPF32[i30 >> 2] = 3.4028234663852886e+38;
    break;
   } else {
    HEAPF32[i11 >> 2] = -3.4028234663852886e+38;
    HEAPF32[i30 >> 2] = 3.4028234663852886e+38;
   } while (0);
   d47 = 1.0 - +HEAPF32[i2 + 240 >> 2];
   d12 = +Math_abs(+d47);
   do if (!(d47 != d47 | 0.0 != 0.0 | d47 == 0.0)) {
    d7 = d7 * (d4 * +HEAPF32[i8 + 312 >> 2] + d5 * +HEAPF32[i8 + 316 >> 2] + d6 * +HEAPF32[i8 + 320 >> 2] - (d4 * +HEAPF32[i9 + 312 >> 2] + d5 * +HEAPF32[i9 + 316 >> 2] + d6 * +HEAPF32[i9 + 320 >> 2]));
    if ((i17 | 0) == 1) {
     if (!(d7 < 0.0)) break;
     if (!(+HEAPF32[i19 + (i10 << 2) >> 2] < -(d12 * d7))) break;
     HEAPF32[i19 + (i10 << 2) >> 2] = -(d12 * d7);
     break;
    } else {
     if (!(d7 > 0.0)) break;
     if (!(+HEAPF32[i19 + (i10 << 2) >> 2] > -(d12 * d7))) break;
     HEAPF32[i19 + (i10 << 2) >> 2] = -(d12 * d7);
     break;
    }
   } while (0);
   HEAPF32[i19 + (i10 << 2) >> 2] = +HEAPF32[i2 + 232 >> 2] * +HEAPF32[i19 + (i10 << 2) >> 2];
   i9 = 5;
  } else i9 = 5;
 }
 if ((HEAP8[i2 + 297 >> 0] | 0) == 0) if ((HEAP8[i2 + 1112 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 } else {
  i10 = 0;
  i11 = 0;
  i8 = 0;
  d7 = 0.0;
 } else {
  d7 = +HEAPF32[i2 + 1088 >> 2];
  i10 = 1;
  i11 = (HEAP8[i2 + 1112 >> 0] | 0) == 0;
  i8 = d7 > 0.0 ? 1 : 2;
 }
 i9 = Math_imul(HEAP32[i3 + 24 >> 2] | 0, i9) | 0;
 i48 = HEAP32[i3 + 12 >> 2] | 0;
 HEAPF32[i48 + (i9 << 2) >> 2] = d4;
 HEAPF32[i48 + (i9 + 1 << 2) >> 2] = d5;
 HEAPF32[i48 + (i9 + 2 << 2) >> 2] = d6;
 HEAPF32[i20 + (i9 << 2) >> 2] = -d4;
 HEAPF32[i20 + (i9 + 1 << 2) >> 2] = -d5;
 HEAPF32[i20 + (i9 + 2 << 2) >> 2] = -d6;
 d12 = +HEAPF32[i2 + 192 >> 2];
 d13 = +HEAPF32[i2 + 196 >> 2];
 d14 = +HEAPF32[((i18 & 2048 | 0) == 0 ? i3 + 4 | 0 : i2 + 248 | 0) >> 2];
 if (!(i10 & d12 == d13 | i11)) {
  if ((i18 & 4 | 0) == 0) {
   d21 = d13;
   d23 = d12;
  } else {
   HEAPF32[(HEAP32[i3 + 32 >> 2] | 0) + (i9 << 2) >> 2] = +HEAPF32[i2 + 228 >> 2];
   d21 = +HEAPF32[i2 + 196 >> 2];
   d23 = +HEAPF32[i2 + 192 >> 2];
  }
  d22 = +HEAPF32[i2 + 1084 >> 2];
  d15 = +HEAPF32[i2 + 1116 >> 2];
  d16 = d14 * +HEAPF32[i3 >> 2];
  L102 : do if (!(d23 > d21)) if (!(d23 == d21)) {
   if (d15 / d16 < 0.0) {
    do if (d22 >= d23) {
     if (!(d23 - d15 / d16 > d22)) break;
     d16 = (d23 - d22) / (d15 / d16);
     break L102;
    } while (0);
    d16 = d22 < d23 ? 0.0 : 1.0;
    break;
   }
   if (d15 / d16 > 0.0) {
    do if (d22 <= d21) {
     if (!(d21 - d15 / d16 < d22)) break;
     d16 = (d21 - d22) / (d15 / d16);
     break L102;
    } while (0);
    d16 = d22 > d21 ? 0.0 : 1.0;
   } else d16 = 0.0;
  } else d16 = 0.0; else d16 = 1.0; while (0);
  HEAPF32[i19 + (i9 << 2) >> 2] = d16 * d15;
  HEAPF32[(HEAP32[i3 + 36 >> 2] | 0) + (i9 << 2) >> 2] = -(+HEAPF32[i2 + 1120 >> 2] * +HEAPF32[i3 >> 2]);
  HEAPF32[(HEAP32[i3 + 40 >> 2] | 0) + (i9 << 2) >> 2] = +HEAPF32[i2 + 1120 >> 2] * +HEAPF32[i3 >> 2];
 }
 if (!i10) {
  STACKTOP = i1;
  return;
 }
 HEAPF32[i19 + (i9 << 2) >> 2] = +HEAPF32[i19 + (i9 << 2) >> 2] + d7 * d14 * +HEAPF32[i3 >> 2];
 if ((i18 & 1024 | 0) != 0) HEAPF32[(HEAP32[i3 + 32 >> 2] | 0) + (i9 << 2) >> 2] = +HEAPF32[i2 + 260 >> 2];
 do if (!(d12 == d13)) {
  i10 = (HEAP32[i3 + 36 >> 2] | 0) + (i9 << 2) | 0;
  if ((i8 | 0) == 1) {
   HEAPF32[i10 >> 2] = 0.0;
   HEAPF32[(HEAP32[i3 + 40 >> 2] | 0) + (i9 << 2) >> 2] = 3.4028234663852886e+38;
   break;
  } else {
   HEAPF32[i10 >> 2] = -3.4028234663852886e+38;
   HEAPF32[(HEAP32[i3 + 40 >> 2] | 0) + (i9 << 2) >> 2] = 0.0;
   break;
  }
 } else {
  HEAPF32[(HEAP32[i3 + 36 >> 2] | 0) + (i9 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[(HEAP32[i3 + 40 >> 2] | 0) + (i9 << 2) >> 2] = 3.4028234663852886e+38;
 } while (0);
 d47 = 1.0 - +HEAPF32[i2 + 256 >> 2];
 d7 = +Math_abs(+d47);
 do if (!(d47 != d47 | 0.0 != 0.0 | d47 == 0.0)) {
  i42 = HEAP32[i2 + 28 >> 2] | 0;
  i48 = HEAP32[i2 + 32 >> 2] | 0;
  d4 = d4 * +HEAPF32[i42 + 328 >> 2] + d5 * +HEAPF32[i42 + 332 >> 2] + d6 * +HEAPF32[i42 + 336 >> 2] - (d4 * +HEAPF32[i48 + 328 >> 2] + d5 * +HEAPF32[i48 + 332 >> 2] + d6 * +HEAPF32[i48 + 336 >> 2]);
  if ((i8 | 0) == 1) {
   if (!(d4 < 0.0)) break;
   if (!(+HEAPF32[i19 + (i9 << 2) >> 2] < -(d7 * d4))) break;
   HEAPF32[i19 + (i9 << 2) >> 2] = -(d7 * d4);
   break;
  } else {
   if (!(d4 > 0.0)) break;
   if (!(+HEAPF32[i19 + (i9 << 2) >> 2] > -(d7 * d4))) break;
   HEAPF32[i19 + (i9 << 2) >> 2] = -(d7 * d4);
   break;
  }
 } while (0);
 HEAPF32[i19 + (i9 << 2) >> 2] = +HEAPF32[i2 + 248 >> 2] * +HEAPF32[i19 + (i9 << 2) >> 2];
 STACKTOP = i1;
 return;
}
function __ZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackE(i21, i20, i16, i15) {
 i21 = i21 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d17 = 0.0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, i30 = 0, i31 = 0, d32 = 0.0, d33 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 1392 | 0;
 HEAP32[i1 + 1192 >> 2] = 0;
 HEAPF32[i1 + 1196 >> 2] = 1.0;
 HEAPF32[i1 + 1200 >> 2] = 1.0;
 HEAPF32[i1 + 1204 >> 2] = 1.0;
 HEAPF32[i1 + 1208 >> 2] = 0.0;
 HEAP32[i1 + 1184 >> 2] = 16680;
 HEAP32[i1 + 1188 >> 2] = 8;
 HEAPF32[i1 + 1212 >> 2] = 0.0;
 HEAPF32[i1 + 1228 >> 2] = 0.0;
 i19 = HEAP32[i16 + 4 >> 2] | 0;
 i18 = HEAP32[i16 + 12 >> 2] | 0;
 i22 = HEAP32[i19 + 4 >> 2] | 0;
 if ((i22 | 0) < 20) {
  HEAP32[i1 + 1008 >> 2] = 9440;
  HEAP32[i1 + 1176 >> 2] = 0;
  HEAPF32[i1 + 1180 >> 2] = 0.0;
  HEAPF32[i1 + 1172 >> 2] = +HEAPF32[i15 + 4 >> 2];
  HEAPF32[i1 + 956 >> 2] = 9999999747378752.0e-20;
  HEAP8[i1 + 980 >> 0] = 0;
  HEAP32[i1 + 632 >> 2] = 17152;
  HEAP32[i1 + 636 >> 2] = i1 + 648;
  HEAP32[i1 + 640 >> 2] = i1 + 1184;
  HEAP32[i1 + 644 >> 2] = i19;
  HEAP32[i1 + 616 >> 2] = 13184;
  HEAP32[i1 + 620 >> 2] = i1 + 648;
  HEAP32[i1 + 624 >> 2] = i1 + 1184;
  HEAP32[i1 + 628 >> 2] = i19;
  i31 = (HEAP32[i15 + 16 >> 2] & 4 | 0) == 0 ? i1 + 616 | 0 : i1 + 632 | 0;
  if (!(FUNCTION_TABLE_iiiiiii[HEAP32[(HEAP32[i31 >> 2] | 0) + 8 >> 2] & 3](i31, i21, i20, i18, i18, i1 + 1008 | 0) | 0)) {
   STACKTOP = i1;
   return;
  }
  i18 = i1 + 1140 | 0;
  d4 = +HEAPF32[i18 >> 2];
  d2 = +HEAPF32[i1 + 1144 >> 2];
  d5 = +HEAPF32[i1 + 1148 >> 2];
  if (!(d4 * d4 + d2 * d2 + d5 * d5 > 9999999747378752.0e-20)) {
   STACKTOP = i1;
   return;
  }
  d3 = +HEAPF32[i1 + 1172 >> 2];
  if (!(d3 < +HEAPF32[i15 + 4 >> 2])) {
   STACKTOP = i1;
   return;
  }
  d29 = 1.0 / +Math_sqrt(+(d4 * d4 + d2 * d2 + d5 * d5));
  HEAPF32[i18 >> 2] = d4 * d29;
  HEAPF32[i1 + 1144 >> 2] = d2 * d29;
  HEAPF32[i1 + 1148 >> 2] = d5 * d29;
  HEAP32[i1 + 584 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i1 + 588 >> 2] = 0;
  HEAP32[i1 + 592 >> 2] = HEAP32[i18 + 0 >> 2];
  HEAP32[i1 + 596 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i1 + 600 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i1 + 604 >> 2] = HEAP32[i18 + 12 >> 2];
  HEAPF32[i1 + 608 >> 2] = d3;
  +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 15](i15, i1 + 584 | 0, 1);
  STACKTOP = i1;
  return;
 }
 if ((i22 + -21 | 0) >>> 0 < 9) {
  d11 = +HEAPF32[i18 >> 2];
  d12 = +HEAPF32[i18 + 16 >> 2];
  d10 = +HEAPF32[i18 + 32 >> 2];
  d13 = +HEAPF32[i18 + 4 >> 2];
  d14 = +HEAPF32[i18 + 20 >> 2];
  d9 = +HEAPF32[i18 + 36 >> 2];
  d28 = +HEAPF32[i18 + 8 >> 2];
  d29 = +HEAPF32[i18 + 24 >> 2];
  d8 = +HEAPF32[i18 + 40 >> 2];
  d17 = -+HEAPF32[i18 + 48 >> 2];
  d26 = -+HEAPF32[i18 + 52 >> 2];
  d27 = -+HEAPF32[i18 + 56 >> 2];
  d5 = +HEAPF32[i21 + 48 >> 2];
  d6 = +HEAPF32[i21 + 52 >> 2];
  d7 = +HEAPF32[i21 + 56 >> 2];
  HEAPF32[i1 + 568 >> 2] = d11 * d17 + d12 * d26 + d10 * d27 + (d11 * d5 + d12 * d6 + d10 * d7);
  HEAPF32[i1 + 572 >> 2] = d13 * d17 + d14 * d26 + d9 * d27 + (d13 * d5 + d14 * d6 + d9 * d7);
  HEAPF32[i1 + 576 >> 2] = d28 * d17 + d29 * d26 + d8 * d27 + (d28 * d5 + d29 * d6 + d8 * d7);
  HEAPF32[i1 + 580 >> 2] = 0.0;
  d3 = +HEAPF32[i20 + 48 >> 2];
  d2 = +HEAPF32[i20 + 52 >> 2];
  d4 = +HEAPF32[i20 + 56 >> 2];
  d10 = d11 * d17 + d12 * d26 + d10 * d27 + (d11 * d3 + d12 * d2 + d10 * d4);
  d9 = d13 * d17 + d14 * d26 + d9 * d27 + (d13 * d3 + d14 * d2 + d9 * d4);
  d8 = d28 * d17 + d29 * d26 + d8 * d27 + (d28 * d3 + d29 * d2 + d8 * d4);
  HEAPF32[i1 + 552 >> 2] = d10;
  HEAPF32[i1 + 556 >> 2] = d9;
  HEAPF32[i1 + 560 >> 2] = d8;
  HEAPF32[i1 + 564 >> 2] = 0.0;
  i20 = HEAP32[i19 + 4 >> 2] | 0;
  if ((i20 | 0) == 25) {
   i31 = HEAP32[i16 + 8 >> 2] | 0;
   i30 = HEAP32[i15 + 16 >> 2] | 0;
   HEAP32[i1 + 316 >> 2] = HEAP32[i1 + 568 >> 2];
   HEAP32[i1 + 320 >> 2] = HEAP32[i1 + 572 >> 2];
   HEAP32[i1 + 324 >> 2] = HEAP32[i1 + 576 >> 2];
   HEAP32[i1 + 328 >> 2] = HEAP32[i1 + 580 >> 2];
   HEAP32[i1 + 332 >> 2] = HEAP32[i1 + 552 >> 2];
   HEAP32[i1 + 336 >> 2] = HEAP32[i1 + 556 >> 2];
   HEAP32[i1 + 340 >> 2] = HEAP32[i1 + 560 >> 2];
   HEAP32[i1 + 344 >> 2] = HEAP32[i1 + 564 >> 2];
   HEAP32[i1 + 348 >> 2] = i30;
   HEAPF32[i1 + 352 >> 2] = 1.0;
   HEAP32[i1 + 312 >> 2] = 9248;
   HEAP32[i1 + 356 >> 2] = i15;
   HEAP32[i1 + 360 >> 2] = i31;
   HEAP32[i1 + 364 >> 2] = i19;
   HEAP32[i1 + 368 >> 2] = HEAP32[i18 + 0 >> 2];
   HEAP32[i1 + 372 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i1 + 376 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i1 + 380 >> 2] = HEAP32[i18 + 12 >> 2];
   HEAP32[i1 + 384 >> 2] = HEAP32[i18 + 16 >> 2];
   HEAP32[i1 + 388 >> 2] = HEAP32[i18 + 20 >> 2];
   HEAP32[i1 + 392 >> 2] = HEAP32[i18 + 24 >> 2];
   HEAP32[i1 + 396 >> 2] = HEAP32[i18 + 28 >> 2];
   HEAP32[i1 + 400 >> 2] = HEAP32[i18 + 32 >> 2];
   HEAP32[i1 + 404 >> 2] = HEAP32[i18 + 36 >> 2];
   HEAP32[i1 + 408 >> 2] = HEAP32[i18 + 40 >> 2];
   HEAP32[i1 + 412 >> 2] = HEAP32[i18 + 44 >> 2];
   HEAP32[i1 + 416 >> 2] = HEAP32[i18 + 48 >> 2];
   HEAP32[i1 + 420 >> 2] = HEAP32[i18 + 52 >> 2];
   HEAP32[i1 + 424 >> 2] = HEAP32[i18 + 56 >> 2];
   HEAP32[i1 + 428 >> 2] = HEAP32[i18 + 60 >> 2];
   HEAPF32[i1 + 352 >> 2] = +HEAPF32[i15 + 4 >> 2];
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 144 >> 2] & 127](i19, i1 + 312 | 0, i1 + 568 | 0, i1 + 552 | 0);
   STACKTOP = i1;
   return;
  } else if ((i20 | 0) == 21) {
   i31 = HEAP32[i16 + 8 >> 2] | 0;
   i30 = HEAP32[i15 + 16 >> 2] | 0;
   HEAP32[i1 + 436 >> 2] = HEAP32[i1 + 568 >> 2];
   HEAP32[i1 + 440 >> 2] = HEAP32[i1 + 572 >> 2];
   HEAP32[i1 + 444 >> 2] = HEAP32[i1 + 576 >> 2];
   HEAP32[i1 + 448 >> 2] = HEAP32[i1 + 580 >> 2];
   HEAP32[i1 + 452 >> 2] = HEAP32[i1 + 552 >> 2];
   HEAP32[i1 + 456 >> 2] = HEAP32[i1 + 556 >> 2];
   HEAP32[i1 + 460 >> 2] = HEAP32[i1 + 560 >> 2];
   HEAP32[i1 + 464 >> 2] = HEAP32[i1 + 564 >> 2];
   HEAP32[i1 + 468 >> 2] = i30;
   HEAPF32[i1 + 472 >> 2] = 1.0;
   HEAP32[i1 + 432 >> 2] = 9248;
   HEAP32[i1 + 476 >> 2] = i15;
   HEAP32[i1 + 480 >> 2] = i31;
   HEAP32[i1 + 484 >> 2] = i19;
   HEAP32[i1 + 488 >> 2] = HEAP32[i18 + 0 >> 2];
   HEAP32[i1 + 492 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i1 + 496 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i1 + 500 >> 2] = HEAP32[i18 + 12 >> 2];
   HEAP32[i1 + 504 >> 2] = HEAP32[i18 + 16 >> 2];
   HEAP32[i1 + 508 >> 2] = HEAP32[i18 + 20 >> 2];
   HEAP32[i1 + 512 >> 2] = HEAP32[i18 + 24 >> 2];
   HEAP32[i1 + 516 >> 2] = HEAP32[i18 + 28 >> 2];
   HEAP32[i1 + 520 >> 2] = HEAP32[i18 + 32 >> 2];
   HEAP32[i1 + 524 >> 2] = HEAP32[i18 + 36 >> 2];
   HEAP32[i1 + 528 >> 2] = HEAP32[i18 + 40 >> 2];
   HEAP32[i1 + 532 >> 2] = HEAP32[i18 + 44 >> 2];
   HEAP32[i1 + 536 >> 2] = HEAP32[i18 + 48 >> 2];
   HEAP32[i1 + 540 >> 2] = HEAP32[i18 + 52 >> 2];
   HEAP32[i1 + 544 >> 2] = HEAP32[i18 + 56 >> 2];
   HEAP32[i1 + 548 >> 2] = HEAP32[i18 + 60 >> 2];
   HEAPF32[i1 + 472 >> 2] = +HEAPF32[i15 + 4 >> 2];
   i15 = HEAP32[i19 + 48 >> 2] | 0;
   HEAP32[i1 + 1272 >> 2] = 6152;
   HEAP32[i1 + 1276 >> 2] = i15;
   HEAP32[i1 + 1280 >> 2] = i1 + 432;
   i15 = HEAP32[i19 + 52 >> 2] | 0;
   HEAP32[i1 + 1328 >> 2] = 0;
   HEAP32[i1 + 1332 >> 2] = 0;
   HEAP32[i1 + 1336 >> 2] = 0;
   HEAP32[i1 + 1340 >> 2] = 0;
   HEAP32[i1 + 1304 >> 2] = 0;
   HEAP32[i1 + 1308 >> 2] = 0;
   HEAP32[i1 + 1312 >> 2] = 0;
   HEAP32[i1 + 1316 >> 2] = 0;
   if ((HEAP8[i15 + 60 >> 0] | 0) == 0) {
    __ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i15, i1 + 1272 | 0, i1 + 568 | 0, d10, d9, d8, i1 + 1328 | 0, i1 + 1304 | 0);
    STACKTOP = i1;
    return;
   } else {
    __ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i15, i1 + 1272 | 0, i1 + 568 | 0, d10, d9, d8, i1 + 1328 | 0, i1 + 1304 | 0, HEAP32[i15 + 56 >> 2] | 0);
    STACKTOP = i1;
    return;
   }
  } else {
   d33 = +HEAPF32[i18 >> 2];
   d32 = +HEAPF32[i18 + 16 >> 2];
   d10 = +HEAPF32[i18 + 32 >> 2];
   d11 = +HEAPF32[i18 + 4 >> 2];
   d12 = +HEAPF32[i18 + 20 >> 2];
   d13 = +HEAPF32[i18 + 36 >> 2];
   d27 = +HEAPF32[i18 + 8 >> 2];
   d28 = +HEAPF32[i18 + 24 >> 2];
   d29 = +HEAPF32[i18 + 40 >> 2];
   d14 = -+HEAPF32[i18 + 48 >> 2];
   d17 = -+HEAPF32[i18 + 52 >> 2];
   d26 = -+HEAPF32[i18 + 56 >> 2];
   d9 = d33 * d14 + d32 * d17 + d10 * d26 + (d33 * d5 + d32 * d6 + d10 * d7);
   d8 = d11 * d14 + d12 * d17 + d13 * d26 + (d11 * d5 + d12 * d6 + d13 * d7);
   d6 = d27 * d14 + d28 * d17 + d29 * d26 + (d27 * d5 + d28 * d6 + d29 * d7);
   d7 = d33 * d14 + d32 * d17 + d10 * d26 + (d33 * d3 + d32 * d2 + d10 * d4);
   d5 = d11 * d14 + d12 * d17 + d13 * d26 + (d11 * d3 + d12 * d2 + d13 * d4);
   d2 = d27 * d14 + d28 * d17 + d29 * d26 + (d27 * d3 + d28 * d2 + d29 * d4);
   i31 = HEAP32[i16 + 8 >> 2] | 0;
   i30 = HEAP32[i15 + 16 >> 2] | 0;
   HEAPF32[i1 + 196 >> 2] = d9;
   HEAPF32[i1 + 200 >> 2] = d8;
   HEAPF32[i1 + 204 >> 2] = d6;
   HEAPF32[i1 + 208 >> 2] = 0.0;
   HEAPF32[i1 + 212 >> 2] = d7;
   HEAPF32[i1 + 216 >> 2] = d5;
   HEAPF32[i1 + 220 >> 2] = d2;
   HEAPF32[i1 + 224 >> 2] = 0.0;
   HEAP32[i1 + 228 >> 2] = i30;
   HEAPF32[i1 + 232 >> 2] = 1.0;
   HEAP32[i1 + 192 >> 2] = 9056;
   HEAP32[i1 + 236 >> 2] = i15;
   HEAP32[i1 + 240 >> 2] = i31;
   HEAP32[i1 + 244 >> 2] = i19;
   HEAP32[i1 + 248 >> 2] = HEAP32[i18 + 0 >> 2];
   HEAP32[i1 + 252 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i1 + 256 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i1 + 260 >> 2] = HEAP32[i18 + 12 >> 2];
   HEAP32[i1 + 264 >> 2] = HEAP32[i18 + 16 >> 2];
   HEAP32[i1 + 268 >> 2] = HEAP32[i18 + 20 >> 2];
   HEAP32[i1 + 272 >> 2] = HEAP32[i18 + 24 >> 2];
   HEAP32[i1 + 276 >> 2] = HEAP32[i18 + 28 >> 2];
   HEAP32[i1 + 280 >> 2] = HEAP32[i18 + 32 >> 2];
   HEAP32[i1 + 284 >> 2] = HEAP32[i18 + 36 >> 2];
   HEAP32[i1 + 288 >> 2] = HEAP32[i18 + 40 >> 2];
   HEAP32[i1 + 292 >> 2] = HEAP32[i18 + 44 >> 2];
   HEAP32[i1 + 296 >> 2] = HEAP32[i18 + 48 >> 2];
   HEAP32[i1 + 300 >> 2] = HEAP32[i18 + 52 >> 2];
   HEAP32[i1 + 304 >> 2] = HEAP32[i18 + 56 >> 2];
   HEAP32[i1 + 308 >> 2] = HEAP32[i18 + 60 >> 2];
   HEAPF32[i1 + 232 >> 2] = +HEAPF32[i15 + 4 >> 2];
   HEAPF32[i1 + 176 >> 2] = d9;
   HEAPF32[i1 + 180 >> 2] = d8;
   HEAPF32[i1 + 184 >> 2] = d6;
   HEAPF32[i1 + 188 >> 2] = 0.0;
   if (d7 < d9) HEAPF32[i1 + 176 >> 2] = d7;
   if (d5 < d8) HEAPF32[i1 + 180 >> 2] = d5;
   if (d2 < d6) HEAPF32[i1 + 184 >> 2] = d2;
   HEAPF32[i1 + 160 >> 2] = d9;
   HEAPF32[i1 + 164 >> 2] = d8;
   HEAPF32[i1 + 168 >> 2] = d6;
   HEAPF32[i1 + 172 >> 2] = 0.0;
   if (d9 < d7) HEAPF32[i1 + 160 >> 2] = d7;
   if (d8 < d5) HEAPF32[i1 + 164 >> 2] = d5;
   if (d6 < d2) HEAPF32[i1 + 168 >> 2] = d2;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 64 >> 2] & 127](i19, i1 + 192 | 0, i1 + 176 | 0, i1 + 160 | 0);
   STACKTOP = i1;
   return;
  }
 }
 if ((i22 | 0) != 31) {
  STACKTOP = i1;
  return;
 }
 i22 = HEAP32[i19 + 64 >> 2] | 0;
 i31 = HEAP32[i16 + 8 >> 2] | 0;
 HEAP32[i1 + 128 >> 2] = 8840;
 HEAP32[i1 + 132 >> 2] = i31;
 HEAP32[i1 + 136 >> 2] = i19;
 HEAP32[i1 + 140 >> 2] = i18;
 HEAP32[i1 + 144 >> 2] = i21;
 HEAP32[i1 + 148 >> 2] = i20;
 HEAP32[i1 + 152 >> 2] = i15;
 if ((i22 | 0) == 0) {
  i15 = HEAP32[i19 + 16 >> 2] | 0;
  if ((i15 | 0) <= 0) {
   STACKTOP = i1;
   return;
  }
  i16 = 0;
  while (1) {
   i31 = HEAP32[i19 + 24 >> 2] | 0;
   i30 = HEAP32[i31 + (i16 * 80 | 0) + 64 >> 2] | 0;
   __ZNK11btTransformmlERKS_(i1 + 1328 | 0, i18, i31 + (i16 * 80 | 0) | 0);
   i31 = HEAP32[i1 + 132 >> 2] | 0;
   HEAP32[i1 + 1304 >> 2] = 0;
   HEAP32[i1 + 1308 >> 2] = i30;
   HEAP32[i1 + 1312 >> 2] = i31;
   HEAP32[i1 + 1316 >> 2] = i1 + 1328;
   HEAP32[i1 + 1320 >> 2] = -1;
   HEAP32[i1 + 1324 >> 2] = i16;
   i31 = HEAP32[i1 + 152 >> 2] | 0;
   HEAPF32[i1 + 1276 >> 2] = 1.0;
   HEAP32[i1 + 1280 >> 2] = 0;
   HEAP16[i1 + 1284 >> 1] = 1;
   HEAP16[i1 + 1286 >> 1] = -1;
   HEAP32[i1 + 1288 >> 2] = 0;
   HEAP32[i1 + 1272 >> 2] = 8664;
   HEAP32[i1 + 1292 >> 2] = i31;
   HEAP32[i1 + 1296 >> 2] = i16;
   HEAPF32[i1 + 1276 >> 2] = +HEAPF32[i31 + 4 >> 2];
   HEAP32[i1 + 1288 >> 2] = HEAP32[i31 + 16 >> 2];
   __ZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackE(HEAP32[i1 + 144 >> 2] | 0, HEAP32[i1 + 148 >> 2] | 0, i1 + 1304 | 0, i1 + 1272 | 0);
   i16 = i16 + 1 | 0;
   if ((i16 | 0) >= (i15 | 0)) break;
   i19 = HEAP32[i1 + 136 >> 2] | 0;
   i18 = HEAP32[i1 + 140 >> 2] | 0;
  }
  STACKTOP = i1;
  return;
 }
 __ZNK11btTransform12inverseTimesERKS_(i1 + 64 | 0, i18, i21);
 d7 = +HEAPF32[i1 + 112 >> 2];
 d8 = +HEAPF32[i1 + 116 >> 2];
 d6 = +HEAPF32[i1 + 120 >> 2];
 __ZNK11btTransform12inverseTimesERKS_(i1, i18, i20);
 i19 = HEAP32[i22 >> 2] | 0;
 if ((i19 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 d9 = +HEAPF32[i1 + 48 >> 2] - d7;
 d11 = +HEAPF32[i1 + 52 >> 2] - d8;
 d12 = +HEAPF32[i1 + 56 >> 2] - d6;
 d10 = 1.0 / +Math_sqrt(+(d9 * d9 + d11 * d11 + d12 * d12));
 if (d9 * d10 == 0.0) d13 = 999999984306749400.0; else d13 = 1.0 / (d9 * d10);
 if (d11 * d10 == 0.0) d14 = 999999984306749400.0; else d14 = 1.0 / (d11 * d10);
 if (d12 * d10 == 0.0) d17 = 999999984306749400.0; else d17 = 1.0 / (d12 * d10);
 i15 = d13 < 0.0 & 1;
 i18 = d14 < 0.0 & 1;
 i16 = d17 < 0.0 & 1;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i20 = _malloc(531) | 0;
 if ((i20 | 0) == 0) i24 = 0; else {
  HEAP32[(i20 + 19 & -16) + -4 >> 2] = i20;
  i24 = i20 + 19 & -16;
 }
 i21 = 0;
 do {
  i20 = i24 + (i21 << 2) | 0;
  if ((i20 | 0) != 0) HEAP32[i20 >> 2] = 0;
  i21 = i21 + 1 | 0;
 } while ((i21 | 0) != 128);
 HEAP32[i24 >> 2] = i19;
 i22 = 128;
 i25 = 128;
 i19 = 1;
 i23 = 126;
 do {
  i20 = i19 + -1 | 0;
  i21 = HEAP32[i24 + (i20 << 2) >> 2] | 0;
  HEAP32[i1 + 1240 >> 2] = HEAP32[i21 + 0 >> 2];
  HEAP32[i1 + 1244 >> 2] = HEAP32[i21 + 4 >> 2];
  HEAP32[i1 + 1248 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAP32[i1 + 1252 >> 2] = HEAP32[i21 + 12 >> 2];
  HEAP32[i1 + 1256 >> 2] = HEAP32[i21 + 16 >> 2];
  HEAP32[i1 + 1260 >> 2] = HEAP32[i21 + 20 >> 2];
  HEAP32[i1 + 1264 >> 2] = HEAP32[i21 + 24 >> 2];
  HEAP32[i1 + 1268 >> 2] = HEAP32[i21 + 28 >> 2];
  d28 = d13 * (+HEAPF32[i1 + 1240 + (i15 << 4) >> 2] - d7);
  d26 = d13 * (+HEAPF32[i1 + 1240 + ((i15 ^ 1) << 4) >> 2] - d7);
  d29 = d14 * (+HEAPF32[i1 + 1240 + (i18 << 4) + 4 >> 2] - d8);
  d27 = d14 * (+HEAPF32[i1 + 1240 + ((i18 ^ 1) << 4) + 4 >> 2] - d8);
  do if (((!(d28 > d27 | d29 > d26) ? (d5 = d29 > d28 ? d29 : d28, d3 = d27 < d26 ? d27 : d26, d4 = d17 * (+HEAPF32[i1 + 1240 + (i16 << 4) + 8 >> 2] - d6), d2 = d17 * (+HEAPF32[i1 + 1240 + ((i16 ^ 1) << 4) + 8 >> 2] - d6), !(d5 > d2 | d4 > d3)) : 0) ? (d4 > d5 ? d4 : d5) < d9 * d10 * d9 + d11 * d10 * d11 + d12 * d10 * d12 : 0) ? (d2 < d3 ? d2 : d3) > 0.0 : 0) {
   if ((HEAP32[i21 + 40 >> 2] | 0) == 0) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 + 128 >> 2] | 0) + 12 >> 2] & 127](i1 + 128 | 0, i21);
    i19 = i20;
    break;
   }
   if ((i20 | 0) > (i23 | 0)) {
    i23 = i22 << 1;
    if ((i22 | 0) < (i23 | 0)) {
     do if ((i25 | 0) < (i23 | 0)) {
      do if ((i22 | 0) == 0) i25 = 0; else {
       HEAP32[5004] = (HEAP32[5004] | 0) + 1;
       i25 = _malloc((i22 << 3 | 3) + 16 | 0) | 0;
       if ((i25 | 0) == 0) i25 = 0; else {
        HEAP32[(i25 + 19 & -16) + -4 >> 2] = i25;
        i25 = i25 + 19 & -16;
       }
       if ((i22 | 0) > 0) i30 = 0; else break;
       do {
        i31 = i25 + (i30 << 2) | 0;
        if ((i31 | 0) != 0) HEAP32[i31 >> 2] = HEAP32[i24 + (i30 << 2) >> 2];
        i30 = i30 + 1 | 0;
       } while ((i30 | 0) != (i22 | 0));
      } while (0);
      if ((i24 | 0) == 0) {
       i24 = i25;
       i25 = i23;
       break;
      }
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i24 + -4 >> 2] | 0);
      i24 = i25;
      i25 = i23;
     } while (0);
     do {
      i30 = i24 + (i22 << 2) | 0;
      if ((i30 | 0) != 0) HEAP32[i30 >> 2] = 0;
      i22 = i22 + 1 | 0;
     } while ((i22 | 0) != (i23 | 0));
    }
    i22 = i23;
    i23 = i23 + -2 | 0;
   }
   HEAP32[i24 + (i20 << 2) >> 2] = HEAP32[i21 + 36 >> 2];
   HEAP32[i24 + (i19 << 2) >> 2] = HEAP32[i21 + 40 >> 2];
   i19 = i19 + 1 | 0;
  } else i19 = i20; while (0);
 } while ((i19 | 0) != 0);
 if ((i24 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i24 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfo(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1704);
 i4 = HEAP32[i2 + 212 >> 2] | 0;
 i5 = HEAP32[i2 + 180 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i2 + 184 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i7 = 0;
    i10 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i7 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
    if ((i7 | 0) == 0) i7 = 0; else {
     HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
     i7 = i7 + 19 & -16;
    }
    i10 = HEAP32[i2 + 180 >> 2] | 0;
   }
   if ((i10 | 0) > 0) {
    i8 = 0;
    do {
     i9 = i7 + (i8 << 2) | 0;
     if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i2 + 188 >> 2] | 0) + (i8 << 2) >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i10 | 0));
   }
   i8 = HEAP32[i2 + 188 >> 2] | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP8[i2 + 192 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i8 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 188 >> 2] = 0;
   }
   HEAP8[i2 + 192 >> 0] = 1;
   HEAP32[i2 + 188 >> 2] = i7;
   HEAP32[i2 + 184 >> 2] = i4;
   i7 = i2 + 188 | 0;
  } else i7 = i2 + 188 | 0;
  do {
   i8 = (HEAP32[i7 >> 2] | 0) + (i5 << 2) | 0;
   if ((i8 | 0) != 0) HEAP32[i8 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i2 + 180 >> 2] = i4;
 i4 = 0;
 while (1) {
  if ((i4 | 0) >= (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 104 >> 2] & 127](i2) | 0)) break;
  HEAP32[(HEAP32[i2 + 188 >> 2] | 0) + (i4 << 2) >> 2] = HEAP32[(HEAP32[i2 + 220 >> 2] | 0) + (i4 << 2) >> 2];
  i4 = i4 + 1 | 0;
 }
 i4 = HEAP32[i2 + 180 >> 2] | 0;
 if ((i4 | 0) > 1) __ZN20btAlignedObjectArrayIP17btTypedConstraintE17quickSortInternalI33btSortConstraintOnIslandPredicateEEvRKT_ii(i2 + 176 | 0, 0, i4 + -1 | 0);
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 104 >> 2] & 127](i2) | 0) == 0) i5 = 0; else i5 = HEAP32[i2 + 188 >> 2] | 0;
 i4 = HEAP32[i2 + 196 >> 2] | 0;
 i18 = HEAP32[i2 + 180 >> 2] | 0;
 i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i4 + 12 >> 2] = i5;
 HEAP32[i4 + 16 >> 2] = i18;
 HEAP32[i4 + 20 >> 2] = i7;
 i7 = HEAP32[i4 + 32 >> 2] | 0;
 if ((i7 | 0) < 0) {
  if ((HEAP32[i4 + 36 >> 2] | 0) < 0) {
   i5 = HEAP32[i4 + 40 >> 2] | 0;
   if ((i5 | 0) != 0) {
    if ((HEAP8[i4 + 44 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i5 + -4 >> 2] | 0);
    }
    HEAP32[i4 + 40 >> 2] = 0;
   }
   HEAP8[i4 + 44 >> 0] = 1;
   HEAP32[i4 + 40 >> 2] = 0;
   HEAP32[i4 + 36 >> 2] = 0;
   i5 = i7;
  } else i5 = i7;
  do {
   i7 = (HEAP32[i4 + 40 >> 2] | 0) + (i5 << 2) | 0;
   if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 0);
 }
 HEAP32[i4 + 32 >> 2] = 0;
 i5 = HEAP32[i4 + 52 >> 2] | 0;
 if ((i5 | 0) < 0) {
  if ((HEAP32[i4 + 56 >> 2] | 0) < 0) {
   i7 = HEAP32[i4 + 60 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i4 + 64 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i4 + 60 >> 2] = 0;
   }
   HEAP8[i4 + 64 >> 0] = 1;
   HEAP32[i4 + 60 >> 2] = 0;
   HEAP32[i4 + 56 >> 2] = 0;
  }
  do {
   i7 = (HEAP32[i4 + 60 >> 2] | 0) + (i5 << 2) | 0;
   if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 0);
 }
 HEAP32[i4 + 52 >> 2] = 0;
 i7 = HEAP32[i4 + 72 >> 2] | 0;
 if ((i7 | 0) < 0) {
  if ((HEAP32[i4 + 76 >> 2] | 0) < 0) {
   i5 = HEAP32[i4 + 80 >> 2] | 0;
   if ((i5 | 0) != 0) {
    if ((HEAP8[i4 + 84 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i5 + -4 >> 2] | 0);
    }
    HEAP32[i4 + 80 >> 2] = 0;
   }
   HEAP8[i4 + 84 >> 0] = 1;
   HEAP32[i4 + 80 >> 2] = 0;
   HEAP32[i4 + 76 >> 2] = 0;
   i5 = i7;
  } else i5 = i7;
  do {
   i7 = (HEAP32[i4 + 80 >> 2] | 0) + (i5 << 2) | 0;
   if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 0);
 }
 HEAP32[i4 + 72 >> 2] = 0;
 i4 = HEAP32[i2 + 200 >> 2] | 0;
 i9 = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0;
 i7 = HEAP32[i2 + 8 >> 2] | 0;
 i5 = HEAP32[i2 + 24 >> 2] | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0;
 FUNCTION_TABLE_viii[i9 & 127](i4, i7, i5);
 i5 = HEAP32[i2 + 204 >> 2] | 0;
 i7 = HEAP32[i2 + 24 >> 2] | 0;
 i4 = HEAP32[i2 + 196 >> 2] | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(16584);
 i9 = HEAP32[i5 + 28 >> 2] | 0;
 if ((i9 | 0) < 0) {
  if ((HEAP32[i5 + 32 >> 2] | 0) < 0) {
   i8 = HEAP32[i5 + 36 >> 2] | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP8[i5 + 40 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i8 + -4 >> 2] | 0);
    }
    HEAP32[i5 + 36 >> 2] = 0;
   }
   HEAP8[i5 + 40 >> 0] = 1;
   HEAP32[i5 + 36 >> 2] = 0;
   HEAP32[i5 + 32 >> 2] = 0;
  }
  do {
   i8 = (HEAP32[i5 + 36 >> 2] | 0) + (i9 << 2) | 0;
   if ((i8 | 0) != 0) HEAP32[i8 >> 2] = 0;
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != 0);
 }
 HEAP32[i5 + 28 >> 2] = 0;
 i8 = HEAP32[i5 + 8 >> 2] | 0;
 if ((i8 | 0) > 0) {
  i9 = HEAP32[i5 + 16 >> 2] | 0;
  i10 = 0;
  do {
   i11 = i9 + (i10 << 3) | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if ((i13 | 0) == (i10 | 0)) i14 = i10; else {
    i12 = i11;
    do {
     i14 = i9 + (i13 << 3) | 0;
     HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
     i14 = HEAP32[i14 >> 2] | 0;
     i12 = i9 + (i14 << 3) | 0;
     i13 = HEAP32[i12 >> 2] | 0;
    } while ((i14 | 0) != (i13 | 0));
   }
   HEAP32[i11 >> 2] = i14;
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i8 | 0));
  i13 = HEAP32[i5 + 8 >> 2] | 0;
  if ((i13 | 0) > 1) {
   __ZN20btAlignedObjectArrayI9btElementE17quickSortInternalI31btUnionFindElementSortPredicateEEvRKT_ii(i5 + 4 | 0, 0, i13 + -1 | 0);
   i13 = HEAP32[i5 + 8 >> 2] | 0;
  }
  if ((i13 | 0) > 0) {
   i12 = HEAP32[i5 + 16 >> 2] | 0;
   i14 = 0;
   while (1) {
    i11 = HEAP32[i12 + (i14 << 3) >> 2] | 0;
    i9 = i14;
    do {
     i9 = i9 + 1 | 0;
     i8 = (i9 | 0) < (i13 | 0);
     if (!i8) break;
    } while ((HEAP32[i12 + (i9 << 3) >> 2] | 0) == (i11 | 0));
    if ((i14 | 0) < (i9 | 0)) {
     i10 = HEAP32[i2 + 16 >> 2] | 0;
     i16 = 1;
     i15 = i14;
     do {
      i17 = HEAP32[i10 + (HEAP32[i12 + (i15 << 3) + 4 >> 2] << 2) >> 2] | 0;
      if ((HEAP32[i17 + 208 >> 2] | 0) == (i11 | 0)) {
       i18 = HEAP32[i17 + 216 >> 2] | 0;
       i16 = i16 & (i18 | 0) != 1 & (i18 | 0) != 4;
      }
      i15 = i15 + 1 | 0;
     } while ((i15 | 0) != (i9 | 0));
     if (i16) {
      do {
       i15 = HEAP32[i10 + (HEAP32[i12 + (i14 << 3) + 4 >> 2] << 2) >> 2] | 0;
       if ((HEAP32[i15 + 208 >> 2] | 0) == (i11 | 0) ? !(((HEAP32[i15 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2) : 0) HEAP32[i15 + 216 >> 2] = 2;
       i14 = i14 + 1 | 0;
      } while ((i14 | 0) < (i9 | 0));
     } else do {
      i15 = HEAP32[i10 + (HEAP32[i12 + (i14 << 3) + 4 >> 2] << 2) >> 2] | 0;
      if ((HEAP32[i15 + 208 >> 2] | 0) == (i11 | 0) ? (HEAP32[i15 + 216 >> 2] | 0) == 2 : 0) {
       HEAP32[i15 + 216 >> 2] = 3;
       HEAPF32[i15 + 220 >> 2] = 0.0;
      }
      i14 = i14 + 1 | 0;
     } while ((i14 | 0) < (i9 | 0));
    }
    if (i8) i14 = i9; else break;
   }
  }
 }
 i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0;
 if ((i9 | 0) > 0) {
  i8 = 0;
  do {
   i10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 31](i7, i8) | 0;
   i11 = HEAP32[i10 + 740 >> 2] | 0;
   i12 = HEAP32[i10 + 744 >> 2] | 0;
   if ((i11 | 0) != 0 ? (HEAP32[i11 + 216 >> 2] | 0) != 2 : 0) i13 = 101; else i13 = 99;
   if (((i13 | 0) == 99 ? (i13 = 0, (i12 | 0) != 0) : 0) ? (HEAP32[i12 + 216 >> 2] | 0) != 2 : 0) i13 = 101;
   if ((i13 | 0) == 101) {
    i18 = HEAP32[i11 + 204 >> 2] | 0;
    if ((((i18 & 2 | 0) != 0 ? (HEAP32[i11 + 216 >> 2] | 0) != 2 : 0) ? (i18 & 4 | 0) == 0 : 0) ? (HEAP32[i12 + 204 >> 2] & 3 | 0) == 0 : 0) {
     if (!(((HEAP32[i12 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i12 + 216 >> 2] = 1;
     HEAPF32[i12 + 220 >> 2] = 0.0;
    }
    i18 = HEAP32[i12 + 204 >> 2] | 0;
    if ((((i18 & 2 | 0) != 0 ? (HEAP32[i12 + 216 >> 2] | 0) != 2 : 0) ? (i18 & 4 | 0) == 0 : 0) ? (HEAP32[i11 + 204 >> 2] & 3 | 0) == 0 : 0) {
     if (!(((HEAP32[i11 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i11 + 216 >> 2] = 1;
     HEAPF32[i11 + 220 >> 2] = 0.0;
    }
    if ((HEAP8[i5 + 64 >> 0] | 0) != 0 ? FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, i11, i12) | 0 : 0) {
     i12 = HEAP32[i5 + 28 >> 2] | 0;
     if ((i12 | 0) == (HEAP32[i5 + 32 >> 2] | 0) ? (i6 = (i12 | 0) == 0 ? 1 : i12 << 1, (i12 | 0) < (i6 | 0)) : 0) {
      if ((i6 | 0) == 0) i11 = 0; else {
       HEAP32[5004] = (HEAP32[5004] | 0) + 1;
       i11 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
       if ((i11 | 0) == 0) i11 = 0; else {
        HEAP32[(i11 + 19 & -16) + -4 >> 2] = i11;
        i11 = i11 + 19 & -16;
       }
       i12 = HEAP32[i5 + 28 >> 2] | 0;
      }
      if ((i12 | 0) > 0) {
       i14 = 0;
       do {
        i13 = i11 + (i14 << 2) | 0;
        if ((i13 | 0) != 0) HEAP32[i13 >> 2] = HEAP32[(HEAP32[i5 + 36 >> 2] | 0) + (i14 << 2) >> 2];
        i14 = i14 + 1 | 0;
       } while ((i14 | 0) != (i12 | 0));
      }
      i13 = HEAP32[i5 + 36 >> 2] | 0;
      if ((i13 | 0) != 0) {
       if ((HEAP8[i5 + 40 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i13 + -4 >> 2] | 0);
        i12 = HEAP32[i5 + 28 >> 2] | 0;
       }
       HEAP32[i5 + 36 >> 2] = 0;
      }
      HEAP8[i5 + 40 >> 0] = 1;
      HEAP32[i5 + 36 >> 2] = i11;
      HEAP32[i5 + 32 >> 2] = i6;
     }
     i11 = (HEAP32[i5 + 36 >> 2] | 0) + (i12 << 2) | 0;
     if ((i11 | 0) != 0) HEAP32[i11 >> 2] = i10;
     HEAP32[i5 + 28 >> 2] = i12 + 1;
    }
   }
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) < (i9 | 0));
 }
 i6 = HEAP32[5022] | 0;
 i18 = (HEAP32[i6 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i6 + 16 >> 2] = i18;
 do if ((i18 | 0) == 0) {
  if ((HEAP32[i6 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i1 | 0, 0) | 0;
   i18 = HEAP32[5008] | 0;
   HEAPF32[i6 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i18 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i6 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i6 + 8 >> 2];
   if ((HEAP32[i6 + 16 >> 2] | 0) != 0) break;
   i6 = HEAP32[5022] | 0;
  }
  HEAP32[5022] = HEAP32[i6 + 20 >> 2];
 } while (0);
 i6 = HEAP32[i5 + 8 >> 2] | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(16616);
 if ((HEAP8[i5 + 64 >> 0] | 0) != 0) {
  i7 = HEAP32[i5 + 28 >> 2] | 0;
  if ((i7 | 0) > 1) __ZN20btAlignedObjectArrayIP20btPersistentManifoldE17quickSortInternalI33btPersistentManifoldSortPredicateEEvRKT_ii(i5 + 24 | 0, 0, i7 + -1 | 0);
  if ((i6 | 0) > 0) {
   i10 = 1;
   i11 = 0;
   i8 = 0;
   do {
    i14 = HEAP32[i5 + 16 >> 2] | 0;
    i9 = HEAP32[i14 + (i11 << 3) >> 2] | 0;
    L222 : do if ((i11 | 0) < (i6 | 0)) {
     i13 = i9;
     i12 = 1;
     while (1) {
      if ((i13 | 0) != (i9 | 0)) break L222;
      i13 = HEAP32[(HEAP32[i2 + 16 >> 2] | 0) + (HEAP32[i14 + (i11 << 3) + 4 >> 2] << 2) >> 2] | 0;
      i16 = HEAP32[i5 + 48 >> 2] | 0;
      do if ((i16 | 0) == (HEAP32[i5 + 52 >> 2] | 0)) {
       i14 = (i16 | 0) == 0 ? 1 : i16 << 1;
       if ((i16 | 0) >= (i14 | 0)) break;
       if ((i14 | 0) == 0) i15 = 0; else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i15 = _malloc((i14 << 2 | 3) + 16 | 0) | 0;
        if ((i15 | 0) == 0) i15 = 0; else {
         HEAP32[(i15 + 19 & -16) + -4 >> 2] = i15;
         i15 = i15 + 19 & -16;
        }
        i16 = HEAP32[i5 + 48 >> 2] | 0;
       }
       if ((i16 | 0) > 0) {
        i17 = 0;
        do {
         i18 = i15 + (i17 << 2) | 0;
         if ((i18 | 0) != 0) HEAP32[i18 >> 2] = HEAP32[(HEAP32[i5 + 56 >> 2] | 0) + (i17 << 2) >> 2];
         i17 = i17 + 1 | 0;
        } while ((i17 | 0) != (i16 | 0));
       }
       i17 = HEAP32[i5 + 56 >> 2] | 0;
       if ((i17 | 0) != 0) {
        if ((HEAP8[i5 + 60 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i17 + -4 >> 2] | 0);
         i16 = HEAP32[i5 + 48 >> 2] | 0;
        }
        HEAP32[i5 + 56 >> 2] = 0;
       }
       HEAP8[i5 + 60 >> 0] = 1;
       HEAP32[i5 + 56 >> 2] = i15;
       HEAP32[i5 + 52 >> 2] = i14;
      } while (0);
      i14 = (HEAP32[i5 + 56 >> 2] | 0) + (i16 << 2) | 0;
      if ((i14 | 0) != 0) HEAP32[i14 >> 2] = i13;
      HEAP32[i5 + 48 >> 2] = i16 + 1;
      i18 = HEAP32[i13 + 216 >> 2] | 0;
      i12 = i12 & ((i18 | 0) == 2 | (i18 | 0) == 5);
      i11 = i11 + 1 | 0;
      if ((i11 | 0) >= (i6 | 0)) break L222;
      i14 = HEAP32[i5 + 16 >> 2] | 0;
      i13 = HEAP32[i14 + (i11 << 3) >> 2] | 0;
     }
    } else i12 = 1; while (0);
    if ((i8 | 0) < (i7 | 0)) {
     i14 = HEAP32[i5 + 36 >> 2] | 0;
     i13 = i14 + (i8 << 2) | 0;
     i15 = HEAP32[i13 >> 2] | 0;
     i16 = HEAP32[(HEAP32[i15 + 740 >> 2] | 0) + 208 >> 2] | 0;
     if (!((i16 | 0) > -1)) i16 = HEAP32[(HEAP32[i15 + 744 >> 2] | 0) + 208 >> 2] | 0;
     if ((i16 | 0) == (i9 | 0)) {
      i15 = i8;
      do {
       i15 = i15 + 1 | 0;
       if ((i15 | 0) >= (i7 | 0)) break;
       i16 = HEAP32[i14 + (i15 << 2) >> 2] | 0;
       i10 = HEAP32[(HEAP32[i16 + 740 >> 2] | 0) + 208 >> 2] | 0;
       if (!((i10 | 0) > -1)) i10 = HEAP32[(HEAP32[i16 + 744 >> 2] | 0) + 208 >> 2] | 0;
      } while ((i9 | 0) == (i10 | 0));
      i10 = i15;
      i14 = i15 - i8 | 0;
     } else {
      i14 = 0;
      i13 = 0;
     }
    } else {
     i14 = 0;
     i13 = 0;
    }
    if (!i12) FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 7](i4, HEAP32[i5 + 56 >> 2] | 0, HEAP32[i5 + 48 >> 2] | 0, i13, i14, i9);
    i8 = (i14 | 0) == 0 ? i8 : i10;
    i12 = HEAP32[i5 + 48 >> 2] | 0;
    if ((i12 | 0) < 0) {
     if ((HEAP32[i5 + 52 >> 2] | 0) < 0) {
      i9 = HEAP32[i5 + 56 >> 2] | 0;
      if ((i9 | 0) != 0) {
       if ((HEAP8[i5 + 60 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i9 + -4 >> 2] | 0);
       }
       HEAP32[i5 + 56 >> 2] = 0;
      }
      HEAP8[i5 + 60 >> 0] = 1;
      HEAP32[i5 + 56 >> 2] = 0;
      HEAP32[i5 + 52 >> 2] = 0;
     }
     do {
      i9 = (HEAP32[i5 + 56 >> 2] | 0) + (i12 << 2) | 0;
      if ((i9 | 0) != 0) HEAP32[i9 >> 2] = 0;
      i12 = i12 + 1 | 0;
     } while ((i12 | 0) != 0);
    }
    HEAP32[i5 + 48 >> 2] = 0;
   } while ((i11 | 0) < (i6 | 0));
  }
 } else {
  i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 127](i7) | 0;
  i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 7](i4, HEAP32[i2 + 16 >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0, i17, i18, -1);
 }
 i4 = HEAP32[5022] | 0;
 i18 = (HEAP32[i4 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i4 + 16 >> 2] = i18;
 do if ((i18 | 0) == 0) {
  if ((HEAP32[i4 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i1 | 0, 0) | 0;
   i18 = HEAP32[5008] | 0;
   HEAPF32[i4 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i18 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i4 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i4 + 8 >> 2];
   if ((HEAP32[i4 + 16 >> 2] | 0) != 0) break;
   i4 = HEAP32[5022] | 0;
  }
  HEAP32[5022] = HEAP32[i4 + 20 >> 2];
 } while (0);
 __ZN27InplaceSolverIslandCallback18processConstraintsEv(HEAP32[i2 + 196 >> 2] | 0);
 i18 = HEAP32[i2 + 200 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 127](i18, i3, HEAP32[i2 + 72 >> 2] | 0);
 i2 = HEAP32[5022] | 0;
 i18 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i18;
 if ((i18 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i18 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i18 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, i32 = 0, d33 = 0.0, d34 = 0.0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, i41 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((HEAP8[i1 + 356 >> 0] | 0) == 0) {
  i41 = HEAP8[i1 + 312 >> 0] | 0;
  i41 = i41 << 24 >> 24 != 0;
  STACKTOP = i2;
  return i41 | 0;
 }
 HEAP32[i1 + 336 >> 2] = 0;
 HEAP32[i1 + 340 >> 2] = 0;
 HEAP32[i1 + 344 >> 2] = 0;
 HEAP32[i1 + 348 >> 2] = 0;
 HEAP8[i1 + 352 >> 0] = 0;
 i32 = HEAP8[i1 + 332 >> 0] | 0;
 HEAP8[i1 + 332 >> 0] = i32 & -16;
 HEAP8[i1 + 356 >> 0] = 0;
 switch (HEAP32[i1 >> 2] | 0) {
 case 3:
  {
   HEAP32[i2 + 16 >> 2] = 0;
   HEAP32[i2 + 20 >> 2] = 0;
   HEAP32[i2 + 24 >> 2] = 0;
   HEAP32[i2 + 28 >> 2] = 0;
   __ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(i2 + 16 | 0, i1 + 4 | 0, i1 + 20 | 0, i1 + 36 | 0, i1 + 316 | 0);
   d30 = +HEAPF32[i1 + 336 >> 2];
   d31 = +HEAPF32[i1 + 340 >> 2];
   d40 = +HEAPF32[i1 + 344 >> 2];
   d33 = +HEAPF32[i1 + 84 >> 2] * d30 + +HEAPF32[i1 + 100 >> 2] * d31 + +HEAPF32[i1 + 116 >> 2] * d40;
   d37 = d30 * +HEAPF32[i1 + 88 >> 2] + d31 * +HEAPF32[i1 + 104 >> 2] + d40 * +HEAPF32[i1 + 120 >> 2];
   d39 = d30 * +HEAPF32[i1 + 92 >> 2] + d31 * +HEAPF32[i1 + 108 >> 2] + d40 * +HEAPF32[i1 + 124 >> 2];
   HEAPF32[i1 + 244 >> 2] = d33;
   HEAPF32[i1 + 248 >> 2] = d37;
   HEAPF32[i1 + 252 >> 2] = d39;
   HEAPF32[i1 + 256 >> 2] = 0.0;
   d34 = +HEAPF32[i1 + 164 >> 2] * d30 + +HEAPF32[i1 + 180 >> 2] * d31 + +HEAPF32[i1 + 196 >> 2] * d40;
   d38 = d30 * +HEAPF32[i1 + 168 >> 2] + d31 * +HEAPF32[i1 + 184 >> 2] + d40 * +HEAPF32[i1 + 200 >> 2];
   d40 = d30 * +HEAPF32[i1 + 172 >> 2] + d31 * +HEAPF32[i1 + 188 >> 2] + d40 * +HEAPF32[i1 + 204 >> 2];
   HEAPF32[i1 + 260 >> 2] = d34;
   HEAPF32[i1 + 264 >> 2] = d38;
   HEAPF32[i1 + 268 >> 2] = d40;
   HEAPF32[i1 + 272 >> 2] = 0.0;
   HEAPF32[i1 + 276 >> 2] = d33 - d34;
   HEAPF32[i1 + 280 >> 2] = d37 - d38;
   HEAPF32[i1 + 284 >> 2] = d39 - d40;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i1 + 332 | 0);
   if ((+HEAPF32[i1 + 336 >> 2] >= 0.0 ? +HEAPF32[i1 + 340 >> 2] >= 0.0 : 0) ? +HEAPF32[i1 + 344 >> 2] >= 0.0 : 0) i6 = +HEAPF32[i1 + 348 >> 2] >= 0.0 & 1; else i6 = 0;
   HEAP8[i1 + 312 >> 0] = i6;
   i41 = i6;
   i41 = i41 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i41 | 0;
  }
 case 0:
  {
   HEAP8[i1 + 312 >> 0] = 0;
   i41 = 0;
   i41 = i41 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i41 | 0;
  }
 case 1:
  {
   HEAP32[i1 + 244 >> 2] = HEAP32[i1 + 84 >> 2];
   HEAP32[i1 + 248 >> 2] = HEAP32[i1 + 88 >> 2];
   HEAP32[i1 + 252 >> 2] = HEAP32[i1 + 92 >> 2];
   HEAP32[i1 + 256 >> 2] = HEAP32[i1 + 96 >> 2];
   HEAP32[i1 + 260 >> 2] = HEAP32[i1 + 164 >> 2];
   HEAP32[i1 + 264 >> 2] = HEAP32[i1 + 168 >> 2];
   HEAP32[i1 + 268 >> 2] = HEAP32[i1 + 172 >> 2];
   HEAP32[i1 + 272 >> 2] = HEAP32[i1 + 176 >> 2];
   d39 = +HEAPF32[i1 + 248 >> 2] - +HEAPF32[i1 + 264 >> 2];
   d40 = +HEAPF32[i1 + 252 >> 2] - +HEAPF32[i1 + 268 >> 2];
   HEAPF32[i1 + 276 >> 2] = +HEAPF32[i1 + 244 >> 2] - +HEAPF32[i1 + 260 >> 2];
   HEAPF32[i1 + 280 >> 2] = d39;
   HEAPF32[i1 + 284 >> 2] = d40;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   HEAP32[i1 + 336 >> 2] = 0;
   HEAP32[i1 + 340 >> 2] = 0;
   HEAP32[i1 + 344 >> 2] = 0;
   HEAP32[i1 + 348 >> 2] = 0;
   HEAP8[i1 + 352 >> 0] = 0;
   HEAP8[i1 + 332 >> 0] = i32 & -16;
   HEAPF32[i1 + 336 >> 2] = 1.0;
   HEAPF32[i1 + 340 >> 2] = 0.0;
   HEAPF32[i1 + 344 >> 2] = 0.0;
   HEAPF32[i1 + 348 >> 2] = 0.0;
   HEAP8[i1 + 312 >> 0] = 1;
   i41 = 1;
   i41 = i41 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i41 | 0;
  }
 case 4:
  {
   HEAP32[i2 + 0 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   i6 = i2 + 48 | 0;
   HEAP8[i6 >> 0] = 0;
   HEAP32[i1 + 316 >> 2] = HEAP32[i2 + 0 >> 2];
   HEAP32[i1 + 320 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i1 + 324 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i1 + 328 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP8[i1 + 332 >> 0] = i32 | 15;
   d29 = +HEAPF32[i1 + 20 >> 2];
   d39 = +HEAPF32[i1 + 4 >> 2];
   d25 = +HEAPF32[i1 + 24 >> 2];
   d38 = +HEAPF32[i1 + 8 >> 2];
   d27 = +HEAPF32[i1 + 28 >> 2];
   d37 = +HEAPF32[i1 + 12 >> 2];
   d28 = +HEAPF32[i1 + 36 >> 2];
   d34 = +HEAPF32[i1 + 40 >> 2];
   d31 = +HEAPF32[i1 + 44 >> 2];
   d30 = +HEAPF32[i1 + 52 >> 2];
   d33 = +HEAPF32[i1 + 56 >> 2];
   d26 = +HEAPF32[i1 + 60 >> 2];
   d40 = (d30 - d39) * ((d25 - d38) * (d31 - d37) - (d27 - d37) * (d34 - d38)) + (d33 - d38) * ((d27 - d37) * (d28 - d39) - (d29 - d39) * (d31 - d37)) + ((d29 - d39) * (d34 - d38) - (d25 - d38) * (d28 - d39)) * (d26 - d37);
   if (d40 * d40 < 9.99999905104687e-9) i36 = -1; else i36 = d40 * (((d27 - d37) * (d28 - d39) - (d29 - d39) * (d31 - d37)) * (0.0 - d38) + ((d25 - d38) * (d31 - d37) - (d27 - d37) * (d34 - d38)) * (0.0 - d39) + ((d29 - d39) * (d34 - d38) - (d25 - d38) * (d28 - d39)) * (0.0 - d37)) < 0.0 & 1;
   d40 = (d29 - d39) * ((d34 - d38) * (d26 - d37) - (d31 - d37) * (d33 - d38)) + (d25 - d38) * ((d31 - d37) * (d30 - d39) - (d28 - d39) * (d26 - d37)) + ((d28 - d39) * (d33 - d38) - (d34 - d38) * (d30 - d39)) * (d27 - d37);
   if (d40 * d40 < 9.99999905104687e-9) i35 = -1; else i35 = d40 * (((d31 - d37) * (d30 - d39) - (d28 - d39) * (d26 - d37)) * (0.0 - d38) + ((d34 - d38) * (d26 - d37) - (d31 - d37) * (d33 - d38)) * (0.0 - d39) + ((d28 - d39) * (d33 - d38) - (d34 - d38) * (d30 - d39)) * (0.0 - d37)) < 0.0 & 1;
   d40 = (d28 - d39) * ((d33 - d38) * (d27 - d37) - (d26 - d37) * (d25 - d38)) + (d34 - d38) * ((d26 - d37) * (d29 - d39) - (d30 - d39) * (d27 - d37)) + ((d30 - d39) * (d25 - d38) - (d33 - d38) * (d29 - d39)) * (d31 - d37);
   if (d40 * d40 < 9.99999905104687e-9) i32 = -1; else i32 = d40 * (((d26 - d37) * (d29 - d39) - (d30 - d39) * (d27 - d37)) * (0.0 - d38) + ((d33 - d38) * (d27 - d37) - (d26 - d37) * (d25 - d38)) * (0.0 - d39) + ((d30 - d39) * (d25 - d38) - (d33 - d38) * (d29 - d39)) * (0.0 - d37)) < 0.0 & 1;
   d37 = (d39 - d29) * ((d33 - d25) * (d31 - d27) - (d26 - d27) * (d34 - d25)) + (d38 - d25) * ((d26 - d27) * (d28 - d29) - (d30 - d29) * (d31 - d27)) + ((d30 - d29) * (d34 - d25) - (d33 - d25) * (d28 - d29)) * (d37 - d27);
   if (d37 * d37 < 9.99999905104687e-9) i41 = -1; else i41 = d37 * (((d26 - d27) * (d28 - d29) - (d30 - d29) * (d31 - d27)) * (0.0 - d25) + ((d33 - d25) * (d31 - d27) - (d26 - d27) * (d34 - d25)) * (0.0 - d29) + ((d30 - d29) * (d34 - d25) - (d33 - d25) * (d28 - d29)) * (0.0 - d27)) < 0.0 & 1;
   if ((i35 | i36 | i32 | i41 | 0) < 0) {
    HEAP8[i1 + 352 >> 0] = 1;
    HEAP8[i1 + 312 >> 0] = 0;
    i41 = 0;
    i41 = i41 << 24 >> 24 != 0;
    STACKTOP = i2;
    return i41 | 0;
   }
   i36 = (i36 | 0) != 0;
   i35 = (i35 | 0) == 0;
   i32 = (i32 | 0) == 0;
   i41 = (i41 | 0) == 0;
   if (i35 & (i36 ^ 1) & i32 & i41) {
    HEAP8[i1 + 312 >> 0] = 1;
    HEAP32[i1 + 276 >> 2] = 0;
    HEAP32[i1 + 280 >> 2] = 0;
    HEAP32[i1 + 284 >> 2] = 0;
    HEAP32[i1 + 288 >> 2] = 0;
    i41 = 1;
    i41 = i41 << 24 >> 24 != 0;
    STACKTOP = i2;
    return i41 | 0;
   }
   if (i36 ? (__ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(i2, i1 + 4 | 0, i1 + 20 | 0, i1 + 36 | 0, i2 + 32 | 0), d24 = +HEAPF32[i2 + 32 >> 2], d19 = +HEAPF32[i2 + 36 >> 2], d20 = +HEAPF32[i2 + 40 >> 2], d21 = d24 - +HEAPF32[i2 >> 2], d22 = d19 - +HEAPF32[i2 + 4 >> 2], d23 = d20 - +HEAPF32[i2 + 8 >> 2], d21 * d21 + d22 * d22 + d23 * d23 < 3.4028234663852886e+38) : 0) {
    d40 = +HEAPF32[i2 + 44 >> 2];
    HEAPF32[i1 + 316 >> 2] = d24;
    HEAPF32[i1 + 320 >> 2] = d19;
    HEAPF32[i1 + 324 >> 2] = d20;
    HEAPF32[i1 + 328 >> 2] = d40;
    i36 = HEAP8[i6 >> 0] | 0;
    HEAP8[i1 + 332 >> 0] = i36 & 1 | HEAP8[i1 + 332 >> 0] & -16 | i36 & 2 | i36 & 4;
    d40 = +HEAPF32[i2 + 56 >> 2];
    d19 = +HEAPF32[i2 + 60 >> 2];
    HEAPF32[i1 + 336 >> 2] = +HEAPF32[i2 + 52 >> 2];
    HEAPF32[i1 + 340 >> 2] = d40;
    HEAPF32[i1 + 344 >> 2] = d19;
    HEAPF32[i1 + 348 >> 2] = 0.0;
    d19 = d21 * d21 + d22 * d22 + d23 * d23;
   } else d19 = 3.4028234663852886e+38;
   if (!i35 ? (__ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(i2, i1 + 4 | 0, i1 + 36 | 0, i1 + 52 | 0, i2 + 32 | 0), d14 = +HEAPF32[i2 + 32 >> 2], d17 = +HEAPF32[i2 + 36 >> 2], d13 = +HEAPF32[i2 + 40 >> 2], d18 = d14 - +HEAPF32[i2 >> 2], d15 = d17 - +HEAPF32[i2 + 4 >> 2], d16 = d13 - +HEAPF32[i2 + 8 >> 2], d18 * d18 + d15 * d15 + d16 * d16 < d19) : 0) {
    d40 = +HEAPF32[i2 + 44 >> 2];
    HEAPF32[i1 + 316 >> 2] = d14;
    HEAPF32[i1 + 320 >> 2] = d17;
    HEAPF32[i1 + 324 >> 2] = d13;
    HEAPF32[i1 + 328 >> 2] = d40;
    i36 = HEAP8[i6 >> 0] | 0;
    HEAP8[i1 + 332 >> 0] = i36 << 1 & 4 | (i36 & 1 | HEAP8[i1 + 332 >> 0] & -16) | i36 << 1 & 8;
    d40 = +HEAPF32[i2 + 56 >> 2];
    d19 = +HEAPF32[i2 + 60 >> 2];
    HEAPF32[i1 + 336 >> 2] = +HEAPF32[i2 + 52 >> 2];
    HEAPF32[i1 + 340 >> 2] = 0.0;
    HEAPF32[i1 + 344 >> 2] = d40;
    HEAPF32[i1 + 348 >> 2] = d19;
    d19 = d18 * d18 + d15 * d15 + d16 * d16;
   }
   if (!i32 ? (__ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(i2, i1 + 4 | 0, i1 + 52 | 0, i1 + 20 | 0, i2 + 32 | 0), d7 = +HEAPF32[i2 + 32 >> 2], d8 = +HEAPF32[i2 + 36 >> 2], d9 = +HEAPF32[i2 + 40 >> 2], d10 = d7 - +HEAPF32[i2 >> 2], d11 = d8 - +HEAPF32[i2 + 4 >> 2], d12 = d9 - +HEAPF32[i2 + 8 >> 2], d10 * d10 + d11 * d11 + d12 * d12 < d19) : 0) {
    d40 = +HEAPF32[i2 + 44 >> 2];
    HEAPF32[i1 + 316 >> 2] = d7;
    HEAPF32[i1 + 320 >> 2] = d8;
    HEAPF32[i1 + 324 >> 2] = d9;
    HEAPF32[i1 + 328 >> 2] = d40;
    i36 = HEAP8[i6 >> 0] | 0;
    HEAP8[i1 + 332 >> 0] = (i36 & 255) >>> 1 & 2 | (i36 & 1 | HEAP8[i1 + 332 >> 0] & -16) | i36 << 2 & 8;
    d40 = +HEAPF32[i2 + 60 >> 2];
    d19 = +HEAPF32[i2 + 56 >> 2];
    HEAPF32[i1 + 336 >> 2] = +HEAPF32[i2 + 52 >> 2];
    HEAPF32[i1 + 340 >> 2] = d40;
    HEAPF32[i1 + 344 >> 2] = 0.0;
    HEAPF32[i1 + 348 >> 2] = d19;
    d19 = d10 * d10 + d11 * d11 + d12 * d12;
   }
   if (!i41 ? (__ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(i2, i1 + 20 | 0, i1 + 52 | 0, i1 + 36 | 0, i2 + 32 | 0), d4 = +HEAPF32[i2 + 32 >> 2], d3 = +HEAPF32[i2 + 36 >> 2], d5 = +HEAPF32[i2 + 40 >> 2], d38 = d4 - +HEAPF32[i2 >> 2], d39 = d3 - +HEAPF32[i2 + 4 >> 2], d40 = d5 - +HEAPF32[i2 + 8 >> 2], d38 * d38 + d39 * d39 + d40 * d40 < d19) : 0) {
    d38 = +HEAPF32[i2 + 44 >> 2];
    HEAPF32[i1 + 316 >> 2] = d4;
    HEAPF32[i1 + 320 >> 2] = d3;
    HEAPF32[i1 + 324 >> 2] = d5;
    HEAPF32[i1 + 328 >> 2] = d38;
    i41 = HEAP8[i6 >> 0] | 0;
    HEAP8[i1 + 332 >> 0] = i41 << 1 & 2 | HEAP8[i1 + 332 >> 0] & -16 | i41 & 4 | i41 << 2 & 8;
    d38 = +HEAPF32[i2 + 52 >> 2];
    d39 = +HEAPF32[i2 + 60 >> 2];
    d40 = +HEAPF32[i2 + 56 >> 2];
    HEAPF32[i1 + 336 >> 2] = 0.0;
    HEAPF32[i1 + 340 >> 2] = d38;
    HEAPF32[i1 + 344 >> 2] = d39;
    HEAPF32[i1 + 348 >> 2] = d40;
   }
   d29 = +HEAPF32[i1 + 336 >> 2];
   d30 = +HEAPF32[i1 + 340 >> 2];
   d31 = +HEAPF32[i1 + 344 >> 2];
   d40 = +HEAPF32[i1 + 348 >> 2];
   d33 = +HEAPF32[i1 + 84 >> 2] * d29 + +HEAPF32[i1 + 100 >> 2] * d30 + +HEAPF32[i1 + 116 >> 2] * d31 + +HEAPF32[i1 + 132 >> 2] * d40;
   d37 = d29 * +HEAPF32[i1 + 88 >> 2] + d30 * +HEAPF32[i1 + 104 >> 2] + d31 * +HEAPF32[i1 + 120 >> 2] + d40 * +HEAPF32[i1 + 136 >> 2];
   d39 = d29 * +HEAPF32[i1 + 92 >> 2] + d30 * +HEAPF32[i1 + 108 >> 2] + d31 * +HEAPF32[i1 + 124 >> 2] + d40 * +HEAPF32[i1 + 140 >> 2];
   HEAPF32[i1 + 244 >> 2] = d33;
   HEAPF32[i1 + 248 >> 2] = d37;
   HEAPF32[i1 + 252 >> 2] = d39;
   HEAPF32[i1 + 256 >> 2] = 0.0;
   d34 = +HEAPF32[i1 + 164 >> 2] * d29 + +HEAPF32[i1 + 180 >> 2] * d30 + +HEAPF32[i1 + 196 >> 2] * d31 + +HEAPF32[i1 + 212 >> 2] * d40;
   d38 = d29 * +HEAPF32[i1 + 168 >> 2] + d30 * +HEAPF32[i1 + 184 >> 2] + d31 * +HEAPF32[i1 + 200 >> 2] + d40 * +HEAPF32[i1 + 216 >> 2];
   d40 = d29 * +HEAPF32[i1 + 172 >> 2] + d30 * +HEAPF32[i1 + 188 >> 2] + d31 * +HEAPF32[i1 + 204 >> 2] + d40 * +HEAPF32[i1 + 220 >> 2];
   HEAPF32[i1 + 260 >> 2] = d34;
   HEAPF32[i1 + 264 >> 2] = d38;
   HEAPF32[i1 + 268 >> 2] = d40;
   HEAPF32[i1 + 272 >> 2] = 0.0;
   HEAPF32[i1 + 276 >> 2] = d33 - d34;
   HEAPF32[i1 + 280 >> 2] = d37 - d38;
   HEAPF32[i1 + 284 >> 2] = d39 - d40;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i1 + 332 | 0);
   if ((+HEAPF32[i1 + 336 >> 2] >= 0.0 ? +HEAPF32[i1 + 340 >> 2] >= 0.0 : 0) ? +HEAPF32[i1 + 344 >> 2] >= 0.0 : 0) i6 = +HEAPF32[i1 + 348 >> 2] >= 0.0 & 1; else i6 = 0;
   HEAP8[i1 + 312 >> 0] = i6;
   i41 = i6;
   i41 = i41 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i41 | 0;
  }
 case 2:
  {
   d9 = +HEAPF32[i1 + 4 >> 2];
   d4 = +HEAPF32[i1 + 8 >> 2];
   d5 = +HEAPF32[i1 + 12 >> 2];
   d7 = +HEAPF32[i1 + 20 >> 2] - d9;
   d8 = +HEAPF32[i1 + 24 >> 2] - d4;
   d3 = +HEAPF32[i1 + 28 >> 2] - d5;
   do if ((0.0 - d9) * d7 + (0.0 - d4) * d8 + (0.0 - d5) * d3 > 0.0) if ((0.0 - d9) * d7 + (0.0 - d4) * d8 + (0.0 - d5) * d3 < d7 * d7 + d8 * d8 + d3 * d3) {
    HEAP8[i1 + 332 >> 0] = i32 & -16 | 3;
    d3 = ((0.0 - d9) * d7 + (0.0 - d4) * d8 + (0.0 - d5) * d3) / (d7 * d7 + d8 * d8 + d3 * d3);
    break;
   } else {
    HEAP8[i1 + 332 >> 0] = i32 & -16 | 2;
    d3 = 1.0;
    break;
   } else {
    HEAP8[i1 + 332 >> 0] = i32 & -16 | 1;
    d3 = 0.0;
   } while (0);
   HEAPF32[i1 + 336 >> 2] = 1.0 - d3;
   HEAPF32[i1 + 340 >> 2] = d3;
   HEAPF32[i1 + 344 >> 2] = 0.0;
   HEAPF32[i1 + 348 >> 2] = 0.0;
   d33 = +HEAPF32[i1 + 84 >> 2];
   d37 = +HEAPF32[i1 + 88 >> 2];
   d39 = +HEAPF32[i1 + 92 >> 2];
   d33 = d33 + d3 * (+HEAPF32[i1 + 100 >> 2] - d33);
   d37 = d37 + d3 * (+HEAPF32[i1 + 104 >> 2] - d37);
   d39 = d39 + d3 * (+HEAPF32[i1 + 108 >> 2] - d39);
   HEAPF32[i1 + 244 >> 2] = d33;
   HEAPF32[i1 + 248 >> 2] = d37;
   HEAPF32[i1 + 252 >> 2] = d39;
   HEAPF32[i1 + 256 >> 2] = 0.0;
   d34 = +HEAPF32[i1 + 164 >> 2];
   d38 = +HEAPF32[i1 + 168 >> 2];
   d40 = +HEAPF32[i1 + 172 >> 2];
   d34 = d34 + d3 * (+HEAPF32[i1 + 180 >> 2] - d34);
   d38 = d38 + d3 * (+HEAPF32[i1 + 184 >> 2] - d38);
   d40 = d40 + d3 * (+HEAPF32[i1 + 188 >> 2] - d40);
   HEAPF32[i1 + 260 >> 2] = d34;
   HEAPF32[i1 + 264 >> 2] = d38;
   HEAPF32[i1 + 268 >> 2] = d40;
   HEAPF32[i1 + 272 >> 2] = 0.0;
   HEAPF32[i1 + 276 >> 2] = d33 - d34;
   HEAPF32[i1 + 280 >> 2] = d37 - d38;
   HEAPF32[i1 + 284 >> 2] = d39 - d40;
   HEAPF32[i1 + 288 >> 2] = 0.0;
   __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i1 + 332 | 0);
   if ((+HEAPF32[i1 + 336 >> 2] >= 0.0 ? +HEAPF32[i1 + 340 >> 2] >= 0.0 : 0) ? +HEAPF32[i1 + 344 >> 2] >= 0.0 : 0) i6 = +HEAPF32[i1 + 348 >> 2] >= 0.0 & 1; else i6 = 0;
   HEAP8[i1 + 312 >> 0] = i6;
   i41 = i6;
   i41 = i41 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i41 | 0;
  }
 default:
  {
   HEAP8[i1 + 312 >> 0] = 0;
   i41 = 0;
   i41 = i41 << 24 >> 24 != 0;
   STACKTOP = i2;
   return i41 | 0;
  }
 }
 return 0;
}
function __ZN27btPolyhedralContactClipping19clipFaceAgainstHullERK9btVector3RK18btConvexPolyhedronRK11btTransformR20btAlignedObjectArrayIS0_EffRN36btDiscreteCollisionDetectorInterface6ResultE(i2, i9, i8, i19, d5, d4, i3) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 d5 = +d5;
 d4 = +d4;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, i28 = 0, d29 = 0.0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, i40 = 0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, i45 = 0, i46 = 0, i47 = 0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, i53 = 0, i54 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 HEAP8[i1 + 48 >> 0] = 1;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i6 = HEAP32[i19 + 4 >> 2] | 0;
 if ((i6 | 0) > 0) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i7 = _malloc((i6 << 4 | 3) + 16 | 0) | 0;
  if ((i7 | 0) == 0) i16 = 0; else {
   HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
   i16 = i7 + 19 & -16;
  }
  HEAP8[i1 + 48 >> 0] = 1;
  HEAP32[i1 + 44 >> 2] = i16;
  HEAP32[i1 + 40 >> 2] = i6;
 } else i16 = 0;
 i15 = HEAP32[i9 + 28 >> 2] | 0;
 if ((i15 | 0) > 0) {
  i7 = HEAP32[i9 + 36 >> 2] | 0;
  d29 = +HEAPF32[i8 >> 2];
  d36 = +HEAPF32[i8 + 4 >> 2];
  d37 = +HEAPF32[i8 + 8 >> 2];
  d27 = +HEAPF32[i8 + 16 >> 2];
  d26 = +HEAPF32[i8 + 20 >> 2];
  d25 = +HEAPF32[i8 + 24 >> 2];
  d24 = +HEAPF32[i8 + 32 >> 2];
  d23 = +HEAPF32[i8 + 36 >> 2];
  d22 = +HEAPF32[i8 + 40 >> 2];
  d44 = +HEAPF32[i2 >> 2];
  d43 = +HEAPF32[i2 + 4 >> 2];
  d48 = +HEAPF32[i2 + 8 >> 2];
  i6 = -1;
  d42 = 3.4028234663852886e+38;
  i17 = 0;
  while (1) {
   d41 = +HEAPF32[i7 + (i17 * 36 | 0) + 20 >> 2];
   d39 = +HEAPF32[i7 + (i17 * 36 | 0) + 24 >> 2];
   d38 = +HEAPF32[i7 + (i17 * 36 | 0) + 28 >> 2];
   i14 = (d41 * d29 + d39 * d36 + d38 * d37) * d44 + (d41 * d27 + d39 * d26 + d38 * d25) * d43 + (d41 * d24 + d39 * d23 + d38 * d22) * d48 < d42;
   i6 = i14 ? i17 : i6;
   i17 = i17 + 1 | 0;
   if ((i17 | 0) >= (i15 | 0)) break; else d42 = i14 ? (d41 * d29 + d39 * d36 + d38 * d37) * d44 + (d41 * d27 + d39 * d26 + d38 * d25) * d43 + (d41 * d24 + d39 * d23 + d38 * d22) * d48 : d42;
  }
  if ((i6 | 0) >= 0) {
   i17 = HEAP32[i7 + (i6 * 36 | 0) + 4 >> 2] | 0;
   if ((i17 | 0) > 0) {
    i18 = i7 + (i6 * 36 | 0) + 12 | 0;
    i14 = i7 + (i6 * 36 | 0) + 20 | 0;
    i16 = i7 + (i6 * 36 | 0) + 24 | 0;
    i15 = i7 + (i6 * 36 | 0) + 28 | 0;
    d38 = d27;
    d39 = d26;
    d41 = d25;
    d42 = d24;
    d43 = d23;
    d44 = d22;
    i21 = i1 + 32 | 0;
    i20 = 0;
    while (1) {
     i28 = HEAP32[i18 >> 2] | 0;
     i47 = HEAP32[i28 + (i20 << 2) >> 2] | 0;
     i35 = HEAP32[i9 + 16 >> 2] | 0;
     i20 = i20 + 1 | 0;
     i28 = HEAP32[i28 + (((i20 | 0) == (i17 | 0) ? 0 : i20) << 2) >> 2] | 0;
     d50 = +HEAPF32[i35 + (i47 << 4) >> 2];
     d51 = d50 - +HEAPF32[i35 + (i28 << 4) >> 2];
     d49 = +HEAPF32[i35 + (i47 << 4) + 4 >> 2];
     d52 = d49 - +HEAPF32[i35 + (i28 << 4) + 4 >> 2];
     d48 = +HEAPF32[i35 + (i47 << 4) + 8 >> 2];
     d25 = d48 - +HEAPF32[i35 + (i28 << 4) + 8 >> 2];
     d24 = d51 * d29 + d52 * d36 + d25 * d37;
     d23 = d51 * d38 + d52 * d39 + d25 * d41;
     d25 = d51 * d42 + d52 * d43 + d25 * d44;
     d52 = +HEAPF32[i14 >> 2];
     d51 = +HEAPF32[i16 >> 2];
     d22 = +HEAPF32[i15 >> 2];
     d27 = d29 * d52 + d36 * d51 + d37 * d22;
     d26 = d38 * d52 + d39 * d51 + d41 * d22;
     d22 = d42 * d52 + d43 * d51 + d44 * d22;
     d29 = (d50 * d29 + d49 * d36 + d48 * d37 + +HEAPF32[i8 + 48 >> 2]) * -(d23 * d22 - d25 * d26) + (d50 * d38 + d49 * d39 + d48 * d41 + +HEAPF32[i8 + 52 >> 2]) * -(d25 * d27 - d24 * d22) + (d50 * d42 + d49 * d43 + d48 * d44 + +HEAPF32[i8 + 56 >> 2]) * -(d24 * d26 - d23 * d27);
     i28 = i19 + 4 | 0;
     i35 = HEAP32[i28 >> 2] | 0;
     if ((i35 | 0) >= 2) {
      i34 = i19 + 12 | 0;
      i45 = HEAP32[i34 >> 2] | 0;
      d51 = +HEAPF32[i45 + (i35 + -1 << 4) >> 2];
      d52 = +HEAPF32[i45 + (i35 + -1 << 4) + 4 >> 2];
      d48 = +HEAPF32[i45 + (i35 + -1 << 4) + 8 >> 2];
      i32 = i21 + 4 | 0;
      i30 = i21 + 8 | 0;
      i33 = i21 + 12 | 0;
      i31 = i21 + 16 | 0;
      d42 = d51;
      d43 = d52;
      d44 = d48;
      d48 = d51 * -(d23 * d22 - d25 * d26) + d52 * -(d25 * d27 - d24 * d22) + d48 * -(d24 * d26 - d23 * d27) - d29;
      i40 = 0;
      while (1) {
       d37 = +HEAPF32[i45 + (i40 << 4) >> 2];
       d38 = +HEAPF32[i45 + (i40 << 4) + 4 >> 2];
       d39 = +HEAPF32[i45 + (i40 << 4) + 8 >> 2];
       d41 = +HEAPF32[i45 + (i40 << 4) + 12 >> 2];
       d36 = d37 * -(d23 * d22 - d25 * d26) + d38 * -(d25 * d27 - d24 * d22) + d39 * -(d24 * d26 - d23 * d27) - d29;
       do if (d48 < 0.0) if (d36 < 0.0) {
        i46 = HEAP32[i32 >> 2] | 0;
        if ((i46 | 0) == (HEAP32[i30 >> 2] | 0) ? (i13 = (i46 | 0) == 0 ? 1 : i46 << 1, (i46 | 0) < (i13 | 0)) : 0) {
         if ((i13 | 0) == 0) i45 = 0; else {
          HEAP32[5004] = (HEAP32[5004] | 0) + 1;
          i45 = _malloc((i13 << 4 | 3) + 16 | 0) | 0;
          if ((i45 | 0) == 0) i45 = 0; else {
           HEAP32[(i45 + 19 & -16) + -4 >> 2] = i45;
           i45 = i45 + 19 & -16;
          }
          i46 = HEAP32[i32 >> 2] | 0;
         }
         if ((i46 | 0) > 0) {
          i47 = 0;
          do {
           i53 = i45 + (i47 << 4) | 0;
           i54 = (HEAP32[i33 >> 2] | 0) + (i47 << 4) | 0;
           HEAP32[i53 + 0 >> 2] = HEAP32[i54 + 0 >> 2];
           HEAP32[i53 + 4 >> 2] = HEAP32[i54 + 4 >> 2];
           HEAP32[i53 + 8 >> 2] = HEAP32[i54 + 8 >> 2];
           HEAP32[i53 + 12 >> 2] = HEAP32[i54 + 12 >> 2];
           i47 = i47 + 1 | 0;
          } while ((i47 | 0) != (i46 | 0));
         }
         i46 = HEAP32[i33 >> 2] | 0;
         if ((i46 | 0) != 0) {
          if ((HEAP8[i31 >> 0] | 0) != 0) {
           HEAP32[5006] = (HEAP32[5006] | 0) + 1;
           _free(HEAP32[i46 + -4 >> 2] | 0);
          }
          HEAP32[i33 >> 2] = 0;
         }
         HEAP8[i31 >> 0] = 1;
         HEAP32[i33 >> 2] = i45;
         HEAP32[i30 >> 2] = i13;
         i46 = HEAP32[i32 >> 2] | 0;
        }
        i54 = HEAP32[i33 >> 2] | 0;
        HEAPF32[i54 + (i46 << 4) >> 2] = d37;
        HEAPF32[i54 + (i46 << 4) + 4 >> 2] = d38;
        HEAPF32[i54 + (i46 << 4) + 8 >> 2] = d39;
        HEAPF32[i54 + (i46 << 4) + 12 >> 2] = d41;
        HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
        break;
       } else {
        d52 = d48 / (d48 - d36);
        d41 = d42 + (d37 - d42) * d52;
        d42 = d43 + (d38 - d43) * d52;
        d43 = d44 + (d39 - d44) * d52;
        i47 = HEAP32[i32 >> 2] | 0;
        if ((i47 | 0) == (HEAP32[i30 >> 2] | 0) ? (i11 = (i47 | 0) == 0 ? 1 : i47 << 1, (i47 | 0) < (i11 | 0)) : 0) {
         if ((i11 | 0) == 0) i45 = 0; else {
          HEAP32[5004] = (HEAP32[5004] | 0) + 1;
          i45 = _malloc((i11 << 4 | 3) + 16 | 0) | 0;
          if ((i45 | 0) == 0) i45 = 0; else {
           HEAP32[(i45 + 19 & -16) + -4 >> 2] = i45;
           i45 = i45 + 19 & -16;
          }
          i47 = HEAP32[i32 >> 2] | 0;
         }
         if ((i47 | 0) > 0) {
          i46 = 0;
          do {
           i54 = i45 + (i46 << 4) | 0;
           i53 = (HEAP32[i33 >> 2] | 0) + (i46 << 4) | 0;
           HEAP32[i54 + 0 >> 2] = HEAP32[i53 + 0 >> 2];
           HEAP32[i54 + 4 >> 2] = HEAP32[i53 + 4 >> 2];
           HEAP32[i54 + 8 >> 2] = HEAP32[i53 + 8 >> 2];
           HEAP32[i54 + 12 >> 2] = HEAP32[i53 + 12 >> 2];
           i46 = i46 + 1 | 0;
          } while ((i46 | 0) != (i47 | 0));
         }
         i46 = HEAP32[i33 >> 2] | 0;
         if ((i46 | 0) != 0) {
          if ((HEAP8[i31 >> 0] | 0) != 0) {
           HEAP32[5006] = (HEAP32[5006] | 0) + 1;
           _free(HEAP32[i46 + -4 >> 2] | 0);
          }
          HEAP32[i33 >> 2] = 0;
         }
         HEAP8[i31 >> 0] = 1;
         HEAP32[i33 >> 2] = i45;
         HEAP32[i30 >> 2] = i11;
         i47 = HEAP32[i32 >> 2] | 0;
        }
        i54 = HEAP32[i33 >> 2] | 0;
        HEAPF32[i54 + (i47 << 4) >> 2] = d41;
        HEAPF32[i54 + (i47 << 4) + 4 >> 2] = d42;
        HEAPF32[i54 + (i47 << 4) + 8 >> 2] = d43;
        HEAPF32[i54 + (i47 << 4) + 12 >> 2] = 0.0;
        HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
        break;
       } else if (d36 < 0.0) {
        d52 = d48 / (d48 - d36);
        d42 = d42 + (d37 - d42) * d52;
        d43 = d43 + (d38 - d43) * d52;
        d44 = d44 + (d39 - d44) * d52;
        i46 = HEAP32[i32 >> 2] | 0;
        if ((i46 | 0) == (HEAP32[i30 >> 2] | 0) ? (i10 = (i46 | 0) == 0 ? 1 : i46 << 1, (i46 | 0) < (i10 | 0)) : 0) {
         if ((i10 | 0) == 0) i45 = 0; else {
          HEAP32[5004] = (HEAP32[5004] | 0) + 1;
          i45 = _malloc((i10 << 4 | 3) + 16 | 0) | 0;
          if ((i45 | 0) == 0) i45 = 0; else {
           HEAP32[(i45 + 19 & -16) + -4 >> 2] = i45;
           i45 = i45 + 19 & -16;
          }
          i46 = HEAP32[i32 >> 2] | 0;
         }
         if ((i46 | 0) > 0) {
          i47 = 0;
          do {
           i54 = i45 + (i47 << 4) | 0;
           i53 = (HEAP32[i33 >> 2] | 0) + (i47 << 4) | 0;
           HEAP32[i54 + 0 >> 2] = HEAP32[i53 + 0 >> 2];
           HEAP32[i54 + 4 >> 2] = HEAP32[i53 + 4 >> 2];
           HEAP32[i54 + 8 >> 2] = HEAP32[i53 + 8 >> 2];
           HEAP32[i54 + 12 >> 2] = HEAP32[i53 + 12 >> 2];
           i47 = i47 + 1 | 0;
          } while ((i47 | 0) != (i46 | 0));
         }
         i46 = HEAP32[i33 >> 2] | 0;
         if ((i46 | 0) != 0) {
          if ((HEAP8[i31 >> 0] | 0) != 0) {
           HEAP32[5006] = (HEAP32[5006] | 0) + 1;
           _free(HEAP32[i46 + -4 >> 2] | 0);
          }
          HEAP32[i33 >> 2] = 0;
         }
         HEAP8[i31 >> 0] = 1;
         HEAP32[i33 >> 2] = i45;
         HEAP32[i30 >> 2] = i10;
         i46 = HEAP32[i32 >> 2] | 0;
        }
        i54 = HEAP32[i33 >> 2] | 0;
        HEAPF32[i54 + (i46 << 4) >> 2] = d42;
        HEAPF32[i54 + (i46 << 4) + 4 >> 2] = d43;
        HEAPF32[i54 + (i46 << 4) + 8 >> 2] = d44;
        HEAPF32[i54 + (i46 << 4) + 12 >> 2] = 0.0;
        i46 = (HEAP32[i32 >> 2] | 0) + 1 | 0;
        HEAP32[i32 >> 2] = i46;
        if ((i46 | 0) == (HEAP32[i30 >> 2] | 0) ? (i12 = (i46 | 0) == 0 ? 1 : i46 << 1, (i46 | 0) < (i12 | 0)) : 0) {
         if ((i12 | 0) == 0) i45 = 0; else {
          HEAP32[5004] = (HEAP32[5004] | 0) + 1;
          i45 = _malloc((i12 << 4 | 3) + 16 | 0) | 0;
          if ((i45 | 0) == 0) i45 = 0; else {
           HEAP32[(i45 + 19 & -16) + -4 >> 2] = i45;
           i45 = i45 + 19 & -16;
          }
          i46 = HEAP32[i32 >> 2] | 0;
         }
         if ((i46 | 0) > 0) {
          i47 = 0;
          do {
           i54 = i45 + (i47 << 4) | 0;
           i53 = (HEAP32[i33 >> 2] | 0) + (i47 << 4) | 0;
           HEAP32[i54 + 0 >> 2] = HEAP32[i53 + 0 >> 2];
           HEAP32[i54 + 4 >> 2] = HEAP32[i53 + 4 >> 2];
           HEAP32[i54 + 8 >> 2] = HEAP32[i53 + 8 >> 2];
           HEAP32[i54 + 12 >> 2] = HEAP32[i53 + 12 >> 2];
           i47 = i47 + 1 | 0;
          } while ((i47 | 0) != (i46 | 0));
         }
         i46 = HEAP32[i33 >> 2] | 0;
         if ((i46 | 0) != 0) {
          if ((HEAP8[i31 >> 0] | 0) != 0) {
           HEAP32[5006] = (HEAP32[5006] | 0) + 1;
           _free(HEAP32[i46 + -4 >> 2] | 0);
          }
          HEAP32[i33 >> 2] = 0;
         }
         HEAP8[i31 >> 0] = 1;
         HEAP32[i33 >> 2] = i45;
         HEAP32[i30 >> 2] = i12;
         i46 = HEAP32[i32 >> 2] | 0;
        }
        i54 = HEAP32[i33 >> 2] | 0;
        HEAPF32[i54 + (i46 << 4) >> 2] = d37;
        HEAPF32[i54 + (i46 << 4) + 4 >> 2] = d38;
        HEAPF32[i54 + (i46 << 4) + 8 >> 2] = d39;
        HEAPF32[i54 + (i46 << 4) + 12 >> 2] = d41;
        HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
       } while (0);
       i40 = i40 + 1 | 0;
       if ((i40 | 0) == (i35 | 0)) break;
       i45 = HEAP32[i34 >> 2] | 0;
       d42 = d37;
       d43 = d38;
       d44 = d39;
       d48 = d36;
      }
      i35 = HEAP32[i28 >> 2] | 0;
     }
     if ((i35 | 0) < 0) {
      i33 = i19 + 8 | 0;
      i30 = i19 + 12 | 0;
      if ((HEAP32[i33 >> 2] | 0) < 0) {
       i31 = HEAP32[i30 >> 2] | 0;
       i32 = i19 + 16 | 0;
       if ((i31 | 0) != 0) {
        if ((HEAP8[i32 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i31 + -4 >> 2] | 0);
        }
        HEAP32[i30 >> 2] = 0;
       }
       HEAP8[i32 >> 0] = 1;
       HEAP32[i30 >> 2] = 0;
       HEAP32[i33 >> 2] = 0;
      }
      do {
       i54 = (HEAP32[i30 >> 2] | 0) + (i35 << 4) | 0;
       HEAP32[i54 + 0 >> 2] = HEAP32[i1 + 16 >> 2];
       HEAP32[i54 + 4 >> 2] = HEAP32[i1 + 20 >> 2];
       HEAP32[i54 + 8 >> 2] = HEAP32[i1 + 24 >> 2];
       HEAP32[i54 + 12 >> 2] = HEAP32[i1 + 28 >> 2];
       i35 = i35 + 1 | 0;
      } while ((i35 | 0) != 0);
     }
     HEAP32[i28 >> 2] = 0;
     d29 = +HEAPF32[i8 >> 2];
     d36 = +HEAPF32[i8 + 4 >> 2];
     d37 = +HEAPF32[i8 + 8 >> 2];
     d27 = +HEAPF32[i8 + 16 >> 2];
     d26 = +HEAPF32[i8 + 20 >> 2];
     d25 = +HEAPF32[i8 + 24 >> 2];
     d24 = +HEAPF32[i8 + 32 >> 2];
     d23 = +HEAPF32[i8 + 36 >> 2];
     d22 = +HEAPF32[i8 + 40 >> 2];
     if ((i20 | 0) >= (i17 | 0)) {
      i19 = i21;
      i10 = i8 + 48 | 0;
      i9 = i8 + 52 | 0;
      i8 = i8 + 56 | 0;
      break;
     } else {
      i54 = i21;
      d38 = d27;
      d39 = d26;
      d41 = d25;
      d42 = d24;
      d43 = d23;
      d44 = d22;
      i21 = i19;
      i19 = i54;
     }
    }
   } else {
    i16 = i7 + (i6 * 36 | 0) + 24 | 0;
    i15 = i7 + (i6 * 36 | 0) + 28 | 0;
    i10 = i8 + 48 | 0;
    i9 = i8 + 52 | 0;
    i8 = i8 + 56 | 0;
    i14 = i7 + (i6 * 36 | 0) + 20 | 0;
   }
   d50 = +HEAPF32[i14 >> 2];
   d51 = +HEAPF32[i16 >> 2];
   d52 = +HEAPF32[i15 >> 2];
   d29 = d50 * d29 + d51 * d36 + d52 * d37;
   d25 = d50 * d27 + d51 * d26 + d52 * d25;
   d22 = d50 * d24 + d51 * d23 + d52 * d22;
   d23 = +HEAPF32[i7 + (i6 * 36 | 0) + 32 >> 2] - (d29 * +HEAPF32[i10 >> 2] + d25 * +HEAPF32[i9 >> 2] + d22 * +HEAPF32[i8 >> 2]);
   i6 = i19 + 4 | 0;
   i9 = HEAP32[i6 >> 2] | 0;
   if ((i9 | 0) > 0) {
    i7 = i19 + 12 | 0;
    i8 = 0;
    do {
     i54 = HEAP32[i7 >> 2] | 0;
     i10 = i54 + (i8 << 4) | 0;
     d24 = d23 + (d29 * +HEAPF32[i10 >> 2] + d25 * +HEAPF32[i54 + (i8 << 4) + 4 >> 2] + d22 * +HEAPF32[i54 + (i8 << 4) + 8 >> 2]);
     d24 = !(d24 <= d5) ? d24 : d5;
     if (d24 <= d4) {
      HEAP32[i1 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
      HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
      HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
      HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
      FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 15](i3, i2, i1, d24);
      i9 = HEAP32[i6 >> 2] | 0;
     }
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) < (i9 | 0));
   }
   i16 = HEAP32[i1 + 44 >> 2] | 0;
  }
 }
 if ((i16 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP8[i1 + 48 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i16 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 44 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function __ZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDraw(i4, i6, i10, i5, i9, i8, i3, i2, i1, i7) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i11 = 0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 4256 | 0;
 if (((HEAP32[i10 + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2) i14 = ((HEAP32[i5 + 4 >> 2] | 0) + -17 | 0) >>> 0 < 2; else i14 = 0;
 i11 = 0;
 do {
  __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv();
  d18 = +HEAPF32[13568 + (i11 << 4) >> 2];
  d19 = +HEAPF32[13572 + (i11 << 4) >> 2];
  d20 = +HEAPF32[13576 + (i11 << 4) >> 2];
  d22 = +HEAPF32[i9 + 4 >> 2] * -d18 + +HEAPF32[i9 + 20 >> 2] * -d19 + +HEAPF32[i9 + 36 >> 2] * -d20;
  d21 = +HEAPF32[i9 + 8 >> 2] * -d18 + +HEAPF32[i9 + 24 >> 2] * -d19 + +HEAPF32[i9 + 40 >> 2] * -d20;
  HEAPF32[i4 + 1280 + (i11 << 4) >> 2] = +HEAPF32[i9 >> 2] * -d18 + +HEAPF32[i9 + 16 >> 2] * -d19 + +HEAPF32[i9 + 32 >> 2] * -d20;
  HEAPF32[i4 + 1280 + (i11 << 4) + 4 >> 2] = d22;
  HEAPF32[i4 + 1280 + (i11 << 4) + 8 >> 2] = d21;
  HEAPF32[i4 + 1280 + (i11 << 4) + 12 >> 2] = 0.0;
  d21 = d18 * +HEAPF32[i8 + 4 >> 2] + d19 * +HEAPF32[i8 + 20 >> 2] + d20 * +HEAPF32[i8 + 36 >> 2];
  d22 = d18 * +HEAPF32[i8 + 8 >> 2] + d19 * +HEAPF32[i8 + 24 >> 2] + d20 * +HEAPF32[i8 + 40 >> 2];
  HEAPF32[i4 + 288 + (i11 << 4) >> 2] = d18 * +HEAPF32[i8 >> 2] + d19 * +HEAPF32[i8 + 16 >> 2] + d20 * +HEAPF32[i8 + 32 >> 2];
  HEAPF32[i4 + 288 + (i11 << 4) + 4 >> 2] = d21;
  HEAPF32[i4 + 288 + (i11 << 4) + 8 >> 2] = d22;
  HEAPF32[i4 + 288 + (i11 << 4) + 12 >> 2] = 0.0;
  i11 = i11 + 1 | 0;
 } while ((i11 | 0) != 42);
 i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 84 >> 2] & 127](i10) | 0;
 if ((i23 | 0) > 0) {
  i24 = 0;
  i11 = 42;
  while (1) {
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i10 >> 2] | 0) + 88 >> 2] & 127](i10, i24, i4 + 272 | 0);
   d21 = +HEAPF32[i4 + 272 >> 2];
   d22 = +HEAPF32[i4 + 276 >> 2];
   d20 = +HEAPF32[i4 + 280 >> 2];
   d19 = d21 * +HEAPF32[i9 + 16 >> 2] + d22 * +HEAPF32[i9 + 20 >> 2] + d20 * +HEAPF32[i9 + 24 >> 2];
   d18 = d21 * +HEAPF32[i9 + 32 >> 2] + d22 * +HEAPF32[i9 + 36 >> 2] + d20 * +HEAPF32[i9 + 40 >> 2];
   HEAPF32[i4 + 272 >> 2] = +HEAPF32[i9 >> 2] * d21 + +HEAPF32[i9 + 4 >> 2] * d22 + +HEAPF32[i9 + 8 >> 2] * d20;
   HEAPF32[i4 + 276 >> 2] = d19;
   HEAPF32[i4 + 280 >> 2] = d18;
   HEAPF32[i4 + 284 >> 2] = 0.0;
   __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv();
   i25 = 13568 + (i11 << 4) | 0;
   HEAP32[i25 + 0 >> 2] = HEAP32[i4 + 272 >> 2];
   HEAP32[i25 + 4 >> 2] = HEAP32[i4 + 276 >> 2];
   HEAP32[i25 + 8 >> 2] = HEAP32[i4 + 280 >> 2];
   HEAP32[i25 + 12 >> 2] = HEAP32[i4 + 284 >> 2];
   d18 = +HEAPF32[i4 + 272 >> 2];
   d19 = +HEAPF32[i4 + 276 >> 2];
   d20 = +HEAPF32[i4 + 280 >> 2];
   d22 = +HEAPF32[i9 + 4 >> 2] * -d18 + +HEAPF32[i9 + 20 >> 2] * -d19 + +HEAPF32[i9 + 36 >> 2] * -d20;
   d21 = +HEAPF32[i9 + 8 >> 2] * -d18 + +HEAPF32[i9 + 24 >> 2] * -d19 + +HEAPF32[i9 + 40 >> 2] * -d20;
   HEAPF32[i4 + 1280 + (i11 << 4) >> 2] = +HEAPF32[i9 >> 2] * -d18 + +HEAPF32[i9 + 16 >> 2] * -d19 + +HEAPF32[i9 + 32 >> 2] * -d20;
   HEAPF32[i4 + 1280 + (i11 << 4) + 4 >> 2] = d22;
   HEAPF32[i4 + 1280 + (i11 << 4) + 8 >> 2] = d21;
   HEAPF32[i4 + 1280 + (i11 << 4) + 12 >> 2] = 0.0;
   d21 = d18 * +HEAPF32[i8 + 4 >> 2] + d19 * +HEAPF32[i8 + 20 >> 2] + d20 * +HEAPF32[i8 + 36 >> 2];
   d22 = d18 * +HEAPF32[i8 + 8 >> 2] + d19 * +HEAPF32[i8 + 24 >> 2] + d20 * +HEAPF32[i8 + 40 >> 2];
   HEAPF32[i4 + 288 + (i11 << 4) >> 2] = +HEAPF32[i8 >> 2] * d18 + +HEAPF32[i8 + 16 >> 2] * d19 + +HEAPF32[i8 + 32 >> 2] * d20;
   HEAPF32[i4 + 288 + (i11 << 4) + 4 >> 2] = d21;
   HEAPF32[i4 + 288 + (i11 << 4) + 8 >> 2] = d22;
   HEAPF32[i4 + 288 + (i11 << 4) + 12 >> 2] = 0.0;
   i24 = i24 + 1 | 0;
   if ((i24 | 0) == (i23 | 0)) break; else i11 = i11 + 1 | 0;
  }
  i11 = i23 + 42 | 0;
 } else i11 = 42;
 i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2] & 127](i5) | 0;
 if ((i25 | 0) > 0) {
  i24 = 0;
  i23 = i11;
  while (1) {
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i5 >> 2] | 0) + 88 >> 2] & 127](i5, i24, i4 + 256 | 0);
   d21 = +HEAPF32[i4 + 256 >> 2];
   d22 = +HEAPF32[i4 + 260 >> 2];
   d20 = +HEAPF32[i4 + 264 >> 2];
   d19 = d21 * +HEAPF32[i8 + 16 >> 2] + d22 * +HEAPF32[i8 + 20 >> 2] + d20 * +HEAPF32[i8 + 24 >> 2];
   d18 = d21 * +HEAPF32[i8 + 32 >> 2] + d22 * +HEAPF32[i8 + 36 >> 2] + d20 * +HEAPF32[i8 + 40 >> 2];
   HEAPF32[i4 + 256 >> 2] = +HEAPF32[i8 >> 2] * d21 + +HEAPF32[i8 + 4 >> 2] * d22 + +HEAPF32[i8 + 8 >> 2] * d20;
   HEAPF32[i4 + 260 >> 2] = d19;
   HEAPF32[i4 + 264 >> 2] = d18;
   HEAPF32[i4 + 268 >> 2] = 0.0;
   __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv();
   i26 = 13568 + (i23 << 4) | 0;
   HEAP32[i26 + 0 >> 2] = HEAP32[i4 + 256 >> 2];
   HEAP32[i26 + 4 >> 2] = HEAP32[i4 + 260 >> 2];
   HEAP32[i26 + 8 >> 2] = HEAP32[i4 + 264 >> 2];
   HEAP32[i26 + 12 >> 2] = HEAP32[i4 + 268 >> 2];
   d18 = +HEAPF32[i4 + 256 >> 2];
   d19 = +HEAPF32[i4 + 260 >> 2];
   d20 = +HEAPF32[i4 + 264 >> 2];
   d22 = +HEAPF32[i9 + 4 >> 2] * -d18 + +HEAPF32[i9 + 20 >> 2] * -d19 + +HEAPF32[i9 + 36 >> 2] * -d20;
   d21 = +HEAPF32[i9 + 8 >> 2] * -d18 + +HEAPF32[i9 + 24 >> 2] * -d19 + +HEAPF32[i9 + 40 >> 2] * -d20;
   HEAPF32[i4 + 1280 + (i23 << 4) >> 2] = +HEAPF32[i9 >> 2] * -d18 + +HEAPF32[i9 + 16 >> 2] * -d19 + +HEAPF32[i9 + 32 >> 2] * -d20;
   HEAPF32[i4 + 1280 + (i23 << 4) + 4 >> 2] = d22;
   HEAPF32[i4 + 1280 + (i23 << 4) + 8 >> 2] = d21;
   HEAPF32[i4 + 1280 + (i23 << 4) + 12 >> 2] = 0.0;
   d21 = d18 * +HEAPF32[i8 + 4 >> 2] + d19 * +HEAPF32[i8 + 20 >> 2] + d20 * +HEAPF32[i8 + 36 >> 2];
   d22 = d18 * +HEAPF32[i8 + 8 >> 2] + d19 * +HEAPF32[i8 + 24 >> 2] + d20 * +HEAPF32[i8 + 40 >> 2];
   HEAPF32[i4 + 288 + (i23 << 4) >> 2] = +HEAPF32[i8 >> 2] * d18 + +HEAPF32[i8 + 16 >> 2] * d19 + +HEAPF32[i8 + 32 >> 2] * d20;
   HEAPF32[i4 + 288 + (i23 << 4) + 4 >> 2] = d21;
   HEAPF32[i4 + 288 + (i23 << 4) + 8 >> 2] = d22;
   HEAPF32[i4 + 288 + (i23 << 4) + 12 >> 2] = 0.0;
   i24 = i24 + 1 | 0;
   if ((i24 | 0) == (i25 | 0)) break; else i23 = i23 + 1 | 0;
  }
  i11 = i25 + i11 | 0;
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 76 >> 2] & 127](i10, i4 + 1280 | 0, i4 + 3264 | 0, i11);
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] & 127](i5, i4 + 288 | 0, i4 + 2272 | 0, i11);
 if ((i11 | 0) > 0) if (i14) {
  d18 = 0.0;
  d19 = 0.0;
  d20 = 0.0;
  i14 = 0;
  d15 = 999999984306749400.0;
  while (1) {
   __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv();
   d16 = +HEAPF32[13568 + (i14 << 4) >> 2];
   d17 = +HEAPF32[13572 + (i14 << 4) >> 2];
   d12 = +HEAPF32[13580 + (i14 << 4) >> 2];
   if (d16 * d16 + d17 * d17 + 0.0 > .01 ? (d21 = +HEAPF32[i4 + 3264 + (i14 << 4) >> 2], d22 = +HEAPF32[i4 + 3264 + (i14 << 4) + 4 >> 2], d13 = +HEAPF32[i4 + 3264 + (i14 << 4) + 8 >> 2], d29 = +HEAPF32[i4 + 2272 + (i14 << 4) >> 2], d28 = +HEAPF32[i4 + 2272 + (i14 << 4) + 4 >> 2], d27 = +HEAPF32[i4 + 2272 + (i14 << 4) + 8 >> 2], d13 = d16 * (d29 * +HEAPF32[i8 >> 2] + d28 * +HEAPF32[i8 + 4 >> 2] + d27 * +HEAPF32[i8 + 8 >> 2] + +HEAPF32[i8 + 48 >> 2] - (d21 * +HEAPF32[i9 >> 2] + d22 * +HEAPF32[i9 + 4 >> 2] + d13 * +HEAPF32[i9 + 8 >> 2] + +HEAPF32[i9 + 48 >> 2])) + d17 * (d29 * +HEAPF32[i8 + 16 >> 2] + d28 * +HEAPF32[i8 + 20 >> 2] + d27 * +HEAPF32[i8 + 24 >> 2] + +HEAPF32[i8 + 52 >> 2] - (d21 * +HEAPF32[i9 + 16 >> 2] + d22 * +HEAPF32[i9 + 20 >> 2] + d13 * +HEAPF32[i9 + 24 >> 2] + +HEAPF32[i9 + 52 >> 2])) + 0.0, d13 < d15) : 0) d15 = d13; else {
    d12 = d20;
    d17 = d19;
    d16 = d18;
   }
   i14 = i14 + 1 | 0;
   if ((i14 | 0) == (i11 | 0)) {
    d13 = 0.0;
    break;
   } else {
    d18 = d16;
    d19 = d17;
    d20 = d12;
   }
  }
 } else {
  d16 = 0.0;
  d20 = 0.0;
  d21 = 0.0;
  d22 = 0.0;
  i14 = 0;
  d15 = 999999984306749400.0;
  while (1) {
   __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv();
   d18 = +HEAPF32[13568 + (i14 << 4) >> 2];
   d17 = +HEAPF32[13572 + (i14 << 4) >> 2];
   d13 = +HEAPF32[13576 + (i14 << 4) >> 2];
   d19 = +HEAPF32[13580 + (i14 << 4) >> 2];
   if (d18 * d18 + d17 * d17 + d13 * d13 > .01 ? (d28 = +HEAPF32[i4 + 3264 + (i14 << 4) >> 2], d29 = +HEAPF32[i4 + 3264 + (i14 << 4) + 4 >> 2], d12 = +HEAPF32[i4 + 3264 + (i14 << 4) + 8 >> 2], d31 = +HEAPF32[i4 + 2272 + (i14 << 4) >> 2], d30 = +HEAPF32[i4 + 2272 + (i14 << 4) + 4 >> 2], d27 = +HEAPF32[i4 + 2272 + (i14 << 4) + 8 >> 2], d12 = d18 * (d31 * +HEAPF32[i8 >> 2] + d30 * +HEAPF32[i8 + 4 >> 2] + d27 * +HEAPF32[i8 + 8 >> 2] + +HEAPF32[i8 + 48 >> 2] - (d28 * +HEAPF32[i9 >> 2] + d29 * +HEAPF32[i9 + 4 >> 2] + d12 * +HEAPF32[i9 + 8 >> 2] + +HEAPF32[i9 + 48 >> 2])) + d17 * (d31 * +HEAPF32[i8 + 16 >> 2] + d30 * +HEAPF32[i8 + 20 >> 2] + d27 * +HEAPF32[i8 + 24 >> 2] + +HEAPF32[i8 + 52 >> 2] - (d28 * +HEAPF32[i9 + 16 >> 2] + d29 * +HEAPF32[i9 + 20 >> 2] + d12 * +HEAPF32[i9 + 24 >> 2] + +HEAPF32[i9 + 52 >> 2])) + d13 * (d31 * +HEAPF32[i8 + 32 >> 2] + d30 * +HEAPF32[i8 + 36 >> 2] + d27 * +HEAPF32[i8 + 40 >> 2] + +HEAPF32[i8 + 56 >> 2] - (d28 * +HEAPF32[i9 + 32 >> 2] + d29 * +HEAPF32[i9 + 36 >> 2] + d12 * +HEAPF32[i9 + 40 >> 2] + +HEAPF32[i9 + 56 >> 2])), d12 < d15) : 0) {
    d16 = d18;
    d15 = d12;
   } else {
    d19 = d22;
    d13 = d21;
    d17 = d20;
   }
   i14 = i14 + 1 | 0;
   if ((i14 | 0) == (i11 | 0)) {
    d12 = d19;
    break;
   } else {
    d20 = d17;
    d21 = d13;
    d22 = d19;
   }
  }
 } else {
  d12 = 0.0;
  d13 = 0.0;
  d17 = 0.0;
  d16 = 0.0;
  d15 = 999999984306749400.0;
 }
 switch (HEAP32[i10 + 4 >> 2] | 0) {
 case 4:
 case 5:
 case 10:
 case 11:
 case 13:
 case 1:
 case 0:
 case 8:
  break;
 default:
  +FUNCTION_TABLE_di[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 15](i10);
 }
 switch (HEAP32[i5 + 4 >> 2] | 0) {
 case 4:
 case 5:
 case 10:
 case 11:
 case 13:
 case 1:
 case 0:
 case 8:
  break;
 default:
  +FUNCTION_TABLE_di[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 15](i5);
 }
 if (d15 < 0.0) {
  i26 = 0;
  STACKTOP = i4;
  return i26 | 0;
 }
 switch (HEAP32[i10 + 4 >> 2] | 0) {
 case 11:
  {
   d18 = +HEAPF32[i10 + 44 >> 2];
   break;
  }
 case 10:
  {
   d18 = +HEAPF32[i10 + 44 >> 2];
   break;
  }
 case 4:
 case 5:
  {
   d18 = +HEAPF32[i10 + 44 >> 2];
   break;
  }
 case 8:
  {
   d18 = +HEAPF32[i10 + 28 >> 2] * +HEAPF32[i10 + 12 >> 2];
   break;
  }
 case 0:
  {
   d18 = +HEAPF32[i10 + 44 >> 2];
   break;
  }
 case 1:
  {
   d18 = +HEAPF32[i10 + 44 >> 2];
   break;
  }
 case 13:
  {
   d18 = +HEAPF32[i10 + 44 >> 2];
   break;
  }
 default:
  d18 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 15](i10);
 }
 i11 = HEAP32[i5 + 4 >> 2] | 0;
 switch (i11 | 0) {
 case 13:
  {
   d19 = +HEAPF32[i5 + 44 >> 2];
   i11 = 13;
   break;
  }
 case 11:
  {
   d19 = +HEAPF32[i5 + 44 >> 2];
   i11 = 11;
   break;
  }
 case 10:
  {
   d19 = +HEAPF32[i5 + 44 >> 2];
   i11 = 10;
   break;
  }
 case 4:
 case 5:
  {
   d19 = +HEAPF32[i5 + 44 >> 2];
   break;
  }
 case 8:
  {
   d19 = +HEAPF32[i5 + 28 >> 2] * +HEAPF32[i5 + 12 >> 2];
   i11 = 8;
   break;
  }
 case 0:
  {
   d19 = +HEAPF32[i5 + 44 >> 2];
   i11 = 0;
   break;
  }
 case 1:
  {
   d19 = +HEAPF32[i5 + 44 >> 2];
   i11 = 1;
   break;
  }
 default:
  {
   d19 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 15](i5);
   i11 = HEAP32[i5 + 4 >> 2] | 0;
  }
 }
 d15 = d15 + (d18 + d19 + .5);
 HEAP32[i4 + 176 >> 2] = 13392;
 HEAPF32[i4 + 180 >> 2] = 0.0;
 HEAPF32[i4 + 184 >> 2] = 1.0;
 HEAPF32[i4 + 188 >> 2] = 0.0;
 HEAPF32[i4 + 192 >> 2] = 0.0;
 HEAP32[i4 + 196 >> 2] = 0;
 HEAP32[i4 + 200 >> 2] = i6;
 HEAP32[i4 + 204 >> 2] = i10;
 HEAP32[i4 + 208 >> 2] = i5;
 HEAP32[i4 + 212 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i4 + 216 >> 2] = i11;
 d29 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 15](i10);
 HEAPF32[i4 + 220 >> 2] = d29;
 d29 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 15](i5);
 HEAPF32[i4 + 224 >> 2] = d29;
 HEAP8[i4 + 228 >> 0] = 0;
 HEAP32[i4 + 236 >> 2] = -1;
 HEAP32[i4 + 248 >> 2] = 1;
 HEAP32[i4 + 252 >> 2] = 1;
 d29 = +HEAPF32[i9 + 48 >> 2] + d16 * d15;
 d30 = d17 * d15 + +HEAPF32[i9 + 52 >> 2];
 d31 = d13 * d15 + +HEAPF32[i9 + 56 >> 2];
 HEAP32[i4 + 44 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i4 + 48 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i4 + 52 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i4 + 56 >> 2] = HEAP32[i9 + 12 >> 2];
 HEAP32[i4 + 60 >> 2] = HEAP32[i9 + 16 >> 2];
 HEAP32[i4 + 64 >> 2] = HEAP32[i9 + 20 >> 2];
 HEAP32[i4 + 68 >> 2] = HEAP32[i9 + 24 >> 2];
 HEAP32[i4 + 72 >> 2] = HEAP32[i9 + 28 >> 2];
 HEAP32[i4 + 76 >> 2] = HEAP32[i9 + 32 >> 2];
 HEAP32[i4 + 80 >> 2] = HEAP32[i9 + 36 >> 2];
 HEAP32[i4 + 84 >> 2] = HEAP32[i9 + 40 >> 2];
 HEAP32[i4 + 88 >> 2] = HEAP32[i9 + 44 >> 2];
 HEAPF32[i4 + 92 >> 2] = d29;
 HEAPF32[i4 + 96 >> 2] = d30;
 HEAPF32[i4 + 100 >> 2] = d31;
 HEAPF32[i4 + 104 >> 2] = 0.0;
 HEAP32[i4 + 108 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i4 + 112 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i4 + 116 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i4 + 120 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i4 + 124 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i4 + 128 >> 2] = HEAP32[i8 + 20 >> 2];
 HEAP32[i4 + 132 >> 2] = HEAP32[i8 + 24 >> 2];
 HEAP32[i4 + 136 >> 2] = HEAP32[i8 + 28 >> 2];
 HEAP32[i4 + 140 >> 2] = HEAP32[i8 + 32 >> 2];
 HEAP32[i4 + 144 >> 2] = HEAP32[i8 + 36 >> 2];
 HEAP32[i4 + 148 >> 2] = HEAP32[i8 + 40 >> 2];
 HEAP32[i4 + 152 >> 2] = HEAP32[i8 + 44 >> 2];
 HEAP32[i4 + 156 >> 2] = HEAP32[i8 + 48 >> 2];
 HEAP32[i4 + 160 >> 2] = HEAP32[i8 + 52 >> 2];
 HEAP32[i4 + 164 >> 2] = HEAP32[i8 + 56 >> 2];
 HEAP32[i4 + 168 >> 2] = HEAP32[i8 + 60 >> 2];
 HEAPF32[i4 + 172 >> 2] = 999999984306749400.0;
 HEAP32[i4 >> 2] = 14656;
 HEAP8[i4 + 40 >> 0] = 0;
 HEAPF32[i4 + 180 >> 2] = -d16;
 HEAPF32[i4 + 184 >> 2] = -d17;
 HEAPF32[i4 + 188 >> 2] = -d13;
 HEAPF32[i4 + 192 >> 2] = 0.0;
 __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i4 + 176 | 0, i4 + 44 | 0, i4, i7, 0);
 d15 = d15 - +HEAPF32[i4 + 36 >> 2];
 i5 = HEAP8[i4 + 40 >> 0] | 0;
 if (!(i5 << 24 >> 24 == 0)) {
  d30 = +HEAPF32[i4 + 24 >> 2] - d17 * d15;
  d31 = +HEAPF32[i4 + 28 >> 2] - d13 * d15;
  HEAPF32[i2 >> 2] = +HEAPF32[i4 + 20 >> 2] - d16 * d15;
  HEAPF32[i2 + 4 >> 2] = d30;
  HEAPF32[i2 + 8 >> 2] = d31;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  HEAP32[i1 + 0 >> 2] = HEAP32[i4 + 20 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 24 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 28 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 32 >> 2];
  HEAPF32[i3 >> 2] = d16;
  HEAPF32[i3 + 4 >> 2] = d17;
  HEAPF32[i3 + 8 >> 2] = d13;
  HEAPF32[i3 + 12 >> 2] = d12;
 }
 i26 = i5 << 24 >> 24 != 0;
 STACKTOP = i4;
 return i26 | 0;
}
function __ZN17btHingeConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((HEAP8[i1 + 738 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 + 36 >> 2] = 0.0;
 HEAPF32[i1 + 744 >> 2] = 0.0;
 L4 : do if ((HEAP8[i1 + 736 >> 0] | 0) == 0) {
  i34 = HEAP32[i1 + 28 >> 2] | 0;
  d23 = +HEAPF32[i1 + 600 >> 2];
  d22 = +HEAPF32[i1 + 604 >> 2];
  d6 = +HEAPF32[i1 + 608 >> 2];
  d5 = d23 * +HEAPF32[i34 + 20 >> 2] + d22 * +HEAPF32[i34 + 24 >> 2] + d6 * +HEAPF32[i34 + 28 >> 2] + +HEAPF32[i34 + 56 >> 2];
  i21 = HEAP32[i1 + 32 >> 2] | 0;
  d8 = +HEAPF32[i1 + 664 >> 2];
  d9 = +HEAPF32[i21 + 4 >> 2];
  d10 = +HEAPF32[i1 + 668 >> 2];
  d11 = +HEAPF32[i21 + 8 >> 2];
  d12 = +HEAPF32[i1 + 672 >> 2];
  d13 = +HEAPF32[i21 + 12 >> 2];
  d15 = +HEAPF32[i21 + 20 >> 2];
  d16 = +HEAPF32[i21 + 24 >> 2];
  d17 = +HEAPF32[i21 + 28 >> 2];
  d3 = +HEAPF32[i21 + 36 >> 2];
  d20 = +HEAPF32[i21 + 40 >> 2];
  d19 = +HEAPF32[i21 + 44 >> 2];
  d14 = +HEAPF32[i21 + 52 >> 2];
  d18 = +HEAPF32[i21 + 56 >> 2];
  d4 = +HEAPF32[i21 + 60 >> 2];
  d24 = d8 * d15 + d10 * d16 + d12 * d17 + d18 - d5;
  d7 = d23 * +HEAPF32[i34 + 4 >> 2] + d22 * +HEAPF32[i34 + 8 >> 2] + d6 * +HEAPF32[i34 + 12 >> 2] + +HEAPF32[i34 + 52 >> 2];
  d6 = d23 * +HEAPF32[i34 + 36 >> 2] + d22 * +HEAPF32[i34 + 40 >> 2] + d6 * +HEAPF32[i34 + 44 >> 2] + +HEAPF32[i34 + 60 >> 2];
  d22 = d8 * d9 + d10 * d11 + d12 * d13 + d14 - d7;
  d23 = d8 * d3 + d10 * d20 + d12 * d19 + d4 - d6;
  if (d22 * d22 + d24 * d24 + d23 * d23 > 1.1920928955078125e-7) {
   d33 = 1.0 / +Math_sqrt(+(d22 * d22 + d24 * d24 + d23 * d23));
   HEAPF32[i2 + 128 >> 2] = d22 * d33;
   HEAPF32[i2 + 132 >> 2] = d24 * d33;
   HEAPF32[i2 + 136 >> 2] = d23 * d33;
   HEAPF32[i2 + 140 >> 2] = 0.0;
   d23 = d23 * d33;
   d24 = d24 * d33;
   d22 = d22 * d33;
  } else {
   HEAPF32[i2 + 128 >> 2] = 1.0;
   HEAPF32[i2 + 132 >> 2] = 0.0;
   HEAPF32[i2 + 136 >> 2] = 0.0;
   HEAPF32[i2 + 140 >> 2] = 0.0;
   d23 = 0.0;
   d24 = 0.0;
   d22 = 1.0;
  }
  if (+Math_abs(+d23) > .7071067690849304) {
   d30 = d23 * d23 + d24 * d24;
   d31 = 1.0 / +Math_sqrt(+d30);
   HEAPF32[i2 + 144 >> 2] = 0.0;
   d33 = -(d31 * d23);
   HEAPF32[i2 + 148 >> 2] = d33;
   d32 = d31 * d24;
   HEAPF32[i2 + 152 >> 2] = d32;
   HEAPF32[i2 + 160 >> 2] = d30 * d31;
   HEAPF32[i2 + 164 >> 2] = -(d22 * d32);
   HEAPF32[i2 + 168 >> 2] = d22 * d33;
  } else {
   d32 = d22 * d22 + d24 * d24;
   d33 = 1.0 / +Math_sqrt(+d32);
   d31 = -(d24 * d33);
   HEAPF32[i2 + 144 >> 2] = d31;
   d30 = d33 * d22;
   HEAPF32[i2 + 148 >> 2] = d30;
   HEAPF32[i2 + 152 >> 2] = 0.0;
   HEAPF32[i2 + 160 >> 2] = -(d23 * d30);
   HEAPF32[i2 + 164 >> 2] = d23 * d31;
   HEAPF32[i2 + 168 >> 2] = d32 * d33;
  }
  d25 = d9;
  d22 = d15;
  d23 = d3;
  d24 = d11;
  d26 = d16;
  d27 = d20;
  d28 = d13;
  d33 = d17;
  d29 = d19;
  d32 = d14;
  d31 = d18;
  d30 = d4;
  i34 = 0;
  while (1) {
   i35 = HEAP32[i1 + 28 >> 2] | 0;
   HEAPF32[i2 + 80 >> 2] = +HEAPF32[i35 + 4 >> 2];
   HEAPF32[i2 + 84 >> 2] = +HEAPF32[i35 + 20 >> 2];
   HEAPF32[i2 + 88 >> 2] = +HEAPF32[i35 + 36 >> 2];
   HEAPF32[i2 + 92 >> 2] = 0.0;
   HEAPF32[i2 + 96 >> 2] = +HEAPF32[i35 + 8 >> 2];
   HEAPF32[i2 + 100 >> 2] = +HEAPF32[i35 + 24 >> 2];
   HEAPF32[i2 + 104 >> 2] = +HEAPF32[i35 + 40 >> 2];
   HEAPF32[i2 + 108 >> 2] = 0.0;
   HEAPF32[i2 + 112 >> 2] = +HEAPF32[i35 + 12 >> 2];
   HEAPF32[i2 + 116 >> 2] = +HEAPF32[i35 + 28 >> 2];
   HEAPF32[i2 + 120 >> 2] = +HEAPF32[i35 + 44 >> 2];
   HEAPF32[i2 + 124 >> 2] = 0.0;
   HEAPF32[i2 + 32 >> 2] = d25;
   HEAPF32[i2 + 36 >> 2] = d22;
   HEAPF32[i2 + 40 >> 2] = d23;
   HEAPF32[i2 + 44 >> 2] = 0.0;
   HEAPF32[i2 + 48 >> 2] = d24;
   HEAPF32[i2 + 52 >> 2] = d26;
   HEAPF32[i2 + 56 >> 2] = d27;
   HEAPF32[i2 + 60 >> 2] = 0.0;
   HEAPF32[i2 + 64 >> 2] = d28;
   HEAPF32[i2 + 68 >> 2] = d33;
   HEAPF32[i2 + 72 >> 2] = d29;
   HEAPF32[i2 + 76 >> 2] = 0.0;
   d29 = d5 - +HEAPF32[i35 + 56 >> 2];
   d33 = d6 - +HEAPF32[i35 + 60 >> 2];
   HEAPF32[i2 + 16 >> 2] = d7 - +HEAPF32[i35 + 52 >> 2];
   HEAPF32[i2 + 20 >> 2] = d29;
   HEAPF32[i2 + 24 >> 2] = d33;
   HEAPF32[i2 + 28 >> 2] = 0.0;
   HEAPF32[i2 >> 2] = d8 * d9 + d10 * d11 + d12 * d13 + d14 - d32;
   HEAPF32[i2 + 4 >> 2] = d8 * d15 + d10 * d16 + d12 * d17 + d18 - d31;
   HEAPF32[i2 + 8 >> 2] = d8 * d3 + d10 * d20 + d12 * d19 + d4 - d30;
   HEAPF32[i2 + 12 >> 2] = 0.0;
   __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1 + (i34 * 84 | 0) + 48 | 0, i2 + 80 | 0, i2 + 32 | 0, i2 + 16 | 0, i2, i2 + 128 + (i34 << 4) | 0, i35 + 396 | 0, +HEAPF32[i35 + 344 >> 2], i21 + 396 | 0, +HEAPF32[i21 + 344 >> 2]);
   i34 = i34 + 1 | 0;
   if ((i34 | 0) == 3) break L4;
   i21 = HEAP32[i1 + 32 >> 2] | 0;
   d25 = +HEAPF32[i21 + 4 >> 2];
   d22 = +HEAPF32[i21 + 20 >> 2];
   d23 = +HEAPF32[i21 + 36 >> 2];
   d24 = +HEAPF32[i21 + 8 >> 2];
   d26 = +HEAPF32[i21 + 24 >> 2];
   d27 = +HEAPF32[i21 + 40 >> 2];
   d28 = +HEAPF32[i21 + 12 >> 2];
   d33 = +HEAPF32[i21 + 28 >> 2];
   d29 = +HEAPF32[i21 + 44 >> 2];
   d32 = +HEAPF32[i21 + 52 >> 2];
   d31 = +HEAPF32[i21 + 56 >> 2];
   d30 = +HEAPF32[i21 + 60 >> 2];
  }
 } while (0);
 d5 = +HEAPF32[i1 + 560 >> 2];
 d4 = +HEAPF32[i1 + 576 >> 2];
 d3 = +HEAPF32[i1 + 592 >> 2];
 if (+Math_abs(+d3) > .7071067690849304) {
  d6 = 1.0 / +Math_sqrt(+(d4 * d4 + d3 * d3));
  d11 = 0.0;
  d10 = -(d3 * d6);
  d9 = d4 * d6;
  d8 = (d4 * d4 + d3 * d3) * d6;
  d7 = -(d5 * d4 * d6);
  d6 = d5 * -(d3 * d6);
 } else {
  d6 = 1.0 / +Math_sqrt(+(d5 * d5 + d4 * d4));
  d11 = -(d4 * d6);
  d10 = d5 * d6;
  d9 = 0.0;
  d8 = -(d3 * d5 * d6);
  d7 = d3 * -(d4 * d6);
  d6 = (d5 * d5 + d4 * d4) * d6;
 }
 i34 = HEAP32[i1 + 28 >> 2] | 0;
 d12 = +HEAPF32[i34 + 4 >> 2];
 d28 = +HEAPF32[i34 + 8 >> 2];
 d23 = +HEAPF32[i34 + 12 >> 2];
 d15 = d11 * d12 + d10 * d28 + d9 * d23;
 d20 = +HEAPF32[i34 + 20 >> 2];
 d16 = +HEAPF32[i34 + 24 >> 2];
 d25 = +HEAPF32[i34 + 28 >> 2];
 d17 = d11 * d20 + d10 * d16 + d9 * d25;
 d31 = +HEAPF32[i34 + 36 >> 2];
 d29 = +HEAPF32[i34 + 40 >> 2];
 d27 = +HEAPF32[i34 + 44 >> 2];
 d18 = d11 * d31 + d10 * d29 + d9 * d27;
 d32 = d8 * d12 + d7 * d28 + d6 * d23;
 d9 = d8 * d20 + d7 * d16 + d6 * d25;
 d7 = d8 * d31 + d7 * d29 + d6 * d27;
 i35 = HEAP32[i1 + 32 >> 2] | 0;
 d24 = +HEAPF32[i35 + 4 >> 2];
 d26 = +HEAPF32[i35 + 20 >> 2];
 d36 = +HEAPF32[i35 + 36 >> 2];
 d39 = +HEAPF32[i35 + 8 >> 2];
 d40 = +HEAPF32[i35 + 24 >> 2];
 d42 = +HEAPF32[i35 + 40 >> 2];
 d44 = +HEAPF32[i35 + 12 >> 2];
 d6 = +HEAPF32[i35 + 28 >> 2];
 d30 = +HEAPF32[i35 + 44 >> 2];
 HEAP32[i1 + 300 >> 2] = 0;
 HEAP32[i1 + 304 >> 2] = 0;
 HEAP32[i1 + 308 >> 2] = 0;
 HEAP32[i1 + 312 >> 2] = 0;
 HEAPF32[i1 + 316 >> 2] = d12 * d15 + d20 * d17 + d31 * d18;
 HEAPF32[i1 + 320 >> 2] = d28 * d15 + d16 * d17 + d29 * d18;
 HEAPF32[i1 + 324 >> 2] = d23 * d15 + d25 * d17 + d27 * d18;
 HEAPF32[i1 + 328 >> 2] = 0.0;
 HEAPF32[i1 + 332 >> 2] = d24 * -d15 + d26 * -d17 + d36 * -d18;
 HEAPF32[i1 + 336 >> 2] = d39 * -d15 + d40 * -d17 + d42 * -d18;
 HEAPF32[i1 + 340 >> 2] = d44 * -d15 + d6 * -d17 + d30 * -d18;
 HEAPF32[i1 + 344 >> 2] = 0.0;
 d11 = (d12 * d15 + d20 * d17 + d31 * d18) * +HEAPF32[i34 + 396 >> 2];
 d33 = (d28 * d15 + d16 * d17 + d29 * d18) * +HEAPF32[i34 + 400 >> 2];
 d13 = (d23 * d15 + d25 * d17 + d27 * d18) * +HEAPF32[i34 + 404 >> 2];
 HEAPF32[i1 + 348 >> 2] = d11;
 HEAPF32[i1 + 352 >> 2] = d33;
 HEAPF32[i1 + 356 >> 2] = d13;
 HEAPF32[i1 + 360 >> 2] = 0.0;
 d38 = (d24 * -d15 + d26 * -d17 + d36 * -d18) * +HEAPF32[i35 + 396 >> 2];
 d43 = (d39 * -d15 + d40 * -d17 + d42 * -d18) * +HEAPF32[i35 + 400 >> 2];
 d8 = (d44 * -d15 + d6 * -d17 + d30 * -d18) * +HEAPF32[i35 + 404 >> 2];
 HEAPF32[i1 + 364 >> 2] = d38;
 HEAPF32[i1 + 368 >> 2] = d43;
 HEAPF32[i1 + 372 >> 2] = d8;
 HEAPF32[i1 + 376 >> 2] = 0.0;
 HEAPF32[i1 + 380 >> 2] = (d24 * -d15 + d26 * -d17 + d36 * -d18) * d38 + (d39 * -d15 + d40 * -d17 + d42 * -d18) * d43 + (d44 * -d15 + d6 * -d17 + d30 * -d18) * d8 + (d11 * (d12 * d15 + d20 * d17 + d31 * d18) + d33 * (d28 * d15 + d16 * d17 + d29 * d18) + d13 * (d23 * d15 + d25 * d17 + d27 * d18));
 i35 = HEAP32[i1 + 28 >> 2] | 0;
 d18 = +HEAPF32[i35 + 4 >> 2];
 d17 = +HEAPF32[i35 + 20 >> 2];
 d15 = +HEAPF32[i35 + 36 >> 2];
 d13 = +HEAPF32[i35 + 8 >> 2];
 d33 = +HEAPF32[i35 + 24 >> 2];
 d11 = +HEAPF32[i35 + 40 >> 2];
 d8 = +HEAPF32[i35 + 12 >> 2];
 d30 = +HEAPF32[i35 + 28 >> 2];
 d6 = +HEAPF32[i35 + 44 >> 2];
 i34 = HEAP32[i1 + 32 >> 2] | 0;
 d44 = +HEAPF32[i34 + 4 >> 2];
 d43 = +HEAPF32[i34 + 20 >> 2];
 d42 = +HEAPF32[i34 + 36 >> 2];
 d40 = +HEAPF32[i34 + 8 >> 2];
 d39 = +HEAPF32[i34 + 24 >> 2];
 d38 = +HEAPF32[i34 + 40 >> 2];
 d36 = +HEAPF32[i34 + 12 >> 2];
 d26 = +HEAPF32[i34 + 28 >> 2];
 d24 = +HEAPF32[i34 + 44 >> 2];
 HEAP32[i1 + 384 >> 2] = 0;
 HEAP32[i1 + 388 >> 2] = 0;
 HEAP32[i1 + 392 >> 2] = 0;
 HEAP32[i1 + 396 >> 2] = 0;
 HEAPF32[i1 + 400 >> 2] = d32 * d18 + d9 * d17 + d7 * d15;
 HEAPF32[i1 + 404 >> 2] = d32 * d13 + d9 * d33 + d7 * d11;
 HEAPF32[i1 + 408 >> 2] = d32 * d8 + d9 * d30 + d7 * d6;
 HEAPF32[i1 + 412 >> 2] = 0.0;
 HEAPF32[i1 + 416 >> 2] = d44 * -d32 + d43 * -d9 + d42 * -d7;
 HEAPF32[i1 + 420 >> 2] = d40 * -d32 + d39 * -d9 + d38 * -d7;
 HEAPF32[i1 + 424 >> 2] = d36 * -d32 + d26 * -d9 + d24 * -d7;
 HEAPF32[i1 + 428 >> 2] = 0.0;
 d19 = (d32 * d18 + d9 * d17 + d7 * d15) * +HEAPF32[i35 + 396 >> 2];
 d14 = (d32 * d13 + d9 * d33 + d7 * d11) * +HEAPF32[i35 + 400 >> 2];
 d10 = (d32 * d8 + d9 * d30 + d7 * d6) * +HEAPF32[i35 + 404 >> 2];
 HEAPF32[i1 + 432 >> 2] = d19;
 HEAPF32[i1 + 436 >> 2] = d14;
 HEAPF32[i1 + 440 >> 2] = d10;
 HEAPF32[i1 + 444 >> 2] = 0.0;
 d41 = (d44 * -d32 + d43 * -d9 + d42 * -d7) * +HEAPF32[i34 + 396 >> 2];
 d37 = (d40 * -d32 + d39 * -d9 + d38 * -d7) * +HEAPF32[i34 + 400 >> 2];
 d22 = (d36 * -d32 + d26 * -d9 + d24 * -d7) * +HEAPF32[i34 + 404 >> 2];
 HEAPF32[i1 + 448 >> 2] = d41;
 HEAPF32[i1 + 452 >> 2] = d37;
 HEAPF32[i1 + 456 >> 2] = d22;
 HEAPF32[i1 + 460 >> 2] = 0.0;
 HEAPF32[i1 + 464 >> 2] = (d44 * -d32 + d43 * -d9 + d42 * -d7) * d41 + (d40 * -d32 + d39 * -d9 + d38 * -d7) * d37 + (d36 * -d32 + d26 * -d9 + d24 * -d7) * d22 + (d19 * (d32 * d18 + d9 * d17 + d7 * d15) + d14 * (d32 * d13 + d9 * d33 + d7 * d11) + d10 * (d32 * d8 + d9 * d30 + d7 * d6));
 i34 = HEAP32[i1 + 28 >> 2] | 0;
 d6 = +HEAPF32[i34 + 4 >> 2];
 d7 = +HEAPF32[i34 + 20 >> 2];
 d30 = +HEAPF32[i34 + 36 >> 2];
 d8 = +HEAPF32[i34 + 8 >> 2];
 d9 = +HEAPF32[i34 + 24 >> 2];
 d32 = +HEAPF32[i34 + 40 >> 2];
 d10 = +HEAPF32[i34 + 12 >> 2];
 d11 = +HEAPF32[i34 + 28 >> 2];
 d33 = +HEAPF32[i34 + 44 >> 2];
 i35 = HEAP32[i1 + 32 >> 2] | 0;
 d13 = +HEAPF32[i35 + 4 >> 2];
 d14 = +HEAPF32[i35 + 20 >> 2];
 d15 = +HEAPF32[i35 + 36 >> 2];
 d17 = +HEAPF32[i35 + 8 >> 2];
 d18 = +HEAPF32[i35 + 24 >> 2];
 d19 = +HEAPF32[i35 + 40 >> 2];
 d22 = +HEAPF32[i35 + 12 >> 2];
 d24 = +HEAPF32[i35 + 28 >> 2];
 d26 = +HEAPF32[i35 + 44 >> 2];
 HEAP32[i1 + 468 >> 2] = 0;
 HEAP32[i1 + 472 >> 2] = 0;
 HEAP32[i1 + 476 >> 2] = 0;
 HEAP32[i1 + 480 >> 2] = 0;
 d30 = (d12 * d5 + d28 * d4 + d23 * d3) * d6 + (d20 * d5 + d16 * d4 + d25 * d3) * d7 + (d31 * d5 + d29 * d4 + d27 * d3) * d30;
 d32 = (d12 * d5 + d28 * d4 + d23 * d3) * d8 + (d20 * d5 + d16 * d4 + d25 * d3) * d9 + (d31 * d5 + d29 * d4 + d27 * d3) * d32;
 d33 = (d12 * d5 + d28 * d4 + d23 * d3) * d10 + (d20 * d5 + d16 * d4 + d25 * d3) * d11 + (d31 * d5 + d29 * d4 + d27 * d3) * d33;
 HEAPF32[i1 + 484 >> 2] = d30;
 HEAPF32[i1 + 488 >> 2] = d32;
 HEAPF32[i1 + 492 >> 2] = d33;
 HEAPF32[i1 + 496 >> 2] = 0.0;
 d23 = -(d12 * d5 + d28 * d4 + d23 * d3);
 d25 = -(d20 * d5 + d16 * d4 + d25 * d3);
 d27 = -(d31 * d5 + d29 * d4 + d27 * d3);
 HEAPF32[i1 + 500 >> 2] = d13 * d23 + d14 * d25 + d15 * d27;
 HEAPF32[i1 + 504 >> 2] = d17 * d23 + d18 * d25 + d19 * d27;
 HEAPF32[i1 + 508 >> 2] = d22 * d23 + d24 * d25 + d26 * d27;
 HEAPF32[i1 + 512 >> 2] = 0.0;
 d29 = d30 * +HEAPF32[i34 + 396 >> 2];
 d31 = d32 * +HEAPF32[i34 + 400 >> 2];
 d3 = d33 * +HEAPF32[i34 + 404 >> 2];
 HEAPF32[i1 + 516 >> 2] = d29;
 HEAPF32[i1 + 520 >> 2] = d31;
 HEAPF32[i1 + 524 >> 2] = d3;
 HEAPF32[i1 + 528 >> 2] = 0.0;
 d16 = (d13 * d23 + d14 * d25 + d15 * d27) * +HEAPF32[i35 + 396 >> 2];
 d20 = (d17 * d23 + d18 * d25 + d19 * d27) * +HEAPF32[i35 + 400 >> 2];
 d28 = (d22 * d23 + d24 * d25 + d26 * d27) * +HEAPF32[i35 + 404 >> 2];
 HEAPF32[i1 + 532 >> 2] = d16;
 HEAPF32[i1 + 536 >> 2] = d20;
 HEAPF32[i1 + 540 >> 2] = d28;
 HEAPF32[i1 + 544 >> 2] = 0.0;
 HEAPF32[i1 + 548 >> 2] = (d13 * d23 + d14 * d25 + d15 * d27) * d16 + (d17 * d23 + d18 * d25 + d19 * d27) * d20 + (d22 * d23 + d24 * d25 + d26 * d27) * d28 + (d29 * d30 + d31 * d32 + d3 * d33);
 HEAPF32[i1 + 724 >> 2] = 0.0;
 d3 = +__ZN17btHingeConstraint13getHingeAngleERK11btTransformS2_(i1, (HEAP32[i1 + 28 >> 2] | 0) + 4 | 0, (HEAP32[i1 + 32 >> 2] | 0) + 4 | 0);
 HEAPF32[i1 + 728 >> 2] = d3;
 HEAPF32[i1 + 708 >> 2] = 0.0;
 HEAPF32[i1 + 712 >> 2] = 0.0;
 HEAP8[i1 + 716 >> 0] = 0;
 do if (+HEAPF32[i1 + 692 >> 2] >= 0.0) {
  d3 = +_fmodf(+(d3 - +HEAPF32[i1 + 688 >> 2]), 6.2831854820251465);
  if (!(d3 < -3.1415927410125732)) {
   if (d3 > 3.1415927410125732) d3 = d3 + -6.2831854820251465;
  } else d3 = d3 + 6.2831854820251465;
  d4 = +HEAPF32[i1 + 692 >> 2];
  if (d3 < -d4) {
   HEAP8[i1 + 716 >> 0] = 1;
   HEAPF32[i1 + 708 >> 2] = -(d3 + d4);
   HEAPF32[i1 + 712 >> 2] = 1.0;
   break;
  }
  if (d3 > d4) {
   HEAP8[i1 + 716 >> 0] = 1;
   HEAPF32[i1 + 708 >> 2] = d4 - d3;
   HEAPF32[i1 + 712 >> 2] = -1.0;
  }
 } while (0);
 i34 = HEAP32[i1 + 28 >> 2] | 0;
 d40 = +HEAPF32[i1 + 560 >> 2];
 d41 = +HEAPF32[i1 + 576 >> 2];
 d44 = +HEAPF32[i1 + 592 >> 2];
 d42 = d40 * +HEAPF32[i34 + 4 >> 2] + d41 * +HEAPF32[i34 + 8 >> 2] + d44 * +HEAPF32[i34 + 12 >> 2];
 d43 = d40 * +HEAPF32[i34 + 20 >> 2] + d41 * +HEAPF32[i34 + 24 >> 2] + d44 * +HEAPF32[i34 + 28 >> 2];
 d44 = d40 * +HEAPF32[i34 + 36 >> 2] + d41 * +HEAPF32[i34 + 40 >> 2] + d44 * +HEAPF32[i34 + 44 >> 2];
 i35 = HEAP32[i1 + 32 >> 2] | 0;
 HEAPF32[i1 + 720 >> 2] = 1.0 / (d42 * (d42 * +HEAPF32[i34 + 264 >> 2] + d43 * +HEAPF32[i34 + 280 >> 2] + d44 * +HEAPF32[i34 + 296 >> 2]) + d43 * (d42 * +HEAPF32[i34 + 268 >> 2] + d43 * +HEAPF32[i34 + 284 >> 2] + d44 * +HEAPF32[i34 + 300 >> 2]) + d44 * (d42 * +HEAPF32[i34 + 272 >> 2] + d43 * +HEAPF32[i34 + 288 >> 2] + d44 * +HEAPF32[i34 + 304 >> 2]) + (d42 * (d42 * +HEAPF32[i35 + 264 >> 2] + d43 * +HEAPF32[i35 + 280 >> 2] + d44 * +HEAPF32[i35 + 296 >> 2]) + d43 * (d42 * +HEAPF32[i35 + 268 >> 2] + d43 * +HEAPF32[i35 + 284 >> 2] + d44 * +HEAPF32[i35 + 300 >> 2]) + d44 * (d42 * +HEAPF32[i35 + 272 >> 2] + d43 * +HEAPF32[i35 + 288 >> 2] + d44 * +HEAPF32[i35 + 304 >> 2])));
 STACKTOP = i2;
 return;
}
function __ZNK14btQuantizedBvh9serializeEPvjb(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 168 >> 2] = HEAP32[i1 + 152 >> 2];
 HEAP32[i2 >> 2] = 16080;
 HEAP32[i2 + 52 >> 2] = 282;
 HEAP8[i2 + 60 >> 0] = 0;
 HEAP8[i2 + 80 >> 0] = 1;
 HEAP32[i2 + 76 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 0;
 HEAP8[i2 + 100 >> 0] = 1;
 HEAP32[i2 + 96 >> 2] = 0;
 HEAP32[i2 + 88 >> 2] = 0;
 HEAP32[i2 + 92 >> 2] = 0;
 HEAP8[i2 + 120 >> 0] = 1;
 HEAP32[i2 + 116 >> 2] = 0;
 HEAP32[i2 + 108 >> 2] = 0;
 HEAP32[i2 + 112 >> 2] = 0;
 HEAP8[i2 + 140 >> 0] = 1;
 HEAP32[i2 + 136 >> 2] = 0;
 HEAP32[i2 + 128 >> 2] = 0;
 HEAP32[i2 + 132 >> 2] = 0;
 HEAP32[i2 + 144 >> 2] = 0;
 HEAP8[i2 + 164 >> 0] = 1;
 HEAP32[i2 + 160 >> 2] = 0;
 HEAP32[i2 + 152 >> 2] = 0;
 HEAP32[i2 + 156 >> 2] = 0;
 HEAP32[i2 + 168 >> 2] = 0;
 HEAPF32[i2 + 4 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i2 + 8 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i2 + 12 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i2 + 16 >> 2] = 0.0;
 HEAPF32[i2 + 20 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i2 + 24 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i2 + 28 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i2 + 32 >> 2] = 0.0;
 i5 = HEAP32[i1 + 56 >> 2] | 0;
 if (i4) {
  i5 = _llvm_bswap_i32(i5 | 0) | 0;
  HEAP32[i2 + 56 >> 2] = i5;
  HEAP8[i2 + 4 >> 0] = HEAP8[i1 + 7 >> 0] | 0;
  HEAP8[i2 + 5 >> 0] = HEAP8[i1 + 6 >> 0] | 0;
  HEAP8[i2 + 6 >> 0] = HEAP8[i1 + 5 >> 0] | 0;
  HEAP8[i2 + 7 >> 0] = HEAP8[i1 + 4 >> 0] | 0;
  HEAP8[i2 + 8 >> 0] = HEAP8[i1 + 11 >> 0] | 0;
  HEAP8[i2 + 9 >> 0] = HEAP8[i1 + 10 >> 0] | 0;
  HEAP8[i2 + 10 >> 0] = HEAP8[i1 + 9 >> 0] | 0;
  HEAP8[i2 + 11 >> 0] = HEAP8[i1 + 8 >> 0] | 0;
  HEAP8[i2 + 12 >> 0] = HEAP8[i1 + 15 >> 0] | 0;
  HEAP8[i2 + 13 >> 0] = HEAP8[i1 + 14 >> 0] | 0;
  HEAP8[i2 + 14 >> 0] = HEAP8[i1 + 13 >> 0] | 0;
  HEAP8[i2 + 15 >> 0] = HEAP8[i1 + 12 >> 0] | 0;
  HEAP8[i2 + 16 >> 0] = HEAP8[i1 + 19 >> 0] | 0;
  HEAP8[i2 + 17 >> 0] = HEAP8[i1 + 18 >> 0] | 0;
  HEAP8[i2 + 18 >> 0] = HEAP8[i1 + 17 >> 0] | 0;
  HEAP8[i2 + 19 >> 0] = HEAP8[i1 + 16 >> 0] | 0;
  HEAP8[i2 + 20 >> 0] = HEAP8[i1 + 23 >> 0] | 0;
  HEAP8[i2 + 21 >> 0] = HEAP8[i1 + 22 >> 0] | 0;
  HEAP8[i2 + 22 >> 0] = HEAP8[i1 + 21 >> 0] | 0;
  HEAP8[i2 + 23 >> 0] = HEAP8[i1 + 20 >> 0] | 0;
  HEAP8[i2 + 24 >> 0] = HEAP8[i1 + 27 >> 0] | 0;
  HEAP8[i2 + 25 >> 0] = HEAP8[i1 + 26 >> 0] | 0;
  HEAP8[i2 + 26 >> 0] = HEAP8[i1 + 25 >> 0] | 0;
  HEAP8[i2 + 27 >> 0] = HEAP8[i1 + 24 >> 0] | 0;
  HEAP8[i2 + 28 >> 0] = HEAP8[i1 + 31 >> 0] | 0;
  HEAP8[i2 + 29 >> 0] = HEAP8[i1 + 30 >> 0] | 0;
  HEAP8[i2 + 30 >> 0] = HEAP8[i1 + 29 >> 0] | 0;
  HEAP8[i2 + 31 >> 0] = HEAP8[i1 + 28 >> 0] | 0;
  HEAP8[i2 + 32 >> 0] = HEAP8[i1 + 35 >> 0] | 0;
  HEAP8[i2 + 33 >> 0] = HEAP8[i1 + 34 >> 0] | 0;
  HEAP8[i2 + 34 >> 0] = HEAP8[i1 + 33 >> 0] | 0;
  HEAP8[i2 + 35 >> 0] = HEAP8[i1 + 32 >> 0] | 0;
  HEAP8[i2 + 36 >> 0] = HEAP8[i1 + 39 >> 0] | 0;
  HEAP8[i2 + 37 >> 0] = HEAP8[i1 + 38 >> 0] | 0;
  HEAP8[i2 + 38 >> 0] = HEAP8[i1 + 37 >> 0] | 0;
  HEAP8[i2 + 39 >> 0] = HEAP8[i1 + 36 >> 0] | 0;
  HEAP8[i2 + 40 >> 0] = HEAP8[i1 + 43 >> 0] | 0;
  HEAP8[i2 + 41 >> 0] = HEAP8[i1 + 42 >> 0] | 0;
  HEAP8[i2 + 42 >> 0] = HEAP8[i1 + 41 >> 0] | 0;
  HEAP8[i2 + 43 >> 0] = HEAP8[i1 + 40 >> 0] | 0;
  HEAP8[i2 + 44 >> 0] = HEAP8[i1 + 47 >> 0] | 0;
  HEAP8[i2 + 45 >> 0] = HEAP8[i1 + 46 >> 0] | 0;
  HEAP8[i2 + 46 >> 0] = HEAP8[i1 + 45 >> 0] | 0;
  HEAP8[i2 + 47 >> 0] = HEAP8[i1 + 44 >> 0] | 0;
  HEAP8[i2 + 48 >> 0] = HEAP8[i1 + 51 >> 0] | 0;
  HEAP8[i2 + 49 >> 0] = HEAP8[i1 + 50 >> 0] | 0;
  HEAP8[i2 + 50 >> 0] = HEAP8[i1 + 49 >> 0] | 0;
  HEAP8[i2 + 51 >> 0] = HEAP8[i1 + 48 >> 0] | 0;
  i5 = _llvm_bswap_i32(HEAP32[i1 + 144 >> 2] | 0) | 0;
  HEAP32[i2 + 144 >> 2] = i5;
  i5 = _llvm_bswap_i32(HEAP32[i1 + 168 >> 2] | 0) | 0;
 } else {
  HEAP32[i2 + 56 >> 2] = i5;
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
  HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
  HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
  HEAP32[i2 + 32 >> 2] = HEAP32[i1 + 32 >> 2];
  HEAP32[i2 + 36 >> 2] = HEAP32[i1 + 36 >> 2];
  HEAP32[i2 + 40 >> 2] = HEAP32[i1 + 40 >> 2];
  HEAP32[i2 + 44 >> 2] = HEAP32[i1 + 44 >> 2];
  HEAP32[i2 + 48 >> 2] = HEAP32[i1 + 48 >> 2];
  HEAP32[i2 + 144 >> 2] = HEAP32[i1 + 144 >> 2];
  i5 = HEAP32[i1 + 168 >> 2] | 0;
 }
 HEAP32[i2 + 168 >> 2] = i5;
 HEAP8[i2 + 60 >> 0] = HEAP8[i1 + 60 >> 0] | 0;
 i5 = HEAP32[i1 + 56 >> 2] | 0;
 if ((HEAP8[i1 + 60 >> 0] | 0) == 0) {
  i6 = HEAP32[i2 + 96 >> 2] | 0;
  if ((i6 | 0) != 0) {
   if ((HEAP8[i2 + 100 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i6 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 96 >> 2] = 0;
  }
  HEAP32[i2 + 88 >> 2] = 0;
  HEAP32[i2 + 92 >> 2] = 0;
  HEAP32[i2 + 96 >> 2] = 0;
  HEAP8[i2 + 100 >> 0] = 0;
  HEAP32[i2 + 96 >> 2] = i2 + 172;
  HEAP32[i2 + 88 >> 2] = i5;
  HEAP32[i2 + 92 >> 2] = i5;
  if (i4) if ((i5 | 0) > 0) {
   i6 = HEAP32[i1 + 96 >> 2] | 0;
   i8 = i2 + 172 | 0;
   i7 = 0;
   do {
    i9 = i6 + (i7 << 6) | 0;
    i11 = i8 + (i7 << 6) | 0;
    HEAP8[i11 >> 0] = HEAP8[i9 + 3 >> 0] | 0;
    HEAP8[i11 + 1 >> 0] = HEAP8[i9 + 2 >> 0] | 0;
    HEAP8[i11 + 2 >> 0] = HEAP8[i9 + 1 >> 0] | 0;
    HEAP8[i11 + 3 >> 0] = HEAP8[i9 >> 0] | 0;
    i11 = i6 + (i7 << 6) + 4 | 0;
    i9 = i8 + (i7 << 6) + 4 | 0;
    HEAP8[i9 >> 0] = HEAP8[i11 + 3 >> 0] | 0;
    HEAP8[i9 + 1 >> 0] = HEAP8[i11 + 2 >> 0] | 0;
    HEAP8[i9 + 2 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
    HEAP8[i9 + 3 >> 0] = HEAP8[i11 >> 0] | 0;
    i9 = i6 + (i7 << 6) + 8 | 0;
    i11 = i8 + (i7 << 6) + 8 | 0;
    HEAP8[i11 >> 0] = HEAP8[i9 + 3 >> 0] | 0;
    HEAP8[i11 + 1 >> 0] = HEAP8[i9 + 2 >> 0] | 0;
    HEAP8[i11 + 2 >> 0] = HEAP8[i9 + 1 >> 0] | 0;
    HEAP8[i11 + 3 >> 0] = HEAP8[i9 >> 0] | 0;
    i11 = i6 + (i7 << 6) + 12 | 0;
    i8 = i8 + (i7 << 6) + 12 | 0;
    HEAP8[i8 >> 0] = HEAP8[i11 + 3 >> 0] | 0;
    HEAP8[i8 + 1 >> 0] = HEAP8[i11 + 2 >> 0] | 0;
    HEAP8[i8 + 2 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
    HEAP8[i8 + 3 >> 0] = HEAP8[i11 >> 0] | 0;
    i8 = HEAP32[i1 + 96 >> 2] | 0;
    i11 = i8 + (i7 << 6) + 16 | 0;
    i9 = HEAP32[i2 + 96 >> 2] | 0;
    i10 = i9 + (i7 << 6) + 16 | 0;
    HEAP8[i10 >> 0] = HEAP8[i11 + 3 >> 0] | 0;
    HEAP8[i10 + 1 >> 0] = HEAP8[i11 + 2 >> 0] | 0;
    HEAP8[i10 + 2 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
    HEAP8[i10 + 3 >> 0] = HEAP8[i11 >> 0] | 0;
    i10 = i8 + (i7 << 6) + 20 | 0;
    i11 = i9 + (i7 << 6) + 20 | 0;
    HEAP8[i11 >> 0] = HEAP8[i10 + 3 >> 0] | 0;
    HEAP8[i11 + 1 >> 0] = HEAP8[i10 + 2 >> 0] | 0;
    HEAP8[i11 + 2 >> 0] = HEAP8[i10 + 1 >> 0] | 0;
    HEAP8[i11 + 3 >> 0] = HEAP8[i10 >> 0] | 0;
    i11 = i8 + (i7 << 6) + 24 | 0;
    i10 = i9 + (i7 << 6) + 24 | 0;
    HEAP8[i10 >> 0] = HEAP8[i11 + 3 >> 0] | 0;
    HEAP8[i10 + 1 >> 0] = HEAP8[i11 + 2 >> 0] | 0;
    HEAP8[i10 + 2 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
    HEAP8[i10 + 3 >> 0] = HEAP8[i11 >> 0] | 0;
    i8 = i8 + (i7 << 6) + 28 | 0;
    i9 = i9 + (i7 << 6) + 28 | 0;
    HEAP8[i9 >> 0] = HEAP8[i8 + 3 >> 0] | 0;
    HEAP8[i9 + 1 >> 0] = HEAP8[i8 + 2 >> 0] | 0;
    HEAP8[i9 + 2 >> 0] = HEAP8[i8 + 1 >> 0] | 0;
    HEAP8[i9 + 3 >> 0] = HEAP8[i8 >> 0] | 0;
    i6 = HEAP32[i1 + 96 >> 2] | 0;
    i9 = _llvm_bswap_i32(HEAP32[i6 + (i7 << 6) + 32 >> 2] | 0) | 0;
    i8 = HEAP32[i2 + 96 >> 2] | 0;
    HEAP32[i8 + (i7 << 6) + 32 >> 2] = i9;
    i9 = _llvm_bswap_i32(HEAP32[i6 + (i7 << 6) + 36 >> 2] | 0) | 0;
    HEAP32[i8 + (i7 << 6) + 36 >> 2] = i9;
    i9 = _llvm_bswap_i32(HEAP32[i6 + (i7 << 6) + 40 >> 2] | 0) | 0;
    HEAP32[i8 + (i7 << 6) + 40 >> 2] = i9;
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i5 | 0));
  } else i8 = i2 + 172 | 0; else if ((i5 | 0) > 0) {
   i8 = i2 + 172 | 0;
   i6 = HEAP32[i1 + 96 >> 2] | 0;
   i7 = 0;
   do {
    i8 = i8 + (i7 << 6) | 0;
    i11 = i6 + (i7 << 6) | 0;
    HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i8 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i8 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    i8 = (HEAP32[i2 + 96 >> 2] | 0) + (i7 << 6) + 16 | 0;
    i11 = (HEAP32[i1 + 96 >> 2] | 0) + (i7 << 6) + 16 | 0;
    HEAP32[i8 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i8 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i8 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    i6 = HEAP32[i1 + 96 >> 2] | 0;
    i8 = HEAP32[i2 + 96 >> 2] | 0;
    HEAP32[i8 + (i7 << 6) + 32 >> 2] = HEAP32[i6 + (i7 << 6) + 32 >> 2];
    HEAP32[i8 + (i7 << 6) + 36 >> 2] = HEAP32[i6 + (i7 << 6) + 36 >> 2];
    HEAP32[i8 + (i7 << 6) + 40 >> 2] = HEAP32[i6 + (i7 << 6) + 40 >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i5 | 0));
  } else i8 = i2 + 172 | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i2 + 100 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i8 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 96 >> 2] = 0;
  }
  HEAP32[i2 + 88 >> 2] = 0;
  HEAP32[i2 + 92 >> 2] = 0;
  HEAP32[i2 + 96 >> 2] = 0;
  HEAP8[i2 + 100 >> 0] = 0;
  i5 = i5 << 6;
 } else {
  i6 = HEAP32[i2 + 136 >> 2] | 0;
  if ((i6 | 0) != 0) {
   if ((HEAP8[i2 + 140 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i6 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 136 >> 2] = 0;
  }
  HEAP32[i2 + 128 >> 2] = 0;
  HEAP32[i2 + 132 >> 2] = 0;
  HEAP32[i2 + 136 >> 2] = 0;
  HEAP8[i2 + 140 >> 0] = 0;
  HEAP32[i2 + 136 >> 2] = i2 + 172;
  HEAP32[i2 + 128 >> 2] = i5;
  HEAP32[i2 + 132 >> 2] = i5;
  if (i4) {
   if ((i5 | 0) > 0) {
    i6 = HEAP32[i1 + 136 >> 2] | 0;
    i7 = 0;
    do {
     i11 = HEAPU16[i6 + (i7 << 4) >> 1] | 0;
     HEAP16[i2 + 172 + (i7 << 4) >> 1] = i11 >>> 8 | i11 << 8;
     i11 = HEAPU16[i6 + (i7 << 4) + 2 >> 1] | 0;
     HEAP16[i2 + 172 + (i7 << 4) + 2 >> 1] = i11 >>> 8 | i11 << 8;
     i11 = HEAPU16[i6 + (i7 << 4) + 4 >> 1] | 0;
     HEAP16[i2 + 172 + (i7 << 4) + 4 >> 1] = i11 >>> 8 | i11 << 8;
     i11 = HEAPU16[i6 + (i7 << 4) + 6 >> 1] | 0;
     HEAP16[i2 + 172 + (i7 << 4) + 6 >> 1] = i11 >>> 8 | i11 << 8;
     i11 = HEAPU16[i6 + (i7 << 4) + 8 >> 1] | 0;
     HEAP16[i2 + 172 + (i7 << 4) + 8 >> 1] = i11 >>> 8 | i11 << 8;
     i11 = HEAPU16[i6 + (i7 << 4) + 10 >> 1] | 0;
     HEAP16[i2 + 172 + (i7 << 4) + 10 >> 1] = i11 >>> 8 | i11 << 8;
     i11 = _llvm_bswap_i32(HEAP32[i6 + (i7 << 4) + 12 >> 2] | 0) | 0;
     HEAP32[i2 + 172 + (i7 << 4) + 12 >> 2] = i11;
     i7 = i7 + 1 | 0;
    } while ((i7 | 0) != (i5 | 0));
   }
  } else if ((i5 | 0) > 0) {
   i6 = HEAP32[i1 + 136 >> 2] | 0;
   i7 = 0;
   do {
    HEAP16[i2 + 172 + (i7 << 4) >> 1] = HEAP16[i6 + (i7 << 4) >> 1] | 0;
    HEAP16[i2 + 172 + (i7 << 4) + 2 >> 1] = HEAP16[i6 + (i7 << 4) + 2 >> 1] | 0;
    HEAP16[i2 + 172 + (i7 << 4) + 4 >> 1] = HEAP16[i6 + (i7 << 4) + 4 >> 1] | 0;
    HEAP16[i2 + 172 + (i7 << 4) + 6 >> 1] = HEAP16[i6 + (i7 << 4) + 6 >> 1] | 0;
    HEAP16[i2 + 172 + (i7 << 4) + 8 >> 1] = HEAP16[i6 + (i7 << 4) + 8 >> 1] | 0;
    HEAP16[i2 + 172 + (i7 << 4) + 10 >> 1] = HEAP16[i6 + (i7 << 4) + 10 >> 1] | 0;
    HEAP32[i2 + 172 + (i7 << 4) + 12 >> 2] = HEAP32[i6 + (i7 << 4) + 12 >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i5 | 0));
  }
  HEAP32[i2 + 128 >> 2] = 0;
  HEAP32[i2 + 132 >> 2] = 0;
  HEAP32[i2 + 136 >> 2] = 0;
  HEAP8[i2 + 140 >> 0] = 0;
  i5 = i5 << 4;
 }
 i5 = i2 + (i5 + 172) | 0;
 i7 = HEAP32[i1 + 168 >> 2] | 0;
 i6 = HEAP32[i2 + 160 >> 2] | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i2 + 164 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i6 + -4 >> 2] | 0);
  }
  HEAP32[i2 + 160 >> 2] = 0;
 }
 HEAP32[i2 + 152 >> 2] = 0;
 HEAP32[i2 + 156 >> 2] = 0;
 HEAP32[i2 + 160 >> 2] = 0;
 HEAP8[i2 + 164 >> 0] = 0;
 HEAP32[i2 + 160 >> 2] = i5;
 HEAP32[i2 + 152 >> 2] = i7;
 HEAP32[i2 + 156 >> 2] = i7;
 i6 = (HEAP32[i1 + 168 >> 2] | 0) > 0;
 if (i4) {
  if (!i6) {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 152 >> 2] = 0;
   HEAP32[i2 + 156 >> 2] = 0;
   HEAP32[i2 + 160 >> 2] = 0;
   HEAP8[i2 + 164 >> 0] = 0;
   STACKTOP = i3;
   return 1;
  }
  i6 = HEAP32[i1 + 160 >> 2] | 0;
  i4 = 0;
  do {
   i11 = HEAPU16[i6 + (i4 << 5) >> 1] | 0;
   HEAP16[i5 + (i4 << 5) >> 1] = i11 >>> 8 | i11 << 8;
   i11 = HEAPU16[i6 + (i4 << 5) + 2 >> 1] | 0;
   HEAP16[i5 + (i4 << 5) + 2 >> 1] = i11 >>> 8 | i11 << 8;
   i11 = HEAPU16[i6 + (i4 << 5) + 4 >> 1] | 0;
   HEAP16[i5 + (i4 << 5) + 4 >> 1] = i11 >>> 8 | i11 << 8;
   i11 = HEAPU16[i6 + (i4 << 5) + 6 >> 1] | 0;
   HEAP16[i5 + (i4 << 5) + 6 >> 1] = i11 >>> 8 | i11 << 8;
   i11 = HEAPU16[i6 + (i4 << 5) + 8 >> 1] | 0;
   HEAP16[i5 + (i4 << 5) + 8 >> 1] = i11 >>> 8 | i11 << 8;
   i11 = HEAPU16[i6 + (i4 << 5) + 10 >> 1] | 0;
   HEAP16[i5 + (i4 << 5) + 10 >> 1] = i11 >>> 8 | i11 << 8;
   i11 = _llvm_bswap_i32(HEAP32[i6 + (i4 << 5) + 12 >> 2] | 0) | 0;
   HEAP32[i5 + (i4 << 5) + 12 >> 2] = i11;
   i11 = _llvm_bswap_i32(HEAP32[i6 + (i4 << 5) + 16 >> 2] | 0) | 0;
   HEAP32[i5 + (i4 << 5) + 16 >> 2] = i11;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i1 + 168 >> 2] | 0));
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 152 >> 2] = 0;
  HEAP32[i2 + 156 >> 2] = 0;
  HEAP32[i2 + 160 >> 2] = 0;
  HEAP8[i2 + 164 >> 0] = 0;
  STACKTOP = i3;
  return 1;
 } else {
  if (!i6) {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 152 >> 2] = 0;
   HEAP32[i2 + 156 >> 2] = 0;
   HEAP32[i2 + 160 >> 2] = 0;
   HEAP8[i2 + 164 >> 0] = 0;
   STACKTOP = i3;
   return 1;
  }
  i4 = HEAP32[i1 + 160 >> 2] | 0;
  i6 = 0;
  do {
   HEAP16[i5 + (i6 << 5) >> 1] = HEAP16[i4 + (i6 << 5) >> 1] | 0;
   HEAP16[i5 + (i6 << 5) + 2 >> 1] = HEAP16[i4 + (i6 << 5) + 2 >> 1] | 0;
   HEAP16[i5 + (i6 << 5) + 4 >> 1] = HEAP16[i4 + (i6 << 5) + 4 >> 1] | 0;
   HEAP16[i5 + (i6 << 5) + 6 >> 1] = HEAP16[i4 + (i6 << 5) + 6 >> 1] | 0;
   HEAP16[i5 + (i6 << 5) + 8 >> 1] = HEAP16[i4 + (i6 << 5) + 8 >> 1] | 0;
   HEAP16[i5 + (i6 << 5) + 10 >> 1] = HEAP16[i4 + (i6 << 5) + 10 >> 1] | 0;
   HEAP32[i5 + (i6 << 5) + 12 >> 2] = HEAP32[i4 + (i6 << 5) + 12 >> 2];
   HEAP32[i5 + (i6 << 5) + 16 >> 2] = HEAP32[i4 + (i6 << 5) + 16 >> 2];
   HEAP32[i5 + (i6 << 5) + 20 >> 2] = 0;
   HEAP32[i5 + (i6 << 5) + 24 >> 2] = 0;
   HEAP32[i5 + (i6 << 5) + 28 >> 2] = 0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i1 + 168 >> 2] | 0));
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 152 >> 2] = 0;
  HEAP32[i2 + 156 >> 2] = 0;
  HEAP32[i2 + 160 >> 2] = 0;
  HEAP8[i2 + 164 >> 0] = 0;
  STACKTOP = i3;
  return 1;
 }
 return 0;
}
function __ZN12gjkepa2_impl3GJK8EvaluateERKNS_13MinkowskiDiffERK9btVector3(i1, i5, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, i28 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 HEAP32[i1 + 348 >> 2] = i1 + 220;
 HEAP32[i1 + 352 >> 2] = i1 + 252;
 HEAP32[i1 + 356 >> 2] = i1 + 284;
 HEAP32[i1 + 360 >> 2] = i1 + 316;
 HEAP32[i1 + 364 >> 2] = 4;
 HEAP32[i1 + 368 >> 2] = 0;
 HEAP32[i1 + 376 >> 2] = 0;
 i20 = HEAP32[i5 + 4 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = i20;
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i5 + 28 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i5 + 44 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i5 + 52 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i5 + 56 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i5 + 64 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i5 + 68 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i5 + 72 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i5 + 76 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i5 + 80 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i5 + 84 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i5 + 88 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i5 + 92 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i5 + 96 >> 2];
 HEAP32[i1 + 100 >> 2] = HEAP32[i5 + 100 >> 2];
 HEAP32[i1 + 104 >> 2] = HEAP32[i5 + 104 >> 2];
 HEAP32[i1 + 108 >> 2] = HEAP32[i5 + 108 >> 2];
 HEAP32[i1 + 112 >> 2] = HEAP32[i5 + 112 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i5 + 116 >> 2];
 i20 = HEAPU8[i5 + 120 >> 0] | HEAPU8[i5 + 121 >> 0] << 8 | HEAPU8[i5 + 122 >> 0] << 16 | HEAPU8[i5 + 123 >> 0] << 24;
 i21 = HEAPU8[i5 + 124 >> 0] | HEAPU8[i5 + 125 >> 0] << 8 | HEAPU8[i5 + 126 >> 0] << 16 | HEAPU8[i5 + 127 >> 0] << 24;
 HEAP8[i1 + 120 >> 0] = i20;
 HEAP8[i1 + 121 >> 0] = i20 >> 8;
 HEAP8[i1 + 122 >> 0] = i20 >> 16;
 HEAP8[i1 + 123 >> 0] = i20 >> 24;
 HEAP8[i1 + 124 >> 0] = i21;
 HEAP8[i1 + 125 >> 0] = i21 >> 8;
 HEAP8[i1 + 126 >> 0] = i21 >> 16;
 HEAP8[i1 + 127 >> 0] = i21 >> 24;
 HEAPF32[i1 + 144 >> 2] = 0.0;
 HEAP32[i1 + 180 >> 2] = 0;
 HEAP32[i1 + 128 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i1 + 132 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i1 + 136 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i1 + 140 >> 2] = HEAP32[i6 + 12 >> 2];
 d14 = +HEAPF32[i1 + 128 >> 2];
 d15 = +HEAPF32[i1 + 132 >> 2];
 d9 = +HEAPF32[i1 + 136 >> 2];
 if (d14 * d14 + d15 * d15 + d9 * d9 > 0.0) {
  d17 = -d14;
  d8 = -d15;
  d16 = -d9;
 } else {
  d17 = 1.0;
  d8 = 0.0;
  d16 = 0.0;
 }
 HEAPF32[i1 + 164 >> 2] = 0.0;
 HEAP32[i1 + 364 >> 2] = 3;
 HEAP32[i1 + 148 >> 2] = i1 + 316;
 HEAP32[i1 + 180 >> 2] = 1;
 __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i1, d17, d8, d16, i1 + 316 | 0);
 HEAPF32[i1 + 164 >> 2] = 1.0;
 i5 = (HEAP32[i1 + 148 >> 2] | 0) + 16 | 0;
 HEAP32[i1 + 128 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 132 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 136 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 140 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i2 + 72 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 76 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 80 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 84 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i2 + 56 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 64 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 68 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 48 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 52 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i5 + 12 >> 2];
 d8 = 0.0;
 i5 = 1;
 i6 = 1;
 d22 = d14 * d14 + d15 * d15 + d9 * d9;
 L4 : while (1) {
  i7 = HEAP32[i1 + 368 >> 2] | 0;
  d16 = +HEAPF32[i1 + 128 >> 2];
  d15 = +HEAPF32[i1 + 132 >> 2];
  d14 = +HEAPF32[i1 + 136 >> 2];
  d9 = +Math_sqrt(+(d16 * d16 + d15 * d15 + d14 * d14));
  if (d9 < 9999999747378752.0e-20) {
   i4 = 5;
   break;
  }
  HEAPF32[i1 + (i7 * 36 | 0) + (HEAP32[i1 + (i7 * 36 | 0) + 180 >> 2] << 2) + 164 >> 2] = 0.0;
  i10 = (HEAP32[i1 + 364 >> 2] | 0) + -1 | 0;
  HEAP32[i1 + 364 >> 2] = i10;
  HEAP32[i1 + (i7 * 36 | 0) + (HEAP32[i1 + (i7 * 36 | 0) + 180 >> 2] << 2) + 148 >> 2] = HEAP32[i1 + (i10 << 2) + 348 >> 2];
  i10 = HEAP32[i1 + (i7 * 36 | 0) + 180 >> 2] | 0;
  HEAP32[i1 + (i7 * 36 | 0) + 180 >> 2] = i10 + 1;
  __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i1, -d16, -d15, -d14, HEAP32[i1 + (i7 * 36 | 0) + (i10 << 2) + 148 >> 2] | 0);
  i10 = HEAP32[i1 + (i7 * 36 | 0) + 180 >> 2] | 0;
  i12 = HEAP32[i1 + (i7 * 36 | 0) + (i10 + -1 << 2) + 148 >> 2] | 0;
  d14 = +HEAPF32[i12 + 16 >> 2];
  d16 = +HEAPF32[i12 + 20 >> 2];
  d15 = +HEAPF32[i12 + 24 >> 2];
  i11 = 0;
  do {
   d17 = d14 - +HEAPF32[i2 + 24 + (i11 << 4) >> 2];
   d18 = d16 - +HEAPF32[i2 + 24 + (i11 << 4) + 4 >> 2];
   d19 = d15 - +HEAPF32[i2 + 24 + (i11 << 4) + 8 >> 2];
   i11 = i11 + 1 | 0;
   if (d17 * d17 + d18 * d18 + d19 * d19 < 9999999747378752.0e-20) {
    i4 = 9;
    break L4;
   }
  } while (i11 >>> 0 < 4);
  i21 = i2 + 24 + (i5 << 4) | 0;
  HEAP32[i21 + 0 >> 2] = HEAP32[i12 + 16 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i12 + 20 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i12 + 24 >> 2];
  HEAP32[i21 + 12 >> 2] = HEAP32[i12 + 28 >> 2];
  d19 = (+HEAPF32[i1 + 128 >> 2] * d14 + +HEAPF32[i1 + 132 >> 2] * d16 + +HEAPF32[i1 + 136 >> 2] * d15) / d9;
  d8 = d19 > d8 ? d19 : d8;
  if (d9 - d8 - d9 * 9999999747378752.0e-20 <= 0.0) {
   i4 = 11;
   break;
  }
  HEAP32[i2 >> 2] = 0;
  if ((i10 | 0) == 4) {
   i12 = HEAP32[i1 + (i7 * 36 | 0) + 148 >> 2] | 0;
   i13 = HEAP32[i1 + (i7 * 36 | 0) + 152 >> 2] | 0;
   i11 = HEAP32[i1 + (i7 * 36 | 0) + 156 >> 2] | 0;
   i10 = HEAP32[i1 + (i7 * 36 | 0) + 160 >> 2] | 0;
   HEAP32[i2 + 152 >> 2] = i12 + 16;
   HEAP32[i2 + 156 >> 2] = i13 + 16;
   HEAP32[i2 + 160 >> 2] = i11 + 16;
   HEAP32[i2 + 164 >> 2] = i10 + 16;
   d16 = +HEAPF32[i12 + 16 >> 2];
   d17 = +HEAPF32[i10 + 16 >> 2];
   d14 = +HEAPF32[i12 + 20 >> 2];
   d18 = +HEAPF32[i10 + 20 >> 2];
   d15 = +HEAPF32[i12 + 24 >> 2];
   d19 = +HEAPF32[i10 + 24 >> 2];
   HEAPF32[i2 + 104 >> 2] = d16 - d17;
   HEAPF32[i2 + 108 >> 2] = d14 - d18;
   HEAPF32[i2 + 112 >> 2] = d15 - d19;
   HEAPF32[i2 + 116 >> 2] = 0.0;
   d24 = +HEAPF32[i13 + 16 >> 2];
   d26 = +HEAPF32[i13 + 20 >> 2];
   d22 = +HEAPF32[i13 + 24 >> 2];
   HEAPF32[i2 + 120 >> 2] = d24 - d17;
   HEAPF32[i2 + 124 >> 2] = d26 - d18;
   HEAPF32[i2 + 128 >> 2] = d22 - d19;
   HEAPF32[i2 + 132 >> 2] = 0.0;
   d23 = +HEAPF32[i11 + 16 >> 2];
   d27 = +HEAPF32[i11 + 20 >> 2];
   d25 = +HEAPF32[i11 + 24 >> 2];
   HEAPF32[i2 + 136 >> 2] = d23 - d17;
   HEAPF32[i2 + 140 >> 2] = d27 - d18;
   HEAPF32[i2 + 144 >> 2] = d25 - d19;
   HEAPF32[i2 + 148 >> 2] = 0.0;
   d9 = (d14 - d18) * (d22 - d19) * (d23 - d17) + (d15 - d19) * (d24 - d17) * (d27 - d18) - (d27 - d18) * (d22 - d19) * (d16 - d17) - (d14 - d18) * (d24 - d17) * (d25 - d19) + (d25 - d19) * (d16 - d17) * (d26 - d18) - (d23 - d17) * (d15 - d19) * (d26 - d18);
   if (!(!(d9 * (d15 * ((d24 - d23) * (d14 - d26) - (d26 - d27) * (d16 - d24)) + (d16 * ((d26 - d27) * (d15 - d22) - (d22 - d25) * (d14 - d26)) + d14 * ((d22 - d25) * (d16 - d24) - (d24 - d23) * (d15 - d22)))) <= 0.0) | (d9 != d9 | 0.0 != 0.0 | d9 == 0.0))) {
    HEAP32[i2 + 92 >> 2] = 0;
    HEAP32[i2 + 96 >> 2] = 0;
    HEAP32[i2 + 100 >> 2] = 0;
    HEAP32[i2 + 88 >> 2] = 0;
    d14 = d14 - d18;
    d15 = d15 - d19;
    d16 = d16 - d17;
    i20 = 0;
    d22 = -1.0;
    while (1) {
     i21 = HEAP32[19552 + (i20 << 2) >> 2] | 0;
     d25 = +HEAPF32[i2 + 104 + (i21 << 4) + 8 >> 2];
     d26 = +HEAPF32[i2 + 104 + (i21 << 4) + 4 >> 2];
     d27 = +HEAPF32[i2 + 104 + (i21 << 4) >> 2];
     if (d9 * ((d14 * d25 - d15 * d26) * d17 + d18 * (d15 * d27 - d25 * d16) + (d26 * d16 - d14 * d27) * d19) > 0.0 ? (d3 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_PfRj(HEAP32[i2 + 152 + (i20 << 2) >> 2] | 0, HEAP32[i2 + 152 + (i21 << 2) >> 2] | 0, i10 + 16 | 0, i2 + 92 | 0, i2 + 88 | 0), d22 < 0.0 | d3 < d22) : 0) {
      i28 = HEAP32[i2 + 88 >> 2] | 0;
      HEAP32[i2 >> 2] = ((i28 & 2 | 0) == 0 ? 0 : 1 << i21) + (i28 << 1 & 8) + ((i28 & 1 | 0) == 0 ? 0 : 1 << i20);
      HEAPF32[i2 + 8 + (i20 << 2) >> 2] = +HEAPF32[i2 + 92 >> 2];
      HEAPF32[i2 + 8 + (i21 << 2) >> 2] = +HEAPF32[i2 + 96 >> 2];
      HEAPF32[i2 + 8 + (HEAP32[19552 + (i21 << 2) >> 2] << 2) >> 2] = 0.0;
      HEAPF32[i2 + 20 >> 2] = +HEAPF32[i2 + 100 >> 2];
      d22 = d3;
     }
     i20 = i20 + 1 | 0;
     if ((i20 | 0) == 3) break;
     d14 = +HEAPF32[i2 + 104 + (i20 << 4) + 4 >> 2];
     d15 = +HEAPF32[i2 + 104 + (i20 << 4) + 8 >> 2];
     d16 = +HEAPF32[i2 + 104 + (i20 << 4) >> 2];
     d17 = +HEAPF32[i10 + 16 >> 2];
     d18 = +HEAPF32[i10 + 20 >> 2];
     d19 = +HEAPF32[i10 + 24 >> 2];
    }
    if (d22 < 0.0) {
     HEAP32[i2 >> 2] = 15;
     d22 = +HEAPF32[i11 + 20 >> 2];
     d14 = +HEAPF32[i13 + 24 >> 2];
     d26 = +HEAPF32[i10 + 16 >> 2];
     d18 = +HEAPF32[i11 + 24 >> 2];
     d15 = +HEAPF32[i13 + 16 >> 2];
     d17 = +HEAPF32[i10 + 20 >> 2];
     d23 = +HEAPF32[i11 + 16 >> 2];
     d24 = +HEAPF32[i10 + 24 >> 2];
     d16 = +HEAPF32[i13 + 20 >> 2];
     HEAPF32[i2 + 8 >> 2] = (d22 * d14 * d26 + d18 * d15 * d17 - d17 * d14 * d23 - d22 * d15 * d24 + d24 * d23 * d16 - d26 * d18 * d16) / d9;
     d19 = +HEAPF32[i12 + 20 >> 2];
     d27 = +HEAPF32[i12 + 24 >> 2];
     d25 = +HEAPF32[i12 + 16 >> 2];
     HEAPF32[i2 + 12 >> 2] = (d19 * d18 * d26 + d27 * d23 * d17 - d17 * d18 * d25 - d19 * d23 * d24 + d24 * d25 * d22 - d26 * d27 * d22) / d9;
     HEAPF32[i2 + 16 >> 2] = (d16 * d27 * d26 + d14 * d25 * d17 - d17 * d27 * d15 - d16 * d25 * d24 + d24 * d15 * d19 - d26 * d14 * d19) / d9;
     HEAPF32[i2 + 20 >> 2] = 1.0 - ((d16 * d27 * d26 + d14 * d25 * d17 - d17 * d27 * d15 - d16 * d25 * d24 + d24 * d15 * d19 - d26 * d14 * d19) / d9 + ((d22 * d14 * d26 + d18 * d15 * d17 - d17 * d14 * d23 - d22 * d15 * d24 + d24 * d23 * d16 - d26 * d18 * d16) / d9 + (d19 * d18 * d26 + d27 * d23 * d17 - d17 * d18 * d25 - d19 * d23 * d24 + d24 * d25 * d22 - d26 * d27 * d22) / d9));
     d22 = 0.0;
    }
   } else d22 = -1.0;
  } else if ((i10 | 0) == 2) d22 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_PfRj((HEAP32[i1 + (i7 * 36 | 0) + 148 >> 2] | 0) + 16 | 0, (HEAP32[i1 + (i7 * 36 | 0) + 152 >> 2] | 0) + 16 | 0, i2 + 8 | 0, i2); else if ((i10 | 0) == 3) d22 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_PfRj((HEAP32[i1 + (i7 * 36 | 0) + 148 >> 2] | 0) + 16 | 0, (HEAP32[i1 + (i7 * 36 | 0) + 152 >> 2] | 0) + 16 | 0, (HEAP32[i1 + (i7 * 36 | 0) + 156 >> 2] | 0) + 16 | 0, i2 + 8 | 0, i2);
  if (!(d22 >= 0.0)) {
   i4 = 32;
   break;
  }
  HEAP32[i1 + ((1 - i7 | 0) * 36 | 0) + 180 >> 2] = 0;
  HEAP32[i1 + 128 >> 2] = 0;
  HEAP32[i1 + 132 >> 2] = 0;
  HEAP32[i1 + 136 >> 2] = 0;
  HEAP32[i1 + 140 >> 2] = 0;
  HEAP32[i1 + 368 >> 2] = 1 - i7;
  i20 = HEAP32[i1 + (i7 * 36 | 0) + 180 >> 2] | 0;
  i10 = HEAP32[i2 >> 2] | 0;
  if ((i20 | 0) != 0) {
   i13 = 0;
   do {
    i12 = i1 + (i7 * 36 | 0) + (i13 << 2) + 148 | 0;
    i11 = HEAP32[i12 >> 2] | 0;
    if ((i10 & 1 << i13 | 0) == 0) {
     i28 = HEAP32[i1 + 364 >> 2] | 0;
     HEAP32[i1 + 364 >> 2] = i28 + 1;
     HEAP32[i1 + (i28 << 2) + 348 >> 2] = i11;
    } else {
     HEAP32[i1 + ((1 - i7 | 0) * 36 | 0) + (HEAP32[i1 + ((1 - i7 | 0) * 36 | 0) + 180 >> 2] << 2) + 148 >> 2] = i11;
     d25 = +HEAPF32[i2 + 8 + (i13 << 2) >> 2];
     i28 = HEAP32[i1 + ((1 - i7 | 0) * 36 | 0) + 180 >> 2] | 0;
     HEAP32[i1 + ((1 - i7 | 0) * 36 | 0) + 180 >> 2] = i28 + 1;
     HEAPF32[i1 + ((1 - i7 | 0) * 36 | 0) + (i28 << 2) + 164 >> 2] = d25;
     i28 = HEAP32[i12 >> 2] | 0;
     d26 = d25 * +HEAPF32[i28 + 20 >> 2];
     d27 = d25 * +HEAPF32[i28 + 24 >> 2];
     HEAPF32[i1 + 128 >> 2] = +HEAPF32[i28 + 16 >> 2] * d25 + +HEAPF32[i1 + 128 >> 2];
     HEAPF32[i1 + 132 >> 2] = d26 + +HEAPF32[i1 + 132 >> 2];
     HEAPF32[i1 + 136 >> 2] = d27 + +HEAPF32[i1 + 136 >> 2];
    }
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != (i20 | 0));
  }
  if ((i10 | 0) == 15) HEAP32[i1 + 376 >> 2] = 1;
  if (!(i6 >>> 0 < 128)) {
   i4 = 34;
   break;
  }
  if ((HEAP32[i1 + 376 >> 2] | 0) != 0) break;
  i5 = i5 + 1 & 3;
  i6 = i6 + 1 | 0;
 }
 if ((i4 | 0) == 5) HEAP32[i1 + 376 >> 2] = 1; else if ((i4 | 0) == 9) {
  i28 = HEAP32[i1 + 368 >> 2] | 0;
  i21 = (HEAP32[i1 + (i28 * 36 | 0) + 180 >> 2] | 0) + -1 | 0;
  HEAP32[i1 + (i28 * 36 | 0) + 180 >> 2] = i21;
  i21 = HEAP32[i1 + (i28 * 36 | 0) + (i21 << 2) + 148 >> 2] | 0;
  i28 = HEAP32[i1 + 364 >> 2] | 0;
  HEAP32[i1 + 364 >> 2] = i28 + 1;
  HEAP32[i1 + (i28 << 2) + 348 >> 2] = i21;
 } else if ((i4 | 0) == 11) {
  i28 = HEAP32[i1 + 368 >> 2] | 0;
  i21 = (HEAP32[i1 + (i28 * 36 | 0) + 180 >> 2] | 0) + -1 | 0;
  HEAP32[i1 + (i28 * 36 | 0) + 180 >> 2] = i21;
  i21 = HEAP32[i1 + (i28 * 36 | 0) + (i21 << 2) + 148 >> 2] | 0;
  i28 = HEAP32[i1 + 364 >> 2] | 0;
  HEAP32[i1 + 364 >> 2] = i28 + 1;
  HEAP32[i1 + (i28 << 2) + 348 >> 2] = i21;
 } else if ((i4 | 0) == 32) {
  i28 = HEAP32[i1 + 368 >> 2] | 0;
  i21 = (HEAP32[i1 + (i28 * 36 | 0) + 180 >> 2] | 0) + -1 | 0;
  HEAP32[i1 + (i28 * 36 | 0) + 180 >> 2] = i21;
  i21 = HEAP32[i1 + (i28 * 36 | 0) + (i21 << 2) + 148 >> 2] | 0;
  i28 = HEAP32[i1 + 364 >> 2] | 0;
  HEAP32[i1 + 364 >> 2] = i28 + 1;
  HEAP32[i1 + (i28 << 2) + 348 >> 2] = i21;
 } else if ((i4 | 0) == 34) HEAP32[i1 + 376 >> 2] = 2;
 HEAP32[i1 + 372 >> 2] = i1 + ((HEAP32[i1 + 368 >> 2] | 0) * 36 | 0) + 148;
 i4 = HEAP32[i1 + 376 >> 2] | 0;
 if ((i4 | 0) == 1) {
  HEAPF32[i1 + 144 >> 2] = 0.0;
  STACKTOP = i2;
  return i4 | 0;
 } else if ((i4 | 0) == 0) {
  d25 = +HEAPF32[i1 + 128 >> 2];
  d26 = +HEAPF32[i1 + 132 >> 2];
  d27 = +HEAPF32[i1 + 136 >> 2];
  d27 = +Math_sqrt(+(d25 * d25 + d26 * d26 + d27 * d27));
  HEAPF32[i1 + 144 >> 2] = d27;
  STACKTOP = i2;
  return i4 | 0;
 } else {
  STACKTOP = i2;
  return i4 | 0;
 }
 return 0;
}
function __ZN23btDiscreteDynamicsWorld28internalSingleStepSimulationEf(i3, d2) {
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1632);
 i11 = HEAP32[i3 + 84 >> 2] | 0;
 if ((i11 | 0) != 0) FUNCTION_TABLE_vid[i11 & 31](i3, d2);
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[i3 >> 2] | 0) + 140 >> 2] & 31](i3, d2);
 HEAPF32[i3 + 28 >> 2] = d2;
 HEAP32[i3 + 32 >> 2] = 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i3) | 0;
 HEAP32[i3 + 48 >> 2] = i12;
 __ZN15CProfileManager13Start_ProfileEPKc(1768);
 __ZN15CProfileManager13Start_ProfileEPKc(1800);
 i12 = HEAP32[i3 + 316 >> 2] | 0;
 if ((HEAP32[i3 + 308 >> 2] | 0) > 0) {
  i11 = 0;
  do {
   i24 = HEAP32[i3 + 24 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i24 >> 2] | 0) + 16 >> 2] & 127](i24, HEAP32[i12 + (i11 << 2) >> 2] | 0);
   i11 = i11 + 1 | 0;
   i12 = HEAP32[i3 + 316 >> 2] | 0;
  } while ((i11 | 0) < (HEAP32[i3 + 308 >> 2] | 0));
 }
 if ((i12 | 0) != 0) {
  if ((HEAP8[i3 + 320 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i12 + -4 >> 2] | 0);
  }
  HEAP32[i3 + 316 >> 2] = 0;
 }
 HEAP8[i3 + 320 >> 0] = 1;
 HEAP32[i3 + 316 >> 2] = 0;
 HEAP32[i3 + 308 >> 2] = 0;
 HEAP32[i3 + 312 >> 2] = 0;
 i11 = HEAP32[5022] | 0;
 i24 = (HEAP32[i11 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i11 + 16 >> 2] = i24;
 do if ((i24 | 0) == 0) {
  if ((HEAP32[i11 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i1 + 280 | 0, 0) | 0;
   i24 = HEAP32[5008] | 0;
   HEAPF32[i11 + 8 >> 2] = +(((HEAP32[i1 + 284 >> 2] | 0) - (HEAP32[i24 + 4 >> 2] | 0) + (((HEAP32[i1 + 280 >> 2] | 0) - (HEAP32[i24 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i11 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i11 + 8 >> 2];
   if ((HEAP32[i11 + 16 >> 2] | 0) != 0) break;
   i11 = HEAP32[5022] | 0;
  }
  HEAP32[5022] = HEAP32[i11 + 20 >> 2];
 } while (0);
 if ((HEAP32[i3 + 232 >> 2] | 0) > 0) {
  i11 = i1 + 264 | 0;
  i14 = i1 + 164 | 0;
  i13 = i1 + 400 | 0;
  i12 = 0;
  do {
   i15 = HEAP32[(HEAP32[i3 + 240 >> 2] | 0) + (i12 << 2) >> 2] | 0;
   HEAPF32[i15 + 244 >> 2] = 1.0;
   i24 = HEAP32[i15 + 216 >> 2] | 0;
   do if (((!((i24 | 0) == 2 | (i24 | 0) == 5) ? (HEAP32[i15 + 204 >> 2] & 3 | 0) == 0 : 0) ? (__ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i15 + 4 | 0, +HEAPF32[i15 + 312 >> 2], +HEAPF32[i15 + 316 >> 2], +HEAPF32[i15 + 320 >> 2], i15 + 328 | 0, d2, i1 + 216 | 0), d7 = +HEAPF32[i11 >> 2], d4 = d7 - +HEAPF32[i15 + 52 >> 2], d8 = +HEAPF32[i1 + 268 >> 2], d5 = d8 - +HEAPF32[i15 + 56 >> 2], d9 = +HEAPF32[i1 + 272 >> 2], d6 = d9 - +HEAPF32[i15 + 60 >> 2], (HEAP8[i3 + 44 >> 0] | 0) != 0) : 0) ? (d20 = +HEAPF32[i15 + 252 >> 2], d20 * d20 != 0.0 ? d20 * d20 < d4 * d4 + d5 * d5 + d6 * d6 : 0) : 0) {
    __ZN15CProfileManager13Start_ProfileEPKc(1840);
    if ((HEAP32[(HEAP32[i15 + 192 >> 2] | 0) + 4 >> 2] | 0) < 20) {
     HEAP32[440] = (HEAP32[440] | 0) + 1;
     i23 = HEAP32[i3 + 68 >> 2] | 0;
     i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0;
     i24 = HEAP32[i3 + 24 >> 2] | 0;
     HEAPF32[i1 + 124 >> 2] = 1.0;
     HEAP16[i1 + 128 >> 1] = 1;
     HEAP16[i1 + 130 >> 1] = -1;
     HEAP32[i1 + 120 >> 2] = 688;
     HEAP32[i1 + 132 >> 2] = HEAP32[i15 + 52 >> 2];
     HEAP32[i1 + 136 >> 2] = HEAP32[i15 + 56 >> 2];
     HEAP32[i1 + 140 >> 2] = HEAP32[i15 + 60 >> 2];
     HEAP32[i1 + 144 >> 2] = HEAP32[i15 + 64 >> 2];
     HEAP32[i1 + 148 >> 2] = HEAP32[i11 + 0 >> 2];
     HEAP32[i1 + 152 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i1 + 156 >> 2] = HEAP32[i11 + 8 >> 2];
     HEAP32[i1 + 160 >> 2] = HEAP32[i11 + 12 >> 2];
     HEAP32[i1 + 196 >> 2] = 0;
     HEAP32[i1 + 120 >> 2] = 2160;
     HEAP32[i1 + 200 >> 2] = i15;
     HEAPF32[i1 + 204 >> 2] = 0.0;
     HEAP32[i1 + 208 >> 2] = i23;
     HEAP32[i1 + 212 >> 2] = i24;
     d18 = +HEAPF32[i15 + 248 >> 2];
     HEAP32[i1 + 72 >> 2] = 0;
     HEAPF32[i1 + 76 >> 2] = 1.0;
     HEAPF32[i1 + 80 >> 2] = 1.0;
     HEAPF32[i1 + 84 >> 2] = 1.0;
     HEAPF32[i1 + 88 >> 2] = 0.0;
     HEAP32[i1 + 64 >> 2] = 16680;
     HEAP32[i1 + 68 >> 2] = 8;
     HEAPF32[i1 + 92 >> 2] = d18;
     HEAPF32[i1 + 108 >> 2] = d18;
     HEAPF32[i1 + 204 >> 2] = +HEAPF32[i3 + 56 >> 2];
     i24 = HEAP32[i15 + 188 >> 2] | 0;
     HEAP16[i1 + 128 >> 1] = HEAP16[i24 + 4 >> 1] | 0;
     HEAP16[i1 + 130 >> 1] = HEAP16[i24 + 6 >> 1] | 0;
     HEAP32[i1 + 48 >> 2] = HEAP32[i11 + 0 >> 2];
     HEAP32[i1 + 52 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i1 + 56 >> 2] = HEAP32[i11 + 8 >> 2];
     HEAP32[i1 + 60 >> 2] = HEAP32[i11 + 12 >> 2];
     HEAP32[i1 + 0 >> 2] = HEAP32[i15 + 4 >> 2];
     HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 8 >> 2];
     HEAP32[i1 + 8 >> 2] = HEAP32[i15 + 12 >> 2];
     HEAP32[i1 + 12 >> 2] = HEAP32[i15 + 16 >> 2];
     HEAP32[i1 + 16 >> 2] = HEAP32[i15 + 20 >> 2];
     HEAP32[i1 + 20 >> 2] = HEAP32[i15 + 24 >> 2];
     HEAP32[i1 + 24 >> 2] = HEAP32[i15 + 28 >> 2];
     HEAP32[i1 + 28 >> 2] = HEAP32[i15 + 32 >> 2];
     HEAP32[i1 + 32 >> 2] = HEAP32[i15 + 36 >> 2];
     HEAP32[i1 + 36 >> 2] = HEAP32[i15 + 40 >> 2];
     HEAP32[i1 + 40 >> 2] = HEAP32[i15 + 44 >> 2];
     HEAP32[i1 + 44 >> 2] = HEAP32[i15 + 48 >> 2];
     __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i3, i1 + 64 | 0, i15 + 4 | 0, i1, i1 + 120 | 0, 0.0);
     d18 = +HEAPF32[i1 + 124 >> 2];
     if (d18 < 1.0) {
      d17 = d18 * (d7 - +HEAPF32[i15 + 52 >> 2]);
      d16 = d18 * (d8 - +HEAPF32[i15 + 56 >> 2]);
      d18 = d18 * (d9 - +HEAPF32[i15 + 60 >> 2]);
      d20 = -(d16 * +HEAPF32[i1 + 168 >> 2]) - d17 * +HEAPF32[i14 >> 2] - d18 * +HEAPF32[i1 + 172 >> 2];
      i19 = HEAP32[i3 + 24 >> 2] | 0;
      i19 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 12 >> 2] & 31](i19, i15, HEAP32[i1 + 196 >> 2] | 0) | 0;
      i22 = HEAP32[i3 + 308 >> 2] | 0;
      if ((i22 | 0) == (HEAP32[i3 + 312 >> 2] | 0) ? (i10 = (i22 | 0) == 0 ? 1 : i22 << 1, (i22 | 0) < (i10 | 0)) : 0) {
       if ((i10 | 0) == 0) i21 = 0; else {
        HEAP32[5004] = (HEAP32[5004] | 0) + 1;
        i21 = _malloc((i10 << 2 | 3) + 16 | 0) | 0;
        if ((i21 | 0) == 0) i21 = 0; else {
         HEAP32[(i21 + 19 & -16) + -4 >> 2] = i21;
         i21 = i21 + 19 & -16;
        }
        i22 = HEAP32[i3 + 308 >> 2] | 0;
       }
       if ((i22 | 0) > 0) {
        i23 = 0;
        do {
         i24 = i21 + (i23 << 2) | 0;
         if ((i24 | 0) != 0) HEAP32[i24 >> 2] = HEAP32[(HEAP32[i3 + 316 >> 2] | 0) + (i23 << 2) >> 2];
         i23 = i23 + 1 | 0;
        } while ((i23 | 0) != (i22 | 0));
       }
       i23 = HEAP32[i3 + 316 >> 2] | 0;
       if ((i23 | 0) != 0) {
        if ((HEAP8[i3 + 320 >> 0] | 0) != 0) {
         HEAP32[5006] = (HEAP32[5006] | 0) + 1;
         _free(HEAP32[i23 + -4 >> 2] | 0);
         i22 = HEAP32[i3 + 308 >> 2] | 0;
        }
        HEAP32[i3 + 316 >> 2] = 0;
       }
       HEAP8[i3 + 320 >> 0] = 1;
       HEAP32[i3 + 316 >> 2] = i21;
       HEAP32[i3 + 312 >> 2] = i10;
      }
      i21 = (HEAP32[i3 + 316 >> 2] | 0) + (i22 << 2) | 0;
      if ((i21 | 0) != 0) HEAP32[i21 >> 2] = i19;
      HEAP32[i3 + 308 >> 2] = i22 + 1;
      d25 = d17 + +HEAPF32[i15 + 52 >> 2];
      d17 = d16 + +HEAPF32[i15 + 56 >> 2];
      d18 = d18 + +HEAPF32[i15 + 60 >> 2];
      i24 = HEAP32[i1 + 196 >> 2] | 0;
      d36 = +HEAPF32[i24 + 4 >> 2];
      d35 = +HEAPF32[i24 + 20 >> 2];
      d34 = +HEAPF32[i24 + 36 >> 2];
      d33 = +HEAPF32[i24 + 8 >> 2];
      d32 = +HEAPF32[i24 + 24 >> 2];
      d31 = +HEAPF32[i24 + 40 >> 2];
      d30 = +HEAPF32[i24 + 12 >> 2];
      d28 = +HEAPF32[i24 + 28 >> 2];
      d26 = +HEAPF32[i24 + 44 >> 2];
      d29 = -+HEAPF32[i24 + 52 >> 2];
      d27 = -+HEAPF32[i24 + 56 >> 2];
      d16 = -+HEAPF32[i24 + 60 >> 2];
      HEAP32[i1 + 280 >> 2] = 0;
      HEAP32[i1 + 284 >> 2] = 0;
      HEAP32[i1 + 288 >> 2] = 0;
      HEAP32[i1 + 292 >> 2] = 0;
      HEAPF32[i1 + 296 >> 2] = d25 * d36 + d17 * d35 + d18 * d34 + (d36 * d29 + d35 * d27 + d34 * d16);
      HEAPF32[i1 + 300 >> 2] = d25 * d33 + d17 * d32 + d18 * d31 + (d33 * d29 + d32 * d27 + d31 * d16);
      HEAPF32[i1 + 304 >> 2] = d25 * d30 + d17 * d28 + d18 * d26 + (d30 * d29 + d28 * d27 + d26 * d16);
      HEAPF32[i1 + 308 >> 2] = 0.0;
      HEAP32[i1 + 344 >> 2] = HEAP32[i14 + 0 >> 2];
      HEAP32[i1 + 348 >> 2] = HEAP32[i14 + 4 >> 2];
      HEAP32[i1 + 352 >> 2] = HEAP32[i14 + 8 >> 2];
      HEAP32[i1 + 356 >> 2] = HEAP32[i14 + 12 >> 2];
      HEAPF32[i1 + 360 >> 2] = d20;
      HEAPF32[i1 + 364 >> 2] = 0.0;
      HEAPF32[i1 + 368 >> 2] = 0.0;
      HEAPF32[i1 + 372 >> 2] = 0.0;
      HEAP32[i1 + 392 >> 2] = 0;
      HEAP8[i1 + 396 >> 0] = 0;
      HEAP32[i13 + 0 >> 2] = 0;
      HEAP32[i13 + 4 >> 2] = 0;
      HEAP32[i13 + 8 >> 2] = 0;
      HEAP32[i13 + 12 >> 2] = 0;
      HEAP32[i13 + 16 >> 2] = 0;
      HEAP32[i13 + 20 >> 2] = 0;
      HEAP32[i13 + 24 >> 2] = 0;
      HEAP32[i13 + 28 >> 2] = 0;
      i24 = __ZN20btPersistentManifold16addManifoldPointERK15btManifoldPointb(i19, i1 + 280 | 0) | 0;
      HEAPF32[i19 + (i24 * 184 | 0) + 96 >> 2] = 0.0;
      d20 = +HEAPF32[i15 + 224 >> 2] * +HEAPF32[(HEAP32[i1 + 196 >> 2] | 0) + 224 >> 2];
      d20 = d20 < -10.0 ? -10.0 : d20;
      HEAPF32[i19 + (i24 * 184 | 0) + 88 >> 2] = d20 > 10.0 ? 10.0 : d20;
      HEAP32[i19 + (i24 * 184 | 0) + 52 >> 2] = HEAP32[i15 + 52 >> 2];
      HEAP32[i19 + (i24 * 184 | 0) + 56 >> 2] = HEAP32[i15 + 56 >> 2];
      HEAP32[i19 + (i24 * 184 | 0) + 60 >> 2] = HEAP32[i15 + 60 >> 2];
      HEAP32[i19 + (i24 * 184 | 0) + 64 >> 2] = HEAP32[i15 + 64 >> 2];
      HEAPF32[i19 + (i24 * 184 | 0) + 36 >> 2] = d25;
      HEAPF32[i19 + (i24 * 184 | 0) + 40 >> 2] = d17;
      HEAPF32[i19 + (i24 * 184 | 0) + 44 >> 2] = d18;
      HEAPF32[i19 + (i24 * 184 | 0) + 48 >> 2] = 0.0;
     }
    }
    i15 = HEAP32[5022] | 0;
    i24 = (HEAP32[i15 + 16 >> 2] | 0) + -1 | 0;
    HEAP32[i15 + 16 >> 2] = i24;
    if ((i24 | 0) == 0) {
     if ((HEAP32[i15 + 4 >> 2] | 0) != 0) {
      _gettimeofday(i1 + 280 | 0, 0) | 0;
      i24 = HEAP32[5008] | 0;
      HEAPF32[i15 + 8 >> 2] = +(((HEAP32[i1 + 284 >> 2] | 0) - (HEAP32[i24 + 4 >> 2] | 0) + (((HEAP32[i1 + 280 >> 2] | 0) - (HEAP32[i24 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i15 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i15 + 8 >> 2];
      if ((HEAP32[i15 + 16 >> 2] | 0) != 0) break;
      i15 = HEAP32[5022] | 0;
     }
     HEAP32[5022] = HEAP32[i15 + 20 >> 2];
    }
   } while (0);
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) < (HEAP32[i3 + 232 >> 2] | 0));
 }
 i10 = HEAP32[5022] | 0;
 i24 = (HEAP32[i10 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i10 + 16 >> 2] = i24;
 do if ((i24 | 0) == 0) {
  if ((HEAP32[i10 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i1 + 280 | 0, 0) | 0;
   i24 = HEAP32[5008] | 0;
   HEAPF32[i10 + 8 >> 2] = +(((HEAP32[i1 + 284 >> 2] | 0) - (HEAP32[i24 + 4 >> 2] | 0) + (((HEAP32[i1 + 280 >> 2] | 0) - (HEAP32[i24 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i10 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i10 + 8 >> 2];
   if ((HEAP32[i10 + 16 >> 2] | 0) != 0) break;
   i10 = HEAP32[5022] | 0;
  }
  HEAP32[5022] = HEAP32[i10 + 20 >> 2];
 } while (0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 511](i3);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 148 >> 2] & 511](i3);
 HEAPF32[i3 + 104 >> 2] = d2;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 152 >> 2] & 127](i3, i3 + 92 | 0);
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[i3 >> 2] | 0) + 144 >> 2] & 31](i3, d2);
 __ZN15CProfileManager13Start_ProfileEPKc(1664);
 if ((HEAP32[i3 + 280 >> 2] | 0) > 0) {
  i10 = 0;
  do {
   i24 = HEAP32[(HEAP32[i3 + 288 >> 2] | 0) + (i10 << 2) >> 2] | 0;
   FUNCTION_TABLE_viid[HEAP32[(HEAP32[i24 >> 2] | 0) + 8 >> 2] & 7](i24, i3, d2);
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (HEAP32[i3 + 280 >> 2] | 0));
 }
 i10 = HEAP32[5022] | 0;
 i24 = (HEAP32[i10 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i10 + 16 >> 2] = i24;
 do if ((i24 | 0) == 0) {
  if ((HEAP32[i10 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i1 + 280 | 0, 0) | 0;
   i24 = HEAP32[5008] | 0;
   HEAPF32[i10 + 8 >> 2] = +(((HEAP32[i1 + 284 >> 2] | 0) - (HEAP32[i24 + 4 >> 2] | 0) + (((HEAP32[i1 + 280 >> 2] | 0) - (HEAP32[i24 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i10 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i10 + 8 >> 2];
   if ((HEAP32[i10 + 16 >> 2] | 0) != 0) break;
   i10 = HEAP32[5022] | 0;
  }
  HEAP32[5022] = HEAP32[i10 + 20 >> 2];
 } while (0);
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[i3 >> 2] | 0) + 156 >> 2] & 31](i3, d2);
 i10 = HEAP32[i3 + 80 >> 2] | 0;
 if ((i10 | 0) != 0) FUNCTION_TABLE_vid[i10 & 31](i3, d2);
 i3 = HEAP32[5022] | 0;
 i24 = (HEAP32[i3 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i3 + 16 >> 2] = i24;
 if ((i24 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i3 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 + 280 | 0, 0) | 0;
  i24 = HEAP32[5008] | 0;
  HEAPF32[i3 + 8 >> 2] = +(((HEAP32[i1 + 284 >> 2] | 0) - (HEAP32[i24 + 4 >> 2] | 0) + (((HEAP32[i1 + 280 >> 2] | 0) - (HEAP32[i24 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i3 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i3 + 8 >> 2];
  if ((HEAP32[i3 + 16 >> 2] | 0) == 0) {
   i3 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i3 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i3, i4, i5, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, i32 = 0, i33 = 0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, i46 = 0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((HEAP32[i3 + 12 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i25 = (HEAP8[i3 + 16 >> 0] | 0) != 0;
 i33 = i25 ? i5 : i4;
 i25 = i25 ? i4 : i5;
 i11 = HEAP32[i33 + 4 >> 2] | 0;
 i6 = HEAP32[i25 + 4 >> 2] | 0;
 i33 = HEAP32[i33 + 12 >> 2] | 0;
 d13 = +HEAPF32[i33 >> 2];
 d26 = +HEAPF32[i33 + 16 >> 2];
 d22 = +HEAPF32[i33 + 32 >> 2];
 d16 = +HEAPF32[i33 + 4 >> 2];
 d15 = +HEAPF32[i33 + 20 >> 2];
 d14 = +HEAPF32[i33 + 36 >> 2];
 d12 = +HEAPF32[i33 + 8 >> 2];
 d10 = +HEAPF32[i33 + 24 >> 2];
 d21 = +HEAPF32[i33 + 40 >> 2];
 d28 = +HEAPF32[i33 + 48 >> 2];
 d29 = +HEAPF32[i33 + 52 >> 2];
 d30 = +HEAPF32[i33 + 56 >> 2];
 i33 = HEAP32[i25 + 12 >> 2] | 0;
 d37 = +HEAPF32[i33 >> 2];
 d36 = +HEAPF32[i33 + 16 >> 2];
 d7 = +HEAPF32[i33 + 32 >> 2];
 d35 = +HEAPF32[i33 + 4 >> 2];
 d34 = +HEAPF32[i33 + 20 >> 2];
 d20 = +HEAPF32[i33 + 36 >> 2];
 d9 = +HEAPF32[i33 + 8 >> 2];
 d24 = +HEAPF32[i33 + 24 >> 2];
 d18 = +HEAPF32[i33 + 40 >> 2];
 d31 = -+HEAPF32[i33 + 48 >> 2];
 d27 = -+HEAPF32[i33 + 52 >> 2];
 d17 = -+HEAPF32[i33 + 56 >> 2];
 i33 = HEAP32[(HEAP32[i11 >> 2] | 0) + 64 >> 2] | 0;
 d23 = -+HEAPF32[i6 + 48 >> 2];
 d8 = -+HEAPF32[i6 + 52 >> 2];
 d19 = -+HEAPF32[i6 + 56 >> 2];
 HEAPF32[i2 + 32 >> 2] = (d13 * d37 + d26 * d36 + d22 * d7) * d23 + (d13 * d35 + d26 * d34 + d22 * d20) * d8 + (d13 * d9 + d26 * d24 + d22 * d18) * d19;
 HEAPF32[i2 + 36 >> 2] = (d16 * d37 + d15 * d36 + d14 * d7) * d23 + (d16 * d35 + d15 * d34 + d14 * d20) * d8 + (d16 * d9 + d15 * d24 + d14 * d18) * d19;
 HEAPF32[i2 + 40 >> 2] = (d12 * d37 + d10 * d36 + d21 * d7) * d23 + (d12 * d35 + d10 * d34 + d21 * d20) * d8 + (d12 * d9 + d10 * d24 + d21 * d18) * d19;
 HEAPF32[i2 + 44 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i33 & 127](i2 + 48 | 0, i11, i2 + 32 | 0);
 d19 = +HEAPF32[i2 + 48 >> 2];
 d8 = +HEAPF32[i2 + 52 >> 2];
 d23 = +HEAPF32[i2 + 56 >> 2];
 d7 = d28 * d37 + d29 * d36 + d30 * d7 + (d37 * d31 + d36 * d27 + d7 * d17) + ((d13 * d37 + d26 * d36 + d22 * d7) * d19 + (d16 * d37 + d15 * d36 + d14 * d7) * d8 + (d12 * d37 + d10 * d36 + d21 * d7) * d23);
 d20 = d28 * d35 + d29 * d34 + d30 * d20 + (d35 * d31 + d34 * d27 + d20 * d17) + ((d13 * d35 + d26 * d34 + d22 * d20) * d19 + (d16 * d35 + d15 * d34 + d14 * d20) * d8 + (d12 * d35 + d10 * d34 + d21 * d20) * d23);
 d23 = d28 * d9 + d29 * d24 + d30 * d18 + (d9 * d31 + d24 * d27 + d18 * d17) + ((d13 * d9 + d26 * d24 + d22 * d18) * d19 + (d16 * d9 + d15 * d24 + d14 * d18) * d8 + (d12 * d9 + d10 * d24 + d21 * d18) * d23);
 d18 = +HEAPF32[i6 + 48 >> 2];
 d21 = +HEAPF32[i6 + 52 >> 2];
 d24 = +HEAPF32[i6 + 56 >> 2];
 d10 = d24 * d23 + (d18 * d7 + d21 * d20) - +HEAPF32[i6 + 64 >> 2];
 i33 = HEAP32[i25 + 12 >> 2] | 0;
 d9 = +HEAPF32[i33 >> 2];
 d12 = +HEAPF32[i33 + 4 >> 2];
 d8 = +HEAPF32[i33 + 8 >> 2];
 d14 = +HEAPF32[i33 + 16 >> 2];
 d15 = +HEAPF32[i33 + 20 >> 2];
 d16 = +HEAPF32[i33 + 24 >> 2];
 d19 = +HEAPF32[i33 + 32 >> 2];
 d22 = +HEAPF32[i33 + 36 >> 2];
 d26 = +HEAPF32[i33 + 40 >> 2];
 d13 = +HEAPF32[i33 + 48 >> 2];
 d17 = +HEAPF32[i33 + 52 >> 2];
 d27 = +HEAPF32[i33 + 56 >> 2];
 i33 = HEAP32[i3 + 12 >> 2] | 0;
 i32 = d10 < +HEAPF32[i33 + 752 >> 2];
 HEAP32[i1 + 4 >> 2] = i33;
 if (i32) {
  i33 = HEAP32[i25 + 12 >> 2] | 0;
  d36 = d18 * +HEAPF32[i33 + 16 >> 2] + d21 * +HEAPF32[i33 + 20 >> 2] + d24 * +HEAPF32[i33 + 24 >> 2];
  d37 = d18 * +HEAPF32[i33 + 32 >> 2] + d21 * +HEAPF32[i33 + 36 >> 2] + d24 * +HEAPF32[i33 + 40 >> 2];
  HEAPF32[i2 + 16 >> 2] = +HEAPF32[i33 >> 2] * d18 + +HEAPF32[i33 + 4 >> 2] * d21 + +HEAPF32[i33 + 8 >> 2] * d24;
  HEAPF32[i2 + 20 >> 2] = d36;
  HEAPF32[i2 + 24 >> 2] = d37;
  HEAPF32[i2 + 28 >> 2] = 0.0;
  HEAPF32[i2 >> 2] = d8 * (d23 - d24 * d10) + (d9 * (d7 - d18 * d10) + d12 * (d20 - d21 * d10)) + d13;
  HEAPF32[i2 + 4 >> 2] = (d7 - d18 * d10) * d14 + (d20 - d21 * d10) * d15 + (d23 - d24 * d10) * d16 + d17;
  HEAPF32[i2 + 8 >> 2] = (d7 - d18 * d10) * d19 + (d20 - d21 * d10) * d22 + (d23 - d24 * d10) * d26 + d27;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 15](i1, i2 + 16 | 0, i2, d10);
 }
 if ((HEAP32[i11 + 4 >> 2] | 0) < 7 ? (HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 748 >> 2] | 0) < (HEAP32[i3 + 24 >> 2] | 0) : 0) {
  d8 = +HEAPF32[i6 + 56 >> 2];
  if (+Math_abs(+d8) > .7071067690849304) {
   d37 = +HEAPF32[i6 + 52 >> 2];
   d9 = 1.0 / +Math_sqrt(+(d8 * d8 + d37 * d37));
   d7 = 0.0;
   d8 = -(d8 * d9);
   d9 = d37 * d9;
  } else {
   d9 = +HEAPF32[i6 + 48 >> 2];
   d7 = +HEAPF32[i6 + 52 >> 2];
   d8 = 1.0 / +Math_sqrt(+(d9 * d9 + d7 * d7));
   d7 = -(d7 * d8);
   d8 = d9 * d8;
   d9 = 0.0;
  }
  d37 = .019999999552965164 / +FUNCTION_TABLE_di[HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] & 15](i11);
  d10 = +Math_sqrt(+(d9 * d9 + (d8 * d8 + d7 * d7)));
  d37 = d37 > .39269909262657166 ? .19634954631328583 : d37 * .5;
  d10 = +Math_sin(+d37) / d10;
  d7 = d7 * d10;
  d8 = d8 * d10;
  d10 = d9 * d10;
  d9 = +Math_cos(+d37);
  i25 = HEAP32[i3 + 20 >> 2] | 0;
  if ((i25 | 0) > 0) {
   i11 = 0;
   do {
    d13 = +HEAPF32[i6 + 48 >> 2];
    d37 = +HEAPF32[i6 + 52 >> 2];
    d12 = +HEAPF32[i6 + 56 >> 2];
    d20 = +(i11 | 0) * (6.2831854820251465 / +(i25 | 0)) * .5;
    d36 = +Math_sin(+d20) / +Math_sqrt(+(d13 * d13 + d37 * d37 + d12 * d12));
    d20 = +Math_cos(+d20);
    d22 = d10 * -(d37 * d36) + (d7 * d20 + d9 * -(d13 * d36)) - d8 * -(d12 * d36);
    d15 = d7 * -(d12 * d36) + (d8 * d20 + d9 * -(d37 * d36)) - d10 * -(d13 * d36);
    d52 = d8 * -(d13 * d36) + (d10 * d20 + d9 * -(d12 * d36)) - d7 * -(d37 * d36);
    d23 = d9 * d20 - d7 * -(d13 * d36) - d8 * -(d37 * d36) - d10 * -(d12 * d36);
    d27 = d12 * d36 * d15 + (d13 * d36 * d23 + d20 * d22) - d37 * d36 * d52;
    d26 = d13 * d36 * d52 + (d20 * d15 + d37 * d36 * d23) - d12 * d36 * d22;
    d48 = d37 * d36 * d22 + (d12 * d36 * d23 + d20 * d52) - d13 * d36 * d15;
    d52 = d20 * d23 - d13 * d36 * d22 - d37 * d36 * d15 - d12 * d36 * d52;
    i25 = (HEAP8[i3 + 16 >> 0] | 0) != 0;
    i46 = i25 ? i5 : i4;
    i25 = i25 ? i4 : i5;
    i33 = HEAP32[i46 + 4 >> 2] | 0;
    i32 = HEAP32[i25 + 4 >> 2] | 0;
    i46 = HEAP32[i46 + 12 >> 2] | 0;
    d36 = +HEAPF32[i46 >> 2];
    d12 = +HEAPF32[i46 + 4 >> 2];
    d15 = +HEAPF32[i46 + 8 >> 2];
    d37 = +HEAPF32[i46 + 16 >> 2];
    d22 = +HEAPF32[i46 + 20 >> 2];
    d13 = +HEAPF32[i46 + 24 >> 2];
    d23 = +HEAPF32[i46 + 32 >> 2];
    d20 = +HEAPF32[i46 + 36 >> 2];
    d30 = +HEAPF32[i46 + 40 >> 2];
    d41 = +HEAPF32[i46 + 48 >> 2];
    d40 = +HEAPF32[i46 + 52 >> 2];
    d39 = +HEAPF32[i46 + 56 >> 2];
    i46 = HEAP32[i25 + 12 >> 2] | 0;
    d45 = +HEAPF32[i46 >> 2];
    d44 = +HEAPF32[i46 + 16 >> 2];
    d17 = +HEAPF32[i46 + 32 >> 2];
    d43 = +HEAPF32[i46 + 4 >> 2];
    d42 = +HEAPF32[i46 + 20 >> 2];
    d19 = +HEAPF32[i46 + 36 >> 2];
    d14 = +HEAPF32[i46 + 8 >> 2];
    d28 = +HEAPF32[i46 + 24 >> 2];
    d29 = +HEAPF32[i46 + 40 >> 2];
    d38 = -+HEAPF32[i46 + 48 >> 2];
    d34 = -+HEAPF32[i46 + 52 >> 2];
    d35 = -+HEAPF32[i46 + 56 >> 2];
    d16 = d27 * (2.0 / (d27 * d27 + d26 * d26 + d48 * d48 + d52 * d52));
    d31 = d26 * (2.0 / (d27 * d27 + d26 * d26 + d48 * d48 + d52 * d52));
    d53 = d48 * (2.0 / (d27 * d27 + d26 * d26 + d48 * d48 + d52 * d52));
    d50 = d15 * (d27 * d53 - d52 * d31) + (d12 * (d27 * d31 + d52 * d53) + d36 * (1.0 - (d26 * d31 + d48 * d53)));
    d47 = d15 * (d26 * d53 + d52 * d16) + (d36 * (d27 * d31 - d52 * d53) + d12 * (1.0 - (d27 * d16 + d48 * d53)));
    d21 = d36 * (d27 * d53 + d52 * d31) + d12 * (d26 * d53 - d52 * d16) + d15 * (1.0 - (d27 * d16 + d26 * d31));
    d49 = d13 * (d27 * d53 - d52 * d31) + (d22 * (d27 * d31 + d52 * d53) + d37 * (1.0 - (d26 * d31 + d48 * d53)));
    d24 = d13 * (d26 * d53 + d52 * d16) + (d37 * (d27 * d31 - d52 * d53) + d22 * (1.0 - (d27 * d16 + d48 * d53)));
    d18 = d37 * (d27 * d53 + d52 * d31) + d22 * (d26 * d53 - d52 * d16) + d13 * (1.0 - (d27 * d16 + d26 * d31));
    d51 = d30 * (d27 * d53 - d52 * d31) + (d20 * (d27 * d31 + d52 * d53) + d23 * (1.0 - (d26 * d31 + d48 * d53)));
    d48 = d30 * (d26 * d53 + d52 * d16) + (d23 * (d27 * d31 - d52 * d53) + d20 * (1.0 - (d27 * d16 + d48 * d53)));
    d31 = d23 * (d27 * d53 + d52 * d31) + d20 * (d26 * d53 - d52 * d16) + d30 * (1.0 - (d27 * d16 + d26 * d31));
    i46 = HEAP32[(HEAP32[i33 >> 2] | 0) + 64 >> 2] | 0;
    d26 = -+HEAPF32[i32 + 48 >> 2];
    d16 = -+HEAPF32[i32 + 52 >> 2];
    d27 = -+HEAPF32[i32 + 56 >> 2];
    HEAPF32[i2 + 96 >> 2] = (d29 * d51 + (d14 * d50 + d28 * d49)) * d27 + ((d17 * d51 + (d45 * d50 + d44 * d49)) * d26 + (d19 * d51 + (d43 * d50 + d42 * d49)) * d16);
    HEAPF32[i2 + 100 >> 2] = (d29 * d48 + (d14 * d47 + d28 * d24)) * d27 + ((d17 * d48 + (d45 * d47 + d44 * d24)) * d26 + (d19 * d48 + (d43 * d47 + d42 * d24)) * d16);
    HEAPF32[i2 + 104 >> 2] = (d29 * d31 + (d14 * d21 + d28 * d18)) * d27 + ((d17 * d31 + (d45 * d21 + d44 * d18)) * d26 + (d19 * d31 + (d43 * d21 + d42 * d18)) * d16);
    HEAPF32[i2 + 108 >> 2] = 0.0;
    FUNCTION_TABLE_viii[i46 & 127](i2 + 112 | 0, i33, i2 + 96 | 0);
    d16 = +HEAPF32[i2 + 112 >> 2];
    d18 = +HEAPF32[i2 + 116 >> 2];
    d21 = +HEAPF32[i2 + 120 >> 2];
    d31 = +HEAPF32[i32 + 48 >> 2];
    d26 = +HEAPF32[i32 + 52 >> 2];
    d27 = +HEAPF32[i32 + 56 >> 2];
    d24 = d27 * (d41 * d14 + d40 * d28 + d39 * d29 + (d14 * d38 + d28 * d34 + d29 * d35) + ((d36 * d14 + d37 * d28 + d23 * d29) * d16 + (d12 * d14 + d22 * d28 + d20 * d29) * d18 + (d15 * d14 + d13 * d28 + d30 * d29) * d21)) + (d31 * (d41 * d45 + d40 * d44 + d39 * d17 + (d45 * d38 + d44 * d34 + d17 * d35) + ((d36 * d45 + d37 * d44 + d23 * d17) * d16 + (d12 * d45 + d22 * d44 + d20 * d17) * d18 + (d15 * d45 + d13 * d44 + d30 * d17) * d21)) + d26 * (d41 * d43 + d40 * d42 + d39 * d19 + (d43 * d38 + d42 * d34 + d19 * d35) + ((d36 * d43 + d37 * d42 + d23 * d19) * d16 + (d12 * d43 + d22 * d42 + d20 * d19) * d18 + (d15 * d43 + d13 * d42 + d30 * d19) * d21))) - +HEAPF32[i32 + 64 >> 2];
    d17 = d41 * d45 + d40 * d44 + d39 * d17 + (d45 * d38 + d44 * d34 + d17 * d35) + ((d36 * d45 + d37 * d44 + d23 * d17) * d16 + (d12 * d45 + d22 * d44 + d20 * d17) * d18 + (d15 * d45 + d13 * d44 + d30 * d17) * d21) - d31 * d24;
    d19 = d41 * d43 + d40 * d42 + d39 * d19 + (d43 * d38 + d42 * d34 + d19 * d35) + ((d36 * d43 + d37 * d42 + d23 * d19) * d16 + (d12 * d43 + d22 * d42 + d20 * d19) * d18 + (d15 * d43 + d13 * d42 + d30 * d19) * d21) - d26 * d24;
    d21 = d41 * d14 + d40 * d28 + d39 * d29 + (d14 * d38 + d28 * d34 + d29 * d35) + ((d36 * d14 + d37 * d28 + d23 * d29) * d16 + (d12 * d14 + d22 * d28 + d20 * d29) * d18 + (d15 * d14 + d13 * d28 + d30 * d29) * d21) - d27 * d24;
    i32 = HEAP32[i25 + 12 >> 2] | 0;
    d29 = +HEAPF32[i32 >> 2];
    d30 = +HEAPF32[i32 + 4 >> 2];
    d28 = +HEAPF32[i32 + 8 >> 2];
    d13 = +HEAPF32[i32 + 16 >> 2];
    d14 = +HEAPF32[i32 + 20 >> 2];
    d15 = +HEAPF32[i32 + 24 >> 2];
    d18 = +HEAPF32[i32 + 32 >> 2];
    d20 = +HEAPF32[i32 + 36 >> 2];
    d22 = +HEAPF32[i32 + 40 >> 2];
    d12 = +HEAPF32[i32 + 48 >> 2];
    d16 = +HEAPF32[i32 + 52 >> 2];
    d23 = +HEAPF32[i32 + 56 >> 2];
    i32 = HEAP32[i3 + 12 >> 2] | 0;
    i33 = d24 < +HEAPF32[i32 + 752 >> 2];
    HEAP32[i1 + 4 >> 2] = i32;
    if (i33) {
     i46 = HEAP32[i25 + 12 >> 2] | 0;
     d52 = d31 * +HEAPF32[i46 + 16 >> 2] + d26 * +HEAPF32[i46 + 20 >> 2] + d27 * +HEAPF32[i46 + 24 >> 2];
     d53 = d31 * +HEAPF32[i46 + 32 >> 2] + d26 * +HEAPF32[i46 + 36 >> 2] + d27 * +HEAPF32[i46 + 40 >> 2];
     HEAPF32[i2 + 80 >> 2] = +HEAPF32[i46 >> 2] * d31 + +HEAPF32[i46 + 4 >> 2] * d26 + +HEAPF32[i46 + 8 >> 2] * d27;
     HEAPF32[i2 + 84 >> 2] = d52;
     HEAPF32[i2 + 88 >> 2] = d53;
     HEAPF32[i2 + 92 >> 2] = 0.0;
     HEAPF32[i2 + 64 >> 2] = d28 * d21 + (d29 * d17 + d30 * d19) + d12;
     HEAPF32[i2 + 68 >> 2] = d17 * d13 + d19 * d14 + d21 * d15 + d16;
     HEAPF32[i2 + 72 >> 2] = d17 * d18 + d19 * d20 + d21 * d22 + d23;
     HEAPF32[i2 + 76 >> 2] = 0.0;
     FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 15](i1, i2 + 80 | 0, i2 + 64 | 0, d24);
    }
    i11 = i11 + 1 | 0;
    i25 = HEAP32[i3 + 20 >> 2] | 0;
   } while ((i11 | 0) < (i25 | 0));
  }
 }
 if ((HEAP8[i3 + 8 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 748 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((HEAP32[i3 + 748 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 + 740 >> 2] | 0;
 i5 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 8 >> 2] | 0;
 if ((i4 | 0) == (i5 | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i4 + 4 | 0, (HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
  STACKTOP = i2;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, (HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i5 + 4 | 0);
  STACKTOP = i2;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolver20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw(i1, i8, i10, i12, i9, i2, i5, i4, i3, i11) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 var i6 = 0, i7 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0;
 i2 = STACKTOP;
 i11 = HEAP32[i1 + 48 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 i9 = HEAP32[i1 + 68 >> 2] | 0;
 if ((HEAP32[i3 + 64 >> 2] & 1 | 0) != 0) {
  if ((i11 | 0) > 0) {
   i12 = HEAP32[i1 + 136 >> 2] | 0;
   i13 = HEAP32[i1 + 192 >> 2] | 0;
   i14 = 0;
   do {
    i15 = i12 + (i14 << 2) | 0;
    i16 = HEAP32[i15 >> 2] | 0;
    i14 = i14 + 1 | 0;
    i13 = (Math_imul(i13, 1664525) | 0) + 1013904223 | 0;
    if (i14 >>> 0 < 65537) {
     i17 = i13 >>> 16 ^ i13;
     if (i14 >>> 0 < 257) if (i14 >>> 0 < 17) {
      i17 = (i17 >>> 8 ^ i17) >>> 4 ^ (i17 >>> 8 ^ i17);
      if (i14 >>> 0 < 5) if (i14 >>> 0 < 3) i17 = (i17 >>> 2 ^ i17) >>> 1 ^ (i17 >>> 2 ^ i17); else i17 = i17 >>> 2 ^ i17;
     } else i17 = i17 >>> 8 ^ i17;
    } else i17 = i13;
    i17 = i12 + (((i17 >>> 0) % (i14 >>> 0) | 0) << 2) | 0;
    HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i17 >> 2] = i16;
   } while ((i14 | 0) != (i11 | 0));
   HEAP32[i1 + 192 >> 2] = i13;
  }
  if ((HEAP32[i3 + 20 >> 2] | 0) > (i8 | 0)) {
   if ((i10 | 0) > 0) {
    i15 = HEAP32[i1 + 116 >> 2] | 0;
    i14 = HEAP32[i1 + 192 >> 2] | 0;
    i13 = 0;
    do {
     i12 = i15 + (i13 << 2) | 0;
     i11 = HEAP32[i12 >> 2] | 0;
     i13 = i13 + 1 | 0;
     i14 = (Math_imul(i14, 1664525) | 0) + 1013904223 | 0;
     if (i13 >>> 0 < 65537) {
      i16 = i14 >>> 16 ^ i14;
      if (i13 >>> 0 < 257) if (i13 >>> 0 < 17) {
       i16 = (i16 >>> 8 ^ i16) >>> 4 ^ (i16 >>> 8 ^ i16);
       if (i13 >>> 0 < 5) if (i13 >>> 0 < 3) i16 = (i16 >>> 2 ^ i16) >>> 1 ^ (i16 >>> 2 ^ i16); else i16 = i16 >>> 2 ^ i16;
      } else i16 = i16 >>> 8 ^ i16;
     } else i16 = i14;
     i17 = i15 + (((i16 >>> 0) % (i13 >>> 0) | 0) << 2) | 0;
     HEAP32[i12 >> 2] = HEAP32[i17 >> 2];
     HEAP32[i17 >> 2] = i11;
    } while ((i13 | 0) != (i10 | 0));
    HEAP32[i1 + 192 >> 2] = i14;
   }
   if ((i9 | 0) > 0) {
    i14 = HEAP32[i1 + 156 >> 2] | 0;
    i13 = HEAP32[i1 + 192 >> 2] | 0;
    i12 = 0;
    do {
     i11 = i14 + (i12 << 2) | 0;
     i10 = HEAP32[i11 >> 2] | 0;
     i12 = i12 + 1 | 0;
     i13 = (Math_imul(i13, 1664525) | 0) + 1013904223 | 0;
     if (i12 >>> 0 < 65537) {
      i15 = i13 >>> 16 ^ i13;
      if (i12 >>> 0 < 257) if (i12 >>> 0 < 17) {
       i15 = (i15 >>> 8 ^ i15) >>> 4 ^ (i15 >>> 8 ^ i15);
       if (i12 >>> 0 < 5) if (i12 >>> 0 < 3) i15 = (i15 >>> 2 ^ i15) >>> 1 ^ (i15 >>> 2 ^ i15); else i15 = i15 >>> 2 ^ i15;
      } else i15 = i15 >>> 8 ^ i15;
     } else i15 = i13;
     i17 = i14 + (((i15 >>> 0) % (i12 >>> 0) | 0) << 2) | 0;
     HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
     HEAP32[i17 >> 2] = i10;
    } while ((i12 | 0) != (i9 | 0));
    HEAP32[i1 + 192 >> 2] = i13;
   }
  }
 }
 i12 = HEAP32[i1 + 48 >> 2] | 0;
 if ((HEAP32[i3 + 64 >> 2] & 256 | 0) == 0) {
  if ((i12 | 0) > 0) {
   i6 = 0;
   do {
    i9 = HEAP32[(HEAP32[i1 + 136 >> 2] | 0) + (i6 << 2) >> 2] | 0;
    i7 = HEAP32[i1 + 56 >> 2] | 0;
    if ((HEAP32[i7 + (i9 * 152 | 0) + 136 >> 2] | 0) > (i8 | 0)) {
     i12 = HEAP32[i1 + 16 >> 2] | 0;
     __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i12 + ((HEAP32[i7 + (i9 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i12 + ((HEAP32[i7 + (i9 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i7 + (i9 * 152 | 0) | 0);
     i12 = HEAP32[i1 + 48 >> 2] | 0;
    }
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) < (i12 | 0));
  }
  if ((HEAP32[i3 + 20 >> 2] | 0) <= (i8 | 0)) {
   STACKTOP = i2;
   return 0.0;
  }
  if ((i4 | 0) > 0) {
   i7 = 0;
   do {
    i6 = i5 + (i7 << 2) | 0;
    i8 = HEAP32[i6 >> 2] | 0;
    if ((HEAP8[i8 + 20 >> 0] | 0) != 0) {
     i15 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i1, HEAP32[i8 + 28 >> 2] | 0, +HEAPF32[i3 + 12 >> 2]) | 0;
     i17 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i1, HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] | 0, +HEAPF32[i3 + 12 >> 2]) | 0;
     i16 = HEAP32[i1 + 16 >> 2] | 0;
     i14 = HEAP32[i6 >> 2] | 0;
     FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 15](i14, i16 + (i15 * 244 | 0) | 0, i16 + (i17 * 244 | 0) | 0, +HEAPF32[i3 + 12 >> 2]);
    }
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i4 | 0));
  }
  i3 = HEAP32[i1 + 28 >> 2] | 0;
  if ((i3 | 0) > 0) {
   i4 = 0;
   do {
    i17 = HEAP32[(HEAP32[i1 + 116 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i16 = HEAP32[i1 + 36 >> 2] | 0;
    i15 = HEAP32[i1 + 16 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER12btSolverBodyS1_RK18btSolverConstraint(i15 + ((HEAP32[i16 + (i17 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i15 + ((HEAP32[i16 + (i17 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i16 + (i17 * 152 | 0) | 0);
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i3 | 0));
  }
  i3 = HEAP32[i1 + 68 >> 2] | 0;
  if ((i3 | 0) > 0) {
   i4 = 0;
   do {
    i5 = HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i6 = HEAP32[i1 + 76 >> 2] | 0;
    d18 = +HEAPF32[(HEAP32[i1 + 36 >> 2] | 0) + ((HEAP32[i6 + (i5 * 152 | 0) + 140 >> 2] | 0) * 152 | 0) + 100 >> 2];
    if (d18 > 0.0) {
     d18 = d18 * +HEAPF32[i6 + (i5 * 152 | 0) + 104 >> 2];
     HEAPF32[i6 + (i5 * 152 | 0) + 120 >> 2] = -d18;
     HEAPF32[i6 + (i5 * 152 | 0) + 124 >> 2] = d18;
     i17 = HEAP32[i1 + 16 >> 2] | 0;
     __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i17 + ((HEAP32[i6 + (i5 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i17 + ((HEAP32[i6 + (i5 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i6 + (i5 * 152 | 0) | 0);
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i3 | 0));
  }
  i3 = HEAP32[i1 + 88 >> 2] | 0;
  if ((i3 | 0) <= 0) {
   STACKTOP = i2;
   return 0.0;
  }
  i4 = 0;
  do {
   i5 = HEAP32[i1 + 96 >> 2] | 0;
   d18 = +HEAPF32[(HEAP32[i1 + 36 >> 2] | 0) + ((HEAP32[i5 + (i4 * 152 | 0) + 140 >> 2] | 0) * 152 | 0) + 100 >> 2];
   if (d18 > 0.0) {
    d19 = +HEAPF32[i5 + (i4 * 152 | 0) + 104 >> 2];
    d18 = d18 * d19 > d19 ? d19 : d18 * d19;
    HEAPF32[i5 + (i4 * 152 | 0) + 120 >> 2] = -d18;
    HEAPF32[i5 + (i4 * 152 | 0) + 124 >> 2] = d18;
    i17 = HEAP32[i1 + 16 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i17 + ((HEAP32[i5 + (i4 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i17 + ((HEAP32[i5 + (i4 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i5 + (i4 * 152 | 0) | 0);
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i3 | 0));
  STACKTOP = i2;
  return 0.0;
 }
 if ((i12 | 0) > 0) {
  i9 = 0;
  do {
   i11 = HEAP32[(HEAP32[i1 + 136 >> 2] | 0) + (i9 << 2) >> 2] | 0;
   i10 = HEAP32[i1 + 56 >> 2] | 0;
   if ((HEAP32[i10 + (i11 * 152 | 0) + 136 >> 2] | 0) > (i8 | 0)) {
    i12 = HEAP32[i1 + 16 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i12 + ((HEAP32[i10 + (i11 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i12 + ((HEAP32[i10 + (i11 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i10 + (i11 * 152 | 0) | 0);
    i12 = HEAP32[i1 + 48 >> 2] | 0;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (i12 | 0));
 }
 if ((HEAP32[i3 + 20 >> 2] | 0) <= (i8 | 0)) {
  STACKTOP = i2;
  return 0.0;
 }
 if ((i4 | 0) > 0) {
  i8 = 0;
  do {
   i10 = i5 + (i8 << 2) | 0;
   i9 = HEAP32[i10 >> 2] | 0;
   if ((HEAP8[i9 + 20 >> 0] | 0) != 0) {
    i15 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i1, HEAP32[i9 + 28 >> 2] | 0, +HEAPF32[i3 + 12 >> 2]) | 0;
    i17 = __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i1, HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] | 0, +HEAPF32[i3 + 12 >> 2]) | 0;
    i16 = HEAP32[i1 + 16 >> 2] | 0;
    i14 = HEAP32[i10 >> 2] | 0;
    FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 15](i14, i16 + (i15 * 244 | 0) | 0, i16 + (i17 * 244 | 0) | 0, +HEAPF32[i3 + 12 >> 2]);
   }
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i4 | 0));
 }
 i11 = HEAP32[i3 + 64 >> 2] | 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i11 & 512 | 0) != 0) {
  if ((i4 | 0) <= 0) {
   STACKTOP = i2;
   return 0.0;
  }
  i10 = 0;
  do {
   i9 = HEAP32[(HEAP32[i1 + 116 >> 2] | 0) + (i10 << 2) >> 2] | 0;
   i8 = HEAP32[i1 + 36 >> 2] | 0;
   i5 = HEAP32[i1 + 16 >> 2] | 0;
   __ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER12btSolverBodyS1_RK18btSolverConstraint(i5 + ((HEAP32[i8 + (i9 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i5 + ((HEAP32[i8 + (i9 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i8 + (i9 * 152 | 0) | 0);
   d18 = +HEAPF32[i8 + (i9 * 152 | 0) + 100 >> 2];
   i9 = Math_imul(i10, (i11 >>> 4 & 1) + 1 | 0) | 0;
   i8 = HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + (i9 << 2) >> 2] | 0;
   i5 = HEAP32[i1 + 76 >> 2] | 0;
   if (d18 > 0.0) {
    d19 = d18 * +HEAPF32[i5 + (i8 * 152 | 0) + 104 >> 2];
    HEAPF32[i5 + (i8 * 152 | 0) + 120 >> 2] = -d19;
    HEAPF32[i5 + (i8 * 152 | 0) + 124 >> 2] = d19;
    i17 = HEAP32[i1 + 16 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i17 + ((HEAP32[i5 + (i8 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i17 + ((HEAP32[i5 + (i8 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i5 + (i8 * 152 | 0) | 0);
   }
   if ((HEAP32[i3 + 64 >> 2] & 16 | 0) != 0 ? (i6 = HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + (i9 + 1 << 2) >> 2] | 0, i7 = HEAP32[i1 + 76 >> 2] | 0, d18 > 0.0) : 0) {
    d19 = d18 * +HEAPF32[i7 + (i6 * 152 | 0) + 104 >> 2];
    HEAPF32[i7 + (i6 * 152 | 0) + 120 >> 2] = -d19;
    HEAPF32[i7 + (i6 * 152 | 0) + 124 >> 2] = d19;
    i17 = HEAP32[i1 + 16 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i17 + ((HEAP32[i7 + (i6 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i17 + ((HEAP32[i7 + (i6 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i7 + (i6 * 152 | 0) | 0);
   }
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i4 | 0));
  STACKTOP = i2;
  return 0.0;
 }
 if ((i4 | 0) > 0) {
  i3 = 0;
  do {
   i17 = HEAP32[(HEAP32[i1 + 116 >> 2] | 0) + (i3 << 2) >> 2] | 0;
   i16 = HEAP32[i1 + 36 >> 2] | 0;
   i15 = HEAP32[i1 + 16 >> 2] | 0;
   __ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER12btSolverBodyS1_RK18btSolverConstraint(i15 + ((HEAP32[i16 + (i17 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i15 + ((HEAP32[i16 + (i17 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i16 + (i17 * 152 | 0) | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i4 | 0));
 }
 i3 = HEAP32[i1 + 68 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i4 = 0;
  do {
   i5 = HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + (i4 << 2) >> 2] | 0;
   i6 = HEAP32[i1 + 76 >> 2] | 0;
   d18 = +HEAPF32[(HEAP32[i1 + 36 >> 2] | 0) + ((HEAP32[i6 + (i5 * 152 | 0) + 140 >> 2] | 0) * 152 | 0) + 100 >> 2];
   if (d18 > 0.0) {
    d19 = d18 * +HEAPF32[i6 + (i5 * 152 | 0) + 104 >> 2];
    HEAPF32[i6 + (i5 * 152 | 0) + 120 >> 2] = -d19;
    HEAPF32[i6 + (i5 * 152 | 0) + 124 >> 2] = d19;
    i17 = HEAP32[i1 + 16 >> 2] | 0;
    __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i17 + ((HEAP32[i6 + (i5 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i17 + ((HEAP32[i6 + (i5 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i6 + (i5 * 152 | 0) | 0);
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i3 | 0));
 }
 i5 = HEAP32[i1 + 88 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i2;
  return 0.0;
 }
 i4 = 0;
 do {
  i3 = HEAP32[i1 + 96 >> 2] | 0;
  d18 = +HEAPF32[(HEAP32[i1 + 36 >> 2] | 0) + ((HEAP32[i3 + (i4 * 152 | 0) + 140 >> 2] | 0) * 152 | 0) + 100 >> 2];
  if (d18 > 0.0) {
   d19 = +HEAPF32[i3 + (i4 * 152 | 0) + 104 >> 2];
   d19 = d18 * d19 > d19 ? d19 : d18 * d19;
   HEAPF32[i3 + (i4 * 152 | 0) + 120 >> 2] = -d19;
   HEAPF32[i3 + (i4 * 152 | 0) + 124 >> 2] = d19;
   i17 = HEAP32[i1 + 16 >> 2] | 0;
   __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i17 + ((HEAP32[i3 + (i4 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i17 + ((HEAP32[i3 + (i4 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i3 + (i4 * 152 | 0) | 0);
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i5 | 0));
 STACKTOP = i2;
 return 0.0;
}
function __ZN35btSequentialImpulseConstraintSolver29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiRK19btContactSolverInfo(i1, i2, i5, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0, i13 = 0, d14 = 0.0, i15 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = HEAP32[i1 + 28 >> 2] | 0;
 i8 = HEAP32[i3 + 64 >> 2] | 0;
 if ((i8 & 4 | 0) != 0 & (i6 | 0) > 0) {
  i5 = HEAP32[i1 + 36 >> 2] | 0;
  i7 = HEAP32[i1 + 76 >> 2] | 0;
  if ((i8 & 16 | 0) == 0) {
   i8 = 0;
   do {
    i13 = HEAP32[i5 + (i8 * 152 | 0) + 132 >> 2] | 0;
    HEAPF32[i13 + 120 >> 2] = +HEAPF32[i5 + (i8 * 152 | 0) + 100 >> 2];
    HEAPF32[i13 + 124 >> 2] = +HEAPF32[i7 + ((HEAP32[i5 + (i8 * 152 | 0) + 140 >> 2] | 0) * 152 | 0) + 100 >> 2];
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i6 | 0));
  } else {
   i8 = 0;
   do {
    i13 = HEAP32[i5 + (i8 * 152 | 0) + 132 >> 2] | 0;
    HEAPF32[i13 + 120 >> 2] = +HEAPF32[i5 + (i8 * 152 | 0) + 100 >> 2];
    i12 = HEAP32[i5 + (i8 * 152 | 0) + 140 >> 2] | 0;
    HEAPF32[i13 + 124 >> 2] = +HEAPF32[i7 + (i12 * 152 | 0) + 100 >> 2];
    HEAPF32[i13 + 128 >> 2] = +HEAPF32[i7 + ((i12 + 1 | 0) * 152 | 0) + 100 >> 2];
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i6 | 0));
  }
 }
 i6 = HEAP32[i1 + 48 >> 2] | 0;
 if ((i6 | 0) > 0) {
  i7 = 0;
  do {
   i5 = HEAP32[i1 + 56 >> 2] | 0;
   i8 = HEAP32[i5 + (i7 * 152 | 0) + 132 >> 2] | 0;
   i13 = HEAP32[i8 + 44 >> 2] | 0;
   i12 = i5 + (i7 * 152 | 0) + 100 | 0;
   if ((i13 | 0) != 0) {
    d11 = +HEAPF32[i12 >> 2];
    i15 = HEAP32[i8 + 28 >> 2] | 0;
    d10 = 1.0 / +HEAPF32[i3 + 12 >> 2];
    d9 = d11 * +HEAPF32[i5 + (i7 * 152 | 0) + 20 >> 2] * +HEAPF32[i15 + 352 >> 2] * d10;
    d14 = d11 * +HEAPF32[i5 + (i7 * 152 | 0) + 24 >> 2] * +HEAPF32[i15 + 356 >> 2] * d10;
    HEAPF32[i13 >> 2] = +HEAPF32[i5 + (i7 * 152 | 0) + 16 >> 2] * d11 * +HEAPF32[i15 + 348 >> 2] * d10 + +HEAPF32[i13 >> 2];
    HEAPF32[i13 + 4 >> 2] = d9 + +HEAPF32[i13 + 4 >> 2];
    HEAPF32[i13 + 8 >> 2] = d14 + +HEAPF32[i13 + 8 >> 2];
    d14 = +HEAPF32[i12 >> 2];
    i15 = HEAP32[i8 + 32 >> 2] | 0;
    d9 = 1.0 / +HEAPF32[i3 + 12 >> 2];
    d10 = d14 * +HEAPF32[i5 + (i7 * 152 | 0) + 52 >> 2] * +HEAPF32[i15 + 352 >> 2] * d9;
    d11 = d14 * +HEAPF32[i5 + (i7 * 152 | 0) + 56 >> 2] * +HEAPF32[i15 + 356 >> 2] * d9;
    HEAPF32[i13 + 32 >> 2] = +HEAPF32[i5 + (i7 * 152 | 0) + 48 >> 2] * d14 * +HEAPF32[i15 + 348 >> 2] * d9 + +HEAPF32[i13 + 32 >> 2];
    HEAPF32[i13 + 36 >> 2] = d10 + +HEAPF32[i13 + 36 >> 2];
    HEAPF32[i13 + 40 >> 2] = d11 + +HEAPF32[i13 + 40 >> 2];
    i15 = HEAP32[i8 + 28 >> 2] | 0;
    d11 = +HEAPF32[i12 >> 2];
    d10 = 1.0 / +HEAPF32[i3 + 12 >> 2];
    d9 = +HEAPF32[i5 + (i7 * 152 | 0) + 4 >> 2] * +HEAPF32[i15 + 548 >> 2] * d11 * d10;
    d14 = d11 * +HEAPF32[i5 + (i7 * 152 | 0) + 8 >> 2] * +HEAPF32[i15 + 552 >> 2] * d10;
    HEAPF32[i13 + 16 >> 2] = +HEAPF32[i5 + (i7 * 152 | 0) >> 2] * +HEAPF32[i15 + 544 >> 2] * d11 * d10 + +HEAPF32[i13 + 16 >> 2];
    HEAPF32[i13 + 20 >> 2] = d9 + +HEAPF32[i13 + 20 >> 2];
    HEAPF32[i13 + 24 >> 2] = d14 + +HEAPF32[i13 + 24 >> 2];
    i15 = HEAP32[i8 + 32 >> 2] | 0;
    d14 = +HEAPF32[i12 >> 2];
    d9 = 1.0 / +HEAPF32[i3 + 12 >> 2];
    d10 = +HEAPF32[i5 + (i7 * 152 | 0) + 36 >> 2] * +HEAPF32[i15 + 548 >> 2] * d14 * d9;
    d11 = d14 * +HEAPF32[i5 + (i7 * 152 | 0) + 40 >> 2] * +HEAPF32[i15 + 552 >> 2] * d9;
    HEAPF32[i13 + 48 >> 2] = +HEAPF32[i5 + (i7 * 152 | 0) + 32 >> 2] * +HEAPF32[i15 + 544 >> 2] * d14 * d9 + +HEAPF32[i13 + 48 >> 2];
    HEAPF32[i13 + 52 >> 2] = d10 + +HEAPF32[i13 + 52 >> 2];
    HEAPF32[i13 + 56 >> 2] = d11 + +HEAPF32[i13 + 56 >> 2];
   }
   HEAPF32[i8 + 36 >> 2] = +HEAPF32[i12 >> 2];
   d14 = +Math_abs(+(+HEAPF32[i12 >> 2]));
   if (d14 >= +HEAPF32[i8 + 16 >> 2]) HEAP8[i8 + 20 >> 0] = 0;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 i12 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i12 | 0) > 0) {
  i6 = HEAP32[i1 + 16 >> 2] | 0;
  i5 = 0;
  do {
   i7 = i6 + (i5 * 244 | 0) | 0;
   i8 = HEAP32[i6 + (i5 * 244 | 0) + 240 >> 2] | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP32[i3 + 44 >> 2] | 0) == 0) {
     i15 = i6 + (i5 * 244 | 0) + 176 | 0;
     d11 = +HEAPF32[i6 + (i5 * 244 | 0) + 64 >> 2] + +HEAPF32[i15 >> 2];
     HEAPF32[i15 >> 2] = d11;
     i15 = i6 + (i5 * 244 | 0) + 180 | 0;
     d10 = +HEAPF32[i6 + (i5 * 244 | 0) + 68 >> 2] + +HEAPF32[i15 >> 2];
     HEAPF32[i15 >> 2] = d10;
     i15 = i6 + (i5 * 244 | 0) + 184 | 0;
     d9 = +HEAPF32[i6 + (i5 * 244 | 0) + 72 >> 2] + +HEAPF32[i15 >> 2];
     HEAPF32[i15 >> 2] = d9;
     i15 = i6 + (i5 * 244 | 0) + 192 | 0;
     HEAPF32[i15 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 80 >> 2] + +HEAPF32[i15 >> 2];
     i15 = i6 + (i5 * 244 | 0) + 196 | 0;
     HEAPF32[i15 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 84 >> 2] + +HEAPF32[i15 >> 2];
     i15 = i6 + (i5 * 244 | 0) + 200 | 0;
     HEAPF32[i15 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 88 >> 2] + +HEAPF32[i15 >> 2];
    } else {
     d10 = +HEAPF32[i3 + 12 >> 2];
     d9 = +HEAPF32[i3 + 52 >> 2];
     i8 = i6 + (i5 * 244 | 0) + 176 | 0;
     HEAPF32[i8 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 64 >> 2] + +HEAPF32[i8 >> 2];
     i8 = i6 + (i5 * 244 | 0) + 180 | 0;
     HEAPF32[i8 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 68 >> 2] + +HEAPF32[i8 >> 2];
     i8 = i6 + (i5 * 244 | 0) + 184 | 0;
     HEAPF32[i8 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 72 >> 2] + +HEAPF32[i8 >> 2];
     i8 = i6 + (i5 * 244 | 0) + 192 | 0;
     HEAPF32[i8 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 80 >> 2] + +HEAPF32[i8 >> 2];
     i8 = i6 + (i5 * 244 | 0) + 196 | 0;
     HEAPF32[i8 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 84 >> 2] + +HEAPF32[i8 >> 2];
     i8 = i6 + (i5 * 244 | 0) + 200 | 0;
     HEAPF32[i8 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 88 >> 2] + +HEAPF32[i8 >> 2];
     i8 = i6 + (i5 * 244 | 0) + 144 | 0;
     i12 = i6 + (i5 * 244 | 0) + 148 | 0;
     if (((((!(+HEAPF32[i8 >> 2] != 0.0) ? !(+HEAPF32[i12 >> 2] != 0.0) : 0) ? !(+HEAPF32[i6 + (i5 * 244 | 0) + 152 >> 2] != 0.0) : 0) ? !(+HEAPF32[i6 + (i5 * 244 | 0) + 160 >> 2] != 0.0) : 0) ? !(+HEAPF32[i6 + (i5 * 244 | 0) + 164 >> 2] != 0.0) : 0) ? !(+HEAPF32[i6 + (i5 * 244 | 0) + 168 >> 2] != 0.0) : 0) i7 = i6; else i4 = 22;
     if ((i4 | 0) == 22) {
      i4 = 0;
      d11 = +HEAPF32[i6 + (i5 * 244 | 0) + 164 >> 2] * d9;
      d14 = +HEAPF32[i6 + (i5 * 244 | 0) + 168 >> 2] * d9;
      HEAPF32[i2 >> 2] = +HEAPF32[i6 + (i5 * 244 | 0) + 160 >> 2] * d9;
      HEAPF32[i2 + 4 >> 2] = d11;
      HEAPF32[i2 + 8 >> 2] = d14;
      HEAPF32[i2 + 12 >> 2] = 0.0;
      __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i7, +HEAPF32[i8 >> 2], +HEAPF32[i12 >> 2], +HEAPF32[i6 + (i5 * 244 | 0) + 152 >> 2], i2, d10, i2 + 16 | 0);
      HEAP32[i7 + 0 >> 2] = HEAP32[i2 + 16 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 20 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 24 >> 2];
      HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 28 >> 2];
      i7 = i6 + (i5 * 244 | 0) + 16 | 0;
      HEAP32[i7 + 0 >> 2] = HEAP32[i2 + 32 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 36 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 40 >> 2];
      HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 44 >> 2];
      i7 = i6 + (i5 * 244 | 0) + 32 | 0;
      HEAP32[i7 + 0 >> 2] = HEAP32[i2 + 48 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 52 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 56 >> 2];
      HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 60 >> 2];
      i7 = i6 + (i5 * 244 | 0) + 48 | 0;
      HEAP32[i7 + 0 >> 2] = HEAP32[i2 + 64 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 68 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 72 >> 2];
      HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 76 >> 2];
      i7 = HEAP32[i1 + 16 >> 2] | 0;
     }
     i6 = i7;
     d11 = +HEAPF32[i7 + (i5 * 244 | 0) + 176 >> 2];
     d10 = +HEAPF32[i7 + (i5 * 244 | 0) + 180 >> 2];
     d9 = +HEAPF32[i7 + (i5 * 244 | 0) + 184 >> 2];
     i8 = HEAP32[i7 + (i5 * 244 | 0) + 240 >> 2] | 0;
    }
    d14 = d11 + +HEAPF32[i6 + (i5 * 244 | 0) + 208 >> 2];
    d11 = d10 + +HEAPF32[i6 + (i5 * 244 | 0) + 212 >> 2];
    d10 = d9 + +HEAPF32[i6 + (i5 * 244 | 0) + 216 >> 2];
    i13 = i8 + 260 | 0;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
    HEAPF32[i8 + 312 >> 2] = d14;
    HEAPF32[i8 + 316 >> 2] = d11;
    HEAPF32[i8 + 320 >> 2] = d10;
    HEAPF32[i8 + 324 >> 2] = 0.0;
    i13 = HEAP32[i1 + 16 >> 2] | 0;
    i15 = HEAP32[i13 + (i5 * 244 | 0) + 240 >> 2] | 0;
    d10 = +HEAPF32[i13 + (i5 * 244 | 0) + 192 >> 2] + +HEAPF32[i13 + (i5 * 244 | 0) + 224 >> 2];
    d11 = +HEAPF32[i13 + (i5 * 244 | 0) + 196 >> 2] + +HEAPF32[i13 + (i5 * 244 | 0) + 228 >> 2];
    d14 = +HEAPF32[i13 + (i5 * 244 | 0) + 200 >> 2] + +HEAPF32[i13 + (i5 * 244 | 0) + 232 >> 2];
    HEAP32[i15 + 260 >> 2] = (HEAP32[i15 + 260 >> 2] | 0) + 1;
    HEAPF32[i15 + 328 >> 2] = d10;
    HEAPF32[i15 + 332 >> 2] = d11;
    HEAPF32[i15 + 336 >> 2] = d14;
    HEAPF32[i15 + 340 >> 2] = 0.0;
    if ((HEAP32[i3 + 44 >> 2] | 0) != 0) {
     i13 = HEAP32[i1 + 16 >> 2] | 0;
     i15 = HEAP32[i13 + (i5 * 244 | 0) + 240 >> 2] | 0;
     i12 = i13 + (i5 * 244 | 0) | 0;
     HEAP32[i15 + 260 >> 2] = (HEAP32[i15 + 260 >> 2] | 0) + 1;
     HEAP32[i15 + 4 >> 2] = HEAP32[i12 + 0 >> 2];
     HEAP32[i15 + 8 >> 2] = HEAP32[i12 + 4 >> 2];
     HEAP32[i15 + 12 >> 2] = HEAP32[i12 + 8 >> 2];
     HEAP32[i15 + 16 >> 2] = HEAP32[i12 + 12 >> 2];
     i12 = i13 + (i5 * 244 | 0) + 16 | 0;
     HEAP32[i15 + 20 >> 2] = HEAP32[i12 + 0 >> 2];
     HEAP32[i15 + 24 >> 2] = HEAP32[i12 + 4 >> 2];
     HEAP32[i15 + 28 >> 2] = HEAP32[i12 + 8 >> 2];
     HEAP32[i15 + 32 >> 2] = HEAP32[i12 + 12 >> 2];
     i12 = i13 + (i5 * 244 | 0) + 32 | 0;
     HEAP32[i15 + 36 >> 2] = HEAP32[i12 + 0 >> 2];
     HEAP32[i15 + 40 >> 2] = HEAP32[i12 + 4 >> 2];
     HEAP32[i15 + 44 >> 2] = HEAP32[i12 + 8 >> 2];
     HEAP32[i15 + 48 >> 2] = HEAP32[i12 + 12 >> 2];
     i13 = i13 + (i5 * 244 | 0) + 48 | 0;
     HEAP32[i15 + 52 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i15 + 56 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i15 + 60 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i15 + 64 >> 2] = HEAP32[i13 + 12 >> 2];
    }
    i6 = HEAP32[i1 + 16 >> 2] | 0;
    HEAP32[(HEAP32[i6 + (i5 * 244 | 0) + 240 >> 2] | 0) + 212 >> 2] = -1;
    i12 = HEAP32[i1 + 8 >> 2] | 0;
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (i12 | 0));
 }
 if ((HEAP32[i1 + 28 >> 2] | 0) < 0 ? (HEAP32[i1 + 32 >> 2] | 0) < 0 : 0) {
  i3 = HEAP32[i1 + 36 >> 2] | 0;
  if ((i3 | 0) != 0) {
   if ((HEAP8[i1 + 40 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i3 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 36 >> 2] = 0;
  }
  HEAP8[i1 + 40 >> 0] = 1;
  HEAP32[i1 + 36 >> 2] = 0;
  HEAP32[i1 + 32 >> 2] = 0;
 }
 HEAP32[i1 + 28 >> 2] = 0;
 if ((HEAP32[i1 + 48 >> 2] | 0) < 0 ? (HEAP32[i1 + 52 >> 2] | 0) < 0 : 0) {
  i3 = HEAP32[i1 + 56 >> 2] | 0;
  if ((i3 | 0) != 0) {
   if ((HEAP8[i1 + 60 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i3 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 56 >> 2] = 0;
  }
  HEAP8[i1 + 60 >> 0] = 1;
  HEAP32[i1 + 56 >> 2] = 0;
  HEAP32[i1 + 52 >> 2] = 0;
 }
 HEAP32[i1 + 48 >> 2] = 0;
 if ((HEAP32[i1 + 68 >> 2] | 0) < 0 ? (HEAP32[i1 + 72 >> 2] | 0) < 0 : 0) {
  i3 = HEAP32[i1 + 76 >> 2] | 0;
  if ((i3 | 0) != 0) {
   if ((HEAP8[i1 + 80 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i3 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 76 >> 2] = 0;
  }
  HEAP8[i1 + 80 >> 0] = 1;
  HEAP32[i1 + 76 >> 2] = 0;
  HEAP32[i1 + 72 >> 2] = 0;
 }
 HEAP32[i1 + 68 >> 2] = 0;
 if ((HEAP32[i1 + 88 >> 2] | 0) < 0 ? (HEAP32[i1 + 92 >> 2] | 0) < 0 : 0) {
  i3 = HEAP32[i1 + 96 >> 2] | 0;
  if ((i3 | 0) != 0) {
   if ((HEAP8[i1 + 100 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i3 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 96 >> 2] = 0;
  }
  HEAP8[i1 + 100 >> 0] = 1;
  HEAP32[i1 + 96 >> 2] = 0;
  HEAP32[i1 + 92 >> 2] = 0;
 }
 HEAP32[i1 + 88 >> 2] = 0;
 if ((HEAP32[i1 + 8 >> 2] | 0) >= 0) {
  HEAP32[i1 + 8 >> 2] = 0;
  STACKTOP = i2;
  return 0.0;
 }
 if ((HEAP32[i1 + 12 >> 2] | 0) >= 0) {
  HEAP32[i1 + 8 >> 2] = 0;
  STACKTOP = i2;
  return 0.0;
 }
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 16 >> 2] = 0;
 }
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 STACKTOP = i2;
 return 0.0;
}
function _free(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = STACKTOP;
 if ((i7 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i16 = HEAP32[5290] | 0;
 if ((i7 + -8 | 0) >>> 0 < i16 >>> 0) _abort();
 i6 = HEAP32[i7 + -4 >> 2] | 0;
 if ((i6 & 3 | 0) == 1) _abort();
 i9 = i7 + ((i6 & -8) + -8) | 0;
 do if ((i6 & 1 | 0) == 0) {
  i13 = HEAP32[i7 + -8 >> 2] | 0;
  if ((i6 & 3 | 0) == 0) {
   STACKTOP = i1;
   return;
  }
  i11 = i7 + (-8 - i13) | 0;
  i12 = i13 + (i6 & -8) | 0;
  if (i11 >>> 0 < i16 >>> 0) _abort();
  if ((i11 | 0) == (HEAP32[5291] | 0)) {
   if ((HEAP32[i7 + ((i6 & -8) + -4) >> 2] & 3 | 0) != 3) {
    i2 = i11;
    i14 = i12;
    break;
   }
   HEAP32[5288] = i12;
   HEAP32[i7 + ((i6 & -8) + -4) >> 2] = HEAP32[i7 + ((i6 & -8) + -4) >> 2] & -2;
   HEAP32[i7 + (-8 - i13 + 4) >> 2] = i12 | 1;
   HEAP32[i9 >> 2] = i12;
   STACKTOP = i1;
   return;
  }
  if (i13 >>> 0 < 256) {
   i14 = HEAP32[i7 + (-8 - i13 + 8) >> 2] | 0;
   i2 = HEAP32[i7 + (-8 - i13 + 12) >> 2] | 0;
   if ((i14 | 0) != (21184 + (i13 >>> 3 << 1 << 2) | 0)) {
    if (i14 >>> 0 < i16 >>> 0) _abort();
    if ((HEAP32[i14 + 12 >> 2] | 0) != (i11 | 0)) _abort();
   }
   if ((i2 | 0) == (i14 | 0)) {
    HEAP32[5286] = HEAP32[5286] & ~(1 << (i13 >>> 3));
    i2 = i11;
    i14 = i12;
    break;
   }
   if ((i2 | 0) != (21184 + (i13 >>> 3 << 1 << 2) | 0)) {
    if (i2 >>> 0 < i16 >>> 0) _abort();
    if ((HEAP32[i2 + 8 >> 2] | 0) != (i11 | 0)) _abort(); else i17 = i2 + 8 | 0;
   } else i17 = i2 + 8 | 0;
   HEAP32[i14 + 12 >> 2] = i2;
   HEAP32[i17 >> 2] = i14;
   i2 = i11;
   i14 = i12;
   break;
  }
  i17 = HEAP32[i7 + (-8 - i13 + 24) >> 2] | 0;
  i19 = HEAP32[i7 + (-8 - i13 + 12) >> 2] | 0;
  do if ((i19 | 0) == (i11 | 0)) {
   i19 = HEAP32[i7 + (-8 - i13 + 20) >> 2] | 0;
   if ((i19 | 0) == 0) {
    i19 = HEAP32[i7 + (-8 - i13 + 16) >> 2] | 0;
    if ((i19 | 0) == 0) {
     i15 = 0;
     break;
    } else i18 = i7 + (-8 - i13 + 16) | 0;
   } else i18 = i7 + (-8 - i13 + 20) | 0;
   while (1) {
    i21 = i19 + 20 | 0;
    i20 = HEAP32[i21 >> 2] | 0;
    if ((i20 | 0) != 0) {
     i19 = i20;
     i18 = i21;
     continue;
    }
    i21 = i19 + 16 | 0;
    i20 = HEAP32[i21 >> 2] | 0;
    if ((i20 | 0) == 0) break; else {
     i19 = i20;
     i18 = i21;
    }
   }
   if (i18 >>> 0 < i16 >>> 0) _abort(); else {
    HEAP32[i18 >> 2] = 0;
    i15 = i19;
    break;
   }
  } else {
   i18 = HEAP32[i7 + (-8 - i13 + 8) >> 2] | 0;
   if (i18 >>> 0 < i16 >>> 0) _abort();
   if ((HEAP32[i18 + 12 >> 2] | 0) != (i11 | 0)) _abort();
   if ((HEAP32[i19 + 8 >> 2] | 0) == (i11 | 0)) {
    HEAP32[i18 + 12 >> 2] = i19;
    HEAP32[i19 + 8 >> 2] = i18;
    i15 = i19;
    break;
   } else _abort();
  } while (0);
  if ((i17 | 0) != 0) {
   i16 = HEAP32[i7 + (-8 - i13 + 28) >> 2] | 0;
   if ((i11 | 0) == (HEAP32[21448 + (i16 << 2) >> 2] | 0)) {
    HEAP32[21448 + (i16 << 2) >> 2] = i15;
    if ((i15 | 0) == 0) {
     HEAP32[5287] = HEAP32[5287] & ~(1 << i16);
     i2 = i11;
     i14 = i12;
     break;
    }
   } else {
    if (i17 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
    if ((HEAP32[i17 + 16 >> 2] | 0) == (i11 | 0)) HEAP32[i17 + 16 >> 2] = i15; else HEAP32[i17 + 20 >> 2] = i15;
    if ((i15 | 0) == 0) {
     i2 = i11;
     i14 = i12;
     break;
    }
   }
   if (i15 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
   HEAP32[i15 + 24 >> 2] = i17;
   i16 = HEAP32[i7 + (-8 - i13 + 16) >> 2] | 0;
   do if ((i16 | 0) != 0) if (i16 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
    HEAP32[i15 + 16 >> 2] = i16;
    HEAP32[i16 + 24 >> 2] = i15;
    break;
   } while (0);
   i13 = HEAP32[i7 + (-8 - i13 + 20) >> 2] | 0;
   if ((i13 | 0) != 0) if (i13 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
    HEAP32[i15 + 20 >> 2] = i13;
    HEAP32[i13 + 24 >> 2] = i15;
    i2 = i11;
    i14 = i12;
    break;
   } else {
    i2 = i11;
    i14 = i12;
   }
  } else {
   i2 = i11;
   i14 = i12;
  }
 } else {
  i2 = i7 + -8 | 0;
  i14 = i6 & -8;
 } while (0);
 if (!(i2 >>> 0 < i9 >>> 0)) _abort();
 i11 = HEAP32[i7 + ((i6 & -8) + -4) >> 2] | 0;
 if ((i11 & 1 | 0) == 0) _abort();
 if ((i11 & 2 | 0) == 0) {
  if ((i9 | 0) == (HEAP32[5292] | 0)) {
   i21 = (HEAP32[5289] | 0) + i14 | 0;
   HEAP32[5289] = i21;
   HEAP32[5292] = i2;
   HEAP32[i2 + 4 >> 2] = i21 | 1;
   if ((i2 | 0) != (HEAP32[5291] | 0)) {
    STACKTOP = i1;
    return;
   }
   HEAP32[5291] = 0;
   HEAP32[5288] = 0;
   STACKTOP = i1;
   return;
  }
  if ((i9 | 0) == (HEAP32[5291] | 0)) {
   i21 = (HEAP32[5288] | 0) + i14 | 0;
   HEAP32[5288] = i21;
   HEAP32[5291] = i2;
   HEAP32[i2 + 4 >> 2] = i21 | 1;
   HEAP32[i2 + i21 >> 2] = i21;
   STACKTOP = i1;
   return;
  }
  i14 = (i11 & -8) + i14 | 0;
  do if (!(i11 >>> 0 < 256)) {
   i10 = HEAP32[i7 + ((i6 & -8) + 16) >> 2] | 0;
   i12 = HEAP32[i7 + (i6 & -8 | 4) >> 2] | 0;
   do if ((i12 | 0) == (i9 | 0)) {
    i12 = HEAP32[i7 + ((i6 & -8) + 12) >> 2] | 0;
    if ((i12 | 0) == 0) {
     i12 = HEAP32[i7 + ((i6 & -8) + 8) >> 2] | 0;
     if ((i12 | 0) == 0) {
      i8 = 0;
      break;
     } else i11 = i7 + ((i6 & -8) + 8) | 0;
    } else i11 = i7 + ((i6 & -8) + 12) | 0;
    while (1) {
     i13 = i12 + 20 | 0;
     i15 = HEAP32[i13 >> 2] | 0;
     if ((i15 | 0) != 0) {
      i12 = i15;
      i11 = i13;
      continue;
     }
     i13 = i12 + 16 | 0;
     i15 = HEAP32[i13 >> 2] | 0;
     if ((i15 | 0) == 0) break; else {
      i12 = i15;
      i11 = i13;
     }
    }
    if (i11 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
     HEAP32[i11 >> 2] = 0;
     i8 = i12;
     break;
    }
   } else {
    i11 = HEAP32[i7 + (i6 & -8) >> 2] | 0;
    if (i11 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
    if ((HEAP32[i11 + 12 >> 2] | 0) != (i9 | 0)) _abort();
    if ((HEAP32[i12 + 8 >> 2] | 0) == (i9 | 0)) {
     HEAP32[i11 + 12 >> 2] = i12;
     HEAP32[i12 + 8 >> 2] = i11;
     i8 = i12;
     break;
    } else _abort();
   } while (0);
   if ((i10 | 0) != 0) {
    i11 = HEAP32[i7 + ((i6 & -8) + 20) >> 2] | 0;
    if ((i9 | 0) == (HEAP32[21448 + (i11 << 2) >> 2] | 0)) {
     HEAP32[21448 + (i11 << 2) >> 2] = i8;
     if ((i8 | 0) == 0) {
      HEAP32[5287] = HEAP32[5287] & ~(1 << i11);
      break;
     }
    } else {
     if (i10 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
     if ((HEAP32[i10 + 16 >> 2] | 0) == (i9 | 0)) HEAP32[i10 + 16 >> 2] = i8; else HEAP32[i10 + 20 >> 2] = i8;
     if ((i8 | 0) == 0) break;
    }
    if (i8 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
    HEAP32[i8 + 24 >> 2] = i10;
    i9 = HEAP32[i7 + ((i6 & -8) + 8) >> 2] | 0;
    do if ((i9 | 0) != 0) if (i9 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
     HEAP32[i8 + 16 >> 2] = i9;
     HEAP32[i9 + 24 >> 2] = i8;
     break;
    } while (0);
    i6 = HEAP32[i7 + ((i6 & -8) + 12) >> 2] | 0;
    if ((i6 | 0) != 0) if (i6 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
     HEAP32[i8 + 20 >> 2] = i6;
     HEAP32[i6 + 24 >> 2] = i8;
     break;
    }
   }
  } else {
   i8 = HEAP32[i7 + (i6 & -8) >> 2] | 0;
   i6 = HEAP32[i7 + (i6 & -8 | 4) >> 2] | 0;
   if ((i8 | 0) != (21184 + (i11 >>> 3 << 1 << 2) | 0)) {
    if (i8 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
    if ((HEAP32[i8 + 12 >> 2] | 0) != (i9 | 0)) _abort();
   }
   if ((i6 | 0) == (i8 | 0)) {
    HEAP32[5286] = HEAP32[5286] & ~(1 << (i11 >>> 3));
    break;
   }
   if ((i6 | 0) != (21184 + (i11 >>> 3 << 1 << 2) | 0)) {
    if (i6 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort();
    if ((HEAP32[i6 + 8 >> 2] | 0) != (i9 | 0)) _abort(); else i10 = i6 + 8 | 0;
   } else i10 = i6 + 8 | 0;
   HEAP32[i8 + 12 >> 2] = i6;
   HEAP32[i10 >> 2] = i8;
  } while (0);
  HEAP32[i2 + 4 >> 2] = i14 | 1;
  HEAP32[i2 + i14 >> 2] = i14;
  if ((i2 | 0) == (HEAP32[5291] | 0)) {
   HEAP32[5288] = i14;
   STACKTOP = i1;
   return;
  }
 } else {
  HEAP32[i7 + ((i6 & -8) + -4) >> 2] = i11 & -2;
  HEAP32[i2 + 4 >> 2] = i14 | 1;
  HEAP32[i2 + i14 >> 2] = i14;
 }
 i6 = i14 >>> 3;
 if (i14 >>> 0 < 256) {
  i3 = HEAP32[5286] | 0;
  if ((i3 & 1 << i6 | 0) != 0) {
   i3 = HEAP32[21184 + ((i6 << 1) + 2 << 2) >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
    i4 = 21184 + ((i6 << 1) + 2 << 2) | 0;
    i5 = i3;
   }
  } else {
   HEAP32[5286] = i3 | 1 << i6;
   i4 = 21184 + ((i6 << 1) + 2 << 2) | 0;
   i5 = 21184 + (i6 << 1 << 2) | 0;
  }
  HEAP32[i4 >> 2] = i2;
  HEAP32[i5 + 12 >> 2] = i2;
  HEAP32[i2 + 8 >> 2] = i5;
  HEAP32[i2 + 12 >> 2] = 21184 + (i6 << 1 << 2);
  STACKTOP = i1;
  return;
 }
 i4 = i14 >>> 8;
 if ((i4 | 0) != 0) if (i14 >>> 0 > 16777215) i4 = 31; else {
  i21 = i4 << ((i4 + 1048320 | 0) >>> 16 & 8) << (((i4 << ((i4 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4);
  i4 = 14 - (((i4 << ((i4 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4 | (i4 + 1048320 | 0) >>> 16 & 8 | (i21 + 245760 | 0) >>> 16 & 2) + (i21 << ((i21 + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
  i4 = i14 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 } else i4 = 0;
 i5 = 21448 + (i4 << 2) | 0;
 HEAP32[i2 + 28 >> 2] = i4;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 i7 = HEAP32[5287] | 0;
 i6 = 1 << i4;
 L199 : do if ((i7 & i6 | 0) != 0) {
  i5 = HEAP32[i5 >> 2] | 0;
  if ((i4 | 0) == 31) i4 = 0; else i4 = 25 - (i4 >>> 1) | 0;
  L205 : do if ((HEAP32[i5 + 4 >> 2] & -8 | 0) != (i14 | 0)) {
   i4 = i14 << i4;
   i6 = i5;
   while (1) {
    i7 = i6 + (i4 >>> 31 << 2) + 16 | 0;
    i5 = HEAP32[i7 >> 2] | 0;
    if ((i5 | 0) == 0) break;
    if ((HEAP32[i5 + 4 >> 2] & -8 | 0) == (i14 | 0)) {
     i3 = i5;
     break L205;
    } else {
     i4 = i4 << 1;
     i6 = i5;
    }
   }
   if (i7 >>> 0 < (HEAP32[5290] | 0) >>> 0) _abort(); else {
    HEAP32[i7 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i6;
    HEAP32[i2 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i2;
    break L199;
   }
  } else i3 = i5; while (0);
  i4 = i3 + 8 | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  i5 = HEAP32[5290] | 0;
  if (i3 >>> 0 < i5 >>> 0) _abort();
  if (i6 >>> 0 < i5 >>> 0) _abort(); else {
   HEAP32[i6 + 12 >> 2] = i2;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i2 + 8 >> 2] = i6;
   HEAP32[i2 + 12 >> 2] = i3;
   HEAP32[i2 + 24 >> 2] = 0;
   break;
  }
 } else {
  HEAP32[5287] = i7 | i6;
  HEAP32[i5 >> 2] = i2;
  HEAP32[i2 + 24 >> 2] = i5;
  HEAP32[i2 + 12 >> 2] = i2;
  HEAP32[i2 + 8 >> 2] = i2;
 } while (0);
 i21 = (HEAP32[5294] | 0) + -1 | 0;
 HEAP32[5294] = i21;
 if ((i21 | 0) == 0) i2 = 21600 | 0; else {
  STACKTOP = i1;
  return;
 }
 while (1) {
  i2 = HEAP32[i2 >> 2] | 0;
  if ((i2 | 0) == 0) break; else i2 = i2 + 8 | 0;
 }
 HEAP32[5294] = -1;
 STACKTOP = i1;
 return;
}
function __ZN23btDiscreteDynamicsWorld19integrateTransformsEf(i2, d21) {
 i2 = i2 | 0;
 d21 = +d21;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1872);
 if ((HEAP32[i2 + 232 >> 2] | 0) > 0) {
  i11 = i1 + 232 | 0;
  i8 = 0;
  do {
   i9 = HEAP32[(HEAP32[i2 + 240 >> 2] | 0) + (i8 << 2) >> 2] | 0;
   HEAPF32[i9 + 244 >> 2] = 1.0;
   i22 = HEAP32[i9 + 216 >> 2] | 0;
   do if (!((i22 | 0) == 2 | (i22 | 0) == 5) ? (HEAP32[i9 + 204 >> 2] & 3 | 0) == 0 : 0) {
    __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i9 + 4 | 0, +HEAPF32[i9 + 312 >> 2], +HEAPF32[i9 + 316 >> 2], +HEAPF32[i9 + 320 >> 2], i9 + 328 | 0, d21, i1 + 184 | 0);
    d25 = +HEAPF32[i11 >> 2] - +HEAPF32[i9 + 52 >> 2];
    d24 = +HEAPF32[i1 + 236 >> 2] - +HEAPF32[i9 + 56 >> 2];
    d23 = +HEAPF32[i1 + 240 >> 2] - +HEAPF32[i9 + 60 >> 2];
    if ((HEAP8[i2 + 44 >> 0] | 0) != 0 ? (d26 = +HEAPF32[i9 + 252 >> 2], d26 * d26 != 0.0 ? d26 * d26 < d25 * d25 + d24 * d24 + d23 * d23 : 0) : 0) {
     __ZN15CProfileManager13Start_ProfileEPKc(1896);
     if ((HEAP32[(HEAP32[i9 + 192 >> 2] | 0) + 4 >> 2] | 0) < 20) {
      HEAP32[440] = (HEAP32[440] | 0) + 1;
      i20 = HEAP32[i2 + 68 >> 2] | 0;
      i20 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0;
      i22 = HEAP32[i2 + 24 >> 2] | 0;
      HEAPF32[i1 + 252 >> 2] = 1.0;
      HEAP16[i1 + 256 >> 1] = 1;
      HEAP16[i1 + 258 >> 1] = -1;
      HEAP32[i1 + 248 >> 2] = 688;
      HEAP32[i1 + 260 >> 2] = HEAP32[i9 + 52 >> 2];
      HEAP32[i1 + 264 >> 2] = HEAP32[i9 + 56 >> 2];
      HEAP32[i1 + 268 >> 2] = HEAP32[i9 + 60 >> 2];
      HEAP32[i1 + 272 >> 2] = HEAP32[i9 + 64 >> 2];
      HEAP32[i1 + 276 >> 2] = HEAP32[i11 + 0 >> 2];
      HEAP32[i1 + 280 >> 2] = HEAP32[i11 + 4 >> 2];
      HEAP32[i1 + 284 >> 2] = HEAP32[i11 + 8 >> 2];
      HEAP32[i1 + 288 >> 2] = HEAP32[i11 + 12 >> 2];
      HEAP32[i1 + 324 >> 2] = 0;
      HEAP32[i1 + 248 >> 2] = 2160;
      HEAP32[i1 + 328 >> 2] = i9;
      HEAPF32[i1 + 332 >> 2] = 0.0;
      HEAP32[i1 + 336 >> 2] = i20;
      HEAP32[i1 + 340 >> 2] = i22;
      d23 = +HEAPF32[i9 + 248 >> 2];
      HEAP32[i1 + 136 >> 2] = 0;
      HEAPF32[i1 + 140 >> 2] = 1.0;
      HEAPF32[i1 + 144 >> 2] = 1.0;
      HEAPF32[i1 + 148 >> 2] = 1.0;
      HEAPF32[i1 + 152 >> 2] = 0.0;
      HEAP32[i1 + 128 >> 2] = 16680;
      HEAP32[i1 + 132 >> 2] = 8;
      HEAPF32[i1 + 156 >> 2] = d23;
      HEAPF32[i1 + 172 >> 2] = d23;
      HEAPF32[i1 + 332 >> 2] = +HEAPF32[i2 + 56 >> 2];
      i22 = HEAP32[i9 + 188 >> 2] | 0;
      HEAP16[i1 + 256 >> 1] = HEAP16[i22 + 4 >> 1] | 0;
      HEAP16[i1 + 258 >> 1] = HEAP16[i22 + 6 >> 1] | 0;
      HEAP32[i1 + 112 >> 2] = HEAP32[i11 + 0 >> 2];
      HEAP32[i1 + 116 >> 2] = HEAP32[i11 + 4 >> 2];
      HEAP32[i1 + 120 >> 2] = HEAP32[i11 + 8 >> 2];
      HEAP32[i1 + 124 >> 2] = HEAP32[i11 + 12 >> 2];
      HEAP32[i1 + 64 >> 2] = HEAP32[i9 + 4 >> 2];
      HEAP32[i1 + 68 >> 2] = HEAP32[i9 + 8 >> 2];
      HEAP32[i1 + 72 >> 2] = HEAP32[i9 + 12 >> 2];
      HEAP32[i1 + 76 >> 2] = HEAP32[i9 + 16 >> 2];
      HEAP32[i1 + 80 >> 2] = HEAP32[i9 + 20 >> 2];
      HEAP32[i1 + 84 >> 2] = HEAP32[i9 + 24 >> 2];
      HEAP32[i1 + 88 >> 2] = HEAP32[i9 + 28 >> 2];
      HEAP32[i1 + 92 >> 2] = HEAP32[i9 + 32 >> 2];
      HEAP32[i1 + 96 >> 2] = HEAP32[i9 + 36 >> 2];
      HEAP32[i1 + 100 >> 2] = HEAP32[i9 + 40 >> 2];
      HEAP32[i1 + 104 >> 2] = HEAP32[i9 + 44 >> 2];
      HEAP32[i1 + 108 >> 2] = HEAP32[i9 + 48 >> 2];
      __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i2, i1 + 128 | 0, i9 + 4 | 0, i1 + 64 | 0, i1 + 248 | 0, 0.0);
      d23 = +HEAPF32[i1 + 252 >> 2];
      if (d23 < 1.0) {
       HEAPF32[i9 + 244 >> 2] = d23;
       __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i9 + 4 | 0, +HEAPF32[i9 + 312 >> 2], +HEAPF32[i9 + 316 >> 2], +HEAPF32[i9 + 320 >> 2], i9 + 328 | 0, d23 * d21, i1 + 184 | 0);
       HEAPF32[i9 + 244 >> 2] = 0.0;
       __ZN11btRigidBody24setCenterOfMassTransformERK11btTransform(i9, i1 + 184 | 0);
       i12 = 4;
      } else i12 = 0;
      if ((i12 | 0) == 0) i10 = 11;
     } else i10 = 11;
     if ((i10 | 0) == 11) {
      i10 = 0;
      i12 = 0;
     }
     i13 = HEAP32[5022] | 0;
     i22 = (HEAP32[i13 + 16 >> 2] | 0) + -1 | 0;
     HEAP32[i13 + 16 >> 2] = i22;
     do if ((i22 | 0) == 0) {
      if ((HEAP32[i13 + 4 >> 2] | 0) != 0) {
       _gettimeofday(i1 + 248 | 0, 0) | 0;
       i22 = HEAP32[5008] | 0;
       HEAPF32[i13 + 8 >> 2] = +(((HEAP32[i1 + 252 >> 2] | 0) - (HEAP32[i22 + 4 >> 2] | 0) + (((HEAP32[i1 + 248 >> 2] | 0) - (HEAP32[i22 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i13 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i13 + 8 >> 2];
       if ((HEAP32[i13 + 16 >> 2] | 0) != 0) break;
       i13 = HEAP32[5022] | 0;
      }
      HEAP32[5022] = HEAP32[i13 + 20 >> 2];
     } while (0);
     if ((i12 | 0) == 4) break;
    }
    __ZN11btRigidBody24setCenterOfMassTransformERK11btTransform(i9, i1 + 184 | 0);
   } while (0);
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) < (HEAP32[i2 + 232 >> 2] | 0));
 }
 do if ((HEAP8[i2 + 275 >> 0] | 0) != 0) {
  __ZN15CProfileManager13Start_ProfileEPKc(1920);
  i11 = HEAP32[i2 + 308 >> 2] | 0;
  if ((i11 | 0) > 0) {
   i8 = 0;
   do {
    i9 = HEAP32[(HEAP32[i2 + 316 >> 2] | 0) + (i8 << 2) >> 2] | 0;
    i18 = HEAP32[i9 + 740 >> 2] | 0;
    if ((HEAP32[i18 + 236 >> 2] & 2 | 0) == 0) i18 = 0;
    i10 = HEAP32[i9 + 744 >> 2] | 0;
    if ((HEAP32[i10 + 236 >> 2] & 2 | 0) == 0) i10 = 0;
    i20 = HEAP32[i9 + 748 >> 2] | 0;
    if ((i20 | 0) > 0) {
     i13 = i18 + 52 | 0;
     i12 = i18 + 56 | 0;
     i11 = i18 + 60 | 0;
     i16 = i10 + 52 | 0;
     i14 = i10 + 56 | 0;
     i15 = i10 + 60 | 0;
     i17 = (i10 | 0) == 0;
     if ((i18 | 0) == 0) {
      i18 = i10 + 228 | 0;
      i19 = 0;
      do {
       d21 = +HEAPF32[57] * +HEAPF32[i18 >> 2];
       if ((d21 > 0.0 ? (d3 = +HEAPF32[i9 + (i19 * 184 | 0) + 124 >> 2], d3 != 0.0) : 0) ? (d4 = d21 * d3 * +HEAPF32[i9 + (i19 * 184 | 0) + 68 >> 2], d5 = d21 * d3 * +HEAPF32[i9 + (i19 * 184 | 0) + 72 >> 2], d6 = d21 * d3 * +HEAPF32[i9 + (i19 * 184 | 0) + 76 >> 2], HEAPF32[i1 + 48 >> 2] = -d4, HEAPF32[i1 + 52 >> 2] = -d5, HEAPF32[i1 + 56 >> 2] = -d6, HEAPF32[i1 + 60 >> 2] = 0.0, d26 = +HEAPF32[i9 + (i19 * 184 | 0) + 56 >> 2] - +HEAPF32[i12 >> 2], d25 = +HEAPF32[i9 + (i19 * 184 | 0) + 60 >> 2] - +HEAPF32[i11 >> 2], HEAPF32[i1 + 32 >> 2] = +HEAPF32[i9 + (i19 * 184 | 0) + 52 >> 2] - +HEAPF32[i13 >> 2], HEAPF32[i1 + 36 >> 2] = d26, HEAPF32[i1 + 40 >> 2] = d25, HEAPF32[i1 + 44 >> 2] = 0.0, d25 = +HEAPF32[i9 + (i19 * 184 | 0) + 40 >> 2] - +HEAPF32[i14 >> 2], d26 = +HEAPF32[i9 + (i19 * 184 | 0) + 44 >> 2] - +HEAPF32[i15 >> 2], HEAPF32[i1 + 16 >> 2] = +HEAPF32[i9 + (i19 * 184 | 0) + 36 >> 2] - +HEAPF32[i16 >> 2], HEAPF32[i1 + 20 >> 2] = d25, HEAPF32[i1 + 24 >> 2] = d26, HEAPF32[i1 + 28 >> 2] = 0.0, !i17) : 0) {
        HEAPF32[i1 >> 2] = d4;
        HEAPF32[i1 + 4 >> 2] = d5;
        HEAPF32[i1 + 8 >> 2] = d6;
        HEAPF32[i1 + 12 >> 2] = 0.0;
        __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i10, i1, i1 + 16 | 0);
        i20 = HEAP32[i9 + 748 >> 2] | 0;
       }
       i19 = i19 + 1 | 0;
      } while ((i19 | 0) < (i20 | 0));
     } else {
      i20 = i18 + 228 | 0;
      i22 = i10 + 228 | 0;
      i19 = 0;
      do {
       d21 = +HEAPF32[i20 >> 2] * +HEAPF32[i22 >> 2];
       if ((d21 > 0.0 ? (d7 = +HEAPF32[i9 + (i19 * 184 | 0) + 124 >> 2], d7 != 0.0) : 0) ? (d25 = -(d21 * d7 * +HEAPF32[i9 + (i19 * 184 | 0) + 72 >> 2]), d26 = -(d21 * d7 * +HEAPF32[i9 + (i19 * 184 | 0) + 76 >> 2]), HEAPF32[i1 + 48 >> 2] = -(d21 * d7 * +HEAPF32[i9 + (i19 * 184 | 0) + 68 >> 2]), HEAPF32[i1 + 52 >> 2] = d25, HEAPF32[i1 + 56 >> 2] = d26, HEAPF32[i1 + 60 >> 2] = 0.0, d26 = +HEAPF32[i9 + (i19 * 184 | 0) + 56 >> 2] - +HEAPF32[i12 >> 2], d25 = +HEAPF32[i9 + (i19 * 184 | 0) + 60 >> 2] - +HEAPF32[i11 >> 2], HEAPF32[i1 + 32 >> 2] = +HEAPF32[i9 + (i19 * 184 | 0) + 52 >> 2] - +HEAPF32[i13 >> 2], HEAPF32[i1 + 36 >> 2] = d26, HEAPF32[i1 + 40 >> 2] = d25, HEAPF32[i1 + 44 >> 2] = 0.0, d25 = +HEAPF32[i9 + (i19 * 184 | 0) + 40 >> 2] - +HEAPF32[i14 >> 2], d26 = +HEAPF32[i9 + (i19 * 184 | 0) + 44 >> 2] - +HEAPF32[i15 >> 2], HEAPF32[i1 + 16 >> 2] = +HEAPF32[i9 + (i19 * 184 | 0) + 36 >> 2] - +HEAPF32[i16 >> 2], HEAPF32[i1 + 20 >> 2] = d25, HEAPF32[i1 + 24 >> 2] = d26, HEAPF32[i1 + 28 >> 2] = 0.0, __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i18, i1 + 48 | 0, i1 + 32 | 0), !i17) : 0) {
        d25 = -+HEAPF32[i1 + 52 >> 2];
        d26 = -+HEAPF32[i1 + 56 >> 2];
        HEAPF32[i1 >> 2] = -+HEAPF32[i1 + 48 >> 2];
        HEAPF32[i1 + 4 >> 2] = d25;
        HEAPF32[i1 + 8 >> 2] = d26;
        HEAPF32[i1 + 12 >> 2] = 0.0;
        __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i10, i1, i1 + 16 | 0);
       }
       i19 = i19 + 1 | 0;
      } while ((i19 | 0) < (HEAP32[i9 + 748 >> 2] | 0));
     }
     i11 = HEAP32[i2 + 308 >> 2] | 0;
    }
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) < (i11 | 0));
  }
  i2 = HEAP32[5022] | 0;
  i22 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
  HEAP32[i2 + 16 >> 2] = i22;
  if ((i22 | 0) == 0) {
   if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
    _gettimeofday(i1 + 248 | 0, 0) | 0;
    i22 = HEAP32[5008] | 0;
    HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 252 >> 2] | 0) - (HEAP32[i22 + 4 >> 2] | 0) + (((HEAP32[i1 + 248 >> 2] | 0) - (HEAP32[i22 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
    if ((HEAP32[i2 + 16 >> 2] | 0) != 0) break;
    i2 = HEAP32[5022] | 0;
   }
   HEAP32[5022] = HEAP32[i2 + 20 >> 2];
  }
 } while (0);
 i2 = HEAP32[5022] | 0;
 i22 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i22;
 if ((i22 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 + 248 | 0, 0) | 0;
  i22 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 252 >> 2] | 0) - (HEAP32[i22 + 4 >> 2] | 0) + (((HEAP32[i1 + 248 >> 2] | 0) - (HEAP32[i22 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN28btCompoundCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i2, i7, i12, i8, i6) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i3 = (HEAP8[i2 + 28 >> 0] | 0) != 0;
 i5 = i3 ? i12 : i7;
 i3 = i3 ? i7 : i12;
 i4 = HEAP32[i5 + 4 >> 2] | 0;
 if ((HEAP32[i4 + 68 >> 2] | 0) != (HEAP32[i2 + 40 >> 2] | 0)) {
  i11 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i11 | 0) > 0) {
   i10 = 0;
   do {
    i9 = HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i10 << 2) >> 2] | 0;
    if ((i9 | 0) != 0) {
     FUNCTION_TABLE_vi[HEAP32[HEAP32[i9 >> 2] >> 2] & 511](i9);
     i15 = HEAP32[i2 + 4 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i15 >> 2] | 0) + 60 >> 2] & 127](i15, HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i10 << 2) >> 2] | 0);
    }
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i11 | 0));
  }
  __ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEPK24btCollisionObjectWrapperS2_(i2, i7, i12);
 }
 i7 = HEAP32[i4 + 64 >> 2] | 0;
 i9 = HEAP32[i2 + 4 >> 2] | 0;
 i13 = HEAP32[i2 + 20 >> 2] | 0;
 i10 = HEAP32[i2 + 32 >> 2] | 0;
 HEAP32[i1 + 280 >> 2] = 18120;
 HEAP32[i1 + 284 >> 2] = i5;
 HEAP32[i1 + 288 >> 2] = i3;
 HEAP32[i1 + 292 >> 2] = i9;
 HEAP32[i1 + 296 >> 2] = i8;
 HEAP32[i1 + 300 >> 2] = i6;
 HEAP32[i1 + 304 >> 2] = i13;
 HEAP32[i1 + 308 >> 2] = i10;
 i8 = i1 + 272 | 0;
 HEAP8[i8 >> 0] = 1;
 i10 = i1 + 268 | 0;
 HEAP32[i10 >> 2] = 0;
 i9 = i1 + 260 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i1 + 264 >> 2] = 0;
 i12 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i12 | 0) > 0) {
  i11 = 0;
  while (1) {
   i13 = HEAP32[i13 + (i11 << 2) >> 2] | 0;
   if ((i13 | 0) != 0) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] & 127](i13, i1 + 256 | 0);
    i12 = HEAP32[i9 >> 2] | 0;
    if ((i12 | 0) > 0) {
     i14 = i12;
     i12 = 0;
     do {
      i13 = HEAP32[(HEAP32[i10 >> 2] | 0) + (i12 << 2) >> 2] | 0;
      if ((HEAP32[i13 + 748 >> 2] | 0) != 0) {
       HEAP32[i6 + 4 >> 2] = i13;
       i15 = HEAP32[i13 + 740 >> 2] | 0;
       i14 = HEAP32[(HEAP32[i6 + 8 >> 2] | 0) + 8 >> 2] | 0;
       if ((i15 | 0) == (i14 | 0)) __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i13, i15 + 4 | 0, (HEAP32[(HEAP32[i6 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0); else __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i13, (HEAP32[(HEAP32[i6 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i14 + 4 | 0);
       HEAP32[i6 + 4 >> 2] = 0;
       i14 = HEAP32[i9 >> 2] | 0;
      }
      i12 = i12 + 1 | 0;
     } while ((i12 | 0) < (i14 | 0));
     i12 = i14;
    }
    if ((i12 | 0) < 0) {
     if ((HEAP32[i1 + 264 >> 2] | 0) < 0) {
      i14 = HEAP32[i10 >> 2] | 0;
      if ((i12 | 0) > 0) {
       i13 = 0;
       do {
        if ((i13 | 0) != 0) HEAP32[0 + (i13 << 2) >> 2] = HEAP32[i14 + (i13 << 2) >> 2];
        i13 = i13 + 1 | 0;
       } while ((i13 | 0) != (i12 | 0));
      }
      if ((i14 | 0) != 0) {
       if ((HEAP8[i8 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i14 + -4 >> 2] | 0);
       }
       HEAP32[i10 >> 2] = 0;
      }
      HEAP8[i8 >> 0] = 1;
      HEAP32[i10 >> 2] = 0;
      HEAP32[i1 + 264 >> 2] = 0;
     }
     do {
      i13 = (HEAP32[i10 >> 2] | 0) + (i12 << 2) | 0;
      if ((i13 | 0) != 0) HEAP32[i13 >> 2] = 0;
      i12 = i12 + 1 | 0;
     } while ((i12 | 0) != 0);
    }
    HEAP32[i9 >> 2] = 0;
    i12 = HEAP32[i2 + 12 >> 2] | 0;
   }
   i11 = i11 + 1 | 0;
   if ((i11 | 0) >= (i12 | 0)) break;
   i13 = HEAP32[i2 + 20 >> 2] | 0;
  }
  i6 = HEAP32[i10 >> 2] | 0;
  if ((i6 | 0) != 0) {
   if ((HEAP8[i8 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i6 + -4 >> 2] | 0);
   }
   HEAP32[i10 >> 2] = 0;
  }
 }
 HEAP8[i8 >> 0] = 1;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i1 + 264 >> 2] = 0;
 if ((i7 | 0) == 0) {
  i6 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    __ZN22btCompoundLeafCallback17ProcessChildShapeEPK16btCollisionShapei(i1 + 280 | 0, HEAP32[(HEAP32[i4 + 24 >> 2] | 0) + (i7 * 80 | 0) + 64 >> 2] | 0, i7);
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) < (i6 | 0));
  } else {
   STACKTOP = i1;
   return;
  }
 } else {
  i15 = HEAP32[i5 + 12 >> 2] | 0;
  d30 = +HEAPF32[i15 >> 2];
  d29 = +HEAPF32[i15 + 16 >> 2];
  d28 = +HEAPF32[i15 + 32 >> 2];
  d27 = +HEAPF32[i15 + 4 >> 2];
  d26 = +HEAPF32[i15 + 20 >> 2];
  d25 = +HEAPF32[i15 + 36 >> 2];
  d21 = +HEAPF32[i15 + 8 >> 2];
  d19 = +HEAPF32[i15 + 24 >> 2];
  d17 = +HEAPF32[i15 + 40 >> 2];
  d24 = -+HEAPF32[i15 + 48 >> 2];
  d23 = -+HEAPF32[i15 + 52 >> 2];
  d22 = -+HEAPF32[i15 + 56 >> 2];
  i15 = HEAP32[i3 + 12 >> 2] | 0;
  d39 = +HEAPF32[i15 >> 2];
  d38 = +HEAPF32[i15 + 16 >> 2];
  d37 = +HEAPF32[i15 + 32 >> 2];
  d36 = +HEAPF32[i15 + 4 >> 2];
  d35 = +HEAPF32[i15 + 20 >> 2];
  d34 = +HEAPF32[i15 + 36 >> 2];
  d33 = +HEAPF32[i15 + 8 >> 2];
  d32 = +HEAPF32[i15 + 24 >> 2];
  d31 = +HEAPF32[i15 + 40 >> 2];
  d20 = +HEAPF32[i15 + 48 >> 2];
  d18 = +HEAPF32[i15 + 52 >> 2];
  d16 = +HEAPF32[i15 + 56 >> 2];
  HEAPF32[i1 + 160 >> 2] = d30 * d39 + d29 * d38 + d28 * d37;
  HEAPF32[i1 + 164 >> 2] = d30 * d36 + d29 * d35 + d28 * d34;
  HEAPF32[i1 + 168 >> 2] = d30 * d33 + d29 * d32 + d28 * d31;
  HEAPF32[i1 + 172 >> 2] = 0.0;
  HEAPF32[i1 + 176 >> 2] = d27 * d39 + d26 * d38 + d25 * d37;
  HEAPF32[i1 + 180 >> 2] = d27 * d36 + d26 * d35 + d25 * d34;
  HEAPF32[i1 + 184 >> 2] = d27 * d33 + d26 * d32 + d25 * d31;
  HEAPF32[i1 + 188 >> 2] = 0.0;
  HEAPF32[i1 + 192 >> 2] = d21 * d39 + d19 * d38 + d17 * d37;
  HEAPF32[i1 + 196 >> 2] = d21 * d36 + d19 * d35 + d17 * d34;
  HEAPF32[i1 + 200 >> 2] = d21 * d33 + d19 * d32 + d17 * d31;
  HEAPF32[i1 + 204 >> 2] = 0.0;
  HEAPF32[i1 + 208 >> 2] = d30 * d24 + d29 * d23 + d28 * d22 + (d30 * d20 + d29 * d18 + d28 * d16);
  HEAPF32[i1 + 212 >> 2] = d27 * d24 + d26 * d23 + d25 * d22 + (d27 * d20 + d26 * d18 + d25 * d16);
  HEAPF32[i1 + 216 >> 2] = d21 * d24 + d19 * d23 + d17 * d22 + (d21 * d20 + d19 * d18 + d17 * d16);
  HEAPF32[i1 + 220 >> 2] = 0.0;
  i15 = HEAP32[i3 + 4 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 8 >> 2] & 127](i15, i1 + 160 | 0, i1 + 240 | 0, i1 + 224 | 0);
  HEAP32[i1 + 128 >> 2] = HEAP32[i1 + 240 >> 2];
  HEAP32[i1 + 132 >> 2] = HEAP32[i1 + 244 >> 2];
  HEAP32[i1 + 136 >> 2] = HEAP32[i1 + 248 >> 2];
  HEAP32[i1 + 140 >> 2] = HEAP32[i1 + 252 >> 2];
  HEAP32[i1 + 144 >> 2] = HEAP32[i1 + 224 >> 2];
  HEAP32[i1 + 148 >> 2] = HEAP32[i1 + 228 >> 2];
  HEAP32[i1 + 152 >> 2] = HEAP32[i1 + 232 >> 2];
  HEAP32[i1 + 156 >> 2] = HEAP32[i1 + 236 >> 2];
  __ZNK6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(HEAP32[i7 >> 2] | 0, i1 + 128 | 0, i1 + 280 | 0);
 }
 i6 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i7 = 0;
 do {
  do if ((HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i7 << 2) >> 2] | 0) != 0) {
   i13 = HEAP32[i4 + 24 >> 2] | 0;
   i15 = HEAP32[i13 + (i7 * 80 | 0) + 64 >> 2] | 0;
   i14 = HEAP32[i5 + 12 >> 2] | 0;
   d19 = +HEAPF32[i14 >> 2];
   d20 = +HEAPF32[i14 + 4 >> 2];
   d21 = +HEAPF32[i14 + 8 >> 2];
   d22 = +HEAPF32[i14 + 16 >> 2];
   d23 = +HEAPF32[i14 + 20 >> 2];
   d24 = +HEAPF32[i14 + 24 >> 2];
   d31 = +HEAPF32[i14 + 32 >> 2];
   d33 = +HEAPF32[i14 + 36 >> 2];
   d35 = +HEAPF32[i14 + 40 >> 2];
   d25 = +HEAPF32[i13 + (i7 * 80 | 0) >> 2];
   d26 = +HEAPF32[i13 + (i7 * 80 | 0) + 16 >> 2];
   d27 = +HEAPF32[i13 + (i7 * 80 | 0) + 32 >> 2];
   d28 = +HEAPF32[i13 + (i7 * 80 | 0) + 4 >> 2];
   d29 = +HEAPF32[i13 + (i7 * 80 | 0) + 20 >> 2];
   d30 = +HEAPF32[i13 + (i7 * 80 | 0) + 36 >> 2];
   d32 = +HEAPF32[i13 + (i7 * 80 | 0) + 8 >> 2];
   d34 = +HEAPF32[i13 + (i7 * 80 | 0) + 24 >> 2];
   d36 = +HEAPF32[i13 + (i7 * 80 | 0) + 40 >> 2];
   d17 = +HEAPF32[i13 + (i7 * 80 | 0) + 48 >> 2];
   d18 = +HEAPF32[i13 + (i7 * 80 | 0) + 52 >> 2];
   d39 = +HEAPF32[i13 + (i7 * 80 | 0) + 56 >> 2];
   d37 = +HEAPF32[i14 + 48 >> 2] + (d19 * d17 + d20 * d18 + d21 * d39);
   d38 = +HEAPF32[i14 + 52 >> 2] + (d22 * d17 + d23 * d18 + d24 * d39);
   d39 = +HEAPF32[i14 + 56 >> 2] + (d31 * d17 + d33 * d18 + d35 * d39);
   HEAPF32[i1 + 64 >> 2] = d19 * d25 + d20 * d26 + d21 * d27;
   HEAPF32[i1 + 68 >> 2] = d19 * d28 + d20 * d29 + d21 * d30;
   HEAPF32[i1 + 72 >> 2] = d19 * d32 + d20 * d34 + d21 * d36;
   HEAPF32[i1 + 76 >> 2] = 0.0;
   HEAPF32[i1 + 80 >> 2] = d22 * d25 + d23 * d26 + d24 * d27;
   HEAPF32[i1 + 84 >> 2] = d22 * d28 + d23 * d29 + d24 * d30;
   HEAPF32[i1 + 88 >> 2] = d22 * d32 + d23 * d34 + d24 * d36;
   HEAPF32[i1 + 92 >> 2] = 0.0;
   HEAPF32[i1 + 96 >> 2] = d31 * d25 + d33 * d26 + d35 * d27;
   HEAPF32[i1 + 100 >> 2] = d31 * d28 + d33 * d29 + d35 * d30;
   HEAPF32[i1 + 104 >> 2] = d31 * d32 + d33 * d34 + d35 * d36;
   HEAPF32[i1 + 108 >> 2] = 0.0;
   HEAPF32[i1 + 112 >> 2] = d37;
   HEAPF32[i1 + 116 >> 2] = d38;
   HEAPF32[i1 + 120 >> 2] = d39;
   HEAPF32[i1 + 124 >> 2] = 0.0;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 8 >> 2] & 127](i15, i1 + 64 | 0, i1 + 48 | 0, i1 + 32 | 0);
   i15 = HEAP32[i3 + 4 >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 8 >> 2] & 127](i15, HEAP32[i3 + 12 >> 2] | 0, i1 + 16 | 0, i1);
   if (!(+HEAPF32[i1 + 48 >> 2] > +HEAPF32[i1 >> 2]) ? !(+HEAPF32[i1 + 32 >> 2] < +HEAPF32[i1 + 16 >> 2]) : 0) i8 = 1; else i8 = 0;
   if (!(!(+HEAPF32[i1 + 56 >> 2] > +HEAPF32[i1 + 8 >> 2]) ? !(+HEAPF32[i1 + 40 >> 2] < +HEAPF32[i1 + 24 >> 2]) : 0)) i8 = 0;
   if (!(+HEAPF32[i1 + 52 >> 2] > +HEAPF32[i1 + 4 >> 2]) ? !(+HEAPF32[i1 + 36 >> 2] < +HEAPF32[i1 + 20 >> 2] | i8 ^ 1) : 0) break;
   i15 = HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i7 << 2) >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[HEAP32[i15 >> 2] >> 2] & 511](i15);
   i15 = HEAP32[i2 + 4 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i15 >> 2] | 0) + 60 >> 2] & 127](i15, HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i7 << 2) >> 2] | 0);
   HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i7 << 2) >> 2] = 0;
  } while (0);
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) < (i6 | 0));
 STACKTOP = i1;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver21addFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i9, i16, i6, i2, i8, i20, i17, i15, d14, d4, d5) {
 i9 = i9 | 0;
 i16 = i16 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i20 = i20 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 d14 = +d14;
 d4 = +d4;
 d5 = +d5;
 var i1 = 0, i3 = 0, i7 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d18 = 0.0, i19 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, d31 = 0.0;
 i3 = STACKTOP;
 i1 = HEAP32[i9 + 68 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i9 + 72 >> 2] | 0) ? (i7 = (i1 | 0) == 0 ? 1 : i1 << 1, (i1 | 0) < (i7 | 0)) : 0) {
  if ((i7 | 0) == 0) {
   i19 = 0;
   i28 = i1;
  } else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i19 = _malloc((i7 * 152 | 3) + 16 | 0) | 0;
   if ((i19 | 0) == 0) i19 = 0; else {
    HEAP32[(i19 + 19 & -16) + -4 >> 2] = i19;
    i19 = i19 + 19 & -16;
   }
   i28 = HEAP32[i9 + 68 >> 2] | 0;
  }
  if ((i28 | 0) > 0) {
   i27 = 0;
   do {
    _memcpy(i19 + (i27 * 152 | 0) | 0, (HEAP32[i9 + 76 >> 2] | 0) + (i27 * 152 | 0) | 0, 152) | 0;
    i27 = i27 + 1 | 0;
   } while ((i27 | 0) != (i28 | 0));
  }
  i27 = HEAP32[i9 + 76 >> 2] | 0;
  if ((i27 | 0) != 0) {
   if ((HEAP8[i9 + 80 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i27 + -4 >> 2] | 0);
   }
   HEAP32[i9 + 76 >> 2] = 0;
  }
  HEAP8[i9 + 80 >> 0] = 1;
  HEAP32[i9 + 76 >> 2] = i19;
  HEAP32[i9 + 72 >> 2] = i7;
  i7 = HEAP32[i9 + 68 >> 2] | 0;
 } else i7 = i1;
 HEAP32[i9 + 68 >> 2] = i7 + 1;
 i7 = HEAP32[i9 + 76 >> 2] | 0;
 HEAP32[i7 + (i1 * 152 | 0) + 140 >> 2] = i8;
 i8 = HEAP32[i9 + 16 >> 2] | 0;
 i19 = HEAP32[i8 + (i6 * 244 | 0) + 240 >> 2] | 0;
 i9 = HEAP32[i8 + (i2 * 244 | 0) + 240 >> 2] | 0;
 HEAP32[i7 + (i1 * 152 | 0) + 144 >> 2] = i6;
 HEAP32[i7 + (i1 * 152 | 0) + 148 >> 2] = i2;
 d13 = +HEAPF32[i20 + 84 >> 2];
 HEAPF32[i7 + (i1 * 152 | 0) + 104 >> 2] = d13;
 HEAP32[i7 + (i1 * 152 | 0) + 132 >> 2] = 0;
 HEAPF32[i7 + (i1 * 152 | 0) + 100 >> 2] = 0.0;
 HEAPF32[i7 + (i1 * 152 | 0) + 96 >> 2] = 0.0;
 if ((i19 | 0) != 0) {
  HEAP32[i7 + (i1 * 152 | 0) + 16 >> 2] = HEAP32[i16 + 0 >> 2];
  HEAP32[i7 + (i1 * 152 | 0) + 20 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i7 + (i1 * 152 | 0) + 24 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i7 + (i1 * 152 | 0) + 28 >> 2] = HEAP32[i16 + 12 >> 2];
  d24 = +HEAPF32[i17 + 4 >> 2];
  d25 = +HEAPF32[i7 + (i1 * 152 | 0) + 24 >> 2];
  d26 = +HEAPF32[i17 + 8 >> 2];
  d18 = +HEAPF32[i7 + (i1 * 152 | 0) + 20 >> 2];
  d21 = +HEAPF32[i7 + (i1 * 152 | 0) + 16 >> 2];
  d12 = +HEAPF32[i17 >> 2];
  HEAPF32[i7 + (i1 * 152 | 0) >> 2] = d24 * d25 - d26 * d18;
  HEAPF32[i7 + (i1 * 152 | 0) + 4 >> 2] = d26 * d21 - d25 * d12;
  HEAPF32[i7 + (i1 * 152 | 0) + 8 >> 2] = d18 * d12 - d24 * d21;
  HEAPF32[i7 + (i1 * 152 | 0) + 12 >> 2] = 0.0;
  d22 = ((d24 * d25 - d26 * d18) * +HEAPF32[i19 + 280 >> 2] + (d26 * d21 - d25 * d12) * +HEAPF32[i19 + 284 >> 2] + (d18 * d12 - d24 * d21) * +HEAPF32[i19 + 288 >> 2]) * +HEAPF32[i19 + 548 >> 2];
  d23 = ((d24 * d25 - d26 * d18) * +HEAPF32[i19 + 296 >> 2] + (d26 * d21 - d25 * d12) * +HEAPF32[i19 + 300 >> 2] + (d18 * d12 - d24 * d21) * +HEAPF32[i19 + 304 >> 2]) * +HEAPF32[i19 + 552 >> 2];
  HEAPF32[i7 + (i1 * 152 | 0) + 64 >> 2] = ((d24 * d25 - d26 * d18) * +HEAPF32[i19 + 264 >> 2] + +HEAPF32[i19 + 268 >> 2] * (d26 * d21 - d25 * d12) + (d18 * d12 - d24 * d21) * +HEAPF32[i19 + 272 >> 2]) * +HEAPF32[i19 + 544 >> 2];
  HEAPF32[i7 + (i1 * 152 | 0) + 68 >> 2] = d22;
  HEAPF32[i7 + (i1 * 152 | 0) + 72 >> 2] = d23;
  HEAPF32[i7 + (i1 * 152 | 0) + 76 >> 2] = 0.0;
  d18 = d24 * d25 - d26 * d18;
 } else {
  HEAP32[i7 + (i1 * 152 | 0) + 64 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 68 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 72 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 76 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 0 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 4 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 8 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 12 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 16 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 20 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 24 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 28 >> 2] = 0;
  d18 = 0.0;
 }
 if ((i9 | 0) != 0) {
  d12 = -+HEAPF32[i16 >> 2];
  d25 = -+HEAPF32[i16 + 4 >> 2];
  d10 = -+HEAPF32[i16 + 8 >> 2];
  HEAPF32[i7 + (i1 * 152 | 0) + 48 >> 2] = d12;
  HEAPF32[i7 + (i1 * 152 | 0) + 52 >> 2] = d25;
  HEAPF32[i7 + (i1 * 152 | 0) + 56 >> 2] = d10;
  HEAPF32[i7 + (i1 * 152 | 0) + 60 >> 2] = 0.0;
  d26 = +HEAPF32[i15 + 4 >> 2];
  d29 = +HEAPF32[i15 + 8 >> 2];
  d23 = +HEAPF32[i15 >> 2];
  HEAPF32[i7 + (i1 * 152 | 0) + 32 >> 2] = d26 * d10 - d29 * d25;
  HEAPF32[i7 + (i1 * 152 | 0) + 36 >> 2] = d29 * d12 - d23 * d10;
  HEAPF32[i7 + (i1 * 152 | 0) + 40 >> 2] = d23 * d25 - d26 * d12;
  HEAPF32[i7 + (i1 * 152 | 0) + 44 >> 2] = 0.0;
  d24 = ((d26 * d10 - d29 * d25) * +HEAPF32[i9 + 264 >> 2] + +HEAPF32[i9 + 268 >> 2] * (d29 * d12 - d23 * d10) + (d23 * d25 - d26 * d12) * +HEAPF32[i9 + 272 >> 2]) * +HEAPF32[i9 + 544 >> 2];
  d22 = ((d26 * d10 - d29 * d25) * +HEAPF32[i9 + 280 >> 2] + (d29 * d12 - d23 * d10) * +HEAPF32[i9 + 284 >> 2] + (d23 * d25 - d26 * d12) * +HEAPF32[i9 + 288 >> 2]) * +HEAPF32[i9 + 548 >> 2];
  d21 = ((d26 * d10 - d29 * d25) * +HEAPF32[i9 + 296 >> 2] + (d29 * d12 - d23 * d10) * +HEAPF32[i9 + 300 >> 2] + (d23 * d25 - d26 * d12) * +HEAPF32[i9 + 304 >> 2]) * +HEAPF32[i9 + 552 >> 2];
  HEAPF32[i7 + (i1 * 152 | 0) + 80 >> 2] = d24;
  HEAPF32[i7 + (i1 * 152 | 0) + 84 >> 2] = d22;
  HEAPF32[i7 + (i1 * 152 | 0) + 88 >> 2] = d21;
  HEAPF32[i7 + (i1 * 152 | 0) + 92 >> 2] = 0.0;
  d11 = d26 * d10 - d29 * d25;
  d10 = d29 * d12 - d23 * d10;
  d12 = d23 * d25 - d26 * d12;
 } else {
  HEAP32[i7 + (i1 * 152 | 0) + 80 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 84 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 88 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 92 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 32 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 36 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 40 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 44 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 48 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 52 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 56 >> 2] = 0;
  HEAP32[i7 + (i1 * 152 | 0) + 60 >> 2] = 0;
  d24 = 0.0;
  d22 = 0.0;
  d21 = 0.0;
  d11 = 0.0;
  d10 = 0.0;
  d12 = 0.0;
 }
 if ((i19 | 0) != 0) {
  d29 = +HEAPF32[i7 + (i1 * 152 | 0) + 68 >> 2];
  d30 = +HEAPF32[i17 + 8 >> 2];
  d31 = +HEAPF32[i7 + (i1 * 152 | 0) + 72 >> 2];
  d25 = +HEAPF32[i17 + 4 >> 2];
  d23 = +HEAPF32[i17 >> 2];
  d26 = +HEAPF32[i7 + (i1 * 152 | 0) + 64 >> 2];
  d23 = +HEAPF32[i19 + 344 >> 2] + ((d29 * d30 - d31 * d25) * +HEAPF32[i16 >> 2] + (d31 * d23 - d30 * d26) * +HEAPF32[i16 + 4 >> 2] + (d25 * d26 - d29 * d23) * +HEAPF32[i16 + 8 >> 2]);
 } else d23 = 0.0;
 if ((i9 | 0) != 0) {
  d30 = -d24;
  d31 = -d22;
  d25 = -d21;
  d26 = +HEAPF32[i15 + 8 >> 2];
  d29 = +HEAPF32[i15 + 4 >> 2];
  d21 = +HEAPF32[i15 >> 2];
  d21 = +HEAPF32[i9 + 344 >> 2] + ((d26 * d31 - d29 * d25) * +HEAPF32[i16 >> 2] + (d21 * d25 - d26 * d30) * +HEAPF32[i16 + 4 >> 2] + (d29 * d30 - d21 * d31) * +HEAPF32[i16 + 8 >> 2]);
 } else d21 = 0.0;
 d14 = d14 / (d23 + d21);
 HEAPF32[i7 + (i1 * 152 | 0) + 108 >> 2] = d14;
 if ((i19 | 0) != 0) {
  d22 = +HEAPF32[i8 + (i6 * 244 | 0) + 176 >> 2] + +HEAPF32[i8 + (i6 * 244 | 0) + 208 >> 2];
  d21 = +HEAPF32[i8 + (i6 * 244 | 0) + 180 >> 2] + +HEAPF32[i8 + (i6 * 244 | 0) + 212 >> 2];
  d23 = +HEAPF32[i8 + (i6 * 244 | 0) + 184 >> 2] + +HEAPF32[i8 + (i6 * 244 | 0) + 216 >> 2];
 } else {
  d22 = 0.0;
  d21 = 0.0;
  d23 = 0.0;
 }
 if ((i19 | 0) != 0) {
  d24 = +HEAPF32[i8 + (i6 * 244 | 0) + 192 >> 2];
  d25 = +HEAPF32[i8 + (i6 * 244 | 0) + 196 >> 2];
  d26 = +HEAPF32[i8 + (i6 * 244 | 0) + 200 >> 2];
 } else {
  d24 = 0.0;
  d25 = 0.0;
  d26 = 0.0;
 }
 d18 = d22 * +HEAPF32[i7 + (i1 * 152 | 0) + 16 >> 2] + d21 * +HEAPF32[i7 + (i1 * 152 | 0) + 20 >> 2] + d23 * +HEAPF32[i7 + (i1 * 152 | 0) + 24 >> 2] + (d24 * d18 + d25 * +HEAPF32[i7 + (i1 * 152 | 0) + 4 >> 2] + d26 * +HEAPF32[i7 + (i1 * 152 | 0) + 8 >> 2]);
 if ((i9 | 0) != 0) {
  d21 = +HEAPF32[i8 + (i2 * 244 | 0) + 176 >> 2] + +HEAPF32[i8 + (i2 * 244 | 0) + 208 >> 2];
  d23 = +HEAPF32[i8 + (i2 * 244 | 0) + 180 >> 2] + +HEAPF32[i8 + (i2 * 244 | 0) + 212 >> 2];
  d22 = +HEAPF32[i8 + (i2 * 244 | 0) + 184 >> 2] + +HEAPF32[i8 + (i2 * 244 | 0) + 216 >> 2];
 } else {
  d21 = 0.0;
  d23 = 0.0;
  d22 = 0.0;
 }
 d21 = d21 * +HEAPF32[i7 + (i1 * 152 | 0) + 48 >> 2] + d23 * +HEAPF32[i7 + (i1 * 152 | 0) + 52 >> 2] + d22 * +HEAPF32[i7 + (i1 * 152 | 0) + 56 >> 2];
 if ((i9 | 0) == 0) {
  d29 = 0.0;
  d30 = 0.0;
  d31 = 0.0;
  d29 = d29 * d11;
  d30 = d30 * d10;
  d30 = d29 + d30;
  d31 = d31 * d12;
  d31 = d30 + d31;
  d31 = d21 + d31;
  d31 = d18 + d31;
  d31 = d4 - d31;
  d31 = d14 * d31;
  i28 = i7 + (i1 * 152 | 0) + 112 | 0;
  HEAPF32[i28 >> 2] = d31;
  i28 = i7 + (i1 * 152 | 0) + 116 | 0;
  HEAPF32[i28 >> 2] = d5;
  d31 = -d13;
  i28 = i7 + (i1 * 152 | 0) + 120 | 0;
  HEAPF32[i28 >> 2] = d31;
  i28 = i7 + (i1 * 152 | 0) + 124 | 0;
  HEAPF32[i28 >> 2] = d13;
  STACKTOP = i3;
  return;
 }
 d29 = +HEAPF32[i8 + (i2 * 244 | 0) + 192 >> 2];
 d30 = +HEAPF32[i8 + (i2 * 244 | 0) + 196 >> 2];
 d31 = +HEAPF32[i8 + (i2 * 244 | 0) + 200 >> 2];
 d29 = d29 * d11;
 d30 = d30 * d10;
 d30 = d29 + d30;
 d31 = d31 * d12;
 d31 = d30 + d31;
 d31 = d21 + d31;
 d31 = d18 + d31;
 d31 = d4 - d31;
 d31 = d14 * d31;
 i28 = i7 + (i1 * 152 | 0) + 112 | 0;
 HEAPF32[i28 >> 2] = d31;
 i28 = i7 + (i1 * 152 | 0) + 116 | 0;
 HEAPF32[i28 >> 2] = d5;
 d31 = -d13;
 i28 = i7 + (i1 * 152 | 0) + 120 | 0;
 HEAPF32[i28 >> 2] = d31;
 i28 = i7 + (i1 * 152 | 0) + 124 | 0;
 HEAPF32[i28 >> 2] = d13;
 STACKTOP = i3;
 return;
}
function __ZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_(i1, i3, i16, i15, i13) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i13 = i13 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d14 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 HEAP8[i1 + 60 >> 0] = i16 & 1;
 if (i16) {
  d12 = +HEAPF32[i15 >> 2] + -1.0;
  d9 = +HEAPF32[i15 + 4 >> 2] + -1.0;
  d10 = +HEAPF32[i15 + 8 >> 2] + -1.0;
  HEAPF32[i1 + 4 >> 2] = d12;
  HEAPF32[i1 + 8 >> 2] = d9;
  HEAPF32[i1 + 12 >> 2] = d10;
  HEAPF32[i1 + 16 >> 2] = 0.0;
  d7 = +HEAPF32[i13 >> 2] + 1.0;
  d5 = +HEAPF32[i13 + 4 >> 2] + 1.0;
  d4 = +HEAPF32[i13 + 8 >> 2] + 1.0;
  HEAPF32[i1 + 20 >> 2] = d7;
  HEAPF32[i1 + 24 >> 2] = d5;
  HEAPF32[i1 + 28 >> 2] = d4;
  HEAPF32[i1 + 32 >> 2] = 0.0;
  HEAPF32[i1 + 36 >> 2] = 65533.0 / (d7 - d12);
  HEAPF32[i1 + 40 >> 2] = 65533.0 / (d5 - d9);
  HEAPF32[i1 + 44 >> 2] = 65533.0 / (d4 - d10);
  HEAPF32[i1 + 48 >> 2] = 0.0;
  HEAP8[i1 + 60 >> 0] = 1;
  d6 = d12 + +(~~((d12 - d12) * (65533.0 / (d7 - d12))) & 65534) / (65533.0 / (d7 - d12)) + -1.0;
  d8 = d9 + +(~~((d9 - d9) * (65533.0 / (d5 - d9))) & 65534) / (65533.0 / (d5 - d9)) + -1.0;
  d11 = d10 + +(~~((d10 - d10) * (65533.0 / (d4 - d10))) & 65534) / (65533.0 / (d4 - d10)) + -1.0;
  if (d6 < d12) HEAPF32[i1 + 4 >> 2] = d6; else d6 = d12;
  if (d8 < d9) HEAPF32[i1 + 8 >> 2] = d8; else d8 = d9;
  if (d11 < d10) HEAPF32[i1 + 12 >> 2] = d11; else d11 = d10;
  d14 = d6 + +((~~((d7 - d6) * (65533.0 / (d7 - d12)) + 1.0) & 65535 | 1) & 65535) / (65533.0 / (d7 - d12)) + 1.0;
  d12 = d8 + +((~~((d5 - d8) * (65533.0 / (d5 - d9)) + 1.0) & 65535 | 1) & 65535) / (65533.0 / (d5 - d9)) + 1.0;
  d9 = d11 + +((~~((d4 - d11) * (65533.0 / (d4 - d10)) + 1.0) & 65535 | 1) & 65535) / (65533.0 / (d4 - d10)) + 1.0;
  if (d7 < d14) {
   HEAPF32[i1 + 20 >> 2] = d14;
   d7 = d14;
  }
  if (d5 < d12) {
   HEAPF32[i1 + 24 >> 2] = d12;
   d5 = d12;
  }
  if (d4 < d9) {
   HEAPF32[i1 + 28 >> 2] = d9;
   d4 = d9;
  }
  HEAPF32[i1 + 36 >> 2] = 65533.0 / (d7 - d6);
  HEAPF32[i1 + 40 >> 2] = 65533.0 / (d5 - d8);
  HEAPF32[i1 + 44 >> 2] = 65533.0 / (d4 - d11);
  HEAPF32[i1 + 48 >> 2] = 0.0;
  HEAP32[i2 + 152 >> 2] = 15096;
  HEAP32[i2 + 156 >> 2] = i1 + 104;
  HEAP32[i2 + 160 >> 2] = i1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i2 + 152 | 0, i1 + 4 | 0, i1 + 20 | 0);
  i3 = HEAP32[i1 + 108 >> 2] | 0;
  HEAP32[i2 + 136 >> 2] = 0;
  HEAP32[i2 + 140 >> 2] = 0;
  HEAP32[i2 + 144 >> 2] = 0;
  HEAP32[i2 + 148 >> 2] = 0;
  i13 = HEAP32[i1 + 128 >> 2] | 0;
  if ((i13 | 0) < (i3 << 1 | 0)) {
   if ((HEAP32[i1 + 132 >> 2] | 0) < (i3 << 1 | 0)) {
    if ((i3 | 0) == 0) {
     i15 = 0;
     i17 = i13;
    } else {
     HEAP32[5004] = (HEAP32[5004] | 0) + 1;
     i15 = _malloc(i3 << 5 | 19) | 0;
     if ((i15 | 0) == 0) i15 = 0; else {
      HEAP32[(i15 + 19 & -16) + -4 >> 2] = i15;
      i15 = i15 + 19 & -16;
     }
     i17 = HEAP32[i1 + 128 >> 2] | 0;
    }
    if ((i17 | 0) > 0) {
     i16 = 0;
     do {
      i20 = i15 + (i16 << 4) | 0;
      i19 = (HEAP32[i1 + 136 >> 2] | 0) + (i16 << 4) | 0;
      HEAP32[i20 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
      HEAP32[i20 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
      HEAP32[i20 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
      HEAP32[i20 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
      i16 = i16 + 1 | 0;
     } while ((i16 | 0) != (i17 | 0));
    }
    i16 = HEAP32[i1 + 136 >> 2] | 0;
    if ((i16 | 0) != 0) {
     if ((HEAP8[i1 + 140 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i16 + -4 >> 2] | 0);
     }
     HEAP32[i1 + 136 >> 2] = 0;
    }
    HEAP8[i1 + 140 >> 0] = 1;
    HEAP32[i1 + 136 >> 2] = i15;
    HEAP32[i1 + 132 >> 2] = i3 << 1;
    i15 = i1 + 136 | 0;
   } else i15 = i1 + 136 | 0;
   do {
    i20 = (HEAP32[i15 >> 2] | 0) + (i13 << 4) | 0;
    HEAP32[i20 + 0 >> 2] = HEAP32[i2 + 136 >> 2];
    HEAP32[i20 + 4 >> 2] = HEAP32[i2 + 140 >> 2];
    HEAP32[i20 + 8 >> 2] = HEAP32[i2 + 144 >> 2];
    HEAP32[i20 + 12 >> 2] = HEAP32[i2 + 148 >> 2];
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != (i3 << 1 | 0));
  }
  HEAP32[i1 + 128 >> 2] = i3 << 1;
 } else {
  HEAP32[i2 + 128 >> 2] = 14960;
  HEAP32[i2 + 132 >> 2] = i1 + 64;
  HEAPF32[i2 + 112 >> 2] = -999999984306749400.0;
  HEAPF32[i2 + 116 >> 2] = -999999984306749400.0;
  HEAPF32[i2 + 120 >> 2] = -999999984306749400.0;
  HEAPF32[i2 + 124 >> 2] = 0.0;
  HEAPF32[i2 + 96 >> 2] = 999999984306749400.0;
  HEAPF32[i2 + 100 >> 2] = 999999984306749400.0;
  HEAPF32[i2 + 104 >> 2] = 999999984306749400.0;
  HEAPF32[i2 + 108 >> 2] = 0.0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i2 + 128 | 0, i2 + 112 | 0, i2 + 96 | 0);
  i3 = HEAP32[i1 + 68 >> 2] | 0;
  i15 = i2 + 32 | 0;
  i17 = i15 + 64 | 0;
  do {
   HEAP32[i15 >> 2] = 0;
   i15 = i15 + 4 | 0;
  } while ((i15 | 0) < (i17 | 0));
  i13 = HEAP32[i1 + 88 >> 2] | 0;
  if ((i13 | 0) < (i3 << 1 | 0)) {
   if ((HEAP32[i1 + 92 >> 2] | 0) < (i3 << 1 | 0)) {
    if ((i3 | 0) == 0) {
     i18 = 0;
     i19 = i13;
    } else {
     HEAP32[5004] = (HEAP32[5004] | 0) + 1;
     i15 = _malloc(i3 << 7 | 19) | 0;
     if ((i15 | 0) == 0) i18 = 0; else {
      HEAP32[(i15 + 19 & -16) + -4 >> 2] = i15;
      i18 = i15 + 19 & -16;
     }
     i19 = HEAP32[i1 + 88 >> 2] | 0;
    }
    if ((i19 | 0) > 0) {
     i20 = 0;
     do {
      i15 = i18 + (i20 << 6) + 0 | 0;
      i16 = (HEAP32[i1 + 96 >> 2] | 0) + (i20 << 6) + 0 | 0;
      i17 = i15 + 64 | 0;
      do {
       HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
       i15 = i15 + 4 | 0;
       i16 = i16 + 4 | 0;
      } while ((i15 | 0) < (i17 | 0));
      i20 = i20 + 1 | 0;
     } while ((i20 | 0) != (i19 | 0));
    }
    i15 = HEAP32[i1 + 96 >> 2] | 0;
    if ((i15 | 0) != 0) {
     if ((HEAP8[i1 + 100 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i15 + -4 >> 2] | 0);
     }
     HEAP32[i1 + 96 >> 2] = 0;
    }
    HEAP8[i1 + 100 >> 0] = 1;
    HEAP32[i1 + 96 >> 2] = i18;
    HEAP32[i1 + 92 >> 2] = i3 << 1;
    i18 = i1 + 96 | 0;
   } else i18 = i1 + 96 | 0;
   do {
    i15 = (HEAP32[i18 >> 2] | 0) + (i13 << 6) + 0 | 0;
    i16 = i2 + 32 | 0;
    i17 = i15 + 64 | 0;
    do {
     HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
     i15 = i15 + 4 | 0;
     i16 = i16 + 4 | 0;
    } while ((i15 | 0) < (i17 | 0));
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != (i3 << 1 | 0));
  }
  HEAP32[i1 + 88 >> 2] = i3 << 1;
 }
 HEAP32[i1 + 56 >> 2] = 0;
 __ZN14btQuantizedBvh9buildTreeEii(i1, 0, i3);
 if ((HEAP8[i1 + 60 >> 0] | 0) != 0 ? (HEAP32[i1 + 152 >> 2] | 0) == 0 : 0) {
  if ((HEAP32[i1 + 156 >> 2] | 0) == 0) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i3 = _malloc(51) | 0;
   if ((i3 | 0) == 0) i3 = 0; else {
    HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
    i3 = i3 + 19 & -16;
   }
   i15 = HEAP32[i1 + 152 >> 2] | 0;
   if ((i15 | 0) > 0) {
    i13 = 0;
    do {
     i20 = i3 + (i13 << 5) | 0;
     i19 = (HEAP32[i1 + 160 >> 2] | 0) + (i13 << 5) | 0;
     HEAP32[i20 + 0 >> 2] = HEAP32[i19 + 0 >> 2];
     HEAP32[i20 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     HEAP32[i20 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
     HEAP32[i20 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
     HEAP32[i20 + 16 >> 2] = HEAP32[i19 + 16 >> 2];
     HEAP32[i20 + 20 >> 2] = HEAP32[i19 + 20 >> 2];
     HEAP32[i20 + 24 >> 2] = HEAP32[i19 + 24 >> 2];
     HEAP32[i20 + 28 >> 2] = HEAP32[i19 + 28 >> 2];
     i13 = i13 + 1 | 0;
    } while ((i13 | 0) != (i15 | 0));
   }
   i13 = HEAP32[i1 + 160 >> 2] | 0;
   if ((i13 | 0) != 0) {
    if ((HEAP8[i1 + 164 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i13 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 160 >> 2] = 0;
   }
   HEAP8[i1 + 164 >> 0] = 1;
   HEAP32[i1 + 160 >> 2] = i3;
   HEAP32[i1 + 156 >> 2] = 1;
   i13 = (HEAP32[i1 + 152 >> 2] | 0) + 1 | 0;
  } else {
   i13 = 1;
   i3 = HEAP32[i1 + 160 >> 2] | 0;
  }
  HEAP32[i1 + 152 >> 2] = i13;
  HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i3 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i3 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
  HEAP32[i3 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
  i20 = HEAP32[i1 + 160 >> 2] | 0;
  i19 = HEAP32[i1 + 136 >> 2] | 0;
  HEAP16[i20 >> 1] = HEAP16[i19 >> 1] | 0;
  HEAP16[i20 + 2 >> 1] = HEAP16[i19 + 2 >> 1] | 0;
  HEAP16[i20 + 4 >> 1] = HEAP16[i19 + 4 >> 1] | 0;
  HEAP16[i20 + 6 >> 1] = HEAP16[i19 + 6 >> 1] | 0;
  HEAP16[i20 + 8 >> 1] = HEAP16[i19 + 8 >> 1] | 0;
  HEAP16[i20 + 10 >> 1] = HEAP16[i19 + 10 >> 1] | 0;
  HEAP32[i20 + 12 >> 2] = 0;
  i19 = HEAP32[i19 + 12 >> 2] | 0;
  HEAP32[i20 + 16 >> 2] = (i19 | 0) > -1 ? 1 : 0 - i19 | 0;
 }
 HEAP32[i1 + 168 >> 2] = HEAP32[i1 + 152 >> 2];
 i3 = HEAP32[i1 + 116 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 120 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 116 >> 2] = 0;
 }
 HEAP8[i1 + 120 >> 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i3 = HEAP32[i1 + 76 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 80 >> 0] = 1;
  HEAP32[i1 + 76 >> 2] = 0;
  HEAP32[i1 + 68 >> 2] = 0;
  i20 = i1 + 72 | 0;
  HEAP32[i20 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 80 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP8[i1 + 80 >> 0] = 1;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 i20 = i1 + 72 | 0;
 HEAP32[i20 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK23btStridingMeshInterface27InternalProcessAllTrianglesEP31btInternalTriangleIndexCallbackRK9btVector3S4_(i2, i1, i6, i7) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2) | 0;
 d5 = +HEAPF32[i2 + 4 >> 2];
 d3 = +HEAPF32[i2 + 8 >> 2];
 d4 = +HEAPF32[i2 + 12 >> 2];
 if ((i6 | 0) <= 0) {
  STACKTOP = i8;
  return;
 }
 i7 = 0;
 do {
  FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 3](i2, i8 + 76 | 0, i8 + 52 | 0, i8 + 64 | 0, i8 + 56 | 0, i8 + 72 | 0, i8 + 68 | 0, i8 + 48 | 0, i8 + 60 | 0, i7);
  i9 = HEAP32[i8 + 64 >> 2] | 0;
  do if ((i9 | 0) == 0) {
   i9 = HEAP32[i8 + 60 >> 2] | 0;
   if ((i9 | 0) == 3) {
    if ((HEAP32[i8 + 48 >> 2] | 0) > 0) i9 = 0; else break;
    do {
     i15 = HEAP32[i8 + 72 >> 2] | 0;
     i14 = Math_imul(HEAP32[i8 + 68 >> 2] | 0, i9) | 0;
     i13 = HEAP32[i8 + 76 >> 2] | 0;
     i12 = HEAP32[i8 + 56 >> 2] | 0;
     i16 = Math_imul(HEAPU16[i15 + i14 >> 1] | 0, i12) | 0;
     d11 = d3 * +HEAPF32[i13 + (i16 + 4) >> 2];
     d10 = d4 * +HEAPF32[i13 + (i16 + 8) >> 2];
     HEAPF32[i8 >> 2] = d5 * +HEAPF32[i13 + i16 >> 2];
     HEAPF32[i8 + 4 >> 2] = d11;
     HEAPF32[i8 + 8 >> 2] = d10;
     HEAPF32[i8 + 12 >> 2] = 0.0;
     i16 = Math_imul(HEAPU16[i15 + (i14 + 2) >> 1] | 0, i12) | 0;
     d10 = d3 * +HEAPF32[i13 + (i16 + 4) >> 2];
     d11 = d4 * +HEAPF32[i13 + (i16 + 8) >> 2];
     HEAPF32[i8 + 16 >> 2] = d5 * +HEAPF32[i13 + i16 >> 2];
     HEAPF32[i8 + 20 >> 2] = d10;
     HEAPF32[i8 + 24 >> 2] = d11;
     HEAPF32[i8 + 28 >> 2] = 0.0;
     i12 = Math_imul(HEAPU16[i15 + (i14 + 4) >> 1] | 0, i12) | 0;
     d11 = d3 * +HEAPF32[i13 + (i12 + 4) >> 2];
     d10 = d4 * +HEAPF32[i13 + (i12 + 8) >> 2];
     HEAPF32[i8 + 32 >> 2] = d5 * +HEAPF32[i13 + i12 >> 2];
     HEAPF32[i8 + 36 >> 2] = d11;
     HEAPF32[i8 + 40 >> 2] = d10;
     HEAPF32[i8 + 44 >> 2] = 0.0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i8, i7, i9);
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) < (HEAP32[i8 + 48 >> 2] | 0));
   } else if ((i9 | 0) == 5) {
    if ((HEAP32[i8 + 48 >> 2] | 0) > 0) i9 = 0; else break;
    do {
     i13 = HEAP32[i8 + 72 >> 2] | 0;
     i14 = Math_imul(HEAP32[i8 + 68 >> 2] | 0, i9) | 0;
     i15 = HEAP32[i8 + 76 >> 2] | 0;
     i16 = HEAP32[i8 + 56 >> 2] | 0;
     i12 = Math_imul(HEAPU8[i13 + i14 >> 0] | 0, i16) | 0;
     d10 = d3 * +HEAPF32[i15 + (i12 + 4) >> 2];
     d11 = d4 * +HEAPF32[i15 + (i12 + 8) >> 2];
     HEAPF32[i8 >> 2] = d5 * +HEAPF32[i15 + i12 >> 2];
     HEAPF32[i8 + 4 >> 2] = d10;
     HEAPF32[i8 + 8 >> 2] = d11;
     HEAPF32[i8 + 12 >> 2] = 0.0;
     i12 = Math_imul(HEAPU8[i13 + (i14 + 1) >> 0] | 0, i16) | 0;
     d11 = d3 * +HEAPF32[i15 + (i12 + 4) >> 2];
     d10 = d4 * +HEAPF32[i15 + (i12 + 8) >> 2];
     HEAPF32[i8 + 16 >> 2] = d5 * +HEAPF32[i15 + i12 >> 2];
     HEAPF32[i8 + 20 >> 2] = d11;
     HEAPF32[i8 + 24 >> 2] = d10;
     HEAPF32[i8 + 28 >> 2] = 0.0;
     i16 = Math_imul(HEAPU8[i13 + (i14 + 2) >> 0] | 0, i16) | 0;
     d10 = d3 * +HEAPF32[i15 + (i16 + 4) >> 2];
     d11 = d4 * +HEAPF32[i15 + (i16 + 8) >> 2];
     HEAPF32[i8 + 32 >> 2] = d5 * +HEAPF32[i15 + i16 >> 2];
     HEAPF32[i8 + 36 >> 2] = d10;
     HEAPF32[i8 + 40 >> 2] = d11;
     HEAPF32[i8 + 44 >> 2] = 0.0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i8, i7, i9);
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) < (HEAP32[i8 + 48 >> 2] | 0));
   } else if ((i9 | 0) == 2) {
    if ((HEAP32[i8 + 48 >> 2] | 0) > 0) i9 = 0; else break;
    do {
     i14 = HEAP32[i8 + 72 >> 2] | 0;
     i16 = Math_imul(HEAP32[i8 + 68 >> 2] | 0, i9) | 0;
     i15 = HEAP32[i8 + 76 >> 2] | 0;
     i13 = HEAP32[i8 + 56 >> 2] | 0;
     i12 = Math_imul(i13, HEAP32[i14 + i16 >> 2] | 0) | 0;
     d10 = d3 * +HEAPF32[i15 + (i12 + 4) >> 2];
     d11 = d4 * +HEAPF32[i15 + (i12 + 8) >> 2];
     HEAPF32[i8 >> 2] = d5 * +HEAPF32[i15 + i12 >> 2];
     HEAPF32[i8 + 4 >> 2] = d10;
     HEAPF32[i8 + 8 >> 2] = d11;
     HEAPF32[i8 + 12 >> 2] = 0.0;
     i12 = Math_imul(i13, HEAP32[i14 + (i16 + 4) >> 2] | 0) | 0;
     d11 = d3 * +HEAPF32[i15 + (i12 + 4) >> 2];
     d10 = d4 * +HEAPF32[i15 + (i12 + 8) >> 2];
     HEAPF32[i8 + 16 >> 2] = d5 * +HEAPF32[i15 + i12 >> 2];
     HEAPF32[i8 + 20 >> 2] = d11;
     HEAPF32[i8 + 24 >> 2] = d10;
     HEAPF32[i8 + 28 >> 2] = 0.0;
     i16 = Math_imul(i13, HEAP32[i14 + (i16 + 8) >> 2] | 0) | 0;
     d10 = d3 * +HEAPF32[i15 + (i16 + 4) >> 2];
     d11 = d4 * +HEAPF32[i15 + (i16 + 8) >> 2];
     HEAPF32[i8 + 32 >> 2] = d5 * +HEAPF32[i15 + i16 >> 2];
     HEAPF32[i8 + 36 >> 2] = d10;
     HEAPF32[i8 + 40 >> 2] = d11;
     HEAPF32[i8 + 44 >> 2] = 0.0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i8, i7, i9);
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) < (HEAP32[i8 + 48 >> 2] | 0));
   } else break;
  } else if ((i9 | 0) == 1) {
   i9 = HEAP32[i8 + 60 >> 2] | 0;
   if ((i9 | 0) == 2) {
    if ((HEAP32[i8 + 48 >> 2] | 0) > 0) i9 = 0; else break;
    do {
     i14 = HEAP32[i8 + 72 >> 2] | 0;
     i16 = Math_imul(HEAP32[i8 + 68 >> 2] | 0, i9) | 0;
     i15 = HEAP32[i8 + 76 >> 2] | 0;
     i13 = HEAP32[i8 + 56 >> 2] | 0;
     i12 = Math_imul(i13, HEAP32[i14 + i16 >> 2] | 0) | 0;
     d10 = d3 * +HEAPF64[i15 + (i12 + 8) >> 3];
     d11 = d4 * +HEAPF64[i15 + (i12 + 16) >> 3];
     HEAPF32[i8 >> 2] = d5 * +HEAPF64[i15 + i12 >> 3];
     HEAPF32[i8 + 4 >> 2] = d10;
     HEAPF32[i8 + 8 >> 2] = d11;
     HEAPF32[i8 + 12 >> 2] = 0.0;
     i12 = Math_imul(i13, HEAP32[i14 + (i16 + 4) >> 2] | 0) | 0;
     d11 = d3 * +HEAPF64[i15 + (i12 + 8) >> 3];
     d10 = d4 * +HEAPF64[i15 + (i12 + 16) >> 3];
     HEAPF32[i8 + 16 >> 2] = d5 * +HEAPF64[i15 + i12 >> 3];
     HEAPF32[i8 + 20 >> 2] = d11;
     HEAPF32[i8 + 24 >> 2] = d10;
     HEAPF32[i8 + 28 >> 2] = 0.0;
     i16 = Math_imul(i13, HEAP32[i14 + (i16 + 8) >> 2] | 0) | 0;
     d10 = d3 * +HEAPF64[i15 + (i16 + 8) >> 3];
     d11 = d4 * +HEAPF64[i15 + (i16 + 16) >> 3];
     HEAPF32[i8 + 32 >> 2] = d5 * +HEAPF64[i15 + i16 >> 3];
     HEAPF32[i8 + 36 >> 2] = d10;
     HEAPF32[i8 + 40 >> 2] = d11;
     HEAPF32[i8 + 44 >> 2] = 0.0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i8, i7, i9);
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) < (HEAP32[i8 + 48 >> 2] | 0));
   } else if ((i9 | 0) == 3) {
    if ((HEAP32[i8 + 48 >> 2] | 0) > 0) i9 = 0; else break;
    do {
     i13 = HEAP32[i8 + 72 >> 2] | 0;
     i14 = Math_imul(HEAP32[i8 + 68 >> 2] | 0, i9) | 0;
     i15 = HEAP32[i8 + 76 >> 2] | 0;
     i16 = HEAP32[i8 + 56 >> 2] | 0;
     i12 = Math_imul(HEAPU16[i13 + i14 >> 1] | 0, i16) | 0;
     d10 = d3 * +HEAPF64[i15 + (i12 + 8) >> 3];
     d11 = d4 * +HEAPF64[i15 + (i12 + 16) >> 3];
     HEAPF32[i8 >> 2] = d5 * +HEAPF64[i15 + i12 >> 3];
     HEAPF32[i8 + 4 >> 2] = d10;
     HEAPF32[i8 + 8 >> 2] = d11;
     HEAPF32[i8 + 12 >> 2] = 0.0;
     i12 = Math_imul(HEAPU16[i13 + (i14 + 2) >> 1] | 0, i16) | 0;
     d11 = d3 * +HEAPF64[i15 + (i12 + 8) >> 3];
     d10 = d4 * +HEAPF64[i15 + (i12 + 16) >> 3];
     HEAPF32[i8 + 16 >> 2] = d5 * +HEAPF64[i15 + i12 >> 3];
     HEAPF32[i8 + 20 >> 2] = d11;
     HEAPF32[i8 + 24 >> 2] = d10;
     HEAPF32[i8 + 28 >> 2] = 0.0;
     i16 = Math_imul(HEAPU16[i13 + (i14 + 4) >> 1] | 0, i16) | 0;
     d10 = d3 * +HEAPF64[i15 + (i16 + 8) >> 3];
     d11 = d4 * +HEAPF64[i15 + (i16 + 16) >> 3];
     HEAPF32[i8 + 32 >> 2] = d5 * +HEAPF64[i15 + i16 >> 3];
     HEAPF32[i8 + 36 >> 2] = d10;
     HEAPF32[i8 + 40 >> 2] = d11;
     HEAPF32[i8 + 44 >> 2] = 0.0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i8, i7, i9);
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) < (HEAP32[i8 + 48 >> 2] | 0));
   } else if ((i9 | 0) == 5) {
    if ((HEAP32[i8 + 48 >> 2] | 0) > 0) i9 = 0; else break;
    do {
     i13 = HEAP32[i8 + 72 >> 2] | 0;
     i14 = Math_imul(HEAP32[i8 + 68 >> 2] | 0, i9) | 0;
     i15 = HEAP32[i8 + 76 >> 2] | 0;
     i16 = HEAP32[i8 + 56 >> 2] | 0;
     i12 = Math_imul(HEAPU8[i13 + i14 >> 0] | 0, i16) | 0;
     d10 = d3 * +HEAPF64[i15 + (i12 + 8) >> 3];
     d11 = d4 * +HEAPF64[i15 + (i12 + 16) >> 3];
     HEAPF32[i8 >> 2] = d5 * +HEAPF64[i15 + i12 >> 3];
     HEAPF32[i8 + 4 >> 2] = d10;
     HEAPF32[i8 + 8 >> 2] = d11;
     HEAPF32[i8 + 12 >> 2] = 0.0;
     i12 = Math_imul(HEAPU8[i13 + (i14 + 1) >> 0] | 0, i16) | 0;
     d11 = d3 * +HEAPF64[i15 + (i12 + 8) >> 3];
     d10 = d4 * +HEAPF64[i15 + (i12 + 16) >> 3];
     HEAPF32[i8 + 16 >> 2] = d5 * +HEAPF64[i15 + i12 >> 3];
     HEAPF32[i8 + 20 >> 2] = d11;
     HEAPF32[i8 + 24 >> 2] = d10;
     HEAPF32[i8 + 28 >> 2] = 0.0;
     i16 = Math_imul(HEAPU8[i13 + (i14 + 2) >> 0] | 0, i16) | 0;
     d10 = d3 * +HEAPF64[i15 + (i16 + 8) >> 3];
     d11 = d4 * +HEAPF64[i15 + (i16 + 16) >> 3];
     HEAPF32[i8 + 32 >> 2] = d5 * +HEAPF64[i15 + i16 >> 3];
     HEAPF32[i8 + 36 >> 2] = d10;
     HEAPF32[i8 + 40 >> 2] = d11;
     HEAPF32[i8 + 44 >> 2] = 0.0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i8, i7, i9);
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) < (HEAP32[i8 + 48 >> 2] | 0));
   } else break;
  } while (0);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i7);
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i6 | 0));
 STACKTOP = i8;
 return;
}
function __ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i6, i27, i26, i25, i24, i2) {
 i6 = i6 | 0;
 i27 = i27 | 0;
 i26 = i26 | 0;
 i25 = i25 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d28 = 0.0, i29 = 0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, i51 = 0, i52 = 0, i53 = 0, d54 = 0.0, i55 = 0, d56 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i55 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP8[i55 + 312 >> 0] = 0;
 HEAP32[i55 >> 2] = 0;
 HEAP8[i55 + 356 >> 0] = 1;
 HEAPF32[i55 + 292 >> 2] = 999999984306749400.0;
 HEAPF32[i55 + 296 >> 2] = 999999984306749400.0;
 HEAPF32[i55 + 300 >> 2] = 999999984306749400.0;
 HEAPF32[i55 + 304 >> 2] = 0.0;
 HEAP32[i55 + 336 >> 2] = 0;
 HEAP32[i55 + 340 >> 2] = 0;
 HEAP32[i55 + 344 >> 2] = 0;
 HEAP32[i55 + 348 >> 2] = 0;
 HEAP8[i55 + 352 >> 0] = 0;
 HEAP8[i55 + 332 >> 0] = HEAP8[i55 + 332 >> 0] & -16;
 d37 = +HEAPF32[i27 + 48 >> 2];
 d43 = +HEAPF32[i27 + 52 >> 2];
 d39 = +HEAPF32[i27 + 56 >> 2];
 d46 = +HEAPF32[i25 + 48 >> 2];
 d44 = +HEAPF32[i25 + 52 >> 2];
 d38 = +HEAPF32[i25 + 56 >> 2];
 d22 = +HEAPF32[i27 >> 2];
 d8 = +HEAPF32[i27 + 4 >> 2];
 d10 = +HEAPF32[i27 + 8 >> 2];
 d23 = +HEAPF32[i27 + 16 >> 2];
 d18 = +HEAPF32[i27 + 20 >> 2];
 d11 = +HEAPF32[i27 + 24 >> 2];
 d15 = +HEAPF32[i27 + 32 >> 2];
 d9 = +HEAPF32[i27 + 36 >> 2];
 d12 = +HEAPF32[i27 + 40 >> 2];
 d13 = +HEAPF32[i25 >> 2];
 d16 = +HEAPF32[i25 + 4 >> 2];
 d19 = +HEAPF32[i25 + 8 >> 2];
 d14 = +HEAPF32[i25 + 16 >> 2];
 d17 = +HEAPF32[i25 + 20 >> 2];
 d20 = +HEAPF32[i25 + 24 >> 2];
 d28 = +HEAPF32[i25 + 32 >> 2];
 d7 = +HEAPF32[i25 + 36 >> 2];
 d21 = +HEAPF32[i25 + 40 >> 2];
 d4 = +HEAPF32[i26 + 48 >> 2] - d37 - (+HEAPF32[i24 + 48 >> 2] - d46);
 d3 = +HEAPF32[i26 + 52 >> 2] - d43 - (+HEAPF32[i24 + 52 >> 2] - d44);
 d5 = +HEAPF32[i26 + 56 >> 2] - d39 - (+HEAPF32[i24 + 56 >> 2] - d38);
 i55 = HEAP32[i6 + 8 >> 2] | 0;
 i53 = HEAP32[(HEAP32[i55 >> 2] | 0) + 64 >> 2] | 0;
 HEAPF32[i1 + 96 >> 2] = d22 * -d4 + d23 * -d3 + d15 * -d5;
 HEAPF32[i1 + 100 >> 2] = d8 * -d4 + d18 * -d3 + d9 * -d5;
 HEAPF32[i1 + 104 >> 2] = d10 * -d4 + d11 * -d3 + d12 * -d5;
 HEAPF32[i1 + 108 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i53 & 127](i1 + 112 | 0, i55, i1 + 96 | 0);
 d50 = +HEAPF32[i1 + 112 >> 2];
 d54 = +HEAPF32[i1 + 116 >> 2];
 d45 = +HEAPF32[i1 + 120 >> 2];
 d47 = d50 * +HEAPF32[i27 >> 2] + d54 * +HEAPF32[i27 + 4 >> 2] + d45 * +HEAPF32[i27 + 8 >> 2] + +HEAPF32[i27 + 48 >> 2];
 d48 = d50 * +HEAPF32[i27 + 16 >> 2] + d54 * +HEAPF32[i27 + 20 >> 2] + d45 * +HEAPF32[i27 + 24 >> 2] + +HEAPF32[i27 + 52 >> 2];
 d45 = d50 * +HEAPF32[i27 + 32 >> 2] + d54 * +HEAPF32[i27 + 36 >> 2] + d45 * +HEAPF32[i27 + 40 >> 2] + +HEAPF32[i27 + 56 >> 2];
 i55 = HEAP32[i6 + 12 >> 2] | 0;
 i53 = HEAP32[(HEAP32[i55 >> 2] | 0) + 64 >> 2] | 0;
 d54 = d4 * +HEAPF32[i25 + 4 >> 2] + d3 * +HEAPF32[i25 + 20 >> 2] + d5 * +HEAPF32[i25 + 36 >> 2];
 d50 = d4 * +HEAPF32[i25 + 8 >> 2] + d3 * +HEAPF32[i25 + 24 >> 2] + d5 * +HEAPF32[i25 + 40 >> 2];
 HEAPF32[i1 + 64 >> 2] = d4 * +HEAPF32[i25 >> 2] + d3 * +HEAPF32[i25 + 16 >> 2] + d5 * +HEAPF32[i25 + 32 >> 2];
 HEAPF32[i1 + 68 >> 2] = d54;
 HEAPF32[i1 + 72 >> 2] = d50;
 HEAPF32[i1 + 76 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i53 & 127](i1 + 80 | 0, i55, i1 + 64 | 0);
 d50 = +HEAPF32[i1 + 80 >> 2];
 d54 = +HEAPF32[i1 + 84 >> 2];
 d49 = +HEAPF32[i1 + 88 >> 2];
 d47 = d47 - (d50 * +HEAPF32[i25 >> 2] + d54 * +HEAPF32[i25 + 4 >> 2] + d49 * +HEAPF32[i25 + 8 >> 2] + +HEAPF32[i25 + 48 >> 2]);
 d48 = d48 - (d50 * +HEAPF32[i25 + 16 >> 2] + d54 * +HEAPF32[i25 + 20 >> 2] + d49 * +HEAPF32[i25 + 24 >> 2] + +HEAPF32[i25 + 52 >> 2]);
 d49 = d45 - (d50 * +HEAPF32[i25 + 32 >> 2] + d54 * +HEAPF32[i25 + 36 >> 2] + d49 * +HEAPF32[i25 + 40 >> 2] + +HEAPF32[i25 + 56 >> 2]);
 L1 : do if (d47 * d47 + d48 * d48 + d49 * d49 > 9999999747378752.0e-20) {
  d40 = 0.0;
  d42 = 0.0;
  d45 = 0.0;
  d41 = 0.0;
  d30 = 0.0;
  i29 = 32;
  d50 = 0.0;
  while (1) {
   if ((i29 | 0) == 0) break L1;
   i29 = i29 + -1 | 0;
   i55 = HEAP32[i6 + 8 >> 2] | 0;
   i53 = HEAP32[(HEAP32[i55 >> 2] | 0) + 64 >> 2] | 0;
   d31 = -d47;
   d56 = -d48;
   d54 = -d49;
   HEAPF32[i1 + 32 >> 2] = d22 * d31 + d23 * d56 + d15 * d54;
   HEAPF32[i1 + 36 >> 2] = d8 * d31 + d18 * d56 + d9 * d54;
   HEAPF32[i1 + 40 >> 2] = d10 * d31 + d11 * d56 + d12 * d54;
   HEAPF32[i1 + 44 >> 2] = 0.0;
   FUNCTION_TABLE_viii[i53 & 127](i1 + 48 | 0, i55, i1 + 32 | 0);
   d54 = +HEAPF32[i1 + 48 >> 2];
   d56 = +HEAPF32[i1 + 52 >> 2];
   d31 = +HEAPF32[i1 + 56 >> 2];
   d32 = d37 + (d22 * d54 + d8 * d56 + d10 * d31);
   d34 = d43 + (d23 * d54 + d18 * d56 + d11 * d31);
   d31 = d39 + (d15 * d54 + d9 * d56 + d12 * d31);
   i55 = HEAP32[i6 + 12 >> 2] | 0;
   i53 = HEAP32[(HEAP32[i55 >> 2] | 0) + 64 >> 2] | 0;
   HEAPF32[i1 >> 2] = d13 * d47 + d14 * d48 + d28 * d49;
   HEAPF32[i1 + 4 >> 2] = d16 * d47 + d17 * d48 + d7 * d49;
   HEAPF32[i1 + 8 >> 2] = d19 * d47 + d20 * d48 + d21 * d49;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   FUNCTION_TABLE_viii[i53 & 127](i1 + 16 | 0, i55, i1);
   d56 = +HEAPF32[i1 + 16 >> 2];
   d54 = +HEAPF32[i1 + 20 >> 2];
   d35 = +HEAPF32[i1 + 24 >> 2];
   d33 = d46 + (d13 * d56 + d16 * d54 + d19 * d35);
   d36 = d44 + (d14 * d56 + d17 * d54 + d20 * d35);
   d35 = d38 + (d28 * d56 + d7 * d54 + d21 * d35);
   d54 = d47 * (d32 - d33) + d48 * (d34 - d36) + d49 * (d31 - d35);
   if (d30 > 1.0) {
    i2 = 0;
    i24 = 24;
    break;
   }
   if (d54 > 0.0) {
    d37 = d4 * d47 + d3 * d48 + d5 * d49;
    if (d37 >= -1.4210854715202004e-14) {
     i2 = 0;
     i24 = 24;
     break;
    }
    d30 = d30 - d54 / d37;
    d39 = (1.0 - d30) * +HEAPF32[i27 + 56 >> 2] + d30 * +HEAPF32[i26 + 56 >> 2];
    d43 = (1.0 - d30) * +HEAPF32[i27 + 52 >> 2] + d30 * +HEAPF32[i26 + 52 >> 2];
    d37 = +HEAPF32[i27 + 48 >> 2] * (1.0 - d30) + d30 * +HEAPF32[i26 + 48 >> 2];
    d38 = (1.0 - d30) * +HEAPF32[i25 + 56 >> 2] + d30 * +HEAPF32[i24 + 56 >> 2];
    d44 = (1.0 - d30) * +HEAPF32[i25 + 52 >> 2] + d30 * +HEAPF32[i24 + 52 >> 2];
    d46 = (1.0 - d30) * +HEAPF32[i25 + 48 >> 2] + d30 * +HEAPF32[i24 + 48 >> 2];
    d41 = d50;
    d45 = d49;
    d42 = d48;
    d40 = d47;
   }
   i51 = HEAP32[i6 + 4 >> 2] | 0;
   i52 = HEAP32[i51 >> 2] | 0;
   if ((i52 | 0) > 0) {
    d47 = +HEAPF32[i51 + 308 >> 2];
    i55 = 0;
    i53 = 0;
    do {
     d50 = d32 - d33 - +HEAPF32[i51 + (i53 << 4) + 4 >> 2];
     d54 = d34 - d36 - +HEAPF32[i51 + (i53 << 4) + 8 >> 2];
     d56 = d31 - d35 - +HEAPF32[i51 + (i53 << 4) + 12 >> 2];
     i55 = i55 | d50 * d50 + d54 * d54 + d56 * d56 <= d47;
     i53 = i53 + 1 | 0;
    } while ((i53 | 0) != (i52 | 0));
   } else i55 = 0;
   if ((+HEAPF32[i51 + 304 >> 2] == 0.0 ? d31 - d35 == +HEAPF32[i51 + 300 >> 2] : 0) ? d34 - d36 == +HEAPF32[i51 + 296 >> 2] : 0) i53 = d32 - d33 == +HEAPF32[i51 + 292 >> 2]; else i53 = 0;
   if (!(i53 | i55)) {
    HEAPF32[i51 + 292 >> 2] = d32 - d33;
    HEAPF32[i51 + 296 >> 2] = d34 - d36;
    HEAPF32[i51 + 300 >> 2] = d31 - d35;
    HEAPF32[i51 + 304 >> 2] = 0.0;
    HEAP8[i51 + 356 >> 0] = 1;
    HEAPF32[i51 + (i52 << 4) + 4 >> 2] = d32 - d33;
    HEAPF32[i51 + (i52 << 4) + 8 >> 2] = d34 - d36;
    HEAPF32[i51 + (i52 << 4) + 12 >> 2] = d31 - d35;
    HEAPF32[i51 + (i52 << 4) + 16 >> 2] = 0.0;
    i55 = HEAP32[i51 >> 2] | 0;
    HEAPF32[i51 + (i55 << 4) + 84 >> 2] = d32;
    HEAPF32[i51 + (i55 << 4) + 88 >> 2] = d34;
    HEAPF32[i51 + (i55 << 4) + 92 >> 2] = d31;
    HEAPF32[i51 + (i55 << 4) + 96 >> 2] = 0.0;
    i55 = HEAP32[i51 >> 2] | 0;
    HEAPF32[i51 + (i55 << 4) + 164 >> 2] = d33;
    HEAPF32[i51 + (i55 << 4) + 168 >> 2] = d36;
    HEAPF32[i51 + (i55 << 4) + 172 >> 2] = d35;
    HEAPF32[i51 + (i55 << 4) + 176 >> 2] = 0.0;
    HEAP32[i51 >> 2] = (HEAP32[i51 >> 2] | 0) + 1;
    i51 = HEAP32[i6 + 4 >> 2] | 0;
   }
   i55 = __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i51) | 0;
   d47 = +HEAPF32[i51 + 276 >> 2];
   d48 = +HEAPF32[i51 + 280 >> 2];
   d49 = +HEAPF32[i51 + 284 >> 2];
   if (!i55) break L1;
   if (!(d47 * d47 + d48 * d48 + d49 * d49 > 9999999747378752.0e-20)) break L1; else d50 = +HEAPF32[i51 + 288 >> 2];
  }
  if ((i24 | 0) == 24) {
   STACKTOP = i1;
   return i2 | 0;
  }
 } else {
  d41 = 0.0;
  d45 = 0.0;
  d42 = 0.0;
  d40 = 0.0;
  d30 = 0.0;
 } while (0);
 HEAPF32[i2 + 164 >> 2] = d30;
 d7 = d45 * d45 + (d42 * d42 + d40 * d40);
 if (!(d7 >= 1.4210854715202004e-14)) {
  HEAP32[i2 + 132 >> 2] = 0;
  HEAP32[i2 + 136 >> 2] = 0;
  HEAP32[i2 + 140 >> 2] = 0;
  HEAP32[i2 + 144 >> 2] = 0;
  d7 = 0.0;
  d9 = 0.0;
  d8 = 0.0;
 } else {
  d8 = 1.0 / +Math_sqrt(+d7);
  d7 = d40 * d8;
  d9 = d42 * d8;
  d8 = d45 * d8;
  HEAPF32[i2 + 132 >> 2] = d7;
  HEAPF32[i2 + 136 >> 2] = d9;
  HEAPF32[i2 + 140 >> 2] = d8;
  HEAPF32[i2 + 144 >> 2] = d41;
 }
 if (d4 * d7 + d3 * d9 + d5 * d8 >= -+HEAPF32[i2 + 172 >> 2]) {
  i55 = 0;
  STACKTOP = i1;
  return i55 | 0;
 }
 i55 = HEAP32[i6 + 4 >> 2] | 0;
 __ZN22btVoronoiSimplexSolver28updateClosestVectorAndPointsEv(i55) | 0;
 _memmove(i2 + 148 | 0, i55 + 260 | 0, 16) | 0;
 i55 = 1;
 STACKTOP = i1;
 return i55 | 0;
}
function __ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i15 = HEAP32[i3 + 8 >> 2] | 0;
 if ((i15 | 0) > 0) {
  i10 = 0;
  do {
   i11 = HEAP32[(HEAP32[i3 + 16 >> 2] | 0) + (i10 << 2) >> 2] | 0;
   if ((HEAP32[i11 + 236 >> 2] | 0) == 1) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] & 127](i11, i4);
    i15 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (i15 | 0));
 }
 HEAP8[i7 + 16 >> 0] = 1;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP8[i7 + 36 >> 0] = 1;
 HEAP32[i7 + 32 >> 2] = 0;
 HEAP32[i7 + 24 >> 2] = 0;
 HEAP32[i7 + 28 >> 2] = 0;
 HEAP8[i7 + 56 >> 0] = 1;
 HEAP32[i7 + 52 >> 2] = 0;
 HEAP32[i7 + 44 >> 2] = 0;
 HEAP32[i7 + 48 >> 2] = 0;
 HEAP8[i7 + 76 >> 0] = 1;
 HEAP32[i7 + 72 >> 2] = 0;
 HEAP32[i7 + 64 >> 2] = 0;
 HEAP32[i7 + 68 >> 2] = 0;
 if ((i15 | 0) <= 0) {
  __ZN9btHashMapI9btHashPtrP16btCollisionShapeED2Ev(i7);
  STACKTOP = i7;
  return;
 }
 i18 = -1;
 i17 = 0;
 i13 = 0;
 i16 = 0;
 i14 = 0;
 i10 = 0;
 while (1) {
  i11 = HEAP32[(HEAP32[(HEAP32[i3 + 16 >> 2] | 0) + (i10 << 2) >> 2] | 0) + 192 >> 2] | 0;
  i12 = (i11 + ~(i11 << 15) >> 10 ^ i11 + ~(i11 << 15)) * 9 | 0;
  i12 = (i12 >> 6 ^ i12) + ~((i12 >> 6 ^ i12) << 11) >> 16 ^ (i12 >> 6 ^ i12) + ~((i12 >> 6 ^ i12) << 11);
  i18 = i12 & i18;
  L14 : do if (i18 >>> 0 < i17 >>> 0 ? (i6 = HEAP32[i13 + (i18 << 2) >> 2] | 0, !((i6 | 0) == -1)) : 0) {
   i18 = HEAP32[i7 + 72 >> 2] | 0;
   i19 = i6;
   while (1) {
    if ((i11 | 0) == (HEAP32[i18 + (i19 << 3) >> 2] | 0)) break;
    i19 = HEAP32[i16 + (i19 << 2) >> 2] | 0;
    if ((i19 | 0) == -1) {
     i2 = 15;
     break L14;
    }
   }
   if (!(!((i19 | 0) == -1) ? ((HEAP32[i7 + 52 >> 2] | 0) + (i19 << 2) | 0) != 0 : 0)) i2 = 15;
  } else i2 = 15; while (0);
  if ((i2 | 0) == 15) {
   i2 = 0;
   i15 = i12 & i14 + -1;
   L24 : do if (i15 >>> 0 < i17 >>> 0 ? (i5 = HEAP32[i13 + (i15 << 2) >> 2] | 0, !((i5 | 0) == -1)) : 0) {
    i17 = HEAP32[i7 + 72 >> 2] | 0;
    i18 = i5;
    while (1) {
     if ((i11 | 0) == (HEAP32[i17 + (i18 << 3) >> 2] | 0)) break;
     i18 = HEAP32[i16 + (i18 << 2) >> 2] | 0;
     if ((i18 | 0) == -1) {
      i2 = 22;
      break L24;
     }
    }
    if (!((i18 | 0) == -1)) HEAP32[(HEAP32[i7 + 52 >> 2] | 0) + (i18 << 2) >> 2] = i11; else i2 = 22;
   } else i2 = 22; while (0);
   if ((i2 | 0) == 22) {
    i2 = 0;
    i13 = HEAP32[i7 + 44 >> 2] | 0;
    if ((i13 | 0) == (i14 | 0)) {
     i16 = (i14 | 0) == 0 ? 1 : i14 << 1;
     if ((i14 | 0) < (i16 | 0)) {
      if ((i16 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i9 = _malloc((i16 << 2 | 3) + 16 | 0) | 0, (i9 | 0) != 0) : 0) {
       HEAP32[(i9 + 19 & -16) + -4 >> 2] = i9;
       i17 = i9 + 19 & -16;
      } else i17 = 0;
      if ((i14 | 0) > 0) {
       i18 = 0;
       do {
        i19 = i17 + (i18 << 2) | 0;
        if ((i19 | 0) != 0) HEAP32[i19 >> 2] = HEAP32[(HEAP32[i7 + 52 >> 2] | 0) + (i18 << 2) >> 2];
        i18 = i18 + 1 | 0;
       } while ((i18 | 0) != (i14 | 0));
      }
      i18 = HEAP32[i7 + 52 >> 2] | 0;
      if ((i18 | 0) != 0) {
       if ((HEAP8[i7 + 56 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i18 + -4 >> 2] | 0);
       }
       HEAP32[i7 + 52 >> 2] = 0;
      }
      HEAP8[i7 + 56 >> 0] = 1;
      HEAP32[i7 + 52 >> 2] = i17;
      HEAP32[i7 + 48 >> 2] = i16;
      i16 = i14;
     } else i16 = i14;
    } else i16 = i13;
    i17 = (HEAP32[i7 + 52 >> 2] | 0) + (i16 << 2) | 0;
    if ((i17 | 0) != 0) HEAP32[i17 >> 2] = i11;
    HEAP32[i7 + 44 >> 2] = i16 + 1;
    i17 = HEAP32[i7 + 64 >> 2] | 0;
    if ((i17 | 0) == (HEAP32[i7 + 68 >> 2] | 0) ? (i8 = (i17 | 0) == 0 ? 1 : i17 << 1, (i17 | 0) < (i8 | 0)) : 0) {
     if ((i8 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i1 = _malloc((i8 << 3 | 3) + 16 | 0) | 0, (i1 | 0) != 0) : 0) {
      HEAP32[(i1 + 19 & -16) + -4 >> 2] = i1;
      i16 = i1 + 19 & -16;
     } else i16 = 0;
     if ((i17 | 0) > 0) {
      i19 = 0;
      do {
       i18 = i16 + (i19 << 3) | 0;
       if ((i18 | 0) != 0) {
        i21 = (HEAP32[i7 + 72 >> 2] | 0) + (i19 << 3) | 0;
        i20 = HEAP32[i21 + 4 >> 2] | 0;
        HEAP32[i18 >> 2] = HEAP32[i21 >> 2];
        HEAP32[i18 + 4 >> 2] = i20;
       }
       i19 = i19 + 1 | 0;
      } while ((i19 | 0) != (i17 | 0));
     }
     i17 = HEAP32[i7 + 72 >> 2] | 0;
     if ((i17 | 0) != 0) {
      if ((HEAP8[i7 + 76 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i17 + -4 >> 2] | 0);
      }
      HEAP32[i7 + 72 >> 2] = 0;
     }
     HEAP8[i7 + 76 >> 0] = 1;
     HEAP32[i7 + 72 >> 2] = i16;
     HEAP32[i7 + 68 >> 2] = i8;
     i17 = HEAP32[i7 + 64 >> 2] | 0;
    }
    i16 = (HEAP32[i7 + 72 >> 2] | 0) + (i17 << 3) | 0;
    if ((i16 | 0) != 0) {
     HEAP32[i16 >> 2] = i11;
     HEAP32[i16 + 4 >> 2] = 0;
    }
    HEAP32[i7 + 64 >> 2] = i17 + 1;
    i16 = HEAP32[i7 + 48 >> 2] | 0;
    if ((i14 | 0) < (i16 | 0)) {
     i14 = HEAP32[i7 + 4 >> 2] | 0;
     do if ((i14 | 0) < (i16 | 0)) {
      if ((i14 | 0) <= (i16 | 0)) {
       if ((HEAP32[i7 + 8 >> 2] | 0) < (i16 | 0)) {
        do if ((i16 | 0) == 0) i15 = 0; else {
         HEAP32[5004] = (HEAP32[5004] | 0) + 1;
         i15 = _malloc((i16 << 2 | 3) + 16 | 0) | 0;
         if ((i15 | 0) == 0) {
          i15 = 0;
          break;
         }
         HEAP32[(i15 + 19 & -16) + -4 >> 2] = i15;
         i15 = i15 + 19 & -16;
        } while (0);
        i19 = HEAP32[i7 + 12 >> 2] | 0;
        if ((i14 | 0) > 0) {
         i18 = 0;
         do {
          i17 = i15 + (i18 << 2) | 0;
          if ((i17 | 0) != 0) HEAP32[i17 >> 2] = HEAP32[i19 + (i18 << 2) >> 2];
          i18 = i18 + 1 | 0;
         } while ((i18 | 0) != (i14 | 0));
        }
        if ((i19 | 0) != 0) {
         if ((HEAP8[i7 + 16 >> 0] | 0) != 0) {
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i19 + -4 >> 2] | 0);
         }
         HEAP32[i7 + 12 >> 2] = 0;
        }
        HEAP8[i7 + 16 >> 0] = 1;
        HEAP32[i7 + 12 >> 2] = i15;
        HEAP32[i7 + 8 >> 2] = i16;
       } else i15 = HEAP32[i7 + 12 >> 2] | 0;
       i17 = i14;
       do {
        i18 = i15 + (i17 << 2) | 0;
        if ((i18 | 0) != 0) HEAP32[i18 >> 2] = 0;
        i17 = i17 + 1 | 0;
       } while ((i17 | 0) != (i16 | 0));
      }
      HEAP32[i7 + 4 >> 2] = i16;
      i15 = HEAP32[i7 + 24 >> 2] | 0;
      if ((i15 | 0) < (i16 | 0)) {
       if ((HEAP32[i7 + 28 >> 2] | 0) < (i16 | 0)) {
        do if ((i16 | 0) == 0) i17 = 0; else {
         HEAP32[5004] = (HEAP32[5004] | 0) + 1;
         i17 = _malloc((i16 << 2 | 3) + 16 | 0) | 0;
         if ((i17 | 0) == 0) {
          i17 = 0;
          break;
         }
         HEAP32[(i17 + 19 & -16) + -4 >> 2] = i17;
         i17 = i17 + 19 & -16;
        } while (0);
        i19 = HEAP32[i7 + 32 >> 2] | 0;
        if ((i15 | 0) > 0) {
         i20 = 0;
         do {
          i18 = i17 + (i20 << 2) | 0;
          if ((i18 | 0) != 0) HEAP32[i18 >> 2] = HEAP32[i19 + (i20 << 2) >> 2];
          i20 = i20 + 1 | 0;
         } while ((i20 | 0) != (i15 | 0));
        }
        if ((i19 | 0) != 0) {
         if ((HEAP8[i7 + 36 >> 0] | 0) != 0) {
          HEAP32[5006] = (HEAP32[5006] | 0) + 1;
          _free(HEAP32[i19 + -4 >> 2] | 0);
         }
         HEAP32[i7 + 32 >> 2] = 0;
        }
        HEAP8[i7 + 36 >> 0] = 1;
        HEAP32[i7 + 32 >> 2] = i17;
        HEAP32[i7 + 28 >> 2] = i16;
       } else i17 = HEAP32[i7 + 32 >> 2] | 0;
       do {
        i18 = i17 + (i15 << 2) | 0;
        if ((i18 | 0) != 0) HEAP32[i18 >> 2] = 0;
        i15 = i15 + 1 | 0;
       } while ((i15 | 0) != (i16 | 0));
      }
      HEAP32[i7 + 24 >> 2] = i16;
      if ((i16 | 0) > 0) {
       _memset(HEAP32[i7 + 12 >> 2] | 0, -1, i16 << 2 | 0) | 0;
       _memset(HEAP32[i7 + 32 >> 2] | 0, -1, i16 << 2 | 0) | 0;
      }
      if ((i14 | 0) <= 0) {
       i16 = HEAP32[i7 + 48 >> 2] | 0;
       break;
      }
      i17 = HEAP32[i7 + 72 >> 2] | 0;
      i15 = HEAP32[i7 + 12 >> 2] | 0;
      i19 = HEAP32[i7 + 32 >> 2] | 0;
      i16 = HEAP32[i7 + 48 >> 2] | 0;
      i18 = 0;
      do {
       i21 = HEAP32[i17 + (i18 << 3) >> 2] | 0;
       i21 = (i21 + ~(i21 << 15) >> 10 ^ i21 + ~(i21 << 15)) * 9 | 0;
       i21 = i15 + ((((i21 >> 6 ^ i21) + ~((i21 >> 6 ^ i21) << 11) >> 16 ^ (i21 >> 6 ^ i21) + ~((i21 >> 6 ^ i21) << 11)) & i16 + -1) << 2) | 0;
       HEAP32[i19 + (i18 << 2) >> 2] = HEAP32[i21 >> 2];
       HEAP32[i21 >> 2] = i18;
       i18 = i18 + 1 | 0;
      } while ((i18 | 0) != (i14 | 0));
     } while (0);
     i14 = i16;
     i15 = i12 & i16 + -1;
    } else i14 = i16;
    i21 = HEAP32[i7 + 12 >> 2] | 0;
    i20 = i21 + (i15 << 2) | 0;
    i16 = HEAP32[i7 + 32 >> 2] | 0;
    HEAP32[i16 + (i13 << 2) >> 2] = HEAP32[i20 >> 2];
    HEAP32[i20 >> 2] = i13;
    i13 = i21;
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 60 >> 2] & 127](i11, i4);
   i15 = HEAP32[i3 + 8 >> 2] | 0;
  }
  i10 = i10 + 1 | 0;
  if ((i10 | 0) >= (i15 | 0)) break;
  i18 = i14 + -1 | 0;
  i17 = HEAP32[i7 + 4 >> 2] | 0;
 }
 __ZN9btHashMapI9btHashPtrP16btCollisionShapeED2Ev(i7);
 STACKTOP = i7;
 return;
}
function __ZN16btRaycastVehicle13updateVehicleEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, i17 = 0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0, d28 = 0.0, d29 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = HEAP32[i1 + 136 >> 2] | 0;
 if ((i5 | 0) > 0) {
  i4 = 0;
  do {
   __ZN16btRaycastVehicle20updateWheelTransformEib(HEAP32[i1 + 116 >> 2] | 0, HEAP32[i1 + 144 >> 2] | 0, i4, 0);
   i4 = i4 + 1 | 0;
   i5 = HEAP32[i1 + 136 >> 2] | 0;
  } while ((i4 | 0) < (i5 | 0));
  i4 = i1 + 116 | 0;
 } else i4 = i1 + 116 | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 d25 = +HEAPF32[i7 + 312 >> 2];
 d26 = +HEAPF32[i7 + 316 >> 2];
 d14 = +HEAPF32[i7 + 320 >> 2];
 d14 = +Math_sqrt(+(d25 * d25 + d26 * d26 + d14 * d14)) * 3.5999999046325684;
 HEAPF32[i1 + 112 >> 2] = d14;
 i21 = HEAP32[i1 + 128 >> 2] | 0;
 if (+HEAPF32[i7 + (i21 << 2) + 4 >> 2] * +HEAPF32[i7 + 312 >> 2] + +HEAPF32[i7 + (i21 << 2) + 20 >> 2] * +HEAPF32[i7 + 316 >> 2] + +HEAPF32[i7 + (i21 << 2) + 36 >> 2] * +HEAPF32[i7 + 320 >> 2] < 0.0) HEAPF32[i1 + 112 >> 2] = d14 * -1.0;
 L9 : do if ((i5 | 0) > 0) {
  i5 = 0;
  do {
   i6 = HEAP32[i1 + 144 >> 2] | 0;
   i13 = i6 + (i5 * 284 | 0) | 0;
   __ZN16btRaycastVehicle23updateWheelTransformsWSER11btWheelInfob(i7, i13, 0);
   i17 = i6 + (i5 * 284 | 0) + 204 | 0;
   i21 = i6 + (i5 * 284 | 0) + 212 | 0;
   d14 = +HEAPF32[i17 >> 2] + +HEAPF32[i21 >> 2];
   i10 = i6 + (i5 * 284 | 0) + 52 | 0;
   i11 = i6 + (i5 * 284 | 0) + 56 | 0;
   i12 = i6 + (i5 * 284 | 0) + 60 | 0;
   i27 = i6 + (i5 * 284 | 0) + 36 | 0;
   i9 = i6 + (i5 * 284 | 0) + 16 | 0;
   d25 = d14 * +HEAPF32[i11 >> 2] + +HEAPF32[i6 + (i5 * 284 | 0) + 40 >> 2];
   d26 = d14 * +HEAPF32[i12 >> 2] + +HEAPF32[i6 + (i5 * 284 | 0) + 44 >> 2];
   HEAPF32[i6 + (i5 * 284 | 0) + 16 >> 2] = +HEAPF32[i10 >> 2] * d14 + +HEAPF32[i27 >> 2];
   i8 = i6 + (i5 * 284 | 0) + 20 | 0;
   HEAPF32[i8 >> 2] = d25;
   i7 = i6 + (i5 * 284 | 0) + 24 | 0;
   HEAPF32[i7 >> 2] = d26;
   HEAPF32[i6 + (i5 * 284 | 0) + 28 >> 2] = 0.0;
   HEAPF32[i3 + 64 >> 2] = -1.0;
   i20 = HEAP32[i1 + 100 >> 2] | 0;
   i27 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 8 >> 2] & 31](i20, i27, i9, i3 + 32 | 0) | 0;
   i20 = i6 + (i5 * 284 | 0) + 88 | 0;
   HEAP32[i20 >> 2] = 0;
   do if ((i27 | 0) != 0) {
    d14 = d14 * +HEAPF32[i3 + 64 >> 2];
    HEAP32[i13 + 0 >> 2] = HEAP32[i3 + 48 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 52 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 56 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i3 + 60 >> 2];
    HEAP8[i6 + (i5 * 284 | 0) + 84 >> 0] = 1;
    if ((HEAP8[3736] | 0) == 0 ? (___cxa_guard_acquire(3736) | 0) != 0 : 0) {
     HEAP32[i3 + 88 >> 2] = 0;
     HEAP32[i3 + 92 >> 2] = 0;
     HEAP32[i3 + 96 >> 2] = 0;
     HEAP32[i3 + 100 >> 2] = 0;
     __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(3120, 0.0, 0, 0, i3 + 88 | 0);
     ___cxa_guard_release(3736);
    }
    HEAP32[i3 + 72 >> 2] = 0;
    HEAP32[i3 + 76 >> 2] = 0;
    HEAP32[i3 + 80 >> 2] = 0;
    HEAP32[i3 + 84 >> 2] = 0;
    __ZN11btRigidBody12setMassPropsEfRK9btVector3(3120, 0.0, i3 + 72 | 0);
    HEAP32[i20 >> 2] = 3120;
    d16 = d14 - +HEAPF32[i21 >> 2];
    i20 = i6 + (i5 * 284 | 0) + 32 | 0;
    HEAPF32[i20 >> 2] = d16;
    d14 = +HEAPF32[i17 >> 2];
    d15 = +HEAPF32[i6 + (i5 * 284 | 0) + 208 >> 2] * .009999999776482582;
    if (d16 < d14 - d15) {
     HEAPF32[i20 >> 2] = d14 - d15;
     d16 = d14 - d15;
    }
    if (d16 > d14 + d15) HEAPF32[i20 >> 2] = d14 + d15;
    HEAP32[i9 + 0 >> 2] = HEAP32[i3 + 32 >> 2];
    HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 36 >> 2];
    HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 40 >> 2];
    HEAP32[i9 + 12 >> 2] = HEAP32[i3 + 44 >> 2];
    d15 = +HEAPF32[i13 >> 2];
    d14 = +HEAPF32[i6 + (i5 * 284 | 0) + 4 >> 2];
    d16 = +HEAPF32[i6 + (i5 * 284 | 0) + 8 >> 2];
    d18 = d15 * +HEAPF32[i10 >> 2] + d14 * +HEAPF32[i11 >> 2] + d16 * +HEAPF32[i12 >> 2];
    i10 = HEAP32[i4 >> 2] | 0;
    d19 = +HEAPF32[i9 >> 2] - +HEAPF32[i10 + 52 >> 2];
    d22 = +HEAPF32[i8 >> 2] - +HEAPF32[i10 + 56 >> 2];
    d25 = +HEAPF32[i7 >> 2] - +HEAPF32[i10 + 60 >> 2];
    d26 = +HEAPF32[i10 + 332 >> 2];
    d23 = +HEAPF32[i10 + 336 >> 2];
    d24 = +HEAPF32[i10 + 328 >> 2];
    if (!(d18 >= -.10000000149011612)) {
     HEAPF32[i6 + (i5 * 284 | 0) + 272 >> 2] = -1.0 / d18 * (d14 * (d19 * d23 - d25 * d24 + +HEAPF32[i10 + 316 >> 2]) + d15 * (d26 * d25 - d22 * d23 + +HEAPF32[i10 + 312 >> 2]) + d16 * (d22 * d24 - d19 * d26 + +HEAPF32[i10 + 320 >> 2]));
     HEAPF32[i6 + (i5 * 284 | 0) + 268 >> 2] = -1.0 / d18;
     break;
    } else {
     HEAPF32[i6 + (i5 * 284 | 0) + 272 >> 2] = 0.0;
     HEAPF32[i6 + (i5 * 284 | 0) + 268 >> 2] = 10.0;
     break;
    }
   } else {
    HEAPF32[i6 + (i5 * 284 | 0) + 32 >> 2] = +HEAPF32[i17 >> 2];
    HEAPF32[i6 + (i5 * 284 | 0) + 272 >> 2] = 0.0;
    d25 = -+HEAPF32[i11 >> 2];
    d26 = -+HEAPF32[i12 >> 2];
    HEAPF32[i13 >> 2] = -+HEAPF32[i10 >> 2];
    HEAPF32[i6 + (i5 * 284 | 0) + 4 >> 2] = d25;
    HEAPF32[i6 + (i5 * 284 | 0) + 8 >> 2] = d26;
    HEAPF32[i6 + (i5 * 284 | 0) + 12 >> 2] = 0.0;
    HEAPF32[i6 + (i5 * 284 | 0) + 268 >> 2] = 1.0;
   } while (0);
   i5 = i5 + 1 | 0;
   i6 = HEAP32[i1 + 136 >> 2] | 0;
   i7 = HEAP32[i4 >> 2] | 0;
  } while ((i5 | 0) < (i6 | 0));
  d14 = 1.0 / +HEAPF32[i7 + 344 >> 2];
  if ((i6 | 0) > 0) {
   i9 = HEAP32[i1 + 144 >> 2] | 0;
   i8 = 0;
   do {
    if ((HEAP8[i9 + (i8 * 284 | 0) + 84 >> 0] | 0) != 0) {
     d26 = +HEAPF32[i9 + (i8 * 284 | 0) + 272 >> 2];
     d26 = d14 * (+HEAPF32[i9 + (i8 * 284 | 0) + 216 >> 2] * (+HEAPF32[i9 + (i8 * 284 | 0) + 204 >> 2] - +HEAPF32[i9 + (i8 * 284 | 0) + 32 >> 2]) * +HEAPF32[i9 + (i8 * 284 | 0) + 268 >> 2] - d26 * +HEAPF32[(d26 < 0.0 ? i9 + (i8 * 284 | 0) + 220 | 0 : i9 + (i8 * 284 | 0) + 224 | 0) >> 2]);
     i5 = i9 + (i8 * 284 | 0) + 276 | 0;
     HEAPF32[i5 >> 2] = d26;
     if (d26 < 0.0) HEAPF32[i5 >> 2] = 0.0;
    } else HEAPF32[i9 + (i8 * 284 | 0) + 276 >> 2] = 0.0;
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) < (i6 | 0));
   i5 = 0;
   while (1) {
    d24 = +HEAPF32[i9 + (i5 * 284 | 0) + 276 >> 2];
    d26 = +HEAPF32[i9 + (i5 * 284 | 0) + 248 >> 2];
    d24 = d24 > d26 ? d26 : d24;
    d26 = d24 * +HEAPF32[i9 + (i5 * 284 | 0) + 4 >> 2] * d2;
    d25 = d24 * +HEAPF32[i9 + (i5 * 284 | 0) + 8 >> 2] * d2;
    HEAPF32[i3 + 16 >> 2] = +HEAPF32[i9 + (i5 * 284 | 0) >> 2] * d24 * d2;
    HEAPF32[i3 + 20 >> 2] = d26;
    HEAPF32[i3 + 24 >> 2] = d25;
    HEAPF32[i3 + 28 >> 2] = 0.0;
    d25 = +HEAPF32[i9 + (i5 * 284 | 0) + 20 >> 2] - +HEAPF32[i7 + 56 >> 2];
    d26 = +HEAPF32[i9 + (i5 * 284 | 0) + 24 >> 2] - +HEAPF32[i7 + 60 >> 2];
    HEAPF32[i3 >> 2] = +HEAPF32[i9 + (i5 * 284 | 0) + 16 >> 2] - +HEAPF32[i7 + 52 >> 2];
    HEAPF32[i3 + 4 >> 2] = d25;
    HEAPF32[i3 + 8 >> 2] = d26;
    HEAPF32[i3 + 12 >> 2] = 0.0;
    __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i7, i3 + 16 | 0, i3);
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (HEAP32[i1 + 136 >> 2] | 0)) break L9;
    i9 = HEAP32[i1 + 144 >> 2] | 0;
    i7 = HEAP32[i4 >> 2] | 0;
   }
  }
 } while (0);
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, d2);
 i5 = HEAP32[i1 + 136 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 144 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 i7 = 0;
 do {
  d16 = +HEAPF32[i6 + (i7 * 284 | 0) + 36 >> 2] - +HEAPF32[i4 + 52 >> 2];
  d15 = +HEAPF32[i6 + (i7 * 284 | 0) + 40 >> 2] - +HEAPF32[i4 + 56 >> 2];
  d19 = +HEAPF32[i6 + (i7 * 284 | 0) + 44 >> 2] - +HEAPF32[i4 + 60 >> 2];
  d14 = +HEAPF32[i4 + 332 >> 2];
  d18 = +HEAPF32[i4 + 336 >> 2];
  d22 = +HEAPF32[i4 + 328 >> 2];
  if ((HEAP8[i6 + (i7 * 284 | 0) + 84 >> 0] | 0) == 0) {
   d14 = +HEAPF32[i6 + (i7 * 284 | 0) + 240 >> 2];
   i27 = i6 + (i7 * 284 | 0) + 236 | 0;
   HEAPF32[i27 >> 2] = d14 + +HEAPF32[i27 >> 2];
  } else {
   i27 = HEAP32[i1 + 128 >> 2] | 0;
   d29 = +HEAPF32[i4 + (i27 << 2) + 4 >> 2];
   d23 = +HEAPF32[i4 + (i27 << 2) + 20 >> 2];
   d25 = +HEAPF32[i4 + (i27 << 2) + 36 >> 2];
   d28 = +HEAPF32[i6 + (i7 * 284 | 0) >> 2];
   d24 = +HEAPF32[i6 + (i7 * 284 | 0) + 4 >> 2];
   d26 = +HEAPF32[i6 + (i7 * 284 | 0) + 8 >> 2];
   d14 = ((d15 * d22 - d16 * d14 + +HEAPF32[i4 + 320 >> 2]) * (d25 - d26 * (d29 * d28 + d23 * d24 + d25 * d26)) + ((d14 * d19 - d15 * d18 + +HEAPF32[i4 + 312 >> 2]) * (d29 - d28 * (d29 * d28 + d23 * d24 + d25 * d26)) + (d16 * d18 - d19 * d22 + +HEAPF32[i4 + 316 >> 2]) * (d23 - d24 * (d29 * d28 + d23 * d24 + d25 * d26)))) * d2 / +HEAPF32[i6 + (i7 * 284 | 0) + 212 >> 2];
   HEAPF32[i6 + (i7 * 284 | 0) + 240 >> 2] = d14;
   i27 = i6 + (i7 * 284 | 0) + 236 | 0;
   HEAPF32[i27 >> 2] = d14 + +HEAPF32[i27 >> 2];
  }
  HEAPF32[i6 + (i7 * 284 | 0) + 240 >> 2] = d14 * .9900000095367432;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) < (i5 | 0));
 STACKTOP = i3;
 return;
}
function __ZN16btDbvtBroadphase25calculateOverlappingPairsEP12btDispatcher(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 __ZN6btDbvt19optimizeIncrementalEi(i2 + 4 | 0, ((Math_imul(HEAP32[i2 + 152 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0) | 0) / 100 | 0) + 1 | 0);
 if ((HEAP32[i2 + 164 >> 2] | 0) != 0) {
  i12 = ((Math_imul(HEAP32[i2 + 148 >> 2] | 0, HEAP32[i2 + 76 >> 2] | 0) | 0) / 100 | 0) + 1 | 0;
  __ZN6btDbvt19optimizeIncrementalEi(i2 + 64 | 0, i12);
  i12 = (HEAP32[i2 + 164 >> 2] | 0) - i12 | 0;
  HEAP32[i2 + 164 >> 2] = (i12 | 0) < 0 ? 0 : i12;
 }
 i8 = ((HEAP32[i2 + 144 >> 2] | 0) + 1 | 0) % 2 | 0;
 HEAP32[i2 + 144 >> 2] = i8;
 i8 = HEAP32[i2 + (i8 << 2) + 124 >> 2] | 0;
 if ((i8 | 0) != 0) {
  do {
   i9 = i8 + 56 | 0;
   i7 = i8;
   i8 = HEAP32[i9 >> 2] | 0;
   i10 = HEAP32[i7 + 52 >> 2] | 0;
   if ((i10 | 0) == 0) HEAP32[i2 + (HEAP32[i7 + 60 >> 2] << 2) + 124 >> 2] = i8; else HEAP32[i10 + 56 >> 2] = i8;
   i10 = HEAP32[i9 >> 2] | 0;
   if ((i10 | 0) != 0) HEAP32[i10 + 52 >> 2] = HEAP32[i7 + 52 >> 2];
   HEAP32[i7 + 52 >> 2] = 0;
   HEAP32[i9 >> 2] = HEAP32[i2 + 132 >> 2];
   i9 = HEAP32[i2 + 132 >> 2] | 0;
   if ((i9 | 0) != 0) HEAP32[i9 + 52 >> 2] = i7;
   HEAP32[i2 + 132 >> 2] = i7;
   i10 = HEAP32[i7 + 48 >> 2] | 0;
   __ZL10removeleafP6btDbvtP10btDbvtNode(i2 + 4 | 0, i10) | 0;
   i9 = HEAP32[i2 + 8 >> 2] | 0;
   if ((i9 | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i9 + -4 >> 2] | 0);
   }
   HEAP32[i2 + 8 >> 2] = i10;
   HEAP32[i2 + 16 >> 2] = (HEAP32[i2 + 16 >> 2] | 0) + -1;
   HEAP32[i1 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
   HEAP32[i1 + 32 >> 2] = HEAP32[i7 + 32 >> 2];
   HEAP32[i1 + 36 >> 2] = HEAP32[i7 + 36 >> 2];
   HEAP32[i1 + 40 >> 2] = HEAP32[i7 + 40 >> 2];
   HEAP32[i1 + 44 >> 2] = HEAP32[i7 + 44 >> 2];
   i9 = HEAP32[i2 + 68 >> 2] | 0;
   if ((i9 | 0) == 0) {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i9 = _malloc(63) | 0;
    if ((i9 | 0) != 0 ? (HEAP32[(i9 + 19 & -16) + -4 >> 2] = i9, (i9 + 19 & -16 | 0) != 0) : 0) {
     i11 = (i9 + 19 & -16) + 0 | 0;
     i10 = i11 + 44 | 0;
     do {
      HEAP32[i11 >> 2] = 0;
      i11 = i11 + 4 | 0;
     } while ((i11 | 0) < (i10 | 0));
     i9 = i9 + 19 & -16;
    } else i9 = 0;
   } else HEAP32[i2 + 68 >> 2] = 0;
   HEAP32[i9 + 32 >> 2] = 0;
   HEAP32[i9 + 36 >> 2] = i7;
   HEAP32[i9 + 40 >> 2] = 0;
   HEAP32[i9 + 0 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i1 + 20 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i1 + 24 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i1 + 28 >> 2];
   HEAP32[i9 + 16 >> 2] = HEAP32[i1 + 32 >> 2];
   HEAP32[i9 + 20 >> 2] = HEAP32[i1 + 36 >> 2];
   HEAP32[i9 + 24 >> 2] = HEAP32[i1 + 40 >> 2];
   HEAP32[i9 + 28 >> 2] = HEAP32[i1 + 44 >> 2];
   __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i2 + 64 | 0, HEAP32[i2 + 64 >> 2] | 0, i9);
   HEAP32[i2 + 76 >> 2] = (HEAP32[i2 + 76 >> 2] | 0) + 1;
   HEAP32[i7 + 48 >> 2] = i9;
   HEAP32[i7 + 60 >> 2] = 2;
  } while ((i8 | 0) != 0);
  HEAP32[i2 + 164 >> 2] = HEAP32[i2 + 76 >> 2];
  HEAP8[i2 + 194 >> 0] = 1;
 }
 HEAP32[i1 >> 2] = 11696;
 HEAP32[i1 + 4 >> 2] = i2;
 if ((HEAP8[i2 + 193 >> 0] | 0) != 0 ? (__ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i2 + 4 | 0, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 + 64 >> 2] | 0, i1), (HEAP8[i2 + 193 >> 0] | 0) != 0) : 0) {
  i12 = HEAP32[i2 + 4 >> 2] | 0;
  __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i2 + 4 | 0, i12, i12, i1);
 }
 do if ((HEAP8[i2 + 194 >> 0] | 0) != 0 ? (i5 = HEAP32[i2 + 136 >> 2] | 0, i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 127](i5) | 0, i6 = HEAP32[i5 + 4 >> 2] | 0, (i6 | 0) > 0) : 0) {
  i8 = (Math_imul(HEAP32[i2 + 156 >> 2] | 0, i6) | 0) / 100 | 0;
  i12 = HEAP32[i2 + 160 >> 2] | 0;
  i8 = (i12 | 0) > (i8 | 0) ? i12 : i8;
  i8 = (i6 | 0) < (i8 | 0) ? i6 : i8;
  if ((i8 | 0) > 0) {
   i7 = 0;
   do {
    i10 = ((HEAP32[i2 + 184 >> 2] | 0) + i7 | 0) % (i6 | 0) | 0;
    i11 = HEAP32[i5 + 12 >> 2] | 0;
    i9 = HEAP32[i11 + (i10 << 4) >> 2] | 0;
    i10 = HEAP32[i11 + (i10 << 4) + 4 >> 2] | 0;
    i11 = HEAP32[i9 + 48 >> 2] | 0;
    i12 = HEAP32[i10 + 48 >> 2] | 0;
    if (!(((((+HEAPF32[i11 >> 2] <= +HEAPF32[i12 + 16 >> 2] ? +HEAPF32[i11 + 16 >> 2] >= +HEAPF32[i12 >> 2] : 0) ? +HEAPF32[i11 + 4 >> 2] <= +HEAPF32[i12 + 20 >> 2] : 0) ? +HEAPF32[i11 + 20 >> 2] >= +HEAPF32[i12 + 4 >> 2] : 0) ? +HEAPF32[i11 + 8 >> 2] <= +HEAPF32[i12 + 24 >> 2] : 0) ? +HEAPF32[i11 + 24 >> 2] >= +HEAPF32[i12 + 8 >> 2] : 0)) {
     i6 = HEAP32[i2 + 136 >> 2] | 0;
     FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 31](i6, i9, i10, i3) | 0;
     i6 = HEAP32[i5 + 4 >> 2] | 0;
     i7 = i7 + -1 | 0;
     i8 = i8 + -1 | 0;
    }
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) < (i8 | 0));
   if ((i6 | 0) <= 0) {
    HEAP32[i2 + 184 >> 2] = 0;
    break;
   }
  }
  HEAP32[i2 + 184 >> 2] = ((HEAP32[i2 + 184 >> 2] | 0) + i8 | 0) % (i6 | 0) | 0;
 } while (0);
 HEAP32[i2 + 180 >> 2] = (HEAP32[i2 + 180 >> 2] | 0) + 1;
 HEAP32[i2 + 160 >> 2] = 1;
 HEAP8[i2 + 194 >> 0] = 0;
 i5 = HEAP32[i2 + 168 >> 2] | 0;
 if ((i5 | 0) == 0) {
  HEAPF32[i2 + 176 >> 2] = 0.0;
  i6 = HEAP32[i2 + 172 >> 2] | 0;
 } else {
  i6 = HEAP32[i2 + 172 >> 2] | 0;
  HEAPF32[i2 + 176 >> 2] = +(i6 >>> 0) / +(i5 >>> 0);
 }
 HEAP32[i2 + 172 >> 2] = i6 >>> 1;
 HEAP32[i2 + 168 >> 2] = i5 >>> 1;
 i12 = HEAP32[i2 + 136 >> 2] | 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 56 >> 2] & 127](i12) | 0)) {
  STACKTOP = i1;
  return;
 }
 i5 = HEAP32[i2 + 136 >> 2] | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 127](i5) | 0;
 i9 = HEAP32[i5 + 4 >> 2] | 0;
 if ((i9 | 0) > 1) {
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvRKT_ii(i5, 0, i9 + -1 | 0);
  i11 = 0;
  i8 = 0;
  i6 = 0;
  i7 = 0;
  i4 = 45;
 } else {
  i8 = 0;
  i11 = 0;
  i6 = 0;
  i7 = 0;
 }
 while (1) {
  if ((i4 | 0) == 45) i9 = HEAP32[i5 + 4 >> 2] | 0;
  if ((i6 | 0) >= (i9 | 0)) break;
  i10 = HEAP32[i5 + 12 >> 2] | 0;
  i9 = i10 + (i6 << 4) | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  i10 = i10 + (i6 << 4) + 4 | 0;
  i12 = HEAP32[i10 >> 2] | 0;
  if ((i4 | 0) == (i8 | 0)) if ((i12 | 0) == (i11 | 0)) i4 = 55; else i4 = 49; else {
   i8 = i4;
   i4 = 49;
  }
  if ((i4 | 0) == 49) {
   i4 = 0;
   i13 = HEAP32[i8 + 48 >> 2] | 0;
   i11 = HEAP32[i12 + 48 >> 2] | 0;
   if (((((+HEAPF32[i13 >> 2] <= +HEAPF32[i11 + 16 >> 2] ? +HEAPF32[i13 + 16 >> 2] >= +HEAPF32[i11 >> 2] : 0) ? +HEAPF32[i13 + 4 >> 2] <= +HEAPF32[i11 + 20 >> 2] : 0) ? +HEAPF32[i13 + 20 >> 2] >= +HEAPF32[i11 + 4 >> 2] : 0) ? +HEAPF32[i13 + 8 >> 2] <= +HEAPF32[i11 + 24 >> 2] : 0) ? +HEAPF32[i13 + 24 >> 2] >= +HEAPF32[i11 + 8 >> 2] : 0) i11 = i12; else {
    i11 = i12;
    i4 = 55;
   }
  }
  if ((i4 | 0) == 55) {
   i13 = HEAP32[i2 + 136 >> 2] | 0;
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] & 127](i13, i9, i3);
   HEAP32[i9 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   i7 = i7 + 1 | 0;
  }
  i6 = i6 + 1 | 0;
  i4 = 45;
 }
 if ((i9 | 0) > 1) {
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvRKT_ii(i5, 0, i9 + -1 | 0);
  i9 = HEAP32[i5 + 4 >> 2] | 0;
 }
 i2 = i9 - i7 | 0;
 if ((i7 | 0) < 0) {
  if ((HEAP32[i5 + 8 >> 2] | 0) < (i2 | 0)) {
   if ((i9 | 0) == (i7 | 0)) i3 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i3 = _malloc((i2 << 4 | 3) + 16 | 0) | 0;
    if ((i3 | 0) == 0) i3 = 0; else {
     HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
     i3 = i3 + 19 & -16;
    }
    i7 = HEAP32[i5 + 4 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i4 = 0;
    do {
     i13 = HEAP32[i5 + 12 >> 2] | 0;
     HEAP32[i3 + (i4 << 4) >> 2] = HEAP32[i13 + (i4 << 4) >> 2];
     HEAP32[i3 + (i4 << 4) + 4 >> 2] = HEAP32[i13 + (i4 << 4) + 4 >> 2];
     HEAP32[i3 + (i4 << 4) + 8 >> 2] = HEAP32[i13 + (i4 << 4) + 8 >> 2];
     HEAP32[i3 + (i4 << 4) + 12 >> 2] = HEAP32[i13 + (i4 << 4) + 12 >> 2];
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i7 | 0));
   }
   i4 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i4 | 0) != 0) {
    if ((HEAP8[i5 + 16 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i4 + -4 >> 2] | 0);
    }
    HEAP32[i5 + 12 >> 2] = 0;
   }
   HEAP8[i5 + 16 >> 0] = 1;
   HEAP32[i5 + 12 >> 2] = i3;
   HEAP32[i5 + 8 >> 2] = i2;
   i3 = i5 + 12 | 0;
  } else i3 = i5 + 12 | 0;
  do {
   i12 = (HEAP32[i3 >> 2] | 0) + (i9 << 4) | 0;
   i9 = i9 + 1 | 0;
   i13 = (i9 | 0) == (i2 | 0);
   HEAP32[i12 + 0 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = 0;
   HEAP32[i12 + 12 >> 2] = 0;
  } while (!i13);
 }
 HEAP32[i5 + 4 >> 2] = i2;
 STACKTOP = i1;
 return;
}
function __ZN20btAxisSweep3InternalItE11createProxyERK9btVector3S3_iPvssP12btDispatcherS4_(i10, i8, i9, i6, i5, i4, i2, i1, i12) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 var i3 = 0, i7 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i10, i3 + 6 | 0, +HEAPF32[i8 >> 2], +HEAPF32[i8 + 4 >> 2], +HEAPF32[i8 + 8 >> 2], 0);
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i10, i3, +HEAPF32[i9 >> 2], +HEAPF32[i9 + 4 >> 2], +HEAPF32[i9 + 8 >> 2], 1);
 i7 = HEAP16[i10 + 64 >> 1] | 0;
 i11 = HEAP32[i10 + 60 >> 2] | 0;
 HEAP16[i10 + 64 >> 1] = HEAP16[i11 + ((i7 & 65535) << 6) + 48 >> 1] | 0;
 HEAP16[i10 + 56 >> 1] = (HEAP16[i10 + 56 >> 1] | 0) + 1 << 16 >> 16;
 HEAP32[i11 + ((i7 & 65535) << 6) + 12 >> 2] = i7 & 65535;
 HEAP32[i11 + ((i7 & 65535) << 6) >> 2] = i5;
 HEAP16[i11 + ((i7 & 65535) << 6) + 4 >> 1] = i4;
 HEAP16[i11 + ((i7 & 65535) << 6) + 6 >> 1] = i2;
 HEAP32[i11 + ((i7 & 65535) << 6) + 8 >> 2] = i12;
 i16 = (HEAPU16[i10 + 56 >> 1] | 0) << 1;
 i17 = (i16 & 65534) + -1 | 0;
 i14 = (HEAP32[i10 + 60 >> 2] | 0) + 54 | 0;
 HEAP16[i14 >> 1] = (HEAPU16[i14 >> 1] | 0) + 2;
 i14 = HEAP32[i10 + 68 >> 2] | 0;
 i13 = HEAPU16[i14 + (i17 << 2) >> 1] | HEAPU16[i14 + (i17 << 2) + 2 >> 1] << 16;
 HEAP16[i14 + ((i16 & 65534 | 1) << 2) >> 1] = i13;
 HEAP16[i14 + ((i16 & 65534 | 1) << 2) + 2 >> 1] = i13 >>> 16;
 i14 = HEAP32[i10 + 68 >> 2] | 0;
 HEAP16[i14 + (i17 << 2) >> 1] = HEAP16[i3 + 6 >> 1] | 0;
 HEAP16[i14 + (i17 << 2) + 2 >> 1] = i7;
 HEAP16[i14 + ((i16 & 65534) << 2) >> 1] = HEAP16[i3 >> 1] | 0;
 HEAP16[i14 + ((i16 & 65534) << 2) + 2 >> 1] = i7;
 HEAP16[i11 + ((i7 & 65535) << 6) + 48 >> 1] = i17;
 HEAP16[i11 + ((i7 & 65535) << 6) + 54 >> 1] = i16;
 i14 = (HEAP32[i10 + 60 >> 2] | 0) + 56 | 0;
 HEAP16[i14 >> 1] = (HEAPU16[i14 >> 1] | 0) + 2;
 i14 = HEAP32[i10 + 72 >> 2] | 0;
 i13 = HEAPU16[i14 + (i17 << 2) >> 1] | HEAPU16[i14 + (i17 << 2) + 2 >> 1] << 16;
 HEAP16[i14 + ((i16 & 65534 | 1) << 2) >> 1] = i13;
 HEAP16[i14 + ((i16 & 65534 | 1) << 2) + 2 >> 1] = i13 >>> 16;
 i14 = HEAP32[i10 + 72 >> 2] | 0;
 HEAP16[i14 + (i17 << 2) >> 1] = HEAP16[i3 + 8 >> 1] | 0;
 HEAP16[i14 + (i17 << 2) + 2 >> 1] = i7;
 HEAP16[i14 + ((i16 & 65534) << 2) >> 1] = HEAP16[i3 + 2 >> 1] | 0;
 HEAP16[i14 + ((i16 & 65534) << 2) + 2 >> 1] = i7;
 HEAP16[i11 + ((i7 & 65535) << 6) + 50 >> 1] = i17;
 HEAP16[i11 + ((i7 & 65535) << 6) + 56 >> 1] = i16;
 i14 = (HEAP32[i10 + 60 >> 2] | 0) + 58 | 0;
 HEAP16[i14 >> 1] = (HEAPU16[i14 >> 1] | 0) + 2;
 i14 = HEAP32[i10 + 76 >> 2] | 0;
 i13 = HEAPU16[i14 + (i17 << 2) >> 1] | HEAPU16[i14 + (i17 << 2) + 2 >> 1] << 16;
 HEAP16[i14 + ((i16 & 65534 | 1) << 2) >> 1] = i13;
 HEAP16[i14 + ((i16 & 65534 | 1) << 2) + 2 >> 1] = i13 >>> 16;
 i14 = HEAP32[i10 + 76 >> 2] | 0;
 HEAP16[i14 + (i17 << 2) >> 1] = HEAP16[i3 + 10 >> 1] | 0;
 HEAP16[i14 + (i17 << 2) + 2 >> 1] = i7;
 HEAP16[i14 + ((i16 & 65534) << 2) >> 1] = HEAP16[i3 + 4 >> 1] | 0;
 HEAP16[i14 + ((i16 & 65534) << 2) + 2 >> 1] = i7;
 HEAP16[i11 + ((i7 & 65535) << 6) + 52 >> 1] = i17;
 HEAP16[i11 + ((i7 & 65535) << 6) + 58 >> 1] = i16;
 i16 = HEAP32[i10 + 68 >> 2] | 0;
 i17 = HEAPU16[i11 + ((i7 & 65535) << 6) + 48 >> 1] | 0;
 i14 = HEAP32[i10 + 60 >> 2] | 0;
 i13 = HEAP16[i16 + (i17 + -1 << 2) >> 1] | 0;
 if ((HEAPU16[i16 + (i17 << 2) >> 1] | 0) < (i13 & 65535)) {
  i12 = i14 + ((HEAPU16[i16 + (i17 << 2) + 2 >> 1] | 0) << 6) + 48 | 0;
  i15 = i16 + (i17 << 2) | 0;
  i16 = i16 + (i17 + -1 << 2) | 0;
  while (1) {
   i17 = HEAPU16[i16 + 2 >> 1] | 0;
   if ((i13 & 1) == 0) {
    i17 = i14 + (i17 << 6) + 48 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   } else {
    i17 = i14 + (i17 << 6) + 54 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + -1 << 16 >> 16;
   i13 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
   i17 = HEAPU16[i16 >> 1] | HEAPU16[i16 + 2 >> 1] << 16;
   HEAP16[i15 >> 1] = i17;
   HEAP16[i15 + 2 >> 1] = i17 >>> 16;
   HEAP16[i16 >> 1] = i13;
   HEAP16[i16 + 2 >> 1] = i13 >>> 16;
   i15 = i15 + -4 | 0;
   i16 = i16 + -4 | 0;
   i13 = HEAP16[i16 >> 1] | 0;
   if (!((HEAPU16[i15 >> 1] | 0) < (i13 & 65535))) break;
   i14 = HEAP32[i10 + 60 >> 2] | 0;
  }
  i12 = HEAP32[i10 + 68 >> 2] | 0;
 } else i12 = i16;
 i13 = HEAPU16[i11 + ((i7 & 65535) << 6) + 54 >> 1] | 0;
 i16 = i12 + (i13 << 2) | 0;
 i15 = i12 + (i13 + -1 << 2) | 0;
 i14 = HEAP16[i15 >> 1] | 0;
 L12 : do if ((HEAPU16[i16 >> 1] | 0) < (i14 & 65535)) {
  i17 = HEAP32[i10 + 60 >> 2] | 0;
  i12 = i17 + ((HEAPU16[i12 + (i13 << 2) + 2 >> 1] | 0) << 6) + 54 | 0;
  i13 = i17;
  while (1) {
   i17 = HEAPU16[i15 + 2 >> 1] | 0;
   if ((i14 & 1) == 0) {
    i17 = i13 + (i17 << 6) + 48 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   } else {
    i17 = i13 + (i17 << 6) + 54 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + -1 << 16 >> 16;
   i14 = HEAPU16[i16 >> 1] | HEAPU16[i16 + 2 >> 1] << 16;
   i17 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
   HEAP16[i16 >> 1] = i17;
   HEAP16[i16 + 2 >> 1] = i17 >>> 16;
   HEAP16[i15 >> 1] = i14;
   HEAP16[i15 + 2 >> 1] = i14 >>> 16;
   i16 = i16 + -4 | 0;
   i15 = i15 + -4 | 0;
   i14 = HEAP16[i15 >> 1] | 0;
   if (!((HEAPU16[i16 >> 1] | 0) < (i14 & 65535))) break L12;
   i13 = HEAP32[i10 + 60 >> 2] | 0;
  }
 } while (0);
 i17 = HEAP32[i10 + 72 >> 2] | 0;
 i16 = HEAPU16[i11 + ((i7 & 65535) << 6) + 50 >> 1] | 0;
 i14 = HEAP32[i10 + 60 >> 2] | 0;
 i13 = HEAP16[i17 + (i16 + -1 << 2) >> 1] | 0;
 if ((HEAPU16[i17 + (i16 << 2) >> 1] | 0) < (i13 & 65535)) {
  i12 = i14 + ((HEAPU16[i17 + (i16 << 2) + 2 >> 1] | 0) << 6) + 50 | 0;
  i15 = i17 + (i16 << 2) | 0;
  i16 = i17 + (i16 + -1 << 2) | 0;
  while (1) {
   i17 = HEAPU16[i16 + 2 >> 1] | 0;
   if ((i13 & 1) == 0) {
    i17 = i14 + (i17 << 6) + 50 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   } else {
    i17 = i14 + (i17 << 6) + 56 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + -1 << 16 >> 16;
   i13 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
   i17 = HEAPU16[i16 >> 1] | HEAPU16[i16 + 2 >> 1] << 16;
   HEAP16[i15 >> 1] = i17;
   HEAP16[i15 + 2 >> 1] = i17 >>> 16;
   HEAP16[i16 >> 1] = i13;
   HEAP16[i16 + 2 >> 1] = i13 >>> 16;
   i15 = i15 + -4 | 0;
   i16 = i16 + -4 | 0;
   i13 = HEAP16[i16 >> 1] | 0;
   if (!((HEAPU16[i15 >> 1] | 0) < (i13 & 65535))) break;
   i14 = HEAP32[i10 + 60 >> 2] | 0;
  }
  i17 = HEAP32[i10 + 72 >> 2] | 0;
 }
 i12 = HEAPU16[i11 + ((i7 & 65535) << 6) + 56 >> 1] | 0;
 i16 = i17 + (i12 << 2) | 0;
 i15 = i17 + (i12 + -1 << 2) | 0;
 i13 = HEAP16[i15 >> 1] | 0;
 L33 : do if ((HEAPU16[i16 >> 1] | 0) < (i13 & 65535)) {
  i14 = HEAP32[i10 + 60 >> 2] | 0;
  i12 = i14 + ((HEAPU16[i17 + (i12 << 2) + 2 >> 1] | 0) << 6) + 56 | 0;
  while (1) {
   i17 = HEAPU16[i15 + 2 >> 1] | 0;
   if ((i13 & 1) == 0) {
    i17 = i14 + (i17 << 6) + 50 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   } else {
    i17 = i14 + (i17 << 6) + 56 | 0;
    HEAP16[i17 >> 1] = (HEAP16[i17 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + -1 << 16 >> 16;
   i13 = HEAPU16[i16 >> 1] | HEAPU16[i16 + 2 >> 1] << 16;
   i17 = HEAPU16[i15 >> 1] | HEAPU16[i15 + 2 >> 1] << 16;
   HEAP16[i16 >> 1] = i17;
   HEAP16[i16 + 2 >> 1] = i17 >>> 16;
   HEAP16[i15 >> 1] = i13;
   HEAP16[i15 + 2 >> 1] = i13 >>> 16;
   i16 = i16 + -4 | 0;
   i15 = i15 + -4 | 0;
   i13 = HEAP16[i15 >> 1] | 0;
   if (!((HEAPU16[i16 >> 1] | 0) < (i13 & 65535))) break L33;
   i14 = HEAP32[i10 + 60 >> 2] | 0;
  }
 } while (0);
 __ZN20btAxisSweep3InternalItE11sortMinDownEitP12btDispatcherb(i10, 2, HEAP16[i11 + ((i7 & 65535) << 6) + 52 >> 1] | 0);
 __ZN20btAxisSweep3InternalItE11sortMaxDownEitP12btDispatcherb(i10, 2, HEAP16[i11 + ((i7 & 65535) << 6) + 58 >> 1] | 0, i1);
 i11 = HEAP32[i10 + 60 >> 2] | 0;
 i10 = HEAP32[i10 + 108 >> 2] | 0;
 if ((i10 | 0) == 0) {
  i17 = i11 + ((i7 & 65535) << 6) | 0;
  STACKTOP = i3;
  return i17 | 0;
 }
 i17 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 3](i10, i8, i9, i6, i5, i4, i2, i1, 0) | 0;
 HEAP32[i11 + ((i7 & 65535) << 6) + 60 >> 2] = i17;
 i17 = i11 + ((i7 & 65535) << 6) | 0;
 STACKTOP = i3;
 return i17 | 0;
}
function __ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = HEAP32[i2 + 372 >> 2] | 0;
 i10 = HEAP32[i3 + 32 >> 2] | 0;
 L1 : do if ((i10 | 0) == 2) {
  i11 = HEAP32[i3 + 4 >> 2] | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  d6 = +HEAPF32[i11 + 16 >> 2] - +HEAPF32[i3 + 16 >> 2];
  d4 = +HEAPF32[i11 + 20 >> 2] - +HEAPF32[i3 + 20 >> 2];
  d5 = +HEAPF32[i11 + 24 >> 2] - +HEAPF32[i3 + 24 >> 2];
  i3 = 0;
  while (1) {
   i11 = i1 + (i3 << 2) | 0;
   HEAP32[i1 + 0 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   HEAPF32[i11 >> 2] = 1.0;
   d7 = +HEAPF32[i1 + 8 >> 2];
   d8 = +HEAPF32[i1 + 4 >> 2];
   d9 = +HEAPF32[i1 >> 2];
   if ((d4 * d7 - d5 * d8) * (d4 * d7 - d5 * d8) + (d5 * d9 - d6 * d7) * (d5 * d9 - d6 * d7) + (d6 * d8 - d4 * d9) * (d6 * d8 - d4 * d9) > 0.0) {
    i10 = HEAP32[i2 + 372 >> 2] | 0;
    HEAPF32[i10 + (HEAP32[i10 + 32 >> 2] << 2) + 16 >> 2] = 0.0;
    i11 = (HEAP32[i2 + 364 >> 2] | 0) + -1 | 0;
    HEAP32[i2 + 364 >> 2] = i11;
    HEAP32[i10 + (HEAP32[i10 + 32 >> 2] << 2) >> 2] = HEAP32[i2 + (i11 << 2) + 348 >> 2];
    i11 = HEAP32[i10 + 32 >> 2] | 0;
    HEAP32[i10 + 32 >> 2] = i11 + 1;
    __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, d4 * d7 - d5 * d8, d5 * d9 - d6 * d7, d6 * d8 - d4 * d9, HEAP32[i10 + (i11 << 2) >> 2] | 0);
    if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
     i3 = 1;
     i2 = 19;
     break;
    }
    i10 = HEAP32[i2 + 372 >> 2] | 0;
    i11 = (HEAP32[i10 + 32 >> 2] | 0) + -1 | 0;
    HEAP32[i10 + 32 >> 2] = i11;
    i11 = HEAP32[i10 + (i11 << 2) >> 2] | 0;
    i10 = HEAP32[i2 + 364 >> 2] | 0;
    HEAP32[i2 + 364 >> 2] = i10 + 1;
    HEAP32[i2 + (i10 << 2) + 348 >> 2] = i11;
    i10 = HEAP32[i2 + 372 >> 2] | 0;
    HEAPF32[i10 + (HEAP32[i10 + 32 >> 2] << 2) + 16 >> 2] = 0.0;
    i11 = (HEAP32[i2 + 364 >> 2] | 0) + -1 | 0;
    HEAP32[i2 + 364 >> 2] = i11;
    HEAP32[i10 + (HEAP32[i10 + 32 >> 2] << 2) >> 2] = HEAP32[i2 + (i11 << 2) + 348 >> 2];
    i11 = HEAP32[i10 + 32 >> 2] | 0;
    HEAP32[i10 + 32 >> 2] = i11 + 1;
    __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, -(d4 * d7 - d5 * d8), -(d5 * d9 - d6 * d7), -(d6 * d8 - d4 * d9), HEAP32[i10 + (i11 << 2) >> 2] | 0);
    if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
     i3 = 1;
     i2 = 19;
     break;
    }
    i11 = HEAP32[i2 + 372 >> 2] | 0;
    i10 = (HEAP32[i11 + 32 >> 2] | 0) + -1 | 0;
    HEAP32[i11 + 32 >> 2] = i10;
    i10 = HEAP32[i11 + (i10 << 2) >> 2] | 0;
    i11 = HEAP32[i2 + 364 >> 2] | 0;
    HEAP32[i2 + 364 >> 2] = i11 + 1;
    HEAP32[i2 + (i11 << 2) + 348 >> 2] = i10;
   }
   i3 = i3 + 1 | 0;
   if (!(i3 >>> 0 < 3)) break L1;
  }
  if ((i2 | 0) == 19) {
   STACKTOP = i1;
   return i3 | 0;
  }
 } else if ((i10 | 0) == 4) {
  i11 = HEAP32[i3 >> 2] | 0;
  i10 = HEAP32[i3 + 12 >> 2] | 0;
  d9 = +HEAPF32[i10 + 16 >> 2];
  d14 = +HEAPF32[i11 + 16 >> 2] - d9;
  d12 = +HEAPF32[i10 + 20 >> 2];
  d4 = +HEAPF32[i11 + 20 >> 2] - d12;
  d6 = +HEAPF32[i10 + 24 >> 2];
  d7 = +HEAPF32[i11 + 24 >> 2] - d6;
  i11 = HEAP32[i3 + 4 >> 2] | 0;
  d5 = +HEAPF32[i11 + 16 >> 2] - d9;
  d8 = +HEAPF32[i11 + 20 >> 2] - d12;
  d13 = +HEAPF32[i11 + 24 >> 2] - d6;
  i11 = HEAP32[i3 + 8 >> 2] | 0;
  d9 = +HEAPF32[i11 + 16 >> 2] - d9;
  d12 = +HEAPF32[i11 + 20 >> 2] - d12;
  d6 = +HEAPF32[i11 + 24 >> 2] - d6;
  if (!((0.0 != 0.0 ? 1 : d14 * d8 * d6 + (d4 * d13 * d9 + d7 * d5 * d12 - d14 * d13 * d12 - d4 * d5 * d6) - d7 * d8 * d9 != d14 * d8 * d6 + (d4 * d13 * d9 + d7 * d5 * d12 - d14 * d13 * d12 - d4 * d5 * d6) - d7 * d8 * d9) | d14 * d8 * d6 + (d4 * d13 * d9 + d7 * d5 * d12 - d14 * d13 * d12 - d4 * d5 * d6) - d7 * d8 * d9 == 0.0)) {
   i11 = 1;
   STACKTOP = i1;
   return i11 | 0;
  }
 } else if ((i10 | 0) == 3) {
  i11 = HEAP32[i3 + 4 >> 2] | 0;
  i10 = HEAP32[i3 >> 2] | 0;
  d5 = +HEAPF32[i10 + 16 >> 2];
  d4 = +HEAPF32[i11 + 16 >> 2] - d5;
  d9 = +HEAPF32[i10 + 20 >> 2];
  d6 = +HEAPF32[i11 + 20 >> 2] - d9;
  d7 = +HEAPF32[i10 + 24 >> 2];
  d8 = +HEAPF32[i11 + 24 >> 2] - d7;
  i11 = HEAP32[i3 + 8 >> 2] | 0;
  d5 = +HEAPF32[i11 + 16 >> 2] - d5;
  d9 = +HEAPF32[i11 + 20 >> 2] - d9;
  d7 = +HEAPF32[i11 + 24 >> 2] - d7;
  if ((d6 * d7 - d8 * d9) * (d6 * d7 - d8 * d9) + (d8 * d5 - d4 * d7) * (d8 * d5 - d4 * d7) + (d4 * d9 - d6 * d5) * (d4 * d9 - d6 * d5) > 0.0) {
   HEAPF32[i3 + 28 >> 2] = 0.0;
   i11 = (HEAP32[i2 + 364 >> 2] | 0) + -1 | 0;
   HEAP32[i2 + 364 >> 2] = i11;
   HEAP32[i3 + (HEAP32[i3 + 32 >> 2] << 2) >> 2] = HEAP32[i2 + (i11 << 2) + 348 >> 2];
   i11 = HEAP32[i3 + 32 >> 2] | 0;
   HEAP32[i3 + 32 >> 2] = i11 + 1;
   __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, d6 * d7 - d8 * d9, d8 * d5 - d4 * d7, d4 * d9 - d6 * d5, HEAP32[i3 + (i11 << 2) >> 2] | 0);
   if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
    i11 = 1;
    STACKTOP = i1;
    return i11 | 0;
   }
   i10 = HEAP32[i2 + 372 >> 2] | 0;
   i11 = (HEAP32[i10 + 32 >> 2] | 0) + -1 | 0;
   HEAP32[i10 + 32 >> 2] = i11;
   i11 = HEAP32[i10 + (i11 << 2) >> 2] | 0;
   i10 = HEAP32[i2 + 364 >> 2] | 0;
   HEAP32[i2 + 364 >> 2] = i10 + 1;
   HEAP32[i2 + (i10 << 2) + 348 >> 2] = i11;
   i10 = HEAP32[i2 + 372 >> 2] | 0;
   HEAPF32[i10 + (HEAP32[i10 + 32 >> 2] << 2) + 16 >> 2] = 0.0;
   i11 = (HEAP32[i2 + 364 >> 2] | 0) + -1 | 0;
   HEAP32[i2 + 364 >> 2] = i11;
   HEAP32[i10 + (HEAP32[i10 + 32 >> 2] << 2) >> 2] = HEAP32[i2 + (i11 << 2) + 348 >> 2];
   i11 = HEAP32[i10 + 32 >> 2] | 0;
   HEAP32[i10 + 32 >> 2] = i11 + 1;
   __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, -(d6 * d7 - d8 * d9), -(d8 * d5 - d4 * d7), -(d4 * d9 - d6 * d5), HEAP32[i10 + (i11 << 2) >> 2] | 0);
   if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
    i11 = 1;
    STACKTOP = i1;
    return i11 | 0;
   } else {
    i11 = HEAP32[i2 + 372 >> 2] | 0;
    i10 = (HEAP32[i11 + 32 >> 2] | 0) + -1 | 0;
    HEAP32[i11 + 32 >> 2] = i10;
    i10 = HEAP32[i11 + (i10 << 2) >> 2] | 0;
    i11 = HEAP32[i2 + 364 >> 2] | 0;
    HEAP32[i2 + 364 >> 2] = i11 + 1;
    HEAP32[i2 + (i11 << 2) + 348 >> 2] = i10;
    break;
   }
  }
 } else if ((i10 | 0) == 1) {
  i11 = 1;
  i10 = 0;
  while (1) {
   i15 = i1 + 16 + (i10 << 2) | 0;
   HEAP32[i1 + 16 >> 2] = 0;
   HEAP32[i1 + 20 >> 2] = 0;
   HEAP32[i1 + 24 >> 2] = 0;
   HEAP32[i1 + 28 >> 2] = 0;
   HEAPF32[i15 >> 2] = 1.0;
   i15 = i3 + 32 | 0;
   HEAPF32[i3 + (i11 << 2) + 16 >> 2] = 0.0;
   i11 = (HEAP32[i2 + 364 >> 2] | 0) + -1 | 0;
   HEAP32[i2 + 364 >> 2] = i11;
   HEAP32[i3 + (HEAP32[i15 >> 2] << 2) >> 2] = HEAP32[i2 + (i11 << 2) + 348 >> 2];
   i11 = HEAP32[i15 >> 2] | 0;
   HEAP32[i15 >> 2] = i11 + 1;
   d4 = +HEAPF32[i1 + 16 >> 2];
   d5 = +HEAPF32[i1 + 20 >> 2];
   d6 = +HEAPF32[i1 + 24 >> 2];
   __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, d4, d5, d6, HEAP32[i3 + (i11 << 2) >> 2] | 0);
   if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
    i3 = 1;
    i2 = 19;
    break;
   }
   i11 = HEAP32[i2 + 372 >> 2] | 0;
   i15 = (HEAP32[i11 + 32 >> 2] | 0) + -1 | 0;
   HEAP32[i11 + 32 >> 2] = i15;
   i15 = HEAP32[i11 + (i15 << 2) >> 2] | 0;
   i11 = HEAP32[i2 + 364 >> 2] | 0;
   HEAP32[i2 + 364 >> 2] = i11 + 1;
   HEAP32[i2 + (i11 << 2) + 348 >> 2] = i15;
   i11 = HEAP32[i2 + 372 >> 2] | 0;
   HEAPF32[i11 + (HEAP32[i11 + 32 >> 2] << 2) + 16 >> 2] = 0.0;
   i15 = (HEAP32[i2 + 364 >> 2] | 0) + -1 | 0;
   HEAP32[i2 + 364 >> 2] = i15;
   HEAP32[i11 + (HEAP32[i11 + 32 >> 2] << 2) >> 2] = HEAP32[i2 + (i15 << 2) + 348 >> 2];
   i15 = HEAP32[i11 + 32 >> 2] | 0;
   HEAP32[i11 + 32 >> 2] = i15 + 1;
   __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, -d4, -d5, -d6, HEAP32[i11 + (i15 << 2) >> 2] | 0);
   if (__ZN12gjkepa2_impl3GJK13EncloseOriginEv(i2) | 0) {
    i3 = 1;
    i2 = 19;
    break;
   }
   i15 = HEAP32[i2 + 372 >> 2] | 0;
   i11 = (HEAP32[i15 + 32 >> 2] | 0) + -1 | 0;
   HEAP32[i15 + 32 >> 2] = i11;
   i11 = HEAP32[i15 + (i11 << 2) >> 2] | 0;
   i15 = HEAP32[i2 + 364 >> 2] | 0;
   HEAP32[i2 + 364 >> 2] = i15 + 1;
   HEAP32[i2 + (i15 << 2) + 348 >> 2] = i11;
   i10 = i10 + 1 | 0;
   if (!(i10 >>> 0 < 3)) break L1;
   i3 = HEAP32[i2 + 372 >> 2] | 0;
   i11 = HEAP32[i3 + 32 >> 2] | 0;
  }
  if ((i2 | 0) == 19) {
   STACKTOP = i1;
   return i3 | 0;
  }
 } while (0);
 i15 = 0;
 STACKTOP = i1;
 return i15 | 0;
}
function __ZN14btQuantizedBvh17deSerializeDoubleER24btQuantizedBvhDoubleData(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 HEAPF32[i3 + 20 >> 2] = +HEAPF64[i2 + 32 >> 3];
 HEAPF32[i3 + 24 >> 2] = +HEAPF64[i2 + 40 >> 3];
 HEAPF32[i3 + 28 >> 2] = +HEAPF64[i2 + 48 >> 3];
 HEAPF32[i3 + 32 >> 2] = +HEAPF64[i2 + 56 >> 3];
 HEAPF32[i3 + 4 >> 2] = +HEAPF64[i2 >> 3];
 HEAPF32[i3 + 8 >> 2] = +HEAPF64[i2 + 8 >> 3];
 HEAPF32[i3 + 12 >> 2] = +HEAPF64[i2 + 16 >> 3];
 HEAPF32[i3 + 16 >> 2] = +HEAPF64[i2 + 24 >> 3];
 HEAPF32[i3 + 36 >> 2] = +HEAPF64[i2 + 64 >> 3];
 HEAPF32[i3 + 40 >> 2] = +HEAPF64[i2 + 72 >> 3];
 HEAPF32[i3 + 44 >> 2] = +HEAPF64[i2 + 80 >> 3];
 HEAPF32[i3 + 48 >> 2] = +HEAPF64[i2 + 88 >> 3];
 HEAP32[i3 + 56 >> 2] = HEAP32[i2 + 96 >> 2];
 HEAP8[i3 + 60 >> 0] = (HEAP32[i2 + 100 >> 2] | 0) != 0 & 1;
 i4 = HEAP32[i2 + 104 >> 2] | 0;
 i7 = i1 + 48 | 0;
 i8 = i7 + 64 | 0;
 do {
  HEAP32[i7 >> 2] = 0;
  i7 = i7 + 4 | 0;
 } while ((i7 | 0) < (i8 | 0));
 i5 = HEAP32[i3 + 88 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i3 + 92 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i9 = 0;
    i10 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc(i4 << 6 | 19) | 0;
    if ((i6 | 0) == 0) i9 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i9 = i6 + 19 & -16;
    }
    i10 = HEAP32[i3 + 88 >> 2] | 0;
   }
   if ((i10 | 0) > 0) {
    i11 = 0;
    do {
     i7 = i9 + (i11 << 6) + 0 | 0;
     i6 = (HEAP32[i3 + 96 >> 2] | 0) + (i11 << 6) + 0 | 0;
     i8 = i7 + 64 | 0;
     do {
      HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
      i7 = i7 + 4 | 0;
      i6 = i6 + 4 | 0;
     } while ((i7 | 0) < (i8 | 0));
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i10 | 0));
   }
   i6 = HEAP32[i3 + 96 >> 2] | 0;
   if ((i6 | 0) != 0) {
    if ((HEAP8[i3 + 100 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i6 + -4 >> 2] | 0);
    }
    HEAP32[i3 + 96 >> 2] = 0;
   }
   HEAP8[i3 + 100 >> 0] = 1;
   HEAP32[i3 + 96 >> 2] = i9;
   HEAP32[i3 + 92 >> 2] = i4;
   i9 = i3 + 96 | 0;
  } else i9 = i3 + 96 | 0;
  do {
   i7 = (HEAP32[i9 >> 2] | 0) + (i5 << 6) + 0 | 0;
   i6 = i1 + 48 | 0;
   i8 = i7 + 64 | 0;
   do {
    HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
    i7 = i7 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i7 | 0) < (i8 | 0));
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i3 + 88 >> 2] = i4;
 if ((i4 | 0) > 0) {
  i7 = HEAP32[i3 + 96 >> 2] | 0;
  i5 = 0;
  i6 = HEAP32[i2 + 112 >> 2] | 0;
  while (1) {
   HEAPF32[i7 + (i5 << 6) + 16 >> 2] = +HEAPF64[i6 + 32 >> 3];
   HEAPF32[i7 + (i5 << 6) + 20 >> 2] = +HEAPF64[i6 + 40 >> 3];
   HEAPF32[i7 + (i5 << 6) + 24 >> 2] = +HEAPF64[i6 + 48 >> 3];
   HEAPF32[i7 + (i5 << 6) + 28 >> 2] = +HEAPF64[i6 + 56 >> 3];
   HEAPF32[i7 + (i5 << 6) >> 2] = +HEAPF64[i6 >> 3];
   HEAPF32[i7 + (i5 << 6) + 4 >> 2] = +HEAPF64[i6 + 8 >> 3];
   HEAPF32[i7 + (i5 << 6) + 8 >> 2] = +HEAPF64[i6 + 16 >> 3];
   HEAPF32[i7 + (i5 << 6) + 12 >> 2] = +HEAPF64[i6 + 24 >> 3];
   HEAP32[i7 + (i5 << 6) + 32 >> 2] = HEAP32[i6 + 64 >> 2];
   HEAP32[i7 + (i5 << 6) + 36 >> 2] = HEAP32[i6 + 68 >> 2];
   HEAP32[i7 + (i5 << 6) + 40 >> 2] = HEAP32[i6 + 72 >> 2];
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i4 | 0)) break; else i6 = i6 + 80 | 0;
  }
 }
 i4 = HEAP32[i2 + 108 >> 2] | 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 i5 = HEAP32[i3 + 128 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i3 + 132 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i6 = 0;
    i7 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc((i4 << 4 | 3) + 16 | 0) | 0;
    if ((i6 | 0) == 0) i6 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i6 = i6 + 19 & -16;
    }
    i7 = HEAP32[i3 + 128 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i8 = 0;
    do {
     i11 = i6 + (i8 << 4) | 0;
     i10 = (HEAP32[i3 + 136 >> 2] | 0) + (i8 << 4) | 0;
     HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
     HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i7 | 0));
   }
   i7 = HEAP32[i3 + 136 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i3 + 140 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i3 + 136 >> 2] = 0;
   }
   HEAP8[i3 + 140 >> 0] = 1;
   HEAP32[i3 + 136 >> 2] = i6;
   HEAP32[i3 + 132 >> 2] = i4;
   i6 = i3 + 136 | 0;
  } else i6 = i3 + 136 | 0;
  do {
   i11 = (HEAP32[i6 >> 2] | 0) + (i5 << 4) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i1 + 32 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 36 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 40 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 44 >> 2];
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i3 + 128 >> 2] = i4;
 if ((i4 | 0) > 0) {
  i6 = HEAP32[i3 + 136 >> 2] | 0;
  i5 = 0;
  i7 = HEAP32[i2 + 116 >> 2] | 0;
  while (1) {
   HEAP32[i6 + (i5 << 4) + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP16[i6 + (i5 << 4) + 6 >> 1] = HEAP16[i7 + 6 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 8 >> 1] = HEAP16[i7 + 8 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 10 >> 1] = HEAP16[i7 + 10 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) >> 1] = HEAP16[i7 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 2 >> 1] = HEAP16[i7 + 2 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 4 >> 1] = HEAP16[i7 + 4 >> 1] | 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i4 | 0)) break; else i7 = i7 + 16 | 0;
  }
 }
 HEAP32[i3 + 144 >> 2] = HEAP32[i2 + 120 >> 2];
 i4 = HEAP32[i2 + 124 >> 2] | 0;
 i5 = HEAP32[i3 + 152 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i3 + 156 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i6 = 0;
    i7 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc(i4 << 5 | 19) | 0;
    if ((i6 | 0) == 0) i6 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i6 = i6 + 19 & -16;
    }
    i7 = HEAP32[i3 + 152 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i8 = 0;
    do {
     i11 = i6 + (i8 << 5) | 0;
     i10 = (HEAP32[i3 + 160 >> 2] | 0) + (i8 << 5) | 0;
     HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
     HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
     HEAP32[i11 + 16 >> 2] = HEAP32[i10 + 16 >> 2];
     HEAP32[i11 + 20 >> 2] = HEAP32[i10 + 20 >> 2];
     HEAP32[i11 + 24 >> 2] = HEAP32[i10 + 24 >> 2];
     HEAP32[i11 + 28 >> 2] = HEAP32[i10 + 28 >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i7 | 0));
   }
   i7 = HEAP32[i3 + 160 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i3 + 164 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i3 + 160 >> 2] = 0;
   }
   HEAP8[i3 + 164 >> 0] = 1;
   HEAP32[i3 + 160 >> 2] = i6;
   HEAP32[i3 + 156 >> 2] = i4;
   i6 = i3 + 160 | 0;
  } else i6 = i3 + 160 | 0;
  do {
   i11 = (HEAP32[i6 >> 2] | 0) + (i5 << 5) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i11 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i11 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
   HEAP32[i11 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
   HEAP32[i11 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i3 + 152 >> 2] = i4;
 if ((i4 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i5 = HEAP32[i3 + 160 >> 2] | 0;
 i3 = 0;
 i2 = HEAP32[i2 + 128 >> 2] | 0;
 while (1) {
  HEAP16[i5 + (i3 << 5) + 6 >> 1] = HEAP16[i2 + 14 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 8 >> 1] = HEAP16[i2 + 16 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 10 >> 1] = HEAP16[i2 + 18 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) >> 1] = HEAP16[i2 + 8 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 2 >> 1] = HEAP16[i2 + 10 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 4 >> 1] = HEAP16[i2 + 12 >> 1] | 0;
  HEAP32[i5 + (i3 << 5) + 12 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + (i3 << 5) + 16 >> 2] = HEAP32[i2 + 4 >> 2];
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i4 | 0)) break; else i2 = i2 + 20 | 0;
 }
 STACKTOP = i1;
 return;
}
function __ZN14btQuantizedBvh16deSerializeFloatER23btQuantizedBvhFloatData(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 HEAPF32[i3 + 20 >> 2] = +HEAPF32[i2 + 16 >> 2];
 HEAPF32[i3 + 24 >> 2] = +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i3 + 28 >> 2] = +HEAPF32[i2 + 24 >> 2];
 HEAPF32[i3 + 32 >> 2] = +HEAPF32[i2 + 28 >> 2];
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i2 >> 2];
 HEAPF32[i3 + 8 >> 2] = +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i3 + 12 >> 2] = +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i3 + 16 >> 2] = +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i3 + 36 >> 2] = +HEAPF32[i2 + 32 >> 2];
 HEAPF32[i3 + 40 >> 2] = +HEAPF32[i2 + 36 >> 2];
 HEAPF32[i3 + 44 >> 2] = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i3 + 48 >> 2] = +HEAPF32[i2 + 44 >> 2];
 HEAP32[i3 + 56 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP8[i3 + 60 >> 0] = (HEAP32[i2 + 52 >> 2] | 0) != 0 & 1;
 i4 = HEAP32[i2 + 56 >> 2] | 0;
 i7 = i1 + 48 | 0;
 i8 = i7 + 64 | 0;
 do {
  HEAP32[i7 >> 2] = 0;
  i7 = i7 + 4 | 0;
 } while ((i7 | 0) < (i8 | 0));
 i5 = HEAP32[i3 + 88 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i3 + 92 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i9 = 0;
    i10 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc(i4 << 6 | 19) | 0;
    if ((i6 | 0) == 0) i9 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i9 = i6 + 19 & -16;
    }
    i10 = HEAP32[i3 + 88 >> 2] | 0;
   }
   if ((i10 | 0) > 0) {
    i11 = 0;
    do {
     i7 = i9 + (i11 << 6) + 0 | 0;
     i6 = (HEAP32[i3 + 96 >> 2] | 0) + (i11 << 6) + 0 | 0;
     i8 = i7 + 64 | 0;
     do {
      HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
      i7 = i7 + 4 | 0;
      i6 = i6 + 4 | 0;
     } while ((i7 | 0) < (i8 | 0));
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i10 | 0));
   }
   i6 = HEAP32[i3 + 96 >> 2] | 0;
   if ((i6 | 0) != 0) {
    if ((HEAP8[i3 + 100 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i6 + -4 >> 2] | 0);
    }
    HEAP32[i3 + 96 >> 2] = 0;
   }
   HEAP8[i3 + 100 >> 0] = 1;
   HEAP32[i3 + 96 >> 2] = i9;
   HEAP32[i3 + 92 >> 2] = i4;
   i9 = i3 + 96 | 0;
  } else i9 = i3 + 96 | 0;
  do {
   i7 = (HEAP32[i9 >> 2] | 0) + (i5 << 6) + 0 | 0;
   i6 = i1 + 48 | 0;
   i8 = i7 + 64 | 0;
   do {
    HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
    i7 = i7 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i7 | 0) < (i8 | 0));
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i3 + 88 >> 2] = i4;
 if ((i4 | 0) > 0) {
  i7 = HEAP32[i3 + 96 >> 2] | 0;
  i5 = 0;
  i6 = HEAP32[i2 + 64 >> 2] | 0;
  while (1) {
   HEAPF32[i7 + (i5 << 6) + 16 >> 2] = +HEAPF32[i6 + 16 >> 2];
   HEAPF32[i7 + (i5 << 6) + 20 >> 2] = +HEAPF32[i6 + 20 >> 2];
   HEAPF32[i7 + (i5 << 6) + 24 >> 2] = +HEAPF32[i6 + 24 >> 2];
   HEAPF32[i7 + (i5 << 6) + 28 >> 2] = +HEAPF32[i6 + 28 >> 2];
   HEAPF32[i7 + (i5 << 6) >> 2] = +HEAPF32[i6 >> 2];
   HEAPF32[i7 + (i5 << 6) + 4 >> 2] = +HEAPF32[i6 + 4 >> 2];
   HEAPF32[i7 + (i5 << 6) + 8 >> 2] = +HEAPF32[i6 + 8 >> 2];
   HEAPF32[i7 + (i5 << 6) + 12 >> 2] = +HEAPF32[i6 + 12 >> 2];
   HEAP32[i7 + (i5 << 6) + 32 >> 2] = HEAP32[i6 + 32 >> 2];
   HEAP32[i7 + (i5 << 6) + 36 >> 2] = HEAP32[i6 + 36 >> 2];
   HEAP32[i7 + (i5 << 6) + 40 >> 2] = HEAP32[i6 + 40 >> 2];
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i4 | 0)) break; else i6 = i6 + 48 | 0;
  }
 }
 i4 = HEAP32[i2 + 60 >> 2] | 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 i5 = HEAP32[i3 + 128 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i3 + 132 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i6 = 0;
    i7 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc((i4 << 4 | 3) + 16 | 0) | 0;
    if ((i6 | 0) == 0) i6 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i6 = i6 + 19 & -16;
    }
    i7 = HEAP32[i3 + 128 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i8 = 0;
    do {
     i11 = i6 + (i8 << 4) | 0;
     i10 = (HEAP32[i3 + 136 >> 2] | 0) + (i8 << 4) | 0;
     HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
     HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i7 | 0));
   }
   i7 = HEAP32[i3 + 136 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i3 + 140 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i3 + 136 >> 2] = 0;
   }
   HEAP8[i3 + 140 >> 0] = 1;
   HEAP32[i3 + 136 >> 2] = i6;
   HEAP32[i3 + 132 >> 2] = i4;
   i6 = i3 + 136 | 0;
  } else i6 = i3 + 136 | 0;
  do {
   i11 = (HEAP32[i6 >> 2] | 0) + (i5 << 4) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i1 + 32 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 36 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 40 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 44 >> 2];
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i3 + 128 >> 2] = i4;
 if ((i4 | 0) > 0) {
  i6 = HEAP32[i3 + 136 >> 2] | 0;
  i5 = 0;
  i7 = HEAP32[i2 + 68 >> 2] | 0;
  while (1) {
   HEAP32[i6 + (i5 << 4) + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP16[i6 + (i5 << 4) + 6 >> 1] = HEAP16[i7 + 6 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 8 >> 1] = HEAP16[i7 + 8 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 10 >> 1] = HEAP16[i7 + 10 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) >> 1] = HEAP16[i7 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 2 >> 1] = HEAP16[i7 + 2 >> 1] | 0;
   HEAP16[i6 + (i5 << 4) + 4 >> 1] = HEAP16[i7 + 4 >> 1] | 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i4 | 0)) break; else i7 = i7 + 16 | 0;
  }
 }
 HEAP32[i3 + 144 >> 2] = HEAP32[i2 + 76 >> 2];
 i4 = HEAP32[i2 + 80 >> 2] | 0;
 i5 = HEAP32[i3 + 152 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i3 + 156 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i6 = 0;
    i7 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc(i4 << 5 | 19) | 0;
    if ((i6 | 0) == 0) i6 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i6 = i6 + 19 & -16;
    }
    i7 = HEAP32[i3 + 152 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i8 = 0;
    do {
     i11 = i6 + (i8 << 5) | 0;
     i10 = (HEAP32[i3 + 160 >> 2] | 0) + (i8 << 5) | 0;
     HEAP32[i11 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
     HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
     HEAP32[i11 + 16 >> 2] = HEAP32[i10 + 16 >> 2];
     HEAP32[i11 + 20 >> 2] = HEAP32[i10 + 20 >> 2];
     HEAP32[i11 + 24 >> 2] = HEAP32[i10 + 24 >> 2];
     HEAP32[i11 + 28 >> 2] = HEAP32[i10 + 28 >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i7 | 0));
   }
   i7 = HEAP32[i3 + 160 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i3 + 164 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i3 + 160 >> 2] = 0;
   }
   HEAP8[i3 + 164 >> 0] = 1;
   HEAP32[i3 + 160 >> 2] = i6;
   HEAP32[i3 + 156 >> 2] = i4;
   i6 = i3 + 160 | 0;
  } else i6 = i3 + 160 | 0;
  do {
   i11 = (HEAP32[i6 >> 2] | 0) + (i5 << 5) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i11 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i11 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
   HEAP32[i11 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
   HEAP32[i11 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i3 + 152 >> 2] = i4;
 if ((i4 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i5 = HEAP32[i3 + 160 >> 2] | 0;
 i3 = 0;
 i2 = HEAP32[i2 + 72 >> 2] | 0;
 while (1) {
  HEAP16[i5 + (i3 << 5) + 6 >> 1] = HEAP16[i2 + 14 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 8 >> 1] = HEAP16[i2 + 16 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 10 >> 1] = HEAP16[i2 + 18 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) >> 1] = HEAP16[i2 + 8 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 2 >> 1] = HEAP16[i2 + 10 >> 1] | 0;
  HEAP16[i5 + (i3 << 5) + 4 >> 1] = HEAP16[i2 + 12 >> 1] | 0;
  HEAP32[i5 + (i3 << 5) + 12 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + (i3 << 5) + 16 >> 2] = HEAP32[i2 + 4 >> 2];
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i4 | 0)) break; else i2 = i2 + 20 | 0;
 }
 STACKTOP = i1;
 return;
}
function __ZN23btGeneric6DofConstraint21get_limit_motor_info2EP22btRotationalLimitMotorRK11btTransformS4_RK9btVector3S7_S7_S7_PN17btTypedConstraint17btConstraintInfo2EiRS5_ii(i16, i9, i24, i25, i5, i6, i3, i4, i10, i8, i2, i7, i17) {
 i16 = i16 | 0;
 i9 = i9 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i17 = i17 | 0;
 var i1 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i26 = 0, i27 = 0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0;
 i1 = STACKTOP;
 i11 = Math_imul(HEAP32[i10 + 24 >> 2] | 0, i8) | 0;
 i13 = (HEAP8[i9 + 44 >> 0] | 0) == 0;
 i8 = HEAP32[i9 + 56 >> 2] | 0;
 if (i13 & (i8 | 0) == 0) {
  i25 = 0;
  STACKTOP = i1;
  return i25 | 0;
 }
 i27 = HEAP32[((i7 | 0) != 0 ? i10 + 12 | 0 : i10 + 8 | 0) >> 2] | 0;
 i26 = HEAP32[((i7 | 0) != 0 ? i10 + 20 | 0 : i10 + 16 | 0) >> 2] | 0;
 HEAPF32[i27 + (i11 << 2) >> 2] = +HEAPF32[i2 >> 2];
 HEAPF32[i27 + (i11 + 1 << 2) >> 2] = +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i27 + (i11 + 2 << 2) >> 2] = +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i26 + (i11 << 2) >> 2] = -+HEAPF32[i2 >> 2];
 HEAPF32[i26 + (i11 + 1 << 2) >> 2] = -+HEAPF32[i2 + 4 >> 2];
 HEAPF32[i26 + (i11 + 2 << 2) >> 2] = -+HEAPF32[i2 + 8 >> 2];
 do if ((i7 | 0) == 0) {
  d14 = +HEAPF32[i16 + 1176 >> 2];
  if ((HEAP8[i16 + 1301 >> 0] | 0) == 0) {
   d19 = d14 - +HEAPF32[i24 + 48 >> 2];
   d22 = +HEAPF32[i16 + 1180 >> 2] - +HEAPF32[i24 + 52 >> 2];
   d23 = +HEAPF32[i16 + 1184 >> 2] - +HEAPF32[i24 + 56 >> 2];
   d21 = +HEAPF32[i2 + 8 >> 2];
   d18 = +HEAPF32[i2 + 4 >> 2];
   d20 = +HEAPF32[i2 >> 2];
   i27 = HEAP32[i10 + 12 >> 2] | 0;
   HEAPF32[i27 + (i11 << 2) >> 2] = d22 * d21 - d23 * d18;
   HEAPF32[i27 + (i11 + 1 << 2) >> 2] = d23 * d20 - d19 * d21;
   HEAPF32[i27 + (i11 + 2 << 2) >> 2] = d19 * d18 - d22 * d20;
   d20 = +HEAPF32[i16 + 1176 >> 2] - +HEAPF32[i25 + 48 >> 2];
   d22 = +HEAPF32[i16 + 1180 >> 2] - +HEAPF32[i25 + 52 >> 2];
   d18 = +HEAPF32[i16 + 1184 >> 2] - +HEAPF32[i25 + 56 >> 2];
   d19 = +HEAPF32[i2 + 8 >> 2];
   d21 = +HEAPF32[i2 + 4 >> 2];
   d23 = +HEAPF32[i2 >> 2];
   i27 = HEAP32[i10 + 20 >> 2] | 0;
   HEAPF32[i27 + (i11 << 2) >> 2] = -(d22 * d19 - d18 * d21);
   HEAPF32[i27 + (i11 + 1 << 2) >> 2] = -(d18 * d23 - d20 * d19);
   HEAPF32[i27 + (i11 + 2 << 2) >> 2] = -(d20 * d21 - d22 * d23);
   break;
  }
  d33 = d14 - +HEAPF32[i25 + 48 >> 2];
  d31 = +HEAPF32[i16 + 1180 >> 2] - +HEAPF32[i25 + 52 >> 2];
  d29 = +HEAPF32[i16 + 1184 >> 2] - +HEAPF32[i25 + 56 >> 2];
  d32 = +HEAPF32[i2 >> 2];
  d30 = +HEAPF32[i2 + 4 >> 2];
  d28 = +HEAPF32[i2 + 8 >> 2];
  d35 = +HEAPF32[i16 + 1112 >> 2] - +HEAPF32[i24 + 48 >> 2];
  d20 = +HEAPF32[i16 + 1116 >> 2] - +HEAPF32[i24 + 52 >> 2];
  d14 = +HEAPF32[i16 + 1120 >> 2] - +HEAPF32[i24 + 56 >> 2];
  d21 = +HEAPF32[i9 + 52 >> 2] - +HEAPF32[i9 + 48 >> 2];
  d34 = d32 * (d32 * d35 + d30 * d20 + d28 * d14) + d32 * d21 - d32 * (d33 * d32 + d31 * d30 + d29 * d28);
  d22 = d30 * (d32 * d35 + d30 * d20 + d28 * d14) + d30 * d21 - d30 * (d33 * d32 + d31 * d30 + d29 * d28);
  d21 = d28 * (d32 * d35 + d30 * d20 + d28 * d14) + d28 * d21 - d28 * (d33 * d32 + d31 * d30 + d29 * d28);
  d15 = +HEAPF32[i16 + 1272 >> 2];
  d23 = +HEAPF32[i16 + 1276 >> 2];
  d19 = d28 * (d20 - d30 * (d32 * d35 + d30 * d20 + d28 * d14) + d15 * d22) - d30 * (d14 - d28 * (d32 * d35 + d30 * d20 + d28 * d14) + d15 * d21);
  d18 = d32 * (d14 - d28 * (d32 * d35 + d30 * d20 + d28 * d14) + d15 * d21) - d28 * (d35 - d32 * (d32 * d35 + d30 * d20 + d28 * d14) + d15 * d34);
  d14 = d30 * (d35 - d32 * (d32 * d35 + d30 * d20 + d28 * d14) + d15 * d34) - d32 * (d20 - d30 * (d32 * d35 + d30 * d20 + d28 * d14) + d15 * d22);
  d20 = d28 * (d31 - d30 * (d33 * d32 + d31 * d30 + d29 * d28) - d23 * d22) - d30 * (d29 - d28 * (d33 * d32 + d31 * d30 + d29 * d28) - d23 * d21);
  d21 = d32 * (d29 - d28 * (d33 * d32 + d31 * d30 + d29 * d28) - d23 * d21) - d28 * (d33 - d32 * (d33 * d32 + d31 * d30 + d29 * d28) - d23 * d34);
  d22 = d30 * (d33 - d32 * (d33 * d32 + d31 * d30 + d29 * d28) - d23 * d34) - d32 * (d31 - d30 * (d33 * d32 + d31 * d30 + d29 * d28) - d23 * d22);
  if ((HEAP8[i16 + 1280 >> 0] | 0) != 0 & (i17 | 0) == 0) {
   d20 = d23 * d20;
   d21 = d23 * d21;
   d22 = d23 * d22;
   d19 = d15 * d19;
   d18 = d15 * d18;
   d14 = d15 * d14;
  }
  i27 = HEAP32[i10 + 12 >> 2] | 0;
  HEAPF32[i27 + (i11 << 2) >> 2] = d19;
  HEAPF32[i27 + (i11 + 1 << 2) >> 2] = d18;
  HEAPF32[i27 + (i11 + 2 << 2) >> 2] = d14;
  i27 = HEAP32[i10 + 20 >> 2] | 0;
  HEAPF32[i27 + (i11 << 2) >> 2] = -d20;
  HEAPF32[i27 + (i11 + 1 << 2) >> 2] = -d21;
  HEAPF32[i27 + (i11 + 2 << 2) >> 2] = -d22;
 } while (0);
 if ((i8 | 0) != 0 ? +HEAPF32[i9 >> 2] == +HEAPF32[i9 + 4 >> 2] : 0) {
  i13 = HEAP32[i10 + 28 >> 2] | 0;
  HEAPF32[i13 + (i11 << 2) >> 2] = 0.0;
 } else i12 = 11;
 do if ((i12 | 0) == 11) {
  i12 = HEAP32[i10 + 28 >> 2] | 0;
  HEAPF32[i12 + (i11 << 2) >> 2] = 0.0;
  if (!i13) {
   HEAPF32[(HEAP32[i10 + 32 >> 2] | 0) + (i11 << 2) >> 2] = +HEAPF32[i9 + 28 >> 2];
   if ((i8 | 0) != 0) {
    i13 = i12;
    break;
   }
   d14 = +HEAPF32[i9 + 8 >> 2];
   if ((i7 | 0) != 0) d20 = d14; else d20 = -d14;
   d18 = +HEAPF32[i9 + 52 >> 2];
   d19 = +HEAPF32[i9 >> 2];
   d15 = +HEAPF32[i9 + 4 >> 2];
   d21 = +HEAPF32[i10 >> 2] * +HEAPF32[i9 + 32 >> 2];
   do if (!(d19 > d15)) if (!(d19 == d15)) {
    d20 = d20 / d21;
    if (d20 < 0.0) {
     if (d18 >= d19 ? d19 - d20 > d18 : 0) {
      d15 = (d19 - d18) / d20;
      break;
     }
     d15 = d18 < d19 ? 0.0 : 1.0;
     break;
    }
    if (d20 > 0.0) {
     if (d18 <= d15 ? d15 - d20 < d18 : 0) {
      d15 = (d15 - d18) / d20;
      break;
     }
     d15 = d18 > d15 ? 0.0 : 1.0;
    } else d15 = 0.0;
   } else d15 = 0.0; else d15 = 1.0; while (0);
   HEAPF32[i12 + (i11 << 2) >> 2] = d15 * d14 + +HEAPF32[i12 + (i11 << 2) >> 2];
   HEAPF32[(HEAP32[i10 + 36 >> 2] | 0) + (i11 << 2) >> 2] = -+HEAPF32[i9 + 12 >> 2];
   HEAPF32[(HEAP32[i10 + 40 >> 2] | 0) + (i11 << 2) >> 2] = +HEAPF32[i9 + 12 >> 2];
  }
  if ((i8 | 0) != 0) i13 = i12; else {
   i27 = 1;
   STACKTOP = i1;
   return i27 | 0;
  }
 } while (0);
 d14 = +HEAPF32[i10 >> 2] * +HEAPF32[i9 + 32 >> 2] * +HEAPF32[i9 + 48 >> 2];
 i12 = i13 + (i11 << 2) | 0;
 d15 = +HEAPF32[i12 >> 2];
 if ((i7 | 0) != 0) d14 = d15 - d14; else d14 = d14 + d15;
 HEAPF32[i12 >> 2] = d14;
 HEAPF32[(HEAP32[i10 + 32 >> 2] | 0) + (i11 << 2) >> 2] = +HEAPF32[i9 + 36 >> 2];
 if (+HEAPF32[i9 >> 2] == +HEAPF32[i9 + 4 >> 2]) {
  HEAPF32[(HEAP32[i10 + 36 >> 2] | 0) + (i11 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[(HEAP32[i10 + 40 >> 2] | 0) + (i11 << 2) >> 2] = 3.4028234663852886e+38;
  i27 = 1;
  STACKTOP = i1;
  return i27 | 0;
 }
 i13 = (HEAP32[i10 + 36 >> 2] | 0) + (i11 << 2) | 0;
 if ((i8 | 0) == 1) {
  HEAPF32[i13 >> 2] = 0.0;
  HEAPF32[(HEAP32[i10 + 40 >> 2] | 0) + (i11 << 2) >> 2] = 3.4028234663852886e+38;
 } else {
  HEAPF32[i13 >> 2] = -3.4028234663852886e+38;
  HEAPF32[(HEAP32[i10 + 40 >> 2] | 0) + (i11 << 2) >> 2] = 0.0;
 }
 d14 = +HEAPF32[i9 + 40 >> 2];
 if (!(d14 > 0.0)) {
  i27 = 1;
  STACKTOP = i1;
  return i27 | 0;
 }
 if ((i7 | 0) != 0) {
  d34 = +HEAPF32[i2 >> 2];
  d35 = +HEAPF32[i2 + 4 >> 2];
  d15 = +HEAPF32[i2 + 8 >> 2];
  d15 = +HEAPF32[i3 >> 2] * d34 + +HEAPF32[i3 + 4 >> 2] * d35 + +HEAPF32[i3 + 8 >> 2] * d15 - (d34 * +HEAPF32[i4 >> 2] + d35 * +HEAPF32[i4 + 4 >> 2] + d15 * +HEAPF32[i4 + 8 >> 2]);
 } else {
  d34 = +HEAPF32[i2 >> 2];
  d35 = +HEAPF32[i2 + 4 >> 2];
  d15 = +HEAPF32[i2 + 8 >> 2];
  d15 = +HEAPF32[i5 >> 2] * d34 + +HEAPF32[i5 + 4 >> 2] * d35 + +HEAPF32[i5 + 8 >> 2] * d15 - (d34 * +HEAPF32[i6 >> 2] + d35 * +HEAPF32[i6 + 4 >> 2] + d15 * +HEAPF32[i6 + 8 >> 2]);
 }
 if ((i8 | 0) == 1) {
  if (!(d15 < 0.0)) {
   i27 = 1;
   STACKTOP = i1;
   return i27 | 0;
  }
  d14 = -(d15 * d14);
  if (!(+HEAPF32[i12 >> 2] < d14)) {
   i27 = 1;
   STACKTOP = i1;
   return i27 | 0;
  }
  HEAPF32[i12 >> 2] = d14;
  i27 = 1;
  STACKTOP = i1;
  return i27 | 0;
 } else {
  if (!(d15 > 0.0)) {
   i27 = 1;
   STACKTOP = i1;
   return i27 | 0;
  }
  d14 = -(d15 * d14);
  if (!(+HEAPF32[i12 >> 2] > d14)) {
   i27 = 1;
   STACKTOP = i1;
   return i27 | 0;
  }
  HEAPF32[i12 >> 2] = d14;
  i27 = 1;
  STACKTOP = i1;
  return i27 | 0;
 }
 return 0;
}
function __ZN21btConeTwistConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = HEAP32[i1 + 28 >> 2] | 0;
 i11 = HEAP32[i1 + 32 >> 2] | 0;
 __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i1, i7 + 4 | 0, i11 + 4 | 0, i7 + 264 | 0, i11 + 264 | 0);
 i8 = HEAP32[i3 + 8 >> 2] | 0;
 HEAPF32[i8 >> 2] = 1.0;
 i9 = HEAP32[i3 + 24 >> 2] | 0;
 HEAPF32[i8 + (i9 + 1 << 2) >> 2] = 1.0;
 HEAPF32[i8 + ((i9 << 1) + 2 << 2) >> 2] = 1.0;
 d13 = +HEAPF32[i1 + 348 >> 2];
 d19 = +HEAPF32[i1 + 352 >> 2];
 d16 = +HEAPF32[i1 + 356 >> 2];
 d17 = +HEAPF32[i7 + 4 >> 2] * d13 + +HEAPF32[i7 + 8 >> 2] * d19 + +HEAPF32[i7 + 12 >> 2] * d16;
 d14 = d13 * +HEAPF32[i7 + 20 >> 2] + d19 * +HEAPF32[i7 + 24 >> 2] + d16 * +HEAPF32[i7 + 28 >> 2];
 d16 = d13 * +HEAPF32[i7 + 36 >> 2] + d19 * +HEAPF32[i7 + 40 >> 2] + d16 * +HEAPF32[i7 + 44 >> 2];
 i8 = HEAP32[i3 + 12 >> 2] | 0;
 HEAPF32[i8 >> 2] = 0.0;
 HEAPF32[i8 + 4 >> 2] = d16;
 HEAPF32[i8 + 8 >> 2] = -d14;
 HEAPF32[i8 + 12 >> 2] = 0.0;
 HEAPF32[i8 + (i9 << 2) >> 2] = -d16;
 HEAPF32[i8 + (i9 + 1 << 2) >> 2] = 0.0;
 HEAPF32[i8 + (i9 + 2 << 2) >> 2] = d17;
 HEAPF32[i8 + (i9 + 3 << 2) >> 2] = 0.0;
 HEAPF32[i8 + (i9 << 1 << 2) >> 2] = d14;
 HEAPF32[i8 + ((i9 << 1 | 1) << 2) >> 2] = -d17;
 HEAPF32[i8 + ((i9 << 1) + 2 << 2) >> 2] = 0.0;
 HEAPF32[i8 + ((i9 << 1) + 3 << 2) >> 2] = 0.0;
 i8 = HEAP32[i3 + 16 >> 2] | 0;
 HEAPF32[i8 >> 2] = -1.0;
 HEAPF32[i8 + (i9 + 1 << 2) >> 2] = -1.0;
 HEAPF32[i8 + ((i9 << 1) + 2 << 2) >> 2] = -1.0;
 d19 = +HEAPF32[i1 + 412 >> 2];
 d13 = +HEAPF32[i1 + 416 >> 2];
 d12 = +HEAPF32[i1 + 420 >> 2];
 d18 = +HEAPF32[i11 + 4 >> 2] * d19 + +HEAPF32[i11 + 8 >> 2] * d13 + +HEAPF32[i11 + 12 >> 2] * d12;
 d15 = d19 * +HEAPF32[i11 + 20 >> 2] + d13 * +HEAPF32[i11 + 24 >> 2] + d12 * +HEAPF32[i11 + 28 >> 2];
 d12 = d19 * +HEAPF32[i11 + 36 >> 2] + d13 * +HEAPF32[i11 + 40 >> 2] + d12 * +HEAPF32[i11 + 44 >> 2];
 i8 = HEAP32[i3 + 20 >> 2] | 0;
 HEAPF32[i8 >> 2] = 0.0;
 HEAPF32[i8 + 4 >> 2] = -d12;
 HEAPF32[i8 + 8 >> 2] = d15;
 HEAPF32[i8 + 12 >> 2] = 0.0;
 HEAPF32[i8 + (i9 << 2) >> 2] = d12;
 HEAPF32[i8 + (i9 + 1 << 2) >> 2] = 0.0;
 HEAPF32[i8 + (i9 + 2 << 2) >> 2] = -d18;
 HEAPF32[i8 + (i9 + 3 << 2) >> 2] = 0.0;
 HEAPF32[i8 + (i9 << 1 << 2) >> 2] = -d15;
 HEAPF32[i8 + ((i9 << 1 | 1) << 2) >> 2] = d18;
 HEAPF32[i8 + ((i9 << 1) + 2 << 2) >> 2] = 0.0;
 HEAPF32[i8 + ((i9 << 1) + 3 << 2) >> 2] = 0.0;
 i9 = HEAP32[i1 + 592 >> 2] | 0;
 d13 = +HEAPF32[((i9 & 2 | 0) == 0 ? i3 + 4 | 0 : i1 + 600 | 0) >> 2] * +HEAPF32[i3 >> 2];
 i4 = HEAP32[i3 + 24 >> 2] | 0;
 i10 = HEAP32[i3 + 28 >> 2] | 0;
 i6 = HEAP32[i3 + 36 >> 2] | 0;
 i5 = HEAP32[i3 + 40 >> 2] | 0;
 HEAPF32[i10 >> 2] = d13 * (d18 + +HEAPF32[i11 + 52 >> 2] - d17 - +HEAPF32[i7 + 52 >> 2]);
 HEAPF32[i6 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i5 >> 2] = 3.4028234663852886e+38;
 if ((i9 & 1 | 0) == 0) {
  HEAPF32[i10 + (i4 << 2) >> 2] = d13 * (d15 + +HEAPF32[i11 + 56 >> 2] - d14 - +HEAPF32[i7 + 56 >> 2]);
  HEAPF32[i6 + (i4 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i5 + (i4 << 2) >> 2] = 3.4028234663852886e+38;
  HEAPF32[i10 + (i4 << 1 << 2) >> 2] = d13 * (d12 + +HEAPF32[i11 + 60 >> 2] - d16 - +HEAPF32[i7 + 60 >> 2]);
  HEAPF32[i6 + (i4 << 1 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i5 + (i4 << 1 << 2) >> 2] = 3.4028234663852886e+38;
 } else {
  i20 = HEAP32[i3 + 32 >> 2] | 0;
  HEAPF32[i20 >> 2] = +HEAPF32[i1 + 596 >> 2];
  HEAPF32[i10 + (i4 << 2) >> 2] = d13 * (d15 + +HEAPF32[i11 + 56 >> 2] - d14 - +HEAPF32[i7 + 56 >> 2]);
  HEAPF32[i6 + (i4 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i5 + (i4 << 2) >> 2] = 3.4028234663852886e+38;
  HEAPF32[i20 + (i4 << 2) >> 2] = +HEAPF32[i1 + 596 >> 2];
  HEAPF32[i10 + (i4 << 1 << 2) >> 2] = d13 * (d12 + +HEAPF32[i11 + 60 >> 2] - d16 - +HEAPF32[i7 + 60 >> 2]);
  HEAPF32[i6 + (i4 << 1 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i5 + (i4 << 1 << 2) >> 2] = 3.4028234663852886e+38;
  HEAPF32[i20 + (i4 << 1 << 2) >> 2] = +HEAPF32[i1 + 596 >> 2];
 }
 do if ((HEAP8[i1 + 526 >> 0] | 0) == 0) i4 = i4 * 3 | 0; else {
  i11 = HEAP32[i3 + 12 >> 2] | 0;
  d19 = +HEAPF32[i1 + 456 >> 2];
  if (+HEAPF32[i1 + 444 >> 2] < d19 ? +HEAPF32[i1 + 448 >> 2] < d19 : 0) {
   __ZNK11btTransformmlERKS_(i2, i7 + 4 | 0, i1 + 300 | 0);
   d13 = +HEAPF32[i2 + 4 >> 2];
   d14 = +HEAPF32[i2 + 20 >> 2];
   d15 = +HEAPF32[i2 + 36 >> 2];
   d17 = +HEAPF32[i2 + 8 >> 2];
   d18 = +HEAPF32[i2 + 24 >> 2];
   d19 = +HEAPF32[i2 + 40 >> 2];
   i9 = HEAP32[i3 + 24 >> 2] | 0;
   i20 = i9 + (i4 * 3 | 0) | 0;
   HEAPF32[i11 + (i4 * 3 << 2) >> 2] = d13;
   HEAPF32[i11 + ((i4 * 3 | 0) + 1 << 2) >> 2] = d14;
   HEAPF32[i11 + ((i4 * 3 | 0) + 2 << 2) >> 2] = d15;
   HEAPF32[i11 + (i20 << 2) >> 2] = d17;
   HEAPF32[i11 + (i20 + 1 << 2) >> 2] = d18;
   HEAPF32[i11 + (i20 + 2 << 2) >> 2] = d19;
   HEAPF32[i8 + (i4 * 3 << 2) >> 2] = -d13;
   HEAPF32[i8 + ((i4 * 3 | 0) + 1 << 2) >> 2] = -d14;
   HEAPF32[i8 + ((i4 * 3 | 0) + 2 << 2) >> 2] = -d15;
   HEAPF32[i8 + (i20 << 2) >> 2] = -d17;
   HEAPF32[i8 + (i20 + 1 << 2) >> 2] = -d18;
   HEAPF32[i8 + (i20 + 2 << 2) >> 2] = -d19;
   d16 = +HEAPF32[i3 >> 2] * +HEAPF32[i1 + 436 >> 2];
   i10 = HEAP32[i3 + 28 >> 2] | 0;
   HEAPF32[i10 + (i4 * 3 << 2) >> 2] = d16 * (d13 * +HEAPF32[i1 + 460 >> 2] + d14 * +HEAPF32[i1 + 464 >> 2] + d15 * +HEAPF32[i1 + 468 >> 2]);
   HEAPF32[i10 + (i20 << 2) >> 2] = d16 * (d17 * +HEAPF32[i1 + 460 >> 2] + d18 * +HEAPF32[i1 + 464 >> 2] + d19 * +HEAPF32[i1 + 468 >> 2]);
   i6 = HEAP32[i3 + 36 >> 2] | 0;
   HEAPF32[i6 + (i4 * 3 << 2) >> 2] = -3.4028234663852886e+38;
   i5 = HEAP32[i3 + 40 >> 2] | 0;
   HEAPF32[i5 + (i4 * 3 << 2) >> 2] = 3.4028234663852886e+38;
   HEAPF32[i6 + (i20 << 2) >> 2] = -3.4028234663852886e+38;
   HEAPF32[i5 + (i20 << 2) >> 2] = 3.4028234663852886e+38;
   i4 = i9 + i20 | 0;
   break;
  }
  d19 = +HEAPF32[i1 + 436 >> 2];
  d17 = d19 * +HEAPF32[i1 + 460 >> 2] * d19;
  d18 = d19 * d19 * +HEAPF32[i1 + 464 >> 2];
  d19 = d19 * d19 * +HEAPF32[i1 + 468 >> 2];
  HEAPF32[i11 + (i4 * 3 << 2) >> 2] = d17;
  HEAPF32[i11 + ((i4 * 3 | 0) + 1 << 2) >> 2] = d18;
  HEAPF32[i11 + ((i4 * 3 | 0) + 2 << 2) >> 2] = d19;
  HEAPF32[i8 + (i4 * 3 << 2) >> 2] = -d17;
  HEAPF32[i8 + ((i4 * 3 | 0) + 1 << 2) >> 2] = -d18;
  HEAPF32[i8 + ((i4 * 3 | 0) + 2 << 2) >> 2] = -d19;
  HEAPF32[i10 + (i4 * 3 << 2) >> 2] = +HEAPF32[i3 >> 2] * +HEAPF32[i1 + 432 >> 2] * +HEAPF32[i1 + 504 >> 2];
  if ((i9 & 4 | 0) != 0) HEAPF32[(HEAP32[i3 + 32 >> 2] | 0) + (i4 * 3 << 2) >> 2] = +HEAPF32[i1 + 604 >> 2];
  HEAPF32[i6 + (i4 * 3 << 2) >> 2] = 0.0;
  HEAPF32[i5 + (i4 * 3 << 2) >> 2] = 3.4028234663852886e+38;
  i4 = i4 + (i4 * 3 | 0) | 0;
 } while (0);
 if ((HEAP8[i1 + 525 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 d19 = +HEAPF32[i1 + 436 >> 2];
 d17 = d19 * +HEAPF32[i1 + 476 >> 2] * d19;
 d18 = d19 * d19 * +HEAPF32[i1 + 480 >> 2];
 d19 = d19 * d19 * +HEAPF32[i1 + 484 >> 2];
 i8 = HEAP32[i3 + 12 >> 2] | 0;
 i11 = HEAP32[i3 + 20 >> 2] | 0;
 HEAPF32[i8 + (i4 << 2) >> 2] = d17;
 i9 = i4 + 1 | 0;
 HEAPF32[i8 + (i9 << 2) >> 2] = d18;
 i20 = i4 + 2 | 0;
 HEAPF32[i8 + (i20 << 2) >> 2] = d19;
 HEAPF32[i11 + (i4 << 2) >> 2] = -d17;
 HEAPF32[i11 + (i9 << 2) >> 2] = -d18;
 HEAPF32[i11 + (i20 << 2) >> 2] = -d19;
 HEAPF32[i10 + (i4 << 2) >> 2] = +HEAPF32[i3 >> 2] * +HEAPF32[i1 + 432 >> 2] * +HEAPF32[i1 + 508 >> 2];
 if ((HEAP32[i1 + 592 >> 2] & 4 | 0) != 0) HEAPF32[(HEAP32[i3 + 32 >> 2] | 0) + (i4 << 2) >> 2] = +HEAPF32[i1 + 604 >> 2];
 if (!(+HEAPF32[i1 + 452 >> 2] > 0.0)) {
  HEAPF32[i6 + (i4 << 2) >> 2] = -3.4028234663852886e+38;
  HEAPF32[i5 + (i4 << 2) >> 2] = 3.4028234663852886e+38;
  STACKTOP = i2;
  return;
 }
 i3 = i6 + (i4 << 2) | 0;
 if (+HEAPF32[i1 + 508 >> 2] > 0.0) {
  HEAPF32[i3 >> 2] = 0.0;
  HEAPF32[i5 + (i4 << 2) >> 2] = 3.4028234663852886e+38;
  STACKTOP = i2;
  return;
 } else {
  HEAPF32[i3 >> 2] = -3.4028234663852886e+38;
  HEAPF32[i5 + (i4 << 2) >> 2] = 0.0;
  STACKTOP = i2;
  return;
 }
}
function __ZN23btGeneric6DofConstraint19calculateTransformsERK11btTransformS2_(i1, i24, i25) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 __ZNK11btTransformmlERKS_(i2 + 64 | 0, i24, i1 + 48 | 0);
 HEAP32[i1 + 1064 >> 2] = HEAP32[i2 + 64 >> 2];
 HEAP32[i1 + 1068 >> 2] = HEAP32[i2 + 68 >> 2];
 HEAP32[i1 + 1072 >> 2] = HEAP32[i2 + 72 >> 2];
 HEAP32[i1 + 1076 >> 2] = HEAP32[i2 + 76 >> 2];
 HEAP32[i1 + 1080 >> 2] = HEAP32[i2 + 80 >> 2];
 HEAP32[i1 + 1084 >> 2] = HEAP32[i2 + 84 >> 2];
 HEAP32[i1 + 1088 >> 2] = HEAP32[i2 + 88 >> 2];
 HEAP32[i1 + 1092 >> 2] = HEAP32[i2 + 92 >> 2];
 HEAP32[i1 + 1096 >> 2] = HEAP32[i2 + 96 >> 2];
 HEAP32[i1 + 1100 >> 2] = HEAP32[i2 + 100 >> 2];
 HEAP32[i1 + 1104 >> 2] = HEAP32[i2 + 104 >> 2];
 HEAP32[i1 + 1108 >> 2] = HEAP32[i2 + 108 >> 2];
 HEAP32[i1 + 1112 >> 2] = HEAP32[i2 + 112 >> 2];
 HEAP32[i1 + 1116 >> 2] = HEAP32[i2 + 116 >> 2];
 HEAP32[i1 + 1120 >> 2] = HEAP32[i2 + 120 >> 2];
 HEAP32[i1 + 1124 >> 2] = HEAP32[i2 + 124 >> 2];
 __ZNK11btTransformmlERKS_(i2, i25, i1 + 112 | 0);
 HEAP32[i1 + 1128 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 1132 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 1136 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 1140 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 1144 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 1148 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 1152 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 1156 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 1160 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 1164 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 1168 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 1172 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 1176 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 1180 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 1184 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 1188 >> 2] = HEAP32[i2 + 60 >> 2];
 d17 = +HEAPF32[i1 + 1176 >> 2] - +HEAPF32[i1 + 1112 >> 2];
 d18 = +HEAPF32[i1 + 1180 >> 2] - +HEAPF32[i1 + 1116 >> 2];
 d14 = +HEAPF32[i1 + 1184 >> 2] - +HEAPF32[i1 + 1120 >> 2];
 d12 = +HEAPF32[i1 + 1084 >> 2];
 d11 = +HEAPF32[i1 + 1104 >> 2];
 d7 = +HEAPF32[i1 + 1088 >> 2];
 d3 = +HEAPF32[i1 + 1100 >> 2];
 d13 = +HEAPF32[i1 + 1096 >> 2];
 d8 = +HEAPF32[i1 + 1080 >> 2];
 d9 = +HEAPF32[i1 + 1064 >> 2];
 d6 = +HEAPF32[i1 + 1068 >> 2];
 d5 = +HEAPF32[i1 + 1072 >> 2];
 d4 = 1.0 / ((d12 * d11 - d7 * d3) * d9 + d6 * (d7 * d13 - d11 * d8) + (d3 * d8 - d12 * d13) * d5);
 d10 = (d3 * d8 - d12 * d13) * d4;
 d16 = (d12 * d11 - d7 * d3) * d4 * d17 + d4 * (d3 * d5 - d11 * d6) * d18 + d4 * (d7 * d6 - d12 * d5) * d14;
 d15 = d17 * (d7 * d13 - d11 * d8) * d4 + d18 * d4 * (d11 * d9 - d13 * d5) + d4 * (d8 * d5 - d7 * d9) * d14;
 d14 = d17 * d10 + d4 * (d13 * d6 - d3 * d9) * d18 + d4 * (d12 * d9 - d8 * d6) * d14;
 HEAPF32[i1 + 1256 >> 2] = d16;
 HEAPF32[i1 + 1260 >> 2] = d15;
 HEAPF32[i1 + 1264 >> 2] = d14;
 HEAPF32[i1 + 1268 >> 2] = 0.0;
 HEAPF32[i1 + 840 >> 2] = d16;
 d18 = +HEAPF32[i1 + 680 >> 2];
 d17 = +HEAPF32[i1 + 696 >> 2];
 do if (!(d18 > d17)) {
  if (d18 > d16) {
   HEAP32[i1 + 856 >> 2] = 2;
   HEAPF32[i1 + 824 >> 2] = d16 - d18;
   break;
  }
  if (d17 < d16) {
   HEAP32[i1 + 856 >> 2] = 1;
   HEAPF32[i1 + 824 >> 2] = d16 - d17;
   break;
  } else {
   HEAP32[i1 + 856 >> 2] = 0;
   HEAPF32[i1 + 824 >> 2] = 0.0;
   break;
  }
 } else {
  HEAP32[i1 + 856 >> 2] = 0;
  HEAPF32[i1 + 824 >> 2] = 0.0;
 } while (0);
 HEAPF32[i1 + 844 >> 2] = d15;
 d17 = +HEAPF32[i1 + 684 >> 2];
 d16 = +HEAPF32[i1 + 700 >> 2];
 do if (!(d17 > d16)) {
  if (d17 > d15) {
   HEAP32[i1 + 860 >> 2] = 2;
   HEAPF32[i1 + 828 >> 2] = d15 - d17;
   break;
  }
  if (d16 < d15) {
   HEAP32[i1 + 860 >> 2] = 1;
   HEAPF32[i1 + 828 >> 2] = d15 - d16;
   break;
  } else {
   HEAP32[i1 + 860 >> 2] = 0;
   HEAPF32[i1 + 828 >> 2] = 0.0;
   break;
  }
 } else {
  HEAP32[i1 + 860 >> 2] = 0;
  HEAPF32[i1 + 828 >> 2] = 0.0;
 } while (0);
 HEAPF32[i1 + 848 >> 2] = d14;
 d16 = +HEAPF32[i1 + 688 >> 2];
 d15 = +HEAPF32[i1 + 704 >> 2];
 do if (!(d16 > d15)) {
  if (d16 > d14) {
   HEAP32[i1 + 864 >> 2] = 2;
   HEAPF32[i1 + 832 >> 2] = d14 - d16;
   break;
  }
  if (d15 < d14) {
   HEAP32[i1 + 864 >> 2] = 1;
   HEAPF32[i1 + 832 >> 2] = d14 - d15;
   break;
  } else {
   HEAP32[i1 + 864 >> 2] = 0;
   HEAPF32[i1 + 832 >> 2] = 0.0;
   break;
  }
 } else {
  HEAP32[i1 + 864 >> 2] = 0;
  HEAPF32[i1 + 832 >> 2] = 0.0;
 } while (0);
 d22 = +HEAPF32[i1 + 1128 >> 2];
 d21 = +HEAPF32[i1 + 1144 >> 2];
 d17 = +HEAPF32[i1 + 1160 >> 2];
 d15 = +HEAPF32[i1 + 1132 >> 2];
 d16 = +HEAPF32[i1 + 1148 >> 2];
 d18 = +HEAPF32[i1 + 1164 >> 2];
 d23 = (d12 * d11 - d7 * d3) * d4 * d15 + d4 * (d3 * d5 - d11 * d6) * d16 + d4 * (d7 * d6 - d12 * d5) * d18;
 d14 = (d7 * d13 - d11 * d8) * d4 * d15 + d4 * (d11 * d9 - d13 * d5) * d16 + d4 * (d8 * d5 - d7 * d9) * d18;
 d20 = d22 * d10 + d4 * (d13 * d6 - d3 * d9) * d21 + d4 * (d12 * d9 - d8 * d6) * d17;
 d19 = d10 * +HEAPF32[i1 + 1136 >> 2] + d4 * (d13 * d6 - d3 * d9) * +HEAPF32[i1 + 1152 >> 2] + d4 * (d12 * d9 - d8 * d6) * +HEAPF32[i1 + 1168 >> 2];
 do if (d20 < 1.0) if (d20 > -1.0) {
  d23 = +Math_atan2(+-(d10 * d15 + d4 * (d13 * d6 - d3 * d9) * d16 + d4 * (d12 * d9 - d8 * d6) * d18), +d19);
  HEAPF32[i1 + 1192 >> 2] = d23;
  d23 = d20 < -1.0 ? -1.0 : d20;
  d23 = +Math_asin(+(d23 > 1.0 ? 1.0 : d23));
  HEAPF32[i1 + 1196 >> 2] = d23;
  d23 = +Math_atan2(+-(d22 * (d7 * d13 - d11 * d8) * d4 + d21 * d4 * (d11 * d9 - d13 * d5) + d4 * (d8 * d5 - d7 * d9) * d17), +(d22 * (d12 * d11 - d7 * d3) * d4 + d21 * d4 * (d3 * d5 - d11 * d6) + d4 * (d7 * d6 - d12 * d5) * d17));
  HEAPF32[i1 + 1200 >> 2] = d23;
  break;
 } else {
  d23 = -+Math_atan2(+d23, +d14);
  HEAPF32[i1 + 1192 >> 2] = d23;
  HEAPF32[i1 + 1196 >> 2] = -1.5707963705062866;
  HEAPF32[i1 + 1200 >> 2] = 0.0;
  break;
 } else {
  d23 = +Math_atan2(+d23, +d14);
  HEAPF32[i1 + 1192 >> 2] = d23;
  HEAPF32[i1 + 1196 >> 2] = 1.5707963705062866;
  HEAPF32[i1 + 1200 >> 2] = 0.0;
 } while (0);
 HEAPF32[i1 + 1236 >> 2] = 0.0;
 d14 = d11 * (d22 * d11 - d17 * d5) - d7 * (d21 * d5 - d22 * d7);
 d15 = d5 * (d21 * d5 - d22 * d7) - d11 * (d17 * d7 - d21 * d11);
 d16 = d7 * (d17 * d7 - d21 * d11) - d5 * (d22 * d11 - d17 * d5);
 HEAPF32[i1 + 1220 >> 2] = 0.0;
 d18 = d21 * (d21 * d5 - d22 * d7) - d17 * (d22 * d11 - d17 * d5);
 d19 = d17 * (d17 * d7 - d21 * d11) - d22 * (d21 * d5 - d22 * d7);
 d20 = d22 * (d22 * d11 - d17 * d5) - d21 * (d17 * d7 - d21 * d11);
 HEAPF32[i1 + 1252 >> 2] = 0.0;
 d23 = 1.0 / +Math_sqrt(+(d14 * d14 + d15 * d15 + d16 * d16));
 HEAPF32[i1 + 1208 >> 2] = d14 * d23;
 HEAPF32[i1 + 1212 >> 2] = d15 * d23;
 HEAPF32[i1 + 1216 >> 2] = d16 * d23;
 d23 = 1.0 / +Math_sqrt(+((d17 * d7 - d21 * d11) * (d17 * d7 - d21 * d11) + (d22 * d11 - d17 * d5) * (d22 * d11 - d17 * d5) + (d21 * d5 - d22 * d7) * (d21 * d5 - d22 * d7)));
 HEAPF32[i1 + 1224 >> 2] = (d17 * d7 - d21 * d11) * d23;
 HEAPF32[i1 + 1228 >> 2] = (d22 * d11 - d17 * d5) * d23;
 HEAPF32[i1 + 1232 >> 2] = (d21 * d5 - d22 * d7) * d23;
 d23 = 1.0 / +Math_sqrt(+(d18 * d18 + d19 * d19 + d20 * d20));
 HEAPF32[i1 + 1240 >> 2] = d18 * d23;
 HEAPF32[i1 + 1244 >> 2] = d19 * d23;
 HEAPF32[i1 + 1248 >> 2] = d20 * d23;
 if ((HEAP8[i1 + 1301 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 d4 = +HEAPF32[(HEAP32[i1 + 28 >> 2] | 0) + 344 >> 2];
 d3 = +HEAPF32[(HEAP32[i1 + 32 >> 2] | 0) + 344 >> 2];
 if (d4 < 1.1920928955078125e-7) i24 = 1; else i24 = d3 < 1.1920928955078125e-7 & 1;
 HEAP8[i1 + 1280 >> 0] = i24;
 if (d4 + d3 > 0.0) {
  HEAPF32[i1 + 1272 >> 2] = d3 / (d4 + d3);
  d3 = d3 / (d4 + d3);
 } else {
  HEAPF32[i1 + 1272 >> 2] = .5;
  d3 = .5;
 }
 HEAPF32[i1 + 1276 >> 2] = 1.0 - d3;
 STACKTOP = i2;
 return;
}
function __ZNK13btGhostObject15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RN16btCollisionWorld20ConvexResultCallbackEf(i8, i5, i9, i10, i6, d7) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 d7 = +d7;
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0, d23 = 0.0, d24 = 0.0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, i33 = 0, d34 = 0.0, d35 = 0.0, d36 = 0.0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 HEAP32[i22 + 176 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i22 + 180 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i22 + 184 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i22 + 188 >> 2] = HEAP32[i9 + 12 >> 2];
 HEAP32[i22 + 192 >> 2] = HEAP32[i9 + 16 >> 2];
 HEAP32[i22 + 196 >> 2] = HEAP32[i9 + 20 >> 2];
 HEAP32[i22 + 200 >> 2] = HEAP32[i9 + 24 >> 2];
 HEAP32[i22 + 204 >> 2] = HEAP32[i9 + 28 >> 2];
 HEAP32[i22 + 208 >> 2] = HEAP32[i9 + 32 >> 2];
 HEAP32[i22 + 212 >> 2] = HEAP32[i9 + 36 >> 2];
 HEAP32[i22 + 216 >> 2] = HEAP32[i9 + 40 >> 2];
 HEAP32[i22 + 220 >> 2] = HEAP32[i9 + 44 >> 2];
 HEAP32[i22 + 224 >> 2] = HEAP32[i9 + 48 >> 2];
 HEAP32[i22 + 228 >> 2] = HEAP32[i9 + 52 >> 2];
 HEAP32[i22 + 232 >> 2] = HEAP32[i9 + 56 >> 2];
 HEAP32[i22 + 236 >> 2] = HEAP32[i9 + 60 >> 2];
 HEAP32[i22 + 112 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i22 + 116 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i22 + 120 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i22 + 124 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAP32[i22 + 128 >> 2] = HEAP32[i10 + 16 >> 2];
 HEAP32[i22 + 132 >> 2] = HEAP32[i10 + 20 >> 2];
 HEAP32[i22 + 136 >> 2] = HEAP32[i10 + 24 >> 2];
 HEAP32[i22 + 140 >> 2] = HEAP32[i10 + 28 >> 2];
 HEAP32[i22 + 144 >> 2] = HEAP32[i10 + 32 >> 2];
 HEAP32[i22 + 148 >> 2] = HEAP32[i10 + 36 >> 2];
 HEAP32[i22 + 152 >> 2] = HEAP32[i10 + 40 >> 2];
 HEAP32[i22 + 156 >> 2] = HEAP32[i10 + 44 >> 2];
 HEAP32[i22 + 160 >> 2] = HEAP32[i10 + 48 >> 2];
 HEAP32[i22 + 164 >> 2] = HEAP32[i10 + 52 >> 2];
 HEAP32[i22 + 168 >> 2] = HEAP32[i10 + 56 >> 2];
 HEAP32[i22 + 172 >> 2] = HEAP32[i10 + 60 >> 2];
 d31 = +HEAPF32[i22 + 164 >> 2] - +HEAPF32[i22 + 228 >> 2];
 d36 = +HEAPF32[i22 + 168 >> 2] - +HEAPF32[i22 + 232 >> 2];
 HEAPF32[i22 + 64 >> 2] = +HEAPF32[i22 + 160 >> 2] - +HEAPF32[i22 + 224 >> 2];
 HEAPF32[i22 + 68 >> 2] = d31;
 HEAPF32[i22 + 72 >> 2] = d36;
 HEAPF32[i22 + 76 >> 2] = 0.0;
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i22 + 176 | 0, i22 + 112 | 0, i22 + 248 | 0, i22 + 240 | 0);
 d36 = +HEAPF32[i22 + 240 >> 2];
 d31 = d36 * +HEAPF32[i22 + 252 >> 2];
 d29 = d36 * +HEAPF32[i22 + 256 >> 2];
 HEAPF32[i22 + 48 >> 2] = +HEAPF32[i22 + 248 >> 2] * d36;
 HEAPF32[i22 + 52 >> 2] = d31;
 HEAPF32[i22 + 56 >> 2] = d29;
 HEAPF32[i22 + 60 >> 2] = 0.0;
 HEAPF32[i22 + 248 >> 2] = 1.0;
 i27 = i22 + 252 | 0;
 HEAP32[i27 + 0 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i27 + 12 >> 2] = 0;
 HEAPF32[i22 + 268 >> 2] = 1.0;
 i28 = i22 + 272 | 0;
 HEAP32[i28 + 0 >> 2] = 0;
 HEAP32[i28 + 4 >> 2] = 0;
 HEAP32[i28 + 8 >> 2] = 0;
 HEAP32[i28 + 12 >> 2] = 0;
 HEAPF32[i22 + 288 >> 2] = 1.0;
 i33 = i22 + 292 | 0;
 HEAP32[i33 + 0 >> 2] = 0;
 HEAP32[i33 + 4 >> 2] = 0;
 HEAP32[i33 + 8 >> 2] = 0;
 HEAP32[i33 + 12 >> 2] = 0;
 HEAP32[i33 + 16 >> 2] = 0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i22 + 176 | 0, i22 + 32 | 0);
 d29 = +HEAPF32[i22 + 32 >> 2];
 d31 = +HEAPF32[i22 + 36 >> 2];
 d36 = +HEAPF32[i22 + 40 >> 2];
 d34 = +HEAPF32[i22 + 44 >> 2];
 d30 = d29 * (2.0 / (d29 * d29 + d31 * d31 + d36 * d36 + d34 * d34));
 d32 = d31 * (2.0 / (d29 * d29 + d31 * d31 + d36 * d36 + d34 * d34));
 d35 = d36 * (2.0 / (d29 * d29 + d31 * d31 + d36 * d36 + d34 * d34));
 HEAPF32[i22 + 248 >> 2] = 1.0 - (d31 * d32 + d36 * d35);
 HEAPF32[i27 >> 2] = d29 * d32 - d34 * d35;
 HEAPF32[i22 + 256 >> 2] = d29 * d35 + d34 * d32;
 HEAPF32[i22 + 260 >> 2] = 0.0;
 HEAPF32[i22 + 264 >> 2] = d29 * d32 + d34 * d35;
 HEAPF32[i22 + 268 >> 2] = 1.0 - (d29 * d30 + d36 * d35);
 HEAPF32[i28 >> 2] = d31 * d35 - d34 * d30;
 HEAPF32[i22 + 276 >> 2] = 0.0;
 HEAPF32[i22 + 280 >> 2] = d29 * d35 - d34 * d32;
 HEAPF32[i22 + 284 >> 2] = d31 * d35 + d34 * d30;
 HEAPF32[i22 + 288 >> 2] = 1.0 - (d29 * d30 + d31 * d32);
 HEAPF32[i33 >> 2] = 0.0;
 __ZNK16btCollisionShape21calculateTemporalAabbERK11btTransformRK9btVector3S5_fRS3_S6_(i5, i22 + 248 | 0, i22 + 64 | 0, i22 + 48 | 0, i22 + 96 | 0, i22 + 80 | 0);
 if ((HEAP32[i8 + 268 >> 2] | 0) <= 0) {
  STACKTOP = i22;
  return;
 }
 i25 = 0;
 do {
  i26 = HEAP32[(HEAP32[i8 + 276 >> 2] | 0) + (i25 << 2) >> 2] | 0;
  if (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 31](i6, HEAP32[i26 + 188 >> 2] | 0) | 0 ? (i16 = HEAP32[i26 + 192 >> 2] | 0, FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] & 127](i16, i26 + 4 | 0, i22 + 16 | 0, i22), d23 = +HEAPF32[i22 + 16 >> 2] + +HEAPF32[i22 + 96 >> 2], d19 = +HEAPF32[i22 + 20 >> 2] + +HEAPF32[i22 + 100 >> 2], d13 = +HEAPF32[i22 + 24 >> 2] + +HEAPF32[i22 + 104 >> 2], HEAPF32[i22 + 16 >> 2] = d23, HEAPF32[i22 + 20 >> 2] = d19, HEAPF32[i22 + 24 >> 2] = d13, HEAPF32[i22 + 28 >> 2] = 0.0, d1 = +HEAPF32[i22 >> 2] + +HEAPF32[i22 + 80 >> 2], d18 = +HEAPF32[i22 + 4 >> 2] + +HEAPF32[i22 + 84 >> 2], d12 = +HEAPF32[i22 + 8 >> 2] + +HEAPF32[i22 + 88 >> 2], HEAPF32[i22 >> 2] = d1, HEAPF32[i22 + 4 >> 2] = d18, HEAPF32[i22 + 8 >> 2] = d12, HEAPF32[i22 + 12 >> 2] = 0.0, d21 = +HEAPF32[i9 + 48 >> 2] - (d1 + d23) * .5, d17 = +HEAPF32[i9 + 52 >> 2] - (d18 + d19) * .5, d11 = +HEAPF32[i9 + 56 >> 2] - (d12 + d13) * .5, d24 = +HEAPF32[i10 + 48 >> 2] - (d1 + d23) * .5, d20 = +HEAPF32[i10 + 52 >> 2] - (d18 + d19) * .5, d14 = +HEAPF32[i10 + 56 >> 2] - (d12 + d13) * .5, i16 = d21 < -((d1 - d23) * .5) | (d21 > (d1 - d23) * .5 ? 8 : 0) | (d17 > (d18 - d19) * .5 ? 16 : 0) | (d17 < -((d18 - d19) * .5) ? 2 : 0) | (d11 > (d12 - d13) * .5 ? 32 : 0) | (d11 < -((d12 - d13) * .5) ? 4 : 0), i15 = d24 < -((d1 - d23) * .5) | (d24 > (d1 - d23) * .5 ? 8 : 0) | (d20 > (d18 - d19) * .5 ? 16 : 0) | (d20 < -((d18 - d19) * .5) ? 2 : 0) | (d14 > (d12 - d13) * .5 ? 32 : 0) | (d14 < -((d12 - d13) * .5) ? 4 : 0), (i16 & i15 | 0) == 0) : 0) {
   d30 = 1.0;
   i27 = 1;
   i28 = 0;
   d31 = 0.0;
   d29 = 1.0;
   while (1) {
    if ((i27 & i16 | 0) == 0) {
     if ((i27 & i15 | 0) != 0 ? (d4 = (-d21 - d29 * (d1 - d23) * .5) / (d24 - d21), d4 < d30) : 0) d30 = d4;
    } else {
     d32 = (-d21 - d29 * (d1 - d23) * .5) / (d24 - d21);
     if (d31 <= d32) d31 = d32;
    }
    i33 = i27 << 1;
    if ((i33 & i16 | 0) == 0) {
     if ((i33 & i15 | 0) != 0 ? (d3 = (-d17 - d29 * (d18 - d19) * .5) / (d20 - d17), d3 < d30) : 0) d30 = d3;
    } else {
     d32 = (-d17 - d29 * (d18 - d19) * .5) / (d20 - d17);
     if (d31 <= d32) d31 = d32;
    }
    i33 = i27 << 2;
    if ((i33 & i16 | 0) == 0) {
     if ((i33 & i15 | 0) != 0 ? (d2 = (-d11 - d29 * (d12 - d13) * .5) / (d14 - d11), d2 < d30) : 0) d30 = d2;
    } else {
     d29 = (-d11 - d29 * (d12 - d13) * .5) / (d14 - d11);
     if (d31 <= d29) d31 = d29;
    }
    i28 = i28 + 1 | 0;
    if ((i28 | 0) == 2) break; else {
     i27 = i27 << 3;
     d29 = -1.0;
    }
   }
   if (d31 <= d30) {
    i33 = HEAP32[i26 + 192 >> 2] | 0;
    HEAP32[i22 + 248 >> 2] = 0;
    HEAP32[i22 + 252 >> 2] = i33;
    HEAP32[i22 + 256 >> 2] = i26;
    HEAP32[i22 + 260 >> 2] = i26 + 4;
    HEAP32[i22 + 264 >> 2] = -1;
    HEAP32[i22 + 268 >> 2] = -1;
    __ZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEf(i5, i22 + 176 | 0, i22 + 112 | 0, i22 + 248 | 0, i6, d7);
   }
  }
  i25 = i25 + 1 | 0;
 } while ((i25 | 0) < (HEAP32[i8 + 268 >> 2] | 0));
 STACKTOP = i22;
 return;
}
function __ZN31btDefaultCollisionConfigurationC2ERK34btDefaultCollisionConstructionInfo(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 11776;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i7 = _malloc(379) | 0;
 if ((i7 | 0) == 0) i7 = 0; else {
  HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
  i7 = i7 + 19 & -16;
 }
 HEAPF32[i7 + 308 >> 2] = 9999999747378752.0e-20;
 i8 = i7 + 332 | 0;
 HEAP8[i8 >> 0] = HEAP8[i8 >> 0] & -16;
 HEAP32[i1 + 24 >> 2] = i7;
 i7 = (HEAP32[i3 + 20 >> 2] | 0) == 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i8 = _malloc(23) | 0;
 if ((i8 | 0) == 0) i9 = 0; else {
  HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
  i9 = i8 + 19 & -16;
 }
 i8 = (i9 | 0) == 0;
 if (i7) {
  if (i8) i9 = 0; else HEAP32[i9 >> 2] = 14576;
  HEAP32[i1 + 28 >> 2] = i9;
 } else {
  if (i8) i9 = 0; else HEAP32[i9 >> 2] = 13248;
  HEAP32[i1 + 28 >> 2] = i9;
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i7 = _malloc(43) | 0;
 if ((i7 | 0) != 0 ? (i6 = i7 + 19 & -16, HEAP32[i6 + -4 >> 2] = i7, (i7 + 19 & -16 | 0) != 0) : 0) {
  i9 = HEAP32[i1 + 24 >> 2] | 0;
  i10 = HEAP32[i1 + 28 >> 2] | 0;
  HEAP8[i6 + 4 >> 0] = 0;
  HEAP32[(i7 + 19 & -16) >> 2] = 18792;
  HEAP32[i6 + 16 >> 2] = 0;
  HEAP32[i6 + 20 >> 2] = 3;
  HEAP32[i6 + 12 >> 2] = i9;
  HEAP32[i6 + 8 >> 2] = i10;
  i6 = i7 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 32 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12784;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 36 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12680;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 40 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12592;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 44 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12496;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 48 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12400;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 52 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12320;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 56 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12224;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 60 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12128;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 76 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12128;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 80 >> 2] = i6;
 HEAP8[i6 + 4 >> 0] = 1;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(27) | 0;
 if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[(i6 + 19 & -16) + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 12040;
  i6 = i6 + 19 & -16;
 } else i6 = 0;
 HEAP32[i1 + 72 >> 2] = i6;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(35) | 0;
 if ((i6 | 0) != 0 ? (i5 = i6 + 19 & -16, HEAP32[i5 + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[i5 + 4 >> 0] = 0;
  HEAP32[(i6 + 19 & -16) >> 2] = 11904;
  HEAP32[i5 + 8 >> 2] = 1;
  HEAP32[i5 + 12 >> 2] = 0;
  i5 = i6 + 19 & -16;
 } else i5 = 0;
 HEAP32[i1 + 88 >> 2] = i5;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(35) | 0;
 if ((i5 | 0) != 0 ? (i4 = i5 + 19 & -16, HEAP32[i4 + -4 >> 2] = i5, (i5 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[i4 + 4 >> 0] = 0;
  HEAP32[(i5 + 19 & -16) >> 2] = 11904;
  HEAP32[i4 + 8 >> 2] = 1;
  HEAP32[i4 + 12 >> 2] = 0;
  i4 = i5 + 19 & -16;
 } else i4 = 0;
 HEAP32[i1 + 84 >> 2] = i4;
 HEAP8[i4 + 4 >> 0] = 1;
 i4 = HEAP32[i3 + 16 >> 2] | 0;
 i4 = (i4 | 0) < 36 ? 36 : i4;
 i4 = (i4 | 0) > 80 ? i4 : 80;
 i4 = (i4 | 0) > 44 ? i4 : 44;
 i5 = HEAP32[i3 >> 2] | 0;
 if ((i5 | 0) == 0) {
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i5 = _malloc(39) | 0;
  do if ((i5 | 0) == 0) i5 = 0; else {
   i8 = i5 + 19 & -16;
   HEAP32[i8 + -4 >> 2] = i5;
   if ((i5 + 19 & -16 | 0) == 0) {
    i5 = 0;
    break;
   }
   i6 = HEAP32[i3 + 8 >> 2] | 0;
   HEAP32[(i5 + 19 & -16) >> 2] = 772;
   HEAP32[i8 + 4 >> 2] = i6;
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i6 = _malloc((i6 * 772 | 3) + 16 | 0) | 0;
   if ((i6 | 0) == 0) i7 = 0; else {
    HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
    i7 = i6 + 19 & -16;
   }
   HEAP32[i8 + 16 >> 2] = i7;
   HEAP32[i8 + 12 >> 2] = i7;
   i6 = HEAP32[i8 + 4 >> 2] | 0;
   HEAP32[i8 + 8 >> 2] = i6;
   if ((i6 + -1 | 0) != 0) {
    i10 = HEAP32[(i5 + 19 & -16) >> 2] | 0;
    i9 = i6 + -1 | 0;
    i8 = i7;
    do {
     i11 = i8;
     i8 = i8 + i10 | 0;
     HEAP32[i11 >> 2] = i8;
     i9 = i9 + -1 | 0;
    } while ((i9 | 0) != 0);
    i7 = i7 + (Math_imul(i10, i6 + -1 | 0) | 0) | 0;
   }
   HEAP32[i7 >> 2] = 0;
   i5 = i5 + 19 & -16;
  } while (0);
  HEAP32[i1 + 8 >> 2] = i5;
 } else {
  HEAP8[i1 + 12 >> 0] = 0;
  HEAP32[i1 + 8 >> 2] = i5;
 }
 i5 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i5 | 0) != 0) {
  HEAP8[i1 + 20 >> 0] = 0;
  HEAP32[i1 + 16 >> 2] = i5;
  STACKTOP = i2;
  return;
 }
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(39) | 0;
 do if ((i5 | 0) == 0) i3 = 0; else {
  i6 = i5 + 19 & -16;
  HEAP32[i6 + -4 >> 2] = i5;
  if ((i5 + 19 & -16 | 0) == 0) {
   i3 = 0;
   break;
  }
  i3 = HEAP32[i3 + 12 >> 2] | 0;
  HEAP32[(i5 + 19 & -16) >> 2] = i4;
  HEAP32[i6 + 4 >> 2] = i3;
  i3 = Math_imul(i3, i4) | 0;
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i3 = _malloc(i3 + 19 | 0) | 0;
  if ((i3 | 0) == 0) i4 = 0; else {
   HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
   i4 = i3 + 19 & -16;
  }
  HEAP32[i6 + 16 >> 2] = i4;
  HEAP32[i6 + 12 >> 2] = i4;
  i3 = HEAP32[i6 + 4 >> 2] | 0;
  HEAP32[i6 + 8 >> 2] = i3;
  if ((i3 + -1 | 0) != 0) {
   i7 = HEAP32[(i5 + 19 & -16) >> 2] | 0;
   i6 = i3 + -1 | 0;
   i8 = i4;
   do {
    i11 = i8;
    i8 = i8 + i7 | 0;
    HEAP32[i11 >> 2] = i8;
    i6 = i6 + -1 | 0;
   } while ((i6 | 0) != 0);
   i4 = i4 + (Math_imul(i7, i3 + -1 | 0) | 0) | 0;
  }
  HEAP32[i4 >> 2] = 0;
  i3 = i5 + 19 & -16;
 } while (0);
 HEAP32[i1 + 16 >> 2] = i3;
 STACKTOP = i2;
 return;
}
function __ZN30btCompoundCompoundLeafCallback7ProcessEPK10btDbvtNodeS2_(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, i33 = 0, i34 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + 1;
 i4 = HEAP32[i4 + 36 >> 2] | 0;
 i5 = HEAP32[i5 + 36 >> 2] | 0;
 i9 = HEAP32[i1 + 8 >> 2] | 0;
 i34 = HEAP32[(HEAP32[i9 + 4 >> 2] | 0) + 24 >> 2] | 0;
 i7 = HEAP32[i34 + (i4 * 80 | 0) + 64 >> 2] | 0;
 i33 = (HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 4 >> 2] | 0) + 24 | 0;
 i8 = HEAP32[(HEAP32[i33 >> 2] | 0) + (i5 * 80 | 0) + 64 >> 2] | 0;
 i9 = HEAP32[i9 + 12 >> 2] | 0;
 d10 = +HEAPF32[i9 >> 2];
 d31 = +HEAPF32[i9 + 4 >> 2];
 d32 = +HEAPF32[i9 + 8 >> 2];
 d13 = +HEAPF32[i9 + 16 >> 2];
 d15 = +HEAPF32[i9 + 20 >> 2];
 d17 = +HEAPF32[i9 + 24 >> 2];
 d14 = +HEAPF32[i9 + 32 >> 2];
 d18 = +HEAPF32[i9 + 36 >> 2];
 d26 = +HEAPF32[i9 + 40 >> 2];
 d19 = +HEAPF32[i34 + (i4 * 80 | 0) >> 2];
 d20 = +HEAPF32[i34 + (i4 * 80 | 0) + 16 >> 2];
 d21 = +HEAPF32[i34 + (i4 * 80 | 0) + 32 >> 2];
 d22 = +HEAPF32[i34 + (i4 * 80 | 0) + 4 >> 2];
 d23 = +HEAPF32[i34 + (i4 * 80 | 0) + 20 >> 2];
 d24 = +HEAPF32[i34 + (i4 * 80 | 0) + 36 >> 2];
 d16 = +HEAPF32[i34 + (i4 * 80 | 0) + 8 >> 2];
 d25 = +HEAPF32[i34 + (i4 * 80 | 0) + 24 >> 2];
 d27 = +HEAPF32[i34 + (i4 * 80 | 0) + 40 >> 2];
 d11 = +HEAPF32[i34 + (i4 * 80 | 0) + 48 >> 2];
 d12 = +HEAPF32[i34 + (i4 * 80 | 0) + 52 >> 2];
 d30 = +HEAPF32[i34 + (i4 * 80 | 0) + 56 >> 2];
 d28 = +HEAPF32[i9 + 48 >> 2] + (d10 * d11 + d31 * d12 + d32 * d30);
 d29 = +HEAPF32[i9 + 52 >> 2] + (d13 * d11 + d15 * d12 + d17 * d30);
 d30 = +HEAPF32[i9 + 56 >> 2] + (d14 * d11 + d18 * d12 + d26 * d30);
 HEAPF32[i3 + 176 >> 2] = d10 * d19 + d31 * d20 + d32 * d21;
 HEAPF32[i3 + 180 >> 2] = d10 * d22 + d31 * d23 + d32 * d24;
 HEAPF32[i3 + 184 >> 2] = d10 * d16 + d31 * d25 + d32 * d27;
 HEAPF32[i3 + 188 >> 2] = 0.0;
 HEAPF32[i3 + 192 >> 2] = d13 * d19 + d15 * d20 + d17 * d21;
 HEAPF32[i3 + 196 >> 2] = d13 * d22 + d15 * d23 + d17 * d24;
 HEAPF32[i3 + 200 >> 2] = d13 * d16 + d15 * d25 + d17 * d27;
 HEAPF32[i3 + 204 >> 2] = 0.0;
 HEAPF32[i3 + 208 >> 2] = d14 * d19 + d18 * d20 + d26 * d21;
 HEAPF32[i3 + 212 >> 2] = d14 * d22 + d18 * d23 + d26 * d24;
 HEAPF32[i3 + 216 >> 2] = d14 * d16 + d18 * d25 + d26 * d27;
 HEAPF32[i3 + 220 >> 2] = 0.0;
 HEAPF32[i3 + 224 >> 2] = d28;
 HEAPF32[i3 + 228 >> 2] = d29;
 HEAPF32[i3 + 232 >> 2] = d30;
 HEAPF32[i3 + 236 >> 2] = 0.0;
 i9 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 12 >> 2] | 0;
 d30 = +HEAPF32[i9 >> 2];
 d29 = +HEAPF32[i9 + 4 >> 2];
 d28 = +HEAPF32[i9 + 8 >> 2];
 d27 = +HEAPF32[i9 + 16 >> 2];
 d26 = +HEAPF32[i9 + 20 >> 2];
 d25 = +HEAPF32[i9 + 24 >> 2];
 d18 = +HEAPF32[i9 + 32 >> 2];
 d16 = +HEAPF32[i9 + 36 >> 2];
 d14 = +HEAPF32[i9 + 40 >> 2];
 i33 = HEAP32[i33 >> 2] | 0;
 d24 = +HEAPF32[i33 + (i5 * 80 | 0) >> 2];
 d23 = +HEAPF32[i33 + (i5 * 80 | 0) + 16 >> 2];
 d22 = +HEAPF32[i33 + (i5 * 80 | 0) + 32 >> 2];
 d21 = +HEAPF32[i33 + (i5 * 80 | 0) + 4 >> 2];
 d20 = +HEAPF32[i33 + (i5 * 80 | 0) + 20 >> 2];
 d19 = +HEAPF32[i33 + (i5 * 80 | 0) + 36 >> 2];
 d17 = +HEAPF32[i33 + (i5 * 80 | 0) + 8 >> 2];
 d15 = +HEAPF32[i33 + (i5 * 80 | 0) + 24 >> 2];
 d13 = +HEAPF32[i33 + (i5 * 80 | 0) + 40 >> 2];
 d32 = +HEAPF32[i33 + (i5 * 80 | 0) + 48 >> 2];
 d31 = +HEAPF32[i33 + (i5 * 80 | 0) + 52 >> 2];
 d10 = +HEAPF32[i33 + (i5 * 80 | 0) + 56 >> 2];
 d12 = +HEAPF32[i9 + 48 >> 2] + (d30 * d32 + d29 * d31 + d28 * d10);
 d11 = +HEAPF32[i9 + 52 >> 2] + (d27 * d32 + d26 * d31 + d25 * d10);
 d10 = +HEAPF32[i9 + 56 >> 2] + (d18 * d32 + d16 * d31 + d14 * d10);
 HEAPF32[i3 + 112 >> 2] = d30 * d24 + d29 * d23 + d28 * d22;
 HEAPF32[i3 + 116 >> 2] = d30 * d21 + d29 * d20 + d28 * d19;
 HEAPF32[i3 + 120 >> 2] = d30 * d17 + d29 * d15 + d28 * d13;
 HEAPF32[i3 + 124 >> 2] = 0.0;
 HEAPF32[i3 + 128 >> 2] = d27 * d24 + d26 * d23 + d25 * d22;
 HEAPF32[i3 + 132 >> 2] = d27 * d21 + d26 * d20 + d25 * d19;
 HEAPF32[i3 + 136 >> 2] = d27 * d17 + d26 * d15 + d25 * d13;
 HEAPF32[i3 + 140 >> 2] = 0.0;
 HEAPF32[i3 + 144 >> 2] = d18 * d24 + d16 * d23 + d14 * d22;
 HEAPF32[i3 + 148 >> 2] = d18 * d21 + d16 * d20 + d14 * d19;
 HEAPF32[i3 + 152 >> 2] = d18 * d17 + d16 * d15 + d14 * d13;
 HEAPF32[i3 + 156 >> 2] = 0.0;
 HEAPF32[i3 + 160 >> 2] = d12;
 HEAPF32[i3 + 164 >> 2] = d11;
 HEAPF32[i3 + 168 >> 2] = d10;
 HEAPF32[i3 + 172 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 127](i7, i3 + 176 | 0, i3 + 96 | 0, i3 + 80 | 0);
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 127](i8, i3 + 112 | 0, i3 + 64 | 0, i3 + 48 | 0);
 if (!(+HEAPF32[i3 + 96 >> 2] > +HEAPF32[i3 + 48 >> 2]) ? !(+HEAPF32[i3 + 80 >> 2] < +HEAPF32[i3 + 64 >> 2]) : 0) i9 = 1; else i9 = 0;
 if (!(!(+HEAPF32[i3 + 104 >> 2] > +HEAPF32[i3 + 56 >> 2]) ? !(+HEAPF32[i3 + 88 >> 2] < +HEAPF32[i3 + 72 >> 2]) : 0)) i9 = 0;
 if (+HEAPF32[i3 + 100 >> 2] > +HEAPF32[i3 + 52 >> 2]) {
  STACKTOP = i3;
  return;
 }
 if (+HEAPF32[i3 + 84 >> 2] < +HEAPF32[i3 + 68 >> 2] | i9 ^ 1) {
  STACKTOP = i3;
  return;
 }
 i33 = HEAP32[i1 + 8 >> 2] | 0;
 i34 = HEAP32[i33 + 8 >> 2] | 0;
 HEAP32[i3 + 24 >> 2] = i33;
 HEAP32[i3 + 28 >> 2] = i7;
 HEAP32[i3 + 32 >> 2] = i34;
 HEAP32[i3 + 36 >> 2] = i3 + 176;
 HEAP32[i3 + 40 >> 2] = -1;
 HEAP32[i3 + 44 >> 2] = i4;
 i34 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP32[i34 + 8 >> 2] | 0;
 HEAP32[i3 >> 2] = i34;
 HEAP32[i3 + 4 >> 2] = i8;
 HEAP32[i3 + 8 >> 2] = i7;
 HEAP32[i3 + 12 >> 2] = i3 + 112;
 HEAP32[i3 + 16 >> 2] = -1;
 HEAP32[i3 + 20 >> 2] = i5;
 i7 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[4896] = (HEAP32[4896] | 0) + 1;
 i8 = ((i5 << 16 | i4) + ~((i5 << 16 | i4) << 15) >> 10 ^ (i5 << 16 | i4) + ~((i5 << 16 | i4) << 15)) * 9 | 0;
 i8 = (HEAP32[i7 + 12 >> 2] | 0) + -1 & ((i8 >> 6 ^ i8) + ~((i8 >> 6 ^ i8) << 11) >> 16 ^ (i8 >> 6 ^ i8) + ~((i8 >> 6 ^ i8) << 11));
 L15 : do if ((i8 | 0) < (HEAP32[i7 + 32 >> 2] | 0) ? (i6 = HEAP32[(HEAP32[i7 + 40 >> 2] | 0) + (i8 << 2) >> 2] | 0, !((i6 | 0) == -1)) : 0) {
  i8 = HEAP32[i7 + 16 >> 2] | 0;
  while (1) {
   if ((HEAP32[i8 + (i6 * 12 | 0) >> 2] | 0) == (i4 | 0) ? (HEAP32[i8 + (i6 * 12 | 0) + 4 >> 2] | 0) == (i5 | 0) : 0) break;
   i6 = HEAP32[(HEAP32[i7 + 60 >> 2] | 0) + (i6 << 2) >> 2] | 0;
   if ((i6 | 0) == -1) {
    i2 = 17;
    break L15;
   }
  }
  if ((i8 + (i6 * 12 | 0) | 0) != 0) i6 = HEAP32[i8 + (i6 * 12 | 0) + 8 >> 2] | 0; else i2 = 17;
 } else i2 = 17; while (0);
 if ((i2 | 0) == 17) {
  i6 = HEAP32[i1 + 16 >> 2] | 0;
  i6 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 31](i6, i3 + 24 | 0, i3, HEAP32[i1 + 32 >> 2] | 0) | 0;
  i34 = HEAP32[i1 + 28 >> 2] | 0;
  i34 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i34 >> 2] | 0) + 12 >> 2] & 31](i34, i4, i5) | 0) + 8 | 0;
  HEAP32[i34 >> 2] = i6;
 }
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i33 = HEAP32[i9 + 8 >> 2] | 0;
 i34 = HEAP32[i9 + 12 >> 2] | 0;
 HEAP32[i9 + 8 >> 2] = i3 + 24;
 HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + 12 >> 2] = i3;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9, -1, i4);
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 127](i9, -1, i5);
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 31](i6, i3 + 24 | 0, i3, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0);
 HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + 8 >> 2] = i33;
 HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + 12 >> 2] = i34;
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btRaycastVehicle_addWheel_7(i1, i16, i14, i15, d2, d3, i13, i4) {
 i1 = i1 | 0;
 i16 = i16 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 d2 = +d2;
 d3 = +d3;
 i13 = i13 | 0;
 i4 = i4 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, i17 = 0, i18 = 0, i19 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 HEAP32[i5 + 144 >> 2] = HEAP32[i16 + 0 >> 2];
 HEAP32[i5 + 148 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i5 + 152 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i5 + 156 >> 2] = HEAP32[i16 + 12 >> 2];
 i19 = i5 + 160 | 0;
 HEAP32[i19 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
 HEAP32[i19 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i19 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i19 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 i18 = i5 + 176 | 0;
 HEAP32[i18 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i18 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i18 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 d7 = +HEAPF32[i13 >> 2];
 d8 = +HEAPF32[i13 + 4 >> 2];
 d9 = +HEAPF32[i13 + 8 >> 2];
 d10 = +HEAPF32[i13 + 16 >> 2];
 d6 = +HEAPF32[i13 + 12 >> 2];
 d12 = +HEAPF32[i13 + 20 >> 2];
 HEAP32[i5 + 0 >> 2] = HEAP32[i5 + 144 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i5 + 148 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i5 + 152 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i5 + 156 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i19 + 0 >> 2];
 HEAP32[i5 + 20 >> 2] = HEAP32[i19 + 4 >> 2];
 HEAP32[i5 + 24 >> 2] = HEAP32[i19 + 8 >> 2];
 HEAP32[i5 + 28 >> 2] = HEAP32[i19 + 12 >> 2];
 HEAP32[i5 + 32 >> 2] = HEAP32[i18 + 0 >> 2];
 HEAP32[i5 + 36 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i5 + 40 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i5 + 44 >> 2] = HEAP32[i18 + 12 >> 2];
 i18 = HEAP32[i1 + 136 >> 2] | 0;
 if ((i18 | 0) == (HEAP32[i1 + 140 >> 2] | 0) ? (i11 = (i18 | 0) == 0 ? 1 : i18 << 1, (i18 | 0) < (i11 | 0)) : 0) {
  if ((i11 | 0) == 0) i16 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i13 = _malloc((i11 * 284 | 3) + 16 | 0) | 0;
   if ((i13 | 0) == 0) i16 = 0; else {
    HEAP32[(i13 + 19 & -16) + -4 >> 2] = i13;
    i16 = i13 + 19 & -16;
   }
   i18 = HEAP32[i1 + 136 >> 2] | 0;
  }
  if ((i18 | 0) > 0) {
   i19 = 0;
   do {
    i13 = i16 + (i19 * 284 | 0) | 0;
    if ((i13 | 0) != 0) {
     i17 = HEAP32[i1 + 144 >> 2] | 0;
     i14 = i13 + 0 | 0;
     i13 = i17 + (i19 * 284 | 0) + 0 | 0;
     i15 = i14 + 92 | 0;
     do {
      HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
      i14 = i14 + 4 | 0;
      i13 = i13 + 4 | 0;
     } while ((i14 | 0) < (i15 | 0));
     i14 = i16 + (i19 * 284 | 0) + 92 | 0;
     i13 = i17 + (i19 * 284 | 0) + 92 | 0;
     HEAP32[i14 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i14 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i14 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i14 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     i14 = i16 + (i19 * 284 | 0) + 108 | 0;
     i13 = i17 + (i19 * 284 | 0) + 108 | 0;
     HEAP32[i14 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i14 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i14 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i14 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     i14 = i16 + (i19 * 284 | 0) + 124 | 0;
     i13 = i17 + (i19 * 284 | 0) + 124 | 0;
     HEAP32[i14 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i14 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i14 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i14 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     i14 = i16 + (i19 * 284 | 0) + 140 | 0;
     i13 = i17 + (i19 * 284 | 0) + 140 | 0;
     HEAP32[i14 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
     HEAP32[i14 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i14 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i14 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     i14 = i16 + (i19 * 284 | 0) + 156 | 0;
     i13 = i17 + (i19 * 284 | 0) + 156 | 0;
     i15 = i14 + 128 | 0;
     do {
      HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
      i14 = i14 + 4 | 0;
      i13 = i13 + 4 | 0;
     } while ((i14 | 0) < (i15 | 0));
    }
    i19 = i19 + 1 | 0;
   } while ((i19 | 0) != (i18 | 0));
  }
  i13 = HEAP32[i1 + 144 >> 2] | 0;
  if ((i13 | 0) != 0) {
   if ((HEAP8[i1 + 148 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i13 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 144 >> 2] = 0;
  }
  HEAP8[i1 + 148 >> 0] = 1;
  HEAP32[i1 + 144 >> 2] = i16;
  HEAP32[i1 + 140 >> 2] = i11;
  i18 = HEAP32[i1 + 136 >> 2] | 0;
 }
 i11 = HEAP32[i1 + 144 >> 2] | 0;
 i13 = i11 + (i18 * 284 | 0) | 0;
 if ((i13 | 0) == 0) {
  i19 = i18;
  i16 = i11;
  i18 = i19 + 1 | 0;
  HEAP32[i1 + 136 >> 2] = i18;
  i19 = i16 + (i19 * 284 | 0) | 0;
  i16 = i1 + 116 | 0;
  i18 = HEAP32[i16 >> 2] | 0;
  __ZN16btRaycastVehicle23updateWheelTransformsWSER11btWheelInfob(i18, i19, 0);
  i18 = HEAP32[i1 + 136 >> 2] | 0;
  i18 = i18 + -1 | 0;
  i16 = HEAP32[i16 >> 2] | 0;
  i17 = HEAP32[i1 + 144 >> 2] | 0;
  __ZN16btRaycastVehicle20updateWheelTransformEib(i16, i17, i18, 0);
  STACKTOP = i5;
  return i19 | 0;
 }
 i14 = i13 + 0 | 0;
 i13 = i5 + 48 | 0;
 i15 = i14 + 92 | 0;
 do {
  HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
  i14 = i14 + 4 | 0;
  i13 = i13 + 4 | 0;
 } while ((i14 | 0) < (i15 | 0));
 i14 = i11 + (i18 * 284 | 0) + 92 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i5 + 240 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i5 + 244 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i5 + 248 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i5 + 252 >> 2];
 i14 = i11 + (i18 * 284 | 0) + 108 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i5 + 224 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i5 + 228 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i5 + 232 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i5 + 236 >> 2];
 i14 = i11 + (i18 * 284 | 0) + 124 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i5 + 208 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i5 + 212 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i5 + 216 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i5 + 220 >> 2];
 i14 = i11 + (i18 * 284 | 0) + 140 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i5 + 192 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i5 + 196 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i5 + 200 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i5 + 204 >> 2];
 i11 = i11 + (i18 * 284 | 0) + 156 | 0;
 i14 = i11 + 0 | 0;
 i13 = i5 + 0 | 0;
 i15 = i14 + 48 | 0;
 do {
  HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
  i14 = i14 + 4 | 0;
  i13 = i13 + 4 | 0;
 } while ((i14 | 0) < (i15 | 0));
 HEAPF32[i11 + 48 >> 2] = d2;
 HEAPF32[i11 + 52 >> 2] = d6;
 HEAPF32[i11 + 56 >> 2] = d3;
 HEAPF32[i11 + 60 >> 2] = d7;
 HEAPF32[i11 + 64 >> 2] = d8;
 HEAPF32[i11 + 68 >> 2] = d9;
 HEAPF32[i11 + 72 >> 2] = d10;
 HEAPF32[i11 + 76 >> 2] = 0.0;
 HEAPF32[i11 + 80 >> 2] = 0.0;
 HEAPF32[i11 + 84 >> 2] = 0.0;
 HEAPF32[i11 + 88 >> 2] = .10000000149011612;
 HEAPF32[i11 + 92 >> 2] = d12;
 HEAPF32[i11 + 96 >> 2] = 0.0;
 HEAPF32[i11 + 100 >> 2] = 0.0;
 HEAP8[i11 + 104 >> 0] = i4 & 1;
 i14 = i11 + 105 | 0;
 i13 = i5 + 256 | 0;
 i15 = i14 + 23 | 0;
 do {
  HEAP8[i14 >> 0] = HEAP8[i13 >> 0] | 0;
  i14 = i14 + 1 | 0;
  i13 = i13 + 1 | 0;
 } while ((i14 | 0) < (i15 | 0));
 i19 = HEAP32[i1 + 136 >> 2] | 0;
 i16 = HEAP32[i1 + 144 >> 2] | 0;
 i18 = i19 + 1 | 0;
 HEAP32[i1 + 136 >> 2] = i18;
 i19 = i16 + (i19 * 284 | 0) | 0;
 i16 = i1 + 116 | 0;
 i18 = HEAP32[i16 >> 2] | 0;
 __ZN16btRaycastVehicle23updateWheelTransformsWSER11btWheelInfob(i18, i19, 0);
 i18 = HEAP32[i1 + 136 >> 2] | 0;
 i18 = i18 + -1 | 0;
 i16 = HEAP32[i16 >> 2] | 0;
 i17 = HEAP32[i1 + 144 >> 2] | 0;
 __ZN16btRaycastVehicle20updateWheelTransformEib(i16, i17, i18, 0);
 STACKTOP = i5;
 return i19 | 0;
}
function __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i3, i14, i13, i12, i15, d5) {
 i3 = i3 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 i15 = i15 | 0;
 d5 = +d5;
 var i1 = 0, i2 = 0, i4 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i16 = 0, i17 = 0, d18 = 0.0, i19 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(7568);
 HEAP32[i1 + 144 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i1 + 148 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i1 + 152 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i1 + 156 >> 2] = HEAP32[i13 + 12 >> 2];
 HEAP32[i1 + 160 >> 2] = HEAP32[i13 + 16 >> 2];
 HEAP32[i1 + 164 >> 2] = HEAP32[i13 + 20 >> 2];
 HEAP32[i1 + 168 >> 2] = HEAP32[i13 + 24 >> 2];
 HEAP32[i1 + 172 >> 2] = HEAP32[i13 + 28 >> 2];
 HEAP32[i1 + 176 >> 2] = HEAP32[i13 + 32 >> 2];
 HEAP32[i1 + 180 >> 2] = HEAP32[i13 + 36 >> 2];
 HEAP32[i1 + 184 >> 2] = HEAP32[i13 + 40 >> 2];
 HEAP32[i1 + 188 >> 2] = HEAP32[i13 + 44 >> 2];
 i2 = i1 + 192 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i13 + 48 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i13 + 52 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i13 + 56 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i13 + 60 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i12 + 0 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i12 + 12 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i12 + 16 >> 2];
 HEAP32[i1 + 100 >> 2] = HEAP32[i12 + 20 >> 2];
 HEAP32[i1 + 104 >> 2] = HEAP32[i12 + 24 >> 2];
 HEAP32[i1 + 108 >> 2] = HEAP32[i12 + 28 >> 2];
 HEAP32[i1 + 112 >> 2] = HEAP32[i12 + 32 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i12 + 36 >> 2];
 HEAP32[i1 + 120 >> 2] = HEAP32[i12 + 40 >> 2];
 HEAP32[i1 + 124 >> 2] = HEAP32[i12 + 44 >> 2];
 i4 = i1 + 128 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i12 + 48 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i12 + 52 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i12 + 56 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i12 + 60 >> 2];
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i1 + 144 | 0, i1 + 80 | 0, i1 + 212 | 0, i1 + 208 | 0);
 d18 = +HEAPF32[i1 + 208 >> 2];
 d6 = d18 * +HEAPF32[i1 + 216 >> 2];
 d11 = d18 * +HEAPF32[i1 + 220 >> 2];
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i1 + 212 >> 2] * d18;
 HEAPF32[i1 + 36 >> 2] = d6;
 HEAPF32[i1 + 40 >> 2] = d11;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAPF32[i1 + 212 >> 2] = 1.0;
 i19 = i1 + 216 | 0;
 HEAP32[i19 + 0 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 HEAP32[i19 + 12 >> 2] = 0;
 HEAPF32[i1 + 232 >> 2] = 1.0;
 i17 = i1 + 236 | 0;
 HEAP32[i17 + 0 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i17 + 12 >> 2] = 0;
 HEAPF32[i1 + 252 >> 2] = 1.0;
 i16 = i1 + 256 | 0;
 HEAP32[i16 + 0 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i16 + 16 >> 2] = 0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i1 + 144 | 0, i1);
 d11 = +HEAPF32[i1 >> 2];
 d6 = +HEAPF32[i1 + 4 >> 2];
 d18 = +HEAPF32[i1 + 8 >> 2];
 d10 = +HEAPF32[i1 + 12 >> 2];
 d8 = d11 * (2.0 / (d11 * d11 + d6 * d6 + d18 * d18 + d10 * d10));
 d7 = d6 * (2.0 / (d11 * d11 + d6 * d6 + d18 * d18 + d10 * d10));
 d9 = d18 * (2.0 / (d11 * d11 + d6 * d6 + d18 * d18 + d10 * d10));
 HEAPF32[i1 + 212 >> 2] = 1.0 - (d6 * d7 + d18 * d9);
 HEAPF32[i19 >> 2] = d11 * d7 - d10 * d9;
 HEAPF32[i1 + 220 >> 2] = d11 * d9 + d10 * d7;
 HEAPF32[i1 + 224 >> 2] = 0.0;
 HEAPF32[i1 + 228 >> 2] = d11 * d7 + d10 * d9;
 HEAPF32[i1 + 232 >> 2] = 1.0 - (d11 * d8 + d18 * d9);
 HEAPF32[i17 >> 2] = d6 * d9 - d10 * d8;
 HEAPF32[i1 + 240 >> 2] = 0.0;
 HEAPF32[i1 + 244 >> 2] = d11 * d9 - d10 * d7;
 HEAPF32[i1 + 248 >> 2] = d6 * d9 + d10 * d8;
 HEAPF32[i1 + 252 >> 2] = 1.0 - (d11 * d8 + d6 * d7);
 HEAPF32[i16 >> 2] = 0.0;
 __ZNK16btCollisionShape21calculateTemporalAabbERK11btTransformRK9btVector3S5_fRS3_S6_(i14, i1 + 212 | 0, i1 + 16 | 0, i1 + 32 | 0, i1 + 64 | 0, i1 + 48 | 0);
 HEAP32[i1 + 212 >> 2] = 7848;
 HEAP32[i1 + 248 >> 2] = HEAP32[i13 + 0 >> 2];
 HEAP32[i1 + 252 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i1 + 256 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i1 + 260 >> 2] = HEAP32[i13 + 12 >> 2];
 HEAP32[i1 + 264 >> 2] = HEAP32[i13 + 16 >> 2];
 HEAP32[i1 + 268 >> 2] = HEAP32[i13 + 20 >> 2];
 HEAP32[i1 + 272 >> 2] = HEAP32[i13 + 24 >> 2];
 HEAP32[i1 + 276 >> 2] = HEAP32[i13 + 28 >> 2];
 HEAP32[i1 + 280 >> 2] = HEAP32[i13 + 32 >> 2];
 HEAP32[i1 + 284 >> 2] = HEAP32[i13 + 36 >> 2];
 HEAP32[i1 + 288 >> 2] = HEAP32[i13 + 40 >> 2];
 HEAP32[i1 + 292 >> 2] = HEAP32[i13 + 44 >> 2];
 i16 = i1 + 296 | 0;
 HEAP32[i16 + 0 >> 2] = HEAP32[i13 + 48 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i13 + 52 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i13 + 56 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i13 + 60 >> 2];
 HEAP32[i1 + 312 >> 2] = HEAP32[i12 + 0 >> 2];
 HEAP32[i1 + 316 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i1 + 320 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i1 + 324 >> 2] = HEAP32[i12 + 12 >> 2];
 HEAP32[i1 + 328 >> 2] = HEAP32[i12 + 16 >> 2];
 HEAP32[i1 + 332 >> 2] = HEAP32[i12 + 20 >> 2];
 HEAP32[i1 + 336 >> 2] = HEAP32[i12 + 24 >> 2];
 HEAP32[i1 + 340 >> 2] = HEAP32[i12 + 28 >> 2];
 HEAP32[i1 + 344 >> 2] = HEAP32[i12 + 32 >> 2];
 HEAP32[i1 + 348 >> 2] = HEAP32[i12 + 36 >> 2];
 HEAP32[i1 + 352 >> 2] = HEAP32[i12 + 40 >> 2];
 HEAP32[i1 + 356 >> 2] = HEAP32[i12 + 44 >> 2];
 i13 = i1 + 360 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i12 + 48 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 52 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 56 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 60 >> 2];
 HEAP32[i1 + 392 >> 2] = i3;
 HEAP32[i1 + 396 >> 2] = i15;
 HEAPF32[i1 + 400 >> 2] = d5;
 HEAP32[i1 + 404 >> 2] = i14;
 d7 = +HEAPF32[i13 >> 2] - +HEAPF32[i16 >> 2];
 d5 = +HEAPF32[i1 + 364 >> 2] - +HEAPF32[i1 + 300 >> 2];
 d6 = +HEAPF32[i1 + 368 >> 2] - +HEAPF32[i1 + 304 >> 2];
 d8 = 1.0 / +Math_sqrt(+(d7 * d7 + d5 * d5 + d6 * d6));
 if (d7 * d8 == 0.0) d9 = 999999984306749400.0; else d9 = 1.0 / (d7 * d8);
 HEAPF32[i1 + 216 >> 2] = d9;
 if (d5 * d8 == 0.0) d10 = 999999984306749400.0; else d10 = 1.0 / (d5 * d8);
 HEAPF32[i1 + 220 >> 2] = d10;
 if (d6 * d8 == 0.0) d11 = 999999984306749400.0; else d11 = 1.0 / (d6 * d8);
 HEAPF32[i1 + 224 >> 2] = d11;
 HEAP32[i1 + 232 >> 2] = d9 < 0.0 & 1;
 HEAP32[i1 + 236 >> 2] = d10 < 0.0 & 1;
 HEAP32[i1 + 240 >> 2] = d11 < 0.0 & 1;
 HEAPF32[i1 + 244 >> 2] = d6 * d6 * d8 + (d7 * d7 * d8 + d5 * d5 * d8);
 i19 = HEAP32[i3 + 68 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 24 >> 2] & 7](i19, i2, i4, i1 + 212 | 0, i1 + 64 | 0, i1 + 48 | 0);
 i2 = HEAP32[5022] | 0;
 i19 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i19;
 if ((i19 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 + 212 | 0, 0) | 0;
  i19 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 216 >> 2] | 0) - (HEAP32[i19 + 4 >> 2] | 0) + (((HEAP32[i1 + 212 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN27btContinuousConvexCollision20computeClosestPointsERK11btTransformS2_R16btPointCollector(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((HEAP32[i1 + 16 >> 2] | 0) == 0) {
  i33 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = HEAP32[i1 + 20 >> 2] | 0;
  d10 = +HEAPF32[i3 >> 2];
  d13 = +HEAPF32[i3 + 4 >> 2];
  d17 = +HEAPF32[i3 + 8 >> 2];
  d7 = +HEAPF32[i3 + 16 >> 2];
  d14 = +HEAPF32[i3 + 20 >> 2];
  d6 = +HEAPF32[i3 + 24 >> 2];
  d9 = +HEAPF32[i3 + 32 >> 2];
  d15 = +HEAPF32[i3 + 36 >> 2];
  d8 = +HEAPF32[i3 + 40 >> 2];
  d28 = +HEAPF32[i3 + 48 >> 2];
  d27 = +HEAPF32[i3 + 52 >> 2];
  d26 = +HEAPF32[i3 + 56 >> 2];
  d32 = +HEAPF32[i4 >> 2];
  d31 = +HEAPF32[i4 + 16 >> 2];
  d21 = +HEAPF32[i4 + 32 >> 2];
  d30 = +HEAPF32[i4 + 4 >> 2];
  d29 = +HEAPF32[i4 + 20 >> 2];
  d19 = +HEAPF32[i4 + 36 >> 2];
  d18 = +HEAPF32[i4 + 8 >> 2];
  d22 = +HEAPF32[i4 + 24 >> 2];
  d20 = +HEAPF32[i4 + 40 >> 2];
  d25 = -+HEAPF32[i4 + 48 >> 2];
  d24 = -+HEAPF32[i4 + 52 >> 2];
  d12 = -+HEAPF32[i4 + 56 >> 2];
  i3 = HEAP32[(HEAP32[i33 >> 2] | 0) + 64 >> 2] | 0;
  d23 = -+HEAPF32[i1 + 48 >> 2];
  d16 = -+HEAPF32[i1 + 52 >> 2];
  d11 = -+HEAPF32[i1 + 56 >> 2];
  HEAPF32[i2 + 32 >> 2] = (d10 * d32 + d7 * d31 + d9 * d21) * d23 + (d10 * d30 + d7 * d29 + d9 * d19) * d16 + (d10 * d18 + d7 * d22 + d9 * d20) * d11;
  HEAPF32[i2 + 36 >> 2] = (d13 * d32 + d14 * d31 + d15 * d21) * d23 + (d13 * d30 + d14 * d29 + d15 * d19) * d16 + (d13 * d18 + d14 * d22 + d15 * d20) * d11;
  HEAPF32[i2 + 40 >> 2] = (d17 * d32 + d6 * d31 + d8 * d21) * d23 + (d17 * d30 + d6 * d29 + d8 * d19) * d16 + (d17 * d18 + d6 * d22 + d8 * d20) * d11;
  HEAPF32[i2 + 44 >> 2] = 0.0;
  FUNCTION_TABLE_viii[i3 & 127](i2 + 48 | 0, i33, i2 + 32 | 0);
  d11 = +HEAPF32[i2 + 48 >> 2];
  d16 = +HEAPF32[i2 + 52 >> 2];
  d23 = +HEAPF32[i2 + 56 >> 2];
  d21 = d28 * d32 + d27 * d31 + d26 * d21 + (d32 * d25 + d31 * d24 + d21 * d12) + ((d10 * d32 + d7 * d31 + d9 * d21) * d11 + (d13 * d32 + d14 * d31 + d15 * d21) * d16 + (d17 * d32 + d6 * d31 + d8 * d21) * d23);
  d19 = d28 * d30 + d27 * d29 + d26 * d19 + (d30 * d25 + d29 * d24 + d19 * d12) + ((d10 * d30 + d7 * d29 + d9 * d19) * d11 + (d13 * d30 + d14 * d29 + d15 * d19) * d16 + (d17 * d30 + d6 * d29 + d8 * d19) * d23);
  d23 = d28 * d18 + d27 * d22 + d26 * d20 + (d18 * d25 + d22 * d24 + d20 * d12) + ((d10 * d18 + d7 * d22 + d9 * d20) * d11 + (d13 * d18 + d14 * d22 + d15 * d20) * d16 + (d17 * d18 + d6 * d22 + d8 * d20) * d23);
  d20 = +HEAPF32[i1 + 48 >> 2];
  d8 = +HEAPF32[i1 + 52 >> 2];
  d22 = +HEAPF32[i1 + 56 >> 2];
  d6 = d22 * d23 + (d20 * d21 + d8 * d19) - +HEAPF32[i1 + 64 >> 2];
  d18 = +HEAPF32[i4 >> 2];
  d17 = +HEAPF32[i4 + 4 >> 2];
  d16 = +HEAPF32[i4 + 8 >> 2];
  d15 = +HEAPF32[i4 + 16 >> 2];
  d14 = +HEAPF32[i4 + 20 >> 2];
  d13 = +HEAPF32[i4 + 24 >> 2];
  d11 = +HEAPF32[i4 + 32 >> 2];
  d9 = +HEAPF32[i4 + 36 >> 2];
  d7 = +HEAPF32[i4 + 40 >> 2];
  d10 = d15 * (d21 - d20 * d6) + (d19 - d8 * d6) * d14 + (d23 - d22 * d6) * d13 + +HEAPF32[i4 + 52 >> 2];
  d12 = (d21 - d20 * d6) * d11 + (d19 - d8 * d6) * d9 + (d23 - d22 * d6) * d7 + +HEAPF32[i4 + 56 >> 2];
  HEAPF32[i2 + 16 >> 2] = d16 * (d23 - d22 * d6) + (d18 * (d21 - d20 * d6) + d17 * (d19 - d8 * d6)) + +HEAPF32[i4 + 48 >> 2];
  HEAPF32[i2 + 20 >> 2] = d10;
  HEAPF32[i2 + 24 >> 2] = d12;
  HEAPF32[i2 + 28 >> 2] = 0.0;
  d12 = +HEAPF32[i1 + 48 >> 2];
  d10 = +HEAPF32[i1 + 52 >> 2];
  d8 = +HEAPF32[i1 + 56 >> 2];
  HEAPF32[i2 >> 2] = d18 * d12 + d17 * d10 + d16 * d8;
  HEAPF32[i2 + 4 >> 2] = d12 * d15 + d10 * d14 + d8 * d13;
  HEAPF32[i2 + 8 >> 2] = d12 * d11 + d10 * d9 + d8 * d7;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 15](i5, i2, i2 + 16 | 0, d6);
  STACKTOP = i2;
  return;
 } else {
  i36 = HEAP32[i1 + 4 >> 2] | 0;
  HEAP8[i36 + 312 >> 0] = 0;
  HEAP32[i36 >> 2] = 0;
  HEAP8[i36 + 356 >> 0] = 1;
  HEAPF32[i36 + 292 >> 2] = 999999984306749400.0;
  HEAPF32[i36 + 296 >> 2] = 999999984306749400.0;
  HEAPF32[i36 + 300 >> 2] = 999999984306749400.0;
  HEAPF32[i36 + 304 >> 2] = 0.0;
  HEAP32[i36 + 336 >> 2] = 0;
  HEAP32[i36 + 340 >> 2] = 0;
  HEAP32[i36 + 344 >> 2] = 0;
  HEAP32[i36 + 348 >> 2] = 0;
  HEAP8[i36 + 352 >> 0] = 0;
  HEAP8[i36 + 332 >> 0] = HEAP8[i36 + 332 >> 0] & -16;
  i36 = HEAP32[i1 + 12 >> 2] | 0;
  i35 = HEAP32[i1 + 16 >> 2] | 0;
  i34 = HEAP32[i36 + 4 >> 2] | 0;
  i33 = HEAP32[i35 + 4 >> 2] | 0;
  d31 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i36 >> 2] | 0) + 48 >> 2] & 15](i36);
  i37 = HEAP32[i1 + 16 >> 2] | 0;
  d32 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i37 >> 2] | 0) + 48 >> 2] & 15](i37);
  i37 = HEAP32[i1 + 4 >> 2] | 0;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  HEAP32[i2 + 200 >> 2] = 13392;
  HEAPF32[i2 + 204 >> 2] = 0.0;
  HEAPF32[i2 + 208 >> 2] = 1.0;
  HEAPF32[i2 + 212 >> 2] = 0.0;
  HEAPF32[i2 + 216 >> 2] = 0.0;
  HEAP32[i2 + 220 >> 2] = i1;
  HEAP32[i2 + 224 >> 2] = i37;
  HEAP32[i2 + 228 >> 2] = i36;
  HEAP32[i2 + 232 >> 2] = i35;
  HEAP32[i2 + 236 >> 2] = i34;
  HEAP32[i2 + 240 >> 2] = i33;
  HEAPF32[i2 + 244 >> 2] = d31;
  HEAPF32[i2 + 248 >> 2] = d32;
  HEAP8[i2 + 252 >> 0] = 0;
  HEAP32[i2 + 260 >> 2] = -1;
  HEAP32[i2 + 272 >> 2] = 1;
  HEAP32[i2 + 276 >> 2] = 1;
  HEAPF32[i2 + 192 >> 2] = 999999984306749400.0;
  HEAP32[i2 + 64 >> 2] = HEAP32[i3 + 0 >> 2];
  HEAP32[i2 + 68 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i2 + 72 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i2 + 76 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i2 + 80 >> 2] = HEAP32[i3 + 16 >> 2];
  HEAP32[i2 + 84 >> 2] = HEAP32[i3 + 20 >> 2];
  HEAP32[i2 + 88 >> 2] = HEAP32[i3 + 24 >> 2];
  HEAP32[i2 + 92 >> 2] = HEAP32[i3 + 28 >> 2];
  HEAP32[i2 + 96 >> 2] = HEAP32[i3 + 32 >> 2];
  HEAP32[i2 + 100 >> 2] = HEAP32[i3 + 36 >> 2];
  HEAP32[i2 + 104 >> 2] = HEAP32[i3 + 40 >> 2];
  HEAP32[i2 + 108 >> 2] = HEAP32[i3 + 44 >> 2];
  HEAP32[i2 + 112 >> 2] = HEAP32[i3 + 48 >> 2];
  HEAP32[i2 + 116 >> 2] = HEAP32[i3 + 52 >> 2];
  HEAP32[i2 + 120 >> 2] = HEAP32[i3 + 56 >> 2];
  HEAP32[i2 + 124 >> 2] = HEAP32[i3 + 60 >> 2];
  HEAP32[i2 + 128 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i2 + 132 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i2 + 136 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i2 + 140 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i2 + 144 >> 2] = HEAP32[i4 + 16 >> 2];
  HEAP32[i2 + 148 >> 2] = HEAP32[i4 + 20 >> 2];
  HEAP32[i2 + 152 >> 2] = HEAP32[i4 + 24 >> 2];
  HEAP32[i2 + 156 >> 2] = HEAP32[i4 + 28 >> 2];
  HEAP32[i2 + 160 >> 2] = HEAP32[i4 + 32 >> 2];
  HEAP32[i2 + 164 >> 2] = HEAP32[i4 + 36 >> 2];
  HEAP32[i2 + 168 >> 2] = HEAP32[i4 + 40 >> 2];
  HEAP32[i2 + 172 >> 2] = HEAP32[i4 + 44 >> 2];
  HEAP32[i2 + 176 >> 2] = HEAP32[i4 + 48 >> 2];
  HEAP32[i2 + 180 >> 2] = HEAP32[i4 + 52 >> 2];
  HEAP32[i2 + 184 >> 2] = HEAP32[i4 + 56 >> 2];
  HEAP32[i2 + 188 >> 2] = HEAP32[i4 + 60 >> 2];
  __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i2 + 200 | 0, i2 + 64 | 0, i5, 0, 0);
  STACKTOP = i2;
  return;
 }
}
function __ZNK23btStridingMeshInterface9serializeEPvP12btSerializer(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, i19 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0;
 HEAP32[i1 + 20 >> 2] = i7;
 HEAP32[i1 >> 2] = 0;
 if ((i7 | 0) == 0) {
  i17 = i1 + 4 | 0;
  i16 = i3 + 4 | 0;
  d18 = +HEAPF32[i16 >> 2];
  HEAPF32[i17 >> 2] = d18;
  i17 = i3 + 8 | 0;
  d18 = +HEAPF32[i17 >> 2];
  i17 = i1 + 8 | 0;
  HEAPF32[i17 >> 2] = d18;
  i17 = i3 + 12 | 0;
  d18 = +HEAPF32[i17 >> 2];
  i17 = i1 + 12 | 0;
  HEAPF32[i17 >> 2] = d18;
  i17 = i3 + 16 | 0;
  d18 = +HEAPF32[i17 >> 2];
  i17 = i1 + 16 | 0;
  HEAPF32[i17 >> 2] = d18;
  STACKTOP = i2;
  return 19824;
 }
 i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 31](i4, 32, i7) | 0;
 i10 = HEAP32[i7 + 8 >> 2] | 0;
 i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, i10) | 0;
 HEAP32[i1 >> 2] = i8;
 i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0;
 if ((i8 | 0) > 0) {
  i9 = 0;
  while (1) {
   FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 3](i3, i2 + 28 | 0, i2 + 4 | 0, i2 + 16 | 0, i2 + 8 | 0, i2 + 24 | 0, i2 + 20 | 0, i2, i2 + 12 | 0, i9);
   HEAP32[i10 + 24 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i10 + 28 >> 2] = HEAP32[i2 + 4 >> 2];
   i13 = i10 + 8 | 0;
   i12 = i10 + 12 | 0;
   i14 = i10 + 16 | 0;
   i11 = i10 + 4 | 0;
   HEAP32[i10 + 0 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   HEAP32[i10 + 12 >> 2] = 0;
   HEAP32[i10 + 16 >> 2] = 0;
   HEAP32[i10 + 20 >> 2] = 0;
   i15 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i15 | 0) == 2) {
    i12 = HEAP32[i2 >> 2] | 0;
    if ((i12 | 0) != 0) {
     i12 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 31](i4, 4, i12 * 3 | 0) | 0;
     i14 = HEAP32[i12 + 8 >> 2] | 0;
     i17 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, i14) | 0;
     HEAP32[i13 >> 2] = i17;
     if ((HEAP32[i2 >> 2] | 0) > 0) {
      i15 = HEAP32[i2 + 24 >> 2] | 0;
      i13 = 0;
      do {
       i16 = Math_imul(HEAP32[i2 + 20 >> 2] | 0, i13) | 0;
       i17 = i13 * 3 | 0;
       HEAP32[i14 + (i17 << 2) >> 2] = HEAP32[i15 + i16 >> 2];
       HEAP32[i14 + (i17 + 1 << 2) >> 2] = HEAP32[i15 + (i16 + 4) >> 2];
       HEAP32[i14 + (i17 + 2 << 2) >> 2] = HEAP32[i15 + (i16 + 8) >> 2];
       i13 = i13 + 1 | 0;
      } while ((i13 | 0) < (HEAP32[i2 >> 2] | 0));
     }
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 31](i4, i12, 19688, 1497453121, HEAP32[i12 + 8 >> 2] | 0);
    }
   } else if ((i15 | 0) == 3) {
    i13 = HEAP32[i2 >> 2] | 0;
    if ((i13 | 0) != 0) {
     i14 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 31](i4, 8, i13) | 0;
     i13 = HEAP32[i14 + 8 >> 2] | 0;
     i17 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, i13) | 0;
     HEAP32[i12 >> 2] = i17;
     i12 = HEAP32[i2 >> 2] | 0;
     if ((i12 | 0) > 0) {
      i16 = HEAP32[i2 + 24 >> 2] | 0;
      i15 = HEAP32[i2 + 20 >> 2] | 0;
      i17 = 0;
      do {
       i19 = Math_imul(i15, i17) | 0;
       HEAP16[i13 + (i17 << 3) >> 1] = HEAP16[i16 + i19 >> 1] | 0;
       HEAP16[i13 + (i17 << 3) + 2 >> 1] = HEAP16[i16 + (i19 + 2) >> 1] | 0;
       HEAP16[i13 + (i17 << 3) + 4 >> 1] = HEAP16[i16 + (i19 + 4) >> 1] | 0;
       i17 = i17 + 1 | 0;
      } while ((i17 | 0) < (i12 | 0));
     }
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 31](i4, i14, 19704, 1497453121, HEAP32[i14 + 8 >> 2] | 0);
    }
   } else if ((i15 | 0) == 5 ? (i5 = HEAP32[i2 >> 2] | 0, (i5 | 0) != 0) : 0) {
    i13 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 31](i4, 4, i5) | 0;
    i12 = HEAP32[i13 + 8 >> 2] | 0;
    i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, i12) | 0;
    HEAP32[i14 >> 2] = i19;
    if ((HEAP32[i2 >> 2] | 0) > 0) {
     i14 = 0;
     do {
      i17 = HEAP32[i2 + 24 >> 2] | 0;
      i19 = Math_imul(HEAP32[i2 + 20 >> 2] | 0, i14) | 0;
      HEAP8[i12 + (i14 << 2) >> 0] = HEAP8[i17 + i19 >> 0] | 0;
      HEAP8[i12 + (i14 << 2) + 1 >> 0] = HEAP8[i17 + (i19 + 1) >> 0] | 0;
      HEAP8[i12 + (i14 << 2) + 2 >> 0] = HEAP8[i17 + (i19 + 2) >> 0] | 0;
      i14 = i14 + 1 | 0;
     } while ((i14 | 0) < (HEAP32[i2 >> 2] | 0));
    }
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 31](i4, i13, 19736, 1497453121, HEAP32[i13 + 8 >> 2] | 0);
   }
   i12 = HEAP32[i2 + 16 >> 2] | 0;
   if ((i12 | 0) == 0) {
    i11 = HEAP32[i2 + 4 >> 2] | 0;
    if ((i11 | 0) != 0) {
     i16 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 31](i4, 16, i11) | 0;
     i15 = HEAP32[i16 + 8 >> 2] | 0;
     i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, i15) | 0;
     HEAP32[i10 >> 2] = i14;
     i14 = HEAP32[i2 + 4 >> 2] | 0;
     if ((i14 | 0) > 0) {
      i11 = HEAP32[i2 + 28 >> 2] | 0;
      i12 = HEAP32[i2 + 8 >> 2] | 0;
      i13 = 0;
      do {
       i19 = Math_imul(i12, i13) | 0;
       HEAPF32[i15 + (i13 << 4) >> 2] = +HEAPF32[i11 + i19 >> 2];
       HEAPF32[i15 + (i13 << 4) + 4 >> 2] = +HEAPF32[i11 + (i19 + 4) >> 2];
       HEAPF32[i15 + (i13 << 4) + 8 >> 2] = +HEAPF32[i11 + (i19 + 8) >> 2];
       i13 = i13 + 1 | 0;
      } while ((i13 | 0) < (i14 | 0));
     }
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 31](i4, i16, 19760, 1497453121, HEAP32[i16 + 8 >> 2] | 0);
    }
   } else if ((i12 | 0) == 1 ? (i6 = HEAP32[i2 + 4 >> 2] | 0, (i6 | 0) != 0) : 0) {
    i12 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 31](i4, 32, i6) | 0;
    i13 = HEAP32[i12 + 8 >> 2] | 0;
    i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, i13) | 0;
    HEAP32[i11 >> 2] = i14;
    i14 = HEAP32[i2 + 4 >> 2] | 0;
    if ((i14 | 0) > 0) {
     i11 = HEAP32[i2 + 28 >> 2] | 0;
     i15 = HEAP32[i2 + 8 >> 2] | 0;
     i16 = 0;
     do {
      i19 = Math_imul(i15, i16) | 0;
      HEAPF64[i13 + (i16 << 5) >> 3] = +HEAPF64[i11 + i19 >> 3];
      HEAPF64[i13 + (i16 << 5) + 8 >> 3] = +HEAPF64[i11 + (i19 + 8) >> 3];
      HEAPF64[i13 + (i16 << 5) + 16 >> 3] = +HEAPF64[i11 + (i19 + 16) >> 3];
      i16 = i16 + 1 | 0;
     } while ((i16 | 0) < (i14 | 0));
    }
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 31](i4, i12, 19784, 1497453121, HEAP32[i12 + 8 >> 2] | 0);
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3, i9);
   i9 = i9 + 1 | 0;
   if ((i9 | 0) == (i8 | 0)) {
    i5 = i4;
    break;
   } else i10 = i10 + 32 | 0;
  }
 } else i5 = i4;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 31](i4, i7, 19808, 1497453121, HEAP32[i7 + 8 >> 2] | 0);
 i19 = i1 + 4 | 0;
 i17 = i3 + 4 | 0;
 d18 = +HEAPF32[i17 >> 2];
 HEAPF32[i19 >> 2] = d18;
 i19 = i3 + 8 | 0;
 d18 = +HEAPF32[i19 >> 2];
 i19 = i1 + 8 | 0;
 HEAPF32[i19 >> 2] = d18;
 i19 = i3 + 12 | 0;
 d18 = +HEAPF32[i19 >> 2];
 i19 = i1 + 12 | 0;
 HEAPF32[i19 >> 2] = d18;
 i19 = i3 + 16 | 0;
 d18 = +HEAPF32[i19 >> 2];
 i19 = i1 + 16 | 0;
 HEAPF32[i19 >> 2] = d18;
 STACKTOP = i2;
 return 19824;
}
function __ZN35btSequentialImpulseConstraintSolver28addRollingFrictionConstraintERK9btVector3iiiR15btManifoldPointS2_S2_P17btCollisionObjectS6_fff(i6, i16, i4, i1, i7, i23) {
 i6 = i6 | 0;
 i16 = i16 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i23 = i23 | 0;
 var i2 = 0, i3 = 0, i5 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i24 = 0, i25 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i6 + 88 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i6 + 92 >> 2] | 0) ? (i5 = (i2 | 0) == 0 ? 1 : i2 << 1, (i2 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i15 = 0;
   i24 = i2;
  } else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i15 = _malloc((i5 * 152 | 3) + 16 | 0) | 0;
   if ((i15 | 0) == 0) i15 = 0; else {
    HEAP32[(i15 + 19 & -16) + -4 >> 2] = i15;
    i15 = i15 + 19 & -16;
   }
   i24 = HEAP32[i6 + 88 >> 2] | 0;
  }
  if ((i24 | 0) > 0) {
   i25 = 0;
   do {
    _memcpy(i15 + (i25 * 152 | 0) | 0, (HEAP32[i6 + 96 >> 2] | 0) + (i25 * 152 | 0) | 0, 152) | 0;
    i25 = i25 + 1 | 0;
   } while ((i25 | 0) != (i24 | 0));
  }
  i24 = HEAP32[i6 + 96 >> 2] | 0;
  if ((i24 | 0) != 0) {
   if ((HEAP8[i6 + 100 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i24 + -4 >> 2] | 0);
   }
   HEAP32[i6 + 96 >> 2] = 0;
  }
  HEAP8[i6 + 100 >> 0] = 1;
  HEAP32[i6 + 96 >> 2] = i15;
  HEAP32[i6 + 92 >> 2] = i5;
  i5 = HEAP32[i6 + 88 >> 2] | 0;
 } else i5 = i2;
 HEAP32[i6 + 88 >> 2] = i5 + 1;
 i5 = HEAP32[i6 + 96 >> 2] | 0;
 HEAP32[i5 + (i2 * 152 | 0) + 140 >> 2] = i7;
 HEAP32[i5 + (i2 * 152 | 0) + 16 >> 2] = 0;
 HEAP32[i5 + (i2 * 152 | 0) + 20 >> 2] = 0;
 HEAP32[i5 + (i2 * 152 | 0) + 24 >> 2] = 0;
 HEAP32[i5 + (i2 * 152 | 0) + 28 >> 2] = 0;
 HEAPF32[i5 + (i2 * 152 | 0) + 48 >> 2] = -0.0;
 HEAPF32[i5 + (i2 * 152 | 0) + 52 >> 2] = -0.0;
 HEAPF32[i5 + (i2 * 152 | 0) + 56 >> 2] = -0.0;
 HEAPF32[i5 + (i2 * 152 | 0) + 60 >> 2] = 0.0;
 i6 = HEAP32[i6 + 16 >> 2] | 0;
 i15 = HEAP32[i6 + (i4 * 244 | 0) + 240 >> 2] | 0;
 i7 = HEAP32[i6 + (i1 * 244 | 0) + 240 >> 2] | 0;
 HEAP32[i5 + (i2 * 152 | 0) + 144 >> 2] = i4;
 HEAP32[i5 + (i2 * 152 | 0) + 148 >> 2] = i1;
 d8 = +HEAPF32[i23 + 88 >> 2];
 HEAPF32[i5 + (i2 * 152 | 0) + 104 >> 2] = d8;
 HEAP32[i5 + (i2 * 152 | 0) + 132 >> 2] = 0;
 HEAPF32[i5 + (i2 * 152 | 0) + 100 >> 2] = 0.0;
 HEAPF32[i5 + (i2 * 152 | 0) + 96 >> 2] = 0.0;
 d9 = -+HEAPF32[i16 >> 2];
 d10 = -+HEAPF32[i16 + 4 >> 2];
 d11 = -+HEAPF32[i16 + 8 >> 2];
 HEAPF32[i5 + (i2 * 152 | 0) >> 2] = d9;
 HEAPF32[i5 + (i2 * 152 | 0) + 4 >> 2] = d10;
 HEAPF32[i5 + (i2 * 152 | 0) + 8 >> 2] = d11;
 HEAPF32[i5 + (i2 * 152 | 0) + 12 >> 2] = 0.0;
 if ((i15 | 0) != 0) {
  d13 = (+HEAPF32[i15 + 264 >> 2] * d9 + +HEAPF32[i15 + 268 >> 2] * d10 + +HEAPF32[i15 + 272 >> 2] * d11) * +HEAPF32[i15 + 544 >> 2];
  d12 = (+HEAPF32[i15 + 280 >> 2] * d9 + +HEAPF32[i15 + 284 >> 2] * d10 + +HEAPF32[i15 + 288 >> 2] * d11) * +HEAPF32[i15 + 548 >> 2];
  d14 = (+HEAPF32[i15 + 296 >> 2] * d9 + +HEAPF32[i15 + 300 >> 2] * d10 + +HEAPF32[i15 + 304 >> 2] * d11) * +HEAPF32[i15 + 552 >> 2];
 } else {
  d13 = 0.0;
  d12 = 0.0;
  d14 = 0.0;
 }
 HEAPF32[i5 + (i2 * 152 | 0) + 64 >> 2] = d13;
 HEAPF32[i5 + (i2 * 152 | 0) + 68 >> 2] = d12;
 HEAPF32[i5 + (i2 * 152 | 0) + 72 >> 2] = d14;
 HEAPF32[i5 + (i2 * 152 | 0) + 76 >> 2] = 0.0;
 d14 = +HEAPF32[i16 >> 2];
 d13 = +HEAPF32[i16 + 4 >> 2];
 d12 = +HEAPF32[i16 + 8 >> 2];
 d22 = +HEAPF32[i16 + 12 >> 2];
 HEAPF32[i5 + (i2 * 152 | 0) + 32 >> 2] = d14;
 HEAPF32[i5 + (i2 * 152 | 0) + 36 >> 2] = d13;
 HEAPF32[i5 + (i2 * 152 | 0) + 40 >> 2] = d12;
 HEAPF32[i5 + (i2 * 152 | 0) + 44 >> 2] = d22;
 if ((i7 | 0) != 0) {
  d18 = (d14 * +HEAPF32[i7 + 264 >> 2] + d13 * +HEAPF32[i7 + 268 >> 2] + d12 * +HEAPF32[i7 + 272 >> 2]) * +HEAPF32[i7 + 544 >> 2];
  d17 = (d14 * +HEAPF32[i7 + 280 >> 2] + d13 * +HEAPF32[i7 + 284 >> 2] + d12 * +HEAPF32[i7 + 288 >> 2]) * +HEAPF32[i7 + 548 >> 2];
  d19 = (d14 * +HEAPF32[i7 + 296 >> 2] + d13 * +HEAPF32[i7 + 300 >> 2] + d12 * +HEAPF32[i7 + 304 >> 2]) * +HEAPF32[i7 + 552 >> 2];
 } else {
  d18 = 0.0;
  d17 = 0.0;
  d19 = 0.0;
 }
 HEAPF32[i5 + (i2 * 152 | 0) + 80 >> 2] = d18;
 HEAPF32[i5 + (i2 * 152 | 0) + 84 >> 2] = d17;
 HEAPF32[i5 + (i2 * 152 | 0) + 88 >> 2] = d19;
 HEAPF32[i5 + (i2 * 152 | 0) + 92 >> 2] = 0.0;
 if ((i15 | 0) != 0) {
  d22 = +HEAPF32[i15 + 264 >> 2] * d9 + +HEAPF32[i15 + 268 >> 2] * d10 + +HEAPF32[i15 + 272 >> 2] * d11;
  d21 = +HEAPF32[i15 + 280 >> 2] * d9 + +HEAPF32[i15 + 284 >> 2] * d10 + +HEAPF32[i15 + 288 >> 2] * d11;
  d18 = +HEAPF32[i15 + 296 >> 2] * d9 + +HEAPF32[i15 + 300 >> 2] * d10 + +HEAPF32[i15 + 304 >> 2] * d11;
 } else {
  d22 = 0.0;
  d21 = 0.0;
  d18 = 0.0;
 }
 if ((i7 | 0) != 0) {
  d17 = +HEAPF32[i7 + 264 >> 2] * d14 + +HEAPF32[i7 + 268 >> 2] * d13 + +HEAPF32[i7 + 272 >> 2] * d12;
  d20 = d14 * +HEAPF32[i7 + 280 >> 2] + d13 * +HEAPF32[i7 + 284 >> 2] + d12 * +HEAPF32[i7 + 288 >> 2];
  d19 = d14 * +HEAPF32[i7 + 296 >> 2] + d13 * +HEAPF32[i7 + 300 >> 2] + d12 * +HEAPF32[i7 + 304 >> 2];
 } else {
  d17 = 0.0;
  d20 = 0.0;
  d19 = 0.0;
 }
 d17 = 1.0 / (d22 * d9 + d21 * d10 + d18 * d11 + 0.0 + (d17 * d14 + d20 * d13 + d19 * d12));
 HEAPF32[i5 + (i2 * 152 | 0) + 108 >> 2] = d17;
 if ((i15 | 0) != 0) {
  d20 = +HEAPF32[i6 + (i4 * 244 | 0) + 192 >> 2];
  d19 = +HEAPF32[i6 + (i4 * 244 | 0) + 196 >> 2];
  d18 = +HEAPF32[i6 + (i4 * 244 | 0) + 200 >> 2];
  d21 = (+HEAPF32[i6 + (i4 * 244 | 0) + 176 >> 2] + +HEAPF32[i6 + (i4 * 244 | 0) + 208 >> 2]) * 0.0 + (+HEAPF32[i6 + (i4 * 244 | 0) + 180 >> 2] + +HEAPF32[i6 + (i4 * 244 | 0) + 212 >> 2]) * 0.0 + (+HEAPF32[i6 + (i4 * 244 | 0) + 184 >> 2] + +HEAPF32[i6 + (i4 * 244 | 0) + 216 >> 2]) * 0.0;
 } else {
  d20 = 0.0;
  d19 = 0.0;
  d18 = 0.0;
  d21 = 0.0;
 }
 d9 = d21 + (d20 * d9 + d19 * d10 + d18 * d11);
 if ((i7 | 0) == 0) {
  d19 = 0.0;
  d20 = 0.0;
  d22 = 0.0;
  d21 = -0.0;
  d19 = d19 * d14;
  d20 = d20 * d13;
  d20 = d19 + d20;
  d22 = d22 * d12;
  d22 = d20 + d22;
  d22 = d21 + d22;
  d22 = d9 + d22;
  d22 = 0.0 - d22;
  d22 = d17 * d22;
  i25 = i5 + (i2 * 152 | 0) + 112 | 0;
  HEAPF32[i25 >> 2] = d22;
  i25 = i5 + (i2 * 152 | 0) + 116 | 0;
  HEAPF32[i25 >> 2] = 0.0;
  d22 = -d8;
  i25 = i5 + (i2 * 152 | 0) + 120 | 0;
  HEAPF32[i25 >> 2] = d22;
  i25 = i5 + (i2 * 152 | 0) + 124 | 0;
  HEAPF32[i25 >> 2] = d8;
  STACKTOP = i3;
  return;
 }
 d19 = +HEAPF32[i6 + (i1 * 244 | 0) + 192 >> 2];
 d20 = +HEAPF32[i6 + (i1 * 244 | 0) + 196 >> 2];
 d22 = +HEAPF32[i6 + (i1 * 244 | 0) + 200 >> 2];
 d21 = (+HEAPF32[i6 + (i1 * 244 | 0) + 176 >> 2] + +HEAPF32[i6 + (i1 * 244 | 0) + 208 >> 2]) * -0.0 + (+HEAPF32[i6 + (i1 * 244 | 0) + 180 >> 2] + +HEAPF32[i6 + (i1 * 244 | 0) + 212 >> 2]) * -0.0 + (+HEAPF32[i6 + (i1 * 244 | 0) + 184 >> 2] + +HEAPF32[i6 + (i1 * 244 | 0) + 216 >> 2]) * -0.0;
 d19 = d19 * d14;
 d20 = d20 * d13;
 d20 = d19 + d20;
 d22 = d22 * d12;
 d22 = d20 + d22;
 d22 = d21 + d22;
 d22 = d9 + d22;
 d22 = 0.0 - d22;
 d22 = d17 * d22;
 i25 = i5 + (i2 * 152 | 0) + 112 | 0;
 HEAPF32[i25 >> 2] = d22;
 i25 = i5 + (i2 * 152 | 0) + 116 | 0;
 HEAPF32[i25 >> 2] = 0.0;
 d22 = -d8;
 i25 = i5 + (i2 * 152 | 0) + 120 | 0;
 HEAPF32[i25 >> 2] = d22;
 i25 = i5 + (i2 * 152 | 0) + 124 | 0;
 HEAPF32[i25 >> 2] = d8;
 STACKTOP = i3;
 return;
}
function __ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i8, i11, i7, i10, i9, i2) {
 i8 = i8 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, i17 = 0, d18 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i17 = HEAP32[i8 + 4 >> 2] | 0;
 HEAP8[i17 + 312 >> 0] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP8[i17 + 356 >> 0] = 1;
 HEAPF32[i17 + 292 >> 2] = 999999984306749400.0;
 HEAPF32[i17 + 296 >> 2] = 999999984306749400.0;
 HEAPF32[i17 + 300 >> 2] = 999999984306749400.0;
 HEAPF32[i17 + 304 >> 2] = 0.0;
 HEAP32[i17 + 336 >> 2] = 0;
 HEAP32[i17 + 340 >> 2] = 0;
 HEAP32[i17 + 344 >> 2] = 0;
 HEAP32[i17 + 348 >> 2] = 0;
 HEAP8[i17 + 352 >> 0] = 0;
 HEAP8[i17 + 332 >> 0] = HEAP8[i17 + 332 >> 0] & -16;
 d5 = +HEAPF32[i7 + 48 >> 2] - +HEAPF32[i11 + 48 >> 2] - (+HEAPF32[i9 + 48 >> 2] - +HEAPF32[i10 + 48 >> 2]);
 d4 = +HEAPF32[i7 + 52 >> 2] - +HEAPF32[i11 + 52 >> 2] - (+HEAPF32[i9 + 52 >> 2] - +HEAPF32[i10 + 52 >> 2]);
 d3 = +HEAPF32[i7 + 56 >> 2] - +HEAPF32[i11 + 56 >> 2] - (+HEAPF32[i9 + 56 >> 2] - +HEAPF32[i10 + 56 >> 2]);
 HEAP32[i1 + 216 >> 2] = 10224;
 HEAPF32[i1 + 252 >> 2] = 999999984306749400.0;
 HEAP8[i1 + 256 >> 0] = 0;
 i17 = HEAP32[i8 + 8 >> 2] | 0;
 i16 = HEAP32[i8 + 12 >> 2] | 0;
 i8 = HEAP32[i8 + 4 >> 2] | 0;
 HEAP32[i1 + 136 >> 2] = 13392;
 HEAPF32[i1 + 140 >> 2] = 0.0;
 HEAPF32[i1 + 144 >> 2] = 1.0;
 HEAPF32[i1 + 148 >> 2] = 0.0;
 HEAPF32[i1 + 152 >> 2] = 0.0;
 HEAP32[i1 + 156 >> 2] = 0;
 HEAP32[i1 + 160 >> 2] = i8;
 HEAP32[i1 + 164 >> 2] = i17;
 HEAP32[i1 + 168 >> 2] = i16;
 HEAP32[i1 + 172 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i1 + 176 >> 2] = HEAP32[i16 + 4 >> 2];
 d15 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i17 >> 2] | 0) + 48 >> 2] & 15](i17);
 HEAPF32[i1 + 180 >> 2] = d15;
 d15 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i16 >> 2] | 0) + 48 >> 2] & 15](i16);
 HEAPF32[i1 + 184 >> 2] = d15;
 HEAP8[i1 + 188 >> 0] = 0;
 HEAP32[i1 + 196 >> 2] = -1;
 HEAP32[i1 + 208 >> 2] = 1;
 HEAP32[i1 + 212 >> 2] = 1;
 HEAPF32[i1 + 128 >> 2] = 999999984306749400.0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i11 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i11 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i11 + 28 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i11 + 32 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i11 + 36 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i11 + 40 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i11 + 44 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i11 + 48 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i11 + 52 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i11 + 56 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i11 + 60 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i10 + 16 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i10 + 20 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i10 + 24 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i10 + 28 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i10 + 32 >> 2];
 HEAP32[i1 + 100 >> 2] = HEAP32[i10 + 36 >> 2];
 HEAP32[i1 + 104 >> 2] = HEAP32[i10 + 40 >> 2];
 HEAP32[i1 + 108 >> 2] = HEAP32[i10 + 44 >> 2];
 HEAP32[i1 + 112 >> 2] = HEAP32[i10 + 48 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i10 + 52 >> 2];
 HEAP32[i1 + 120 >> 2] = HEAP32[i10 + 56 >> 2];
 HEAP32[i1 + 124 >> 2] = HEAP32[i10 + 60 >> 2];
 __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 136 | 0, i1, i1 + 216 | 0, 0, 0);
 i16 = (HEAP8[i1 + 256 >> 0] | 0) == 0;
 i8 = i1 + 236 | 0;
 HEAP32[i1 + 264 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i1 + 268 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i1 + 272 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i1 + 276 >> 2] = HEAP32[i8 + 12 >> 2];
 if (i16) {
  i17 = 0;
  STACKTOP = i1;
  return i17 | 0;
 }
 d13 = +HEAPF32[i1 + 252 >> 2];
 d6 = +HEAPF32[i1 + 220 >> 2];
 d12 = +HEAPF32[i1 + 224 >> 2];
 d14 = +HEAPF32[i1 + 228 >> 2];
 d15 = +HEAPF32[i1 + 232 >> 2];
 do if (d13 > .0010000000474974513) {
  d15 = d13;
  d13 = 0.0;
  i16 = 1;
  while (1) {
   if ((i16 | 0) > 32) {
    i2 = 0;
    i7 = 13;
    break;
   }
   d18 = d13;
   d13 = d13 - d15 / (d3 * d14 + (d4 * d12 + d5 * d6));
   if (!(!(d13 < 0.0) & !(d13 > 1.0) & !(d13 <= d18))) {
    i2 = 0;
    i7 = 13;
    break;
   }
   FUNCTION_TABLE_vid[HEAP32[HEAP32[i2 >> 2] >> 2] & 31](i2, d13);
   d18 = 1.0 - d13;
   HEAPF32[i1 + 48 >> 2] = d18 * +HEAPF32[i11 + 48 >> 2] + d13 * +HEAPF32[i7 + 48 >> 2];
   HEAPF32[i1 + 52 >> 2] = d18 * +HEAPF32[i11 + 52 >> 2] + d13 * +HEAPF32[i7 + 52 >> 2];
   HEAPF32[i1 + 56 >> 2] = d18 * +HEAPF32[i11 + 56 >> 2] + d13 * +HEAPF32[i7 + 56 >> 2];
   HEAPF32[i1 + 112 >> 2] = d18 * +HEAPF32[i10 + 48 >> 2] + d13 * +HEAPF32[i9 + 48 >> 2];
   HEAPF32[i1 + 116 >> 2] = d18 * +HEAPF32[i10 + 52 >> 2] + d13 * +HEAPF32[i9 + 52 >> 2];
   HEAPF32[i1 + 120 >> 2] = d18 * +HEAPF32[i10 + 56 >> 2] + d13 * +HEAPF32[i9 + 56 >> 2];
   __ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 136 | 0, i1, i1 + 216 | 0, 0, 0);
   if ((HEAP8[i1 + 256 >> 0] | 0) == 0) {
    i2 = 0;
    i7 = 13;
    break;
   }
   d15 = +HEAPF32[i1 + 252 >> 2];
   if (d15 < 0.0) {
    i7 = 8;
    break;
   }
   HEAP32[i1 + 264 >> 2] = HEAP32[i8 + 0 >> 2];
   HEAP32[i1 + 268 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i1 + 272 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i1 + 276 >> 2] = HEAP32[i8 + 12 >> 2];
   d6 = +HEAPF32[i1 + 220 >> 2];
   d12 = +HEAPF32[i1 + 224 >> 2];
   d14 = +HEAPF32[i1 + 228 >> 2];
   if (!(d15 > .0010000000474974513)) {
    i7 = 10;
    break;
   } else i16 = i16 + 1 | 0;
  }
  if ((i7 | 0) == 8) {
   HEAPF32[i2 + 164 >> 2] = d13;
   d14 = +HEAPF32[i1 + 224 >> 2];
   d15 = +HEAPF32[i1 + 228 >> 2];
   d18 = +HEAPF32[i1 + 232 >> 2];
   HEAPF32[i2 + 132 >> 2] = +HEAPF32[i1 + 220 >> 2];
   HEAPF32[i2 + 136 >> 2] = d14;
   HEAPF32[i2 + 140 >> 2] = d15;
   HEAPF32[i2 + 144 >> 2] = d18;
   HEAP32[i2 + 148 >> 2] = HEAP32[i8 + 0 >> 2];
   HEAP32[i2 + 152 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i2 + 156 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i2 + 160 >> 2] = HEAP32[i8 + 12 >> 2];
   i17 = 1;
   STACKTOP = i1;
   return i17 | 0;
  } else if ((i7 | 0) == 10) {
   d15 = +HEAPF32[i1 + 232 >> 2];
   break;
  } else if ((i7 | 0) == 13) {
   STACKTOP = i1;
   return i2 | 0;
  }
 } else d13 = 0.0; while (0);
 if (d3 * d14 + (d4 * d12 + d5 * d6) >= -+HEAPF32[i2 + 172 >> 2]) {
  i17 = 0;
  STACKTOP = i1;
  return i17 | 0;
 }
 HEAPF32[i2 + 164 >> 2] = d13;
 HEAPF32[i2 + 132 >> 2] = d6;
 HEAPF32[i2 + 136 >> 2] = d12;
 HEAPF32[i2 + 140 >> 2] = d14;
 HEAPF32[i2 + 144 >> 2] = d15;
 HEAP32[i2 + 148 >> 2] = HEAP32[i1 + 264 >> 2];
 HEAP32[i2 + 152 >> 2] = HEAP32[i1 + 268 >> 2];
 HEAP32[i2 + 156 >> 2] = HEAP32[i1 + 272 >> 2];
 HEAP32[i2 + 160 >> 2] = HEAP32[i1 + 276 >> 2];
 i17 = 1;
 STACKTOP = i1;
 return i17 | 0;
}
function __ZN18btSliderConstraint19calculateTransformsERK11btTransformS2_(i2, i7, i6) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((HEAP8[i2 + 180 >> 0] | 0) == 0 ? (HEAP8[i2 + 48 >> 0] | 0) != 0 : 0) {
  __ZNK11btTransformmlERKS_(i1 + 64 | 0, i6, i2 + 116 | 0);
  HEAP32[i2 + 824 >> 2] = HEAP32[i1 + 64 >> 2];
  HEAP32[i2 + 828 >> 2] = HEAP32[i1 + 68 >> 2];
  HEAP32[i2 + 832 >> 2] = HEAP32[i1 + 72 >> 2];
  HEAP32[i2 + 836 >> 2] = HEAP32[i1 + 76 >> 2];
  HEAP32[i2 + 840 >> 2] = HEAP32[i1 + 80 >> 2];
  HEAP32[i2 + 844 >> 2] = HEAP32[i1 + 84 >> 2];
  HEAP32[i2 + 848 >> 2] = HEAP32[i1 + 88 >> 2];
  HEAP32[i2 + 852 >> 2] = HEAP32[i1 + 92 >> 2];
  HEAP32[i2 + 856 >> 2] = HEAP32[i1 + 96 >> 2];
  HEAP32[i2 + 860 >> 2] = HEAP32[i1 + 100 >> 2];
  HEAP32[i2 + 864 >> 2] = HEAP32[i1 + 104 >> 2];
  HEAP32[i2 + 868 >> 2] = HEAP32[i1 + 108 >> 2];
  HEAP32[i2 + 872 >> 2] = HEAP32[i1 + 112 >> 2];
  HEAP32[i2 + 876 >> 2] = HEAP32[i1 + 116 >> 2];
  HEAP32[i2 + 880 >> 2] = HEAP32[i1 + 120 >> 2];
  HEAP32[i2 + 884 >> 2] = HEAP32[i1 + 124 >> 2];
  __ZNK11btTransformmlERKS_(i1, i7, i2 + 52 | 0);
  HEAP32[i2 + 888 >> 2] = HEAP32[i1 + 0 >> 2];
  HEAP32[i2 + 892 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 896 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i2 + 900 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i2 + 904 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i2 + 908 >> 2] = HEAP32[i1 + 20 >> 2];
  HEAP32[i2 + 912 >> 2] = HEAP32[i1 + 24 >> 2];
  HEAP32[i2 + 916 >> 2] = HEAP32[i1 + 28 >> 2];
  HEAP32[i2 + 920 >> 2] = HEAP32[i1 + 32 >> 2];
  HEAP32[i2 + 924 >> 2] = HEAP32[i1 + 36 >> 2];
  HEAP32[i2 + 928 >> 2] = HEAP32[i1 + 40 >> 2];
  HEAP32[i2 + 932 >> 2] = HEAP32[i1 + 44 >> 2];
  HEAP32[i2 + 936 >> 2] = HEAP32[i1 + 48 >> 2];
  HEAP32[i2 + 940 >> 2] = HEAP32[i1 + 52 >> 2];
  HEAP32[i2 + 944 >> 2] = HEAP32[i1 + 56 >> 2];
  HEAP32[i2 + 948 >> 2] = HEAP32[i1 + 60 >> 2];
 } else {
  __ZNK11btTransformmlERKS_(i1 + 192 | 0, i7, i2 + 52 | 0);
  HEAP32[i2 + 824 >> 2] = HEAP32[i1 + 192 >> 2];
  HEAP32[i2 + 828 >> 2] = HEAP32[i1 + 196 >> 2];
  HEAP32[i2 + 832 >> 2] = HEAP32[i1 + 200 >> 2];
  HEAP32[i2 + 836 >> 2] = HEAP32[i1 + 204 >> 2];
  HEAP32[i2 + 840 >> 2] = HEAP32[i1 + 208 >> 2];
  HEAP32[i2 + 844 >> 2] = HEAP32[i1 + 212 >> 2];
  HEAP32[i2 + 848 >> 2] = HEAP32[i1 + 216 >> 2];
  HEAP32[i2 + 852 >> 2] = HEAP32[i1 + 220 >> 2];
  HEAP32[i2 + 856 >> 2] = HEAP32[i1 + 224 >> 2];
  HEAP32[i2 + 860 >> 2] = HEAP32[i1 + 228 >> 2];
  HEAP32[i2 + 864 >> 2] = HEAP32[i1 + 232 >> 2];
  HEAP32[i2 + 868 >> 2] = HEAP32[i1 + 236 >> 2];
  HEAP32[i2 + 872 >> 2] = HEAP32[i1 + 240 >> 2];
  HEAP32[i2 + 876 >> 2] = HEAP32[i1 + 244 >> 2];
  HEAP32[i2 + 880 >> 2] = HEAP32[i1 + 248 >> 2];
  HEAP32[i2 + 884 >> 2] = HEAP32[i1 + 252 >> 2];
  __ZNK11btTransformmlERKS_(i1 + 128 | 0, i6, i2 + 116 | 0);
  HEAP32[i2 + 888 >> 2] = HEAP32[i1 + 128 >> 2];
  HEAP32[i2 + 892 >> 2] = HEAP32[i1 + 132 >> 2];
  HEAP32[i2 + 896 >> 2] = HEAP32[i1 + 136 >> 2];
  HEAP32[i2 + 900 >> 2] = HEAP32[i1 + 140 >> 2];
  HEAP32[i2 + 904 >> 2] = HEAP32[i1 + 144 >> 2];
  HEAP32[i2 + 908 >> 2] = HEAP32[i1 + 148 >> 2];
  HEAP32[i2 + 912 >> 2] = HEAP32[i1 + 152 >> 2];
  HEAP32[i2 + 916 >> 2] = HEAP32[i1 + 156 >> 2];
  HEAP32[i2 + 920 >> 2] = HEAP32[i1 + 160 >> 2];
  HEAP32[i2 + 924 >> 2] = HEAP32[i1 + 164 >> 2];
  HEAP32[i2 + 928 >> 2] = HEAP32[i1 + 168 >> 2];
  HEAP32[i2 + 932 >> 2] = HEAP32[i1 + 172 >> 2];
  HEAP32[i2 + 936 >> 2] = HEAP32[i1 + 176 >> 2];
  HEAP32[i2 + 940 >> 2] = HEAP32[i1 + 180 >> 2];
  HEAP32[i2 + 944 >> 2] = HEAP32[i1 + 184 >> 2];
  HEAP32[i2 + 948 >> 2] = HEAP32[i1 + 188 >> 2];
 }
 HEAP32[i2 + 968 >> 2] = HEAP32[i2 + 872 >> 2];
 HEAP32[i2 + 972 >> 2] = HEAP32[i2 + 876 >> 2];
 HEAP32[i2 + 976 >> 2] = HEAP32[i2 + 880 >> 2];
 HEAP32[i2 + 980 >> 2] = HEAP32[i2 + 884 >> 2];
 HEAP32[i2 + 984 >> 2] = HEAP32[i2 + 936 >> 2];
 HEAP32[i2 + 988 >> 2] = HEAP32[i2 + 940 >> 2];
 HEAP32[i2 + 992 >> 2] = HEAP32[i2 + 944 >> 2];
 HEAP32[i2 + 996 >> 2] = HEAP32[i2 + 948 >> 2];
 d5 = +HEAPF32[i2 + 824 >> 2];
 d4 = +HEAPF32[i2 + 840 >> 2];
 d3 = +HEAPF32[i2 + 856 >> 2];
 HEAPF32[i2 + 952 >> 2] = d5;
 HEAPF32[i2 + 956 >> 2] = d4;
 HEAPF32[i2 + 960 >> 2] = d3;
 HEAPF32[i2 + 964 >> 2] = 0.0;
 if ((HEAP8[i2 + 180 >> 0] | 0) == 0 ? (HEAP8[i2 + 48 >> 0] | 0) == 0 : 0) {
  d16 = +HEAPF32[i2 + 968 >> 2];
  d10 = d16 - +HEAPF32[i2 + 984 >> 2];
  d14 = +HEAPF32[i2 + 972 >> 2];
  d9 = d14 - +HEAPF32[i2 + 988 >> 2];
  d13 = +HEAPF32[i2 + 976 >> 2];
  d8 = d13 - +HEAPF32[i2 + 992 >> 2];
  HEAPF32[i2 + 1016 >> 2] = d10;
  HEAPF32[i2 + 1020 >> 2] = d9;
  HEAPF32[i2 + 1024 >> 2] = d8;
  HEAPF32[i2 + 1028 >> 2] = 0.0;
  d12 = d5 * d10;
  d15 = d4 * d9;
  d15 = d12 + d15;
  d12 = d3 * d8;
  d12 = d15 + d12;
  d15 = d5 * d12;
  d4 = d4 * d12;
  d5 = d3 * d12;
  d3 = d16 + d15;
  d4 = d14 + d4;
  d5 = d13 + d5;
  i7 = i2 + 1e3 | 0;
  HEAPF32[i7 >> 2] = d3;
  i7 = i2 + 1004 | 0;
  HEAPF32[i7 >> 2] = d4;
  i7 = i2 + 1008 | 0;
  HEAPF32[i7 >> 2] = d5;
  i7 = i2 + 1012 | 0;
  HEAPF32[i7 >> 2] = 0.0;
  i7 = i2 + 1032 | 0;
  HEAPF32[i7 >> 2] = d12;
  i7 = i2 + 828 | 0;
  i6 = i2 + 844 | 0;
  i11 = i2 + 860 | 0;
  d5 = +HEAPF32[i7 >> 2];
  d4 = +HEAPF32[i6 >> 2];
  d3 = +HEAPF32[i11 >> 2];
  d5 = d5 * d10;
  d4 = d4 * d9;
  d4 = d5 + d4;
  d3 = d3 * d8;
  d3 = d4 + d3;
  i11 = i2 + 1036 | 0;
  HEAPF32[i11 >> 2] = d3;
  i11 = i2 + 832 | 0;
  i6 = i2 + 848 | 0;
  i7 = i2 + 864 | 0;
  d3 = +HEAPF32[i11 >> 2];
  d4 = +HEAPF32[i6 >> 2];
  d5 = +HEAPF32[i7 >> 2];
  d3 = d3 * d10;
  d4 = d4 * d9;
  d4 = d3 + d4;
  d5 = d5 * d8;
  d5 = d4 + d5;
  i7 = i2 + 1040 | 0;
  HEAPF32[i7 >> 2] = d5;
  STACKTOP = i1;
  return;
 }
 d18 = +HEAPF32[i2 + 968 >> 2];
 d13 = +HEAPF32[i2 + 984 >> 2] - d18;
 d17 = +HEAPF32[i2 + 972 >> 2];
 d15 = +HEAPF32[i2 + 988 >> 2] - d17;
 d8 = +HEAPF32[i2 + 976 >> 2];
 d16 = +HEAPF32[i2 + 992 >> 2] - d8;
 HEAPF32[i2 + 1016 >> 2] = d13;
 HEAPF32[i2 + 1020 >> 2] = d15;
 HEAPF32[i2 + 1024 >> 2] = d16;
 HEAPF32[i2 + 1028 >> 2] = 0.0;
 d14 = d5 * d13;
 d9 = d4 * d15;
 d9 = d14 + d9;
 d14 = d3 * d16;
 d14 = d9 + d14;
 d9 = d5 * d14;
 d10 = d4 * d14;
 d12 = d3 * d14;
 d9 = d18 + d9;
 d10 = d17 + d10;
 d12 = d8 + d12;
 i11 = i2 + 1e3 | 0;
 HEAPF32[i11 >> 2] = d9;
 i11 = i2 + 1004 | 0;
 HEAPF32[i11 >> 2] = d10;
 i11 = i2 + 1008 | 0;
 HEAPF32[i11 >> 2] = d12;
 i11 = i2 + 1012 | 0;
 HEAPF32[i11 >> 2] = 0.0;
 i11 = i2 + 1032 | 0;
 HEAPF32[i11 >> 2] = d14;
 i11 = i2 + 828 | 0;
 i7 = i2 + 844 | 0;
 i6 = i2 + 860 | 0;
 d14 = +HEAPF32[i11 >> 2];
 d12 = +HEAPF32[i7 >> 2];
 d10 = +HEAPF32[i6 >> 2];
 d14 = d14 * d13;
 d12 = d12 * d15;
 d12 = d14 + d12;
 d10 = d10 * d16;
 d10 = d12 + d10;
 i6 = i2 + 1036 | 0;
 HEAPF32[i6 >> 2] = d10;
 i6 = i2 + 832 | 0;
 i7 = i2 + 848 | 0;
 i11 = i2 + 864 | 0;
 d10 = +HEAPF32[i6 >> 2];
 d12 = +HEAPF32[i7 >> 2];
 d14 = +HEAPF32[i11 >> 2];
 d13 = d10 * d13;
 d15 = d12 * d15;
 d15 = d13 + d15;
 d16 = d14 * d16;
 d16 = d15 + d16;
 i11 = i2 + 1040 | 0;
 HEAPF32[i11 >> 2] = d16;
 STACKTOP = i1;
 return;
}
function __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i1, i3, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0, d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, i17 = 0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 switch (HEAP32[i3 + 4 >> 2] | 0) {
 case 0:
  {
   d16 = +HEAPF32[i3 + 28 >> 2];
   d18 = +HEAPF32[i3 + 32 >> 2];
   d18 = +HEAPF32[i5 + 4 >> 2] >= 0.0 ? d18 : -d18;
   d19 = +HEAPF32[i3 + 36 >> 2];
   d19 = +HEAPF32[i5 + 8 >> 2] >= 0.0 ? d19 : -d19;
   HEAPF32[i1 >> 2] = +HEAPF32[i5 >> 2] >= 0.0 ? d16 : -d16;
   HEAPF32[i1 + 4 >> 2] = d18;
   HEAPF32[i1 + 8 >> 2] = d19;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 1:
  {
   d18 = +HEAPF32[i5 >> 2];
   d19 = +HEAPF32[i5 + 4 >> 2];
   d4 = +HEAPF32[i5 + 8 >> 2];
   d7 = d18 * +HEAPF32[i3 + 56 >> 2] + d19 * +HEAPF32[i3 + 60 >> 2] + d4 * +HEAPF32[i3 + 64 >> 2];
   d6 = d18 * +HEAPF32[i3 + 72 >> 2] + d19 * +HEAPF32[i3 + 76 >> 2] + d4 * +HEAPF32[i3 + 80 >> 2];
   d4 = d18 * +HEAPF32[i3 + 88 >> 2] + d19 * +HEAPF32[i3 + 92 >> 2] + d4 * +HEAPF32[i3 + 96 >> 2];
   if (d7 < d6) i5 = d6 < d4 ? 2 : 1; else i5 = d7 < d4 ? 2 : 0;
   d18 = +HEAPF32[i3 + 56 + (i5 << 4) + 4 >> 2];
   d19 = +HEAPF32[i3 + 56 + (i5 << 4) + 8 >> 2];
   HEAPF32[i1 >> 2] = +HEAPF32[i3 + 56 + (i5 << 4) >> 2];
   HEAPF32[i1 + 4 >> 2] = d18;
   HEAPF32[i1 + 8 >> 2] = d19;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 10:
  {
   d6 = +HEAPF32[i5 >> 2];
   d7 = +HEAPF32[i5 + 4 >> 2];
   d8 = +HEAPF32[i5 + 8 >> 2];
   i5 = HEAP32[i3 + 52 >> 2] | 0;
   d4 = +HEAPF32[i3 + (i5 << 2) + 28 >> 2];
   d11 = +HEAPF32[i3 + (((i5 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
   if (d6 * d6 + d7 * d7 + d8 * d8 < 9999999747378752.0e-20) {
    d6 = 1.0;
    d7 = 0.0;
    d10 = 0.0;
   } else {
    d10 = 1.0 / +Math_sqrt(+(d6 * d6 + d7 * d7 + d8 * d8));
    d6 = d6 * d10;
    d7 = d7 * d10;
    d10 = d8 * d10;
   }
   HEAP32[i2 + 16 >> 2] = 0;
   HEAP32[i2 + 20 >> 2] = 0;
   HEAP32[i2 + 24 >> 2] = 0;
   HEAP32[i2 + 28 >> 2] = 0;
   HEAPF32[i2 + 16 + (i5 << 2) >> 2] = d4;
   d8 = d11 * d6;
   d9 = d11 * d7;
   d11 = d11 * d10;
   d14 = +HEAPF32[i3 + 44 >> 2];
   d12 = d6 * d14;
   d13 = d7 * d14;
   d14 = d10 * d14;
   d19 = +HEAPF32[i2 + 16 >> 2] + d8 - d12;
   d18 = d9 + +HEAPF32[i2 + 20 >> 2] - d13;
   d16 = d11 + +HEAPF32[i2 + 24 >> 2] - d14;
   d15 = d10 * d16 + (d6 * d19 + d7 * d18);
   if (!(d15 > -999999984306749400.0)) {
    d16 = 0.0;
    d18 = 0.0;
    d19 = 0.0;
    d15 = -999999984306749400.0;
   }
   HEAP32[i2 + 0 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   HEAPF32[i2 + (i5 << 2) >> 2] = -d4;
   d12 = d8 + +HEAPF32[i2 >> 2] - d12;
   d13 = d9 + +HEAPF32[i2 + 4 >> 2] - d13;
   d14 = d11 + +HEAPF32[i2 + 8 >> 2] - d14;
   i21 = d10 * d14 + (d6 * d12 + d7 * d13) > d15;
   HEAPF32[i1 >> 2] = i21 ? d12 : d19;
   HEAPF32[i1 + 4 >> 2] = i21 ? d13 : d18;
   HEAPF32[i1 + 8 >> 2] = i21 ? d14 : d16;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 8:
  {
   HEAP32[i1 + 0 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   STACKTOP = i2;
   return;
  }
 case 13:
  {
   HEAP32[i2 + 64 >> 2] = HEAP32[i3 + 28 >> 2];
   HEAP32[i2 + 68 >> 2] = HEAP32[i3 + 32 >> 2];
   HEAP32[i2 + 72 >> 2] = HEAP32[i3 + 36 >> 2];
   HEAP32[i2 + 76 >> 2] = HEAP32[i3 + 40 >> 2];
   HEAPF32[i2 + 48 >> 2] = +HEAPF32[i5 >> 2];
   d6 = +HEAPF32[i5 + 4 >> 2];
   HEAPF32[i2 + 52 >> 2] = d6;
   d4 = +HEAPF32[i5 + 8 >> 2];
   HEAPF32[i2 + 56 >> 2] = d4;
   HEAPF32[i2 + 60 >> 2] = 0.0;
   i20 = HEAP32[i3 + 52 >> 2] | 0;
   if ((i20 | 0) == 2) {
    i17 = 0;
    i5 = i20;
    i3 = 1;
   } else if ((i20 | 0) == 1) {
    d6 = d4;
    i17 = 0;
    i5 = i20;
    i3 = 2;
   } else {
    d6 = d4;
    i17 = 1;
    i5 = 0;
    i3 = 2;
   }
   d4 = +HEAPF32[i2 + 64 + (i17 << 2) >> 2];
   d8 = +HEAPF32[i2 + 64 + (i20 << 2) >> 2];
   d9 = +HEAPF32[i2 + 48 + (i17 << 2) >> 2];
   d7 = +Math_sqrt(+(d9 * d9 + d6 * d6));
   if (d7 != 0.0) {
    HEAPF32[i2 + 32 + (i17 << 2) >> 2] = d9 * (d4 / d7);
    if (+HEAPF32[i2 + 48 + (i5 << 2) >> 2] < 0.0) d8 = -d8;
    HEAPF32[i2 + 32 + (i5 << 2) >> 2] = d8;
    HEAPF32[i2 + 32 + (i3 << 2) >> 2] = d4 / d7 * d6;
    HEAPF32[i1 >> 2] = +HEAPF32[i2 + 32 >> 2];
    HEAPF32[i1 + 4 >> 2] = +HEAPF32[i2 + 36 >> 2];
    HEAPF32[i1 + 8 >> 2] = +HEAPF32[i2 + 40 >> 2];
    HEAPF32[i1 + 12 >> 2] = 0.0;
    STACKTOP = i2;
    return;
   } else {
    HEAPF32[i2 + 32 + (i17 << 2) >> 2] = d4;
    if (+HEAPF32[i2 + 48 + (i5 << 2) >> 2] < 0.0) d8 = -d8;
    HEAPF32[i2 + 32 + (i5 << 2) >> 2] = d8;
    HEAPF32[i2 + 32 + (i3 << 2) >> 2] = 0.0;
    HEAPF32[i1 >> 2] = +HEAPF32[i2 + 32 >> 2];
    HEAPF32[i1 + 4 >> 2] = +HEAPF32[i2 + 36 >> 2];
    HEAPF32[i1 + 8 >> 2] = +HEAPF32[i2 + 40 >> 2];
    HEAPF32[i1 + 12 >> 2] = 0.0;
    STACKTOP = i2;
    return;
   }
  }
 case 5:
  {
   i17 = HEAP32[i3 + 92 >> 2] | 0;
   i20 = HEAP32[i3 + 96 >> 2] | 0;
   d6 = +HEAPF32[i3 + 12 >> 2];
   d4 = +HEAPF32[i3 + 16 >> 2];
   d7 = +HEAPF32[i3 + 20 >> 2];
   d8 = +HEAPF32[i5 >> 2] * d6;
   d9 = +HEAPF32[i5 + 4 >> 2] * d4;
   d10 = +HEAPF32[i5 + 8 >> 2] * d7;
   if ((i20 | 0) > 0) {
    i5 = 0;
    d12 = -3.4028234663852886e+38;
    i21 = -1;
    while (1) {
     d11 = d8 * +HEAPF32[i17 + (i5 << 4) >> 2] + d9 * +HEAPF32[i17 + (i5 << 4) + 4 >> 2] + d10 * +HEAPF32[i17 + (i5 << 4) + 8 >> 2];
     i3 = d11 > d12;
     i21 = i3 ? i5 : i21;
     i5 = i5 + 1 | 0;
     if ((i5 | 0) == (i20 | 0)) break; else d12 = i3 ? d11 : d12;
    }
   } else i21 = -1;
   d18 = d4 * +HEAPF32[i17 + (i21 << 4) + 4 >> 2];
   d19 = d7 * +HEAPF32[i17 + (i21 << 4) + 8 >> 2];
   HEAPF32[i1 >> 2] = d6 * +HEAPF32[i17 + (i21 << 4) >> 2];
   HEAPF32[i1 + 4 >> 2] = d18;
   HEAPF32[i1 + 8 >> 2] = d19;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 case 4:
  {
   i17 = HEAP32[i3 + 104 >> 2] | 0;
   i20 = HEAP32[i3 + 96 >> 2] | 0;
   d4 = +HEAPF32[i3 + 12 >> 2];
   d6 = +HEAPF32[i3 + 16 >> 2];
   d7 = +HEAPF32[i3 + 20 >> 2];
   d8 = +HEAPF32[i5 >> 2] * d4;
   d9 = +HEAPF32[i5 + 4 >> 2] * d6;
   d11 = +HEAPF32[i5 + 8 >> 2] * d7;
   if ((i20 | 0) > 0) {
    i3 = 0;
    d10 = -3.4028234663852886e+38;
    i21 = -1;
    while (1) {
     d12 = d8 * +HEAPF32[i17 + (i3 << 4) >> 2] + d9 * +HEAPF32[i17 + (i3 << 4) + 4 >> 2] + d11 * +HEAPF32[i17 + (i3 << 4) + 8 >> 2];
     i5 = d12 > d10;
     i21 = i5 ? i3 : i21;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i20 | 0)) break; else d10 = i5 ? d12 : d10;
    }
   } else i21 = -1;
   d18 = d6 * +HEAPF32[i17 + (i21 << 4) + 4 >> 2];
   d19 = d7 * +HEAPF32[i17 + (i21 << 4) + 8 >> 2];
   HEAPF32[i1 >> 2] = d4 * +HEAPF32[i17 + (i21 << 4) >> 2];
   HEAPF32[i1 + 4 >> 2] = d18;
   HEAPF32[i1 + 8 >> 2] = d19;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i2;
   return;
  }
 default:
  {
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] & 127](i1, i3, i5);
   STACKTOP = i2;
   return;
  }
 }
}
function __ZN11btRigidBody14setupRigidBodyERKNS_27btRigidBodyConstructionInfoE(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0;
 i2 = STACKTOP;
 HEAP32[i1 + 236 >> 2] = 2;
 HEAP32[i1 + 312 >> 2] = 0;
 HEAP32[i1 + 316 >> 2] = 0;
 HEAP32[i1 + 320 >> 2] = 0;
 HEAP32[i1 + 324 >> 2] = 0;
 HEAP32[i1 + 328 >> 2] = 0;
 HEAP32[i1 + 332 >> 2] = 0;
 HEAP32[i1 + 336 >> 2] = 0;
 HEAP32[i1 + 340 >> 2] = 0;
 HEAPF32[i1 + 544 >> 2] = 1.0;
 HEAPF32[i1 + 548 >> 2] = 1.0;
 HEAPF32[i1 + 552 >> 2] = 1.0;
 HEAPF32[i1 + 556 >> 2] = 0.0;
 HEAPF32[i1 + 348 >> 2] = 1.0;
 HEAPF32[i1 + 352 >> 2] = 1.0;
 HEAPF32[i1 + 356 >> 2] = 1.0;
 i8 = i1 + 360 | 0;
 i7 = i8 + 36 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i7 | 0));
 HEAP32[i1 + 412 >> 2] = 0;
 HEAP32[i1 + 416 >> 2] = 0;
 HEAP32[i1 + 420 >> 2] = 0;
 HEAP32[i1 + 424 >> 2] = 0;
 HEAP32[i1 + 428 >> 2] = 0;
 HEAP32[i1 + 432 >> 2] = 0;
 HEAP32[i1 + 436 >> 2] = 0;
 HEAP32[i1 + 440 >> 2] = 0;
 d5 = +HEAPF32[i3 + 92 >> 2];
 d4 = +HEAPF32[i3 + 96 >> 2];
 if (d5 < 0.0) d5 = 0.0; else d5 = d5 > 1.0 ? 1.0 : d5;
 HEAPF32[i1 + 444 >> 2] = d5;
 if (d4 < 0.0) d4 = 0.0; else d4 = d4 > 1.0 ? 1.0 : d4;
 HEAPF32[i1 + 448 >> 2] = d4;
 HEAPF32[i1 + 472 >> 2] = +HEAPF32[i3 + 112 >> 2];
 HEAPF32[i1 + 476 >> 2] = +HEAPF32[i3 + 116 >> 2];
 i7 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i1 + 480 >> 2] = i7;
 HEAP32[i1 + 608 >> 2] = 0;
 HEAP32[i1 + 612 >> 2] = 0;
 HEAP8[i1 + 452 >> 0] = HEAP8[i3 + 120 >> 0] | 0;
 HEAPF32[i1 + 456 >> 2] = +HEAPF32[i3 + 124 >> 2];
 HEAPF32[i1 + 460 >> 2] = +HEAPF32[i3 + 128 >> 2];
 HEAPF32[i1 + 464 >> 2] = +HEAPF32[i3 + 132 >> 2];
 HEAPF32[i1 + 468 >> 2] = +HEAPF32[i3 + 136 >> 2];
 if ((i7 | 0) == 0) {
  HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 16 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 20 >> 2];
  HEAP32[i1 + 20 >> 2] = HEAP32[i3 + 24 >> 2];
  HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 28 >> 2];
  HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 32 >> 2];
  HEAP32[i1 + 32 >> 2] = HEAP32[i3 + 36 >> 2];
  HEAP32[i1 + 36 >> 2] = HEAP32[i3 + 40 >> 2];
  HEAP32[i1 + 40 >> 2] = HEAP32[i3 + 44 >> 2];
  HEAP32[i1 + 44 >> 2] = HEAP32[i3 + 48 >> 2];
  HEAP32[i1 + 48 >> 2] = HEAP32[i3 + 52 >> 2];
  HEAP32[i1 + 52 >> 2] = HEAP32[i3 + 56 >> 2];
  HEAP32[i1 + 56 >> 2] = HEAP32[i3 + 60 >> 2];
  HEAP32[i1 + 60 >> 2] = HEAP32[i3 + 64 >> 2];
  HEAP32[i1 + 64 >> 2] = HEAP32[i3 + 68 >> 2];
  i10 = i1 + 52 | 0;
  i9 = i1 + 20 | 0;
  i7 = i1 + 36 | 0;
  i8 = i1 + 4 | 0;
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 127](i7, i1 + 4 | 0);
  i10 = i1 + 52 | 0;
  i9 = i1 + 20 | 0;
  i7 = i1 + 36 | 0;
  i8 = i1 + 4 | 0;
 }
 HEAP32[i1 + 68 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i9 + 12 >> 2];
 HEAP32[i1 + 100 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i1 + 104 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i1 + 108 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i1 + 112 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i1 + 120 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i1 + 124 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i1 + 128 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAP32[i1 + 132 >> 2] = 0;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAP32[i1 + 144 >> 2] = 0;
 HEAP32[i1 + 148 >> 2] = 0;
 HEAP32[i1 + 152 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 HEAP32[i1 + 160 >> 2] = 0;
 HEAPF32[i1 + 224 >> 2] = +HEAPF32[i3 + 100 >> 2];
 HEAPF32[i1 + 232 >> 2] = +HEAPF32[i3 + 104 >> 2];
 HEAPF32[i1 + 228 >> 2] = +HEAPF32[i3 + 108 >> 2];
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1, HEAP32[i3 + 72 >> 2] | 0);
 i7 = HEAP32[986] | 0;
 HEAP32[986] = i7 + 1;
 HEAP32[i1 + 508 >> 2] = i7;
 d5 = +HEAPF32[i3 >> 2];
 i7 = HEAP32[i1 + 204 >> 2] | 0;
 if (d5 == 0.0) {
  HEAP32[i1 + 204 >> 2] = i7 | 1;
  HEAPF32[i1 + 344 >> 2] = 0.0;
  d4 = 0.0;
 } else {
  HEAP32[i1 + 204 >> 2] = i7 & -2;
  HEAPF32[i1 + 344 >> 2] = 1.0 / d5;
  d4 = 1.0 / d5;
 }
 d6 = d5 * +HEAPF32[i1 + 384 >> 2];
 d11 = d5 * +HEAPF32[i1 + 388 >> 2];
 HEAPF32[i1 + 364 >> 2] = d5 * +HEAPF32[i1 + 380 >> 2];
 HEAPF32[i1 + 368 >> 2] = d6;
 HEAPF32[i1 + 372 >> 2] = d11;
 HEAPF32[i1 + 376 >> 2] = 0.0;
 d5 = +HEAPF32[i3 + 76 >> 2];
 if (d5 != 0.0) d5 = 1.0 / d5; else d5 = 0.0;
 d6 = +HEAPF32[i3 + 80 >> 2];
 if (d6 != 0.0) d6 = 1.0 / d6; else d6 = 0.0;
 d11 = +HEAPF32[i3 + 84 >> 2];
 if (d11 != 0.0) d11 = 1.0 / d11; else d11 = 0.0;
 HEAPF32[i1 + 396 >> 2] = d5;
 HEAPF32[i1 + 400 >> 2] = d6;
 HEAPF32[i1 + 404 >> 2] = d11;
 HEAPF32[i1 + 408 >> 2] = 0.0;
 d26 = d4 * +HEAPF32[i1 + 352 >> 2];
 d20 = d4 * +HEAPF32[i1 + 356 >> 2];
 HEAPF32[i1 + 560 >> 2] = d4 * +HEAPF32[i1 + 348 >> 2];
 HEAPF32[i1 + 564 >> 2] = d26;
 HEAPF32[i1 + 568 >> 2] = d20;
 HEAPF32[i1 + 572 >> 2] = 0.0;
 d20 = +HEAPF32[i1 + 4 >> 2];
 d26 = d20 * d5;
 d19 = +HEAPF32[i1 + 8 >> 2];
 d25 = d19 * d6;
 d18 = +HEAPF32[i1 + 12 >> 2];
 d24 = d18 * d11;
 d17 = +HEAPF32[i1 + 20 >> 2];
 d23 = d5 * d17;
 d16 = +HEAPF32[i1 + 24 >> 2];
 d22 = d6 * d16;
 d15 = +HEAPF32[i1 + 28 >> 2];
 d21 = d11 * d15;
 d14 = +HEAPF32[i1 + 36 >> 2];
 d13 = d5 * d14;
 d12 = +HEAPF32[i1 + 40 >> 2];
 d4 = d6 * d12;
 d6 = +HEAPF32[i1 + 44 >> 2];
 d5 = d11 * d6;
 HEAPF32[i1 + 264 >> 2] = d20 * d26 + d19 * d25 + d18 * d24;
 HEAPF32[i1 + 268 >> 2] = d26 * d17 + d25 * d16 + d24 * d15;
 HEAPF32[i1 + 272 >> 2] = d26 * d14 + d25 * d12 + d24 * d6;
 HEAPF32[i1 + 276 >> 2] = 0.0;
 HEAPF32[i1 + 280 >> 2] = d20 * d23 + d19 * d22 + d18 * d21;
 HEAPF32[i1 + 284 >> 2] = d17 * d23 + d16 * d22 + d15 * d21;
 HEAPF32[i1 + 288 >> 2] = d23 * d14 + d22 * d12 + d21 * d6;
 HEAPF32[i1 + 292 >> 2] = 0.0;
 HEAPF32[i1 + 296 >> 2] = d20 * d13 + d19 * d4 + d18 * d5;
 HEAPF32[i1 + 300 >> 2] = d17 * d13 + d16 * d4 + d15 * d5;
 HEAPF32[i1 + 304 >> 2] = d14 * d13 + d12 * d4 + d6 * d5;
 HEAPF32[i1 + 308 >> 2] = 0.0;
 HEAP32[i1 + 504 >> 2] = 0;
 HEAP32[i1 + 512 >> 2] = 0;
 HEAP32[i1 + 516 >> 2] = 0;
 HEAP32[i1 + 520 >> 2] = 0;
 HEAP32[i1 + 524 >> 2] = 0;
 HEAP32[i1 + 528 >> 2] = 0;
 HEAP32[i1 + 532 >> 2] = 0;
 HEAP32[i1 + 536 >> 2] = 0;
 HEAP32[i1 + 540 >> 2] = 0;
 d5 = +HEAPF32[i1 + 344 >> 2];
 d6 = d5 * +HEAPF32[i1 + 352 >> 2];
 d11 = d5 * +HEAPF32[i1 + 356 >> 2];
 HEAPF32[i1 + 560 >> 2] = +HEAPF32[i1 + 348 >> 2] * d5;
 HEAPF32[i1 + 564 >> 2] = d6;
 HEAPF32[i1 + 568 >> 2] = d11;
 i8 = i1 + 572 | 0;
 i7 = i8 + 36 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i7 | 0));
 STACKTOP = i2;
 return;
}
function __ZN14btTriangleMesh15findOrAddVertexERK9btVector3b(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i1 = STACKTOP;
 if ((HEAP8[i2 + 165 >> 0] | 0) != 0) {
  L3 : do if (i6 ? (i5 = HEAP32[i2 + 88 >> 2] | 0, (i5 | 0) > 0) : 0) {
   i6 = HEAP32[i2 + 96 >> 2] | 0;
   d11 = +HEAPF32[i3 >> 2];
   d12 = +HEAPF32[i3 + 4 >> 2];
   d9 = +HEAPF32[i3 + 8 >> 2];
   d10 = +HEAPF32[i2 + 168 >> 2];
   i7 = 0;
   while (1) {
    d16 = +HEAPF32[i6 + (i7 << 4) >> 2] - d11;
    d15 = +HEAPF32[i6 + (i7 << 4) + 4 >> 2] - d12;
    d14 = +HEAPF32[i6 + (i7 << 4) + 8 >> 2] - d9;
    if (d16 * d16 + d15 * d15 + d14 * d14 <= d10) break;
    i7 = i7 + 1 | 0;
    if ((i7 | 0) >= (i5 | 0)) break L3;
   }
   STACKTOP = i1;
   return i7 | 0;
  } while (0);
  i6 = (HEAP32[i2 + 32 >> 2] | 0) + 12 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  i6 = HEAP32[i2 + 88 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i2 + 92 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
   if ((i4 | 0) == 0) i5 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i5 = _malloc((i4 << 4 | 3) + 16 | 0) | 0;
    if ((i5 | 0) == 0) i5 = 0; else {
     HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
     i5 = i5 + 19 & -16;
    }
    i6 = HEAP32[i2 + 88 >> 2] | 0;
   }
   if ((i6 | 0) > 0) {
    i7 = 0;
    do {
     i13 = i5 + (i7 << 4) | 0;
     i8 = (HEAP32[i2 + 96 >> 2] | 0) + (i7 << 4) | 0;
     HEAP32[i13 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
     HEAP32[i13 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
     HEAP32[i13 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
     HEAP32[i13 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
     i7 = i7 + 1 | 0;
    } while ((i7 | 0) != (i6 | 0));
   }
   i6 = HEAP32[i2 + 96 >> 2] | 0;
   if ((i6 | 0) != 0) {
    if ((HEAP8[i2 + 100 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i6 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 96 >> 2] = 0;
   }
   HEAP8[i2 + 100 >> 0] = 1;
   HEAP32[i2 + 96 >> 2] = i5;
   HEAP32[i2 + 92 >> 2] = i4;
   i6 = HEAP32[i2 + 88 >> 2] | 0;
  }
  i13 = (HEAP32[i2 + 96 >> 2] | 0) + (i6 << 4) | 0;
  HEAP32[i13 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  i13 = HEAP32[i2 + 88 >> 2] | 0;
  HEAP32[i2 + 88 >> 2] = i13 + 1;
  HEAP32[(HEAP32[i2 + 32 >> 2] | 0) + 16 >> 2] = HEAP32[i2 + 96 >> 2];
  STACKTOP = i1;
  return i13 | 0;
 }
 i5 = HEAP32[i2 + 108 >> 2] | 0;
 L33 : do if ((i5 | 0) > 0 & i6) {
  i6 = HEAP32[i2 + 116 >> 2] | 0;
  d9 = +HEAPF32[i3 >> 2];
  d10 = +HEAPF32[i3 + 4 >> 2];
  d11 = +HEAPF32[i3 + 8 >> 2];
  d12 = +HEAPF32[i2 + 168 >> 2];
  i4 = 0;
  while (1) {
   d14 = +HEAPF32[i6 + (i4 << 2) >> 2] - d9;
   d15 = +HEAPF32[i6 + (i4 + 1 << 2) >> 2] - d10;
   d16 = +HEAPF32[i6 + (i4 + 2 << 2) >> 2] - d11;
   i7 = i4 + 3 | 0;
   if (d14 * d14 + d15 * d15 + d16 * d16 <= d12) break;
   if ((i7 | 0) < (i5 | 0)) i4 = i7; else {
    i4 = i3;
    break L33;
   }
  }
  i13 = (i4 | 0) / 3 | 0;
  STACKTOP = i1;
  return i13 | 0;
 } else i4 = i3; while (0);
 i6 = HEAP32[i2 + 112 >> 2] | 0;
 if ((i5 | 0) == (i6 | 0)) {
  i6 = (i5 | 0) == 0 ? 1 : i5 << 1;
  if ((i5 | 0) < (i6 | 0)) {
   if ((i6 | 0) == 0) i7 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i5 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
    if ((i5 | 0) == 0) i7 = 0; else {
     HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
     i7 = i5 + 19 & -16;
    }
    i5 = HEAP32[i2 + 108 >> 2] | 0;
   }
   if ((i5 | 0) > 0) {
    i8 = 0;
    do {
     i13 = i7 + (i8 << 2) | 0;
     if ((i13 | 0) != 0) HEAPF32[i13 >> 2] = +HEAPF32[(HEAP32[i2 + 116 >> 2] | 0) + (i8 << 2) >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i5 | 0));
   }
   i8 = HEAP32[i2 + 116 >> 2] | 0;
   if ((i8 | 0) != 0) {
    if ((HEAP8[i2 + 120 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i8 + -4 >> 2] | 0);
     i5 = HEAP32[i2 + 108 >> 2] | 0;
    }
    HEAP32[i2 + 116 >> 2] = 0;
   }
   HEAP8[i2 + 120 >> 0] = 1;
   HEAP32[i2 + 116 >> 2] = i7;
   HEAP32[i2 + 112 >> 2] = i6;
   i8 = i5;
  } else {
   i8 = i5;
   i6 = i5;
  }
 } else i8 = i5;
 i7 = HEAP32[i2 + 116 >> 2] | 0;
 i5 = i7 + (i8 << 2) | 0;
 if ((i5 | 0) != 0) HEAPF32[i5 >> 2] = +HEAPF32[i4 >> 2];
 i5 = i8 + 1 | 0;
 HEAP32[i2 + 108 >> 2] = i5;
 if ((i5 | 0) == (i6 | 0)) {
  i4 = (i6 | 0) == 0 ? 1 : i6 << 1;
  if ((i6 | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) i7 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
    if ((i5 | 0) == 0) i7 = 0; else {
     HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
     i7 = i5 + 19 & -16;
    }
    i6 = HEAP32[i2 + 108 >> 2] | 0;
   }
   if ((i6 | 0) > 0) {
    i5 = 0;
    do {
     i8 = i7 + (i5 << 2) | 0;
     if ((i8 | 0) != 0) HEAPF32[i8 >> 2] = +HEAPF32[(HEAP32[i2 + 116 >> 2] | 0) + (i5 << 2) >> 2];
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != (i6 | 0));
   }
   i5 = HEAP32[i2 + 116 >> 2] | 0;
   if ((i5 | 0) != 0) {
    if ((HEAP8[i2 + 120 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i5 + -4 >> 2] | 0);
     i6 = HEAP32[i2 + 108 >> 2] | 0;
    }
    HEAP32[i2 + 116 >> 2] = 0;
   }
   HEAP8[i2 + 120 >> 0] = 1;
   HEAP32[i2 + 116 >> 2] = i7;
   HEAP32[i2 + 112 >> 2] = i4;
   i5 = i6;
  } else {
   i5 = i6;
   i4 = i6;
  }
 } else i4 = i6;
 i6 = i7 + (i5 << 2) | 0;
 if ((i6 | 0) != 0) HEAPF32[i6 >> 2] = +HEAPF32[i3 + 4 >> 2];
 i5 = i5 + 1 | 0;
 HEAP32[i2 + 108 >> 2] = i5;
 if ((i5 | 0) == (i4 | 0)) {
  i5 = (i4 | 0) == 0 ? 1 : i4 << 1;
  if ((i4 | 0) < (i5 | 0)) {
   if ((i5 | 0) == 0) i7 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i4 = _malloc((i5 << 2 | 3) + 16 | 0) | 0;
    if ((i4 | 0) == 0) i7 = 0; else {
     HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
     i7 = i4 + 19 & -16;
    }
    i4 = HEAP32[i2 + 108 >> 2] | 0;
   }
   if ((i4 | 0) > 0) {
    i6 = 0;
    do {
     i8 = i7 + (i6 << 2) | 0;
     if ((i8 | 0) != 0) HEAPF32[i8 >> 2] = +HEAPF32[(HEAP32[i2 + 116 >> 2] | 0) + (i6 << 2) >> 2];
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i4 | 0));
   }
   i6 = HEAP32[i2 + 116 >> 2] | 0;
   if ((i6 | 0) != 0) {
    if ((HEAP8[i2 + 120 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i6 + -4 >> 2] | 0);
     i4 = HEAP32[i2 + 108 >> 2] | 0;
    }
    HEAP32[i2 + 116 >> 2] = 0;
   }
   HEAP8[i2 + 120 >> 0] = 1;
   HEAP32[i2 + 116 >> 2] = i7;
   HEAP32[i2 + 112 >> 2] = i5;
  }
 } else i4 = i5;
 i5 = i7 + (i4 << 2) | 0;
 if ((i5 | 0) != 0) HEAPF32[i5 >> 2] = +HEAPF32[i3 + 8 >> 2];
 HEAP32[i2 + 108 >> 2] = i4 + 1;
 i13 = HEAP32[i2 + 32 >> 2] | 0;
 HEAP32[i13 + 12 >> 2] = (HEAP32[i13 + 12 >> 2] | 0) + 1;
 HEAP32[i13 + 16 >> 2] = i7;
 i13 = ((HEAP32[i2 + 108 >> 2] | 0) / 3 | 0) + -1 | 0;
 STACKTOP = i1;
 return i13 | 0;
}
function _emscripten_bind_btCompoundShape_addChildShape_2(i1, i7, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 HEAP32[i1 + 68 >> 2] = (HEAP32[i1 + 68 >> 2] | 0) + 1;
 HEAP32[i4 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
 HEAP32[i4 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
 HEAP32[i4 + 32 >> 2] = HEAP32[i7 + 32 >> 2];
 HEAP32[i4 + 36 >> 2] = HEAP32[i7 + 36 >> 2];
 HEAP32[i4 + 40 >> 2] = HEAP32[i7 + 40 >> 2];
 HEAP32[i4 + 44 >> 2] = HEAP32[i7 + 44 >> 2];
 HEAP32[i4 + 48 >> 2] = HEAP32[i7 + 48 >> 2];
 HEAP32[i4 + 52 >> 2] = HEAP32[i7 + 52 >> 2];
 HEAP32[i4 + 56 >> 2] = HEAP32[i7 + 56 >> 2];
 HEAP32[i4 + 60 >> 2] = HEAP32[i7 + 60 >> 2];
 i2 = HEAP32[i5 + 4 >> 2] | 0;
 d3 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 15](i5);
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 127](i5, i7, i4 + 112 | 0, i4 + 96 | 0);
 d12 = +HEAPF32[i4 + 112 >> 2];
 if (+HEAPF32[i1 + 32 >> 2] > d12) HEAPF32[i1 + 32 >> 2] = d12;
 d12 = +HEAPF32[i4 + 96 >> 2];
 if (+HEAPF32[i1 + 48 >> 2] < d12) HEAPF32[i1 + 48 >> 2] = d12;
 d12 = +HEAPF32[i4 + 116 >> 2];
 if (+HEAPF32[i1 + 36 >> 2] > d12) HEAPF32[i1 + 36 >> 2] = d12;
 d12 = +HEAPF32[i4 + 100 >> 2];
 if (+HEAPF32[i1 + 52 >> 2] < d12) HEAPF32[i1 + 52 >> 2] = d12;
 d12 = +HEAPF32[i4 + 120 >> 2];
 if (+HEAPF32[i1 + 40 >> 2] > d12) HEAPF32[i1 + 40 >> 2] = d12;
 d12 = +HEAPF32[i4 + 104 >> 2];
 if (+HEAPF32[i1 + 56 >> 2] < d12) HEAPF32[i1 + 56 >> 2] = d12;
 i7 = HEAP32[i1 + 64 >> 2] | 0;
 if ((i7 | 0) == 0) {
  i7 = i1 + 16 | 0;
  i8 = 0;
 } else {
  HEAP32[i4 + 64 >> 2] = HEAP32[i4 + 112 >> 2];
  HEAP32[i4 + 68 >> 2] = HEAP32[i4 + 116 >> 2];
  HEAP32[i4 + 72 >> 2] = HEAP32[i4 + 120 >> 2];
  HEAP32[i4 + 76 >> 2] = HEAP32[i4 + 124 >> 2];
  HEAP32[i4 + 80 >> 2] = HEAP32[i4 + 96 >> 2];
  HEAP32[i4 + 84 >> 2] = HEAP32[i4 + 100 >> 2];
  HEAP32[i4 + 88 >> 2] = HEAP32[i4 + 104 >> 2];
  HEAP32[i4 + 92 >> 2] = HEAP32[i4 + 108 >> 2];
  i9 = HEAP32[i1 + 16 >> 2] | 0;
  i8 = HEAP32[i7 + 4 >> 2] | 0;
  if ((i8 | 0) == 0) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i11 = _malloc(63) | 0;
   if ((i11 | 0) != 0 ? (HEAP32[(i11 + 19 & -16) + -4 >> 2] = i11, (i11 + 19 & -16 | 0) != 0) : 0) {
    i8 = (i11 + 19 & -16) + 0 | 0;
    i10 = i8 + 44 | 0;
    do {
     HEAP32[i8 >> 2] = 0;
     i8 = i8 + 4 | 0;
    } while ((i8 | 0) < (i10 | 0));
    i8 = i11 + 19 & -16;
   } else i8 = 0;
  } else HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i8 + 32 >> 2] = 0;
  HEAP32[i8 + 36 >> 2] = i9;
  HEAP32[i8 + 40 >> 2] = 0;
  HEAP32[i8 + 0 >> 2] = HEAP32[i4 + 64 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i4 + 68 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i4 + 72 >> 2];
  HEAP32[i8 + 12 >> 2] = HEAP32[i4 + 76 >> 2];
  HEAP32[i8 + 16 >> 2] = HEAP32[i4 + 80 >> 2];
  HEAP32[i8 + 20 >> 2] = HEAP32[i4 + 84 >> 2];
  HEAP32[i8 + 24 >> 2] = HEAP32[i4 + 88 >> 2];
  HEAP32[i8 + 28 >> 2] = HEAP32[i4 + 92 >> 2];
  __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i7, HEAP32[i7 >> 2] | 0, i8);
  HEAP32[i7 + 12 >> 2] = (HEAP32[i7 + 12 >> 2] | 0) + 1;
  i7 = i1 + 16 | 0;
 }
 i11 = HEAP32[i7 >> 2] | 0;
 if ((i11 | 0) == (HEAP32[i1 + 20 >> 2] | 0) ? (i6 = (i11 | 0) == 0 ? 1 : i11 << 1, (i11 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) i9 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i9 = _malloc((i6 * 80 | 3) + 16 | 0) | 0;
   if ((i9 | 0) == 0) i9 = 0; else {
    HEAP32[(i9 + 19 & -16) + -4 >> 2] = i9;
    i9 = i9 + 19 & -16;
   }
   i11 = HEAP32[i7 >> 2] | 0;
  }
  if ((i11 | 0) > 0) {
   i10 = 0;
   do {
    i13 = i9 + (i10 * 80 | 0) | 0;
    i14 = HEAP32[i1 + 24 >> 2] | 0;
    i15 = i14 + (i10 * 80 | 0) | 0;
    HEAP32[i13 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    i13 = i9 + (i10 * 80 | 0) + 16 | 0;
    i15 = i14 + (i10 * 80 | 0) + 16 | 0;
    HEAP32[i13 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    i13 = i9 + (i10 * 80 | 0) + 32 | 0;
    i15 = i14 + (i10 * 80 | 0) + 32 | 0;
    HEAP32[i13 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    i13 = i9 + (i10 * 80 | 0) + 48 | 0;
    i15 = i14 + (i10 * 80 | 0) + 48 | 0;
    HEAP32[i13 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    i13 = i9 + (i10 * 80 | 0) + 64 | 0;
    i14 = i14 + (i10 * 80 | 0) + 64 | 0;
    HEAP32[i13 + 0 >> 2] = HEAP32[i14 + 0 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i11 | 0));
  }
  i10 = HEAP32[i1 + 24 >> 2] | 0;
  if ((i10 | 0) != 0) {
   if ((HEAP8[i1 + 28 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i10 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 24 >> 2] = 0;
  }
  HEAP8[i1 + 28 >> 0] = 1;
  HEAP32[i1 + 24 >> 2] = i9;
  HEAP32[i1 + 20 >> 2] = i6;
  i11 = HEAP32[i7 >> 2] | 0;
 }
 i15 = HEAP32[i1 + 24 >> 2] | 0;
 i14 = i15 + (i11 * 80 | 0) | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i14 = i15 + (i11 * 80 | 0) + 16 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i4 + 28 >> 2];
 i14 = i15 + (i11 * 80 | 0) + 32 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i4 + 44 >> 2];
 i14 = i15 + (i11 * 80 | 0) + 48 | 0;
 HEAP32[i14 + 0 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i4 + 60 >> 2];
 i15 = i15 + (i11 * 80 | 0) + 64 | 0;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i2;
 HEAPF32[i15 + 8 >> 2] = d3;
 HEAP32[i15 + 12 >> 2] = i8;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 STACKTOP = i4;
 return;
}
function __ZN16btDbvtBroadphase7setAabbEP17btBroadphaseProxyRK9btVector3S4_P12btDispatcher(i2, i1, i5, i4, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, d30 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 d14 = +HEAPF32[i5 >> 2];
 d12 = +HEAPF32[i5 + 4 >> 2];
 d10 = +HEAPF32[i5 + 8 >> 2];
 d7 = +HEAPF32[i5 + 12 >> 2];
 d13 = +HEAPF32[i4 >> 2];
 d11 = +HEAPF32[i4 + 4 >> 2];
 d9 = +HEAPF32[i4 + 8 >> 2];
 d6 = +HEAPF32[i4 + 12 >> 2];
 do if ((HEAP32[i1 + 60 >> 2] | 0) == 2) {
  i26 = HEAP32[i1 + 48 >> 2] | 0;
  __ZL10removeleafP6btDbvtP10btDbvtNode(i2 + 64 | 0, i26) | 0;
  i8 = HEAP32[i2 + 68 >> 2] | 0;
  if ((i8 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i8 + -4 >> 2] | 0);
  }
  HEAP32[i2 + 68 >> 2] = i26;
  HEAP32[i2 + 76 >> 2] = (HEAP32[i2 + 76 >> 2] | 0) + -1;
  i8 = HEAP32[i2 + 8 >> 2] | 0;
  if ((i8 | 0) == 0) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i26 = _malloc(63) | 0;
   if ((i26 | 0) != 0 ? (HEAP32[(i26 + 19 & -16) + -4 >> 2] = i26, (i26 + 19 & -16 | 0) != 0) : 0) {
    i27 = (i26 + 19 & -16) + 0 | 0;
    i8 = i27 + 44 | 0;
    do {
     HEAP32[i27 >> 2] = 0;
     i27 = i27 + 4 | 0;
    } while ((i27 | 0) < (i8 | 0));
    i8 = i26 + 19 & -16;
   } else i8 = 0;
  } else HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i8 + 32 >> 2] = 0;
  HEAP32[i8 + 36 >> 2] = i1;
  HEAP32[i8 + 40 >> 2] = 0;
  HEAPF32[i8 >> 2] = d14;
  HEAPF32[i8 + 4 >> 2] = d12;
  HEAPF32[i8 + 8 >> 2] = d10;
  HEAPF32[i8 + 12 >> 2] = d7;
  HEAPF32[i8 + 16 >> 2] = d13;
  HEAPF32[i8 + 20 >> 2] = d11;
  HEAPF32[i8 + 24 >> 2] = d9;
  HEAPF32[i8 + 28 >> 2] = d6;
  __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i2 + 4 | 0, HEAP32[i2 + 4 >> 2] | 0, i8);
  HEAP32[i2 + 16 >> 2] = (HEAP32[i2 + 16 >> 2] | 0) + 1;
  HEAP32[i1 + 48 >> 2] = i8;
  i8 = 1;
 } else {
  HEAP32[i2 + 168 >> 2] = (HEAP32[i2 + 168 >> 2] | 0) + 1;
  i8 = HEAP32[i1 + 48 >> 2] | 0;
  d21 = +HEAPF32[i8 >> 2];
  if (((((d21 <= d13 ? (d15 = +HEAPF32[i8 + 16 >> 2], d15 >= d14) : 0) ? (d16 = +HEAPF32[i8 + 4 >> 2], d16 <= d11) : 0) ? (d19 = +HEAPF32[i8 + 20 >> 2], d19 >= d12) : 0) ? (d17 = +HEAPF32[i8 + 8 >> 2], d17 <= d9) : 0) ? (d18 = +HEAPF32[i8 + 24 >> 2], d18 >= d10) : 0) {
   d30 = +HEAPF32[i1 + 16 >> 2];
   d25 = +HEAPF32[i1 + 20 >> 2];
   d24 = +HEAPF32[i1 + 24 >> 2];
   d20 = +HEAPF32[i2 + 140 >> 2];
   d22 = (+HEAPF32[i1 + 32 >> 2] - d30) * .5 * d20;
   d23 = d20 * (+HEAPF32[i1 + 36 >> 2] - d25) * .5;
   d20 = d20 * (+HEAPF32[i1 + 40 >> 2] - d24) * .5;
   if (d14 - d30 < 0.0) d22 = -d22;
   if (d12 - d25 < 0.0) d23 = -d23;
   if (d10 - d24 < 0.0) d20 = -d20;
   if (!(!(d21 <= d14) | !(d16 <= d12) | !(d17 <= d10) | !(d15 >= d13) | !(d19 >= d11) | !(d18 >= d9))) {
    i8 = 0;
    break;
   }
   if (d22 > 0.0) {
    d14 = d14 + -.05000000074505806;
    d13 = d22 + (d13 + .05000000074505806);
   } else {
    d14 = d22 + (d14 + -.05000000074505806);
    d13 = d13 + .05000000074505806;
   }
   if (d23 > 0.0) {
    d12 = d12 + -.05000000074505806;
    d11 = d23 + (d11 + .05000000074505806);
   } else {
    d12 = d23 + (d12 + -.05000000074505806);
    d11 = d11 + .05000000074505806;
   }
   if (d20 > 0.0) {
    d10 = d10 + -.05000000074505806;
    d9 = d20 + (d9 + .05000000074505806);
   } else {
    d10 = d20 + (d10 + -.05000000074505806);
    d9 = d9 + .05000000074505806;
   }
   i28 = __ZL10removeleafP6btDbvtP10btDbvtNode(i2 + 4 | 0, i8) | 0;
   L42 : do if ((i28 | 0) != 0) {
    i26 = HEAP32[i2 + 12 >> 2] | 0;
    if (!((i26 | 0) > -1)) {
     i28 = HEAP32[i2 + 4 >> 2] | 0;
     break;
    }
    if ((i26 | 0) > 0) {
     i27 = 0;
     while (1) {
      i29 = HEAP32[i28 + 32 >> 2] | 0;
      i27 = i27 + 1 | 0;
      if ((i29 | 0) == 0) break L42;
      if ((i27 | 0) >= (i26 | 0)) {
       i28 = i29;
       break;
      } else i28 = i29;
     }
    }
   } else i28 = 0; while (0);
   HEAPF32[i8 >> 2] = d14;
   HEAPF32[i8 + 4 >> 2] = d12;
   HEAPF32[i8 + 8 >> 2] = d10;
   HEAPF32[i8 + 12 >> 2] = d7;
   HEAPF32[i8 + 16 >> 2] = d13;
   HEAPF32[i8 + 20 >> 2] = d11;
   HEAPF32[i8 + 24 >> 2] = d9;
   HEAPF32[i8 + 28 >> 2] = d6;
   __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i2 + 4 | 0, i28, i8);
   HEAP32[i2 + 172 >> 2] = (HEAP32[i2 + 172 >> 2] | 0) + 1;
   i8 = 1;
   break;
  }
  i28 = __ZL10removeleafP6btDbvtP10btDbvtNode(i2 + 4 | 0, i8) | 0;
  L52 : do if ((i28 | 0) != 0) {
   i26 = HEAP32[i2 + 12 >> 2] | 0;
   if (!((i26 | 0) > -1)) {
    i28 = HEAP32[i2 + 4 >> 2] | 0;
    break;
   }
   if ((i26 | 0) > 0) {
    i27 = 0;
    while (1) {
     i29 = HEAP32[i28 + 32 >> 2] | 0;
     i27 = i27 + 1 | 0;
     if ((i29 | 0) == 0) break L52;
     if ((i27 | 0) >= (i26 | 0)) {
      i28 = i29;
      break;
     } else i28 = i29;
    }
   }
  } else i28 = 0; while (0);
  HEAPF32[i8 >> 2] = d14;
  HEAPF32[i8 + 4 >> 2] = d12;
  HEAPF32[i8 + 8 >> 2] = d10;
  HEAPF32[i8 + 12 >> 2] = d7;
  HEAPF32[i8 + 16 >> 2] = d13;
  HEAPF32[i8 + 20 >> 2] = d11;
  HEAPF32[i8 + 24 >> 2] = d9;
  HEAPF32[i8 + 28 >> 2] = d6;
  __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i2 + 4 | 0, i28, i8);
  HEAP32[i2 + 172 >> 2] = (HEAP32[i2 + 172 >> 2] | 0) + 1;
  i8 = 1;
 } while (0);
 i26 = HEAP32[i1 + 52 >> 2] | 0;
 i27 = HEAP32[i1 + 56 >> 2] | 0;
 if ((i26 | 0) == 0) HEAP32[i2 + (HEAP32[i1 + 60 >> 2] << 2) + 124 >> 2] = i27; else HEAP32[i26 + 56 >> 2] = i27;
 i26 = HEAP32[i1 + 56 >> 2] | 0;
 if ((i26 | 0) != 0) HEAP32[i26 + 52 >> 2] = HEAP32[i1 + 52 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 144 >> 2];
 i4 = i2 + (HEAP32[i2 + 144 >> 2] << 2) + 124 | 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = HEAP32[i4 >> 2];
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) != 0) HEAP32[i5 + 52 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 if (!i8) {
  STACKTOP = i3;
  return;
 }
 HEAP8[i2 + 194 >> 0] = 1;
 if ((HEAP8[i2 + 193 >> 0] | 0) != 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i3 >> 2] = 11696;
 HEAP32[i3 + 4 >> 2] = i2;
 __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i2 + 64 | 0, HEAP32[i2 + 64 >> 2] | 0, HEAP32[i1 + 48 >> 2] | 0, i3);
 __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i2 + 4 | 0, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i1 + 48 >> 2] | 0, i3);
 STACKTOP = i3;
 return;
}
function __ZN30btKinematicCharacterController7preStepEP16btCollisionWorld(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAP8[i1 + 148 >> 0] = 0;
 i2 = 0;
 while (1) {
  i19 = HEAP32[i1 + 12 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] & 127](i19, (HEAP32[i1 + 8 >> 2] | 0) + 4 | 0, i5 + 80 | 0, i5 + 64 | 0);
  i19 = HEAP32[i4 + 68 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 16 >> 2] & 31](i19, HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 188 >> 2] | 0, i5 + 80 | 0, i5 + 64 | 0, HEAP32[i4 + 24 >> 2] | 0);
  i19 = HEAP32[i4 + 24 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 32 >> 2] & 127](i19, HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 284 >> 2] | 0, i4 + 28 | 0, i19);
  i19 = HEAP32[i1 + 8 >> 2] | 0;
  HEAP32[i1 + 92 >> 2] = HEAP32[i19 + 52 >> 2];
  HEAP32[i1 + 96 >> 2] = HEAP32[i19 + 56 >> 2];
  HEAP32[i1 + 100 >> 2] = HEAP32[i19 + 60 >> 2];
  HEAP32[i1 + 104 >> 2] = HEAP32[i19 + 64 >> 2];
  i19 = HEAP32[i19 + 284 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0) > 0) {
   i6 = 0;
   d14 = 0.0;
   i11 = 0;
   do {
    i8 = HEAP32[i1 + 132 >> 2] | 0;
    if ((i8 | 0) < 0) {
     if ((HEAP32[i1 + 136 >> 2] | 0) < 0) {
      i7 = HEAP32[i1 + 140 >> 2] | 0;
      if ((i7 | 0) != 0) {
       if ((HEAP8[i1 + 144 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i7 + -4 >> 2] | 0);
       }
       HEAP32[i1 + 140 >> 2] = 0;
      }
      HEAP8[i1 + 144 >> 0] = 1;
      HEAP32[i1 + 140 >> 2] = 0;
      HEAP32[i1 + 136 >> 2] = 0;
     }
     do {
      i7 = (HEAP32[i1 + 140 >> 2] | 0) + (i8 << 2) | 0;
      if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
      i8 = i8 + 1 | 0;
     } while ((i8 | 0) != 0);
    }
    HEAP32[i1 + 132 >> 2] = 0;
    i8 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 284 >> 2] | 0;
    i8 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] & 127](i8) | 0) + 12 | 0;
    i8 = HEAP32[i8 >> 2] | 0;
    i19 = HEAP32[HEAP32[i8 + (i6 << 4) >> 2] >> 2] | 0;
    i7 = HEAP32[HEAP32[i8 + (i6 << 4) + 4 >> 2] >> 2] | 0;
    if (!((i19 | 0) != 0 ? (HEAP32[i19 + 204 >> 2] & 4 | 0) != 0 : 0)) i3 = 15;
    do if ((i3 | 0) == 15) {
     i3 = 0;
     if ((i7 | 0) != 0 ? (HEAP32[i7 + 204 >> 2] & 4 | 0) != 0 : 0) break;
     i7 = HEAP32[i8 + (i6 << 4) + 8 >> 2] | 0;
     if ((i7 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 127](i7, i1 + 128 | 0);
     i10 = HEAP32[i1 + 132 >> 2] | 0;
     if ((i10 | 0) > 0) {
      i9 = HEAP32[i1 + 140 >> 2] | 0;
      i8 = HEAP32[i1 + 8 >> 2] | 0;
      i7 = 0;
      i17 = i11;
      while (1) {
       i11 = HEAP32[i9 + (i7 << 2) >> 2] | 0;
       d12 = (HEAP32[i11 + 740 >> 2] | 0) == (i8 | 0) ? -1.0 : 1.0;
       i15 = HEAP32[i11 + 748 >> 2] | 0;
       if ((i15 | 0) > 0) {
        i13 = 0;
        do {
         d16 = +HEAPF32[i11 + (i13 * 184 | 0) + 84 >> 2];
         if (d16 < 0.0) {
          i18 = i11 + (i13 * 184 | 0) + 68 | 0;
          if (d16 < d14) {
           i19 = i11 + (i13 * 184 | 0) + 72 | 0;
           d20 = d12 * +HEAPF32[i19 >> 2];
           i17 = i11 + (i13 * 184 | 0) + 76 | 0;
           d14 = d12 * +HEAPF32[i17 >> 2];
           HEAPF32[i1 + 152 >> 2] = d12 * +HEAPF32[i18 >> 2];
           HEAPF32[i1 + 156 >> 2] = d20;
           HEAPF32[i1 + 160 >> 2] = d14;
           HEAPF32[i1 + 164 >> 2] = 0.0;
           i15 = HEAP32[i11 + 748 >> 2] | 0;
           d14 = d16;
          } else {
           i19 = i11 + (i13 * 184 | 0) + 72 | 0;
           i17 = i11 + (i13 * 184 | 0) + 76 | 0;
          }
          d21 = d16 * d12 * +HEAPF32[i19 >> 2] * .20000000298023224;
          d20 = d16 * d12 * +HEAPF32[i17 >> 2] * .20000000298023224;
          HEAPF32[i1 + 92 >> 2] = d16 * d12 * +HEAPF32[i18 >> 2] * .20000000298023224 + +HEAPF32[i1 + 92 >> 2];
          HEAPF32[i1 + 96 >> 2] = d21 + +HEAPF32[i1 + 96 >> 2];
          HEAPF32[i1 + 100 >> 2] = d20 + +HEAPF32[i1 + 100 >> 2];
          i17 = 1;
         }
         i13 = i13 + 1 | 0;
        } while ((i13 | 0) < (i15 | 0));
        i11 = i17;
       } else i11 = i17;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i10 | 0)) break; else i17 = i11;
      }
     }
    } while (0);
    i6 = i6 + 1 | 0;
    i19 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 284 >> 2] | 0;
   } while ((i6 | 0) < (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0));
  } else i11 = 0;
  i19 = HEAP32[i1 + 8 >> 2] | 0;
  HEAP32[i5 + 0 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i19 + 12 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i19 + 16 >> 2];
  HEAP32[i5 + 16 >> 2] = HEAP32[i19 + 20 >> 2];
  HEAP32[i5 + 20 >> 2] = HEAP32[i19 + 24 >> 2];
  HEAP32[i5 + 24 >> 2] = HEAP32[i19 + 28 >> 2];
  HEAP32[i5 + 28 >> 2] = HEAP32[i19 + 32 >> 2];
  HEAP32[i5 + 32 >> 2] = HEAP32[i19 + 36 >> 2];
  HEAP32[i5 + 36 >> 2] = HEAP32[i19 + 40 >> 2];
  HEAP32[i5 + 40 >> 2] = HEAP32[i19 + 44 >> 2];
  HEAP32[i5 + 44 >> 2] = HEAP32[i19 + 48 >> 2];
  HEAP32[i5 + 48 >> 2] = HEAP32[i1 + 92 >> 2];
  HEAP32[i5 + 52 >> 2] = HEAP32[i1 + 96 >> 2];
  HEAP32[i5 + 56 >> 2] = HEAP32[i1 + 100 >> 2];
  HEAP32[i5 + 60 >> 2] = HEAP32[i1 + 104 >> 2];
  HEAP32[i19 + 260 >> 2] = (HEAP32[i19 + 260 >> 2] | 0) + 1;
  HEAP32[i19 + 4 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i19 + 12 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i19 + 16 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i19 + 20 >> 2] = HEAP32[i5 + 16 >> 2];
  HEAP32[i19 + 24 >> 2] = HEAP32[i5 + 20 >> 2];
  HEAP32[i19 + 28 >> 2] = HEAP32[i5 + 24 >> 2];
  HEAP32[i19 + 32 >> 2] = HEAP32[i5 + 28 >> 2];
  HEAP32[i19 + 36 >> 2] = HEAP32[i5 + 32 >> 2];
  HEAP32[i19 + 40 >> 2] = HEAP32[i5 + 36 >> 2];
  HEAP32[i19 + 44 >> 2] = HEAP32[i5 + 40 >> 2];
  HEAP32[i19 + 48 >> 2] = HEAP32[i5 + 44 >> 2];
  HEAP32[i19 + 52 >> 2] = HEAP32[i5 + 48 >> 2];
  HEAP32[i19 + 56 >> 2] = HEAP32[i5 + 52 >> 2];
  HEAP32[i19 + 60 >> 2] = HEAP32[i5 + 56 >> 2];
  HEAP32[i19 + 64 >> 2] = HEAP32[i5 + 60 >> 2];
  if (!i11) {
   i3 = 32;
   break;
  }
  HEAP8[i1 + 148 >> 0] = 1;
  if ((i2 | 0) > 3) {
   i3 = 32;
   break;
  } else i2 = i2 + 1 | 0;
 }
 if ((i3 | 0) == 32) {
  i19 = (HEAP32[i1 + 8 >> 2] | 0) + 52 | 0;
  HEAP32[i1 + 92 >> 2] = HEAP32[i19 + 0 >> 2];
  HEAP32[i1 + 96 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i1 + 100 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAP32[i1 + 104 >> 2] = HEAP32[i19 + 12 >> 2];
  _memmove(i1 + 112 | 0, i19 | 0, 16) | 0;
  STACKTOP = i5;
  return;
 }
}
function __ZN16btManifoldResult15addContactPointERK9btVector3S2_f(i2, i15, i14, d13) {
 i2 = i2 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 d13 = +d13;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (+HEAPF32[i1 + 752 >> 2] < d13) {
  STACKTOP = i5;
  return;
 }
 i3 = HEAP32[i1 + 740 >> 2] | 0;
 i6 = (HEAP32[i2 + 8 >> 2] | 0) + 8 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 d10 = +HEAPF32[i14 >> 2];
 d16 = +HEAPF32[i15 >> 2] * d13 + d10;
 d8 = +HEAPF32[i14 + 4 >> 2];
 d11 = +HEAPF32[i15 + 4 >> 2] * d13 + d8;
 d9 = +HEAPF32[i14 + 8 >> 2];
 d12 = +HEAPF32[i15 + 8 >> 2] * d13 + d9;
 if ((i3 | 0) != (i4 | 0)) {
  i7 = HEAP32[i2 + 12 >> 2] | 0;
  i21 = HEAP32[i7 + 8 >> 2] | 0;
  d24 = d16 - +HEAPF32[i21 + 52 >> 2];
  d18 = d11 - +HEAPF32[i21 + 56 >> 2];
  d19 = d12 - +HEAPF32[i21 + 60 >> 2];
  d23 = d10 - +HEAPF32[i4 + 52 >> 2];
  d22 = d8 - +HEAPF32[i4 + 56 >> 2];
  d17 = d9 - +HEAPF32[i4 + 60 >> 2];
  d10 = d24 * +HEAPF32[i21 + 4 >> 2] + d18 * +HEAPF32[i21 + 20 >> 2] + d19 * +HEAPF32[i21 + 36 >> 2];
  d8 = d24 * +HEAPF32[i21 + 8 >> 2] + d18 * +HEAPF32[i21 + 24 >> 2] + d19 * +HEAPF32[i21 + 40 >> 2];
  d9 = d24 * +HEAPF32[i21 + 12 >> 2] + d18 * +HEAPF32[i21 + 28 >> 2] + d19 * +HEAPF32[i21 + 44 >> 2];
  d19 = d23 * +HEAPF32[i4 + 4 >> 2] + d22 * +HEAPF32[i4 + 20 >> 2] + d17 * +HEAPF32[i4 + 36 >> 2];
  d18 = d23 * +HEAPF32[i4 + 8 >> 2] + d22 * +HEAPF32[i4 + 24 >> 2] + d17 * +HEAPF32[i4 + 40 >> 2];
  d17 = d23 * +HEAPF32[i4 + 12 >> 2] + d22 * +HEAPF32[i4 + 28 >> 2] + d17 * +HEAPF32[i4 + 44 >> 2];
 } else {
  d22 = d16 - +HEAPF32[i3 + 52 >> 2];
  d18 = d11 - +HEAPF32[i3 + 56 >> 2];
  d19 = d12 - +HEAPF32[i3 + 60 >> 2];
  i7 = HEAP32[i2 + 12 >> 2] | 0;
  i21 = HEAP32[i7 + 8 >> 2] | 0;
  d23 = d10 - +HEAPF32[i21 + 52 >> 2];
  d24 = d8 - +HEAPF32[i21 + 56 >> 2];
  d17 = d9 - +HEAPF32[i21 + 60 >> 2];
  d10 = d22 * +HEAPF32[i3 + 4 >> 2] + d18 * +HEAPF32[i3 + 20 >> 2] + d19 * +HEAPF32[i3 + 36 >> 2];
  d8 = d22 * +HEAPF32[i3 + 8 >> 2] + d18 * +HEAPF32[i3 + 24 >> 2] + d19 * +HEAPF32[i3 + 40 >> 2];
  d9 = d22 * +HEAPF32[i3 + 12 >> 2] + d18 * +HEAPF32[i3 + 28 >> 2] + d19 * +HEAPF32[i3 + 44 >> 2];
  d19 = d23 * +HEAPF32[i21 + 4 >> 2] + d24 * +HEAPF32[i21 + 20 >> 2] + d17 * +HEAPF32[i21 + 36 >> 2];
  d18 = d23 * +HEAPF32[i21 + 8 >> 2] + d24 * +HEAPF32[i21 + 24 >> 2] + d17 * +HEAPF32[i21 + 40 >> 2];
  d17 = d23 * +HEAPF32[i21 + 12 >> 2] + d24 * +HEAPF32[i21 + 28 >> 2] + d17 * +HEAPF32[i21 + 44 >> 2];
 }
 HEAPF32[i5 >> 2] = d10;
 HEAPF32[i5 + 4 >> 2] = d8;
 HEAPF32[i5 + 8 >> 2] = d9;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 HEAPF32[i5 + 16 >> 2] = d19;
 HEAPF32[i5 + 20 >> 2] = d18;
 HEAPF32[i5 + 24 >> 2] = d17;
 HEAPF32[i5 + 28 >> 2] = 0.0;
 HEAP32[i5 + 64 >> 2] = HEAP32[i15 + 0 >> 2];
 HEAP32[i5 + 68 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i5 + 72 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i5 + 76 >> 2] = HEAP32[i15 + 12 >> 2];
 HEAPF32[i5 + 80 >> 2] = d13;
 HEAPF32[i5 + 84 >> 2] = 0.0;
 HEAPF32[i5 + 88 >> 2] = 0.0;
 HEAPF32[i5 + 92 >> 2] = 0.0;
 HEAP32[i5 + 112 >> 2] = 0;
 HEAP8[i5 + 116 >> 0] = 0;
 HEAP32[i5 + 120 >> 2] = 0;
 HEAP32[i5 + 124 >> 2] = 0;
 HEAP32[i5 + 128 >> 2] = 0;
 HEAP32[i5 + 132 >> 2] = 0;
 HEAP32[i5 + 136 >> 2] = 0;
 HEAP32[i5 + 140 >> 2] = 0;
 HEAP32[i5 + 144 >> 2] = 0;
 HEAP32[i5 + 148 >> 2] = 0;
 HEAPF32[i5 + 48 >> 2] = d16;
 HEAPF32[i5 + 52 >> 2] = d11;
 HEAPF32[i5 + 56 >> 2] = d12;
 HEAPF32[i5 + 60 >> 2] = 0.0;
 HEAP32[i5 + 32 >> 2] = HEAP32[i14 + 0 >> 2];
 HEAP32[i5 + 36 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i5 + 40 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i5 + 44 >> 2] = HEAP32[i14 + 12 >> 2];
 d11 = +HEAPF32[i1 + 752 >> 2];
 i15 = HEAP32[i1 + 748 >> 2] | 0;
 if ((i15 | 0) > 0) {
  i14 = 0;
  i21 = -1;
  d13 = d11 * d11;
  while (1) {
   d11 = +HEAPF32[i1 + (i14 * 184 | 0) + 4 >> 2] - d10;
   d12 = +HEAPF32[i1 + (i14 * 184 | 0) + 8 >> 2] - d8;
   d16 = +HEAPF32[i1 + (i14 * 184 | 0) + 12 >> 2] - d9;
   i20 = d11 * d11 + d12 * d12 + d16 * d16 < d13;
   i21 = i20 ? i14 : i21;
   i14 = i14 + 1 | 0;
   if ((i14 | 0) == (i15 | 0)) break; else d13 = i20 ? d11 * d11 + d12 * d12 + d16 * d16 : d13;
  }
 } else i21 = -1;
 i15 = HEAP32[i6 >> 2] | 0;
 i20 = HEAP32[i7 + 8 >> 2] | 0;
 d8 = +HEAPF32[i15 + 224 >> 2] * +HEAPF32[i20 + 224 >> 2];
 d8 = d8 < -10.0 ? -10.0 : d8;
 HEAPF32[i5 + 84 >> 2] = d8 > 10.0 ? 10.0 : d8;
 HEAPF32[i5 + 92 >> 2] = +HEAPF32[i15 + 228 >> 2] * +HEAPF32[i20 + 228 >> 2];
 d8 = +HEAPF32[i15 + 232 >> 2] * +HEAPF32[i20 + 232 >> 2];
 d8 = d8 < -10.0 ? -10.0 : d8;
 HEAPF32[i5 + 88 >> 2] = d8 > 10.0 ? 10.0 : d8;
 d8 = +HEAPF32[i5 + 72 >> 2];
 if (+Math_abs(+d8) > .7071067690849304) {
  d22 = +HEAPF32[i5 + 68 >> 2];
  d24 = 1.0 / +Math_sqrt(+(d8 * d8 + d22 * d22));
  HEAPF32[i5 + 152 >> 2] = 0.0;
  HEAPF32[i5 + 156 >> 2] = -(d24 * d8);
  HEAPF32[i5 + 160 >> 2] = d24 * d22;
  HEAPF32[i5 + 168 >> 2] = (d8 * d8 + d22 * d22) * d24;
  d23 = +HEAPF32[i5 + 64 >> 2];
  HEAPF32[i5 + 172 >> 2] = -(d23 * d24 * d22);
  HEAPF32[i5 + 176 >> 2] = d23 * -(d24 * d8);
 } else {
  d22 = +HEAPF32[i5 + 64 >> 2];
  d23 = +HEAPF32[i5 + 68 >> 2];
  d24 = 1.0 / +Math_sqrt(+(d22 * d22 + d23 * d23));
  HEAPF32[i5 + 152 >> 2] = -(d23 * d24);
  HEAPF32[i5 + 156 >> 2] = d24 * d22;
  HEAPF32[i5 + 160 >> 2] = 0.0;
  HEAPF32[i5 + 168 >> 2] = -(d8 * d24 * d22);
  HEAPF32[i5 + 172 >> 2] = d8 * -(d23 * d24);
  HEAPF32[i5 + 176 >> 2] = (d22 * d22 + d23 * d23) * d24;
 }
 if ((i3 | 0) != (i4 | 0)) {
  HEAP32[i5 + 96 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i5 + 100 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i5 + 104 >> 2] = HEAP32[i2 + 28 >> 2];
  HEAP32[i5 + 108 >> 2] = HEAP32[i2 + 24 >> 2];
 } else {
  HEAP32[i5 + 96 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i5 + 100 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i5 + 104 >> 2] = HEAP32[i2 + 24 >> 2];
  HEAP32[i5 + 108 >> 2] = HEAP32[i2 + 28 >> 2];
 }
 if ((i21 | 0) > -1) {
  i20 = i1 + (i21 * 184 | 0) + 152 | 0;
  i15 = HEAP32[i20 >> 2] | 0;
  i6 = i1 + (i21 * 184 | 0) + 124 | 0;
  d22 = +HEAPF32[i6 >> 2];
  i7 = i1 + (i21 * 184 | 0) + 128 | 0;
  d23 = +HEAPF32[i7 >> 2];
  i14 = i1 + (i21 * 184 | 0) + 132 | 0;
  d24 = +HEAPF32[i14 >> 2];
  i4 = i1 + (i21 * 184 | 0) + 116 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  _memcpy(i1 + (i21 * 184 | 0) + 4 | 0, i5 | 0, 184) | 0;
  HEAP32[i4 >> 2] = i3;
  HEAPF32[i6 >> 2] = d22;
  HEAPF32[i7 >> 2] = d23;
  HEAPF32[i14 >> 2] = d24;
  HEAP32[i20 >> 2] = i15;
  STACKTOP = i5;
  return;
 } else {
  __ZN20btPersistentManifold16addManifoldPointERK15btManifoldPointb(i1, i5) | 0;
  STACKTOP = i5;
  return;
 }
}
function __ZN22SphereTriangleDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i12, i1, i3, i4, i2) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 d13 = +HEAPF32[i1 + 48 >> 2] - +HEAPF32[i1 + 112 >> 2];
 d6 = +HEAPF32[i1 + 52 >> 2] - +HEAPF32[i1 + 116 >> 2];
 d7 = +HEAPF32[i1 + 56 >> 2] - +HEAPF32[i1 + 120 >> 2];
 d10 = d13 * +HEAPF32[i1 + 64 >> 2] + d6 * +HEAPF32[i1 + 80 >> 2] + d7 * +HEAPF32[i1 + 96 >> 2];
 d9 = d13 * +HEAPF32[i1 + 68 >> 2] + d6 * +HEAPF32[i1 + 84 >> 2] + d7 * +HEAPF32[i1 + 100 >> 2];
 d7 = d13 * +HEAPF32[i1 + 72 >> 2] + d6 * +HEAPF32[i1 + 88 >> 2] + d7 * +HEAPF32[i1 + 104 >> 2];
 i14 = HEAP32[i12 + 8 >> 2] | 0;
 i16 = HEAP32[i12 + 4 >> 2] | 0;
 d6 = +HEAPF32[i16 + 28 >> 2] * +HEAPF32[i16 + 12 >> 2];
 d13 = d6 + +HEAPF32[i12 + 12 >> 2];
 d20 = +HEAPF32[i14 + 72 >> 2];
 d18 = +HEAPF32[i14 + 56 >> 2];
 d17 = +HEAPF32[i14 + 76 >> 2];
 d25 = +HEAPF32[i14 + 60 >> 2];
 d19 = +HEAPF32[i14 + 80 >> 2];
 d21 = +HEAPF32[i14 + 64 >> 2];
 d22 = +HEAPF32[i14 + 88 >> 2];
 d23 = +HEAPF32[i14 + 92 >> 2];
 d24 = +HEAPF32[i14 + 96 >> 2];
 d26 = (d17 - d25) * (d24 - d21) - (d19 - d21) * (d23 - d25);
 d8 = (d19 - d21) * (d22 - d18) - (d20 - d18) * (d24 - d21);
 d5 = (d20 - d18) * (d23 - d25) - (d17 - d25) * (d22 - d18);
 d11 = 1.0 / +Math_sqrt(+(d5 * d5 + (d26 * d26 + d8 * d8)));
 d15 = (d10 - d18) * d11 * d26 + d11 * d8 * (d9 - d25) + d11 * d5 * (d7 - d21);
 if (d15 < 0.0) {
  d15 = d15 * -1.0;
  d5 = d11 * d5 * -1.0;
  d8 = d11 * d8 * -1.0;
  d11 = d11 * d26 * -1.0;
 } else {
  d5 = d11 * d5;
  d8 = d11 * d8;
  d11 = d11 * d26;
 }
 if (!(d15 < d13)) {
  STACKTOP = i4;
  return;
 }
 d26 = (d7 - d21) * ((d20 - d18) * d8 - (d17 - d25) * d11) + ((d10 - d18) * ((d17 - d25) * d5 - (d19 - d21) * d8) + (d9 - d25) * ((d19 - d21) * d11 - (d20 - d18) * d5));
 d27 = (d7 - d19) * ((d22 - d20) * d8 - (d23 - d17) * d11) + ((d10 - d20) * ((d23 - d17) * d5 - (d24 - d19) * d8) + (d9 - d17) * ((d24 - d19) * d11 - (d22 - d20) * d5));
 d28 = (d7 - d24) * ((d18 - d22) * d8 - (d25 - d23) * d11) + ((d10 - d22) * ((d25 - d23) * d5 - (d21 - d24) * d8) + (d9 - d23) * ((d21 - d24) * d11 - (d18 - d22) * d5));
 if (!(d26 > 0.0 & d27 > 0.0 & d28 > 0.0) ? !(d26 <= 0.0) | !(d27 <= 0.0) | !(d28 <= 0.0) : 0) {
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 100 >> 2] & 127](i14) | 0) <= 0) {
   STACKTOP = i4;
   return;
  }
  d15 = 0.0;
  d17 = 0.0;
  d22 = 0.0;
  i16 = 0;
  i14 = 0;
  do {
   i29 = HEAP32[i12 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i29 >> 2] | 0) + 104 >> 2] & 127](i29, i14, i4 + 80 | 0, i4 + 64 | 0);
   d20 = +HEAPF32[i4 + 80 >> 2];
   d23 = +HEAPF32[i4 + 84 >> 2];
   d27 = +HEAPF32[i4 + 88 >> 2];
   d19 = +HEAPF32[i4 + 64 >> 2] - d20;
   d21 = +HEAPF32[i4 + 68 >> 2] - d23;
   d28 = +HEAPF32[i4 + 72 >> 2] - d27;
   do if ((d10 - d20) * d19 + (d9 - d23) * d21 + (d7 - d27) * d28 > 0.0) if ((d10 - d20) * d19 + (d9 - d23) * d21 + (d7 - d27) * d28 < d19 * d19 + d21 * d21 + d28 * d28) {
    d18 = ((d10 - d20) * d19 + (d9 - d23) * d21 + (d7 - d27) * d28) / (d19 * d19 + d21 * d21 + d28 * d28);
    d24 = d10 - d20 - d19 * d18;
    d25 = d9 - d23 - d21 * d18;
    d26 = d7 - d27 - d28 * d18;
    break;
   } else {
    d24 = d10 - d20 - d19;
    d25 = d9 - d23 - d21;
    d26 = d7 - d27 - d28;
    d18 = 1.0;
    break;
   } else {
    d24 = d10 - d20;
    d25 = d9 - d23;
    d26 = d7 - d27;
    d18 = 0.0;
   } while (0);
   if (d26 * d26 + (d25 * d25 + d24 * d24) < d13 * d13) {
    d22 = d27 + d28 * d18;
    d17 = d23 + d21 * d18;
    d15 = d20 + d19 * d18;
    i16 = 1;
   }
   i14 = i14 + 1 | 0;
   i29 = HEAP32[i12 + 8 >> 2] | 0;
  } while ((i14 | 0) < (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i29 >> 2] | 0) + 100 >> 2] & 127](i29) | 0));
  if ((i16 & 1) == 0) {
   STACKTOP = i4;
   return;
  } else {
   d18 = d13 * d13;
   d13 = d15;
  }
 } else {
  d18 = d13 * d13;
  d13 = d10 - d11 * d15;
  d17 = d9 - d8 * d15;
  d22 = d7 - d5 * d15;
 }
 d10 = d10 - d13;
 d9 = d9 - d17;
 d7 = d7 - d22;
 if (!(d10 * d10 + d9 * d9 + d7 * d7 < d18)) {
  STACKTOP = i4;
  return;
 }
 if (d10 * d10 + d9 * d9 + d7 * d7 > 1.1920928955078125e-7) {
  d5 = +Math_sqrt(+(d10 * d10 + d9 * d9 + d7 * d7));
  d6 = d6 - d5;
  d11 = d10 * (1.0 / d5);
  d8 = d9 * (1.0 / d5);
  d5 = d7 * (1.0 / d5);
 }
 d6 = -d6;
 if (i2) {
  d23 = +HEAPF32[i1 + 64 >> 2];
  d24 = +HEAPF32[i1 + 68 >> 2];
  d25 = +HEAPF32[i1 + 72 >> 2];
  d26 = d23 * d11 + d24 * d8 + d25 * d5;
  d10 = +HEAPF32[i1 + 80 >> 2];
  d15 = +HEAPF32[i1 + 84 >> 2];
  d18 = +HEAPF32[i1 + 88 >> 2];
  d27 = d11 * d10 + d8 * d15 + d5 * d18;
  d19 = +HEAPF32[i1 + 96 >> 2];
  d20 = +HEAPF32[i1 + 100 >> 2];
  d21 = +HEAPF32[i1 + 104 >> 2];
  d28 = d11 * d19 + d8 * d20 + d5 * d21;
  HEAPF32[i4 + 48 >> 2] = -d26;
  HEAPF32[i4 + 52 >> 2] = -d27;
  HEAPF32[i4 + 56 >> 2] = -d28;
  HEAPF32[i4 + 60 >> 2] = 0.0;
  d27 = d13 * d10 + d17 * d15 + d22 * d18 + +HEAPF32[i1 + 116 >> 2] + d27 * d6;
  d28 = d13 * d19 + d17 * d20 + d22 * d21 + +HEAPF32[i1 + 120 >> 2] + d28 * d6;
  HEAPF32[i4 + 32 >> 2] = d13 * d23 + d17 * d24 + d22 * d25 + +HEAPF32[i1 + 112 >> 2] + d26 * d6;
  HEAPF32[i4 + 36 >> 2] = d27;
  HEAPF32[i4 + 40 >> 2] = d28;
  HEAPF32[i4 + 44 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 15](i3, i4 + 48 | 0, i4 + 32 | 0, d6);
  STACKTOP = i4;
  return;
 } else {
  i29 = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0;
  d24 = +HEAPF32[i1 + 64 >> 2];
  d25 = +HEAPF32[i1 + 68 >> 2];
  d26 = +HEAPF32[i1 + 72 >> 2];
  d19 = +HEAPF32[i1 + 80 >> 2];
  d20 = +HEAPF32[i1 + 84 >> 2];
  d27 = +HEAPF32[i1 + 88 >> 2];
  d21 = +HEAPF32[i1 + 96 >> 2];
  d23 = +HEAPF32[i1 + 100 >> 2];
  d28 = +HEAPF32[i1 + 104 >> 2];
  HEAPF32[i4 + 16 >> 2] = d24 * d11 + d25 * d8 + d26 * d5;
  HEAPF32[i4 + 20 >> 2] = d11 * d19 + d8 * d20 + d5 * d27;
  HEAPF32[i4 + 24 >> 2] = d11 * d21 + d8 * d23 + d5 * d28;
  HEAPF32[i4 + 28 >> 2] = 0.0;
  d27 = d13 * d19 + d17 * d20 + d22 * d27 + +HEAPF32[i1 + 116 >> 2];
  d28 = d13 * d21 + d17 * d23 + d22 * d28 + +HEAPF32[i1 + 120 >> 2];
  HEAPF32[i4 >> 2] = d13 * d24 + d17 * d25 + d22 * d26 + +HEAPF32[i1 + 112 >> 2];
  HEAPF32[i4 + 4 >> 2] = d27;
  HEAPF32[i4 + 8 >> 2] = d28;
  HEAPF32[i4 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiid[i29 & 15](i3, i4 + 16 | 0, i4, d6);
  STACKTOP = i4;
  return;
 }
}
function __ZN27InplaceSolverIslandCallback13processIslandEPP17btCollisionObjectiPP20btPersistentManifoldii(i1, i7, i8, i5, i6, i9) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = STACKTOP;
 if ((i9 | 0) < 0) {
  i15 = HEAP32[i1 + 8 >> 2] | 0;
  +FUNCTION_TABLE_diiiiiiiiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 3](i15, i7, i8, i5, i6, HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 i10 = HEAP32[i1 + 16 >> 2] | 0;
 L5 : do if ((i10 | 0) > 0) {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i12 = 0;
  while (1) {
   i3 = i4 + (i12 << 2) | 0;
   i13 = HEAP32[i3 >> 2] | 0;
   i11 = HEAP32[(HEAP32[i13 + 28 >> 2] | 0) + 208 >> 2] | 0;
   if ((i11 | 0) > -1) i13 = i11; else i13 = HEAP32[(HEAP32[i13 + 32 >> 2] | 0) + 208 >> 2] | 0;
   i11 = i12 + 1 | 0;
   if ((i13 | 0) == (i9 | 0)) break L5;
   if ((i11 | 0) < (i10 | 0)) i12 = i11; else {
    i12 = i11;
    i3 = 0;
    break;
   }
  }
 } else {
  i12 = 0;
  i3 = 0;
 } while (0);
 if ((i12 | 0) < (i10 | 0)) {
  i11 = HEAP32[i1 + 12 >> 2] | 0;
  i4 = 0;
  do {
   i14 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
   i13 = HEAP32[(HEAP32[i14 + 28 >> 2] | 0) + 208 >> 2] | 0;
   if (!((i13 | 0) > -1)) i13 = HEAP32[(HEAP32[i14 + 32 >> 2] | 0) + 208 >> 2] | 0;
   i4 = ((i13 | 0) == (i9 | 0) & 1) + i4 | 0;
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) < (i10 | 0));
 } else i4 = 0;
 i9 = HEAP32[i1 + 4 >> 2] | 0;
 if ((HEAP32[i9 + 72 >> 2] | 0) < 2) {
  i15 = HEAP32[i1 + 8 >> 2] | 0;
  +FUNCTION_TABLE_diiiiiiiiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 3](i15, i7, i8, i5, i6, i3, i4, i9, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if ((i8 | 0) > 0) {
  i12 = HEAP32[i1 + 32 >> 2] | 0;
  i13 = HEAP32[i1 + 36 >> 2] | 0;
  i9 = 0;
  while (1) {
   i10 = i7 + (i9 << 2) | 0;
   if ((i12 | 0) == (i13 | 0)) {
    i11 = (i13 | 0) == 0 ? 1 : i13 << 1;
    if ((i13 | 0) < (i11 | 0)) {
     if ((i11 | 0) == 0) i12 = 0; else {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i12 = _malloc((i11 << 2 | 3) + 16 | 0) | 0;
      if ((i12 | 0) == 0) i12 = 0; else {
       HEAP32[(i12 + 19 & -16) + -4 >> 2] = i12;
       i12 = i12 + 19 & -16;
      }
      i13 = HEAP32[i1 + 32 >> 2] | 0;
     }
     if ((i13 | 0) > 0) {
      i15 = 0;
      do {
       i14 = i12 + (i15 << 2) | 0;
       if ((i14 | 0) != 0) HEAP32[i14 >> 2] = HEAP32[(HEAP32[i1 + 40 >> 2] | 0) + (i15 << 2) >> 2];
       i15 = i15 + 1 | 0;
      } while ((i15 | 0) != (i13 | 0));
     }
     i14 = HEAP32[i1 + 40 >> 2] | 0;
     if ((i14 | 0) != 0) {
      if ((HEAP8[i1 + 44 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i14 + -4 >> 2] | 0);
       i13 = HEAP32[i1 + 32 >> 2] | 0;
      }
      HEAP32[i1 + 40 >> 2] = 0;
     }
     HEAP8[i1 + 44 >> 0] = 1;
     HEAP32[i1 + 40 >> 2] = i12;
     HEAP32[i1 + 36 >> 2] = i11;
     i12 = i13;
    } else {
     i12 = i13;
     i11 = i13;
    }
   } else i11 = i13;
   i13 = (HEAP32[i1 + 40 >> 2] | 0) + (i12 << 2) | 0;
   if ((i13 | 0) != 0) HEAP32[i13 >> 2] = HEAP32[i10 >> 2];
   i12 = i12 + 1 | 0;
   HEAP32[i1 + 32 >> 2] = i12;
   i9 = i9 + 1 | 0;
   if ((i9 | 0) == (i8 | 0)) break; else i13 = i11;
  }
 }
 if ((i6 | 0) > 0) {
  i10 = HEAP32[i1 + 52 >> 2] | 0;
  i11 = HEAP32[i1 + 56 >> 2] | 0;
  i7 = 0;
  while (1) {
   i8 = i5 + (i7 << 2) | 0;
   if ((i10 | 0) == (i11 | 0)) {
    i9 = (i11 | 0) == 0 ? 1 : i11 << 1;
    if ((i11 | 0) < (i9 | 0)) {
     if ((i9 | 0) == 0) i10 = 0; else {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i10 = _malloc((i9 << 2 | 3) + 16 | 0) | 0;
      if ((i10 | 0) == 0) i10 = 0; else {
       HEAP32[(i10 + 19 & -16) + -4 >> 2] = i10;
       i10 = i10 + 19 & -16;
      }
      i11 = HEAP32[i1 + 52 >> 2] | 0;
     }
     if ((i11 | 0) > 0) {
      i13 = 0;
      do {
       i12 = i10 + (i13 << 2) | 0;
       if ((i12 | 0) != 0) HEAP32[i12 >> 2] = HEAP32[(HEAP32[i1 + 60 >> 2] | 0) + (i13 << 2) >> 2];
       i13 = i13 + 1 | 0;
      } while ((i13 | 0) != (i11 | 0));
     }
     i12 = HEAP32[i1 + 60 >> 2] | 0;
     if ((i12 | 0) != 0) {
      if ((HEAP8[i1 + 64 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i12 + -4 >> 2] | 0);
       i11 = HEAP32[i1 + 52 >> 2] | 0;
      }
      HEAP32[i1 + 60 >> 2] = 0;
     }
     HEAP8[i1 + 64 >> 0] = 1;
     HEAP32[i1 + 60 >> 2] = i10;
     HEAP32[i1 + 56 >> 2] = i9;
     i10 = i11;
    } else {
     i10 = i11;
     i9 = i11;
    }
   } else i9 = i11;
   i11 = (HEAP32[i1 + 60 >> 2] | 0) + (i10 << 2) | 0;
   if ((i11 | 0) != 0) HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
   i10 = i10 + 1 | 0;
   HEAP32[i1 + 52 >> 2] = i10;
   i7 = i7 + 1 | 0;
   if ((i7 | 0) == (i6 | 0)) break; else i11 = i9;
  }
 }
 if ((i4 | 0) > 0) {
  i8 = HEAP32[i1 + 72 >> 2] | 0;
  i9 = HEAP32[i1 + 76 >> 2] | 0;
  i5 = 0;
  while (1) {
   i6 = i3 + (i5 << 2) | 0;
   if ((i8 | 0) == (i9 | 0)) {
    i7 = (i9 | 0) == 0 ? 1 : i9 << 1;
    if ((i9 | 0) < (i7 | 0)) {
     if ((i7 | 0) == 0) i8 = 0; else {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i8 = _malloc((i7 << 2 | 3) + 16 | 0) | 0;
      if ((i8 | 0) == 0) i8 = 0; else {
       HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
       i8 = i8 + 19 & -16;
      }
      i9 = HEAP32[i1 + 72 >> 2] | 0;
     }
     if ((i9 | 0) > 0) {
      i10 = 0;
      do {
       i11 = i8 + (i10 << 2) | 0;
       if ((i11 | 0) != 0) HEAP32[i11 >> 2] = HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i10 << 2) >> 2];
       i10 = i10 + 1 | 0;
      } while ((i10 | 0) != (i9 | 0));
     }
     i10 = HEAP32[i1 + 80 >> 2] | 0;
     if ((i10 | 0) != 0) {
      if ((HEAP8[i1 + 84 >> 0] | 0) != 0) {
       HEAP32[5006] = (HEAP32[5006] | 0) + 1;
       _free(HEAP32[i10 + -4 >> 2] | 0);
       i9 = HEAP32[i1 + 72 >> 2] | 0;
      }
      HEAP32[i1 + 80 >> 2] = 0;
     }
     HEAP8[i1 + 84 >> 0] = 1;
     HEAP32[i1 + 80 >> 2] = i8;
     HEAP32[i1 + 76 >> 2] = i7;
     i8 = i9;
    } else {
     i8 = i9;
     i7 = i9;
    }
   } else i7 = i9;
   i9 = (HEAP32[i1 + 80 >> 2] | 0) + (i8 << 2) | 0;
   if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
   i8 = i8 + 1 | 0;
   HEAP32[i1 + 72 >> 2] = i8;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i4 | 0)) break; else i9 = i7;
  }
 } else i8 = HEAP32[i1 + 72 >> 2] | 0;
 if (((HEAP32[i1 + 52 >> 2] | 0) + i8 | 0) <= (HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 72 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 __ZN27InplaceSolverIslandCallback18processConstraintsEv(i1);
 STACKTOP = i2;
 return;
}
function __ZN20btAxisSweep3InternalItE7setAabbEP17btBroadphaseProxyRK9btVector3S5_P12btDispatcher(i12, i1, i4, i5, i3) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i5 + 12 >> 2];
 i11 = HEAP32[i12 + 60 >> 2] | 0;
 i13 = HEAP32[i1 + 12 >> 2] & 65535;
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i12, i2 + 6 | 0, +HEAPF32[i4 >> 2], +HEAPF32[i4 + 4 >> 2], +HEAPF32[i4 + 8 >> 2], 0);
 __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i12, i2, +HEAPF32[i5 >> 2], +HEAPF32[i5 + 4 >> 2], +HEAPF32[i5 + 8 >> 2], 1);
 i20 = 0;
 do {
  i21 = HEAP16[i11 + (i13 << 6) + (i20 << 1) + 48 >> 1] | 0;
  i18 = HEAP16[i11 + (i13 << 6) + (i20 << 1) + 54 >> 1] | 0;
  i27 = HEAP16[i2 + 6 + (i20 << 1) >> 1] | 0;
  i22 = i12 + (i20 << 2) + 68 | 0;
  i30 = HEAP32[i22 >> 2] | 0;
  i29 = (i27 & 65535) - (HEAPU16[i30 + ((i21 & 65535) << 2) >> 1] | 0) | 0;
  i28 = HEAP16[i2 + (i20 << 1) >> 1] | 0;
  i19 = (i28 & 65535) - (HEAPU16[i30 + ((i18 & 65535) << 2) >> 1] | 0) | 0;
  HEAP16[i30 + ((i21 & 65535) << 2) >> 1] = i27;
  HEAP16[i30 + ((i18 & 65535) << 2) >> 1] = i28;
  if ((i29 | 0) < 0) __ZN20btAxisSweep3InternalItE11sortMinDownEitP12btDispatcherb(i12, i20, i21);
  L6 : do if ((i19 | 0) > 0 ? (i17 = HEAP32[i22 >> 2] | 0, i14 = HEAP32[i12 + 60 >> 2] | 0, i15 = HEAPU16[i17 + ((i18 & 65535) << 2) + 2 >> 1] | 0, i16 = HEAP16[i17 + ((i18 & 65535) + 1 << 2) + 2 >> 1] | 0, !(i16 << 16 >> 16 == 0)) : 0) {
   i23 = 1 << i20 & 3;
   i24 = i14 + (i15 << 6) + (i20 << 1) + 54 | 0;
   i30 = i16;
   i25 = i17 + ((i18 & 65535) << 2) | 0;
   i26 = i17 + ((i18 & 65535) + 1 << 2) | 0;
   while (1) {
    i27 = HEAP16[i26 >> 1] | 0;
    if ((HEAPU16[i25 >> 1] | 0) < (i27 & 65535)) break L6;
    i28 = HEAP32[i12 + 60 >> 2] | 0;
    i30 = i30 & 65535;
    if ((i27 & 1) == 0) {
     if (((((HEAPU16[i14 + (i15 << 6) + (i23 << 1) + 54 >> 1] | 0) >= (HEAPU16[i28 + (i30 << 6) + (i23 << 1) + 48 >> 1] | 0) ? (HEAPU16[i28 + (i30 << 6) + (i23 << 1) + 54 >> 1] | 0) >= (HEAPU16[i14 + (i15 << 6) + (i23 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i14 + (i15 << 6) + ((1 << i23 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i28 + (i30 << 6) + ((1 << i23 & 3) << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i28 + (i30 << 6) + ((1 << i23 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i14 + (i15 << 6) + ((1 << i23 & 3) << 1) + 48 >> 1] | 0) : 0) ? (i7 = HEAP32[i12 + 92 >> 2] | 0, i8 = i28 + ((HEAPU16[i25 + 2 >> 1] | 0) << 6) | 0, FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 31](i7, i8, i28 + (i30 << 6) | 0) | 0, i7 = HEAP32[i12 + 96 >> 2] | 0, (i7 | 0) != 0) : 0) FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 31](i7, i8, i28 + (i30 << 6) | 0) | 0;
     i30 = i28 + (i30 << 6) + (i20 << 1) + 48 | 0;
     HEAP16[i30 >> 1] = (HEAP16[i30 >> 1] | 0) + -1 << 16 >> 16;
    } else {
     i30 = i28 + (i30 << 6) + (i20 << 1) + 54 | 0;
     HEAP16[i30 >> 1] = (HEAP16[i30 >> 1] | 0) + -1 << 16 >> 16;
    }
    HEAP16[i24 >> 1] = (HEAP16[i24 >> 1] | 0) + 1 << 16 >> 16;
    i30 = HEAPU16[i25 >> 1] | HEAPU16[i25 + 2 >> 1] << 16;
    i28 = HEAPU16[i26 >> 1] | HEAPU16[i26 + 2 >> 1] << 16;
    HEAP16[i25 >> 1] = i28;
    HEAP16[i25 + 2 >> 1] = i28 >>> 16;
    HEAP16[i26 >> 1] = i30;
    HEAP16[i26 + 2 >> 1] = i30 >>> 16;
    i30 = HEAP16[i26 + 6 >> 1] | 0;
    if (i30 << 16 >> 16 == 0) break; else {
     i25 = i25 + 4 | 0;
     i26 = i26 + 4 | 0;
    }
   }
  } while (0);
  L24 : do if ((i29 | 0) > 0 ? (i9 = HEAP32[i22 >> 2] | 0, i10 = HEAP16[i9 + ((i21 & 65535) + 1 << 2) + 2 >> 1] | 0, !(i10 << 16 >> 16 == 0)) : 0) {
   i23 = (HEAP32[i12 + 60 >> 2] | 0) + ((HEAPU16[i9 + ((i21 & 65535) << 2) + 2 >> 1] | 0) << 6) + (i20 << 1) + 48 | 0;
   i24 = 1 << i20 & 3;
   i26 = i10;
   i22 = i9 + ((i21 & 65535) << 2) | 0;
   i21 = i9 + ((i21 & 65535) + 1 << 2) | 0;
   while (1) {
    i27 = HEAP16[i21 >> 1] | 0;
    if ((HEAPU16[i22 >> 1] | 0) < (i27 & 65535)) break L24;
    i25 = HEAP32[i12 + 60 >> 2] | 0;
    i26 = i26 & 65535;
    if ((i27 & 1) == 0) {
     i30 = i25 + (i26 << 6) + (i20 << 1) + 48 | 0;
     HEAP16[i30 >> 1] = (HEAP16[i30 >> 1] | 0) + -1 << 16 >> 16;
    } else {
     i27 = HEAPU16[i22 + 2 >> 1] | 0;
     if (((((HEAPU16[i25 + (i27 << 6) + (i24 << 1) + 54 >> 1] | 0) >= (HEAPU16[i25 + (i26 << 6) + (i24 << 1) + 48 >> 1] | 0) ? (HEAPU16[i25 + (i26 << 6) + (i24 << 1) + 54 >> 1] | 0) >= (HEAPU16[i25 + (i27 << 6) + (i24 << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i25 + (i27 << 6) + ((1 << i24 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i25 + (i26 << 6) + ((1 << i24 & 3) << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i25 + (i26 << 6) + ((1 << i24 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i25 + (i27 << 6) + ((1 << i24 & 3) << 1) + 48 >> 1] | 0) : 0) ? (i6 = HEAP32[i12 + 92 >> 2] | 0, FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 31](i6, i25 + (i27 << 6) | 0, i25 + (i26 << 6) | 0, i3) | 0, i6 = HEAP32[i12 + 96 >> 2] | 0, (i6 | 0) != 0) : 0) FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 31](i6, i25 + (i27 << 6) | 0, i25 + (i26 << 6) | 0, i3) | 0;
     i30 = i25 + (i26 << 6) + (i20 << 1) + 54 | 0;
     HEAP16[i30 >> 1] = (HEAP16[i30 >> 1] | 0) + -1 << 16 >> 16;
    }
    HEAP16[i23 >> 1] = (HEAP16[i23 >> 1] | 0) + 1 << 16 >> 16;
    i26 = HEAPU16[i22 >> 1] | HEAPU16[i22 + 2 >> 1] << 16;
    i30 = HEAPU16[i21 >> 1] | HEAPU16[i21 + 2 >> 1] << 16;
    HEAP16[i22 >> 1] = i30;
    HEAP16[i22 + 2 >> 1] = i30 >>> 16;
    HEAP16[i21 >> 1] = i26;
    HEAP16[i21 + 2 >> 1] = i26 >>> 16;
    i26 = HEAP16[i21 + 6 >> 1] | 0;
    if (i26 << 16 >> 16 == 0) break; else {
     i22 = i22 + 4 | 0;
     i21 = i21 + 4 | 0;
    }
   }
  } while (0);
  if ((i19 | 0) < 0) __ZN20btAxisSweep3InternalItE11sortMaxDownEitP12btDispatcherb(i12, i20, i18, i3);
  i20 = i20 + 1 | 0;
 } while ((i20 | 0) != 3);
 i6 = HEAP32[i12 + 108 >> 2] | 0;
 if ((i6 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 31](i6, HEAP32[i1 + 60 >> 2] | 0, i4, i5, i3);
 STACKTOP = i2;
 return;
}
function __ZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_(i4, i2, i3, i6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i17 = HEAP32[i4 + 48 >> 2] | 0;
 HEAP32[i1 >> 2] = 5808;
 HEAP32[i1 + 4 >> 2] = i17;
 HEAP32[i1 + 8 >> 2] = i2;
 i2 = HEAP32[i4 + 52 >> 2] | 0;
 if ((HEAP8[i2 + 60 >> 0] | 0) == 0) {
  i8 = HEAP32[i2 + 56 >> 2] | 0;
  L3 : do if ((i8 | 0) > 0) {
   i7 = 0;
   i5 = HEAP32[i2 + 96 >> 2] | 0;
   i4 = 1;
   while (1) {
    if (!(+HEAPF32[i3 >> 2] > +HEAPF32[i5 + 16 >> 2]) ? !(+HEAPF32[i6 >> 2] < +HEAPF32[i5 >> 2]) : 0) i12 = 1; else i12 = 0;
    if (!(!(+HEAPF32[i3 + 8 >> 2] > +HEAPF32[i5 + 24 >> 2]) ? !(+HEAPF32[i6 + 8 >> 2] < +HEAPF32[i5 + 8 >> 2]) : 0)) i12 = 0;
    if (!(+HEAPF32[i3 + 4 >> 2] > +HEAPF32[i5 + 20 >> 2]) ? !(+HEAPF32[i6 + 4 >> 2] < +HEAPF32[i5 + 4 >> 2]) : 0) {
     i11 = HEAP32[i5 + 32 >> 2] | 0;
     if ((i11 | 0) == -1 & i12) {
      FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, HEAP32[i5 + 36 >> 2] | 0, HEAP32[i5 + 40 >> 2] | 0);
      i8 = HEAP32[i2 + 56 >> 2] | 0;
      i9 = 44;
     } else {
      i10 = (i11 | 0) == -1;
      i9 = 43;
     }
    } else {
     i11 = HEAP32[i5 + 32 >> 2] | 0;
     i10 = (i11 | 0) == -1;
     i12 = 0;
     i9 = 43;
    }
    if ((i9 | 0) == 43) {
     i9 = 0;
     if (i12 | i10) i9 = 44; else {
      i7 = i11 + i7 | 0;
      i5 = i5 + (i11 << 6) | 0;
     }
    }
    if ((i9 | 0) == 44) {
     i7 = i7 + 1 | 0;
     i5 = i5 + 64 | 0;
    }
    if ((i7 | 0) >= (i8 | 0)) break L3;
    i4 = i4 + 1 | 0;
   }
  } else i4 = 0; while (0);
  if ((HEAP32[4028] | 0) >= (i4 | 0)) {
   STACKTOP = i1;
   return;
  }
  HEAP32[4028] = i4;
  STACKTOP = i1;
  return;
 }
 d20 = +HEAPF32[i3 >> 2];
 d24 = +HEAPF32[i3 + 4 >> 2];
 d28 = +HEAPF32[i3 + 8 >> 2];
 d27 = +HEAPF32[i2 + 4 >> 2];
 d20 = d20 < d27 ? d27 : d20;
 d23 = +HEAPF32[i2 + 8 >> 2];
 d24 = d24 < d23 ? d23 : d24;
 d19 = +HEAPF32[i2 + 12 >> 2];
 d28 = d28 < d19 ? d19 : d28;
 d29 = +HEAPF32[i2 + 20 >> 2];
 d25 = +HEAPF32[i2 + 24 >> 2];
 d21 = +HEAPF32[i2 + 28 >> 2];
 d26 = +HEAPF32[i2 + 36 >> 2];
 d22 = +HEAPF32[i2 + 40 >> 2];
 d18 = +HEAPF32[i2 + 44 >> 2];
 i3 = ~~(((d29 < d20 ? d29 : d20) - d27) * d26) & 65534;
 HEAP16[i1 + 66 >> 1] = i3;
 i5 = ~~(((d25 < d24 ? d25 : d24) - d23) * d22) & 65534;
 HEAP16[i1 + 68 >> 1] = i5;
 i4 = ~~(((d21 < d28 ? d21 : d28) - d19) * d18) & 65534;
 HEAP16[i1 + 70 >> 1] = i4;
 d28 = +HEAPF32[i6 >> 2];
 d24 = +HEAPF32[i6 + 4 >> 2];
 d20 = +HEAPF32[i6 + 8 >> 2];
 d28 = d28 < d27 ? d27 : d28;
 d24 = d24 < d23 ? d23 : d24;
 d20 = d20 < d19 ? d19 : d20;
 i7 = (~~(((d29 < d28 ? d29 : d28) - d27) * d26 + 1.0) & 65535 | 1) & 65535;
 HEAP16[i1 + 60 >> 1] = i7;
 i8 = (~~(((d25 < d24 ? d25 : d24) - d23) * d22 + 1.0) & 65535 | 1) & 65535;
 HEAP16[i1 + 62 >> 1] = i8;
 i6 = (~~(((d21 < d20 ? d21 : d20) - d19) * d18 + 1.0) & 65535 | 1) & 65535;
 HEAP16[i1 + 64 >> 1] = i6;
 i9 = HEAP32[i2 + 144 >> 2] | 0;
 if ((i9 | 0) == 0) {
  i9 = HEAP32[i2 + 56 >> 2] | 0;
  L36 : do if ((i9 | 0) > 0) {
   i10 = 0;
   i11 = HEAP32[i2 + 136 >> 2] | 0;
   i2 = 1;
   while (1) {
    i14 = ((i7 & 65535) >= (HEAPU16[i11 >> 1] | 0) ? (i3 & 65535) <= (HEAPU16[i11 + 6 >> 1] | 0) : 0) & (i4 & 65535) <= (HEAPU16[i11 + 10 >> 1] | 0) & (i6 & 65535) >= (HEAPU16[i11 + 4 >> 1] | 0) & (i5 & 65535) <= (HEAPU16[i11 + 8 >> 1] | 0) & (i8 & 65535) >= (HEAPU16[i11 + 2 >> 1] | 0);
    i13 = i11 + 12 | 0;
    i12 = HEAP32[i13 >> 2] | 0;
    if ((i12 | 0) > -1 & i14) FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i12 >> 21, i12 & 2097151);
    if (i14 | (i12 | 0) > -1) {
     i10 = i10 + 1 | 0;
     i11 = i11 + 16 | 0;
    } else {
     i17 = HEAP32[i13 >> 2] | 0;
     i10 = i10 - i17 | 0;
     i11 = i11 + (0 - i17 << 4) | 0;
    }
    if ((i10 | 0) >= (i9 | 0)) break L36;
    i2 = i2 + 1 | 0;
   }
  } else i2 = 0; while (0);
  if ((HEAP32[4028] | 0) >= (i2 | 0)) {
   STACKTOP = i1;
   return;
  }
  HEAP32[4028] = i2;
  STACKTOP = i1;
  return;
 } else if ((i9 | 0) == 1) {
  if ((HEAP32[i2 + 152 >> 2] | 0) <= 0) {
   STACKTOP = i1;
   return;
  }
  i9 = 0;
  do {
   i11 = HEAP32[i2 + 160 >> 2] | 0;
   if (((i7 & 65535) >= (HEAPU16[i11 + (i9 << 5) >> 1] | 0) ? (i3 & 65535) <= (HEAPU16[i11 + (i9 << 5) + 6 >> 1] | 0) : 0) & (i4 & 65535) <= (HEAPU16[i11 + (i9 << 5) + 10 >> 1] | 0) & (i6 & 65535) >= (HEAPU16[i11 + (i9 << 5) + 4 >> 1] | 0) & (i5 & 65535) <= (HEAPU16[i11 + (i9 << 5) + 8 >> 1] | 0) & (i8 & 65535) >= (HEAPU16[i11 + (i9 << 5) + 2 >> 1] | 0)) {
    i10 = HEAP32[i11 + (i9 << 5) + 12 >> 2] | 0;
    i11 = HEAP32[i11 + (i9 << 5) + 16 >> 2] | 0;
    L61 : do if ((i11 | 0) > 0) {
     i13 = i10;
     i14 = (HEAP32[i2 + 136 >> 2] | 0) + (i10 << 4) | 0;
     i12 = 1;
     while (1) {
      i16 = ((i7 & 65535) >= (HEAPU16[i14 >> 1] | 0) ? (i3 & 65535) <= (HEAPU16[i14 + 6 >> 1] | 0) : 0) & (i4 & 65535) <= (HEAPU16[i14 + 10 >> 1] | 0) & (i6 & 65535) >= (HEAPU16[i14 + 4 >> 1] | 0) & (i5 & 65535) <= (HEAPU16[i14 + 8 >> 1] | 0) & (i8 & 65535) >= (HEAPU16[i14 + 2 >> 1] | 0);
      i15 = i14 + 12 | 0;
      i17 = HEAP32[i15 >> 2] | 0;
      if ((i17 | 0) > -1 & i16) FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i17 >> 21, i17 & 2097151);
      if (i16 | (i17 | 0) > -1) {
       i13 = i13 + 1 | 0;
       i14 = i14 + 16 | 0;
      } else {
       i17 = HEAP32[i15 >> 2] | 0;
       i13 = i13 - i17 | 0;
       i14 = i14 + (0 - i17 << 4) | 0;
      }
      if ((i13 | 0) >= (i11 + i10 | 0)) break L61;
      i12 = i12 + 1 | 0;
     }
    } else i12 = 0; while (0);
    if ((HEAP32[4028] | 0) < (i12 | 0)) HEAP32[4028] = i12;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (HEAP32[i2 + 152 >> 2] | 0));
  STACKTOP = i1;
  return;
 } else if ((i9 | 0) == 2) {
  __ZNK14btQuantizedBvh42walkRecursiveQuantizedTreeAgainstQueryAabbEPK18btQuantizedBvhNodeP21btNodeOverlapCallbackPtS5_(HEAP32[i2 + 136 >> 2] | 0, i1, i1 + 66 | 0, i1 + 60 | 0);
  STACKTOP = i1;
  return;
 } else {
  STACKTOP = i1;
  return;
 }
}
function __ZN16btCollisionWorld14debugDrawWorldEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1) | 0) != 0 ? (i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1) | 0, ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 48 >> 2] & 127](i14) | 0) & 8 | 0) != 0) : 0) ? (i3 = HEAP32[i1 + 24 >> 2] | 0, i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0, HEAPF32[i2 + 96 >> 2] = 1.0, HEAPF32[i2 + 100 >> 2] = 1.0, HEAPF32[i2 + 104 >> 2] = 0.0, HEAPF32[i2 + 108 >> 2] = 0.0, (i3 | 0) > 0) : 0) {
  i13 = 0;
  do {
   i5 = HEAP32[i1 + 24 >> 2] | 0;
   i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i13) | 0;
   i6 = HEAP32[i5 + 748 >> 2] | 0;
   if ((i6 | 0) > 0) {
    i4 = 0;
    do {
     i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1) | 0;
     FUNCTION_TABLE_viiidii[HEAP32[(HEAP32[i14 >> 2] | 0) + 32 >> 2] & 0](i14, i5 + (i4 * 184 | 0) + 36 | 0, i5 + (i4 * 184 | 0) + 68 | 0, +HEAPF32[i5 + (i4 * 184 | 0) + 84 >> 2], HEAP32[i5 + (i4 * 184 | 0) + 152 >> 2] | 0, i2 + 96 | 0);
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i6 | 0));
   }
   i13 = i13 + 1 | 0;
  } while ((i13 | 0) != (i3 | 0));
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1) | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1) | 0;
 if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 48 >> 2] & 127](i14) | 0) & 3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 8 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i6 = i2 + 84 | 0;
 i5 = i2 + 88 | 0;
 i4 = i2 + 92 | 0;
 i3 = 0;
 do {
  i13 = HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + (i3 << 2) >> 2] | 0;
  if ((HEAP32[i13 + 204 >> 2] & 32 | 0) == 0) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1) | 0) != 0 ? (i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1) | 0, ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 48 >> 2] & 127](i14) | 0) & 1 | 0) != 0) : 0) {
    HEAPF32[i2 + 80 >> 2] = 1.0;
    HEAPF32[i6 >> 2] = 1.0;
    HEAPF32[i5 >> 2] = 1.0;
    HEAPF32[i4 >> 2] = 0.0;
    switch (HEAP32[i13 + 216 >> 2] | 0) {
    case 1:
     {
      HEAPF32[i2 + 80 >> 2] = 1.0;
      HEAPF32[i6 >> 2] = 1.0;
      HEAPF32[i5 >> 2] = 1.0;
      HEAPF32[i4 >> 2] = 0.0;
      break;
     }
    case 4:
     {
      HEAPF32[i2 + 80 >> 2] = 1.0;
      HEAPF32[i6 >> 2] = 0.0;
      HEAPF32[i5 >> 2] = 0.0;
      HEAPF32[i4 >> 2] = 0.0;
      break;
     }
    case 3:
     {
      HEAPF32[i2 + 80 >> 2] = 0.0;
      HEAPF32[i6 >> 2] = 1.0;
      HEAPF32[i5 >> 2] = 1.0;
      HEAPF32[i4 >> 2] = 0.0;
      break;
     }
    case 2:
     {
      HEAPF32[i2 + 80 >> 2] = 0.0;
      HEAPF32[i6 >> 2] = 1.0;
      HEAPF32[i5 >> 2] = 0.0;
      HEAPF32[i4 >> 2] = 0.0;
      break;
     }
    case 5:
     {
      HEAPF32[i2 + 80 >> 2] = 1.0;
      HEAPF32[i6 >> 2] = 1.0;
      HEAPF32[i5 >> 2] = 0.0;
      HEAPF32[i4 >> 2] = 0.0;
      break;
     }
    default:
     {
      HEAPF32[i2 + 80 >> 2] = 1.0;
      HEAPF32[i6 >> 2] = 0.0;
      HEAPF32[i5 >> 2] = 0.0;
      HEAPF32[i4 >> 2] = 0.0;
     }
    }
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1, i13 + 4 | 0, HEAP32[i13 + 192 >> 2] | 0, i2 + 80 | 0);
   }
   i14 = HEAP32[i1 + 72 >> 2] | 0;
   if ((i14 | 0) != 0 ? ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 48 >> 2] & 127](i14) | 0) & 2 | 0) != 0 : 0) {
    HEAPF32[i2 + 32 >> 2] = 1.0;
    HEAPF32[i2 + 36 >> 2] = 0.0;
    HEAPF32[i2 + 40 >> 2] = 0.0;
    HEAPF32[i2 + 44 >> 2] = 0.0;
    i14 = HEAP32[i13 + 192 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] & 127](i14, i13 + 4 | 0, i2 + 64 | 0, i2 + 48 | 0);
    HEAPF32[i2 + 64 >> 2] = +HEAPF32[i2 + 64 >> 2] + -.019999999552965164;
    HEAPF32[i2 + 68 >> 2] = +HEAPF32[i2 + 68 >> 2] + -.019999999552965164;
    HEAPF32[i2 + 72 >> 2] = +HEAPF32[i2 + 72 >> 2] + -.019999999552965164;
    HEAPF32[i2 + 48 >> 2] = +HEAPF32[i2 + 48 >> 2] + .019999999552965164;
    HEAPF32[i2 + 52 >> 2] = +HEAPF32[i2 + 52 >> 2] + .019999999552965164;
    HEAPF32[i2 + 56 >> 2] = +HEAPF32[i2 + 56 >> 2] + .019999999552965164;
    do if (((HEAP8[i1 + 44 >> 0] | 0) != 0 ? (HEAP32[i13 + 236 >> 2] | 0) == 2 : 0) ? (HEAP32[i13 + 204 >> 2] & 3 | 0) == 0 : 0) {
     i14 = HEAP32[i13 + 192 >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] & 127](i14, i13 + 68 | 0, i2 + 16 | 0, i2);
     d12 = +HEAPF32[i2 + 16 >> 2] + -.019999999552965164;
     HEAPF32[i2 + 16 >> 2] = d12;
     d11 = +HEAPF32[i2 + 20 >> 2] + -.019999999552965164;
     HEAPF32[i2 + 20 >> 2] = d11;
     d10 = +HEAPF32[i2 + 24 >> 2] + -.019999999552965164;
     HEAPF32[i2 + 24 >> 2] = d10;
     d9 = +HEAPF32[i2 >> 2] + .019999999552965164;
     HEAPF32[i2 >> 2] = d9;
     d8 = +HEAPF32[i2 + 4 >> 2] + .019999999552965164;
     HEAPF32[i2 + 4 >> 2] = d8;
     d7 = +HEAPF32[i2 + 8 >> 2] + .019999999552965164;
     HEAPF32[i2 + 8 >> 2] = d7;
     if (d12 < +HEAPF32[i2 + 64 >> 2]) HEAPF32[i2 + 64 >> 2] = d12;
     if (d11 < +HEAPF32[i2 + 68 >> 2]) HEAPF32[i2 + 68 >> 2] = d11;
     if (d10 < +HEAPF32[i2 + 72 >> 2]) HEAPF32[i2 + 72 >> 2] = d10;
     d10 = +HEAPF32[i2 + 28 >> 2];
     if (d10 < +HEAPF32[i2 + 76 >> 2]) HEAPF32[i2 + 76 >> 2] = d10;
     if (+HEAPF32[i2 + 48 >> 2] < d9) HEAPF32[i2 + 48 >> 2] = d9;
     if (+HEAPF32[i2 + 52 >> 2] < d8) HEAPF32[i2 + 52 >> 2] = d8;
     if (+HEAPF32[i2 + 56 >> 2] < d7) HEAPF32[i2 + 56 >> 2] = d7;
     d7 = +HEAPF32[i2 + 12 >> 2];
     if (!(+HEAPF32[i2 + 60 >> 2] < d7)) break;
     HEAPF32[i2 + 60 >> 2] = d7;
    } while (0);
    i14 = HEAP32[i1 + 72 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 52 >> 2] & 127](i14, i2 + 64 | 0, i2 + 48 | 0, i2 + 32 | 0);
   }
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (HEAP32[i1 + 8 >> 2] | 0));
 STACKTOP = i2;
 return;
}
function __ZN30btKinematicCharacterController20stepForwardAndStrafeEP16btCollisionWorldRK9btVector3(i2, i3, d4, d7, d6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 d7 = +d7;
 d6 = +d6;
 var i1 = 0, i5 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 d11 = +HEAPF32[i2 + 96 >> 2] + d7;
 d12 = +HEAPF32[i2 + 100 >> 2] + d6;
 HEAPF32[i2 + 112 >> 2] = +HEAPF32[i2 + 92 >> 2] + d4;
 HEAPF32[i2 + 116 >> 2] = d11;
 HEAPF32[i2 + 120 >> 2] = d12;
 HEAPF32[i2 + 124 >> 2] = 0.0;
 HEAPF32[i1 + 168 >> 2] = 1.0;
 HEAP32[i1 + 172 >> 2] = 0;
 HEAP32[i1 + 176 >> 2] = 0;
 HEAP32[i1 + 180 >> 2] = 0;
 HEAP32[i1 + 184 >> 2] = 0;
 HEAPF32[i1 + 188 >> 2] = 1.0;
 HEAP32[i1 + 192 >> 2] = 0;
 HEAP32[i1 + 196 >> 2] = 0;
 HEAP32[i1 + 200 >> 2] = 0;
 HEAP32[i1 + 204 >> 2] = 0;
 HEAPF32[i1 + 208 >> 2] = 1.0;
 i5 = i1 + 212 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAPF32[i1 + 104 >> 2] = 1.0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 120 >> 2] = 0;
 HEAPF32[i1 + 124 >> 2] = 1.0;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAPF32[i1 + 144 >> 2] = 1.0;
 i5 = i1 + 148 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 d4 = 1.0;
 i5 = 10;
 while (1) {
  i13 = i5;
  i5 = i5 + -1 | 0;
  if ((i13 | 0) <= 0) {
   i2 = 12;
   break;
  }
  HEAP32[i1 + 216 >> 2] = HEAP32[i2 + 92 >> 2];
  HEAP32[i1 + 220 >> 2] = HEAP32[i2 + 96 >> 2];
  HEAP32[i1 + 224 >> 2] = HEAP32[i2 + 100 >> 2];
  HEAP32[i1 + 228 >> 2] = HEAP32[i2 + 104 >> 2];
  HEAP32[i1 + 152 >> 2] = HEAP32[i2 + 112 >> 2];
  HEAP32[i1 + 156 >> 2] = HEAP32[i2 + 116 >> 2];
  HEAP32[i1 + 160 >> 2] = HEAP32[i2 + 120 >> 2];
  HEAP32[i1 + 164 >> 2] = HEAP32[i2 + 124 >> 2];
  d11 = +HEAPF32[i2 + 92 >> 2] - +HEAPF32[i2 + 112 >> 2];
  d12 = +HEAPF32[i2 + 96 >> 2] - +HEAPF32[i2 + 116 >> 2];
  d6 = +HEAPF32[i2 + 100 >> 2] - +HEAPF32[i2 + 120 >> 2];
  i13 = HEAP32[i2 + 8 >> 2] | 0;
  HEAPF32[i1 + 4 >> 2] = 1.0;
  HEAP16[i1 + 8 >> 1] = 1;
  HEAP16[i1 + 10 >> 1] = -1;
  HEAP32[i1 + 76 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 36 >> 2] = 0;
  HEAP32[i1 + 40 >> 2] = 0;
  HEAP32[i1 >> 2] = 2896;
  HEAP32[i1 + 80 >> 2] = i13;
  HEAPF32[i1 + 84 >> 2] = d11;
  HEAPF32[i1 + 88 >> 2] = d12;
  HEAPF32[i1 + 92 >> 2] = d6;
  HEAPF32[i1 + 96 >> 2] = 0.0;
  HEAPF32[i1 + 100 >> 2] = 0.0;
  i13 = HEAP32[i13 + 188 >> 2] | 0;
  HEAP16[i1 + 8 >> 1] = HEAP16[i13 + 4 >> 1] | 0;
  HEAP16[i1 + 10 >> 1] = HEAP16[i13 + 6 >> 1] | 0;
  i13 = HEAP32[i2 + 12 >> 2] | 0;
  d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i13 >> 2] | 0) + 48 >> 2] & 15](i13);
  i13 = HEAP32[i2 + 12 >> 2] | 0;
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[i13 >> 2] | 0) + 44 >> 2] & 31](i13, d6 + +HEAPF32[i2 + 56 >> 2]);
  if ((HEAP8[i2 + 170 >> 0] | 0) == 0) __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i3, HEAP32[i2 + 12 >> 2] | 0, i1 + 168 | 0, i1 + 104 | 0, i1, +HEAPF32[i3 + 56 >> 2]); else __ZNK13btGhostObject15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RN16btCollisionWorld20ConvexResultCallbackEf(HEAP32[i2 + 8 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0, i1 + 168 | 0, i1 + 104 | 0, i1, +HEAPF32[i3 + 56 >> 2]);
  i13 = HEAP32[i2 + 12 >> 2] | 0;
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[i13 >> 2] | 0) + 44 >> 2] & 31](i13, d6);
  d12 = +HEAPF32[i1 + 4 >> 2];
  d4 = d4 - d12;
  if (!(d12 < 1.0)) {
   HEAP32[i2 + 92 >> 2] = HEAP32[i2 + 112 >> 2];
   HEAP32[i2 + 96 >> 2] = HEAP32[i2 + 116 >> 2];
   HEAP32[i2 + 100 >> 2] = HEAP32[i2 + 120 >> 2];
   HEAP32[i2 + 104 >> 2] = HEAP32[i2 + 124 >> 2];
   if (d4 > .009999999776482582) continue; else {
    i2 = 12;
    break;
   }
  }
  d11 = +HEAPF32[i2 + 112 >> 2];
  d8 = +HEAPF32[i2 + 92 >> 2];
  d10 = +HEAPF32[i2 + 116 >> 2];
  d7 = +HEAPF32[i2 + 96 >> 2];
  d9 = +HEAPF32[i2 + 120 >> 2];
  d6 = +HEAPF32[i2 + 100 >> 2];
  d12 = +Math_sqrt(+((d11 - d8) * (d11 - d8) + (d10 - d7) * (d10 - d7) + (d9 - d6) * (d9 - d6)));
  if (d12 > 1.1920928955078125e-7) {
   d17 = +HEAPF32[i1 + 44 >> 2];
   d15 = +HEAPF32[i1 + 48 >> 2];
   d19 = +HEAPF32[i1 + 52 >> 2];
   d18 = ((d11 - d8) * (1.0 / d12) * d17 + (d10 - d7) * (1.0 / d12) * d15 + (d9 - d6) * (1.0 / d12) * d19) * 2.0;
   d16 = (d11 - d8) * (1.0 / d12) - d17 * d18;
   d14 = (d10 - d7) * (1.0 / d12) - d15 * d18;
   d18 = (d9 - d6) * (1.0 / d12) - d19 * d18;
   d9 = 1.0 / +Math_sqrt(+(d18 * d18 + (d16 * d16 + d14 * d14)));
   HEAP32[i2 + 112 >> 2] = HEAP32[i2 + 92 >> 2];
   HEAP32[i2 + 116 >> 2] = HEAP32[i2 + 96 >> 2];
   HEAP32[i2 + 120 >> 2] = HEAP32[i2 + 100 >> 2];
   HEAP32[i2 + 124 >> 2] = HEAP32[i2 + 104 >> 2];
   d11 = d12 * (d9 * d16 - d17 * (d19 * d9 * d18 + (d17 * d9 * d16 + d15 * d9 * d14))) + +HEAPF32[i2 + 112 >> 2];
   HEAPF32[i2 + 112 >> 2] = d11;
   d10 = d12 * (d9 * d14 - d15 * (d19 * d9 * d18 + (d17 * d9 * d16 + d15 * d9 * d14))) + +HEAPF32[i2 + 116 >> 2];
   HEAPF32[i2 + 116 >> 2] = d10;
   d9 = d12 * (d9 * d18 - d19 * (d19 * d9 * d18 + (d17 * d9 * d16 + d15 * d9 * d14))) + +HEAPF32[i2 + 120 >> 2];
   HEAPF32[i2 + 120 >> 2] = d9;
  }
  d8 = d11 - d8;
  d7 = d10 - d7;
  d6 = d9 - d6;
  if (!(d8 * d8 + d7 * d7 + d6 * d6 > 1.1920928955078125e-7)) {
   i2 = 12;
   break;
  }
  d19 = 1.0 / +Math_sqrt(+(d8 * d8 + d7 * d7 + d6 * d6));
  if (!(d4 > .009999999776482582 ? !(d8 * d19 * +HEAPF32[i2 + 76 >> 2] + d7 * d19 * +HEAPF32[i2 + 80 >> 2] + d6 * d19 * +HEAPF32[i2 + 84 >> 2] <= 0.0) : 0)) {
   i2 = 12;
   break;
  }
 }
 if ((i2 | 0) == 12) {
  STACKTOP = i1;
  return;
 }
}
function __ZN21btConeTwistConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, i34 = 0, i35 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((HEAP8[i1 + 527 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 + 36 >> 2] = 0.0;
 HEAPF32[i1 + 520 >> 2] = 0.0;
 HEAPF32[i1 + 516 >> 2] = 0.0;
 HEAP32[i1 + 576 >> 2] = 0;
 HEAP32[i1 + 580 >> 2] = 0;
 HEAP32[i1 + 584 >> 2] = 0;
 HEAP32[i1 + 588 >> 2] = 0;
 L4 : do if ((HEAP8[i1 + 524 >> 0] | 0) == 0) {
  i34 = HEAP32[i1 + 28 >> 2] | 0;
  d23 = +HEAPF32[i1 + 348 >> 2];
  d22 = +HEAPF32[i1 + 352 >> 2];
  d4 = +HEAPF32[i1 + 356 >> 2];
  d3 = d23 * +HEAPF32[i34 + 20 >> 2] + d22 * +HEAPF32[i34 + 24 >> 2] + d4 * +HEAPF32[i34 + 28 >> 2] + +HEAPF32[i34 + 56 >> 2];
  i21 = HEAP32[i1 + 32 >> 2] | 0;
  d6 = +HEAPF32[i1 + 412 >> 2];
  d7 = +HEAPF32[i21 + 4 >> 2];
  d8 = +HEAPF32[i1 + 416 >> 2];
  d9 = +HEAPF32[i21 + 8 >> 2];
  d10 = +HEAPF32[i1 + 420 >> 2];
  d20 = +HEAPF32[i21 + 12 >> 2];
  d13 = +HEAPF32[i21 + 20 >> 2];
  d14 = +HEAPF32[i21 + 24 >> 2];
  d15 = +HEAPF32[i21 + 28 >> 2];
  d17 = +HEAPF32[i21 + 36 >> 2];
  d18 = +HEAPF32[i21 + 40 >> 2];
  d19 = +HEAPF32[i21 + 44 >> 2];
  d12 = +HEAPF32[i21 + 52 >> 2];
  d16 = +HEAPF32[i21 + 56 >> 2];
  d11 = +HEAPF32[i21 + 60 >> 2];
  d24 = d6 * d13 + d8 * d14 + d10 * d15 + d16 - d3;
  d5 = d23 * +HEAPF32[i34 + 4 >> 2] + d22 * +HEAPF32[i34 + 8 >> 2] + d4 * +HEAPF32[i34 + 12 >> 2] + +HEAPF32[i34 + 52 >> 2];
  d4 = d23 * +HEAPF32[i34 + 36 >> 2] + d22 * +HEAPF32[i34 + 40 >> 2] + d4 * +HEAPF32[i34 + 44 >> 2] + +HEAPF32[i34 + 60 >> 2];
  d22 = d6 * d7 + d8 * d9 + d10 * d20 + d12 - d5;
  d23 = d6 * d17 + d8 * d18 + d10 * d19 + d11 - d4;
  if (d22 * d22 + d24 * d24 + d23 * d23 > 1.1920928955078125e-7) {
   d33 = 1.0 / +Math_sqrt(+(d22 * d22 + d24 * d24 + d23 * d23));
   HEAPF32[i2 + 128 >> 2] = d22 * d33;
   HEAPF32[i2 + 132 >> 2] = d24 * d33;
   HEAPF32[i2 + 136 >> 2] = d23 * d33;
   HEAPF32[i2 + 140 >> 2] = 0.0;
   d23 = d23 * d33;
   d24 = d24 * d33;
   d22 = d22 * d33;
  } else {
   HEAPF32[i2 + 128 >> 2] = 1.0;
   HEAPF32[i2 + 132 >> 2] = 0.0;
   HEAPF32[i2 + 136 >> 2] = 0.0;
   HEAPF32[i2 + 140 >> 2] = 0.0;
   d23 = 0.0;
   d24 = 0.0;
   d22 = 1.0;
  }
  if (+Math_abs(+d23) > .7071067690849304) {
   d30 = d23 * d23 + d24 * d24;
   d31 = 1.0 / +Math_sqrt(+d30);
   HEAPF32[i2 + 144 >> 2] = 0.0;
   d33 = -(d31 * d23);
   HEAPF32[i2 + 148 >> 2] = d33;
   d32 = d31 * d24;
   HEAPF32[i2 + 152 >> 2] = d32;
   HEAPF32[i2 + 160 >> 2] = d30 * d31;
   HEAPF32[i2 + 164 >> 2] = -(d22 * d32);
   HEAPF32[i2 + 168 >> 2] = d22 * d33;
  } else {
   d32 = d22 * d22 + d24 * d24;
   d33 = 1.0 / +Math_sqrt(+d32);
   d31 = -(d24 * d33);
   HEAPF32[i2 + 144 >> 2] = d31;
   d30 = d33 * d22;
   HEAPF32[i2 + 148 >> 2] = d30;
   HEAPF32[i2 + 152 >> 2] = 0.0;
   HEAPF32[i2 + 160 >> 2] = -(d23 * d30);
   HEAPF32[i2 + 164 >> 2] = d23 * d31;
   HEAPF32[i2 + 168 >> 2] = d32 * d33;
  }
  d28 = d7;
  d24 = d13;
  d25 = d17;
  d26 = d9;
  d27 = d14;
  d31 = d18;
  d23 = d20;
  d33 = d15;
  d32 = d19;
  d22 = d12;
  d30 = d16;
  d29 = d11;
  i34 = 0;
  while (1) {
   i35 = HEAP32[i1 + 28 >> 2] | 0;
   HEAPF32[i2 + 80 >> 2] = +HEAPF32[i35 + 4 >> 2];
   HEAPF32[i2 + 84 >> 2] = +HEAPF32[i35 + 20 >> 2];
   HEAPF32[i2 + 88 >> 2] = +HEAPF32[i35 + 36 >> 2];
   HEAPF32[i2 + 92 >> 2] = 0.0;
   HEAPF32[i2 + 96 >> 2] = +HEAPF32[i35 + 8 >> 2];
   HEAPF32[i2 + 100 >> 2] = +HEAPF32[i35 + 24 >> 2];
   HEAPF32[i2 + 104 >> 2] = +HEAPF32[i35 + 40 >> 2];
   HEAPF32[i2 + 108 >> 2] = 0.0;
   HEAPF32[i2 + 112 >> 2] = +HEAPF32[i35 + 12 >> 2];
   HEAPF32[i2 + 116 >> 2] = +HEAPF32[i35 + 28 >> 2];
   HEAPF32[i2 + 120 >> 2] = +HEAPF32[i35 + 44 >> 2];
   HEAPF32[i2 + 124 >> 2] = 0.0;
   HEAPF32[i2 + 32 >> 2] = d28;
   HEAPF32[i2 + 36 >> 2] = d24;
   HEAPF32[i2 + 40 >> 2] = d25;
   HEAPF32[i2 + 44 >> 2] = 0.0;
   HEAPF32[i2 + 48 >> 2] = d26;
   HEAPF32[i2 + 52 >> 2] = d27;
   HEAPF32[i2 + 56 >> 2] = d31;
   HEAPF32[i2 + 60 >> 2] = 0.0;
   HEAPF32[i2 + 64 >> 2] = d23;
   HEAPF32[i2 + 68 >> 2] = d33;
   HEAPF32[i2 + 72 >> 2] = d32;
   HEAPF32[i2 + 76 >> 2] = 0.0;
   d32 = d3 - +HEAPF32[i35 + 56 >> 2];
   d33 = d4 - +HEAPF32[i35 + 60 >> 2];
   HEAPF32[i2 + 16 >> 2] = d5 - +HEAPF32[i35 + 52 >> 2];
   HEAPF32[i2 + 20 >> 2] = d32;
   HEAPF32[i2 + 24 >> 2] = d33;
   HEAPF32[i2 + 28 >> 2] = 0.0;
   HEAPF32[i2 >> 2] = d6 * d7 + d8 * d9 + d10 * d20 + d12 - d22;
   HEAPF32[i2 + 4 >> 2] = d6 * d13 + d8 * d14 + d10 * d15 + d16 - d30;
   HEAPF32[i2 + 8 >> 2] = d6 * d17 + d8 * d18 + d10 * d19 + d11 - d29;
   HEAPF32[i2 + 12 >> 2] = 0.0;
   __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1 + (i34 * 84 | 0) + 48 | 0, i2 + 80 | 0, i2 + 32 | 0, i2 + 16 | 0, i2, i2 + 128 + (i34 << 4) | 0, i35 + 396 | 0, +HEAPF32[i35 + 344 >> 2], i21 + 396 | 0, +HEAPF32[i21 + 344 >> 2]);
   i34 = i34 + 1 | 0;
   if ((i34 | 0) == 3) {
    i21 = i1 + 32 | 0;
    break L4;
   }
   i21 = HEAP32[i1 + 32 >> 2] | 0;
   d28 = +HEAPF32[i21 + 4 >> 2];
   d24 = +HEAPF32[i21 + 20 >> 2];
   d25 = +HEAPF32[i21 + 36 >> 2];
   d26 = +HEAPF32[i21 + 8 >> 2];
   d27 = +HEAPF32[i21 + 24 >> 2];
   d31 = +HEAPF32[i21 + 40 >> 2];
   d23 = +HEAPF32[i21 + 12 >> 2];
   d33 = +HEAPF32[i21 + 28 >> 2];
   d32 = +HEAPF32[i21 + 44 >> 2];
   d22 = +HEAPF32[i21 + 52 >> 2];
   d30 = +HEAPF32[i21 + 56 >> 2];
   d29 = +HEAPF32[i21 + 60 >> 2];
  }
 } else i21 = i1 + 32 | 0; while (0);
 i34 = HEAP32[i1 + 28 >> 2] | 0;
 i35 = HEAP32[i21 >> 2] | 0;
 __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i1, i34 + 4 | 0, i35 + 4 | 0, i34 + 264 | 0, i35 + 264 | 0);
 STACKTOP = i2;
 return;
}
function __ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i7, i5, i19, i4, i13, i2) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i19 = i19 | 0;
 i4 = i4 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0, d6 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 d3 = +HEAPF32[i19 + 48 >> 2] - +HEAPF32[i5 + 48 >> 2];
 d8 = +HEAPF32[i19 + 52 >> 2] - +HEAPF32[i5 + 52 >> 2];
 d6 = +HEAPF32[i19 + 56 >> 2] - +HEAPF32[i5 + 56 >> 2];
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i5, i19, i1 + 256 | 0, i1 + 192 | 0);
 d12 = +HEAPF32[i1 + 192 >> 2];
 d14 = +HEAPF32[i1 + 256 >> 2] * d12;
 d15 = d12 * +HEAPF32[i1 + 260 >> 2];
 d12 = d12 * +HEAPF32[i1 + 264 >> 2];
 HEAPF32[i1 + 176 >> 2] = d14;
 HEAPF32[i1 + 180 >> 2] = d15;
 HEAPF32[i1 + 184 >> 2] = d12;
 HEAPF32[i1 + 188 >> 2] = 0.0;
 d11 = +HEAPF32[i13 + 48 >> 2] - +HEAPF32[i4 + 48 >> 2];
 d9 = +HEAPF32[i13 + 52 >> 2] - +HEAPF32[i4 + 52 >> 2];
 d10 = +HEAPF32[i13 + 56 >> 2] - +HEAPF32[i4 + 56 >> 2];
 __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i4, i13, i1 + 256 | 0, i1 + 192 | 0);
 d17 = +HEAPF32[i1 + 192 >> 2];
 d20 = +HEAPF32[i1 + 256 >> 2] * d17;
 d18 = d17 * +HEAPF32[i1 + 260 >> 2];
 d17 = d17 * +HEAPF32[i1 + 264 >> 2];
 HEAPF32[i1 + 160 >> 2] = d20;
 HEAPF32[i1 + 164 >> 2] = d18;
 HEAPF32[i1 + 168 >> 2] = d17;
 HEAPF32[i1 + 172 >> 2] = 0.0;
 i13 = HEAP32[i7 + 12 >> 2] | 0;
 d16 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] & 15](i13);
 i13 = HEAP32[i7 + 16 >> 2] | 0;
 if ((i13 | 0) == 0) d21 = 0.0; else d21 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] & 15](i13);
 d12 = d16 * +Math_sqrt(+(d14 * d14 + d15 * d15 + d12 * d12)) + d21 * +Math_sqrt(+(d20 * d20 + d18 * d18 + d17 * d17));
 if (d12 + +Math_sqrt(+((d11 - d3) * (d11 - d3) + (d9 - d8) * (d9 - d8) + (d10 - d6) * (d10 - d6))) == 0.0) {
  i19 = 0;
  STACKTOP = i1;
  return i19 | 0;
 }
 HEAP32[i1 + 256 >> 2] = 10224;
 HEAPF32[i1 + 292 >> 2] = 999999984306749400.0;
 HEAP8[i1 + 296 >> 0] = 0;
 __ZN27btContinuousConvexCollision20computeClosestPointsERK11btTransformS2_R16btPointCollector(i7, i5, i4, i1 + 256 | 0);
 i19 = (HEAP8[i1 + 296 >> 0] | 0) == 0;
 HEAP32[i1 + 144 >> 2] = HEAP32[i1 + 276 >> 2];
 HEAP32[i1 + 148 >> 2] = HEAP32[i1 + 280 >> 2];
 HEAP32[i1 + 152 >> 2] = HEAP32[i1 + 284 >> 2];
 HEAP32[i1 + 156 >> 2] = HEAP32[i1 + 288 >> 2];
 if (i19) {
  i19 = 0;
  STACKTOP = i1;
  return i19 | 0;
 }
 d14 = +HEAPF32[i1 + 260 >> 2];
 d16 = +HEAPF32[i1 + 264 >> 2];
 d18 = +HEAPF32[i1 + 268 >> 2];
 if (d12 + ((d11 - d3) * d14 + (d9 - d8) * d16 + (d10 - d6) * d18) <= 1.1920928955078125e-7) {
  i19 = 0;
  STACKTOP = i1;
  return i19 | 0;
 }
 d21 = +HEAPF32[i1 + 272 >> 2];
 d17 = +HEAPF32[i1 + 292 >> 2] + +HEAPF32[i2 + 172 >> 2];
 d15 = 0.0;
 i13 = 0;
 while (1) {
  if (!(d17 > .0010000000474974513)) {
   i4 = 18;
   break;
  }
  i19 = HEAP32[i2 + 168 >> 2] | 0;
  if ((i19 | 0) != 0) {
   i22 = HEAP32[(HEAP32[i19 >> 2] | 0) + 20 >> 2] | 0;
   HEAPF32[i1 + 128 >> 2] = 1.0;
   HEAPF32[i1 + 132 >> 2] = 1.0;
   HEAPF32[i1 + 136 >> 2] = 1.0;
   HEAPF32[i1 + 140 >> 2] = 0.0;
   FUNCTION_TABLE_viidi[i22 & 7](i19, i1 + 144 | 0, .20000000298023224, i1 + 128 | 0);
  }
  d14 = d12 + ((d10 - d6) * d18 + ((d9 - d8) * d16 + (d11 - d3) * d14));
  if (d14 <= 1.1920928955078125e-7) {
   i2 = 0;
   i4 = 19;
   break;
  }
  d20 = d15 + d17 / d14;
  if (!(!(d20 < 0.0) & !(d20 > 1.0) & !(d20 <= d15))) {
   i2 = 0;
   i4 = 19;
   break;
  }
  __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i5, d3, d8, d6, i1 + 176 | 0, d20, i1 + 192 | 0);
  __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i4, d11, d9, d10, i1 + 160 | 0, d20, i1 + 64 | 0);
  i19 = HEAP32[i2 + 168 >> 2] | 0;
  if ((i19 | 0) != 0) {
   i22 = HEAP32[(HEAP32[i19 >> 2] | 0) + 20 >> 2] | 0;
   HEAPF32[i1 + 48 >> 2] = 1.0;
   HEAPF32[i1 + 52 >> 2] = 0.0;
   HEAPF32[i1 + 56 >> 2] = 0.0;
   HEAPF32[i1 + 60 >> 2] = 0.0;
   FUNCTION_TABLE_viidi[i22 & 7](i19, i1 + 240 | 0, .20000000298023224, i1 + 48 | 0);
  }
  FUNCTION_TABLE_vid[HEAP32[HEAP32[i2 >> 2] >> 2] & 31](i2, d20);
  HEAP32[i1 >> 2] = 10224;
  HEAPF32[i1 + 36 >> 2] = 999999984306749400.0;
  HEAP8[i1 + 40 >> 0] = 0;
  __ZN27btContinuousConvexCollision20computeClosestPointsERK11btTransformS2_R16btPointCollector(i7, i1 + 192 | 0, i1 + 64 | 0, i1);
  if ((HEAP8[i1 + 40 >> 0] | 0) == 0) {
   i4 = 16;
   break;
  }
  d17 = +HEAPF32[i1 + 36 >> 2] + +HEAPF32[i2 + 172 >> 2];
  HEAP32[i1 + 144 >> 2] = HEAP32[i1 + 20 >> 2];
  HEAP32[i1 + 148 >> 2] = HEAP32[i1 + 24 >> 2];
  HEAP32[i1 + 152 >> 2] = HEAP32[i1 + 28 >> 2];
  HEAP32[i1 + 156 >> 2] = HEAP32[i1 + 32 >> 2];
  i19 = i13 + 1 | 0;
  if ((i13 | 0) > 63) {
   i4 = 17;
   break;
  } else {
   d14 = +HEAPF32[i1 + 4 >> 2];
   d16 = +HEAPF32[i1 + 8 >> 2];
   d18 = +HEAPF32[i1 + 12 >> 2];
   d21 = +HEAPF32[i1 + 16 >> 2];
   d15 = d20;
   i13 = i19;
  }
 }
 if ((i4 | 0) == 16) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i2, -1, i13);
  i22 = 0;
  STACKTOP = i1;
  return i22 | 0;
 } else if ((i4 | 0) == 17) {
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i2, -2, i19);
  i22 = 0;
  STACKTOP = i1;
  return i22 | 0;
 } else if ((i4 | 0) == 18) {
  HEAPF32[i2 + 164 >> 2] = d15;
  HEAPF32[i2 + 132 >> 2] = d14;
  HEAPF32[i2 + 136 >> 2] = d16;
  HEAPF32[i2 + 140 >> 2] = d18;
  HEAPF32[i2 + 144 >> 2] = d21;
  HEAP32[i2 + 148 >> 2] = HEAP32[i1 + 144 >> 2];
  HEAP32[i2 + 152 >> 2] = HEAP32[i1 + 148 >> 2];
  HEAP32[i2 + 156 >> 2] = HEAP32[i1 + 152 >> 2];
  HEAP32[i2 + 160 >> 2] = HEAP32[i1 + 156 >> 2];
  i22 = 1;
  STACKTOP = i1;
  return i22 | 0;
 } else if ((i4 | 0) == 19) {
  STACKTOP = i1;
  return i2 | 0;
 }
 return 0;
}
function __ZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i2, i39, i43, i44, i1) {
 i2 = i2 | 0;
 i39 = i39 | 0;
 i43 = i43 | 0;
 i44 = i44 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d45 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i44 = (HEAP8[i2 + 8 >> 0] | 0) != 0;
 i2 = i44 ? i43 : i39;
 i39 = i44 ? i39 : i43;
 d38 = +HEAPF32[i2 + 116 >> 2] - +HEAPF32[i2 + 52 >> 2];
 d40 = +HEAPF32[i2 + 120 >> 2] - +HEAPF32[i2 + 56 >> 2];
 d41 = +HEAPF32[i2 + 124 >> 2] - +HEAPF32[i2 + 60 >> 2];
 d42 = +HEAPF32[i2 + 252 >> 2];
 if (d38 * d38 + d40 * d40 + d41 * d41 < d42 * d42) {
  d42 = 1.0;
  STACKTOP = i1;
  return +d42;
 }
 d7 = +HEAPF32[i39 + 4 >> 2];
 d9 = +HEAPF32[i39 + 20 >> 2];
 d11 = +HEAPF32[i39 + 36 >> 2];
 d19 = +HEAPF32[i39 + 8 >> 2];
 d20 = +HEAPF32[i39 + 24 >> 2];
 d21 = +HEAPF32[i39 + 40 >> 2];
 d3 = +HEAPF32[i39 + 12 >> 2];
 d22 = +HEAPF32[i39 + 28 >> 2];
 d24 = +HEAPF32[i39 + 44 >> 2];
 d37 = -+HEAPF32[i39 + 52 >> 2];
 d38 = -+HEAPF32[i39 + 56 >> 2];
 d40 = -+HEAPF32[i39 + 60 >> 2];
 d8 = +HEAPF32[i2 + 4 >> 2];
 d10 = +HEAPF32[i2 + 20 >> 2];
 d12 = +HEAPF32[i2 + 36 >> 2];
 d13 = +HEAPF32[i2 + 8 >> 2];
 d14 = +HEAPF32[i2 + 24 >> 2];
 d15 = +HEAPF32[i2 + 40 >> 2];
 d16 = +HEAPF32[i2 + 12 >> 2];
 d17 = +HEAPF32[i2 + 28 >> 2];
 d18 = +HEAPF32[i2 + 44 >> 2];
 d29 = +HEAPF32[i2 + 52 >> 2];
 d28 = +HEAPF32[i2 + 56 >> 2];
 d27 = +HEAPF32[i2 + 60 >> 2];
 d25 = d7 * d37 + d9 * d38 + d11 * d40 + (d7 * d29 + d9 * d28 + d11 * d27);
 d26 = d19 * d37 + d20 * d38 + d21 * d40 + (d19 * d29 + d20 * d28 + d21 * d27);
 d27 = d3 * d37 + d22 * d38 + d24 * d40 + (d3 * d29 + d22 * d28 + d24 * d27);
 d28 = +HEAPF32[i2 + 68 >> 2];
 d29 = +HEAPF32[i2 + 84 >> 2];
 d30 = +HEAPF32[i2 + 100 >> 2];
 d31 = +HEAPF32[i2 + 72 >> 2];
 d32 = +HEAPF32[i2 + 88 >> 2];
 d33 = +HEAPF32[i2 + 104 >> 2];
 d34 = +HEAPF32[i2 + 76 >> 2];
 d35 = +HEAPF32[i2 + 92 >> 2];
 d6 = +HEAPF32[i2 + 108 >> 2];
 d41 = +HEAPF32[i2 + 116 >> 2];
 d42 = +HEAPF32[i2 + 120 >> 2];
 d23 = +HEAPF32[i2 + 124 >> 2];
 d5 = d7 * d37 + d9 * d38 + d11 * d40 + (d7 * d41 + d9 * d42 + d11 * d23);
 d4 = d19 * d37 + d20 * d38 + d21 * d40 + (d19 * d41 + d20 * d42 + d21 * d23);
 d23 = d3 * d37 + d22 * d38 + d24 * d40 + (d3 * d41 + d22 * d42 + d24 * d23);
 i39 = HEAP32[i39 + 192 >> 2] | 0;
 if (!(((HEAP32[i39 + 4 >> 2] | 0) + -21 | 0) >>> 0 < 9)) {
  d42 = 1.0;
  STACKTOP = i1;
  return +d42;
 }
 HEAPF32[i1 + 224 >> 2] = d25;
 HEAPF32[i1 + 228 >> 2] = d26;
 HEAPF32[i1 + 232 >> 2] = d27;
 HEAPF32[i1 + 236 >> 2] = 0.0;
 if (d5 < d25) {
  HEAPF32[i1 + 224 >> 2] = d5;
  d40 = d5;
 } else d40 = d25;
 if (d4 < d26) {
  HEAPF32[i1 + 228 >> 2] = d4;
  d41 = d4;
 } else d41 = d26;
 if (d23 < d27) {
  HEAPF32[i1 + 232 >> 2] = d23;
  d42 = d23;
 } else d42 = d27;
 HEAPF32[i1 + 208 >> 2] = d25;
 HEAPF32[i1 + 212 >> 2] = d26;
 HEAPF32[i1 + 216 >> 2] = d27;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 if (d25 < d5) {
  HEAPF32[i1 + 208 >> 2] = d5;
  d36 = d5;
 } else d36 = d25;
 if (d26 < d4) {
  HEAPF32[i1 + 212 >> 2] = d4;
  d37 = d4;
 } else d37 = d26;
 if (d27 < d23) {
  HEAPF32[i1 + 216 >> 2] = d23;
  d38 = d23;
 } else d38 = d27;
 d45 = +HEAPF32[i2 + 248 >> 2];
 HEAPF32[i1 + 224 >> 2] = d40 - d45;
 HEAPF32[i1 + 228 >> 2] = d41 - d45;
 HEAPF32[i1 + 232 >> 2] = d42 - d45;
 HEAPF32[i1 + 208 >> 2] = d45 + d36;
 HEAPF32[i1 + 212 >> 2] = d45 + d37;
 HEAPF32[i1 + 216 >> 2] = d45 + d38;
 HEAP32[i1 >> 2] = 18592;
 HEAPF32[i1 + 4 >> 2] = d7 * d8 + d9 * d10 + d11 * d12;
 HEAPF32[i1 + 8 >> 2] = d7 * d13 + d9 * d14 + d11 * d15;
 HEAPF32[i1 + 12 >> 2] = d7 * d16 + d9 * d17 + d11 * d18;
 HEAPF32[i1 + 16 >> 2] = 0.0;
 HEAPF32[i1 + 20 >> 2] = d19 * d8 + d20 * d10 + d21 * d12;
 HEAPF32[i1 + 24 >> 2] = d19 * d13 + d20 * d14 + d21 * d15;
 HEAPF32[i1 + 28 >> 2] = d19 * d16 + d20 * d17 + d21 * d18;
 HEAPF32[i1 + 32 >> 2] = 0.0;
 HEAPF32[i1 + 36 >> 2] = d3 * d8 + d22 * d10 + d24 * d12;
 HEAPF32[i1 + 40 >> 2] = d3 * d13 + d22 * d14 + d24 * d15;
 HEAPF32[i1 + 44 >> 2] = d3 * d16 + d22 * d17 + d24 * d18;
 HEAPF32[i1 + 48 >> 2] = 0.0;
 HEAPF32[i1 + 52 >> 2] = d25;
 HEAPF32[i1 + 56 >> 2] = d26;
 HEAPF32[i1 + 60 >> 2] = d27;
 HEAPF32[i1 + 64 >> 2] = 0.0;
 HEAPF32[i1 + 68 >> 2] = d7 * d28 + d9 * d29 + d11 * d30;
 HEAPF32[i1 + 72 >> 2] = d7 * d31 + d9 * d32 + d11 * d33;
 HEAPF32[i1 + 76 >> 2] = d7 * d34 + d9 * d35 + d11 * d6;
 HEAPF32[i1 + 80 >> 2] = 0.0;
 HEAPF32[i1 + 84 >> 2] = d19 * d28 + d20 * d29 + d21 * d30;
 HEAPF32[i1 + 88 >> 2] = d19 * d31 + d20 * d32 + d21 * d33;
 HEAPF32[i1 + 92 >> 2] = d19 * d34 + d20 * d35 + d21 * d6;
 HEAPF32[i1 + 96 >> 2] = 0.0;
 HEAPF32[i1 + 100 >> 2] = d3 * d28 + d22 * d29 + d24 * d30;
 HEAPF32[i1 + 104 >> 2] = d3 * d31 + d22 * d32 + d24 * d33;
 HEAPF32[i1 + 108 >> 2] = d3 * d34 + d22 * d35 + d24 * d6;
 HEAPF32[i1 + 112 >> 2] = 0.0;
 HEAPF32[i1 + 116 >> 2] = d5;
 HEAPF32[i1 + 120 >> 2] = d4;
 HEAPF32[i1 + 124 >> 2] = d23;
 HEAPF32[i1 + 128 >> 2] = 0.0;
 HEAPF32[i1 + 196 >> 2] = d45;
 HEAPF32[i1 + 200 >> 2] = +HEAPF32[i2 + 244 >> 2];
 if ((i39 | 0) == 0) {
  d45 = 1.0;
  STACKTOP = i1;
  return +d45;
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i39 >> 2] | 0) + 64 >> 2] & 127](i39, i1, i1 + 224 | 0, i1 + 208 | 0);
 d3 = +HEAPF32[i1 + 200 >> 2];
 if (!(d3 < +HEAPF32[i2 + 244 >> 2])) {
  d45 = 1.0;
  STACKTOP = i1;
  return +d45;
 }
 HEAPF32[i2 + 244 >> 2] = d3;
 d45 = d3;
 STACKTOP = i1;
 return +d45;
}
function __ZN15btCompoundShape15setLocalScalingERK9btVector3(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((HEAP32[i2 + 16 >> 2] | 0) <= 0) {
  i13 = i2 + 76 | 0;
  HEAP32[i13 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  i13 = HEAP32[i2 >> 2] | 0;
  i13 = i13 + 68 | 0;
  i13 = HEAP32[i13 >> 2] | 0;
  FUNCTION_TABLE_vi[i13 & 511](i2);
  STACKTOP = i8;
  return;
 }
 i5 = i8 + 32 | 0;
 i6 = i8 + 48 | 0;
 i7 = i8 + 64 | 0;
 i4 = 0;
 do {
  i13 = HEAP32[i2 + 24 >> 2] | 0;
  i12 = i13 + (i4 * 80 | 0) | 0;
  HEAP32[i8 + 16 >> 2] = HEAP32[i12 + 0 >> 2];
  HEAP32[i8 + 20 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i8 + 24 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i8 + 28 >> 2] = HEAP32[i12 + 12 >> 2];
  i12 = i13 + (i4 * 80 | 0) + 16 | 0;
  HEAP32[i5 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  i12 = i13 + (i4 * 80 | 0) + 32 | 0;
  HEAP32[i6 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  i12 = i13 + (i4 * 80 | 0) + 48 | 0;
  HEAP32[i7 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  i13 = HEAP32[i13 + (i4 * 80 | 0) + 64 >> 2] | 0;
  i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 127](i13) | 0;
  HEAP32[i8 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  d14 = +HEAPF32[i8 + 4 >> 2] * +HEAPF32[i3 + 4 >> 2] / +HEAPF32[i2 + 80 >> 2];
  d15 = +HEAPF32[i8 + 8 >> 2] * +HEAPF32[i3 + 8 >> 2] / +HEAPF32[i2 + 84 >> 2];
  HEAPF32[i8 >> 2] = +HEAPF32[i8 >> 2] * +HEAPF32[i3 >> 2] / +HEAPF32[i2 + 76 >> 2];
  HEAPF32[i8 + 4 >> 2] = d14;
  HEAPF32[i8 + 8 >> 2] = d15;
  HEAPF32[i8 + 12 >> 2] = 0.0;
  i13 = HEAP32[(HEAP32[i2 + 24 >> 2] | 0) + (i4 * 80 | 0) + 64 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] & 127](i13, i8);
  d15 = +HEAPF32[i8 + 68 >> 2] * +HEAPF32[i3 + 4 >> 2] / +HEAPF32[i2 + 80 >> 2];
  d14 = +HEAPF32[i8 + 72 >> 2] * +HEAPF32[i3 + 8 >> 2] / +HEAPF32[i2 + 84 >> 2];
  HEAPF32[i8 + 64 >> 2] = +HEAPF32[i7 >> 2] * +HEAPF32[i3 >> 2] / +HEAPF32[i2 + 76 >> 2];
  HEAPF32[i8 + 68 >> 2] = d15;
  HEAPF32[i8 + 72 >> 2] = d14;
  HEAPF32[i8 + 76 >> 2] = 0.0;
  i13 = HEAP32[i2 + 24 >> 2] | 0;
  i12 = i13 + (i4 * 80 | 0) | 0;
  HEAP32[i12 + 0 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i8 + 20 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i8 + 24 >> 2];
  HEAP32[i12 + 12 >> 2] = HEAP32[i8 + 28 >> 2];
  i12 = i13 + (i4 * 80 | 0) + 16 | 0;
  HEAP32[i12 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i12 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  i12 = i13 + (i4 * 80 | 0) + 32 | 0;
  HEAP32[i12 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i12 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  i13 = i13 + (i4 * 80 | 0) + 48 | 0;
  HEAP32[i13 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  if ((HEAP32[i2 + 64 >> 2] | 0) != 0) {
   i9 = HEAP32[(HEAP32[i2 + 24 >> 2] | 0) + (i4 * 80 | 0) + 64 >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9, i8 + 16 | 0, i8 + 128 | 0, i8 + 112 | 0);
   HEAP32[i8 + 80 >> 2] = HEAP32[i8 + 128 >> 2];
   HEAP32[i8 + 84 >> 2] = HEAP32[i8 + 132 >> 2];
   HEAP32[i8 + 88 >> 2] = HEAP32[i8 + 136 >> 2];
   HEAP32[i8 + 92 >> 2] = HEAP32[i8 + 140 >> 2];
   HEAP32[i8 + 96 >> 2] = HEAP32[i8 + 112 >> 2];
   HEAP32[i8 + 100 >> 2] = HEAP32[i8 + 116 >> 2];
   HEAP32[i8 + 104 >> 2] = HEAP32[i8 + 120 >> 2];
   HEAP32[i8 + 108 >> 2] = HEAP32[i8 + 124 >> 2];
   i9 = HEAP32[i2 + 64 >> 2] | 0;
   i1 = HEAP32[(HEAP32[i2 + 24 >> 2] | 0) + (i4 * 80 | 0) + 76 >> 2] | 0;
   i12 = __ZL10removeleafP6btDbvtP10btDbvtNode(i9, i1) | 0;
   L8 : do if ((i12 | 0) != 0) {
    i10 = HEAP32[i9 + 8 >> 2] | 0;
    if (!((i10 | 0) > -1)) {
     i12 = HEAP32[i9 >> 2] | 0;
     break;
    }
    if ((i10 | 0) > 0) {
     i11 = 0;
     while (1) {
      i13 = HEAP32[i12 + 32 >> 2] | 0;
      i11 = i11 + 1 | 0;
      if ((i13 | 0) == 0) break L8;
      if ((i11 | 0) >= (i10 | 0)) {
       i12 = i13;
       break;
      } else i12 = i13;
     }
    }
   } else i12 = 0; while (0);
   HEAP32[i1 + 0 >> 2] = HEAP32[i8 + 80 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 84 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i8 + 88 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i8 + 92 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i8 + 96 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i8 + 100 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i8 + 104 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i8 + 108 >> 2];
   __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i9, i12, i1);
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i2 + 16 >> 2] | 0));
 i13 = i2 + 76 | 0;
 HEAP32[i13 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i13 = HEAP32[i2 >> 2] | 0;
 i13 = i13 + 68 | 0;
 i13 = HEAP32[i13 >> 2] | 0;
 FUNCTION_TABLE_vi[i13 & 511](i2);
 STACKTOP = i8;
 return;
}
function _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3(i2, i8, i1) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(1331) | 0;
 if ((i4 | 0) == 0) i6 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i6 = i4 + 19 & -16;
 }
 if ((HEAP8[5024] | 0) == 0 ? (___cxa_guard_acquire(5024) | 0) != 0 : 0) {
  HEAP32[i3 + 80 >> 2] = 0;
  HEAP32[i3 + 84 >> 2] = 0;
  HEAP32[i3 + 88 >> 2] = 0;
  HEAP32[i3 + 92 >> 2] = 0;
  __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(4408, 0.0, 0, 0, i3 + 80 | 0);
  ___cxa_guard_release(5024);
 }
 HEAP32[i3 + 64 >> 2] = 0;
 HEAP32[i3 + 68 >> 2] = 0;
 HEAP32[i3 + 72 >> 2] = 0;
 HEAP32[i3 + 76 >> 2] = 0;
 __ZN11btRigidBody12setMassPropsEfRK9btVector3(4408, 0.0, i3 + 64 | 0);
 HEAP32[i6 + 4 >> 2] = 6;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 HEAPF32[i6 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i6 + 20 >> 0] = 1;
 HEAP8[i6 + 21 >> 0] = 0;
 HEAP32[i6 + 24 >> 2] = -1;
 i5 = i6 + 28 | 0;
 HEAP32[i5 >> 2] = 4408;
 i4 = i6 + 32 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAPF32[i6 + 36 >> 2] = 0.0;
 HEAPF32[i6 + 40 >> 2] = .30000001192092896;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAP32[i6 >> 2] = 2368;
 i7 = i6 + 112 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 i11 = i6 + 128 | 0;
 HEAP32[i11 + 0 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i8 + 20 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i8 + 24 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i8 + 28 >> 2];
 i11 = i6 + 144 | 0;
 HEAP32[i11 + 0 >> 2] = HEAP32[i8 + 32 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i8 + 36 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i8 + 40 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i8 + 44 >> 2];
 i11 = i6 + 160 | 0;
 HEAP32[i11 + 0 >> 2] = HEAP32[i8 + 48 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i8 + 52 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i8 + 56 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i8 + 60 >> 2];
 i11 = i6 + 48 | 0;
 i12 = i6 + 740 | 0;
 i9 = i6 + 756 | 0;
 i8 = i6 + 680 | 0;
 i10 = i8 + 48 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i10 | 0));
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAPF32[i9 >> 2] = .20000000298023224;
 HEAPF32[i6 + 760 >> 2] = .20000000298023224;
 HEAPF32[i6 + 764 >> 2] = .20000000298023224;
 i10 = i6 + 768 | 0;
 i12 = i6 + 728 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAPF32[i12 >> 2] = .699999988079071;
 HEAPF32[i6 + 732 >> 2] = 1.0;
 HEAPF32[i6 + 736 >> 2] = .5;
 HEAP8[i6 + 788 >> 0] = 0;
 HEAPF32[i6 + 792 >> 2] = 0.0;
 HEAPF32[i6 + 808 >> 2] = 0.0;
 HEAP8[i6 + 789 >> 0] = 0;
 HEAPF32[i6 + 796 >> 2] = 0.0;
 HEAPF32[i6 + 812 >> 2] = 0.0;
 HEAP8[i6 + 790 >> 0] = 0;
 HEAPF32[i6 + 800 >> 2] = 0.0;
 HEAPF32[i6 + 816 >> 2] = 0.0;
 HEAPF32[i6 + 928 >> 2] = 0.0;
 HEAPF32[i6 + 876 >> 2] = 0.0;
 HEAPF32[i6 + 880 >> 2] = .10000000149011612;
 HEAPF32[i6 + 884 >> 2] = 300.0;
 HEAPF32[i6 + 868 >> 2] = 1.0;
 HEAPF32[i6 + 872 >> 2] = -1.0;
 HEAPF32[i6 + 896 >> 2] = 0.0;
 HEAPF32[i6 + 900 >> 2] = .20000000298023224;
 HEAPF32[i6 + 904 >> 2] = 0.0;
 HEAPF32[i6 + 908 >> 2] = 0.0;
 HEAPF32[i6 + 888 >> 2] = 1.0;
 HEAPF32[i6 + 892 >> 2] = .5;
 HEAP32[i6 + 924 >> 2] = 0;
 HEAPF32[i6 + 916 >> 2] = 0.0;
 HEAP8[i6 + 912 >> 0] = 0;
 HEAPF32[i6 + 992 >> 2] = 0.0;
 HEAPF32[i6 + 940 >> 2] = 0.0;
 HEAPF32[i6 + 944 >> 2] = .10000000149011612;
 HEAPF32[i6 + 948 >> 2] = 300.0;
 HEAPF32[i6 + 932 >> 2] = 1.0;
 HEAPF32[i6 + 936 >> 2] = -1.0;
 HEAPF32[i6 + 960 >> 2] = 0.0;
 HEAPF32[i6 + 964 >> 2] = .20000000298023224;
 HEAPF32[i6 + 968 >> 2] = 0.0;
 HEAPF32[i6 + 972 >> 2] = 0.0;
 HEAPF32[i6 + 952 >> 2] = 1.0;
 HEAPF32[i6 + 956 >> 2] = .5;
 HEAP32[i6 + 988 >> 2] = 0;
 HEAPF32[i6 + 980 >> 2] = 0.0;
 HEAP8[i6 + 976 >> 0] = 0;
 HEAPF32[i6 + 1056 >> 2] = 0.0;
 HEAPF32[i6 + 1004 >> 2] = 0.0;
 HEAPF32[i6 + 1008 >> 2] = .10000000149011612;
 HEAPF32[i6 + 1012 >> 2] = 300.0;
 HEAPF32[i6 + 996 >> 2] = 1.0;
 HEAPF32[i6 + 1e3 >> 2] = -1.0;
 HEAPF32[i6 + 1024 >> 2] = 0.0;
 HEAPF32[i6 + 1028 >> 2] = .20000000298023224;
 HEAPF32[i6 + 1032 >> 2] = 0.0;
 HEAPF32[i6 + 1036 >> 2] = 0.0;
 HEAPF32[i6 + 1016 >> 2] = 1.0;
 HEAPF32[i6 + 1020 >> 2] = .5;
 HEAP32[i6 + 1052 >> 2] = 0;
 HEAPF32[i6 + 1044 >> 2] = 0.0;
 HEAP8[i6 + 1040 >> 0] = 0;
 HEAP8[i6 + 1300 >> 0] = i1 & 1;
 HEAP8[i6 + 1301 >> 0] = 1;
 HEAP32[i6 + 1304 >> 2] = 0;
 HEAP8[i6 + 1308 >> 0] = 0;
 __ZNK11btTransformmlERKS_(i3, i2 + 4 | 0, i7);
 HEAP32[i11 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i12 = i6 + 64 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i3 + 28 >> 2];
 i12 = i6 + 80 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i3 + 44 >> 2];
 i12 = i6 + 96 | 0;
 HEAP32[i12 + 0 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i3 + 60 >> 2];
 __ZN23btGeneric6DofConstraint19calculateTransformsERK11btTransformS2_(i6, (HEAP32[i5 >> 2] | 0) + 4 | 0, (HEAP32[i4 >> 2] | 0) + 4 | 0);
 STACKTOP = i3;
 return i6 | 0;
}
function _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4(i1, i4, i7, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(343) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAP8[i3 + 20 >> 0] = 1;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = i1;
 HEAPF32[i3 + 28 >> 2] = 0.0;
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 1;
 HEAPF32[i3 + 40 >> 2] = 1.0;
 HEAP8[i3 + 44 >> 0] = 1;
 HEAP32[i3 + 48 >> 2] = 0;
 HEAP8[i3 + 52 >> 0] = 0;
 HEAP8[i3 + 53 >> 0] = 1;
 HEAP8[i3 + 54 >> 0] = 1;
 HEAPF32[i3 + 56 >> 2] = .03999999910593033;
 HEAP8[i3 + 60 >> 0] = 0;
 HEAPF32[i3 + 64 >> 2] = 0.0;
 HEAP32[i3 + 68 >> 2] = i4;
 HEAP32[i3 + 72 >> 2] = 0;
 HEAP8[i3 + 76 >> 0] = 1;
 HEAP32[i3 + 80 >> 2] = 0;
 HEAP32[i3 + 84 >> 2] = 0;
 HEAP32[i3 + 88 >> 2] = 0;
 HEAPF32[i3 + 92 >> 2] = .6000000238418579;
 HEAPF32[i3 + 96 >> 2] = 1.0;
 HEAPF32[i3 + 100 >> 2] = .30000001192092896;
 HEAPF32[i3 + 104 >> 2] = .01666666753590107;
 HEAPF32[i3 + 108 >> 2] = 0.0;
 HEAPF32[i3 + 116 >> 2] = 20.0;
 HEAP32[i3 + 112 >> 2] = 10;
 HEAPF32[i3 + 124 >> 2] = .20000000298023224;
 HEAPF32[i3 + 128 >> 2] = .800000011920929;
 HEAPF32[i3 + 132 >> 2] = 0.0;
 HEAPF32[i3 + 120 >> 2] = 1.0;
 HEAP32[i3 + 136 >> 2] = 1;
 HEAPF32[i3 + 140 >> 2] = -.03999999910593033;
 HEAPF32[i3 + 144 >> 2] = .10000000149011612;
 HEAPF32[i3 + 148 >> 2] = 0.0;
 HEAPF32[i3 + 152 >> 2] = .8500000238418579;
 HEAP32[i3 + 156 >> 2] = 260;
 HEAP32[i3 + 160 >> 2] = 2;
 HEAP32[i3 + 164 >> 2] = 128;
 HEAPF32[i3 + 168 >> 2] = 100.0;
 HEAPF32[i3 + 172 >> 2] = 1.0000000150474662e+30;
 HEAP32[i3 >> 2] = 1392;
 HEAP8[i3 + 192 >> 0] = 1;
 HEAP32[i3 + 188 >> 2] = 0;
 HEAP32[i3 + 180 >> 2] = 0;
 HEAP32[i3 + 184 >> 2] = 0;
 i4 = i3 + 196 | 0;
 HEAP32[i4 >> 2] = 0;
 i5 = i3 + 200 | 0;
 HEAP32[i5 >> 2] = i7;
 HEAP8[i3 + 224 >> 0] = 1;
 HEAP32[i3 + 220 >> 2] = 0;
 HEAP32[i3 + 212 >> 2] = 0;
 HEAP32[i3 + 216 >> 2] = 0;
 HEAP8[i3 + 244 >> 0] = 1;
 HEAP32[i3 + 240 >> 2] = 0;
 HEAP32[i3 + 232 >> 2] = 0;
 HEAP32[i3 + 236 >> 2] = 0;
 HEAPF32[i3 + 248 >> 2] = 0.0;
 HEAPF32[i3 + 252 >> 2] = -10.0;
 i9 = i3 + 256 | 0;
 HEAP8[i3 + 274 >> 0] = 0;
 HEAP8[i3 + 275 >> 0] = 0;
 i8 = i3 + 292 | 0;
 HEAP32[i9 + 0 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP8[i8 >> 0] = 1;
 HEAP32[i3 + 288 >> 2] = 0;
 HEAP32[i3 + 280 >> 2] = 0;
 HEAP32[i3 + 284 >> 2] = 0;
 HEAP32[i3 + 296 >> 2] = 0;
 HEAP8[i3 + 300 >> 0] = 1;
 HEAP8[i3 + 320 >> 0] = 1;
 HEAP32[i3 + 316 >> 2] = 0;
 HEAP32[i3 + 308 >> 2] = 0;
 HEAP32[i3 + 312 >> 2] = 0;
 if ((i7 | 0) == 0) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i7 = _malloc(215) | 0;
  if ((i7 | 0) == 0) i7 = 0; else {
   HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
   i7 = i7 + 19 & -16;
  }
  HEAP32[i7 >> 2] = 4024;
  HEAP8[i7 + 20 >> 0] = 1;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAP8[i7 + 40 >> 0] = 1;
  HEAP32[i7 + 36 >> 2] = 0;
  HEAP32[i7 + 28 >> 2] = 0;
  HEAP32[i7 + 32 >> 2] = 0;
  HEAP8[i7 + 60 >> 0] = 1;
  HEAP32[i7 + 56 >> 2] = 0;
  HEAP32[i7 + 48 >> 2] = 0;
  HEAP32[i7 + 52 >> 2] = 0;
  HEAP8[i7 + 80 >> 0] = 1;
  HEAP32[i7 + 76 >> 2] = 0;
  HEAP32[i7 + 68 >> 2] = 0;
  HEAP32[i7 + 72 >> 2] = 0;
  HEAP8[i7 + 100 >> 0] = 1;
  HEAP32[i7 + 96 >> 2] = 0;
  HEAP32[i7 + 88 >> 2] = 0;
  HEAP32[i7 + 92 >> 2] = 0;
  HEAP8[i7 + 120 >> 0] = 1;
  HEAP32[i7 + 116 >> 2] = 0;
  HEAP32[i7 + 108 >> 2] = 0;
  HEAP32[i7 + 112 >> 2] = 0;
  HEAP8[i7 + 140 >> 0] = 1;
  HEAP32[i7 + 136 >> 2] = 0;
  HEAP32[i7 + 128 >> 2] = 0;
  HEAP32[i7 + 132 >> 2] = 0;
  HEAP8[i7 + 160 >> 0] = 1;
  HEAP32[i7 + 156 >> 2] = 0;
  HEAP32[i7 + 148 >> 2] = 0;
  HEAP32[i7 + 152 >> 2] = 0;
  HEAP8[i7 + 180 >> 0] = 1;
  HEAP32[i7 + 176 >> 2] = 0;
  HEAP32[i7 + 168 >> 2] = 0;
  HEAP32[i7 + 172 >> 2] = 0;
  HEAP32[i7 + 192 >> 2] = 0;
  HEAP32[i5 >> 2] = i7;
  HEAP8[i3 + 273 >> 0] = 1;
 } else HEAP8[i3 + 273 >> 0] = 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i7 = _malloc(87) | 0;
 if ((i7 | 0) != 0 ? (i6 = i7 + 19 & -16, HEAP32[i6 + -4 >> 2] = i7, (i7 + 19 & -16 | 0) != 0) : 0) {
  HEAP32[(i7 + 19 & -16) >> 2] = 16568;
  HEAP8[i6 + 20 >> 0] = 1;
  HEAP32[i6 + 16 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
  HEAP8[i6 + 40 >> 0] = 1;
  HEAP32[i6 + 36 >> 2] = 0;
  HEAP32[i6 + 28 >> 2] = 0;
  HEAP32[i6 + 32 >> 2] = 0;
  HEAP8[i6 + 60 >> 0] = 1;
  HEAP32[i6 + 56 >> 2] = 0;
  HEAP32[i6 + 48 >> 2] = 0;
  HEAP32[i6 + 52 >> 2] = 0;
  HEAP8[i6 + 64 >> 0] = 1;
  i6 = i7 + 19 & -16;
 } else i6 = 0;
 HEAP32[i3 + 204 >> 2] = i6;
 HEAP8[i3 + 272 >> 0] = 1;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(107) | 0;
 if ((i6 | 0) == 0) {
  i9 = 0;
  HEAP32[i4 >> 2] = i9;
  STACKTOP = i2;
  return i3 | 0;
 }
 i7 = i6 + 19 & -16;
 HEAP32[i7 + -4 >> 2] = i6;
 if ((i6 + 19 & -16 | 0) == 0) {
  i9 = 0;
  HEAP32[i4 >> 2] = i9;
  STACKTOP = i2;
  return i3 | 0;
 }
 i9 = HEAP32[i5 >> 2] | 0;
 HEAP32[(i6 + 19 & -16) >> 2] = 2240;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = i9;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i7 + 24 >> 2] = i1;
 HEAP8[i7 + 44 >> 0] = 1;
 HEAP32[i7 + 40 >> 2] = 0;
 HEAP32[i7 + 32 >> 2] = 0;
 HEAP32[i7 + 36 >> 2] = 0;
 HEAP8[i7 + 64 >> 0] = 1;
 HEAP32[i7 + 60 >> 2] = 0;
 HEAP32[i7 + 52 >> 2] = 0;
 HEAP32[i7 + 56 >> 2] = 0;
 HEAP8[i7 + 84 >> 0] = 1;
 HEAP32[i7 + 80 >> 2] = 0;
 HEAP32[i7 + 72 >> 2] = 0;
 HEAP32[i7 + 76 >> 2] = 0;
 i9 = i6 + 19 & -16;
 HEAP32[i4 >> 2] = i9;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN33btMinkowskiPenetrationDepthSolver24getPenetrationDirectionsEv() {
 var i1 = 0;
 i1 = STACKTOP;
 if ((HEAP8[14560] | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 if ((___cxa_guard_acquire(14560) | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAPF32[3392] = 0.0;
 HEAPF32[3393] = -0.0;
 HEAPF32[3394] = -1.0;
 HEAPF32[3395] = 0.0;
 HEAPF32[3396] = .7236080169677734;
 HEAPF32[3397] = -.5257250070571899;
 HEAPF32[3398] = -.44721901416778564;
 HEAPF32[3399] = 0.0;
 HEAPF32[3400] = -.2763879895210266;
 HEAPF32[3401] = -.8506489992141724;
 HEAPF32[3402] = -.44721901416778564;
 HEAPF32[3403] = 0.0;
 HEAPF32[3404] = -.8944259881973267;
 HEAPF32[3405] = -0.0;
 HEAPF32[3406] = -.4472160041332245;
 HEAPF32[3407] = 0.0;
 HEAPF32[3408] = -.2763879895210266;
 HEAPF32[3409] = .8506489992141724;
 HEAPF32[3410] = -.44721999764442444;
 HEAPF32[3411] = 0.0;
 HEAPF32[3412] = .7236080169677734;
 HEAPF32[3413] = .5257250070571899;
 HEAPF32[3414] = -.44721901416778564;
 HEAPF32[3415] = 0.0;
 HEAPF32[3416] = .2763879895210266;
 HEAPF32[3417] = -.8506489992141724;
 HEAPF32[3418] = .44721999764442444;
 HEAPF32[3419] = 0.0;
 HEAPF32[3420] = -.7236080169677734;
 HEAPF32[3421] = -.5257250070571899;
 HEAPF32[3422] = .44721901416778564;
 HEAPF32[3423] = 0.0;
 HEAPF32[3424] = -.7236080169677734;
 HEAPF32[3425] = .5257250070571899;
 HEAPF32[3426] = .44721901416778564;
 HEAPF32[3427] = 0.0;
 HEAPF32[3428] = .2763879895210266;
 HEAPF32[3429] = .8506489992141724;
 HEAPF32[3430] = .44721901416778564;
 HEAPF32[3431] = 0.0;
 HEAPF32[3432] = .8944259881973267;
 HEAPF32[3433] = 0.0;
 HEAPF32[3434] = .4472160041332245;
 HEAPF32[3435] = 0.0;
 HEAPF32[3436] = -0.0;
 HEAPF32[3437] = 0.0;
 HEAPF32[3438] = 1.0;
 HEAPF32[3439] = 0.0;
 HEAPF32[3440] = .4253230094909668;
 HEAPF32[3441] = -.3090110123157501;
 HEAPF32[3442] = -.8506540060043335;
 HEAPF32[3443] = 0.0;
 HEAPF32[3444] = -.16245600581169128;
 HEAPF32[3445] = -.49999499320983887;
 HEAPF32[3446] = -.8506540060043335;
 HEAPF32[3447] = 0.0;
 HEAPF32[3448] = .2628690004348755;
 HEAPF32[3449] = -.8090119957923889;
 HEAPF32[3450] = -.525738000869751;
 HEAPF32[3451] = 0.0;
 HEAPF32[3452] = .4253230094909668;
 HEAPF32[3453] = .3090110123157501;
 HEAPF32[3454] = -.8506540060043335;
 HEAPF32[3455] = 0.0;
 HEAPF32[3456] = .8506479859352112;
 HEAPF32[3457] = -0.0;
 HEAPF32[3458] = -.5257359743118286;
 HEAPF32[3459] = 0.0;
 HEAPF32[3460] = -.5257300138473511;
 HEAPF32[3461] = -0.0;
 HEAPF32[3462] = -.8506519794464111;
 HEAPF32[3463] = 0.0;
 HEAPF32[3464] = -.6881899833679199;
 HEAPF32[3465] = -.49999698996543884;
 HEAPF32[3466] = -.5257359743118286;
 HEAPF32[3467] = 0.0;
 HEAPF32[3468] = -.16245600581169128;
 HEAPF32[3469] = .49999499320983887;
 HEAPF32[3470] = -.8506540060043335;
 HEAPF32[3471] = 0.0;
 HEAPF32[3472] = -.6881899833679199;
 HEAPF32[3473] = .49999698996543884;
 HEAPF32[3474] = -.5257359743118286;
 HEAPF32[3475] = 0.0;
 HEAPF32[3476] = .2628690004348755;
 HEAPF32[3477] = .8090119957923889;
 HEAPF32[3478] = -.525738000869751;
 HEAPF32[3479] = 0.0;
 HEAPF32[3480] = .9510579705238342;
 HEAPF32[3481] = .3090130090713501;
 HEAPF32[3482] = 0.0;
 HEAPF32[3483] = 0.0;
 HEAPF32[3484] = .9510579705238342;
 HEAPF32[3485] = -.3090130090713501;
 HEAPF32[3486] = 0.0;
 HEAPF32[3487] = 0.0;
 HEAPF32[3488] = .5877860188484192;
 HEAPF32[3489] = -.80901700258255;
 HEAPF32[3490] = 0.0;
 HEAPF32[3491] = 0.0;
 HEAPF32[3492] = 0.0;
 HEAPF32[3493] = -1.0;
 HEAPF32[3494] = 0.0;
 HEAPF32[3495] = 0.0;
 HEAPF32[3496] = -.5877860188484192;
 HEAPF32[3497] = -.80901700258255;
 HEAPF32[3498] = 0.0;
 HEAPF32[3499] = 0.0;
 HEAPF32[3500] = -.9510579705238342;
 HEAPF32[3501] = -.3090130090713501;
 HEAPF32[3502] = -0.0;
 HEAPF32[3503] = 0.0;
 HEAPF32[3504] = -.9510579705238342;
 HEAPF32[3505] = .3090130090713501;
 HEAPF32[3506] = -0.0;
 HEAPF32[3507] = 0.0;
 HEAPF32[3508] = -.5877860188484192;
 HEAPF32[3509] = .80901700258255;
 HEAPF32[3510] = -0.0;
 HEAPF32[3511] = 0.0;
 HEAPF32[3512] = -0.0;
 HEAPF32[3513] = 1.0;
 HEAPF32[3514] = -0.0;
 HEAPF32[3515] = 0.0;
 HEAPF32[3516] = .5877860188484192;
 HEAPF32[3517] = .80901700258255;
 HEAPF32[3518] = -0.0;
 HEAPF32[3519] = 0.0;
 HEAPF32[3520] = .6881899833679199;
 HEAPF32[3521] = -.49999698996543884;
 HEAPF32[3522] = .5257359743118286;
 HEAPF32[3523] = 0.0;
 HEAPF32[3524] = -.2628690004348755;
 HEAPF32[3525] = -.8090119957923889;
 HEAPF32[3526] = .525738000869751;
 HEAPF32[3527] = 0.0;
 HEAPF32[3528] = -.8506479859352112;
 HEAPF32[3529] = 0.0;
 HEAPF32[3530] = .5257359743118286;
 HEAPF32[3531] = 0.0;
 HEAPF32[3532] = -.2628690004348755;
 HEAPF32[3533] = .8090119957923889;
 HEAPF32[3534] = .525738000869751;
 HEAPF32[3535] = 0.0;
 HEAPF32[3536] = .6881899833679199;
 HEAPF32[3537] = .49999698996543884;
 HEAPF32[3538] = .5257359743118286;
 HEAPF32[3539] = 0.0;
 HEAPF32[3540] = .5257300138473511;
 HEAPF32[3541] = 0.0;
 HEAPF32[3542] = .8506519794464111;
 HEAPF32[3543] = 0.0;
 HEAPF32[3544] = .16245600581169128;
 HEAPF32[3545] = -.49999499320983887;
 HEAPF32[3546] = .8506540060043335;
 HEAPF32[3547] = 0.0;
 HEAPF32[3548] = -.4253230094909668;
 HEAPF32[3549] = -.3090110123157501;
 HEAPF32[3550] = .8506540060043335;
 HEAPF32[3551] = 0.0;
 HEAPF32[3552] = -.4253230094909668;
 HEAPF32[3553] = .3090110123157501;
 HEAPF32[3554] = .8506540060043335;
 HEAPF32[3555] = 0.0;
 HEAPF32[3556] = .16245600581169128;
 HEAPF32[3557] = .49999499320983887;
 HEAPF32[3558] = .8506540060043335;
 HEAPF32[3559] = 0.0;
 ___cxa_guard_release(14560);
 STACKTOP = i1;
 return;
}
function __ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i15, i6, i10, d8, d9, d7, i17, i16, i22) {
 i15 = i15 | 0;
 i6 = i6 | 0;
 i10 = i10 | 0;
 d8 = +d8;
 d9 = +d9;
 d7 = +d7;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, i26 = 0, d27 = 0.0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, d46 = 0.0, d47 = 0.0, d48 = 0.0, d49 = 0.0, d50 = 0.0, d51 = 0.0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, d56 = 0.0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 d4 = +HEAPF32[i10 >> 2];
 d5 = +HEAPF32[i10 + 4 >> 2];
 d27 = +HEAPF32[i10 + 8 >> 2];
 d3 = 1.0 / +Math_sqrt(+((d8 - d4) * (d8 - d4) + (d9 - d5) * (d9 - d5) + (d7 - d27) * (d7 - d27)));
 if ((d8 - d4) * d3 == 0.0) d23 = 999999984306749400.0; else d23 = 1.0 / ((d8 - d4) * d3);
 if ((d9 - d5) * d3 == 0.0) d24 = 999999984306749400.0; else d24 = 1.0 / ((d9 - d5) * d3);
 if ((d7 - d27) * d3 == 0.0) d25 = 999999984306749400.0; else d25 = 1.0 / ((d7 - d27) * d3);
 i2 = d23 < 0.0 & 1;
 i28 = d24 < 0.0 & 1;
 i26 = d25 < 0.0 & 1;
 d60 = (d4 > d8 ? d8 : d4) + +HEAPF32[i17 >> 2];
 d59 = (d5 > d9 ? d9 : d5) + +HEAPF32[i17 + 4 >> 2];
 d58 = (d27 > d7 ? d7 : d27) + +HEAPF32[i17 + 8 >> 2];
 d56 = (d4 < d8 ? d8 : d4) + +HEAPF32[i16 >> 2];
 d52 = (d5 < d9 ? d9 : d5) + +HEAPF32[i16 + 4 >> 2];
 d48 = (d27 < d7 ? d7 : d27) + +HEAPF32[i16 + 8 >> 2];
 d55 = +HEAPF32[i15 + 4 >> 2];
 d60 = d60 < d55 ? d55 : d60;
 d51 = +HEAPF32[i15 + 8 >> 2];
 d59 = d59 < d51 ? d51 : d59;
 d47 = +HEAPF32[i15 + 12 >> 2];
 d58 = d58 < d47 ? d47 : d58;
 d57 = +HEAPF32[i15 + 20 >> 2];
 d53 = +HEAPF32[i15 + 24 >> 2];
 d49 = +HEAPF32[i15 + 28 >> 2];
 d54 = +HEAPF32[i15 + 36 >> 2];
 d50 = +HEAPF32[i15 + 40 >> 2];
 d46 = +HEAPF32[i15 + 44 >> 2];
 i30 = ~~(((d57 < d60 ? d57 : d60) - d55) * d54) & 65534;
 i33 = ~~(((d53 < d59 ? d53 : d59) - d51) * d50) & 65534;
 i31 = ~~(((d49 < d58 ? d49 : d58) - d47) * d46) & 65534;
 d56 = d56 < d55 ? d55 : d56;
 d52 = d52 < d51 ? d51 : d52;
 d48 = d48 < d47 ? d47 : d48;
 i29 = (~~(((d57 < d56 ? d57 : d56) - d55) * d54 + 1.0) & 65535 | 1) & 65535;
 i34 = (~~(((d53 < d52 ? d53 : d52) - d51) * d50 + 1.0) & 65535 | 1) & 65535;
 i32 = (~~(((d49 < d48 ? d49 : d48) - d47) * d46 + 1.0) & 65535 | 1) & 65535;
 if ((i22 | 0) > 0) {
  i35 = 0;
  i37 = HEAP32[i15 + 136 >> 2] | 0;
  i36 = 0;
  do {
   i36 = i36 + 1 | 0;
   i40 = i37 + 6 | 0;
   i44 = HEAP16[i37 >> 1] | 0;
   i45 = i37 + 10 | 0;
   i42 = HEAP16[i37 + 4 >> 1] | 0;
   i41 = i37 + 8 | 0;
   i43 = HEAP16[i37 + 2 >> 1] | 0;
   i38 = i37 + 12 | 0;
   i39 = (HEAP32[i38 >> 2] | 0) > -1;
   if (((((i29 & 65535) >= (i44 & 65535) ? (i30 & 65535) <= (HEAPU16[i40 >> 1] | 0) : 0) & (i31 & 65535) <= (HEAPU16[i45 >> 1] | 0) & (i32 & 65535) >= (i42 & 65535) & (i33 & 65535) <= (HEAPU16[i41 >> 1] | 0) & (i34 & 65535) >= (i43 & 65535) ? (d56 = +HEAPF32[i15 + 36 >> 2], d58 = +HEAPF32[i15 + 40 >> 2], d60 = +HEAPF32[i15 + 44 >> 2], d57 = +HEAPF32[i15 + 4 >> 2], d59 = +HEAPF32[i15 + 8 >> 2], d18 = +HEAPF32[i15 + 12 >> 2], HEAPF32[i1 + 12 >> 2] = 0.0, d20 = +(HEAPU16[i40 >> 1] | 0) / d56 + d57, d19 = +(HEAPU16[i41 >> 1] | 0) / d58 + d59, d21 = +(HEAPU16[i45 >> 1] | 0) / d60 + d18, HEAPF32[i1 + 28 >> 2] = 0.0, HEAPF32[i1 >> 2] = +(i44 & 65535) / d56 + d57 - +HEAPF32[i16 >> 2], HEAPF32[i1 + 4 >> 2] = +(i43 & 65535) / d58 + d59 - +HEAPF32[i16 + 4 >> 2], HEAPF32[i1 + 8 >> 2] = +(i42 & 65535) / d60 + d18 - +HEAPF32[i16 + 8 >> 2], HEAPF32[i1 + 16 >> 2] = d20 - +HEAPF32[i17 >> 2], HEAPF32[i1 + 20 >> 2] = d19 - +HEAPF32[i17 + 4 >> 2], HEAPF32[i1 + 24 >> 2] = d21 - +HEAPF32[i17 + 8 >> 2], d21 = +HEAPF32[i10 >> 2], d19 = d23 * (+HEAPF32[i1 + (i2 << 4) >> 2] - d21), d21 = d23 * (+HEAPF32[i1 + ((i2 ^ 1) << 4) >> 2] - d21), d20 = +HEAPF32[i10 + 4 >> 2], d18 = d24 * (+HEAPF32[i1 + (i28 << 4) + 4 >> 2] - d20), d20 = d24 * (+HEAPF32[i1 + ((i28 ^ 1) << 4) + 4 >> 2] - d20), !(d19 > d20 | d18 > d21)) : 0) ? (d14 = d18 > d19 ? d18 : d19, d12 = d20 < d21 ? d20 : d21, d11 = +HEAPF32[i10 + 8 >> 2], d13 = d25 * (+HEAPF32[i1 + (i26 << 4) + 8 >> 2] - d11), d11 = d25 * (+HEAPF32[i1 + ((i26 ^ 1) << 4) + 8 >> 2] - d11), !(d14 > d11 | d13 > d12)) : 0) ? (d13 > d14 ? d13 : d14) < (d7 - d27) * (d7 - d27) * d3 + ((d8 - d4) * (d8 - d4) * d3 + (d9 - d5) * (d9 - d5) * d3) : 0) {
    i41 = !((d11 < d12 ? d11 : d12) > 0.0);
    if (i41 | i39 ^ 1) i40 = 15; else {
     i40 = HEAP32[i38 >> 2] | 0;
     FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 127](i6, i40 >> 21, i40 & 2097151);
     i40 = 16;
    }
   } else {
    i41 = 1;
    i40 = 15;
   }
   if ((i40 | 0) == 15) {
    i40 = 0;
    if (i39 | i41 ^ 1) i40 = 16; else {
     i45 = HEAP32[i38 >> 2] | 0;
     i35 = i35 - i45 | 0;
     i37 = i37 + (0 - i45 << 4) | 0;
    }
   }
   if ((i40 | 0) == 16) {
    i35 = i35 + 1 | 0;
    i37 = i37 + 16 | 0;
   }
  } while ((i35 | 0) < (i22 | 0));
 } else i36 = 0;
 if ((HEAP32[4028] | 0) >= (i36 | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[4028] = i36;
 STACKTOP = i1;
 return;
}
function __ZN6btDbvt24collideTTpersistentStackEPK10btDbvtNodeS2_RNS_8ICollideE(i1, i5, i6, i3) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) == 0 | (i6 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 24 >> 2] | 0) < 128 ? (HEAP32[i1 + 28 >> 2] | 0) < 128 : 0) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i4 = _malloc(1043) | 0;
  if ((i4 | 0) == 0) i4 = 0; else {
   HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
   i4 = i4 + 19 & -16;
  }
  i9 = HEAP32[i1 + 24 >> 2] | 0;
  if ((i9 | 0) > 0) {
   i8 = 0;
   do {
    i7 = i4 + (i8 << 3) | 0;
    if ((i7 | 0) != 0) {
     i12 = (HEAP32[i1 + 32 >> 2] | 0) + (i8 << 3) | 0;
     i13 = HEAP32[i12 + 4 >> 2] | 0;
     HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
     HEAP32[i7 + 4 >> 2] = i13;
    }
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i9 | 0));
  }
  i7 = HEAP32[i1 + 32 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 32 >> 2] = 0;
  }
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = i4;
  HEAP32[i1 + 28 >> 2] = 128;
  i4 = i1 + 28 | 0;
 } else i4 = i1 + 28 | 0;
 HEAP32[i1 + 24 >> 2] = 128;
 i9 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i9 + 4 >> 2] = i6;
 i6 = 1;
 i9 = 124;
 do {
  i8 = i6 + -1 | 0;
  i11 = HEAP32[i1 + 32 >> 2] | 0;
  i7 = HEAP32[i11 + (i8 << 3) >> 2] | 0;
  i5 = HEAP32[i11 + (i8 << 3) + 4 >> 2] | 0;
  if ((i8 | 0) > (i9 | 0)) {
   i9 = HEAP32[i1 + 24 >> 2] | 0;
   if ((i9 | 0) < (i9 << 1 | 0) ? (HEAP32[i4 >> 2] | 0) < (i9 << 1 | 0) : 0) {
    if ((i9 | 0) != 0) {
     HEAP32[5004] = (HEAP32[5004] | 0) + 1;
     i10 = _malloc((i9 << 4 | 3) + 16 | 0) | 0;
     if ((i10 | 0) == 0) i13 = 0; else {
      HEAP32[(i10 + 19 & -16) + -4 >> 2] = i10;
      i13 = i10 + 19 & -16;
     }
     i11 = HEAP32[i1 + 24 >> 2] | 0;
     if ((i11 | 0) > 0) {
      i10 = 0;
      do {
       i12 = i13 + (i10 << 3) | 0;
       if ((i12 | 0) != 0) {
        i15 = (HEAP32[i1 + 32 >> 2] | 0) + (i10 << 3) | 0;
        i14 = HEAP32[i15 + 4 >> 2] | 0;
        HEAP32[i12 >> 2] = HEAP32[i15 >> 2];
        HEAP32[i12 + 4 >> 2] = i14;
       }
       i10 = i10 + 1 | 0;
      } while ((i10 | 0) != (i11 | 0));
      i11 = i13;
     } else i11 = i13;
    } else i11 = 0;
    i10 = HEAP32[i1 + 32 >> 2] | 0;
    if ((i10 | 0) != 0) {
     if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i10 + -4 >> 2] | 0);
     }
     HEAP32[i1 + 32 >> 2] = 0;
    }
    HEAP8[i1 + 36 >> 0] = 1;
    HEAP32[i1 + 32 >> 2] = i11;
    HEAP32[i4 >> 2] = i9 << 1;
   }
   HEAP32[i1 + 24 >> 2] = i9 << 1;
   i9 = (i9 << 1) + -4 | 0;
  }
  do if ((i7 | 0) == (i5 | 0)) if ((HEAP32[i7 + 40 >> 2] | 0) == 0) i6 = i8; else {
   i14 = HEAP32[i7 + 36 >> 2] | 0;
   i15 = i11 + (i8 << 3) | 0;
   HEAP32[i15 >> 2] = i14;
   HEAP32[i15 + 4 >> 2] = i14;
   i15 = HEAP32[i7 + 40 >> 2] | 0;
   i14 = (HEAP32[i1 + 32 >> 2] | 0) + (i6 << 3) | 0;
   HEAP32[i14 >> 2] = i15;
   HEAP32[i14 + 4 >> 2] = i15;
   i14 = HEAP32[i7 + 40 >> 2] | 0;
   i15 = (HEAP32[i1 + 32 >> 2] | 0) + (i6 + 1 << 3) | 0;
   HEAP32[i15 >> 2] = HEAP32[i7 + 36 >> 2];
   HEAP32[i15 + 4 >> 2] = i14;
   i6 = i6 + 2 | 0;
  } else if (((((+HEAPF32[i7 >> 2] <= +HEAPF32[i5 + 16 >> 2] ? +HEAPF32[i7 + 16 >> 2] >= +HEAPF32[i5 >> 2] : 0) ? +HEAPF32[i7 + 4 >> 2] <= +HEAPF32[i5 + 20 >> 2] : 0) ? +HEAPF32[i7 + 20 >> 2] >= +HEAPF32[i5 + 4 >> 2] : 0) ? +HEAPF32[i7 + 8 >> 2] <= +HEAPF32[i5 + 24 >> 2] : 0) ? +HEAPF32[i7 + 24 >> 2] >= +HEAPF32[i5 + 8 >> 2] : 0) {
   i10 = (HEAP32[i5 + 40 >> 2] | 0) != 0;
   if ((HEAP32[i7 + 40 >> 2] | 0) == 0) if (i10) {
    i15 = HEAP32[i5 + 36 >> 2] | 0;
    i14 = i11 + (i8 << 3) | 0;
    HEAP32[i14 >> 2] = i7;
    HEAP32[i14 + 4 >> 2] = i15;
    i14 = HEAP32[i5 + 40 >> 2] | 0;
    i15 = (HEAP32[i1 + 32 >> 2] | 0) + (i6 << 3) | 0;
    HEAP32[i15 >> 2] = i7;
    HEAP32[i15 + 4 >> 2] = i14;
    i6 = i6 + 1 | 0;
    break;
   } else {
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i7, i5);
    i6 = i8;
    break;
   } else {
    i8 = i11 + (i8 << 3) | 0;
    i11 = HEAP32[i7 + 36 >> 2] | 0;
    if (i10) {
     i14 = HEAP32[i5 + 36 >> 2] | 0;
     HEAP32[i8 >> 2] = i11;
     HEAP32[i8 + 4 >> 2] = i14;
     i14 = HEAP32[i5 + 36 >> 2] | 0;
     i15 = (HEAP32[i1 + 32 >> 2] | 0) + (i6 << 3) | 0;
     HEAP32[i15 >> 2] = HEAP32[i7 + 40 >> 2];
     HEAP32[i15 + 4 >> 2] = i14;
     i15 = HEAP32[i5 + 40 >> 2] | 0;
     i14 = (HEAP32[i1 + 32 >> 2] | 0) + (i6 + 1 << 3) | 0;
     HEAP32[i14 >> 2] = HEAP32[i7 + 36 >> 2];
     HEAP32[i14 + 4 >> 2] = i15;
     i14 = HEAP32[i5 + 40 >> 2] | 0;
     i15 = (HEAP32[i1 + 32 >> 2] | 0) + (i6 + 2 << 3) | 0;
     HEAP32[i15 >> 2] = HEAP32[i7 + 40 >> 2];
     HEAP32[i15 + 4 >> 2] = i14;
     i6 = i6 + 3 | 0;
     break;
    } else {
     HEAP32[i8 >> 2] = i11;
     HEAP32[i8 + 4 >> 2] = i5;
     i15 = (HEAP32[i1 + 32 >> 2] | 0) + (i6 << 3) | 0;
     HEAP32[i15 >> 2] = HEAP32[i7 + 40 >> 2];
     HEAP32[i15 + 4 >> 2] = i5;
     i6 = i6 + 1 | 0;
     break;
    }
   }
  } else i6 = i8; while (0);
 } while ((i6 | 0) != 0);
 STACKTOP = i2;
 return;
}
function __ZN16btRaycastVehicle20updateWheelTransformEib(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0;
 i5 = STACKTOP;
 __ZN16btRaycastVehicle23updateWheelTransformsWSER11btWheelInfob(i4, i2 + (i1 * 284 | 0) | 0, i3);
 d13 = +HEAPF32[i2 + (i1 * 284 | 0) + 52 >> 2];
 d8 = +HEAPF32[i2 + (i1 * 284 | 0) + 56 >> 2];
 d17 = +HEAPF32[i2 + (i1 * 284 | 0) + 60 >> 2];
 d33 = +HEAPF32[i2 + (i1 * 284 | 0) + 76 >> 2];
 d26 = +HEAPF32[i2 + (i1 * 284 | 0) + 72 >> 2];
 d25 = +HEAPF32[i2 + (i1 * 284 | 0) + 68 >> 2];
 d23 = 1.0 / +Math_sqrt(+((d26 * -d13 - d25 * -d8) * (d26 * -d13 - d25 * -d8) + ((d33 * -d8 - d26 * -d17) * (d33 * -d8 - d26 * -d17) + (d25 * -d17 - d33 * -d13) * (d25 * -d17 - d33 * -d13))));
 d22 = (d33 * -d8 - d26 * -d17) * d23;
 d21 = d23 * (d25 * -d17 - d33 * -d13);
 d23 = d23 * (d26 * -d13 - d25 * -d8);
 d6 = +HEAPF32[i2 + (i1 * 284 | 0) + 232 >> 2] * .5;
 d11 = +Math_sin(+d6) / +Math_sqrt(+(d13 * d13 + d8 * d8 + d17 * d17));
 d6 = +Math_cos(+d6);
 d12 = 2.0 / (d6 * d6 + (d11 * -d17 * d11 * -d17 + (d11 * -d13 * d11 * -d13 + d11 * -d8 * d11 * -d8)));
 d31 = 1.0 - (d11 * -d8 * d11 * -d8 * d12 + d11 * -d17 * d11 * -d17 * d12);
 d30 = d11 * -d13 * d11 * -d8 * d12 - d6 * d11 * -d17 * d12;
 d32 = d11 * -d13 * d11 * -d17 * d12 + d6 * d11 * -d8 * d12;
 d28 = d11 * -d13 * d11 * -d8 * d12 + d6 * d11 * -d17 * d12;
 d27 = 1.0 - (d11 * -d13 * d11 * -d13 * d12 + d11 * -d17 * d11 * -d17 * d12);
 d29 = d11 * -d8 * d11 * -d17 * d12 - d6 * d11 * -d13 * d12;
 d10 = d11 * -d13 * d11 * -d17 * d12 - d6 * d11 * -d8 * d12;
 d6 = d11 * -d8 * d11 * -d17 * d12 + d6 * d11 * -d13 * d12;
 d12 = 1.0 - (d11 * -d13 * d11 * -d13 * d12 + d11 * -d8 * d11 * -d8 * d12);
 d11 = +HEAPF32[i2 + (i1 * 284 | 0) + 236 >> 2] * -.5;
 d24 = +Math_sin(+d11) / +Math_sqrt(+(d33 * d33 + (d26 * d26 + d25 * d25)));
 d11 = +Math_cos(+d11);
 d18 = 2.0 / (d11 * d11 + (d33 * d24 * d33 * d24 + (d25 * d24 * d25 * d24 + d26 * d24 * d26 * d24)));
 d14 = 1.0 - (d26 * d24 * d26 * d24 * d18 + d33 * d24 * d33 * d24 * d18);
 d9 = d25 * d24 * d26 * d24 * d18 - d11 * d33 * d24 * d18;
 d20 = d25 * d24 * d33 * d24 * d18 + d11 * d26 * d24 * d18;
 d15 = d25 * d24 * d26 * d24 * d18 + d11 * d33 * d24 * d18;
 d7 = 1.0 - (d25 * d24 * d25 * d24 * d18 + d33 * d24 * d33 * d24 * d18);
 d19 = d26 * d24 * d33 * d24 * d18 - d11 * d25 * d24 * d18;
 d16 = d25 * d24 * d33 * d24 * d18 - d11 * d26 * d24 * d18;
 d11 = d26 * d24 * d33 * d24 * d18 + d11 * d25 * d24 * d18;
 d18 = 1.0 - (d25 * d24 * d25 * d24 * d18 + d26 * d24 * d26 * d24 * d18);
 d24 = +HEAPF32[i2 + (i1 * 284 | 0) + 72 >> 2];
 d26 = +HEAPF32[i2 + (i1 * 284 | 0) + 76 >> 2];
 HEAPF32[i2 + (i1 * 284 | 0) + 92 >> 2] = d26 * (d31 * d20 + d30 * d19 + d32 * d18) + (d25 * (d32 * d16 + (d30 * d15 + d31 * d14)) + d24 * (d32 * d11 + (d31 * d9 + d30 * d7)));
 HEAPF32[i2 + (i1 * 284 | 0) + 96 >> 2] = d23 * (d31 * d20 + d30 * d19 + d32 * d18) + (d22 * (d32 * d16 + (d30 * d15 + d31 * d14)) + d21 * (d32 * d11 + (d31 * d9 + d30 * d7)));
 HEAPF32[i2 + (i1 * 284 | 0) + 100 >> 2] = (d31 * d20 + d30 * d19 + d32 * d18) * -d17 + ((d32 * d16 + (d30 * d15 + d31 * d14)) * -d13 + (d32 * d11 + (d31 * d9 + d30 * d7)) * -d8);
 HEAPF32[i2 + (i1 * 284 | 0) + 104 >> 2] = 0.0;
 HEAPF32[i2 + (i1 * 284 | 0) + 108 >> 2] = d26 * (d28 * d20 + d27 * d19 + d29 * d18) + (d25 * (d29 * d16 + (d27 * d15 + d28 * d14)) + d24 * (d29 * d11 + (d28 * d9 + d27 * d7)));
 HEAPF32[i2 + (i1 * 284 | 0) + 112 >> 2] = d23 * (d28 * d20 + d27 * d19 + d29 * d18) + (d22 * (d29 * d16 + (d27 * d15 + d28 * d14)) + d21 * (d29 * d11 + (d28 * d9 + d27 * d7)));
 HEAPF32[i2 + (i1 * 284 | 0) + 116 >> 2] = (d28 * d20 + d27 * d19 + d29 * d18) * -d17 + ((d29 * d16 + (d27 * d15 + d28 * d14)) * -d13 + (d29 * d11 + (d28 * d9 + d27 * d7)) * -d8);
 HEAPF32[i2 + (i1 * 284 | 0) + 120 >> 2] = 0.0;
 HEAPF32[i2 + (i1 * 284 | 0) + 124 >> 2] = d26 * (d10 * d20 + d6 * d19 + d12 * d18) + (d25 * (d12 * d16 + (d6 * d15 + d10 * d14)) + d24 * (d12 * d11 + (d10 * d9 + d6 * d7)));
 HEAPF32[i2 + (i1 * 284 | 0) + 128 >> 2] = d23 * (d10 * d20 + d6 * d19 + d12 * d18) + (d22 * (d12 * d16 + (d6 * d15 + d10 * d14)) + d21 * (d12 * d11 + (d10 * d9 + d6 * d7)));
 HEAPF32[i2 + (i1 * 284 | 0) + 132 >> 2] = (d10 * d20 + d6 * d19 + d12 * d18) * -d17 + ((d12 * d16 + (d6 * d15 + d10 * d14)) * -d13 + (d12 * d11 + (d10 * d9 + d6 * d7)) * -d8);
 HEAPF32[i2 + (i1 * 284 | 0) + 136 >> 2] = 0.0;
 d8 = +HEAPF32[i2 + (i1 * 284 | 0) + 32 >> 2];
 d7 = d8 * +HEAPF32[i2 + (i1 * 284 | 0) + 56 >> 2] + +HEAPF32[i2 + (i1 * 284 | 0) + 40 >> 2];
 d6 = d8 * +HEAPF32[i2 + (i1 * 284 | 0) + 60 >> 2] + +HEAPF32[i2 + (i1 * 284 | 0) + 44 >> 2];
 HEAPF32[i2 + (i1 * 284 | 0) + 140 >> 2] = +HEAPF32[i2 + (i1 * 284 | 0) + 52 >> 2] * d8 + +HEAPF32[i2 + (i1 * 284 | 0) + 36 >> 2];
 HEAPF32[i2 + (i1 * 284 | 0) + 144 >> 2] = d7;
 HEAPF32[i2 + (i1 * 284 | 0) + 148 >> 2] = d6;
 HEAPF32[i2 + (i1 * 284 | 0) + 152 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN15btCompoundShape16removeChildShapeEP16btCollisionShape(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 HEAP32[i1 + 68 >> 2] = (HEAP32[i1 + 68 >> 2] | 0) + 1;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  i7 = HEAP32[i1 >> 2] | 0;
  i7 = i7 + 68 | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  FUNCTION_TABLE_vi[i7 & 511](i1);
  STACKTOP = i3;
  return;
 }
 i7 = i4;
 do {
  i4 = i4 + -1 | 0;
  i6 = HEAP32[i1 + 24 >> 2] | 0;
  if ((HEAP32[i6 + (i4 * 80 | 0) + 64 >> 2] | 0) == (i2 | 0)) {
   HEAP32[i1 + 68 >> 2] = (HEAP32[i1 + 68 >> 2] | 0) + 1;
   i5 = HEAP32[i1 + 64 >> 2] | 0;
   if ((i5 | 0) != 0) {
    i6 = HEAP32[i6 + (i4 * 80 | 0) + 76 >> 2] | 0;
    __ZL10removeleafP6btDbvtP10btDbvtNode(i5, i6) | 0;
    i7 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i7 | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i5 + 4 >> 2] = i6;
    HEAP32[i5 + 12 >> 2] = (HEAP32[i5 + 12 >> 2] | 0) + -1;
    i7 = HEAP32[i1 + 16 >> 2] | 0;
    i6 = HEAP32[i1 + 24 >> 2] | 0;
   }
   i7 = i7 + -1 | 0;
   i11 = i6 + (i4 * 80 | 0) | 0;
   HEAP32[i3 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   i10 = i6 + (i4 * 80 | 0) + 16 | 0;
   HEAP32[i3 + 16 >> 2] = HEAP32[i10 + 0 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i3 + 24 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i3 + 28 >> 2] = HEAP32[i10 + 12 >> 2];
   i9 = i6 + (i4 * 80 | 0) + 32 | 0;
   HEAP32[i3 + 32 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i3 + 36 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i3 + 40 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i3 + 44 >> 2] = HEAP32[i9 + 12 >> 2];
   i8 = i6 + (i4 * 80 | 0) + 48 | 0;
   HEAP32[i3 + 48 >> 2] = HEAP32[i8 + 0 >> 2];
   HEAP32[i3 + 52 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i3 + 56 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i3 + 60 >> 2] = HEAP32[i8 + 12 >> 2];
   i5 = i6 + (i4 * 80 | 0) + 64 | 0;
   HEAP32[i3 + 64 >> 2] = HEAP32[i5 + 0 >> 2];
   HEAP32[i3 + 68 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i3 + 72 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i3 + 76 >> 2] = HEAP32[i5 + 12 >> 2];
   i12 = i6 + (i7 * 80 | 0) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   i11 = i6 + (i7 * 80 | 0) + 16 | 0;
   HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   i10 = i6 + (i7 * 80 | 0) + 32 | 0;
   HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
   i9 = i6 + (i7 * 80 | 0) + 48 | 0;
   HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   i6 = i6 + (i7 * 80 | 0) + 64 | 0;
   HEAP32[i5 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   i6 = HEAP32[i1 + 24 >> 2] | 0;
   HEAP32[i6 + (i7 * 80 | 0) + 0 >> 2] = HEAP32[i3 + 0 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 12 >> 2] = HEAP32[i3 + 12 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 16 >> 2] = HEAP32[i3 + 16 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 20 >> 2] = HEAP32[i3 + 20 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 24 >> 2] = HEAP32[i3 + 24 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 28 >> 2] = HEAP32[i3 + 28 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 32 >> 2] = HEAP32[i3 + 32 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 36 >> 2] = HEAP32[i3 + 36 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 40 >> 2] = HEAP32[i3 + 40 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 44 >> 2] = HEAP32[i3 + 44 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 48 >> 2] = HEAP32[i3 + 48 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 52 >> 2] = HEAP32[i3 + 52 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 56 >> 2] = HEAP32[i3 + 56 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 60 >> 2] = HEAP32[i3 + 60 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 64 >> 2] = HEAP32[i3 + 64 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 68 >> 2] = HEAP32[i3 + 68 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 72 >> 2] = HEAP32[i3 + 72 >> 2];
   HEAP32[i6 + (i7 * 80 | 0) + 76 >> 2] = HEAP32[i3 + 76 >> 2];
   if ((HEAP32[i1 + 64 >> 2] | 0) != 0) HEAP32[(HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + (i4 * 80 | 0) + 76 >> 2] | 0) + 36 >> 2] = i4;
   i7 = (HEAP32[i1 + 16 >> 2] | 0) + -1 | 0;
   HEAP32[i1 + 16 >> 2] = i7;
  }
 } while ((i4 | 0) > 0);
 i12 = HEAP32[i1 >> 2] | 0;
 i12 = i12 + 68 | 0;
 i12 = HEAP32[i12 >> 2] | 0;
 FUNCTION_TABLE_vi[i12 & 511](i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5(i5, i6, i7, i8, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(1331) | 0;
 if ((i3 | 0) == 0) i4 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i4 = i3 + 19 & -16;
 }
 HEAP32[i4 + 4 >> 2] = 6;
 HEAP32[i4 + 8 >> 2] = -1;
 HEAP32[i4 + 12 >> 2] = -1;
 HEAPF32[i4 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i4 + 20 >> 0] = 1;
 HEAP8[i4 + 21 >> 0] = 0;
 HEAP32[i4 + 24 >> 2] = -1;
 i3 = i4 + 28 | 0;
 HEAP32[i3 >> 2] = i5;
 i5 = i4 + 32 | 0;
 HEAP32[i5 >> 2] = i6;
 HEAPF32[i4 + 36 >> 2] = 0.0;
 HEAPF32[i4 + 40 >> 2] = .30000001192092896;
 HEAP32[i4 + 44 >> 2] = 0;
 HEAP32[i4 >> 2] = 2368;
 i9 = i4 + 48 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i9 = i4 + 64 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i7 + 16 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i7 + 24 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i7 + 28 >> 2];
 i9 = i4 + 80 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i7 + 32 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 36 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i7 + 40 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i7 + 44 >> 2];
 i9 = i4 + 96 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i7 + 48 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 52 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i7 + 56 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i7 + 60 >> 2];
 i7 = i4 + 112 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 i7 = i4 + 128 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 20 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 24 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 28 >> 2];
 i7 = i4 + 144 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 32 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 36 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 40 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 44 >> 2];
 i7 = i4 + 160 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 48 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 52 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 56 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 60 >> 2];
 i7 = i4 + 740 | 0;
 i8 = i4 + 756 | 0;
 i9 = i4 + 680 | 0;
 i6 = i9 + 48 | 0;
 do {
  HEAP32[i9 >> 2] = 0;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i6 | 0));
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAPF32[i8 >> 2] = .20000000298023224;
 HEAPF32[i4 + 760 >> 2] = .20000000298023224;
 HEAPF32[i4 + 764 >> 2] = .20000000298023224;
 i8 = i4 + 768 | 0;
 i9 = i4 + 728 | 0;
 HEAP32[i8 + 0 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 HEAPF32[i9 >> 2] = .699999988079071;
 HEAPF32[i4 + 732 >> 2] = 1.0;
 HEAPF32[i4 + 736 >> 2] = .5;
 HEAP8[i4 + 788 >> 0] = 0;
 HEAPF32[i4 + 792 >> 2] = 0.0;
 HEAPF32[i4 + 808 >> 2] = 0.0;
 HEAP8[i4 + 789 >> 0] = 0;
 HEAPF32[i4 + 796 >> 2] = 0.0;
 HEAPF32[i4 + 812 >> 2] = 0.0;
 HEAP8[i4 + 790 >> 0] = 0;
 HEAPF32[i4 + 800 >> 2] = 0.0;
 HEAPF32[i4 + 816 >> 2] = 0.0;
 HEAPF32[i4 + 928 >> 2] = 0.0;
 HEAPF32[i4 + 876 >> 2] = 0.0;
 HEAPF32[i4 + 880 >> 2] = .10000000149011612;
 HEAPF32[i4 + 884 >> 2] = 300.0;
 HEAPF32[i4 + 868 >> 2] = 1.0;
 HEAPF32[i4 + 872 >> 2] = -1.0;
 HEAPF32[i4 + 896 >> 2] = 0.0;
 HEAPF32[i4 + 900 >> 2] = .20000000298023224;
 HEAPF32[i4 + 904 >> 2] = 0.0;
 HEAPF32[i4 + 908 >> 2] = 0.0;
 HEAPF32[i4 + 888 >> 2] = 1.0;
 HEAPF32[i4 + 892 >> 2] = .5;
 HEAP32[i4 + 924 >> 2] = 0;
 HEAPF32[i4 + 916 >> 2] = 0.0;
 HEAP8[i4 + 912 >> 0] = 0;
 HEAPF32[i4 + 992 >> 2] = 0.0;
 HEAPF32[i4 + 940 >> 2] = 0.0;
 HEAPF32[i4 + 944 >> 2] = .10000000149011612;
 HEAPF32[i4 + 948 >> 2] = 300.0;
 HEAPF32[i4 + 932 >> 2] = 1.0;
 HEAPF32[i4 + 936 >> 2] = -1.0;
 HEAPF32[i4 + 960 >> 2] = 0.0;
 HEAPF32[i4 + 964 >> 2] = .20000000298023224;
 HEAPF32[i4 + 968 >> 2] = 0.0;
 HEAPF32[i4 + 972 >> 2] = 0.0;
 HEAPF32[i4 + 952 >> 2] = 1.0;
 HEAPF32[i4 + 956 >> 2] = .5;
 HEAP32[i4 + 988 >> 2] = 0;
 HEAPF32[i4 + 980 >> 2] = 0.0;
 HEAP8[i4 + 976 >> 0] = 0;
 HEAPF32[i4 + 1056 >> 2] = 0.0;
 HEAPF32[i4 + 1004 >> 2] = 0.0;
 HEAPF32[i4 + 1008 >> 2] = .10000000149011612;
 HEAPF32[i4 + 1012 >> 2] = 300.0;
 HEAPF32[i4 + 996 >> 2] = 1.0;
 HEAPF32[i4 + 1e3 >> 2] = -1.0;
 HEAPF32[i4 + 1024 >> 2] = 0.0;
 HEAPF32[i4 + 1028 >> 2] = .20000000298023224;
 HEAPF32[i4 + 1032 >> 2] = 0.0;
 HEAPF32[i4 + 1036 >> 2] = 0.0;
 HEAPF32[i4 + 1016 >> 2] = 1.0;
 HEAPF32[i4 + 1020 >> 2] = .5;
 HEAP32[i4 + 1052 >> 2] = 0;
 HEAPF32[i4 + 1044 >> 2] = 0.0;
 HEAP8[i4 + 1040 >> 0] = 0;
 HEAP8[i4 + 1300 >> 0] = i1 & 1;
 HEAP8[i4 + 1301 >> 0] = 1;
 HEAP32[i4 + 1304 >> 2] = 0;
 HEAP8[i4 + 1308 >> 0] = 0;
 __ZN23btGeneric6DofConstraint19calculateTransformsERK11btTransformS2_(i4, (HEAP32[i3 >> 2] | 0) + 4 | 0, (HEAP32[i5 >> 2] | 0) + 4 | 0);
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN20btConvexHullInternal12findMaxAngleEbPKNS_6VertexERKNS_7Point32ERKNS_7Point64ES8_RNS_10Rational64E(i8, i4, i2, i5, i7, i6, i3) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = STACKTOP;
 i9 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i9 | 0) == 0) {
  i23 = 0;
  STACKTOP = i1;
  return i23 | 0;
 }
 i10 = 0;
 do {
  do if ((HEAP32[i9 + 20 >> 2] | 0) > (HEAP32[i8 + 100 >> 2] | 0)) {
   i14 = HEAP32[i9 + 12 >> 2] | 0;
   i16 = HEAP32[i14 + 88 >> 2] | 0;
   i13 = i16 - (HEAP32[i2 + 88 >> 2] | 0) | 0;
   i15 = HEAP32[i14 + 92 >> 2] | 0;
   i11 = i15 - (HEAP32[i2 + 92 >> 2] | 0) | 0;
   i14 = HEAP32[i14 + 96 >> 2] | 0;
   i12 = i14 - (HEAP32[i2 + 96 >> 2] | 0) | 0;
   i19 = ___muldi3(i13 | 0, ((i13 | 0) < 0) << 31 >> 31 | 0, HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0) | 0;
   i21 = tempRet0;
   i17 = ___muldi3(i11 | 0, ((i11 | 0) < 0) << 31 >> 31 | 0, HEAP32[i6 + 8 >> 2] | 0, HEAP32[i6 + 12 >> 2] | 0) | 0;
   i21 = _i64Add(i17 | 0, tempRet0 | 0, i19 | 0, i21 | 0) | 0;
   i19 = tempRet0;
   i17 = ___muldi3(i12 | 0, ((i12 | 0) < 0) << 31 >> 31 | 0, HEAP32[i6 + 16 >> 2] | 0, HEAP32[i6 + 20 >> 2] | 0) | 0;
   i17 = _i64Add(i21 | 0, i19 | 0, i17 | 0, tempRet0 | 0) | 0;
   i19 = tempRet0;
   i21 = ___muldi3(HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0, i13 | 0, ((i13 | 0) < 0) << 31 >> 31 | 0) | 0;
   i23 = tempRet0;
   i22 = ___muldi3(HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 12 >> 2] | 0, i11 | 0, ((i11 | 0) < 0) << 31 >> 31 | 0) | 0;
   i23 = _i64Add(i22 | 0, tempRet0 | 0, i21 | 0, i23 | 0) | 0;
   i21 = tempRet0;
   i22 = ___muldi3(HEAP32[i7 + 16 >> 2] | 0, HEAP32[i7 + 20 >> 2] | 0, i12 | 0, ((i12 | 0) < 0) << 31 >> 31 | 0) | 0;
   i22 = _i64Add(i23 | 0, i21 | 0, i22 | 0, tempRet0 | 0) | 0;
   i21 = tempRet0;
   if ((i19 | 0) > 0 | (i19 | 0) == 0 & i17 >>> 0 > 0) {
    i20 = 1;
    i18 = i19;
    i19 = 1;
   } else {
    i17 = _i64Subtract(0, 0, i17 | 0, i19 | 0) | 0;
    i20 = (i19 | 0) < 0 ? -1 : 0;
    i17 = (i19 | 0) < 0 ? i17 : 0;
    i18 = (i19 | 0) < 0 ? tempRet0 : 0;
    i19 = (i19 | 0) < 0 ? -1 : 0;
   }
   if (!((i21 | 0) > 0 | (i21 | 0) == 0 & i22 >>> 0 > 0)) {
    if ((i21 | 0) < 0) {
     i19 = 0 - i20 | 0;
     i24 = _i64Subtract(0, 0, i22 | 0, i21 | 0) | 0;
     i20 = i19;
     i23 = (i22 | 0) == 0 & (i21 | 0) == 0;
     i22 = i24;
     i21 = tempRet0;
    } else {
     i23 = 1;
     i22 = 0;
     i21 = 0;
    }
    if ((i20 | 0) == 0 & i23) break; else i20 = i22;
   } else i20 = i22;
   if ((i10 | 0) == 0) {
    HEAP32[i3 >> 2] = i17;
    HEAP32[i3 + 4 >> 2] = i18;
    HEAP32[i3 + 8 >> 2] = i20;
    HEAP32[i3 + 12 >> 2] = i21;
    HEAP32[i3 + 16 >> 2] = i19;
    i10 = i9;
    break;
   }
   i22 = __ZNK20btConvexHullInternal10Rational647compareERKS0_(i17, i18, i20, i21, i19, i3) | 0;
   if ((i22 | 0) < 0) {
    HEAP32[i3 >> 2] = i17;
    HEAP32[i3 + 4 >> 2] = i18;
    HEAP32[i3 + 8 >> 2] = i20;
    HEAP32[i3 + 12 >> 2] = i21;
    HEAP32[i3 + 16 >> 2] = i19;
    i10 = i9;
    break;
   }
   if ((i22 | 0) == 0) {
    i17 = (HEAP32[i10 + 4 >> 2] | 0) == (i9 | 0);
    if ((HEAP32[i10 >> 2] | 0) == (i9 | 0)) if (i17) {
     i24 = HEAP32[i5 + 8 >> 2] | 0;
     i21 = Math_imul(i24, i11) | 0;
     i19 = HEAP32[i5 + 4 >> 2] | 0;
     i21 = i21 - (Math_imul(i19, i12) | 0) | 0;
     i23 = HEAP32[i5 >> 2] | 0;
     i24 = (Math_imul(i23, i12) | 0) - (Math_imul(i13, i24) | 0) | 0;
     i23 = (Math_imul(i13, i19) | 0) - (Math_imul(i23, i11) | 0) | 0;
     i13 = HEAP32[i10 + 12 >> 2] | 0;
     i11 = HEAP32[(HEAP32[i9 + 8 >> 2] | 0) + 12 >> 2] | 0;
     i19 = HEAP32[i11 + 88 >> 2] | 0;
     i18 = (HEAP32[i13 + 88 >> 2] | 0) - i19 | 0;
     i17 = HEAP32[i11 + 92 >> 2] | 0;
     i20 = (HEAP32[i13 + 92 >> 2] | 0) - i17 | 0;
     i11 = HEAP32[i11 + 96 >> 2] | 0;
     i13 = (HEAP32[i13 + 96 >> 2] | 0) - i11 | 0;
     i22 = (Math_imul(i14 - i11 | 0, i20) | 0) - (Math_imul(i15 - i17 | 0, i13) | 0) | 0;
     i11 = (Math_imul(i16 - i19 | 0, i13) | 0) - (Math_imul(i14 - i11 | 0, i18) | 0) | 0;
     i20 = (Math_imul(i15 - i17 | 0, i18) | 0) - (Math_imul(i16 - i19 | 0, i20) | 0) | 0;
     i21 = ___muldi3(i22 | 0, ((i22 | 0) < 0) << 31 >> 31 | 0, i21 | 0, ((i21 | 0) < 0) << 31 >> 31 | 0) | 0;
     i22 = tempRet0;
     i24 = ___muldi3(i11 | 0, ((i11 | 0) < 0) << 31 >> 31 | 0, i24 | 0, ((i24 | 0) < 0) << 31 >> 31 | 0) | 0;
     i11 = tempRet0;
     i23 = ___muldi3(i20 | 0, ((i20 | 0) < 0) << 31 >> 31 | 0, i23 | 0, ((i23 | 0) < 0) << 31 >> 31 | 0) | 0;
     i23 = _i64Add(i21 | 0, i22 | 0, i23 | 0, tempRet0 | 0) | 0;
     i11 = _i64Add(i23 | 0, tempRet0 | 0, i24 | 0, i11 | 0) | 0;
     i24 = tempRet0;
     i11 = (i24 | 0) > 0 | (i24 | 0) == 0 & i11 >>> 0 > 0 ? 2 : 1;
    } else i11 = 2; else i11 = i17 & 1;
    i10 = (i11 | 0) == 2 ^ i4 ? i10 : i9;
   }
  } while (0);
  i9 = HEAP32[i9 >> 2] | 0;
 } while ((i9 | 0) != (HEAP32[i2 + 8 >> 2] | 0));
 STACKTOP = i1;
 return i10 | 0;
}
function __ZNK6btDbvt15rayTestInternalEPK10btDbvtNodeRK9btVector3S5_S5_PjfS5_S5_RNS_8ICollideE(i2, i15, i4, i5, i3, d7, i8, i13, i12) {
 i2 = i2 | 0;
 i15 = i15 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 d7 = +d7;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var d1 = 0.0, i6 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((i15 | 0) == 0) {
  STACKTOP = i6;
  return;
 }
 i14 = HEAP32[i2 + 44 >> 2] | 0;
 if ((i14 | 0) < 128) {
  if ((HEAP32[i2 + 48 >> 2] | 0) < 128) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i16 = _malloc(531) | 0;
   if ((i16 | 0) == 0) i16 = 0; else {
    HEAP32[(i16 + 19 & -16) + -4 >> 2] = i16;
    i16 = i16 + 19 & -16;
   }
   i18 = HEAP32[i2 + 44 >> 2] | 0;
   if ((i18 | 0) > 0) {
    i17 = 0;
    do {
     i19 = i16 + (i17 << 2) | 0;
     if ((i19 | 0) != 0) HEAP32[i19 >> 2] = HEAP32[(HEAP32[i2 + 52 >> 2] | 0) + (i17 << 2) >> 2];
     i17 = i17 + 1 | 0;
    } while ((i17 | 0) != (i18 | 0));
   }
   i17 = HEAP32[i2 + 52 >> 2] | 0;
   if ((i17 | 0) != 0) {
    if ((HEAP8[i2 + 56 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i17 + -4 >> 2] | 0);
    }
    HEAP32[i2 + 52 >> 2] = 0;
   }
   HEAP8[i2 + 56 >> 0] = 1;
   HEAP32[i2 + 52 >> 2] = i16;
   HEAP32[i2 + 48 >> 2] = 128;
   i16 = i2 + 52 | 0;
  } else i16 = i2 + 52 | 0;
  do {
   i17 = (HEAP32[i16 >> 2] | 0) + (i14 << 2) | 0;
   if ((i17 | 0) != 0) HEAP32[i17 >> 2] = 0;
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) != 128);
  i14 = i2 + 48 | 0;
 } else i14 = i2 + 48 | 0;
 HEAP32[i2 + 44 >> 2] = 128;
 HEAP32[HEAP32[i2 + 52 >> 2] >> 2] = i15;
 i15 = 1;
 i18 = 126;
 do {
  i16 = i15 + -1 | 0;
  i19 = HEAP32[i2 + 52 >> 2] | 0;
  i17 = HEAP32[i19 + (i16 << 2) >> 2] | 0;
  d21 = +HEAPF32[i17 + 4 >> 2] - +HEAPF32[i13 + 4 >> 2];
  d20 = +HEAPF32[i17 + 8 >> 2] - +HEAPF32[i13 + 8 >> 2];
  HEAPF32[i6 >> 2] = +HEAPF32[i17 >> 2] - +HEAPF32[i13 >> 2];
  HEAPF32[i6 + 4 >> 2] = d21;
  HEAPF32[i6 + 8 >> 2] = d20;
  HEAPF32[i6 + 12 >> 2] = 0.0;
  d20 = +HEAPF32[i17 + 20 >> 2] - +HEAPF32[i8 + 4 >> 2];
  d21 = +HEAPF32[i17 + 24 >> 2] - +HEAPF32[i8 + 8 >> 2];
  HEAPF32[i6 + 16 >> 2] = +HEAPF32[i17 + 16 >> 2] - +HEAPF32[i8 >> 2];
  HEAPF32[i6 + 20 >> 2] = d20;
  HEAPF32[i6 + 24 >> 2] = d21;
  HEAPF32[i6 + 28 >> 2] = 0.0;
  i26 = HEAP32[i3 >> 2] | 0;
  d21 = +HEAPF32[i4 >> 2];
  d20 = +HEAPF32[i5 >> 2];
  d22 = (+HEAPF32[i6 + (i26 << 4) >> 2] - d21) * d20;
  d21 = d20 * (+HEAPF32[i6 + (1 - i26 << 4) >> 2] - d21);
  i26 = HEAP32[i3 + 4 >> 2] | 0;
  d20 = +HEAPF32[i4 + 4 >> 2];
  d27 = +HEAPF32[i5 + 4 >> 2];
  d23 = (+HEAPF32[i6 + (i26 << 4) + 4 >> 2] - d20) * d27;
  d20 = d27 * (+HEAPF32[i6 + (1 - i26 << 4) + 4 >> 2] - d20);
  do if (((!(d22 > d20 | d23 > d21) ? (d9 = d23 > d22 ? d23 : d22, d11 = d20 < d21 ? d20 : d21, i26 = HEAP32[i3 + 8 >> 2] | 0, d10 = +HEAPF32[i4 + 8 >> 2], d27 = +HEAPF32[i5 + 8 >> 2], d1 = (+HEAPF32[i6 + (i26 << 4) + 8 >> 2] - d10) * d27, d10 = d27 * (+HEAPF32[i6 + (1 - i26 << 4) + 8 >> 2] - d10), !(d9 > d10 | d1 > d11)) : 0) ? (d1 > d9 ? d1 : d9) < d7 : 0) ? (d10 < d11 ? d10 : d11) > 0.0 : 0) {
   if ((HEAP32[i17 + 40 >> 2] | 0) == 0) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 127](i12, i17);
    i15 = i16;
    break;
   }
   if ((i16 | 0) > (i18 | 0)) {
    i18 = HEAP32[i2 + 44 >> 2] | 0;
    if ((i18 | 0) < (i18 << 1 | 0)) {
     if ((HEAP32[i14 >> 2] | 0) < (i18 << 1 | 0)) {
      if ((i18 | 0) != 0) {
       HEAP32[5004] = (HEAP32[5004] | 0) + 1;
       i19 = _malloc((i18 << 3 | 3) + 16 | 0) | 0;
       if ((i19 | 0) == 0) i19 = 0; else {
        HEAP32[(i19 + 19 & -16) + -4 >> 2] = i19;
        i19 = i19 + 19 & -16;
       }
       i25 = HEAP32[i2 + 44 >> 2] | 0;
       if ((i25 | 0) > 0) {
        i24 = 0;
        do {
         i26 = i19 + (i24 << 2) | 0;
         if ((i26 | 0) != 0) HEAP32[i26 >> 2] = HEAP32[(HEAP32[i2 + 52 >> 2] | 0) + (i24 << 2) >> 2];
         i24 = i24 + 1 | 0;
        } while ((i24 | 0) != (i25 | 0));
       }
      } else i19 = 0;
      i24 = HEAP32[i2 + 52 >> 2] | 0;
      if ((i24 | 0) != 0) {
       if ((HEAP8[i2 + 56 >> 0] | 0) != 0) {
        HEAP32[5006] = (HEAP32[5006] | 0) + 1;
        _free(HEAP32[i24 + -4 >> 2] | 0);
       }
       HEAP32[i2 + 52 >> 2] = 0;
      }
      HEAP8[i2 + 56 >> 0] = 1;
      HEAP32[i2 + 52 >> 2] = i19;
      HEAP32[i14 >> 2] = i18 << 1;
      i24 = i18;
     } else i24 = i18;
     do {
      i19 = i19 + (i24 << 2) | 0;
      if ((i19 | 0) != 0) HEAP32[i19 >> 2] = 0;
      i24 = i24 + 1 | 0;
      i19 = HEAP32[i2 + 52 >> 2] | 0;
     } while ((i24 | 0) != (i18 << 1 | 0));
    }
    HEAP32[i2 + 44 >> 2] = i18 << 1;
    i18 = (i18 << 1) + -2 | 0;
   }
   HEAP32[i19 + (i16 << 2) >> 2] = HEAP32[i17 + 36 >> 2];
   HEAP32[(HEAP32[i2 + 52 >> 2] | 0) + (i15 << 2) >> 2] = HEAP32[i17 + 40 >> 2];
   i15 = i15 + 1 | 0;
  } else i15 = i16; while (0);
 } while ((i15 | 0) != 0);
 STACKTOP = i6;
 return;
}
function __ZN24btPerturbedContactResult15addContactPointERK9btVector3S2_f(i9, i2, i11, d3) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 d3 = +d3;
 var d1 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d10 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 d8 = +HEAPF32[i2 >> 2];
 d1 = +HEAPF32[i2 + 4 >> 2];
 d4 = +HEAPF32[i2 + 8 >> 2];
 d7 = +HEAPF32[i11 >> 2];
 d5 = +HEAPF32[i11 + 4 >> 2];
 d10 = +HEAPF32[i11 + 8 >> 2];
 if ((HEAP8[i9 + 228 >> 0] | 0) == 0) {
  d22 = +HEAPF32[i9 + 100 >> 2];
  d19 = +HEAPF32[i9 + 116 >> 2];
  d25 = +HEAPF32[i9 + 132 >> 2];
  d21 = +HEAPF32[i9 + 104 >> 2];
  d17 = +HEAPF32[i9 + 120 >> 2];
  d24 = +HEAPF32[i9 + 136 >> 2];
  d20 = +HEAPF32[i9 + 108 >> 2];
  d15 = +HEAPF32[i9 + 124 >> 2];
  d23 = +HEAPF32[i9 + 140 >> 2];
  d28 = -+HEAPF32[i9 + 148 >> 2];
  d27 = -+HEAPF32[i9 + 152 >> 2];
  d26 = -+HEAPF32[i9 + 156 >> 2];
  d31 = +HEAPF32[i9 + 164 >> 2];
  d14 = +HEAPF32[i9 + 168 >> 2];
  d32 = +HEAPF32[i9 + 172 >> 2];
  d30 = +HEAPF32[i9 + 180 >> 2];
  d29 = +HEAPF32[i9 + 184 >> 2];
  d13 = +HEAPF32[i9 + 188 >> 2];
  d18 = +HEAPF32[i9 + 196 >> 2];
  d16 = +HEAPF32[i9 + 200 >> 2];
  d12 = +HEAPF32[i9 + 204 >> 2];
  d14 = d10 * (d25 * d31 + d24 * d14 + d23 * d32) + (d7 * (d22 * d31 + d21 * d14 + d20 * d32) + d5 * (d19 * d31 + d17 * d14 + d15 * d32)) + ((d20 * d28 + d15 * d27 + d23 * d26) * d32 + (d31 * (d22 * d28 + d19 * d27 + d25 * d26) + d14 * (d21 * d28 + d17 * d27 + d24 * d26)) + +HEAPF32[i9 + 212 >> 2]);
  d13 = d10 * (d25 * d30 + d24 * d29 + d23 * d13) + (d7 * (d22 * d30 + d21 * d29 + d20 * d13) + d5 * (d19 * d30 + d17 * d29 + d15 * d13)) + ((d22 * d28 + d19 * d27 + d25 * d26) * d30 + (d21 * d28 + d17 * d27 + d24 * d26) * d29 + (d20 * d28 + d15 * d27 + d23 * d26) * d13 + +HEAPF32[i9 + 216 >> 2]);
  d12 = (d22 * d28 + d19 * d27 + d25 * d26) * d18 + (d21 * d28 + d17 * d27 + d24 * d26) * d16 + (d20 * d28 + d15 * d27 + d23 * d26) * d12 + +HEAPF32[i9 + 220 >> 2] + (d10 * (d25 * d18 + d24 * d16 + d23 * d12) + (d7 * (d22 * d18 + d21 * d16 + d20 * d12) + d5 * (d19 * d18 + d17 * d16 + d15 * d12)));
  HEAPF32[i6 >> 2] = d14;
  HEAPF32[i6 + 4 >> 2] = d13;
  HEAPF32[i6 + 8 >> 2] = d12;
  HEAPF32[i6 + 12 >> 2] = 0.0;
  d10 = (d8 * d3 + d7 - d14) * +HEAPF32[i2 >> 2] + (d1 * d3 + d5 - d13) * +HEAPF32[i2 + 4 >> 2] + (d4 * d3 + d10 - d12) * +HEAPF32[i2 + 8 >> 2];
  i11 = i9 + 32 | 0;
  i11 = HEAP32[i11 >> 2] | 0;
  i9 = HEAP32[i11 >> 2] | 0;
  i9 = i9 + 16 | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  FUNCTION_TABLE_viiid[i9 & 15](i11, i2, i6, d10);
  STACKTOP = i6;
  return;
 } else {
  d22 = +HEAPF32[i9 + 36 >> 2];
  d25 = +HEAPF32[i9 + 52 >> 2];
  d19 = +HEAPF32[i9 + 68 >> 2];
  d23 = +HEAPF32[i9 + 40 >> 2];
  d27 = +HEAPF32[i9 + 56 >> 2];
  d20 = +HEAPF32[i9 + 72 >> 2];
  d24 = +HEAPF32[i9 + 44 >> 2];
  d29 = +HEAPF32[i9 + 60 >> 2];
  d21 = +HEAPF32[i9 + 76 >> 2];
  d16 = -+HEAPF32[i9 + 84 >> 2];
  d17 = -+HEAPF32[i9 + 88 >> 2];
  d18 = -+HEAPF32[i9 + 92 >> 2];
  d13 = +HEAPF32[i9 + 164 >> 2];
  d30 = +HEAPF32[i9 + 168 >> 2];
  d12 = +HEAPF32[i9 + 172 >> 2];
  d14 = +HEAPF32[i9 + 180 >> 2];
  d15 = +HEAPF32[i9 + 184 >> 2];
  d31 = +HEAPF32[i9 + 188 >> 2];
  d26 = +HEAPF32[i9 + 196 >> 2];
  d28 = +HEAPF32[i9 + 200 >> 2];
  d32 = +HEAPF32[i9 + 204 >> 2];
  d30 = (d4 * d3 + d10) * (d19 * d13 + d20 * d30 + d21 * d12) + ((d8 * d3 + d7) * (d22 * d13 + d23 * d30 + d24 * d12) + (d1 * d3 + d5) * (d25 * d13 + d27 * d30 + d29 * d12)) + ((d24 * d16 + d29 * d17 + d21 * d18) * d12 + (d13 * (d22 * d16 + d25 * d17 + d19 * d18) + d30 * (d23 * d16 + d27 * d17 + d20 * d18)) + +HEAPF32[i9 + 212 >> 2]);
  d31 = (d4 * d3 + d10) * (d19 * d14 + d20 * d15 + d21 * d31) + ((d8 * d3 + d7) * (d22 * d14 + d23 * d15 + d24 * d31) + (d1 * d3 + d5) * (d25 * d14 + d27 * d15 + d29 * d31)) + ((d22 * d16 + d25 * d17 + d19 * d18) * d14 + (d23 * d16 + d27 * d17 + d20 * d18) * d15 + (d24 * d16 + d29 * d17 + d21 * d18) * d31 + +HEAPF32[i9 + 216 >> 2]);
  d32 = (d22 * d16 + d25 * d17 + d19 * d18) * d26 + (d23 * d16 + d27 * d17 + d20 * d18) * d28 + (d24 * d16 + d29 * d17 + d21 * d18) * d32 + +HEAPF32[i9 + 220 >> 2] + ((d4 * d3 + d10) * (d19 * d26 + d20 * d28 + d21 * d32) + ((d8 * d3 + d7) * (d22 * d26 + d23 * d28 + d24 * d32) + (d1 * d3 + d5) * (d25 * d26 + d27 * d28 + d29 * d32)));
  HEAPF32[i6 >> 2] = d30 + d8 * (d8 * (d30 - d7) + d1 * (d31 - d5) + d4 * (d32 - d10));
  HEAPF32[i6 + 4 >> 2] = d31 + d1 * (d8 * (d30 - d7) + d1 * (d31 - d5) + d4 * (d32 - d10));
  HEAPF32[i6 + 8 >> 2] = d32 + d4 * (d8 * (d30 - d7) + d1 * (d31 - d5) + d4 * (d32 - d10));
  HEAPF32[i6 + 12 >> 2] = 0.0;
  d32 = d8 * (d30 - d7) + d1 * (d31 - d5) + d4 * (d32 - d10);
  i11 = i9 + 32 | 0;
  i11 = HEAP32[i11 >> 2] | 0;
  i9 = HEAP32[i11 >> 2] | 0;
  i9 = i9 + 16 | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  FUNCTION_TABLE_viiid[i9 & 15](i11, i2, i6, d32);
  STACKTOP = i6;
  return;
 }
}
function __ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallback11processNodeEii(i2, i1, i9) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 3](i6, i8 + 28 | 0, i8 + 24 | 0, i8 + 20 | 0, i8 + 16 | 0, i8 + 12 | 0, i8 + 8 | 0, i8 + 4 | 0, i8, i1);
 i6 = HEAP32[i8 + 12 >> 2] | 0;
 i5 = Math_imul(HEAP32[i8 + 8 >> 2] | 0, i9) | 0;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 i7 = (HEAP32[i8 + 20 >> 2] | 0) == 0;
 i4 = HEAP32[i8 + 28 >> 2] | 0;
 if ((HEAP32[i8 >> 2] | 0) != 3) {
  i10 = HEAP32[i8 + 16 >> 2] | 0;
  i11 = Math_imul(i10, HEAP32[i6 + (i5 + 8) >> 2] | 0) | 0;
  if (i7) {
   d14 = +HEAPF32[i4 + (i11 + 4) >> 2] * +HEAPF32[i3 + 8 >> 2];
   d13 = +HEAPF32[i4 + (i11 + 8) >> 2] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 64 >> 2] = +HEAPF32[i4 + i11 >> 2] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 68 >> 2] = d14;
   HEAPF32[i8 + 72 >> 2] = d13;
   HEAPF32[i8 + 76 >> 2] = 0.0;
   i12 = Math_imul(i10, HEAP32[i6 + (i5 + 4) >> 2] | 0) | 0;
   d13 = +HEAPF32[i4 + (i12 + 4) >> 2] * +HEAPF32[i3 + 8 >> 2];
   d14 = +HEAPF32[i4 + (i12 + 8) >> 2] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 48 >> 2] = +HEAPF32[i4 + i12 >> 2] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 52 >> 2] = d13;
   HEAPF32[i8 + 56 >> 2] = d14;
   HEAPF32[i8 + 60 >> 2] = 0.0;
   i12 = Math_imul(i10, HEAP32[i6 + i5 >> 2] | 0) | 0;
   d14 = +HEAPF32[i4 + (i12 + 4) >> 2] * +HEAPF32[i3 + 8 >> 2];
   d13 = +HEAPF32[i4 + (i12 + 8) >> 2] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 32 >> 2] = +HEAPF32[i4 + i12 >> 2] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 36 >> 2] = d14;
   HEAPF32[i8 + 40 >> 2] = d13;
   HEAPF32[i8 + 44 >> 2] = 0.0;
   i12 = i2 + 8 | 0;
   i12 = HEAP32[i12 >> 2] | 0;
   i11 = HEAP32[i12 >> 2] | 0;
   i11 = i11 + 8 | 0;
   i11 = HEAP32[i11 >> 2] | 0;
   FUNCTION_TABLE_viiii[i11 & 127](i12, i8 + 32 | 0, i1, i9);
   i12 = HEAP32[i2 + 4 >> 2] | 0;
   i11 = HEAP32[i12 >> 2] | 0;
   i11 = i11 + 24 | 0;
   i11 = HEAP32[i11 >> 2] | 0;
   FUNCTION_TABLE_vii[i11 & 127](i12, i1);
   STACKTOP = i8;
   return;
  } else {
   d13 = +HEAPF64[i4 + (i11 + 8) >> 3] * +HEAPF32[i3 + 8 >> 2];
   d14 = +HEAPF64[i4 + (i11 + 16) >> 3] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 64 >> 2] = +HEAPF64[i4 + i11 >> 3] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 68 >> 2] = d13;
   HEAPF32[i8 + 72 >> 2] = d14;
   HEAPF32[i8 + 76 >> 2] = 0.0;
   i12 = Math_imul(i10, HEAP32[i6 + (i5 + 4) >> 2] | 0) | 0;
   d14 = +HEAPF64[i4 + (i12 + 8) >> 3] * +HEAPF32[i3 + 8 >> 2];
   d13 = +HEAPF64[i4 + (i12 + 16) >> 3] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 48 >> 2] = +HEAPF64[i4 + i12 >> 3] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 52 >> 2] = d14;
   HEAPF32[i8 + 56 >> 2] = d13;
   HEAPF32[i8 + 60 >> 2] = 0.0;
   i12 = Math_imul(i10, HEAP32[i6 + i5 >> 2] | 0) | 0;
   d13 = +HEAPF64[i4 + (i12 + 8) >> 3] * +HEAPF32[i3 + 8 >> 2];
   d14 = +HEAPF64[i4 + (i12 + 16) >> 3] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 32 >> 2] = +HEAPF64[i4 + i12 >> 3] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 36 >> 2] = d13;
   HEAPF32[i8 + 40 >> 2] = d14;
   HEAPF32[i8 + 44 >> 2] = 0.0;
   i12 = i2 + 8 | 0;
   i12 = HEAP32[i12 >> 2] | 0;
   i11 = HEAP32[i12 >> 2] | 0;
   i11 = i11 + 8 | 0;
   i11 = HEAP32[i11 >> 2] | 0;
   FUNCTION_TABLE_viiii[i11 & 127](i12, i8 + 32 | 0, i1, i9);
   i12 = HEAP32[i2 + 4 >> 2] | 0;
   i11 = HEAP32[i12 >> 2] | 0;
   i11 = i11 + 24 | 0;
   i11 = HEAP32[i11 >> 2] | 0;
   FUNCTION_TABLE_vii[i11 & 127](i12, i1);
   STACKTOP = i8;
   return;
  }
 }
 i10 = HEAP32[i8 + 16 >> 2] | 0;
 i11 = 2;
 while (1) {
  i12 = Math_imul(i10, HEAPU16[i6 + i5 + (i11 << 1) >> 1] | 0) | 0;
  if (i7) {
   d13 = +HEAPF32[i4 + (i12 + 4) >> 2] * +HEAPF32[i3 + 8 >> 2];
   d14 = +HEAPF32[i4 + (i12 + 8) >> 2] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 32 + (i11 << 4) >> 2] = +HEAPF32[i4 + i12 >> 2] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 32 + (i11 << 4) + 4 >> 2] = d13;
   HEAPF32[i8 + 32 + (i11 << 4) + 8 >> 2] = d14;
   HEAPF32[i8 + 32 + (i11 << 4) + 12 >> 2] = 0.0;
  } else {
   d13 = +HEAPF64[i4 + (i12 + 8) >> 3] * +HEAPF32[i3 + 8 >> 2];
   d14 = +HEAPF64[i4 + (i12 + 16) >> 3] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i8 + 32 + (i11 << 4) >> 2] = +HEAPF64[i4 + i12 >> 3] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i8 + 32 + (i11 << 4) + 4 >> 2] = d13;
   HEAPF32[i8 + 32 + (i11 << 4) + 8 >> 2] = d14;
   HEAPF32[i8 + 32 + (i11 << 4) + 12 >> 2] = 0.0;
  }
  if ((i11 | 0) > 0) i11 = i11 + -1 | 0; else break;
 }
 i12 = i2 + 8 | 0;
 i12 = HEAP32[i12 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 i11 = i11 + 8 | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 FUNCTION_TABLE_viiii[i11 & 127](i12, i8 + 32 | 0, i1, i9);
 i12 = HEAP32[i2 + 4 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 i11 = i11 + 24 | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 FUNCTION_TABLE_vii[i11 & 127](i12, i1);
 STACKTOP = i8;
 return;
}
function __ZN23btBridgedManifoldResult15addContactPointERK9btVector3S2_f(i1, i8, i10, d9) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 d9 = +d9;
 var i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i2 = HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 740 >> 2] | 0;
 i3 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 8 >> 2] | 0;
 d13 = +HEAPF32[i10 >> 2];
 d4 = +HEAPF32[i8 >> 2] * d9 + d13;
 d11 = +HEAPF32[i10 + 4 >> 2];
 d5 = +HEAPF32[i8 + 4 >> 2] * d9 + d11;
 d12 = +HEAPF32[i10 + 8 >> 2];
 d6 = +HEAPF32[i8 + 8 >> 2] * d9 + d12;
 if ((i2 | 0) != (i3 | 0)) {
  i19 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0;
  d20 = d4 - +HEAPF32[i19 + 52 >> 2];
  d15 = d5 - +HEAPF32[i19 + 56 >> 2];
  d16 = d6 - +HEAPF32[i19 + 60 >> 2];
  d18 = d13 - +HEAPF32[i3 + 52 >> 2];
  d17 = d11 - +HEAPF32[i3 + 56 >> 2];
  d14 = d12 - +HEAPF32[i3 + 60 >> 2];
  d13 = d20 * +HEAPF32[i19 + 4 >> 2] + d15 * +HEAPF32[i19 + 20 >> 2] + d16 * +HEAPF32[i19 + 36 >> 2];
  d11 = d20 * +HEAPF32[i19 + 8 >> 2] + d15 * +HEAPF32[i19 + 24 >> 2] + d16 * +HEAPF32[i19 + 40 >> 2];
  d12 = d20 * +HEAPF32[i19 + 12 >> 2] + d15 * +HEAPF32[i19 + 28 >> 2] + d16 * +HEAPF32[i19 + 44 >> 2];
  d16 = d18 * +HEAPF32[i3 + 4 >> 2] + d17 * +HEAPF32[i3 + 20 >> 2] + d14 * +HEAPF32[i3 + 36 >> 2];
  d15 = d18 * +HEAPF32[i3 + 8 >> 2] + d17 * +HEAPF32[i3 + 24 >> 2] + d14 * +HEAPF32[i3 + 40 >> 2];
  d14 = d18 * +HEAPF32[i3 + 12 >> 2] + d17 * +HEAPF32[i3 + 28 >> 2] + d14 * +HEAPF32[i3 + 44 >> 2];
 } else {
  d17 = d4 - +HEAPF32[i2 + 52 >> 2];
  d15 = d5 - +HEAPF32[i2 + 56 >> 2];
  d16 = d6 - +HEAPF32[i2 + 60 >> 2];
  i19 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0;
  d18 = d13 - +HEAPF32[i19 + 52 >> 2];
  d20 = d11 - +HEAPF32[i19 + 56 >> 2];
  d14 = d12 - +HEAPF32[i19 + 60 >> 2];
  d13 = d17 * +HEAPF32[i2 + 4 >> 2] + d15 * +HEAPF32[i2 + 20 >> 2] + d16 * +HEAPF32[i2 + 36 >> 2];
  d11 = d17 * +HEAPF32[i2 + 8 >> 2] + d15 * +HEAPF32[i2 + 24 >> 2] + d16 * +HEAPF32[i2 + 40 >> 2];
  d12 = d17 * +HEAPF32[i2 + 12 >> 2] + d15 * +HEAPF32[i2 + 28 >> 2] + d16 * +HEAPF32[i2 + 44 >> 2];
  d16 = d18 * +HEAPF32[i19 + 4 >> 2] + d20 * +HEAPF32[i19 + 20 >> 2] + d14 * +HEAPF32[i19 + 36 >> 2];
  d15 = d18 * +HEAPF32[i19 + 8 >> 2] + d20 * +HEAPF32[i19 + 24 >> 2] + d14 * +HEAPF32[i19 + 40 >> 2];
  d14 = d18 * +HEAPF32[i19 + 12 >> 2] + d20 * +HEAPF32[i19 + 28 >> 2] + d14 * +HEAPF32[i19 + 44 >> 2];
 }
 HEAPF32[i7 >> 2] = d13;
 HEAPF32[i7 + 4 >> 2] = d11;
 HEAPF32[i7 + 8 >> 2] = d12;
 HEAPF32[i7 + 12 >> 2] = 0.0;
 HEAPF32[i7 + 16 >> 2] = d16;
 HEAPF32[i7 + 20 >> 2] = d15;
 HEAPF32[i7 + 24 >> 2] = d14;
 HEAPF32[i7 + 28 >> 2] = 0.0;
 HEAP32[i7 + 64 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i7 + 68 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i7 + 72 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i7 + 76 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAPF32[i7 + 80 >> 2] = d9;
 HEAPF32[i7 + 84 >> 2] = 0.0;
 HEAPF32[i7 + 88 >> 2] = 0.0;
 HEAPF32[i7 + 92 >> 2] = 0.0;
 HEAP32[i7 + 112 >> 2] = 0;
 HEAP8[i7 + 116 >> 0] = 0;
 HEAP32[i7 + 120 >> 2] = 0;
 HEAP32[i7 + 124 >> 2] = 0;
 HEAP32[i7 + 128 >> 2] = 0;
 HEAP32[i7 + 132 >> 2] = 0;
 HEAP32[i7 + 136 >> 2] = 0;
 HEAP32[i7 + 140 >> 2] = 0;
 HEAP32[i7 + 144 >> 2] = 0;
 HEAP32[i7 + 148 >> 2] = 0;
 HEAPF32[i7 + 48 >> 2] = d4;
 HEAPF32[i7 + 52 >> 2] = d5;
 HEAPF32[i7 + 56 >> 2] = d6;
 HEAPF32[i7 + 60 >> 2] = 0.0;
 HEAP32[i7 + 32 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i7 + 36 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i7 + 40 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i7 + 44 >> 2] = HEAP32[i10 + 12 >> 2];
 if ((i2 | 0) != (i3 | 0)) {
  i22 = HEAP32[i1 + 20 >> 2] | 0;
  HEAP32[i7 + 96 >> 2] = i22;
  i10 = HEAP32[i1 + 16 >> 2] | 0;
  HEAP32[i7 + 100 >> 2] = i10;
  i21 = HEAP32[i1 + 28 >> 2] | 0;
  HEAP32[i7 + 104 >> 2] = i21;
  i19 = HEAP32[i1 + 24 >> 2] | 0;
  HEAP32[i7 + 108 >> 2] = i19;
  i8 = i1 + 12 | 0;
  i23 = (i2 | 0) != (i3 | 0) ? i8 : i1 + 8 | 0;
  i23 = HEAP32[i23 >> 2] | 0;
  i8 = (i2 | 0) != (i3 | 0) ? i1 + 8 | 0 : i8;
  i8 = HEAP32[i8 >> 2] | 0;
  i3 = i1 + 32 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  i2 = i2 + 12 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  +FUNCTION_TABLE_diiiiiiii[i2 & 1](i3, i7, i23, i22, i21, i8, i10, i19);
  STACKTOP = i7;
  return;
 } else {
  i10 = HEAP32[i1 + 16 >> 2] | 0;
  HEAP32[i7 + 96 >> 2] = i10;
  i22 = HEAP32[i1 + 20 >> 2] | 0;
  HEAP32[i7 + 100 >> 2] = i22;
  i19 = HEAP32[i1 + 24 >> 2] | 0;
  HEAP32[i7 + 104 >> 2] = i19;
  i23 = HEAP32[i1 + 28 >> 2] | 0;
  HEAP32[i7 + 108 >> 2] = i23;
  i21 = i1 + 12 | 0;
  i8 = (i2 | 0) != (i3 | 0) ? i21 : i1 + 8 | 0;
  i8 = HEAP32[i8 >> 2] | 0;
  i21 = (i2 | 0) != (i3 | 0) ? i1 + 8 | 0 : i21;
  i21 = HEAP32[i21 >> 2] | 0;
  i3 = i1 + 32 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  i2 = i2 + 12 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  +FUNCTION_TABLE_diiiiiiii[i2 & 1](i3, i7, i8, i10, i19, i21, i22, i23);
  STACKTOP = i7;
  return;
 }
}
function __ZN12btAxisSweep3C2ERK9btVector3S2_tP22btOverlappingPairCacheb(i1, i4, i5, i3, i8, i7) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i2 = 0, i6 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5216;
 HEAP16[i1 + 4 >> 1] = -2;
 HEAP16[i1 + 6 >> 1] = -1;
 HEAP32[i1 + 92 >> 2] = i8;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP8[i1 + 100 >> 0] = 0;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 if ((i8 | 0) == 0) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i8 = _malloc(95) | 0;
  if ((i8 | 0) != 0 ? (HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8, (i8 + 19 & -16 | 0) != 0) : 0) {
   __ZN28btHashedOverlappingPairCacheC2Ev(i8 + 19 & -16);
   i8 = i8 + 19 & -16;
  } else i8 = 0;
  HEAP32[i1 + 92 >> 2] = i8;
  HEAP8[i1 + 100 >> 0] = 1;
 }
 if (!i7) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i7 = _malloc(43) | 0;
  if ((i7 | 0) != 0 ? (i6 = i7 + 19 & -16, HEAP32[i6 + -4 >> 2] = i7, (i7 + 19 & -16 | 0) != 0) : 0) {
   HEAP32[i6 + 0 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   HEAP32[i6 + 12 >> 2] = 0;
   HEAP32[i6 + 16 >> 2] = 0;
   HEAP32[i6 + 20 >> 2] = 0;
   HEAP32[(i7 + 19 & -16) >> 2] = 5280;
   HEAP8[i6 + 20 >> 0] = 1;
   HEAP32[i6 + 16 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   HEAP32[i6 + 12 >> 2] = 0;
   i6 = i7 + 19 & -16;
  } else i6 = 0;
  HEAP32[i1 + 112 >> 2] = i6;
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i6 = _malloc(215) | 0;
  if ((i6 | 0) != 0 ? (HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
   __ZN16btDbvtBroadphaseC2EP22btOverlappingPairCache(i6 + 19 & -16, HEAP32[i1 + 112 >> 2] | 0);
   i6 = i6 + 19 & -16;
  } else i6 = 0;
  HEAP32[i1 + 108 >> 2] = i6;
  HEAP8[i6 + 193 >> 0] = 1;
 }
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i5 + 12 >> 2];
 d11 = +(HEAPU16[i1 + 6 >> 1] | 0);
 d10 = d11 / (+HEAPF32[i1 + 28 >> 2] - +HEAPF32[i1 + 12 >> 2]);
 d9 = d11 / (+HEAPF32[i1 + 32 >> 2] - +HEAPF32[i1 + 16 >> 2]);
 HEAPF32[i1 + 40 >> 2] = d11 / (+HEAPF32[i1 + 24 >> 2] - +HEAPF32[i1 + 8 >> 2]);
 HEAPF32[i1 + 44 >> 2] = d10;
 HEAPF32[i1 + 48 >> 2] = d9;
 HEAPF32[i1 + 52 >> 2] = 0.0;
 i4 = (i3 & 65535) + 1 & 65535;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(i4 << 6 | 19) | 0;
 if ((i5 | 0) == 0) i5 = 0; else {
  HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
  i5 = i5 + 19 & -16;
 }
 if ((i4 | 0) != 0) {
  i6 = i5 + (i4 << 6) | 0;
  i7 = i5;
  do {
   HEAP32[i7 >> 2] = 0;
   HEAP32[i7 + 8 >> 2] = 0;
   i7 = i7 + 64 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 HEAP32[i1 + 60 >> 2] = i5;
 HEAP16[i1 + 58 >> 1] = (i3 & 65535) + 1;
 HEAP16[i1 + 56 >> 1] = 0;
 HEAP16[i1 + 64 >> 1] = 1;
 if (i4 >>> 0 > 1) {
  i3 = 1;
  i6 = 1;
  do {
   HEAP16[i5 + (i3 << 6) + 48 >> 1] = i3 + 1;
   i6 = i6 + 1 << 16 >> 16;
   i3 = i6 & 65535;
  } while (i3 >>> 0 < i4 >>> 0);
 }
 HEAP16[i5 + (i4 + -1 << 6) + 48 >> 1] = 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc((i4 << 3 | 3) + 16 | 0) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  HEAP32[i1 + 80 >> 2] = i3 + 19 & -16;
  if ((i3 + 19 & -16 | 0) == 0) i3 = 0; else i3 = i3 + 19 & -16;
 } else {
  HEAP32[i1 + 80 >> 2] = 0;
  i3 = 0;
 }
 HEAP32[i1 + 68 >> 2] = i3;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc((i4 << 3 | 3) + 16 | 0) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  HEAP32[i1 + 84 >> 2] = i3 + 19 & -16;
  if ((i3 + 19 & -16 | 0) == 0) i3 = 0; else i3 = i3 + 19 & -16;
 } else {
  HEAP32[i1 + 84 >> 2] = 0;
  i3 = 0;
 }
 HEAP32[i1 + 72 >> 2] = i3;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc((i4 << 3 | 3) + 16 | 0) | 0;
 if ((i3 | 0) != 0) {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  HEAP32[i1 + 88 >> 2] = i3 + 19 & -16;
  if ((i3 + 19 & -16 | 0) == 0) i3 = 0; else i3 = i3 + 19 & -16;
 } else {
  HEAP32[i1 + 88 >> 2] = 0;
  i3 = 0;
 }
 HEAP32[i1 + 76 >> 2] = i3;
 HEAP32[HEAP32[i1 + 60 >> 2] >> 2] = 0;
 i8 = HEAP32[i1 + 60 >> 2] | 0;
 HEAP16[i8 + 48 >> 1] = 0;
 HEAP16[i8 + 54 >> 1] = 1;
 i7 = HEAP32[i1 + 68 >> 2] | 0;
 HEAP16[i7 >> 1] = 0;
 HEAP16[i7 + 2 >> 1] = 0;
 HEAP16[i7 + 4 >> 1] = HEAP16[i1 + 6 >> 1] | 0;
 HEAP16[i7 + 6 >> 1] = 0;
 HEAP16[i8 + 50 >> 1] = 0;
 HEAP16[i8 + 56 >> 1] = 1;
 i7 = HEAP32[i1 + 72 >> 2] | 0;
 HEAP16[i7 >> 1] = 0;
 HEAP16[i7 + 2 >> 1] = 0;
 HEAP16[i7 + 4 >> 1] = HEAP16[i1 + 6 >> 1] | 0;
 HEAP16[i7 + 6 >> 1] = 0;
 HEAP16[i8 + 52 >> 1] = 0;
 HEAP16[i8 + 58 >> 1] = 1;
 i8 = HEAP32[i1 + 76 >> 2] | 0;
 HEAP16[i8 >> 1] = 0;
 HEAP16[i8 + 2 >> 1] = 0;
 HEAP16[i8 + 4 >> 1] = HEAP16[i1 + 6 >> 1] | 0;
 HEAP16[i8 + 6 >> 1] = 0;
 HEAP32[i1 >> 2] = 5040;
 STACKTOP = i2;
 return;
}
function __ZN17DebugDrawcallback15processTriangleEP9btVector3ii(i1, i27, i15, i28) {
 i1 = i1 | 0;
 i27 = i27 | 0;
 i15 = i15 | 0;
 i28 = i28 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i29 = 0, d30 = 0.0, d31 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 d10 = +HEAPF32[i27 >> 2];
 d4 = +HEAPF32[i1 + 28 >> 2];
 d11 = +HEAPF32[i27 + 4 >> 2];
 d6 = +HEAPF32[i1 + 32 >> 2];
 d12 = +HEAPF32[i27 + 8 >> 2];
 d8 = +HEAPF32[i1 + 36 >> 2];
 d13 = +HEAPF32[i1 + 44 >> 2];
 d14 = +HEAPF32[i1 + 48 >> 2];
 d2 = +HEAPF32[i1 + 52 >> 2];
 d17 = +HEAPF32[i1 + 60 >> 2];
 d18 = +HEAPF32[i1 + 64 >> 2];
 d19 = +HEAPF32[i1 + 68 >> 2];
 d9 = +HEAPF32[i1 + 76 >> 2];
 d16 = +HEAPF32[i1 + 80 >> 2];
 d20 = +HEAPF32[i1 + 84 >> 2];
 HEAPF32[i15 + 80 >> 2] = d10 * d4 + d11 * d6 + d12 * d8 + d9;
 HEAPF32[i15 + 84 >> 2] = d10 * d13 + d11 * d14 + d12 * d2 + d16;
 HEAPF32[i15 + 88 >> 2] = d10 * d17 + d11 * d18 + d12 * d19 + d20;
 HEAPF32[i15 + 92 >> 2] = 0.0;
 d3 = +HEAPF32[i27 + 16 >> 2];
 d5 = +HEAPF32[i27 + 20 >> 2];
 d7 = +HEAPF32[i27 + 24 >> 2];
 HEAPF32[i15 + 64 >> 2] = d3 * d4 + d5 * d6 + d7 * d8 + d9;
 HEAPF32[i15 + 68 >> 2] = d3 * d13 + d5 * d14 + d7 * d2 + d16;
 HEAPF32[i15 + 72 >> 2] = d3 * d17 + d5 * d18 + d7 * d19 + d20;
 HEAPF32[i15 + 76 >> 2] = 0.0;
 d21 = +HEAPF32[i27 + 32 >> 2];
 d22 = +HEAPF32[i27 + 36 >> 2];
 d23 = +HEAPF32[i27 + 40 >> 2];
 HEAPF32[i15 + 48 >> 2] = d21 * d4 + d22 * d6 + d23 * d8 + d9;
 HEAPF32[i15 + 52 >> 2] = d21 * d13 + d22 * d14 + d23 * d2 + d16;
 HEAPF32[i15 + 56 >> 2] = d21 * d17 + d22 * d18 + d23 * d19 + d20;
 HEAPF32[i15 + 60 >> 2] = 0.0;
 d24 = (d10 * d4 + d11 * d6 + d12 * d8 + d9 + (d3 * d4 + d5 * d6 + d7 * d8 + d9) + (d21 * d4 + d22 * d6 + d23 * d8 + d9)) * .3333333432674408;
 d25 = (d10 * d13 + d11 * d14 + d12 * d2 + d16 + (d3 * d13 + d5 * d14 + d7 * d2 + d16) + (d21 * d13 + d22 * d14 + d23 * d2 + d16)) * .3333333432674408;
 d26 = (d10 * d17 + d11 * d18 + d12 * d19 + d20 + (d3 * d17 + d5 * d18 + d7 * d19 + d20) + (d21 * d17 + d22 * d18 + d23 * d19 + d20)) * .3333333432674408;
 HEAPF32[i15 + 32 >> 2] = d24;
 HEAPF32[i15 + 36 >> 2] = d25;
 HEAPF32[i15 + 40 >> 2] = d26;
 HEAPF32[i15 + 44 >> 2] = 0.0;
 i28 = HEAP32[i1 + 8 >> 2] | 0;
 if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i28 >> 2] | 0) + 48 >> 2] & 127](i28) | 0) & 16384 | 0) == 0) {
  i27 = HEAP32[i1 + 8 >> 2] | 0;
  i29 = HEAP32[i27 >> 2] | 0;
  i29 = i29 + 8 | 0;
  i29 = HEAP32[i29 >> 2] | 0;
  i28 = i1 + 12 | 0;
  FUNCTION_TABLE_viiii[i29 & 127](i27, i15 + 80 | 0, i15 + 64 | 0, i28);
  i27 = HEAP32[i1 + 8 >> 2] | 0;
  i29 = HEAP32[i27 >> 2] | 0;
  i29 = i29 + 8 | 0;
  i29 = HEAP32[i29 >> 2] | 0;
  FUNCTION_TABLE_viiii[i29 & 127](i27, i15 + 64 | 0, i15 + 48 | 0, i28);
  i27 = HEAP32[i1 + 8 >> 2] | 0;
  i1 = HEAP32[i27 >> 2] | 0;
  i1 = i1 + 8 | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  FUNCTION_TABLE_viiii[i1 & 127](i27, i15 + 48 | 0, i15 + 80 | 0, i28);
  STACKTOP = i15;
  return;
 }
 d31 = d3 * d4 + d5 * d6 + d7 * d8 + d9 - (d10 * d4 + d11 * d6 + d12 * d8 + d9);
 d30 = d3 * d13 + d5 * d14 + d7 * d2 + d16 - (d10 * d13 + d11 * d14 + d12 * d2 + d16);
 d7 = d3 * d17 + d5 * d18 + d7 * d19 + d20 - (d10 * d17 + d11 * d18 + d12 * d19 + d20);
 d9 = d21 * d4 + d22 * d6 + d23 * d8 + d9 - (d10 * d4 + d11 * d6 + d12 * d8 + d9);
 d16 = d21 * d13 + d22 * d14 + d23 * d2 + d16 - (d10 * d13 + d11 * d14 + d12 * d2 + d16);
 d22 = d21 * d17 + d22 * d18 + d23 * d19 + d20 - (d10 * d17 + d11 * d18 + d12 * d19 + d20);
 d23 = 1.0 / +Math_sqrt(+((d31 * d16 - d30 * d9) * (d31 * d16 - d30 * d9) + ((d30 * d22 - d7 * d16) * (d30 * d22 - d7 * d16) + (d7 * d9 - d31 * d22) * (d7 * d9 - d31 * d22))));
 HEAPF32[i15 + 16 >> 2] = 1.0;
 HEAPF32[i15 + 20 >> 2] = 1.0;
 HEAPF32[i15 + 24 >> 2] = 0.0;
 HEAPF32[i15 + 28 >> 2] = 0.0;
 i28 = HEAP32[i1 + 8 >> 2] | 0;
 i27 = HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] | 0;
 HEAPF32[i15 >> 2] = d23 * (d30 * d22 - d7 * d16) + d24;
 HEAPF32[i15 + 4 >> 2] = d23 * (d7 * d9 - d31 * d22) + d25;
 HEAPF32[i15 + 8 >> 2] = d23 * (d31 * d16 - d30 * d9) + d26;
 HEAPF32[i15 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[i27 & 127](i28, i15 + 32 | 0, i15, i15 + 16 | 0);
 i28 = HEAP32[i1 + 8 >> 2] | 0;
 i27 = HEAP32[i28 >> 2] | 0;
 i27 = i27 + 8 | 0;
 i27 = HEAP32[i27 >> 2] | 0;
 i29 = i1 + 12 | 0;
 FUNCTION_TABLE_viiii[i27 & 127](i28, i15 + 80 | 0, i15 + 64 | 0, i29);
 i28 = HEAP32[i1 + 8 >> 2] | 0;
 i27 = HEAP32[i28 >> 2] | 0;
 i27 = i27 + 8 | 0;
 i27 = HEAP32[i27 >> 2] | 0;
 FUNCTION_TABLE_viiii[i27 & 127](i28, i15 + 64 | 0, i15 + 48 | 0, i29);
 i28 = HEAP32[i1 + 8 >> 2] | 0;
 i27 = HEAP32[i28 >> 2] | 0;
 i27 = i27 + 8 | 0;
 i27 = HEAP32[i27 >> 2] | 0;
 FUNCTION_TABLE_viiii[i27 & 127](i28, i15 + 48 | 0, i15 + 80 | 0, i29);
 STACKTOP = i15;
 return;
}
function __ZNK14btQuantizedBvh9serializeEPvP12btSerializer(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i3 + 20 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i3 + 24 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i3 + 28 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i3 + 32 >> 2];
 HEAPF32[i4 >> 2] = +HEAPF32[i3 + 4 >> 2];
 HEAPF32[i4 + 4 >> 2] = +HEAPF32[i3 + 8 >> 2];
 HEAPF32[i4 + 8 >> 2] = +HEAPF32[i3 + 12 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i3 + 16 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i3 + 36 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i3 + 40 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i3 + 44 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i3 + 48 >> 2];
 HEAP32[i4 + 48 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i4 + 52 >> 2] = HEAPU8[i3 + 60 >> 0];
 HEAP32[i4 + 56 >> 2] = HEAP32[i3 + 88 >> 2];
 if ((HEAP32[i3 + 88 >> 2] | 0) != 0) {
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i3 + 96 >> 2] | 0) | 0;
  HEAP32[i4 + 64 >> 2] = i9;
  if ((i9 | 0) != 0) {
   i9 = HEAP32[i3 + 88 >> 2] | 0;
   i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 48, i9) | 0;
   if ((i9 | 0) > 0) {
    i6 = HEAP32[i3 + 96 >> 2] | 0;
    i8 = 0;
    i7 = HEAP32[i5 + 8 >> 2] | 0;
    while (1) {
     HEAPF32[i7 + 16 >> 2] = +HEAPF32[i6 + (i8 << 6) + 16 >> 2];
     HEAPF32[i7 + 20 >> 2] = +HEAPF32[i6 + (i8 << 6) + 20 >> 2];
     HEAPF32[i7 + 24 >> 2] = +HEAPF32[i6 + (i8 << 6) + 24 >> 2];
     HEAPF32[i7 + 28 >> 2] = +HEAPF32[i6 + (i8 << 6) + 28 >> 2];
     HEAPF32[i7 >> 2] = +HEAPF32[i6 + (i8 << 6) >> 2];
     HEAPF32[i7 + 4 >> 2] = +HEAPF32[i6 + (i8 << 6) + 4 >> 2];
     HEAPF32[i7 + 8 >> 2] = +HEAPF32[i6 + (i8 << 6) + 8 >> 2];
     HEAPF32[i7 + 12 >> 2] = +HEAPF32[i6 + (i8 << 6) + 12 >> 2];
     HEAP32[i7 + 32 >> 2] = HEAP32[i6 + (i8 << 6) + 32 >> 2];
     HEAP32[i7 + 36 >> 2] = HEAP32[i6 + (i8 << 6) + 36 >> 2];
     HEAP32[i7 + 40 >> 2] = HEAP32[i6 + (i8 << 6) + 40 >> 2];
     i8 = i8 + 1 | 0;
     if ((i8 | 0) == (i9 | 0)) break; else i7 = i7 + 48 | 0;
    }
   } else i6 = HEAP32[i3 + 96 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, 16120, 1497453121, i6);
  }
 } else HEAP32[i4 + 64 >> 2] = 0;
 HEAP32[i4 + 60 >> 2] = HEAP32[i3 + 128 >> 2];
 if ((HEAP32[i3 + 128 >> 2] | 0) != 0) {
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i3 + 136 >> 2] | 0) | 0;
  HEAP32[i4 + 68 >> 2] = i9;
  if ((i9 | 0) != 0) {
   i6 = HEAP32[i3 + 128 >> 2] | 0;
   i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 16, i6) | 0;
   if ((i6 | 0) > 0) {
    i7 = HEAP32[i3 + 136 >> 2] | 0;
    i9 = 0;
    i8 = HEAP32[i5 + 8 >> 2] | 0;
    while (1) {
     HEAP32[i8 + 12 >> 2] = HEAP32[i7 + (i9 << 4) + 12 >> 2];
     HEAP16[i8 + 6 >> 1] = HEAP16[i7 + (i9 << 4) + 6 >> 1] | 0;
     HEAP16[i8 + 8 >> 1] = HEAP16[i7 + (i9 << 4) + 8 >> 1] | 0;
     HEAP16[i8 + 10 >> 1] = HEAP16[i7 + (i9 << 4) + 10 >> 1] | 0;
     HEAP16[i8 >> 1] = HEAP16[i7 + (i9 << 4) >> 1] | 0;
     HEAP16[i8 + 2 >> 1] = HEAP16[i7 + (i9 << 4) + 2 >> 1] | 0;
     HEAP16[i8 + 4 >> 1] = HEAP16[i7 + (i9 << 4) + 4 >> 1] | 0;
     i9 = i9 + 1 | 0;
     if ((i9 | 0) == (i6 | 0)) break; else i8 = i8 + 16 | 0;
    }
   } else i7 = HEAP32[i3 + 136 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, 16144, 1497453121, i7);
  }
 } else HEAP32[i4 + 68 >> 2] = 0;
 HEAP32[i4 + 76 >> 2] = HEAP32[i3 + 144 >> 2];
 HEAP32[i4 + 80 >> 2] = HEAP32[i3 + 152 >> 2];
 if ((HEAP32[i3 + 152 >> 2] | 0) == 0) {
  HEAP32[i4 + 72 >> 2] = 0;
  STACKTOP = i2;
  return 16192;
 }
 i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i3 + 160 >> 2] | 0) | 0;
 HEAP32[i4 + 72 >> 2] = i9;
 if ((i9 | 0) == 0) {
  STACKTOP = i2;
  return 16192;
 }
 i5 = HEAP32[i3 + 152 >> 2] | 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 20, i5) | 0;
 if ((i5 | 0) > 0) {
  i3 = HEAP32[i3 + 160 >> 2] | 0;
  i7 = 0;
  i6 = HEAP32[i4 + 8 >> 2] | 0;
  while (1) {
   HEAP16[i6 + 14 >> 1] = HEAP16[i3 + (i7 << 5) + 6 >> 1] | 0;
   HEAP16[i6 + 16 >> 1] = HEAP16[i3 + (i7 << 5) + 8 >> 1] | 0;
   HEAP16[i6 + 18 >> 1] = HEAP16[i3 + (i7 << 5) + 10 >> 1] | 0;
   HEAP16[i6 + 8 >> 1] = HEAP16[i3 + (i7 << 5) >> 1] | 0;
   HEAP16[i6 + 10 >> 1] = HEAP16[i3 + (i7 << 5) + 2 >> 1] | 0;
   HEAP16[i6 + 12 >> 1] = HEAP16[i3 + (i7 << 5) + 4 >> 1] | 0;
   HEAP32[i6 >> 2] = HEAP32[i3 + (i7 << 5) + 12 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i3 + (i7 << 5) + 16 >> 2];
   i7 = i7 + 1 | 0;
   if ((i7 | 0) == (i5 | 0)) break; else i6 = i6 + 20 | 0;
  }
 } else i3 = HEAP32[i3 + 160 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i4, 16168, 1497453121, i3);
 STACKTOP = i2;
 return 16192;
}
function __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK9btVector3S4_S4_S4_b(i5, i10, i19, i20, i1, i8, i4, i3) {
 i5 = i5 | 0;
 i10 = i10 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, d6 = 0.0, d7 = 0.0, d9 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0;
 i2 = STACKTOP;
 HEAP32[i5 + 4 >> 2] = 4;
 HEAP32[i5 + 8 >> 2] = -1;
 HEAP32[i5 + 12 >> 2] = -1;
 HEAPF32[i5 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i5 + 20 >> 0] = 1;
 HEAP8[i5 + 21 >> 0] = 0;
 HEAP32[i5 + 24 >> 2] = -1;
 HEAP32[i5 + 28 >> 2] = i10;
 HEAP32[i5 + 32 >> 2] = i19;
 HEAPF32[i5 + 36 >> 2] = 0.0;
 HEAPF32[i5 + 40 >> 2] = .30000001192092896;
 HEAP32[i5 + 44 >> 2] = 0;
 HEAP32[i5 >> 2] = 2504;
 HEAPF32[i5 + 688 >> 2] = 0.0;
 HEAPF32[i5 + 692 >> 2] = -1.0;
 HEAPF32[i5 + 696 >> 2] = .8999999761581421;
 HEAPF32[i5 + 700 >> 2] = .30000001192092896;
 HEAPF32[i5 + 704 >> 2] = 1.0;
 HEAPF32[i5 + 708 >> 2] = 0.0;
 HEAPF32[i5 + 712 >> 2] = 0.0;
 HEAP8[i5 + 716 >> 0] = 0;
 HEAP8[i5 + 736 >> 0] = 0;
 HEAP8[i5 + 737 >> 0] = 0;
 HEAP8[i5 + 738 >> 0] = 0;
 HEAP8[i5 + 739 >> 0] = 1;
 HEAP8[i5 + 740 >> 0] = i3 & 1;
 HEAP32[i5 + 748 >> 2] = 0;
 HEAP32[i5 + 600 >> 2] = HEAP32[i20 + 0 >> 2];
 HEAP32[i5 + 604 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i5 + 608 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i5 + 612 >> 2] = HEAP32[i20 + 12 >> 2];
 d15 = +HEAPF32[i10 + 4 >> 2];
 d17 = +HEAPF32[i10 + 20 >> 2];
 d14 = +HEAPF32[i10 + 36 >> 2];
 d9 = +HEAPF32[i8 >> 2];
 d18 = +HEAPF32[i8 + 4 >> 2];
 d16 = +HEAPF32[i8 + 8 >> 2];
 do if (!(d15 * d9 + d17 * d18 + d14 * d16 >= .9999998807907104)) if (!(d15 * d9 + d17 * d18 + d14 * d16 <= -.9999998807907104)) {
  d13 = d15 * d16 - d14 * d9;
  d7 = d18 * (d14 * d18 - d17 * d16) - d9 * (d15 * d16 - d14 * d9);
  d12 = d17 * d9 - d15 * d18;
  d6 = d16 * (d15 * d16 - d14 * d9) - d18 * (d17 * d9 - d15 * d18);
  d11 = d14 * d18 - d17 * d16;
  d9 = d9 * (d17 * d9 - d15 * d18) - d16 * (d14 * d18 - d17 * d16);
  break;
 } else {
  d13 = +HEAPF32[i10 + 24 >> 2];
  d7 = +HEAPF32[i10 + 44 >> 2];
  d12 = +HEAPF32[i10 + 40 >> 2];
  d6 = +HEAPF32[i10 + 12 >> 2];
  d11 = +HEAPF32[i10 + 8 >> 2];
  d9 = +HEAPF32[i10 + 28 >> 2];
  break;
 } else {
  d13 = +HEAPF32[i10 + 24 >> 2];
  d7 = -+HEAPF32[i10 + 44 >> 2];
  d12 = +HEAPF32[i10 + 40 >> 2];
  d6 = -+HEAPF32[i10 + 12 >> 2];
  d11 = +HEAPF32[i10 + 8 >> 2];
  d9 = -+HEAPF32[i10 + 28 >> 2];
 } while (0);
 HEAPF32[i5 + 552 >> 2] = d6;
 HEAPF32[i5 + 556 >> 2] = d11;
 HEAPF32[i5 + 560 >> 2] = +HEAPF32[i8 >> 2];
 HEAPF32[i5 + 564 >> 2] = 0.0;
 HEAPF32[i5 + 568 >> 2] = d9;
 HEAPF32[i5 + 572 >> 2] = d13;
 HEAPF32[i5 + 576 >> 2] = +HEAPF32[i8 + 4 >> 2];
 HEAPF32[i5 + 580 >> 2] = 0.0;
 HEAPF32[i5 + 584 >> 2] = d7;
 HEAPF32[i5 + 588 >> 2] = d12;
 HEAPF32[i5 + 592 >> 2] = +HEAPF32[i8 + 8 >> 2];
 HEAPF32[i5 + 596 >> 2] = 0.0;
 d14 = +HEAPF32[i8 + 4 >> 2];
 d13 = +HEAPF32[i4 + 8 >> 2];
 d15 = +HEAPF32[i8 + 8 >> 2];
 d11 = +HEAPF32[i4 + 4 >> 2];
 d12 = +HEAPF32[i4 >> 2];
 d18 = +HEAPF32[i8 >> 2];
 do if (d13 * d15 + (d14 * d11 + d12 * d18) < -.9999998807907104) if (+Math_abs(+d15) > .7071067690849304) {
  d18 = 1.0 / +Math_sqrt(+(d14 * d14 + d15 * d15));
  d17 = 0.0;
  d16 = -(d15 * d18);
  d18 = d14 * d18;
  d14 = 0.0;
  break;
 } else {
  d15 = 1.0 / +Math_sqrt(+(d14 * d14 + d18 * d18));
  d17 = 0.0;
  d16 = d18 * d15;
  d18 = 0.0;
  d14 = -(d14 * d15);
  break;
 } else {
  d21 = +Math_sqrt(+((d13 * d15 + (d14 * d11 + d12 * d18) + 1.0) * 2.0));
  d17 = d21 * .5;
  d16 = (d15 * d12 - d13 * d18) * (1.0 / d21);
  d18 = (d11 * d18 - d14 * d12) * (1.0 / d21);
  d14 = (d14 * d13 - d15 * d11) * (1.0 / d21);
 } while (0);
 d24 = d6 * d17 + d7 * d16 - d9 * d18;
 d22 = d9 * d17 + d6 * d18 - d7 * d14;
 d23 = d7 * d17 + d9 * d14 - d6 * d16;
 d9 = -(d6 * d14) - d9 * d16 - d7 * d18;
 d15 = -d14;
 d14 = -d16;
 d16 = -d18;
 d21 = d22 * d16 + (d17 * d24 + d9 * d15) - d23 * d14;
 d18 = d23 * d15 + (d17 * d22 + d9 * d14) - d24 * d16;
 d17 = d24 * d14 + (d17 * d23 + d9 * d16) - d22 * d15;
 HEAP32[i5 + 664 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i5 + 668 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 672 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i5 + 676 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAPF32[i5 + 616 >> 2] = d21;
 HEAPF32[i5 + 620 >> 2] = d11 * d17 - d13 * d18;
 HEAPF32[i5 + 624 >> 2] = +HEAPF32[i4 >> 2];
 HEAPF32[i5 + 628 >> 2] = 0.0;
 HEAPF32[i5 + 632 >> 2] = d18;
 HEAPF32[i5 + 636 >> 2] = d13 * d21 - d12 * d17;
 HEAPF32[i5 + 640 >> 2] = +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i5 + 644 >> 2] = 0.0;
 HEAPF32[i5 + 648 >> 2] = d17;
 HEAPF32[i5 + 652 >> 2] = d12 * d18 - d11 * d21;
 HEAPF32[i5 + 656 >> 2] = +HEAPF32[i4 + 8 >> 2];
 HEAPF32[i5 + 660 >> 2] = 0.0;
 HEAPF32[i5 + 732 >> 2] = i3 ? -1.0 : 1.0;
 STACKTOP = i2;
 return;
}
function __ZN22btVoronoiSimplexSolver22closestPtPointTriangleERK9btVector3S2_S2_S2_R25btSubSimplexClosestResult(i24, i23, i18, i12, i2) {
 i24 = i24 | 0;
 i23 = i23 | 0;
 i18 = i18 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0;
 i10 = STACKTOP;
 i7 = HEAP8[i2 + 16 >> 0] & -16;
 HEAP8[i2 + 16 >> 0] = i7;
 d4 = +HEAPF32[i18 >> 2];
 d3 = +HEAPF32[i23 >> 2];
 d6 = +HEAPF32[i18 + 4 >> 2];
 d5 = +HEAPF32[i23 + 4 >> 2];
 d8 = +HEAPF32[i18 + 8 >> 2];
 d1 = +HEAPF32[i23 + 8 >> 2];
 d9 = +HEAPF32[i12 >> 2];
 d11 = +HEAPF32[i12 + 4 >> 2];
 d13 = +HEAPF32[i12 + 8 >> 2];
 d14 = +HEAPF32[i24 >> 2];
 d15 = +HEAPF32[i24 + 4 >> 2];
 d19 = +HEAPF32[i24 + 8 >> 2];
 d16 = (d4 - d3) * (d14 - d3) + (d6 - d5) * (d15 - d5) + (d8 - d1) * (d19 - d1);
 d17 = (d9 - d3) * (d14 - d3) + (d11 - d5) * (d15 - d5) + (d13 - d1) * (d19 - d1);
 if (!(!(d16 <= 0.0) | !(d17 <= 0.0))) {
  HEAP32[i2 + 0 >> 2] = HEAP32[i23 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
  HEAP8[i2 + 16 >> 0] = i7 | 1;
  HEAPF32[i2 + 20 >> 2] = 1.0;
  HEAPF32[i2 + 24 >> 2] = 0.0;
  HEAPF32[i2 + 28 >> 2] = 0.0;
  HEAPF32[i2 + 32 >> 2] = 0.0;
  STACKTOP = i10;
  return;
 }
 d20 = (d4 - d3) * (d14 - d4) + (d6 - d5) * (d15 - d6) + (d8 - d1) * (d19 - d8);
 d21 = (d9 - d3) * (d14 - d4) + (d11 - d5) * (d15 - d6) + (d13 - d1) * (d19 - d8);
 if (!(!(d20 >= 0.0) | !(d21 <= d20))) {
  HEAP32[i2 + 0 >> 2] = HEAP32[i18 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
  HEAP8[i2 + 16 >> 0] = i7 | 2;
  HEAPF32[i2 + 20 >> 2] = 0.0;
  HEAPF32[i2 + 24 >> 2] = 1.0;
  HEAPF32[i2 + 28 >> 2] = 0.0;
  HEAPF32[i2 + 32 >> 2] = 0.0;
  STACKTOP = i10;
  return;
 }
 if (!((d16 >= 0.0 ? !(d16 * d21 - d20 * d17 <= 0.0) : 1) | !(d20 <= 0.0))) {
  HEAPF32[i2 >> 2] = d3 + (d4 - d3) * (d16 / (d16 - d20));
  HEAPF32[i2 + 4 >> 2] = d5 + (d6 - d5) * (d16 / (d16 - d20));
  HEAPF32[i2 + 8 >> 2] = d1 + (d8 - d1) * (d16 / (d16 - d20));
  HEAPF32[i2 + 12 >> 2] = 0.0;
  HEAP8[i2 + 16 >> 0] = i7 | 3;
  HEAPF32[i2 + 20 >> 2] = 1.0 - d16 / (d16 - d20);
  HEAPF32[i2 + 24 >> 2] = d16 / (d16 - d20);
  HEAPF32[i2 + 28 >> 2] = 0.0;
  HEAPF32[i2 + 32 >> 2] = 0.0;
  STACKTOP = i10;
  return;
 }
 d22 = (d4 - d3) * (d14 - d9) + (d6 - d5) * (d15 - d11) + (d8 - d1) * (d19 - d13);
 d14 = (d9 - d3) * (d14 - d9) + (d11 - d5) * (d15 - d11) + (d13 - d1) * (d19 - d13);
 if (!(!(d14 >= 0.0) | !(d22 <= d14))) {
  HEAP32[i2 + 0 >> 2] = HEAP32[i12 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  HEAP8[i2 + 16 >> 0] = i7 | 4;
  HEAPF32[i2 + 20 >> 2] = 0.0;
  HEAPF32[i2 + 24 >> 2] = 0.0;
  HEAPF32[i2 + 28 >> 2] = 1.0;
  HEAPF32[i2 + 32 >> 2] = 0.0;
  STACKTOP = i10;
  return;
 }
 if (!((d17 >= 0.0 ? !(d22 * d17 - d16 * d14 <= 0.0) : 1) | !(d14 <= 0.0))) {
  HEAPF32[i2 >> 2] = d3 + (d9 - d3) * (d17 / (d17 - d14));
  HEAPF32[i2 + 4 >> 2] = d5 + (d11 - d5) * (d17 / (d17 - d14));
  HEAPF32[i2 + 8 >> 2] = d1 + (d13 - d1) * (d17 / (d17 - d14));
  HEAPF32[i2 + 12 >> 2] = 0.0;
  HEAP8[i2 + 16 >> 0] = i7 | 5;
  HEAPF32[i2 + 20 >> 2] = 1.0 - d17 / (d17 - d14);
  HEAPF32[i2 + 24 >> 2] = 0.0;
  HEAPF32[i2 + 28 >> 2] = d17 / (d17 - d14);
  HEAPF32[i2 + 32 >> 2] = 0.0;
  STACKTOP = i10;
  return;
 }
 if ((d20 * d14 - d22 * d21 <= 0.0 ? d21 - d20 >= 0.0 : 0) ? d22 - d14 >= 0.0 : 0) {
  d22 = (d21 - d20) / (d21 - d20 + (d22 - d14));
  HEAPF32[i2 >> 2] = d4 + (d9 - d4) * d22;
  HEAPF32[i2 + 4 >> 2] = d6 + (d11 - d6) * d22;
  HEAPF32[i2 + 8 >> 2] = d8 + (d13 - d8) * d22;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  HEAP8[i2 + 16 >> 0] = i7 | 6;
  HEAPF32[i2 + 20 >> 2] = 0.0;
  HEAPF32[i2 + 24 >> 2] = 1.0 - d22;
  HEAPF32[i2 + 28 >> 2] = d22;
  HEAPF32[i2 + 32 >> 2] = 0.0;
  STACKTOP = i10;
  return;
 }
 d15 = 1.0 / (d16 * d21 - d20 * d17 + (d20 * d14 - d22 * d21 + (d22 * d17 - d16 * d14)));
 d19 = (d22 * d17 - d16 * d14) * d15;
 d22 = (d16 * d21 - d20 * d17) * d15;
 HEAPF32[i2 >> 2] = (d9 - d3) * d22 + (d3 + (d4 - d3) * d19);
 HEAPF32[i2 + 4 >> 2] = (d11 - d5) * d22 + (d5 + (d6 - d5) * d19);
 HEAPF32[i2 + 8 >> 2] = (d13 - d1) * d22 + ((d8 - d1) * d19 + d1);
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAP8[i2 + 16 >> 0] = i7 | 7;
 HEAPF32[i2 + 20 >> 2] = 1.0 - d19 - d22;
 HEAPF32[i2 + 24 >> 2] = d19;
 HEAPF32[i2 + 28 >> 2] = d22;
 HEAPF32[i2 + 32 >> 2] = 0.0;
 STACKTOP = i10;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver14initSolverBodyEP12btSolverBodyP17btCollisionObjectf(i2, i4, d3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 var i1 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 if (!((i4 | 0) != 0 ? (HEAP32[i4 + 236 >> 2] & 2 | 0) != 0 : 0)) i4 = 0;
 i5 = (i4 | 0) == 0;
 HEAP32[i2 + 64 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 0;
 HEAP32[i2 + 76 >> 2] = 0;
 HEAP32[i2 + 80 >> 2] = 0;
 HEAP32[i2 + 84 >> 2] = 0;
 HEAP32[i2 + 88 >> 2] = 0;
 HEAP32[i2 + 92 >> 2] = 0;
 HEAP32[i2 + 144 >> 2] = 0;
 HEAP32[i2 + 148 >> 2] = 0;
 HEAP32[i2 + 152 >> 2] = 0;
 HEAP32[i2 + 156 >> 2] = 0;
 HEAP32[i2 + 160 >> 2] = 0;
 HEAP32[i2 + 164 >> 2] = 0;
 HEAP32[i2 + 168 >> 2] = 0;
 HEAP32[i2 + 172 >> 2] = 0;
 if (i5) {
  HEAPF32[i2 >> 2] = 1.0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  HEAP32[i2 + 16 >> 2] = 0;
  HEAPF32[i2 + 20 >> 2] = 1.0;
  HEAP32[i2 + 24 >> 2] = 0;
  HEAP32[i2 + 28 >> 2] = 0;
  HEAP32[i2 + 32 >> 2] = 0;
  HEAP32[i2 + 36 >> 2] = 0;
  HEAPF32[i2 + 40 >> 2] = 1.0;
  HEAP32[i2 + 44 >> 2] = 0;
  HEAP32[i2 + 48 >> 2] = 0;
  HEAP32[i2 + 52 >> 2] = 0;
  HEAP32[i2 + 56 >> 2] = 0;
  HEAP32[i2 + 60 >> 2] = 0;
  HEAP32[i2 + 240 >> 2] = 0;
  HEAP32[i2 + 128 >> 2] = 0;
  HEAP32[i2 + 132 >> 2] = 0;
  HEAP32[i2 + 136 >> 2] = 0;
  HEAP32[i2 + 140 >> 2] = 0;
  HEAPF32[i2 + 96 >> 2] = 1.0;
  HEAPF32[i2 + 100 >> 2] = 1.0;
  HEAPF32[i2 + 104 >> 2] = 1.0;
  HEAPF32[i2 + 108 >> 2] = 0.0;
  HEAPF32[i2 + 112 >> 2] = 1.0;
  HEAPF32[i2 + 116 >> 2] = 1.0;
  HEAPF32[i2 + 120 >> 2] = 1.0;
  HEAPF32[i2 + 124 >> 2] = 0.0;
  i4 = i2 + 176 | 0;
  i2 = i4 + 64 | 0;
  do {
   HEAP32[i4 >> 2] = 0;
   i4 = i4 + 4 | 0;
  } while ((i4 | 0) < (i2 | 0));
  STACKTOP = i1;
  return;
 } else {
  i5 = i4 + 4 | 0;
  HEAP32[i2 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  i5 = i4 + 20 | 0;
  HEAP32[i2 + 16 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i2 + 20 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i2 + 24 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i2 + 28 >> 2] = HEAP32[i5 + 12 >> 2];
  i5 = i4 + 36 | 0;
  HEAP32[i2 + 32 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i2 + 36 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i2 + 40 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i2 + 44 >> 2] = HEAP32[i5 + 12 >> 2];
  i5 = i4 + 52 | 0;
  HEAP32[i2 + 48 >> 2] = HEAP32[i5 + 0 >> 2];
  HEAP32[i2 + 52 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i2 + 56 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i2 + 60 >> 2] = HEAP32[i5 + 12 >> 2];
  i5 = i4 + 344 | 0;
  d10 = +HEAPF32[i5 >> 2];
  i11 = i4 + 348 | 0;
  d9 = d10 * +HEAPF32[i4 + 352 >> 2];
  d8 = d10 * +HEAPF32[i4 + 356 >> 2];
  HEAPF32[i2 + 128 >> 2] = d10 * +HEAPF32[i11 >> 2];
  HEAPF32[i2 + 132 >> 2] = d9;
  HEAPF32[i2 + 136 >> 2] = d8;
  HEAPF32[i2 + 140 >> 2] = 0.0;
  HEAP32[i2 + 240 >> 2] = i4;
  i12 = i4 + 544 | 0;
  HEAP32[i2 + 96 >> 2] = HEAP32[i12 + 0 >> 2];
  HEAP32[i2 + 100 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i2 + 104 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i2 + 108 >> 2] = HEAP32[i12 + 12 >> 2];
  HEAP32[i2 + 112 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i2 + 116 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i2 + 120 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i2 + 124 >> 2] = HEAP32[i11 + 12 >> 2];
  i11 = i4 + 312 | 0;
  HEAP32[i2 + 176 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i2 + 180 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i2 + 184 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i2 + 188 >> 2] = HEAP32[i11 + 12 >> 2];
  i11 = i4 + 328 | 0;
  HEAP32[i2 + 192 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i2 + 196 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i2 + 200 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i2 + 204 >> 2] = HEAP32[i11 + 12 >> 2];
  d8 = +HEAPF32[i5 >> 2];
  d9 = d8 * +HEAPF32[i4 + 416 >> 2] * d3;
  d10 = d8 * +HEAPF32[i4 + 420 >> 2] * d3;
  HEAPF32[i2 + 208 >> 2] = d8 * +HEAPF32[i4 + 412 >> 2] * d3;
  HEAPF32[i2 + 212 >> 2] = d9;
  HEAPF32[i2 + 216 >> 2] = d10;
  HEAPF32[i2 + 220 >> 2] = 0.0;
  d10 = +HEAPF32[i4 + 428 >> 2];
  d9 = +HEAPF32[i4 + 432 >> 2];
  d8 = +HEAPF32[i4 + 436 >> 2];
  d7 = (d10 * +HEAPF32[i4 + 268 >> 2] + d9 * +HEAPF32[i4 + 284 >> 2] + d8 * +HEAPF32[i4 + 300 >> 2]) * d3;
  d6 = (d10 * +HEAPF32[i4 + 272 >> 2] + d9 * +HEAPF32[i4 + 288 >> 2] + d8 * +HEAPF32[i4 + 304 >> 2]) * d3;
  HEAPF32[i2 + 224 >> 2] = (+HEAPF32[i4 + 264 >> 2] * d10 + +HEAPF32[i4 + 280 >> 2] * d9 + +HEAPF32[i4 + 296 >> 2] * d8) * d3;
  HEAPF32[i2 + 228 >> 2] = d7;
  HEAPF32[i2 + 232 >> 2] = d6;
  HEAPF32[i2 + 236 >> 2] = 0.0;
  STACKTOP = i1;
  return;
 }
}
function __ZN22btCompoundLeafCallback17ProcessChildShapeEPK16btCollisionShapei(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = HEAP32[i5 + 12 >> 2] | 0;
 d27 = +HEAPF32[i6 >> 2];
 d26 = +HEAPF32[i6 + 4 >> 2];
 d25 = +HEAPF32[i6 + 8 >> 2];
 d24 = +HEAPF32[i6 + 16 >> 2];
 d23 = +HEAPF32[i6 + 20 >> 2];
 d22 = +HEAPF32[i6 + 24 >> 2];
 d15 = +HEAPF32[i6 + 32 >> 2];
 d13 = +HEAPF32[i6 + 36 >> 2];
 d11 = +HEAPF32[i6 + 40 >> 2];
 i5 = HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 24 >> 2] | 0;
 d21 = +HEAPF32[i5 + (i3 * 80 | 0) >> 2];
 d20 = +HEAPF32[i5 + (i3 * 80 | 0) + 16 >> 2];
 d19 = +HEAPF32[i5 + (i3 * 80 | 0) + 32 >> 2];
 d18 = +HEAPF32[i5 + (i3 * 80 | 0) + 4 >> 2];
 d17 = +HEAPF32[i5 + (i3 * 80 | 0) + 20 >> 2];
 d16 = +HEAPF32[i5 + (i3 * 80 | 0) + 36 >> 2];
 d14 = +HEAPF32[i5 + (i3 * 80 | 0) + 8 >> 2];
 d12 = +HEAPF32[i5 + (i3 * 80 | 0) + 24 >> 2];
 d10 = +HEAPF32[i5 + (i3 * 80 | 0) + 40 >> 2];
 d29 = +HEAPF32[i5 + (i3 * 80 | 0) + 48 >> 2];
 d28 = +HEAPF32[i5 + (i3 * 80 | 0) + 52 >> 2];
 d7 = +HEAPF32[i5 + (i3 * 80 | 0) + 56 >> 2];
 d9 = +HEAPF32[i6 + 48 >> 2] + (d27 * d29 + d26 * d28 + d25 * d7);
 d8 = +HEAPF32[i6 + 52 >> 2] + (d24 * d29 + d23 * d28 + d22 * d7);
 d7 = +HEAPF32[i6 + 56 >> 2] + (d15 * d29 + d13 * d28 + d11 * d7);
 HEAPF32[i2 + 88 >> 2] = d27 * d21 + d26 * d20 + d25 * d19;
 HEAPF32[i2 + 92 >> 2] = d27 * d18 + d26 * d17 + d25 * d16;
 HEAPF32[i2 + 96 >> 2] = d27 * d14 + d26 * d12 + d25 * d10;
 HEAPF32[i2 + 100 >> 2] = 0.0;
 HEAPF32[i2 + 104 >> 2] = d24 * d21 + d23 * d20 + d22 * d19;
 HEAPF32[i2 + 108 >> 2] = d24 * d18 + d23 * d17 + d22 * d16;
 HEAPF32[i2 + 112 >> 2] = d24 * d14 + d23 * d12 + d22 * d10;
 HEAPF32[i2 + 116 >> 2] = 0.0;
 HEAPF32[i2 + 120 >> 2] = d15 * d21 + d13 * d20 + d11 * d19;
 HEAPF32[i2 + 124 >> 2] = d15 * d18 + d13 * d17 + d11 * d16;
 HEAPF32[i2 + 128 >> 2] = d15 * d14 + d13 * d12 + d11 * d10;
 HEAPF32[i2 + 132 >> 2] = 0.0;
 HEAPF32[i2 + 136 >> 2] = d9;
 HEAPF32[i2 + 140 >> 2] = d8;
 HEAPF32[i2 + 144 >> 2] = d7;
 HEAPF32[i2 + 148 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 127](i4, i2 + 88 | 0, i2 + 72 | 0, i2 + 56 | 0);
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 127](i5, HEAP32[i6 + 12 >> 2] | 0, i2 + 40 | 0, i2 + 24 | 0);
 if (!(+HEAPF32[i2 + 72 >> 2] > +HEAPF32[i2 + 24 >> 2]) ? !(+HEAPF32[i2 + 56 >> 2] < +HEAPF32[i2 + 40 >> 2]) : 0) i5 = 1; else i5 = 0;
 if (!(!(+HEAPF32[i2 + 80 >> 2] > +HEAPF32[i2 + 32 >> 2]) ? !(+HEAPF32[i2 + 64 >> 2] < +HEAPF32[i2 + 48 >> 2]) : 0)) i5 = 0;
 if (+HEAPF32[i2 + 76 >> 2] > +HEAPF32[i2 + 28 >> 2]) {
  STACKTOP = i2;
  return;
 }
 if (+HEAPF32[i2 + 60 >> 2] < +HEAPF32[i2 + 44 >> 2] | i5 ^ 1) {
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = HEAP32[i5 + 8 >> 2] | 0;
 HEAP32[i2 >> 2] = i5;
 HEAP32[i2 + 4 >> 2] = i4;
 HEAP32[i2 + 8 >> 2] = i6;
 HEAP32[i2 + 12 >> 2] = i2 + 88;
 HEAP32[i2 + 16 >> 2] = -1;
 HEAP32[i2 + 20 >> 2] = i3;
 if ((HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + (i3 << 2) >> 2] | 0) == 0) {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i4 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, i2, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + (i3 << 2) >> 2] = i4;
  i4 = HEAP32[i1 + 4 >> 2] | 0;
 } else i4 = i5;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 i5 = HEAP32[i6 + 8 >> 2] | 0;
 if ((HEAP32[i5 + 8 >> 2] | 0) == (HEAP32[i4 + 8 >> 2] | 0)) {
  HEAP32[i6 + 8 >> 2] = i2;
  i6 = HEAP32[i1 + 20 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 127](i6, -1, i3);
 } else {
  i5 = HEAP32[i6 + 12 >> 2] | 0;
  HEAP32[i6 + 12 >> 2] = i2;
  i6 = HEAP32[i1 + 20 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 127](i6, -1, i3);
 }
 i3 = HEAP32[(HEAP32[i1 + 24 >> 2] | 0) + (i3 << 2) >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, i2, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0);
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 + 8 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP32[i3 + 8 >> 2] = i5;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i3 + 12 >> 2] = i5;
  STACKTOP = i2;
  return;
 }
}
function __ZN16btCollisionWorld11updateAabbsEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(7424);
 i13 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i13 | 0) > 0) {
  i4 = 0;
  do {
   i5 = HEAP32[(HEAP32[i2 + 16 >> 2] | 0) + (i4 << 2) >> 2] | 0;
   if (!((HEAP8[i2 + 76 >> 0] | 0) == 0 ? (i14 = HEAP32[i5 + 216 >> 2] | 0, (i14 | 0) == 2 | (i14 | 0) == 5) : 0)) {
    i14 = HEAP32[i5 + 192 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] & 127](i14, i5 + 4 | 0, i1 + 48 | 0, i1 + 32 | 0);
    d7 = +HEAPF32[i1 + 48 >> 2] + -.019999999552965164;
    HEAPF32[i1 + 48 >> 2] = d7;
    d6 = +HEAPF32[i1 + 52 >> 2] + -.019999999552965164;
    HEAPF32[i1 + 52 >> 2] = d6;
    d10 = +HEAPF32[i1 + 56 >> 2] + -.019999999552965164;
    HEAPF32[i1 + 56 >> 2] = d10;
    d11 = +HEAPF32[i1 + 32 >> 2] + .019999999552965164;
    HEAPF32[i1 + 32 >> 2] = d11;
    d9 = +HEAPF32[i1 + 36 >> 2] + .019999999552965164;
    HEAPF32[i1 + 36 >> 2] = d9;
    d8 = +HEAPF32[i1 + 40 >> 2] + .019999999552965164;
    HEAPF32[i1 + 40 >> 2] = d8;
    if (((HEAP8[i2 + 44 >> 0] | 0) != 0 ? (HEAP32[i5 + 236 >> 2] | 0) == 2 : 0) ? (HEAP32[i5 + 204 >> 2] & 3 | 0) == 0 : 0) {
     i14 = HEAP32[i5 + 192 >> 2] | 0;
     FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] & 127](i14, i5 + 68 | 0, i1 + 16 | 0, i1);
     d7 = +HEAPF32[i1 + 16 >> 2] + -.019999999552965164;
     HEAPF32[i1 + 16 >> 2] = d7;
     d6 = +HEAPF32[i1 + 20 >> 2] + -.019999999552965164;
     HEAPF32[i1 + 20 >> 2] = d6;
     d10 = +HEAPF32[i1 + 24 >> 2] + -.019999999552965164;
     HEAPF32[i1 + 24 >> 2] = d10;
     d11 = +HEAPF32[i1 >> 2] + .019999999552965164;
     HEAPF32[i1 >> 2] = d11;
     d9 = +HEAPF32[i1 + 4 >> 2] + .019999999552965164;
     HEAPF32[i1 + 4 >> 2] = d9;
     d8 = +HEAPF32[i1 + 8 >> 2] + .019999999552965164;
     HEAPF32[i1 + 8 >> 2] = d8;
     d12 = +HEAPF32[i1 + 48 >> 2];
     if (d7 < d12) HEAPF32[i1 + 48 >> 2] = d7; else d7 = d12;
     d12 = +HEAPF32[i1 + 52 >> 2];
     if (d6 < d12) HEAPF32[i1 + 52 >> 2] = d6; else d6 = d12;
     d12 = +HEAPF32[i1 + 56 >> 2];
     if (d10 < d12) HEAPF32[i1 + 56 >> 2] = d10; else d10 = d12;
     d12 = +HEAPF32[i1 + 28 >> 2];
     if (d12 < +HEAPF32[i1 + 60 >> 2]) HEAPF32[i1 + 60 >> 2] = d12;
     d12 = +HEAPF32[i1 + 32 >> 2];
     if (d12 < d11) HEAPF32[i1 + 32 >> 2] = d11; else d11 = d12;
     d12 = +HEAPF32[i1 + 36 >> 2];
     if (d12 < d9) HEAPF32[i1 + 36 >> 2] = d9; else d9 = d12;
     d12 = +HEAPF32[i1 + 40 >> 2];
     if (d12 < d8) HEAPF32[i1 + 40 >> 2] = d8; else d8 = d12;
     d12 = +HEAPF32[i1 + 12 >> 2];
     if (+HEAPF32[i1 + 44 >> 2] < d12) HEAPF32[i1 + 44 >> 2] = d12;
    }
    i13 = HEAP32[i2 + 68 >> 2] | 0;
    if ((HEAP32[i5 + 204 >> 2] & 1 | 0) == 0 ? (d7 = d11 - d7, d11 = d9 - d6, d12 = d8 - d10, !(d7 * d7 + d11 * d11 + d12 * d12 < 999999995904.0)) : 0) {
     if (!(((HEAP32[i5 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i5 + 216 >> 2] = 5;
     if ((HEAP8[7200] | 0) != 0 ? (i3 = HEAP32[i2 + 72 >> 2] | 0, (i3 | 0) != 0) : 0) {
      HEAP8[7200] = 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3, 7208);
      i14 = HEAP32[i2 + 72 >> 2] | 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 36 >> 2] & 127](i14, 7264);
      i14 = HEAP32[i2 + 72 >> 2] | 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 36 >> 2] & 127](i14, 7336);
      i14 = HEAP32[i2 + 72 >> 2] | 0;
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 36 >> 2] & 127](i14, 7408);
     }
    } else FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] & 31](i13, HEAP32[i5 + 188 >> 2] | 0, i1 + 48 | 0, i1 + 32 | 0, HEAP32[i2 + 24 >> 2] | 0);
    i13 = HEAP32[i2 + 8 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i13 | 0));
 }
 i2 = HEAP32[5022] | 0;
 i14 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i14;
 if ((i14 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 + 48 | 0, 0) | 0;
  i14 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 52 >> 2] | 0) - (HEAP32[i14 + 4 >> 2] | 0) + (((HEAP32[i1 + 48 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i19, i6, i23, d21, d22, d20, i24, i25) {
 i19 = i19 | 0;
 i6 = i6 | 0;
 i23 = i23 | 0;
 d21 = +d21;
 d22 = +d22;
 d20 = +d20;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 d4 = +HEAPF32[i23 >> 2];
 d5 = +HEAPF32[i23 + 4 >> 2];
 d32 = +HEAPF32[i23 + 8 >> 2];
 d43 = +HEAPF32[i24 >> 2];
 d11 = (d4 > d21 ? d21 : d4) + d43;
 d38 = +HEAPF32[i24 + 4 >> 2];
 d7 = (d5 > d22 ? d22 : d5) + d38;
 d39 = +HEAPF32[i24 + 8 >> 2];
 d9 = (d32 > d20 ? d20 : d32) + d39;
 d40 = +HEAPF32[i25 >> 2];
 d12 = (d4 < d21 ? d21 : d4) + d40;
 d41 = +HEAPF32[i25 + 4 >> 2];
 d8 = (d5 < d22 ? d22 : d5) + d41;
 d42 = +HEAPF32[i25 + 8 >> 2];
 d10 = (d32 < d20 ? d20 : d32) + d42;
 d3 = 1.0 / +Math_sqrt(+((d21 - d4) * (d21 - d4) + (d22 - d5) * (d22 - d5) + (d20 - d32) * (d20 - d32)));
 if ((d21 - d4) * d3 == 0.0) d18 = 999999984306749400.0; else d18 = 1.0 / ((d21 - d4) * d3);
 if ((d22 - d5) * d3 == 0.0) d17 = 999999984306749400.0; else d17 = 1.0 / ((d22 - d5) * d3);
 if ((d20 - d32) * d3 == 0.0) d16 = 999999984306749400.0; else d16 = 1.0 / ((d20 - d32) * d3);
 i14 = d18 < 0.0 & 1;
 i13 = d17 < 0.0 & 1;
 i15 = d16 < 0.0 & 1;
 i34 = HEAP32[i19 + 56 >> 2] | 0;
 L10 : do if ((i34 | 0) > 0) {
  i37 = 0;
  i36 = HEAP32[i19 + 96 >> 2] | 0;
  i35 = 1;
  while (1) {
   HEAP32[i1 + 0 >> 2] = HEAP32[i36 + 0 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i36 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i36 + 12 >> 2];
   i47 = i36 + 16 | 0;
   HEAP32[i1 + 16 >> 2] = HEAP32[i47 + 0 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i47 + 4 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i47 + 8 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i47 + 12 >> 2];
   HEAPF32[i1 >> 2] = +HEAPF32[i1 >> 2] - d40;
   HEAPF32[i1 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] - d41;
   HEAPF32[i1 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] - d42;
   HEAPF32[i1 + 16 >> 2] = +HEAPF32[i1 + 16 >> 2] - d43;
   HEAPF32[i1 + 20 >> 2] = +HEAPF32[i1 + 20 >> 2] - d38;
   HEAPF32[i1 + 24 >> 2] = +HEAPF32[i1 + 24 >> 2] - d39;
   if (!(d11 > +HEAPF32[i47 >> 2]) ? !(d12 < +HEAPF32[i36 >> 2]) : 0) i44 = 1; else i44 = 0;
   if (!(!(d9 > +HEAPF32[i36 + 24 >> 2]) ? !(d10 < +HEAPF32[i36 + 8 >> 2]) : 0)) i44 = 0;
   if ((((!(d7 > +HEAPF32[i36 + 20 >> 2]) ? !(d8 < +HEAPF32[i36 + 4 >> 2] | i44 ^ 1) : 0) ? (d33 = +HEAPF32[i23 >> 2], d31 = d18 * (+HEAPF32[i1 + (i14 << 4) >> 2] - d33), d33 = d18 * (+HEAPF32[i1 + ((i14 ^ 1) << 4) >> 2] - d33), d2 = +HEAPF32[i23 + 4 >> 2], d30 = d17 * (+HEAPF32[i1 + (i13 << 4) + 4 >> 2] - d2), d2 = d17 * (+HEAPF32[i1 + ((i13 ^ 1) << 4) + 4 >> 2] - d2), !(d31 > d2 | d30 > d33)) : 0) ? (d29 = d30 > d31 ? d30 : d31, d27 = d2 < d33 ? d2 : d33, d26 = +HEAPF32[i23 + 8 >> 2], d28 = d16 * (+HEAPF32[i1 + (i15 << 4) + 8 >> 2] - d26), d26 = d16 * (+HEAPF32[i1 + ((i15 ^ 1) << 4) + 8 >> 2] - d26), !(d29 > d26 | d28 > d27)) : 0) ? (d28 > d29 ? d28 : d29) < (d20 - d32) * (d20 - d32) * d3 + ((d21 - d4) * (d21 - d4) * d3 + (d22 - d5) * (d22 - d5) * d3) : 0) {
    i47 = (d26 < d27 ? d26 : d27) > 0.0;
    i45 = HEAP32[i36 + 32 >> 2] | 0;
    if ((i45 | 0) == -1 & i47) {
     FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 127](i6, HEAP32[i36 + 36 >> 2] | 0, HEAP32[i36 + 40 >> 2] | 0);
     i34 = HEAP32[i19 + 56 >> 2] | 0;
     i44 = 24;
    } else {
     i46 = (i45 | 0) == -1;
     i44 = 23;
    }
   } else {
    i45 = HEAP32[i36 + 32 >> 2] | 0;
    i46 = (i45 | 0) == -1;
    i47 = 0;
    i44 = 23;
   }
   if ((i44 | 0) == 23) {
    i44 = 0;
    if (i47 | i46) i44 = 24; else {
     i37 = i45 + i37 | 0;
     i36 = i36 + (i45 << 6) | 0;
    }
   }
   if ((i44 | 0) == 24) {
    i37 = i37 + 1 | 0;
    i36 = i36 + 64 | 0;
   }
   if ((i37 | 0) >= (i34 | 0)) break L10;
   d38 = +HEAPF32[i24 + 4 >> 2];
   d39 = +HEAPF32[i24 + 8 >> 2];
   d40 = +HEAPF32[i25 >> 2];
   d41 = +HEAPF32[i25 + 4 >> 2];
   d42 = +HEAPF32[i25 + 8 >> 2];
   d43 = +HEAPF32[i24 >> 2];
   i35 = i35 + 1 | 0;
  }
 } else i35 = 0; while (0);
 if ((HEAP32[4028] | 0) >= (i35 | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[4028] = i35;
 STACKTOP = i1;
 return;
}
function __ZN11btRigidBody24setCenterOfMassTransformERK11btTransform(i2, i10) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0;
 i6 = STACKTOP;
 if ((HEAP32[i2 + 204 >> 2] & 2 | 0) == 0) {
  HEAP32[i2 + 68 >> 2] = HEAP32[i10 + 0 >> 2];
  HEAP32[i2 + 72 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i2 + 76 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i2 + 80 >> 2] = HEAP32[i10 + 12 >> 2];
  HEAP32[i2 + 84 >> 2] = HEAP32[i10 + 16 >> 2];
  HEAP32[i2 + 88 >> 2] = HEAP32[i10 + 20 >> 2];
  HEAP32[i2 + 92 >> 2] = HEAP32[i10 + 24 >> 2];
  HEAP32[i2 + 96 >> 2] = HEAP32[i10 + 28 >> 2];
  HEAP32[i2 + 100 >> 2] = HEAP32[i10 + 32 >> 2];
  HEAP32[i2 + 104 >> 2] = HEAP32[i10 + 36 >> 2];
  HEAP32[i2 + 108 >> 2] = HEAP32[i10 + 40 >> 2];
  HEAP32[i2 + 112 >> 2] = HEAP32[i10 + 44 >> 2];
  HEAP32[i2 + 116 >> 2] = HEAP32[i10 + 48 >> 2];
  HEAP32[i2 + 120 >> 2] = HEAP32[i10 + 52 >> 2];
  HEAP32[i2 + 124 >> 2] = HEAP32[i10 + 56 >> 2];
  HEAP32[i2 + 128 >> 2] = HEAP32[i10 + 60 >> 2];
  i8 = i2 + 20 | 0;
  i9 = i10 + 16 | 0;
  i1 = i2 + 36 | 0;
  i7 = i10 + 32 | 0;
  i4 = i2 + 52 | 0;
  i5 = i10 + 48 | 0;
  i3 = i2 + 4 | 0;
 } else {
  HEAP32[i2 + 68 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i2 + 72 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i2 + 76 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i2 + 80 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i2 + 84 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i2 + 88 >> 2] = HEAP32[i2 + 24 >> 2];
  HEAP32[i2 + 92 >> 2] = HEAP32[i2 + 28 >> 2];
  HEAP32[i2 + 96 >> 2] = HEAP32[i2 + 32 >> 2];
  HEAP32[i2 + 100 >> 2] = HEAP32[i2 + 36 >> 2];
  HEAP32[i2 + 104 >> 2] = HEAP32[i2 + 40 >> 2];
  HEAP32[i2 + 108 >> 2] = HEAP32[i2 + 44 >> 2];
  HEAP32[i2 + 112 >> 2] = HEAP32[i2 + 48 >> 2];
  HEAP32[i2 + 116 >> 2] = HEAP32[i2 + 52 >> 2];
  HEAP32[i2 + 120 >> 2] = HEAP32[i2 + 56 >> 2];
  HEAP32[i2 + 124 >> 2] = HEAP32[i2 + 60 >> 2];
  HEAP32[i2 + 128 >> 2] = HEAP32[i2 + 64 >> 2];
  i8 = i2 + 20 | 0;
  i9 = i10 + 16 | 0;
  i1 = i2 + 36 | 0;
  i7 = i10 + 32 | 0;
  i4 = i2 + 52 | 0;
  i5 = i10 + 48 | 0;
  i3 = i2 + 4 | 0;
 }
 HEAP32[i2 + 132 >> 2] = HEAP32[i2 + 312 >> 2];
 HEAP32[i2 + 136 >> 2] = HEAP32[i2 + 316 >> 2];
 HEAP32[i2 + 140 >> 2] = HEAP32[i2 + 320 >> 2];
 HEAP32[i2 + 144 >> 2] = HEAP32[i2 + 324 >> 2];
 HEAP32[i2 + 148 >> 2] = HEAP32[i2 + 328 >> 2];
 HEAP32[i2 + 152 >> 2] = HEAP32[i2 + 332 >> 2];
 HEAP32[i2 + 156 >> 2] = HEAP32[i2 + 336 >> 2];
 HEAP32[i2 + 160 >> 2] = HEAP32[i2 + 340 >> 2];
 HEAP32[i3 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 HEAP32[i8 + 0 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 HEAP32[i1 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 d22 = +HEAPF32[i2 + 4 >> 2];
 d16 = +HEAPF32[i2 + 396 >> 2];
 d21 = +HEAPF32[i2 + 8 >> 2];
 d14 = +HEAPF32[i2 + 400 >> 2];
 d20 = +HEAPF32[i2 + 12 >> 2];
 d12 = +HEAPF32[i2 + 404 >> 2];
 d19 = +HEAPF32[i2 + 20 >> 2];
 d18 = +HEAPF32[i2 + 24 >> 2];
 d17 = +HEAPF32[i2 + 28 >> 2];
 d15 = +HEAPF32[i2 + 36 >> 2];
 d13 = +HEAPF32[i2 + 40 >> 2];
 d11 = +HEAPF32[i2 + 44 >> 2];
 HEAPF32[i2 + 264 >> 2] = d22 * d22 * d16 + d21 * d21 * d14 + d20 * d20 * d12;
 HEAPF32[i2 + 268 >> 2] = d22 * d16 * d19 + d21 * d14 * d18 + d20 * d12 * d17;
 HEAPF32[i2 + 272 >> 2] = d22 * d16 * d15 + d21 * d14 * d13 + d20 * d12 * d11;
 HEAPF32[i2 + 276 >> 2] = 0.0;
 HEAPF32[i2 + 280 >> 2] = d22 * d16 * d19 + d21 * d14 * d18 + d20 * d12 * d17;
 HEAPF32[i2 + 284 >> 2] = d19 * d16 * d19 + d18 * d14 * d18 + d17 * d12 * d17;
 HEAPF32[i2 + 288 >> 2] = d16 * d19 * d15 + d14 * d18 * d13 + d12 * d17 * d11;
 HEAPF32[i2 + 292 >> 2] = 0.0;
 HEAPF32[i2 + 296 >> 2] = d22 * d16 * d15 + d21 * d14 * d13 + d20 * d12 * d11;
 HEAPF32[i2 + 300 >> 2] = d19 * d16 * d15 + d18 * d14 * d13 + d17 * d12 * d11;
 HEAPF32[i2 + 304 >> 2] = d15 * d16 * d15 + d13 * d14 * d13 + d11 * d12 * d11;
 HEAPF32[i2 + 308 >> 2] = 0.0;
 STACKTOP = i6;
 return;
}
function __ZN21btConeTwistConstraint31setMotorTargetInConstraintSpaceERK12btQuaternion(i1, i16) {
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d17 = 0.0;
 i2 = STACKTOP;
 HEAP32[i1 + 556 >> 2] = HEAP32[i16 + 0 >> 2];
 HEAP32[i1 + 560 >> 2] = HEAP32[i16 + 4 >> 2];
 HEAP32[i1 + 564 >> 2] = HEAP32[i16 + 8 >> 2];
 HEAP32[i1 + 568 >> 2] = HEAP32[i16 + 12 >> 2];
 d12 = +HEAPF32[i1 + 568 >> 2];
 d14 = +HEAPF32[i1 + 560 >> 2];
 d13 = +HEAPF32[i1 + 564 >> 2];
 d6 = +HEAPF32[i1 + 556 >> 2];
 d3 = -d6 - d14 * 0.0 - d13 * 0.0;
 d5 = (d13 + d12 * 0.0 - d6 * 0.0) * -d13 + (d12 * (d12 + d14 * 0.0 - d13 * 0.0) + d3 * -d6) - (d12 * 0.0 + d6 * 0.0 - d14) * -d14;
 d7 = (d12 * 0.0 + d6 * 0.0 - d14) * -d6 + (d12 * (d13 + d12 * 0.0 - d6 * 0.0) + d3 * -d14) - (d12 + d14 * 0.0 - d13 * 0.0) * -d13;
 d3 = (d12 + d14 * 0.0 - d13 * 0.0) * -d14 + (d12 * (d12 * 0.0 + d6 * 0.0 - d14) + d3 * -d13) - (d13 + d12 * 0.0 - d6 * 0.0) * -d6;
 if (d3 * 0.0 + (d7 * 0.0 + d5) < -.9999998807907104) if (+Math_abs(0.0) > .7071067690849304) {
  d4 = 0.0;
  d3 = nan;
  d7 = nan;
  d5 = 0.0;
 } else {
  d4 = -0.0;
  d3 = 1.0;
  d7 = 0.0;
  d5 = 0.0;
 } else {
  d15 = +Math_sqrt(+((d3 * 0.0 + (d7 * 0.0 + d5) + 1.0) * 2.0));
  d4 = (d3 * 0.0 - d7 * 0.0) * (1.0 / d15);
  d3 = (d5 * 0.0 - d3) * (1.0 / d15);
  d7 = (d7 - d5 * 0.0) * (1.0 / d15);
  d5 = d15 * .5;
 }
 d15 = 1.0 / +Math_sqrt(+(d5 * d5 + (d7 * d7 + (d3 * d3 + d4 * d4))));
 d8 = d4 * d15;
 d9 = d3 * d15;
 d11 = d7 * d15;
 d7 = d5 * d15;
 d15 = 1.0 / +Math_sqrt(+((d7 * d12 - d6 * -d8 - d14 * -d9 - d13 * -d11) * (d7 * d12 - d6 * -d8 - d14 * -d9 - d13 * -d11) + ((d12 * -d11 + d7 * d13 + d14 * -d8 - d6 * -d9) * (d12 * -d11 + d7 * d13 + d14 * -d8 - d6 * -d9) + ((d7 * d6 + d12 * -d8 + d13 * -d9 - d14 * -d11) * (d7 * d6 + d12 * -d8 + d13 * -d9 - d14 * -d11) + (d6 * -d11 + (d12 * -d9 + d7 * d14) - d13 * -d8) * (d6 * -d11 + (d12 * -d9 + d7 * d14) - d13 * -d8)))));
 d5 = (d7 * d6 + d12 * -d8 + d13 * -d9 - d14 * -d11) * d15;
 d3 = d15 * (d6 * -d11 + (d12 * -d9 + d7 * d14) - d13 * -d8);
 d4 = d15 * (d12 * -d11 + d7 * d13 + d14 * -d8 - d6 * -d9);
 d6 = d15 * (d7 * d12 - d6 * -d8 - d14 * -d9 - d13 * -d11);
 d15 = +HEAPF32[i1 + 444 >> 2];
 if (d15 >= .05000000074505806 ? (d10 = +HEAPF32[i1 + 448 >> 2], d10 >= .05000000074505806) : 0) {
  d13 = d7 < -1.0 ? -1.0 : d7;
  d13 = +Math_acos(+(d13 > 1.0 ? 1.0 : d13)) * 2.0;
  if (d13 > 1.1920928955078125e-7) {
   d12 = 1.0 / +Math_sqrt(+(d11 * d11 + (d8 * d8 + d9 * d9)));
   if (+Math_abs(+(d9 * d12)) > 1.1920928955078125e-7) {
    d15 = +Math_sqrt(+((d11 * d12 * d11 * d12 / (d9 * d12 * d9 * d12) + 1.0) / (1.0 / (d10 * d10) + d11 * d12 * d11 * d12 / (d9 * d12 * d9 * d12) / (d15 * d15))));
    d14 = d8 * d12;
    d10 = d9 * d12;
    d12 = d11 * d12;
   } else {
    d14 = d8 * d12;
    d10 = d9 * d12;
    d12 = d11 * d12;
   }
  } else {
   d15 = 0.0;
   d14 = 0.0;
   d10 = 0.0;
   d12 = 0.0;
  }
  if (+Math_abs(+d13) > 1.1920928955078125e-7) {
   if (!(d13 > d15)) {
    d7 = -d15;
    if (d13 < d7) d13 = d7;
   } else d13 = d15;
   d7 = d13 * .5;
   d11 = +Math_sin(+d7) / +Math_sqrt(+(d12 * d12 + (d10 * d10 + d14 * d14)));
   d7 = +Math_cos(+d7);
   d8 = d14 * d11;
   d9 = d10 * d11;
   d11 = d12 * d11;
  }
 }
 d12 = +HEAPF32[i1 + 452 >> 2];
 if (d12 >= .05000000074505806) {
  d14 = d6 < -1.0 ? -1.0 : d6;
  d14 = +Math_acos(+(d14 > 1.0 ? 1.0 : d14)) * 2.0;
  if (d14 > 3.1415927410125732) {
   d14 = d6 > 1.0 ? -1.0 : -d6;
   d14 = +Math_acos(+(d14 > 1.0 ? 1.0 : d14)) * 2.0;
   d15 = -d5;
   d10 = -d3;
   d13 = -d4;
  } else {
   d15 = d5;
   d10 = d3;
   d13 = d4;
  }
  if (d14 > 1.1920928955078125e-7) {
   d17 = 1.0 / +Math_sqrt(+(d13 * d13 + (d10 * d10 + d15 * d15)));
   d15 = d15 * d17;
   d10 = d10 * d17;
   d13 = d13 * d17;
  }
  if (+Math_abs(+d14) > 1.1920928955078125e-7) {
   if (!(d14 > d12)) if (d14 < -d12) d12 = -d12; else d12 = d14;
   d6 = d12 * .5;
   d3 = +Math_sin(+d6) / +Math_sqrt(+(d13 * d13 + (d10 * d10 + d15 * d15)));
   d5 = d15 * d3;
   d6 = +Math_cos(+d6);
   d4 = d13 * d3;
   d3 = d10 * d3;
  }
 }
 HEAPF32[i1 + 556 >> 2] = d9 * d4 + (d8 * d6 + d7 * d5) - d11 * d3;
 HEAPF32[i1 + 560 >> 2] = d11 * d5 + (d9 * d6 + d7 * d3) - d8 * d4;
 HEAPF32[i1 + 564 >> 2] = d11 * d6 + d7 * d4 + d8 * d3 - d9 * d5;
 HEAPF32[i1 + 568 >> 2] = d7 * d6 - d8 * d5 - d9 * d3 - d11 * d4;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btSliderConstraint_btSliderConstraint_3(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(1147) | 0;
 if ((i5 | 0) == 0) i5 = 0; else {
  HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
  i5 = i5 + 19 & -16;
 }
 if ((HEAP8[5024] | 0) == 0 ? (___cxa_guard_acquire(5024) | 0) != 0 : 0) {
  HEAP32[i2 + 80 >> 2] = 0;
  HEAP32[i2 + 84 >> 2] = 0;
  HEAP32[i2 + 88 >> 2] = 0;
  HEAP32[i2 + 92 >> 2] = 0;
  __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(4408, 0.0, 0, 0, i2 + 80 | 0);
  ___cxa_guard_release(5024);
 }
 HEAP32[i2 + 64 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 0;
 HEAP32[i2 + 76 >> 2] = 0;
 __ZN11btRigidBody12setMassPropsEfRK9btVector3(4408, 0.0, i2 + 64 | 0);
 HEAP32[i5 + 4 >> 2] = 7;
 HEAP32[i5 + 8 >> 2] = -1;
 HEAP32[i5 + 12 >> 2] = -1;
 HEAPF32[i5 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i5 + 20 >> 0] = 1;
 HEAP8[i5 + 21 >> 0] = 0;
 HEAP32[i5 + 24 >> 2] = -1;
 i7 = i5 + 28 | 0;
 HEAP32[i7 >> 2] = 4408;
 i6 = i5 + 32 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAPF32[i5 + 36 >> 2] = 0.0;
 HEAPF32[i5 + 40 >> 2] = .30000001192092896;
 HEAP32[i5 + 44 >> 2] = 0;
 HEAP32[i5 >> 2] = 4264;
 HEAP8[i5 + 48 >> 0] = 0;
 i8 = i5 + 116 | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i9 = i5 + 132 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i3 + 28 >> 2];
 i9 = i5 + 148 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i3 + 44 >> 2];
 i9 = i5 + 164 | 0;
 HEAP32[i9 + 0 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i3 + 60 >> 2];
 HEAP8[i5 + 180 >> 0] = i4 & 1;
 i3 = i5 + 52 | 0;
 __ZNK11btTransformmlERKS_(i2, i1 + 4 | 0, i8);
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i3 = i5 + 68 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 28 >> 2];
 i3 = i5 + 84 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 44 >> 2];
 i3 = i5 + 100 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 60 >> 2];
 HEAPF32[i5 + 184 >> 2] = 1.0;
 HEAPF32[i5 + 188 >> 2] = -1.0;
 HEAPF32[i5 + 192 >> 2] = 0.0;
 HEAPF32[i5 + 196 >> 2] = 0.0;
 HEAPF32[i5 + 200 >> 2] = 1.0;
 HEAPF32[i5 + 204 >> 2] = .699999988079071;
 HEAPF32[i5 + 208 >> 2] = 0.0;
 HEAPF32[i5 + 212 >> 2] = 0.0;
 HEAPF32[i5 + 216 >> 2] = 1.0;
 HEAPF32[i5 + 220 >> 2] = .699999988079071;
 HEAPF32[i5 + 224 >> 2] = 0.0;
 HEAPF32[i5 + 228 >> 2] = 0.0;
 HEAPF32[i5 + 264 >> 2] = 1.0;
 HEAPF32[i5 + 268 >> 2] = .699999988079071;
 HEAPF32[i5 + 272 >> 2] = 1.0;
 HEAPF32[i5 + 276 >> 2] = 0.0;
 HEAPF32[i5 + 280 >> 2] = 1.0;
 HEAPF32[i5 + 284 >> 2] = .699999988079071;
 HEAPF32[i5 + 288 >> 2] = 1.0;
 HEAPF32[i5 + 292 >> 2] = 0.0;
 HEAPF32[i5 + 232 >> 2] = 1.0;
 HEAPF32[i5 + 236 >> 2] = .699999988079071;
 HEAPF32[i5 + 240 >> 2] = 1.0;
 HEAPF32[i5 + 244 >> 2] = 0.0;
 HEAPF32[i5 + 248 >> 2] = 1.0;
 HEAPF32[i5 + 252 >> 2] = .699999988079071;
 HEAPF32[i5 + 256 >> 2] = 1.0;
 HEAPF32[i5 + 260 >> 2] = 0.0;
 HEAP8[i5 + 1096 >> 0] = 0;
 i3 = i5 + 1100 | 0;
 HEAPF32[i5 + 1116 >> 2] = 0.0;
 HEAPF32[i5 + 1120 >> 2] = 0.0;
 HEAPF32[i5 + 1124 >> 2] = 0.0;
 HEAP32[i5 + 300 >> 2] = 0;
 i4 = i5 + 49 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP8[i3 + 12 >> 0] = 0;
 HEAP8[i4 >> 0] = 1;
 __ZN18btSliderConstraint19calculateTransformsERK11btTransformS2_(i5, (HEAP32[i7 >> 2] | 0) + 4 | 0, (HEAP32[i6 >> 2] | 0) + 4 | 0);
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN22btBvhTriangleMeshShapeC2EP23btStridingMeshInterfacebb(i1, i5, i3, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAP32[i1 >> 2] = 17416;
 HEAP32[i1 + 48 >> 2] = i5;
 HEAP32[i1 + 4 >> 2] = 21;
 if (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 127](i5) | 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i1 + 16 | 0, i1 + 32 | 0); else {
  HEAP32[i2 + 32 >> 2] = 0;
  HEAP32[i2 + 36 >> 2] = 0;
  HEAP32[i2 + 40 >> 2] = 0;
  HEAP32[i2 + 44 >> 2] = 0;
  HEAPF32[i2 + 32 >> 2] = 1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i2 + 16 | 0, i1, i2 + 32 | 0);
  HEAPF32[i1 + 32 >> 2] = +HEAPF32[i2 + 16 >> 2] + +HEAPF32[i1 + 12 >> 2];
  HEAPF32[i2 + 32 >> 2] = -1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i2, i1, i2 + 32 | 0);
  HEAP32[i2 + 16 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i2 + 20 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i2 + 24 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i2 + 28 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAPF32[i1 + 16 >> 2] = +HEAPF32[i2 + 16 >> 2] - +HEAPF32[i1 + 12 >> 2];
  HEAP32[i2 + 32 >> 2] = 0;
  HEAP32[i2 + 36 >> 2] = 0;
  HEAP32[i2 + 40 >> 2] = 0;
  HEAP32[i2 + 44 >> 2] = 0;
  HEAPF32[i2 + 36 >> 2] = 1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i2 + 16 | 0, i1, i2 + 32 | 0);
  HEAPF32[i1 + 36 >> 2] = +HEAPF32[i2 + 20 >> 2] + +HEAPF32[i1 + 12 >> 2];
  HEAPF32[i2 + 36 >> 2] = -1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i2, i1, i2 + 32 | 0);
  HEAP32[i2 + 16 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i2 + 20 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i2 + 24 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i2 + 28 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAPF32[i1 + 20 >> 2] = +HEAPF32[i2 + 20 >> 2] - +HEAPF32[i1 + 12 >> 2];
  HEAP32[i2 + 32 >> 2] = 0;
  HEAP32[i2 + 36 >> 2] = 0;
  HEAP32[i2 + 40 >> 2] = 0;
  HEAP32[i2 + 44 >> 2] = 0;
  HEAPF32[i2 + 40 >> 2] = 1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i2 + 16 | 0, i1, i2 + 32 | 0);
  HEAPF32[i1 + 40 >> 2] = +HEAPF32[i2 + 24 >> 2] + +HEAPF32[i1 + 12 >> 2];
  HEAPF32[i2 + 40 >> 2] = -1.0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i2, i1, i2 + 32 | 0);
  HEAP32[i2 + 16 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i2 + 20 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i2 + 24 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i2 + 28 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAPF32[i1 + 24 >> 2] = +HEAPF32[i2 + 24 >> 2] - +HEAPF32[i1 + 12 >> 2];
 }
 HEAP32[i1 >> 2] = 5624;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP8[i1 + 60 >> 0] = i3 & 1;
 HEAP8[i1 + 61 >> 0] = 0;
 HEAP32[i1 + 4 >> 2] = 21;
 if (!i4) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(191) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAP32[i3 + 52 >> 2] = 282;
 HEAP8[i3 + 60 >> 0] = 0;
 HEAP8[i3 + 80 >> 0] = 1;
 HEAP32[i3 + 76 >> 2] = 0;
 HEAP32[i3 + 68 >> 2] = 0;
 HEAP32[i3 + 72 >> 2] = 0;
 HEAP8[i3 + 100 >> 0] = 1;
 HEAP32[i3 + 96 >> 2] = 0;
 HEAP32[i3 + 88 >> 2] = 0;
 HEAP32[i3 + 92 >> 2] = 0;
 HEAP8[i3 + 120 >> 0] = 1;
 HEAP32[i3 + 116 >> 2] = 0;
 HEAP32[i3 + 108 >> 2] = 0;
 HEAP32[i3 + 112 >> 2] = 0;
 HEAP8[i3 + 140 >> 0] = 1;
 HEAP32[i3 + 136 >> 2] = 0;
 HEAP32[i3 + 128 >> 2] = 0;
 HEAP32[i3 + 132 >> 2] = 0;
 HEAP32[i3 + 144 >> 2] = 0;
 HEAP8[i3 + 164 >> 0] = 1;
 HEAP32[i3 + 160 >> 2] = 0;
 HEAP32[i3 + 152 >> 2] = 0;
 HEAP32[i3 + 156 >> 2] = 0;
 HEAP32[i3 + 168 >> 2] = 0;
 HEAPF32[i3 + 4 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i3 + 8 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i3 + 12 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i3 + 16 >> 2] = 0.0;
 HEAPF32[i3 + 20 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i3 + 24 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i3 + 28 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i3 + 32 >> 2] = 0.0;
 HEAP32[i3 >> 2] = 14880;
 HEAP32[i1 + 52 >> 2] = i3;
 __ZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_(i3, HEAP32[i1 + 48 >> 2] | 0, (HEAP8[i1 + 60 >> 0] | 0) != 0, i1 + 16 | 0, i1 + 32 | 0);
 HEAP8[i1 + 61 >> 0] = 1;
 STACKTOP = i2;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i1, i7, i6, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = (HEAP8[i1 + 8 >> 0] | 0) != 0;
 i4 = i8 ? i6 : i7;
 i6 = i8 ? i7 : i6;
 i7 = HEAP32[i6 + 4 >> 2] | 0;
 if (!(((HEAP32[i7 + 4 >> 2] | 0) + -21 | 0) >>> 0 < 9)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i4 + 4 >> 2] | 0) + 4 >> 2] | 0) >= 20) {
  STACKTOP = i2;
  return;
 }
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 15](i7);
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 76 >> 2];
 HEAP32[i1 + 16 >> 2] = i4;
 HEAP32[i1 + 20 >> 2] = i6;
 HEAP32[i1 + 64 >> 2] = i5;
 HEAPF32[i1 + 68 >> 2] = d9;
 HEAP32[i1 + 56 >> 2] = i3;
 i8 = HEAP32[i6 + 12 >> 2] | 0;
 d24 = +HEAPF32[i8 >> 2];
 d23 = +HEAPF32[i8 + 16 >> 2];
 d22 = +HEAPF32[i8 + 32 >> 2];
 d21 = +HEAPF32[i8 + 4 >> 2];
 d20 = +HEAPF32[i8 + 20 >> 2];
 d19 = +HEAPF32[i8 + 36 >> 2];
 d15 = +HEAPF32[i8 + 8 >> 2];
 d13 = +HEAPF32[i8 + 24 >> 2];
 d11 = +HEAPF32[i8 + 40 >> 2];
 d18 = -+HEAPF32[i8 + 48 >> 2];
 d17 = -+HEAPF32[i8 + 52 >> 2];
 d16 = -+HEAPF32[i8 + 56 >> 2];
 i8 = HEAP32[i4 + 12 >> 2] | 0;
 d33 = +HEAPF32[i8 >> 2];
 d32 = +HEAPF32[i8 + 16 >> 2];
 d31 = +HEAPF32[i8 + 32 >> 2];
 d30 = +HEAPF32[i8 + 4 >> 2];
 d29 = +HEAPF32[i8 + 20 >> 2];
 d28 = +HEAPF32[i8 + 36 >> 2];
 d27 = +HEAPF32[i8 + 8 >> 2];
 d26 = +HEAPF32[i8 + 24 >> 2];
 d25 = +HEAPF32[i8 + 40 >> 2];
 d14 = +HEAPF32[i8 + 48 >> 2];
 d12 = +HEAPF32[i8 + 52 >> 2];
 d10 = +HEAPF32[i8 + 56 >> 2];
 HEAPF32[i2 >> 2] = d24 * d33 + d23 * d32 + d22 * d31;
 HEAPF32[i2 + 4 >> 2] = d24 * d30 + d23 * d29 + d22 * d28;
 HEAPF32[i2 + 8 >> 2] = d24 * d27 + d23 * d26 + d22 * d25;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i2 + 16 >> 2] = d21 * d33 + d20 * d32 + d19 * d31;
 HEAPF32[i2 + 20 >> 2] = d21 * d30 + d20 * d29 + d19 * d28;
 HEAPF32[i2 + 24 >> 2] = d21 * d27 + d20 * d26 + d19 * d25;
 HEAPF32[i2 + 28 >> 2] = 0.0;
 HEAPF32[i2 + 32 >> 2] = d15 * d33 + d13 * d32 + d11 * d31;
 HEAPF32[i2 + 36 >> 2] = d15 * d30 + d13 * d29 + d11 * d28;
 HEAPF32[i2 + 40 >> 2] = d15 * d27 + d13 * d26 + d11 * d25;
 HEAPF32[i2 + 44 >> 2] = 0.0;
 HEAPF32[i2 + 48 >> 2] = d24 * d18 + d23 * d17 + d22 * d16 + (d24 * d14 + d23 * d12 + d22 * d10);
 HEAPF32[i2 + 52 >> 2] = d21 * d18 + d20 * d17 + d19 * d16 + (d21 * d14 + d20 * d12 + d19 * d10);
 HEAPF32[i2 + 56 >> 2] = d15 * d18 + d13 * d17 + d11 * d16 + (d15 * d14 + d13 * d12 + d11 * d10);
 HEAPF32[i2 + 60 >> 2] = 0.0;
 i8 = HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + 4 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 127](i8, i2, i1 + 24 | 0, i1 + 40 | 0);
 HEAPF32[i1 + 40 >> 2] = +HEAPF32[i1 + 40 >> 2] + d9;
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i1 + 44 >> 2] + d9;
 HEAPF32[i1 + 48 >> 2] = +HEAPF32[i1 + 48 >> 2] + d9;
 HEAPF32[i1 + 24 >> 2] = +HEAPF32[i1 + 24 >> 2] - d9;
 HEAPF32[i1 + 28 >> 2] = +HEAPF32[i1 + 28 >> 2] - d9;
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i1 + 32 >> 2] - d9;
 i8 = HEAP32[i1 + 76 >> 2] | 0;
 i6 = HEAP32[i6 + 8 >> 2] | 0;
 HEAP32[i8 + 740 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i8 + 744 >> 2] = i6;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 64 >> 2] & 127](i7, i1 + 12 | 0, i1 + 24 | 0, i1 + 40 | 0);
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 do if ((HEAP32[i4 + 748 >> 2] | 0) != 0) {
  i5 = HEAP32[i4 + 740 >> 2] | 0;
  i6 = HEAP32[(HEAP32[i3 + 8 >> 2] | 0) + 8 >> 2] | 0;
  if ((i5 | 0) == (i6 | 0)) {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i4, i5 + 4 | 0, (HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
   break;
  } else {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i4, (HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i6 + 4 | 0);
   break;
  }
 } while (0);
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i8, i2, i3, i1, i7) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 if ((i8 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
   STACKTOP = i6;
   return;
  }
  if ((HEAP32[i2 + 28 >> 2] | 0) == 1) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i2 + 28 >> 2] = i1;
  STACKTOP = i6;
  return;
 }
 if ((i8 | 0) != (HEAP32[i2 >> 2] | 0)) {
  i9 = HEAP32[i8 + 12 >> 2] | 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i8 + 16 | 0, i2, i3, i1, i7);
  if ((i9 | 0) <= 1) {
   STACKTOP = i6;
   return;
  }
  i10 = HEAP32[i8 + 8 >> 2] | 0;
  if ((i10 & 2 | 0) == 0 ? (HEAP32[i2 + 36 >> 2] | 0) != 1 : 0) {
   if ((i10 & 1 | 0) == 0) {
    i10 = i8 + 24 | 0;
    while (1) {
     if ((HEAP8[i2 + 54 >> 0] | 0) != 0) {
      i10 = 43;
      break;
     }
     if ((HEAP32[i2 + 36 >> 2] | 0) == 1) {
      i10 = 43;
      break;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i10, i2, i3, i1, i7);
     i10 = i10 + 8 | 0;
     if (!(i10 >>> 0 < (i8 + (i9 << 3) + 16 | 0) >>> 0)) {
      i10 = 43;
      break;
     }
    }
    if ((i10 | 0) == 43) {
     STACKTOP = i6;
     return;
    }
   }
   i10 = i8 + 24 | 0;
   while (1) {
    if ((HEAP8[i2 + 54 >> 0] | 0) != 0) {
     i10 = 43;
     break;
    }
    if ((HEAP32[i2 + 36 >> 2] | 0) == 1 ? (HEAP32[i2 + 24 >> 2] | 0) == 1 : 0) {
     i10 = 43;
     break;
    }
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i10, i2, i3, i1, i7);
    i10 = i10 + 8 | 0;
    if (!(i10 >>> 0 < (i8 + (i9 << 3) + 16 | 0) >>> 0)) {
     i10 = 43;
     break;
    }
   }
   if ((i10 | 0) == 43) {
    STACKTOP = i6;
    return;
   }
  }
  i10 = i8 + 24 | 0;
  while (1) {
   if ((HEAP8[i2 + 54 >> 0] | 0) != 0) {
    i10 = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i10, i2, i3, i1, i7);
   i10 = i10 + 8 | 0;
   if (!(i10 >>> 0 < (i8 + (i9 << 3) + 16 | 0) >>> 0)) {
    i10 = 43;
    break;
   }
  }
  if ((i10 | 0) == 43) {
   STACKTOP = i6;
   return;
  }
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0) ? (HEAP32[i2 + 20 >> 2] | 0) != (i3 | 0) : 0) {
  HEAP32[i2 + 32 >> 2] = i1;
  if ((HEAP32[i2 + 44 >> 2] | 0) == 4) {
   STACKTOP = i6;
   return;
  }
  i11 = HEAP32[i8 + 12 >> 2] | 0;
  L54 : do if ((i11 | 0) > 0) {
   i12 = 0;
   i10 = 0;
   i9 = i8 + 16 | 0;
   L56 : do {
    HEAP8[i2 + 52 >> 0] = 0;
    HEAP8[i2 + 53 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i9, i2, i3, i3, 1, i7);
    if ((HEAP8[i2 + 54 >> 0] | 0) != 0) break;
    do if ((HEAP8[i2 + 53 >> 0] | 0) != 0) {
     if ((HEAP8[i2 + 52 >> 0] | 0) == 0) if ((HEAP32[i8 + 8 >> 2] & 1 | 0) == 0) {
      i10 = 1;
      break L56;
     } else {
      i10 = 1;
      break;
     }
     if ((HEAP32[i2 + 24 >> 2] | 0) == 1) {
      i10 = 25;
      break L54;
     }
     if ((HEAP32[i8 + 8 >> 2] & 2 | 0) == 0) {
      i10 = 25;
      break L54;
     } else {
      i12 = 1;
      i10 = 1;
     }
    } while (0);
    i9 = i9 + 8 | 0;
   } while (i9 >>> 0 < (i8 + (i11 << 3) + 16 | 0) >>> 0);
   if (i12) {
    i5 = i10;
    i10 = 24;
   } else {
    i4 = i10;
    i10 = 21;
   }
  } else {
   i4 = 0;
   i10 = 21;
  } while (0);
  if ((i10 | 0) == 21) {
   HEAP32[i2 + 20 >> 2] = i3;
   HEAP32[i2 + 40 >> 2] = (HEAP32[i2 + 40 >> 2] | 0) + 1;
   if ((HEAP32[i2 + 36 >> 2] | 0) == 1 ? (HEAP32[i2 + 24 >> 2] | 0) == 2 : 0) {
    HEAP8[i2 + 54 >> 0] = 1;
    if (i4) i10 = 25; else i10 = 26;
   } else {
    i5 = i4;
    i10 = 24;
   }
  }
  if ((i10 | 0) == 24) if (i5) i10 = 25; else i10 = 26;
  if ((i10 | 0) == 25) {
   HEAP32[i2 + 44 >> 2] = 3;
   STACKTOP = i6;
   return;
  } else if ((i10 | 0) == 26) {
   HEAP32[i2 + 44 >> 2] = 4;
   STACKTOP = i6;
   return;
  }
 }
 if ((i1 | 0) != 1) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i2 + 32 >> 2] = 1;
 STACKTOP = i6;
 return;
}
function __ZNK17btCollisionObject9serializeEPvP12btSerializer(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, d7 = 0.0;
 i2 = STACKTOP;
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i1 + 20 >> 2] = +HEAPF32[i4 + 8 >> 2];
 HEAPF32[i1 + 24 >> 2] = +HEAPF32[i4 + 12 >> 2];
 HEAPF32[i1 + 28 >> 2] = +HEAPF32[i4 + 16 >> 2];
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i4 + 20 >> 2];
 HEAPF32[i1 + 36 >> 2] = +HEAPF32[i4 + 24 >> 2];
 HEAPF32[i1 + 40 >> 2] = +HEAPF32[i4 + 28 >> 2];
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i4 + 32 >> 2];
 HEAPF32[i1 + 48 >> 2] = +HEAPF32[i4 + 36 >> 2];
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i4 + 40 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i4 + 44 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i4 + 48 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i4 + 52 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i4 + 56 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i4 + 60 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i4 + 64 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i4 + 68 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i4 + 72 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i4 + 76 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i4 + 80 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i4 + 84 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i4 + 88 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i4 + 92 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i4 + 96 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i4 + 100 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i4 + 104 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i4 + 108 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i4 + 112 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i4 + 116 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i4 + 120 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i4 + 124 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i4 + 128 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i4 + 132 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i4 + 136 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i4 + 140 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i4 + 144 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i4 + 148 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i4 + 152 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i4 + 156 >> 2];
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i4 + 160 >> 2];
 HEAPF32[i1 + 176 >> 2] = +HEAPF32[i4 + 164 >> 2];
 HEAPF32[i1 + 180 >> 2] = +HEAPF32[i4 + 168 >> 2];
 HEAPF32[i1 + 184 >> 2] = +HEAPF32[i4 + 172 >> 2];
 HEAPF32[i1 + 188 >> 2] = +HEAPF32[i4 + 176 >> 2];
 HEAP32[i1 + 224 >> 2] = HEAP32[i4 + 180 >> 2];
 HEAPF32[i1 + 192 >> 2] = +HEAPF32[i4 + 184 >> 2];
 HEAP32[i1 >> 2] = 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, HEAP32[i4 + 192 >> 2] | 0) | 0;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 228 >> 2] = HEAP32[i4 + 204 >> 2];
 HEAP32[i1 + 232 >> 2] = HEAP32[i4 + 208 >> 2];
 HEAP32[i1 + 236 >> 2] = HEAP32[i4 + 212 >> 2];
 HEAP32[i1 + 240 >> 2] = HEAP32[i4 + 216 >> 2];
 HEAPF32[i1 + 196 >> 2] = +HEAPF32[i4 + 220 >> 2];
 HEAPF32[i1 + 200 >> 2] = +HEAPF32[i4 + 224 >> 2];
 HEAPF32[i1 + 204 >> 2] = +HEAPF32[i4 + 232 >> 2];
 HEAPF32[i1 + 208 >> 2] = +HEAPF32[i4 + 228 >> 2];
 HEAP32[i1 + 244 >> 2] = HEAP32[i4 + 236 >> 2];
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i4) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i1 + 12 >> 2] = i6;
 if ((i6 | 0) == 0) {
  i5 = i4 + 244 | 0;
  d7 = +HEAPF32[i5 >> 2];
  i5 = i1 + 212 | 0;
  HEAPF32[i5 >> 2] = d7;
  i5 = i4 + 248 | 0;
  d7 = +HEAPF32[i5 >> 2];
  i5 = i1 + 216 | 0;
  HEAPF32[i5 >> 2] = d7;
  i5 = i4 + 252 | 0;
  d7 = +HEAPF32[i5 >> 2];
  i5 = i1 + 220 | 0;
  HEAPF32[i5 >> 2] = d7;
  i5 = i4 + 256 | 0;
  i5 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 248 | 0;
  HEAP32[i6 >> 2] = i5;
  STACKTOP = i2;
  return 7016;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 i5 = i4 + 244 | 0;
 d7 = +HEAPF32[i5 >> 2];
 i5 = i1 + 212 | 0;
 HEAPF32[i5 >> 2] = d7;
 i5 = i4 + 248 | 0;
 d7 = +HEAPF32[i5 >> 2];
 i5 = i1 + 216 | 0;
 HEAPF32[i5 >> 2] = d7;
 i5 = i4 + 252 | 0;
 d7 = +HEAPF32[i5 >> 2];
 i5 = i1 + 220 | 0;
 HEAPF32[i5 >> 2] = d7;
 i5 = i4 + 256 | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 i6 = i1 + 248 | 0;
 HEAP32[i6 >> 2] = i5;
 STACKTOP = i2;
 return 7016;
}
function __ZN31btDefaultCollisionConfigurationD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 11776;
 if ((HEAP8[i2 + 20 >> 0] | 0) != 0) {
  i3 = HEAP32[i2 + 16 >> 2] | 0;
  i4 = HEAP32[i3 + 16 >> 2] | 0;
  if ((i4 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
   i3 = HEAP32[i2 + 16 >> 2] | 0;
  }
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
 }
 if ((HEAP8[i2 + 12 >> 0] | 0) != 0) {
  i3 = HEAP32[i2 + 8 >> 2] | 0;
  i4 = HEAP32[i3 + 16 >> 2] | 0;
  if ((i4 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
   i3 = HEAP32[i2 + 8 >> 2] | 0;
  }
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
 }
 i3 = HEAP32[i2 + 32 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 32 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 36 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 36 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 40 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 40 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 44 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 44 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 48 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 48 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 60 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 60 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 76 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 76 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 80 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 80 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 72 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 72 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 88 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 88 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 84 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i2 + 84 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i4 = HEAP32[i2 + 28 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i4);
 i2 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function ___udivmoddi4(i9, i8, i4, i2, i1) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 if ((i8 | 0) == 0) if ((i2 | 0) == 0) {
  if ((i1 | 0) != 0) {
   HEAP32[i1 >> 2] = (i9 >>> 0) % (i4 >>> 0);
   HEAP32[i1 + 4 >> 2] = 0;
  }
  i10 = 0;
  i11 = (i9 >>> 0) / (i4 >>> 0) >>> 0;
  return (tempRet0 = i10, i11) | 0;
 } else {
  if ((i1 | 0) == 0) {
   i10 = 0;
   i11 = 0;
   return (tempRet0 = i10, i11) | 0;
  }
  HEAP32[i1 >> 2] = i9 | 0;
  HEAP32[i1 + 4 >> 2] = i8 & 0;
  i10 = 0;
  i11 = 0;
  return (tempRet0 = i10, i11) | 0;
 }
 do if ((i4 | 0) != 0) {
  if ((i2 | 0) != 0) {
   i10 = (_llvm_ctlz_i32(i2 | 0) | 0) - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
   if (i10 >>> 0 <= 31) {
    i6 = i10 + 1 | 0;
    i3 = i9 >>> ((i10 + 1 | 0) >>> 0) & i10 - 31 >> 31 | i8 << 31 - i10;
    i5 = i8 >>> ((i10 + 1 | 0) >>> 0) & i10 - 31 >> 31;
    i7 = 0;
    i11 = i9 << 31 - i10;
    break;
   }
   if ((i1 | 0) == 0) {
    i10 = 0;
    i11 = 0;
    return (tempRet0 = i10, i11) | 0;
   }
   HEAP32[i1 >> 2] = i9 | 0;
   HEAP32[i1 + 4 >> 2] = i8 | i8 & 0;
   i10 = 0;
   i11 = 0;
   return (tempRet0 = i10, i11) | 0;
  }
  if ((i4 - 1 & i4 | 0) != 0) {
   i11 = (_llvm_ctlz_i32(i4 | 0) | 0) + 33 - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
   i6 = i11;
   i3 = 32 - i11 - 1 >> 31 & i8 >>> ((i11 - 32 | 0) >>> 0) | (i8 << 32 - i11 | i9 >>> (i11 >>> 0)) & i11 - 32 >> 31;
   i5 = i11 - 32 >> 31 & i8 >>> (i11 >>> 0);
   i7 = i9 << 64 - i11 & 32 - i11 >> 31;
   i11 = (i8 << 64 - i11 | i9 >>> ((i11 - 32 | 0) >>> 0)) & 32 - i11 >> 31 | i9 << 32 - i11 & i11 - 33 >> 31;
   break;
  }
  if ((i1 | 0) != 0) {
   HEAP32[i1 >> 2] = i4 - 1 & i9;
   HEAP32[i1 + 4 >> 2] = 0;
  }
  if ((i4 | 0) == 1) {
   i10 = i8 | i8 & 0;
   i11 = i9 | 0 | 0;
   return (tempRet0 = i10, i11) | 0;
  } else {
   i11 = _llvm_cttz_i32(i4 | 0) | 0;
   i10 = i8 >>> (i11 >>> 0) | 0;
   i11 = i8 << 32 - i11 | i9 >>> (i11 >>> 0) | 0;
   return (tempRet0 = i10, i11) | 0;
  }
 } else {
  if ((i2 | 0) == 0) {
   if ((i1 | 0) != 0) {
    HEAP32[i1 >> 2] = (i8 >>> 0) % (i4 >>> 0);
    HEAP32[i1 + 4 >> 2] = 0;
   }
   i10 = 0;
   i11 = (i8 >>> 0) / (i4 >>> 0) >>> 0;
   return (tempRet0 = i10, i11) | 0;
  }
  if ((i9 | 0) == 0) {
   if ((i1 | 0) != 0) {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = (i8 >>> 0) % (i2 >>> 0);
   }
   i10 = 0;
   i11 = (i8 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i10, i11) | 0;
  }
  if ((i2 - 1 & i2 | 0) == 0) {
   if ((i1 | 0) != 0) {
    HEAP32[i1 >> 2] = i9 | 0;
    HEAP32[i1 + 4 >> 2] = i2 - 1 & i8 | i8 & 0;
   }
   i10 = 0;
   i11 = i8 >>> ((_llvm_cttz_i32(i2 | 0) | 0) >>> 0);
   return (tempRet0 = i10, i11) | 0;
  }
  i10 = (_llvm_ctlz_i32(i2 | 0) | 0) - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
  if (i10 >>> 0 <= 30) {
   i6 = i10 + 1 | 0;
   i3 = i8 << 31 - i10 | i9 >>> ((i10 + 1 | 0) >>> 0);
   i5 = i8 >>> ((i10 + 1 | 0) >>> 0);
   i7 = 0;
   i11 = i9 << 31 - i10;
   break;
  }
  if ((i1 | 0) == 0) {
   i10 = 0;
   i11 = 0;
   return (tempRet0 = i10, i11) | 0;
  }
  HEAP32[i1 >> 2] = i9 | 0;
  HEAP32[i1 + 4 >> 2] = i8 | i8 & 0;
  i10 = 0;
  i11 = 0;
  return (tempRet0 = i10, i11) | 0;
 } while (0);
 if ((i6 | 0) == 0) {
  i2 = i11;
  i10 = i7;
  i4 = 0;
  i7 = 0;
 } else {
  i9 = _i64Add(i4 | 0 | 0, i2 | i2 & 0, -1, -1) | 0;
  i8 = tempRet0;
  i10 = i7;
  i7 = 0;
  do {
   i15 = i11;
   i11 = i10 >>> 31 | i11 << 1;
   i10 = i7 | i10 << 1;
   i15 = i3 << 1 | i15 >>> 31 | 0;
   i14 = i3 >>> 31 | i5 << 1 | 0;
   _i64Subtract(i9, i8, i15, i14) | 0;
   i12 = tempRet0;
   i13 = i12 >> 31 | ((i12 | 0) < 0 ? -1 : 0) << 1;
   i7 = i13 & 1;
   i3 = _i64Subtract(i15, i14, i13 & (i4 | 0), (((i12 | 0) < 0 ? -1 : 0) >> 31 | ((i12 | 0) < 0 ? -1 : 0) << 1) & (i2 | i2 & 0)) | 0;
   i5 = tempRet0;
   i6 = i6 - 1 | 0;
  } while ((i6 | 0) != 0);
  i2 = i11;
  i4 = 0;
 }
 if ((i1 | 0) != 0) {
  HEAP32[i1 >> 2] = i3;
  HEAP32[i1 + 4 >> 2] = i5;
 }
 i14 = (i10 | 0) >>> 31 | i2 << 1 | (0 << 1 | i10 >>> 31) & 0 | i4;
 i15 = (i10 << 1 | 0 >>> 31) & -2 | i7;
 return (tempRet0 = i14, i15) | 0;
}
function __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i3, i6, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, d5 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, d16 = 0.0;
 i1 = STACKTOP;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  HEAP32[i3 >> 2] = i2;
  HEAP32[i2 + 32 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i6 + 40 >> 2] | 0;
 if ((i4 | 0) != 0) {
  d9 = +HEAPF32[i2 >> 2] + +HEAPF32[i2 + 16 >> 2];
  d7 = +HEAPF32[i2 + 4 >> 2] + +HEAPF32[i2 + 20 >> 2];
  d5 = +HEAPF32[i2 + 8 >> 2] + +HEAPF32[i2 + 24 >> 2];
  do {
   i15 = HEAP32[i6 + 36 >> 2] | 0;
   d13 = +Math_abs(+(d9 - (+HEAPF32[i15 >> 2] + +HEAPF32[i15 + 16 >> 2]))) + +Math_abs(+(d7 - (+HEAPF32[i15 + 4 >> 2] + +HEAPF32[i15 + 20 >> 2]))) + +Math_abs(+(d5 - (+HEAPF32[i15 + 8 >> 2] + +HEAPF32[i15 + 24 >> 2])));
   i6 = i6 + ((!(d13 < +Math_abs(+(d9 - (+HEAPF32[i4 >> 2] + +HEAPF32[i4 + 16 >> 2]))) + +Math_abs(+(d7 - (+HEAPF32[i4 + 4 >> 2] + +HEAPF32[i4 + 20 >> 2]))) + +Math_abs(+(d5 - (+HEAPF32[i4 + 8 >> 2] + +HEAPF32[i4 + 24 >> 2])))) & 1) << 2) + 36 | 0;
   i6 = HEAP32[i6 >> 2] | 0;
   i4 = HEAP32[i6 + 40 >> 2] | 0;
  } while ((i4 | 0) != 0);
 }
 i8 = i6 + 32 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 i15 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i15 | 0) == 0) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i15 = _malloc(63) | 0;
  if ((i15 | 0) != 0 ? (HEAP32[(i15 + 19 & -16) + -4 >> 2] = i15, (i15 + 19 & -16 | 0) != 0) : 0) {
   i12 = (i15 + 19 & -16) + 0 | 0;
   i14 = i12 + 44 | 0;
   do {
    HEAP32[i12 >> 2] = 0;
    i12 = i12 + 4 | 0;
   } while ((i12 | 0) < (i14 | 0));
   i15 = i15 + 19 & -16;
  } else i15 = 0;
 } else HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i15 + 32 >> 2] = i4;
 i12 = i15 + 36 | 0;
 HEAP32[i12 >> 2] = 0;
 i14 = i15 + 40 | 0;
 HEAP32[i14 >> 2] = 0;
 d16 = +HEAPF32[i2 >> 2];
 d13 = +HEAPF32[i6 >> 2];
 d13 = d16 < d13 ? d16 : d13;
 HEAPF32[i15 >> 2] = d13;
 d16 = +HEAPF32[i2 + 16 >> 2];
 d9 = +HEAPF32[i6 + 16 >> 2];
 d9 = d16 > d9 ? d16 : d9;
 HEAPF32[i15 + 16 >> 2] = d9;
 d16 = +HEAPF32[i2 + 4 >> 2];
 d11 = +HEAPF32[i6 + 4 >> 2];
 d11 = d16 < d11 ? d16 : d11;
 HEAPF32[i15 + 4 >> 2] = d11;
 d16 = +HEAPF32[i2 + 20 >> 2];
 d7 = +HEAPF32[i6 + 20 >> 2];
 d7 = d16 > d7 ? d16 : d7;
 HEAPF32[i15 + 20 >> 2] = d7;
 d16 = +HEAPF32[i2 + 8 >> 2];
 d10 = +HEAPF32[i6 + 8 >> 2];
 d10 = d16 < d10 ? d16 : d10;
 HEAPF32[i15 + 8 >> 2] = d10;
 d16 = +HEAPF32[i2 + 24 >> 2];
 d5 = +HEAPF32[i6 + 24 >> 2];
 d5 = d16 > d5 ? d16 : d5;
 HEAPF32[i15 + 24 >> 2] = d5;
 if ((i4 | 0) == 0) {
  HEAP32[i12 >> 2] = i6;
  HEAP32[i8 >> 2] = i15;
  HEAP32[i14 >> 2] = i2;
  HEAP32[i2 + 32 >> 2] = i15;
  HEAP32[i3 >> 2] = i15;
  STACKTOP = i1;
  return;
 }
 HEAP32[i4 + (((HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] | 0) == (i6 | 0) & 1) << 2) + 36 >> 2] = i15;
 HEAP32[i12 >> 2] = i6;
 HEAP32[i8 >> 2] = i15;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i2 + 32 >> 2] = i15;
 while (1) {
  i2 = i4 + 4 | 0;
  if (((((+HEAPF32[i4 >> 2] <= d13 ? +HEAPF32[i2 >> 2] <= d11 : 0) ? +HEAPF32[i4 + 8 >> 2] <= d10 : 0) ? +HEAPF32[i4 + 16 >> 2] >= d9 : 0) ? +HEAPF32[i4 + 20 >> 2] >= d7 : 0) ? +HEAPF32[i4 + 24 >> 2] >= d5 : 0) {
   i2 = 21;
   break;
  }
  i14 = HEAP32[i4 + 36 >> 2] | 0;
  i15 = HEAP32[i4 + 40 >> 2] | 0;
  d16 = +HEAPF32[i14 >> 2];
  d13 = +HEAPF32[i15 >> 2];
  d13 = d16 < d13 ? d16 : d13;
  HEAPF32[i4 >> 2] = d13;
  d16 = +HEAPF32[i14 + 16 >> 2];
  d9 = +HEAPF32[i15 + 16 >> 2];
  d9 = d16 > d9 ? d16 : d9;
  HEAPF32[i4 + 16 >> 2] = d9;
  d16 = +HEAPF32[i14 + 4 >> 2];
  d11 = +HEAPF32[i15 + 4 >> 2];
  d11 = d16 < d11 ? d16 : d11;
  HEAPF32[i2 >> 2] = d11;
  d16 = +HEAPF32[i14 + 20 >> 2];
  d7 = +HEAPF32[i15 + 20 >> 2];
  d7 = d16 > d7 ? d16 : d7;
  HEAPF32[i4 + 20 >> 2] = d7;
  d16 = +HEAPF32[i14 + 8 >> 2];
  d10 = +HEAPF32[i15 + 8 >> 2];
  d10 = d16 < d10 ? d16 : d10;
  HEAPF32[i4 + 8 >> 2] = d10;
  d16 = +HEAPF32[i14 + 24 >> 2];
  d5 = +HEAPF32[i15 + 24 >> 2];
  d5 = d16 > d5 ? d16 : d5;
  HEAPF32[i4 + 24 >> 2] = d5;
  i4 = HEAP32[i4 + 32 >> 2] | 0;
  if ((i4 | 0) == 0) {
   i2 = 21;
   break;
  }
 }
 if ((i2 | 0) == 21) {
  STACKTOP = i1;
  return;
 }
}
function __ZN24btConvexTriangleCallback15processTriangleEP9btVector3ii(i2, i5, i3, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 d9 = +HEAPF32[i5 >> 2];
 d7 = +HEAPF32[i5 + 16 >> 2];
 d12 = d9 < d7 ? d9 : d7;
 d8 = +HEAPF32[i5 + 32 >> 2];
 if ((d12 < d8 ? d12 : d8) > +HEAPF32[i2 + 28 >> 2]) {
  STACKTOP = i1;
  return;
 }
 i11 = d9 > d7 ? i5 : i5 + 16 | 0;
 if (+HEAPF32[(+HEAPF32[i11 >> 2] > d8 ? i11 : i5 + 32 | 0) >> 2] < +HEAPF32[i2 + 12 >> 2]) {
  STACKTOP = i1;
  return;
 }
 d7 = +HEAPF32[i5 + 8 >> 2];
 d8 = +HEAPF32[i5 + 24 >> 2];
 d12 = d7 < d8 ? d7 : d8;
 d9 = +HEAPF32[i5 + 40 >> 2];
 if ((d12 < d9 ? d12 : d9) > +HEAPF32[i2 + 36 >> 2]) {
  STACKTOP = i1;
  return;
 }
 i11 = d7 > d8 ? i5 + 8 | 0 : i5 + 24 | 0;
 if (+HEAPF32[(+HEAPF32[i11 >> 2] > d9 ? i11 : i5 + 40 | 0) >> 2] < +HEAPF32[i2 + 20 >> 2]) {
  STACKTOP = i1;
  return;
 }
 d9 = +HEAPF32[i5 + 4 >> 2];
 d7 = +HEAPF32[i5 + 20 >> 2];
 d12 = d9 < d7 ? d9 : d7;
 d8 = +HEAPF32[i5 + 36 >> 2];
 if ((d12 < d8 ? d12 : d8) > +HEAPF32[i2 + 32 >> 2]) {
  STACKTOP = i1;
  return;
 }
 i11 = d9 > d7 ? i5 + 4 | 0 : i5 + 20 | 0;
 if (+HEAPF32[(+HEAPF32[i11 >> 2] > d8 ? i11 : i5 + 36 | 0) >> 2] < +HEAPF32[i2 + 16 >> 2]) {
  STACKTOP = i1;
  return;
 }
 i6 = HEAP32[i2 + 48 >> 2] | 0;
 i10 = HEAP32[i2 + 4 >> 2] | 0;
 if ((HEAP32[(HEAP32[i10 + 4 >> 2] | 0) + 4 >> 2] | 0) >= 20) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i1 + 32 >> 2] = 0;
 HEAPF32[i1 + 36 >> 2] = 1.0;
 HEAPF32[i1 + 40 >> 2] = 1.0;
 HEAPF32[i1 + 44 >> 2] = 1.0;
 HEAPF32[i1 + 48 >> 2] = 0.0;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 16376;
 HEAP32[i1 + 28 >> 2] = 1;
 HEAP32[i1 + 80 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i1 + 100 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i1 + 104 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i1 + 108 >> 2] = HEAP32[i5 + 28 >> 2];
 HEAP32[i1 + 112 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i1 + 120 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i1 + 124 >> 2] = HEAP32[i5 + 44 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i2 + 56 >> 2];
 i13 = HEAP32[i2 + 8 >> 2] | 0;
 i11 = HEAP32[i13 + 8 >> 2] | 0;
 i5 = HEAP32[i13 + 12 >> 2] | 0;
 HEAP32[i1 >> 2] = i13;
 HEAP32[i1 + 4 >> 2] = i1 + 24;
 HEAP32[i1 + 8 >> 2] = i11;
 HEAP32[i1 + 12 >> 2] = i5;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 20 >> 2] = i4;
 i5 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 31](i6, i10, i1, HEAP32[i2 + 64 >> 2] | 0) | 0;
 i10 = HEAP32[i2 + 44 >> 2] | 0;
 i11 = HEAP32[i10 + 8 >> 2] | 0;
 if ((HEAP32[i11 + 8 >> 2] | 0) == (HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP32[i10 + 8 >> 2] = i1;
  i13 = HEAP32[i2 + 44 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] & 127](i13, i3, i4);
 } else {
  i11 = HEAP32[i10 + 12 >> 2] | 0;
  HEAP32[i10 + 12 >> 2] = i1;
  i13 = HEAP32[i2 + 44 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 127](i13, i3, i4);
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, HEAP32[i2 + 4 >> 2] | 0, i1, HEAP32[i2 + 52 >> 2] | 0, HEAP32[i2 + 44 >> 2] | 0);
 i3 = HEAP32[i2 + 44 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 + 8 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0)) HEAP32[i3 + 8 >> 2] = i11; else HEAP32[i3 + 12 >> 2] = i11;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i5);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2] & 127](i6, i5);
 HEAP32[i1 + 24 >> 2] = 15736;
 i2 = HEAP32[i1 + 76 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i2 >> 2] >> 2] & 511](i2);
 i2 = HEAP32[i1 + 76 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN23btDiscreteDynamicsWorld26calculateSimulationIslandsEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1728);
 i12 = HEAP32[i2 + 204 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] & 127](i12, i2, HEAP32[i2 + 24 >> 2] | 0);
 if ((HEAP32[i2 + 308 >> 2] | 0) > 0) {
  i5 = HEAP32[i2 + 316 >> 2] | 0;
  i6 = 0;
  do {
   i7 = HEAP32[i5 + (i6 << 2) >> 2] | 0;
   i8 = HEAP32[i7 + 740 >> 2] | 0;
   i7 = HEAP32[i7 + 744 >> 2] | 0;
   if (((i8 | 0) != 0 ? !((i7 | 0) == 0 ? 1 : (HEAP32[i8 + 204 >> 2] & 3 | 0) != 0) : 0) ? (HEAP32[i7 + 204 >> 2] & 3 | 0) == 0 : 0) {
    i9 = HEAP32[i8 + 208 >> 2] | 0;
    i8 = HEAP32[i7 + 208 >> 2] | 0;
    i7 = HEAP32[(HEAP32[i2 + 204 >> 2] | 0) + 16 >> 2] | 0;
    i10 = HEAP32[i7 + (i9 << 3) >> 2] | 0;
    if ((i10 | 0) != (i9 | 0)) {
     i11 = i7 + (i9 << 3) | 0;
     do {
      i9 = i7 + (i10 << 3) | 0;
      HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
      i9 = HEAP32[i9 >> 2] | 0;
      i11 = i7 + (i9 << 3) | 0;
      i10 = HEAP32[i11 >> 2] | 0;
     } while ((i9 | 0) != (i10 | 0));
    }
    i10 = HEAP32[i7 + (i8 << 3) >> 2] | 0;
    if ((i10 | 0) != (i8 | 0)) {
     i11 = i7 + (i8 << 3) | 0;
     do {
      i8 = i7 + (i10 << 3) | 0;
      HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
      i8 = HEAP32[i8 >> 2] | 0;
      i11 = i7 + (i8 << 3) | 0;
      i10 = HEAP32[i11 >> 2] | 0;
     } while ((i8 | 0) != (i10 | 0));
    }
    if ((i9 | 0) != (i8 | 0)) {
     HEAP32[i7 + (i9 << 3) >> 2] = i8;
     i12 = i7 + (i8 << 3) + 4 | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i7 + (i9 << 3) + 4 >> 2] | 0);
    }
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i2 + 308 >> 2] | 0));
 }
 i5 = HEAP32[i2 + 212 >> 2] | 0;
 if ((i5 | 0) > 0) {
  i7 = HEAP32[i2 + 220 >> 2] | 0;
  i6 = 0;
  do {
   i8 = HEAP32[i7 + (i6 << 2) >> 2] | 0;
   if ((((HEAP8[i8 + 20 >> 0] | 0) != 0 ? (i3 = HEAP32[i8 + 28 >> 2] | 0, i4 = HEAP32[i8 + 32 >> 2] | 0, (i3 | 0) != 0) : 0) ? !((i4 | 0) == 0 ? 1 : (HEAP32[i3 + 204 >> 2] & 3 | 0) != 0) : 0) ? (HEAP32[i4 + 204 >> 2] & 3 | 0) == 0 : 0) {
    i10 = HEAP32[i3 + 208 >> 2] | 0;
    i9 = HEAP32[i4 + 208 >> 2] | 0;
    i8 = HEAP32[(HEAP32[i2 + 204 >> 2] | 0) + 16 >> 2] | 0;
    i11 = HEAP32[i8 + (i10 << 3) >> 2] | 0;
    if ((i11 | 0) != (i10 | 0)) {
     i12 = i8 + (i10 << 3) | 0;
     do {
      i10 = i8 + (i11 << 3) | 0;
      HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
      i10 = HEAP32[i10 >> 2] | 0;
      i12 = i8 + (i10 << 3) | 0;
      i11 = HEAP32[i12 >> 2] | 0;
     } while ((i10 | 0) != (i11 | 0));
    }
    i11 = HEAP32[i8 + (i9 << 3) >> 2] | 0;
    if ((i11 | 0) != (i9 | 0)) {
     i12 = i8 + (i9 << 3) | 0;
     do {
      i9 = i8 + (i11 << 3) | 0;
      HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
      i9 = HEAP32[i9 >> 2] | 0;
      i12 = i8 + (i9 << 3) | 0;
      i11 = HEAP32[i12 >> 2] | 0;
     } while ((i9 | 0) != (i11 | 0));
    }
    if ((i10 | 0) != (i9 | 0)) {
     HEAP32[i8 + (i10 << 3) >> 2] = i9;
     i12 = i8 + (i9 << 3) + 4 | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i8 + (i10 << 3) + 4 >> 2] | 0);
    }
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i5 | 0));
 }
 i12 = HEAP32[i2 + 204 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 127](i12, i2);
 i2 = HEAP32[5022] | 0;
 i12 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i12;
 if ((i12 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i12 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i12 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN20btAxisSweep3InternalItE12destroyProxyEP17btBroadphaseProxyP12btDispatcher(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 108 >> 2] | 0;
 if ((i3 | 0) != 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3, HEAP32[i4 + 60 >> 2] | 0, i5);
 i3 = HEAP32[i4 + 12 >> 2] | 0;
 i4 = HEAP32[i1 + 60 >> 2] | 0;
 i14 = HEAP32[i1 + 92 >> 2] | 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 56 >> 2] & 127](i14) | 0)) {
  i14 = HEAP32[i1 + 92 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] & 127](i14, i4 + ((i3 & 65535) << 6) | 0, i5);
 }
 i5 = HEAPU16[i1 + 56 >> 1] | 0;
 i6 = HEAP32[i1 + 60 >> 2] | 0;
 HEAP16[i6 + 54 >> 1] = (HEAPU16[i6 + 54 >> 1] | 0) + 65534;
 HEAP16[i6 + 56 >> 1] = (HEAPU16[i6 + 56 >> 1] | 0) + 65534;
 HEAP16[i6 + 58 >> 1] = (HEAPU16[i6 + 58 >> 1] | 0) + 65534;
 i6 = 0;
 do {
  i8 = i1 + (i6 << 2) + 68 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  i11 = HEAPU16[i4 + ((i3 & 65535) << 6) + (i6 << 1) + 54 >> 1] | 0;
  HEAP16[i7 + (i11 << 2) >> 1] = HEAP16[i1 + 6 >> 1] | 0;
  i12 = HEAP16[i7 + (i11 + 1 << 2) + 2 >> 1] | 0;
  if (i12 << 16 >> 16 == 0) i11 = i7; else {
   i9 = (HEAP32[i1 + 60 >> 2] | 0) + ((HEAPU16[i7 + (i11 << 2) + 2 >> 1] | 0) << 6) + (i6 << 1) + 54 | 0;
   i10 = i7 + (i11 << 2) | 0;
   i11 = i7 + (i11 + 1 << 2) | 0;
   while (1) {
    i14 = HEAP16[i11 >> 1] | 0;
    if ((HEAPU16[i10 >> 1] | 0) < (i14 & 65535)) break;
    i13 = HEAP32[i1 + 60 >> 2] | 0;
    i12 = i12 & 65535;
    if ((i14 & 1) == 0) {
     i14 = i13 + (i12 << 6) + (i6 << 1) + 48 | 0;
     HEAP16[i14 >> 1] = (HEAP16[i14 >> 1] | 0) + -1 << 16 >> 16;
    } else {
     i14 = i13 + (i12 << 6) + (i6 << 1) + 54 | 0;
     HEAP16[i14 >> 1] = (HEAP16[i14 >> 1] | 0) + -1 << 16 >> 16;
    }
    HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
    i12 = HEAPU16[i10 >> 1] | HEAPU16[i10 + 2 >> 1] << 16;
    i14 = HEAPU16[i11 >> 1] | HEAPU16[i11 + 2 >> 1] << 16;
    HEAP16[i10 >> 1] = i14;
    HEAP16[i10 + 2 >> 1] = i14 >>> 16;
    HEAP16[i11 >> 1] = i12;
    HEAP16[i11 + 2 >> 1] = i12 >>> 16;
    i12 = HEAP16[i11 + 6 >> 1] | 0;
    if (i12 << 16 >> 16 == 0) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i11 = HEAP32[i8 >> 2] | 0;
  }
  i12 = HEAPU16[i4 + ((i3 & 65535) << 6) + (i6 << 1) + 48 >> 1] | 0;
  HEAP16[i7 + (i12 << 2) >> 1] = HEAP16[i1 + 6 >> 1] | 0;
  i10 = HEAP16[i11 + (i12 + 1 << 2) + 2 >> 1] | 0;
  L20 : do if (!(i10 << 16 >> 16 == 0)) {
   i8 = (HEAP32[i1 + 60 >> 2] | 0) + ((HEAPU16[i11 + (i12 << 2) + 2 >> 1] | 0) << 6) + (i6 << 1) + 48 | 0;
   i9 = i11 + (i12 << 2) | 0;
   i11 = i11 + (i12 + 1 << 2) | 0;
   while (1) {
    i12 = HEAP16[i11 >> 1] | 0;
    if ((HEAPU16[i9 >> 1] | 0) < (i12 & 65535)) break L20;
    i13 = HEAP32[i1 + 60 >> 2] | 0;
    i10 = i10 & 65535;
    if ((i12 & 1) == 0) {
     i14 = i13 + (i10 << 6) + (i6 << 1) + 48 | 0;
     HEAP16[i14 >> 1] = (HEAP16[i14 >> 1] | 0) + -1 << 16 >> 16;
    } else {
     i14 = i13 + (i10 << 6) + (i6 << 1) + 54 | 0;
     HEAP16[i14 >> 1] = (HEAP16[i14 >> 1] | 0) + -1 << 16 >> 16;
    }
    HEAP16[i8 >> 1] = (HEAP16[i8 >> 1] | 0) + 1 << 16 >> 16;
    i10 = HEAPU16[i9 >> 1] | HEAPU16[i9 + 2 >> 1] << 16;
    i14 = HEAPU16[i11 >> 1] | HEAPU16[i11 + 2 >> 1] << 16;
    HEAP16[i9 >> 1] = i14;
    HEAP16[i9 + 2 >> 1] = i14 >>> 16;
    HEAP16[i11 >> 1] = i10;
    HEAP16[i11 + 2 >> 1] = i10 >>> 16;
    i10 = HEAP16[i11 + 6 >> 1] | 0;
    if (i10 << 16 >> 16 == 0) break; else {
     i9 = i9 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
  } while (0);
  HEAP16[i7 + ((i5 << 1) + -1 << 2) + 2 >> 1] = 0;
  HEAP16[i7 + ((i5 << 1) + -1 << 2) >> 1] = HEAP16[i1 + 6 >> 1] | 0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != 3);
 HEAP16[(HEAP32[i1 + 60 >> 2] | 0) + ((i3 & 65535) << 6) + 48 >> 1] = HEAP16[i1 + 64 >> 1] | 0;
 HEAP16[i1 + 64 >> 1] = i3;
 HEAP16[i1 + 56 >> 1] = (HEAP16[i1 + 56 >> 1] | 0) + -1 << 16 >> 16;
 STACKTOP = i2;
 return;
}
function __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i1, i5, i7, i6, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i1 + 9288 >> 2] | 0;
 if ((i2 | 0) == 0) {
  HEAP32[i1 >> 2] = 5;
  i15 = 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 i15 = HEAP32[i2 + 48 >> 2] | 0;
 if ((i15 | 0) != 0) HEAP32[i15 + 44 >> 2] = HEAP32[i2 + 44 >> 2];
 i15 = HEAP32[i2 + 44 >> 2] | 0;
 if ((i15 | 0) != 0) HEAP32[i15 + 48 >> 2] = HEAP32[i2 + 48 >> 2];
 if ((HEAP32[i1 + 9288 >> 2] | 0) == (i2 | 0)) HEAP32[i1 + 9288 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 9292 >> 2] = (HEAP32[i1 + 9292 >> 2] | 0) + -1;
 HEAP32[i2 + 44 >> 2] = 0;
 HEAP32[i2 + 48 >> 2] = HEAP32[i1 + 9280 >> 2];
 i15 = HEAP32[i1 + 9280 >> 2] | 0;
 if ((i15 | 0) != 0) HEAP32[i15 + 44 >> 2] = i2;
 HEAP32[i1 + 9280 >> 2] = i2;
 HEAP32[i1 + 9284 >> 2] = (HEAP32[i1 + 9284 >> 2] | 0) + 1;
 HEAP8[i2 + 55 >> 0] = 0;
 HEAP32[i2 + 20 >> 2] = i5;
 HEAP32[i2 + 24 >> 2] = i7;
 HEAP32[i2 + 28 >> 2] = i6;
 d12 = +HEAPF32[i5 + 16 >> 2];
 d10 = +HEAPF32[i7 + 16 >> 2] - d12;
 d14 = +HEAPF32[i5 + 20 >> 2];
 d13 = +HEAPF32[i7 + 20 >> 2] - d14;
 d9 = +HEAPF32[i5 + 24 >> 2];
 d8 = +HEAPF32[i7 + 24 >> 2] - d9;
 d12 = +HEAPF32[i6 + 16 >> 2] - d12;
 d14 = +HEAPF32[i6 + 20 >> 2] - d14;
 d9 = +HEAPF32[i6 + 24 >> 2] - d9;
 HEAPF32[i2 >> 2] = d13 * d9 - d8 * d14;
 HEAPF32[i2 + 4 >> 2] = d8 * d12 - d10 * d9;
 HEAPF32[i2 + 8 >> 2] = d10 * d14 - d13 * d12;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 d11 = +Math_sqrt(+((d13 * d9 - d8 * d14) * (d13 * d9 - d8 * d14) + (d8 * d12 - d10 * d9) * (d8 * d12 - d10 * d9) + (d10 * d14 - d13 * d12) * (d10 * d14 - d13 * d12)));
 do if (d11 > 9999999747378752.0e-20) {
  if ((!(__ZN12gjkepa2_impl3EPA11getedgedistEPNS0_5sFaceEPNS_3GJK3sSVES5_Rf(d13 * d9 - d8 * d14, d8 * d12 - d10 * d9, d10 * d14 - d13 * d12, +HEAPF32[i5 + 16 >> 2], +HEAPF32[i5 + 20 >> 2], +HEAPF32[i5 + 24 >> 2], +HEAPF32[i7 + 16 >> 2], +HEAPF32[i7 + 20 >> 2], +HEAPF32[i7 + 24 >> 2], i2 + 16 | 0) | 0) ? !(__ZN12gjkepa2_impl3EPA11getedgedistEPNS0_5sFaceEPNS_3GJK3sSVES5_Rf(+HEAPF32[i2 >> 2], +HEAPF32[i2 + 4 >> 2], +HEAPF32[i2 + 8 >> 2], +HEAPF32[i7 + 16 >> 2], +HEAPF32[i7 + 20 >> 2], +HEAPF32[i7 + 24 >> 2], +HEAPF32[i6 + 16 >> 2], +HEAPF32[i6 + 20 >> 2], +HEAPF32[i6 + 24 >> 2], i2 + 16 | 0) | 0) : 0) ? !(__ZN12gjkepa2_impl3EPA11getedgedistEPNS0_5sFaceEPNS_3GJK3sSVES5_Rf(+HEAPF32[i2 >> 2], +HEAPF32[i2 + 4 >> 2], +HEAPF32[i2 + 8 >> 2], +HEAPF32[i6 + 16 >> 2], +HEAPF32[i6 + 20 >> 2], +HEAPF32[i6 + 24 >> 2], +HEAPF32[i5 + 16 >> 2], +HEAPF32[i5 + 20 >> 2], +HEAPF32[i5 + 24 >> 2], i2 + 16 | 0) | 0) : 0) HEAPF32[i2 + 16 >> 2] = (+HEAPF32[i5 + 16 >> 2] * +HEAPF32[i2 >> 2] + +HEAPF32[i5 + 20 >> 2] * +HEAPF32[i2 + 4 >> 2] + +HEAPF32[i5 + 24 >> 2] * +HEAPF32[i2 + 8 >> 2]) / d11;
  HEAPF32[i2 >> 2] = 1.0 / d11 * +HEAPF32[i2 >> 2];
  HEAPF32[i2 + 4 >> 2] = 1.0 / d11 * +HEAPF32[i2 + 4 >> 2];
  HEAPF32[i2 + 8 >> 2] = 1.0 / d11 * +HEAPF32[i2 + 8 >> 2];
  if (i4) {
   i15 = i2;
   STACKTOP = i3;
   return i15 | 0;
  }
  if (!(+HEAPF32[i2 + 16 >> 2] >= -9999999747378752.0e-21)) {
   HEAP32[i1 >> 2] = 3;
   break;
  } else {
   i15 = i2;
   STACKTOP = i3;
   return i15 | 0;
  }
 } else HEAP32[i1 >> 2] = 2; while (0);
 i4 = HEAP32[i2 + 48 >> 2] | 0;
 if ((i4 | 0) != 0) HEAP32[i4 + 44 >> 2] = HEAP32[i2 + 44 >> 2];
 i4 = HEAP32[i2 + 44 >> 2] | 0;
 if ((i4 | 0) != 0) HEAP32[i4 + 48 >> 2] = HEAP32[i2 + 48 >> 2];
 if ((HEAP32[i1 + 9280 >> 2] | 0) == (i2 | 0)) HEAP32[i1 + 9280 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 9284 >> 2] = (HEAP32[i1 + 9284 >> 2] | 0) + -1;
 HEAP32[i2 + 44 >> 2] = 0;
 HEAP32[i2 + 48 >> 2] = HEAP32[i1 + 9288 >> 2];
 i4 = HEAP32[i1 + 9288 >> 2] | 0;
 if ((i4 | 0) != 0) HEAP32[i4 + 44 >> 2] = i2;
 HEAP32[i1 + 9288 >> 2] = i2;
 HEAP32[i1 + 9292 >> 2] = (HEAP32[i1 + 9292 >> 2] | 0) + 1;
 i15 = 0;
 STACKTOP = i3;
 return i15 | 0;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallback28internalProcessTriangleIndexEPS2_ii(i7, i5, i2, i1) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0, i28 = 0;
 i3 = STACKTOP;
 d12 = +HEAPF32[i5 >> 2];
 d17 = d12 < 999999984306749400.0 ? d12 : 999999984306749400.0;
 d13 = +HEAPF32[i5 + 4 >> 2];
 d18 = d13 < 999999984306749400.0 ? d13 : 999999984306749400.0;
 d14 = +HEAPF32[i5 + 8 >> 2];
 d16 = d14 < 999999984306749400.0 ? d14 : 999999984306749400.0;
 d12 = d12 > -999999984306749400.0 ? d12 : -999999984306749400.0;
 d13 = d13 > -999999984306749400.0 ? d13 : -999999984306749400.0;
 d14 = d14 > -999999984306749400.0 ? d14 : -999999984306749400.0;
 d21 = +HEAPF32[i5 + 16 >> 2];
 d17 = d21 < d17 ? d21 : d17;
 d22 = +HEAPF32[i5 + 20 >> 2];
 d18 = d22 < d18 ? d22 : d18;
 d23 = +HEAPF32[i5 + 24 >> 2];
 d16 = d23 < d16 ? d23 : d16;
 d12 = d12 < d21 ? d21 : d12;
 d13 = d13 < d22 ? d22 : d13;
 d14 = d14 < d23 ? d23 : d14;
 d23 = +HEAPF32[i5 + 32 >> 2];
 d17 = d23 < d17 ? d23 : d17;
 d22 = +HEAPF32[i5 + 36 >> 2];
 d18 = d22 < d18 ? d22 : d18;
 d21 = +HEAPF32[i5 + 40 >> 2];
 d16 = d21 < d16 ? d21 : d16;
 d12 = d12 < d23 ? d23 : d12;
 d13 = d13 < d22 ? d22 : d13;
 d14 = d14 < d21 ? d21 : d14;
 if (d12 - d17 < .0020000000949949026) {
  d12 = d12 + .0010000000474974513;
  d17 = d17 + -.0010000000474974513;
 }
 if (d13 - d18 < .0020000000949949026) {
  d13 = d13 + .0010000000474974513;
  d18 = d18 + -.0010000000474974513;
 }
 if (d14 - d16 < .0020000000949949026) {
  d14 = d14 + .0010000000474974513;
  d16 = d16 + -.0010000000474974513;
 }
 i5 = HEAP32[i7 + 8 >> 2] | 0;
 d26 = +HEAPF32[i5 + 4 >> 2];
 d24 = +HEAPF32[i5 + 8 >> 2];
 d22 = +HEAPF32[i5 + 12 >> 2];
 d25 = +HEAPF32[i5 + 36 >> 2];
 d21 = +HEAPF32[i5 + 40 >> 2];
 d23 = +HEAPF32[i5 + 44 >> 2];
 i5 = ~~((d17 - d26) * d25) & 65534;
 i6 = ~~((d18 - d24) * d21) & 65534;
 i8 = ~~((d16 - d22) * d23) & 65534;
 i9 = (~~((d12 - d26) * d25 + 1.0) & 65535 | 1) & 65535;
 i10 = (~~((d13 - d24) * d21 + 1.0) & 65535 | 1) & 65535;
 i11 = (~~((d14 - d22) * d23 + 1.0) & 65535 | 1) & 65535;
 i7 = HEAP32[i7 + 4 >> 2] | 0;
 i20 = HEAP32[i7 + 4 >> 2] | 0;
 if ((i20 | 0) == (HEAP32[i7 + 8 >> 2] | 0) ? (i4 = (i20 | 0) == 0 ? 1 : i20 << 1, (i20 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i15 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i15 = _malloc((i4 << 4 | 3) + 16 | 0) | 0;
   if ((i15 | 0) == 0) i15 = 0; else {
    HEAP32[(i15 + 19 & -16) + -4 >> 2] = i15;
    i15 = i15 + 19 & -16;
   }
   i20 = HEAP32[i7 + 4 >> 2] | 0;
  }
  if ((i20 | 0) > 0) {
   i19 = 0;
   do {
    i27 = i15 + (i19 << 4) | 0;
    i28 = (HEAP32[i7 + 12 >> 2] | 0) + (i19 << 4) | 0;
    HEAP32[i27 + 0 >> 2] = HEAP32[i28 + 0 >> 2];
    HEAP32[i27 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
    HEAP32[i27 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
    HEAP32[i27 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
    i19 = i19 + 1 | 0;
   } while ((i19 | 0) != (i20 | 0));
  }
  i19 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i19 | 0) != 0) {
   if ((HEAP8[i7 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i19 + -4 >> 2] | 0);
   }
   HEAP32[i7 + 12 >> 2] = 0;
  }
  HEAP8[i7 + 16 >> 0] = 1;
  HEAP32[i7 + 12 >> 2] = i15;
  HEAP32[i7 + 8 >> 2] = i4;
  i20 = HEAP32[i7 + 4 >> 2] | 0;
 }
 i28 = HEAP32[i7 + 12 >> 2] | 0;
 HEAP16[i28 + (i20 << 4) >> 1] = i5;
 HEAP16[i28 + (i20 << 4) + 2 >> 1] = i6;
 HEAP16[i28 + (i20 << 4) + 4 >> 1] = i8;
 HEAP16[i28 + (i20 << 4) + 6 >> 1] = i9;
 HEAP16[i28 + (i20 << 4) + 8 >> 1] = i10;
 HEAP16[i28 + (i20 << 4) + 10 >> 1] = i11;
 HEAP32[i28 + (i20 << 4) + 12 >> 2] = i2 << 21 | i1;
 HEAP32[i7 + 4 >> 2] = (HEAP32[i7 + 4 >> 2] | 0) + 1;
 STACKTOP = i3;
 return;
}
function __ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_S3_PfRj(i2, i1, i18, i17, i15) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i16 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, i28 = 0, d29 = 0.0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 HEAP32[i16 + 64 >> 2] = i2;
 HEAP32[i16 + 68 >> 2] = i1;
 HEAP32[i16 + 72 >> 2] = i18;
 d12 = +HEAPF32[i2 >> 2];
 d6 = +HEAPF32[i1 >> 2];
 d13 = +HEAPF32[i2 + 4 >> 2];
 d8 = +HEAPF32[i1 + 4 >> 2];
 d14 = +HEAPF32[i2 + 8 >> 2];
 d10 = +HEAPF32[i1 + 8 >> 2];
 HEAPF32[i16 + 16 >> 2] = d12 - d6;
 HEAPF32[i16 + 20 >> 2] = d13 - d8;
 HEAPF32[i16 + 24 >> 2] = d14 - d10;
 HEAPF32[i16 + 28 >> 2] = 0.0;
 d7 = +HEAPF32[i18 >> 2];
 d9 = +HEAPF32[i18 + 4 >> 2];
 d11 = +HEAPF32[i18 + 8 >> 2];
 HEAPF32[i16 + 32 >> 2] = d6 - d7;
 HEAPF32[i16 + 36 >> 2] = d8 - d9;
 HEAPF32[i16 + 40 >> 2] = d10 - d11;
 HEAPF32[i16 + 44 >> 2] = 0.0;
 HEAPF32[i16 + 48 >> 2] = d7 - d12;
 HEAPF32[i16 + 52 >> 2] = d9 - d13;
 HEAPF32[i16 + 56 >> 2] = d11 - d14;
 HEAPF32[i16 + 60 >> 2] = 0.0;
 d4 = (d13 - d8) * (d10 - d11) - (d14 - d10) * (d8 - d9);
 d5 = (d14 - d10) * (d6 - d7) - (d10 - d11) * (d12 - d6);
 d3 = (d8 - d9) * (d12 - d6) - (d13 - d8) * (d6 - d7);
 if (!(d3 * d3 + (d4 * d4 + d5 * d5) > 0.0)) {
  d29 = -1.0;
  STACKTOP = i16;
  return +d29;
 }
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 d25 = d13 - d8;
 d27 = d14 - d10;
 d26 = d12 - d6;
 d21 = d12;
 d22 = d13;
 d24 = d14;
 i23 = i2;
 i28 = 0;
 d29 = -1.0;
 while (1) {
  if (d21 * (d3 * d25 - d5 * d27) + d22 * (d4 * d27 - d3 * d26) + (d5 * d26 - d4 * d25) * d24 > 0.0 ? (i19 = HEAP32[19552 + (i28 << 2) >> 2] | 0, d20 = +__ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_PfRj(i23, HEAP32[i16 + 64 + (i19 << 2) >> 2] | 0, i16, i16 + 8 | 0), d29 < 0.0 | d20 < d29) : 0) {
   i23 = HEAP32[i16 + 8 >> 2] | 0;
   HEAP32[i15 >> 2] = ((i23 & 1 | 0) == 0 ? 0 : 1 << i28) + ((i23 & 2 | 0) == 0 ? 0 : 1 << i19);
   HEAPF32[i17 + (i28 << 2) >> 2] = +HEAPF32[i16 >> 2];
   HEAPF32[i17 + (i19 << 2) >> 2] = +HEAPF32[i16 + 4 >> 2];
   HEAPF32[i17 + (HEAP32[19552 + (i19 << 2) >> 2] << 2) >> 2] = 0.0;
   d29 = d20;
  }
  i28 = i28 + 1 | 0;
  if ((i28 | 0) == 3) break;
  i23 = HEAP32[i16 + 64 + (i28 << 2) >> 2] | 0;
  d25 = +HEAPF32[i16 + 16 + (i28 << 4) + 4 >> 2];
  d27 = +HEAPF32[i16 + 16 + (i28 << 4) + 8 >> 2];
  d26 = +HEAPF32[i16 + 16 + (i28 << 4) >> 2];
  d21 = +HEAPF32[i23 >> 2];
  d22 = +HEAPF32[i23 + 4 >> 2];
  d24 = +HEAPF32[i23 + 8 >> 2];
 }
 if (!(d29 < 0.0)) {
  STACKTOP = i16;
  return +d29;
 }
 d26 = +Math_sqrt(+(d3 * d3 + (d4 * d4 + d5 * d5)));
 d29 = (d4 * +HEAPF32[i2 >> 2] + d5 * +HEAPF32[i2 + 4 >> 2] + d3 * +HEAPF32[i2 + 8 >> 2]) / (d3 * d3 + (d4 * d4 + d5 * d5));
 HEAP32[i15 >> 2] = 7;
 d24 = +HEAPF32[i1 >> 2] - d4 * d29;
 d22 = +HEAPF32[i1 + 4 >> 2] - d5 * d29;
 d27 = +HEAPF32[i1 + 8 >> 2] - d3 * d29;
 d27 = +Math_sqrt(+((d22 * (d6 - d7) - d24 * (d8 - d9)) * (d22 * (d6 - d7) - d24 * (d8 - d9)) + (((d8 - d9) * d27 - d22 * (d10 - d11)) * ((d8 - d9) * d27 - d22 * (d10 - d11)) + (d24 * (d10 - d11) - d27 * (d6 - d7)) * (d24 * (d10 - d11) - d27 * (d6 - d7))))) / d26;
 HEAPF32[i17 >> 2] = d27;
 d24 = +HEAPF32[i18 >> 2] - d4 * d29;
 d22 = +HEAPF32[i18 + 4 >> 2] - d5 * d29;
 d25 = +HEAPF32[i18 + 8 >> 2] - d3 * d29;
 d26 = +Math_sqrt(+((d22 * (d7 - d12) - d24 * (d9 - d13)) * (d22 * (d7 - d12) - d24 * (d9 - d13)) + (((d9 - d13) * d25 - d22 * (d11 - d14)) * ((d9 - d13) * d25 - d22 * (d11 - d14)) + (d24 * (d11 - d14) - d25 * (d7 - d12)) * (d24 * (d11 - d14) - d25 * (d7 - d12))))) / d26;
 HEAPF32[i17 + 4 >> 2] = d26;
 HEAPF32[i17 + 8 >> 2] = 1.0 - (d26 + d27);
 d29 = d3 * d29 * d3 * d29 + (d4 * d29 * d4 * d29 + d5 * d29 * d5 * d29);
 STACKTOP = i16;
 return +d29;
}
function __ZN20btPersistentManifold16addManifoldPointERK15btManifoldPointb(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, d4 = 0.0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0;
 i2 = STACKTOP;
 i5 = HEAP32[i1 + 748 >> 2] | 0;
 if ((i5 | 0) != 4) {
  HEAP32[i1 + 748 >> 2] = i5 + 1;
  i23 = i5;
  i9 = (i23 | 0) < 0;
  i23 = i9 ? 0 : i23;
  i9 = i1 + (i23 * 184 | 0) + 4 | 0;
  _memcpy(i9 | 0, i3 | 0, 184) | 0;
  STACKTOP = i2;
  return i23 | 0;
 }
 d4 = +HEAPF32[i3 + 80 >> 2];
 d22 = +HEAPF32[i1 + 84 >> 2];
 d21 = d22 < d4 ? d22 : d4;
 d20 = +HEAPF32[i1 + 268 >> 2];
 d19 = d20 < d21 ? d20 : d21;
 d18 = +HEAPF32[i1 + 452 >> 2];
 i9 = +HEAPF32[i1 + 636 >> 2] < (d18 < d19 ? d18 : d19);
 i23 = i9 ? 3 : d18 < d19 ? 2 : d20 < d21 ? 1 : (d22 < d4 ^ 1) << 31 >> 31;
 d4 = +HEAPF32[i3 >> 2];
 if ((i23 | 0) != 0) {
  d10 = +HEAPF32[i1 + 188 >> 2];
  d13 = +HEAPF32[i3 + 4 >> 2];
  d11 = +HEAPF32[i1 + 192 >> 2];
  d8 = +HEAPF32[i3 + 8 >> 2];
  d12 = +HEAPF32[i1 + 196 >> 2];
  d18 = +HEAPF32[i1 + 556 >> 2];
  d17 = +HEAPF32[i1 + 372 >> 2];
  d20 = +HEAPF32[i1 + 560 >> 2];
  d19 = +HEAPF32[i1 + 376 >> 2];
  d14 = +HEAPF32[i1 + 564 >> 2];
  d16 = +HEAPF32[i1 + 380 >> 2];
  d6 = ((d4 - d10) * (d20 - d19) - (d13 - d11) * (d18 - d17)) * ((d4 - d10) * (d20 - d19) - (d13 - d11) * (d18 - d17)) + (((d13 - d11) * (d14 - d16) - (d8 - d12) * (d20 - d19)) * ((d13 - d11) * (d14 - d16) - (d8 - d12) * (d20 - d19)) + ((d8 - d12) * (d18 - d17) - (d4 - d10) * (d14 - d16)) * ((d8 - d12) * (d18 - d17) - (d4 - d10) * (d14 - d16)));
  if ((i23 | 0) == 1) {
   d7 = +HEAPF32[i1 + 12 >> 2];
   d22 = d14;
   d14 = 0.0;
   d15 = +HEAPF32[i1 + 4 >> 2];
   d21 = +HEAPF32[i1 + 8 >> 2];
   i5 = 7;
  } else {
   d22 = d14;
   i5 = 6;
  }
 } else {
  d10 = +HEAPF32[i1 + 188 >> 2];
  d11 = +HEAPF32[i1 + 192 >> 2];
  d12 = +HEAPF32[i1 + 196 >> 2];
  d6 = 0.0;
  d13 = +HEAPF32[i3 + 4 >> 2];
  d8 = +HEAPF32[i3 + 8 >> 2];
  d17 = +HEAPF32[i1 + 372 >> 2];
  d18 = +HEAPF32[i1 + 556 >> 2];
  d19 = +HEAPF32[i1 + 376 >> 2];
  d20 = +HEAPF32[i1 + 560 >> 2];
  d16 = +HEAPF32[i1 + 380 >> 2];
  d22 = +HEAPF32[i1 + 564 >> 2];
  i5 = 6;
 }
 if ((i5 | 0) == 6) {
  d15 = +HEAPF32[i1 + 4 >> 2];
  d21 = +HEAPF32[i1 + 8 >> 2];
  d27 = d13 - d21;
  d7 = +HEAPF32[i1 + 12 >> 2];
  d25 = d8 - d7;
  d24 = d18 - d17;
  d26 = d20 - d19;
  d14 = d22 - d16;
  d14 = ((d4 - d15) * d26 - d27 * d24) * ((d4 - d15) * d26 - d27 * d24) + ((d27 * d14 - d25 * d26) * (d27 * d14 - d25 * d26) + (d25 * d24 - (d4 - d15) * d14) * (d25 * d24 - (d4 - d15) * d14));
  if ((i23 | 0) == 2) {
   d18 = d21;
   d20 = 0.0;
   i5 = 8;
  } else i5 = 7;
 }
 if ((i5 | 0) == 7) {
  d27 = d4 - d15;
  d28 = d13 - d21;
  d25 = d8 - d7;
  d26 = d18 - d10;
  d24 = d20 - d11;
  d20 = d22 - d12;
  d20 = (d27 * d24 - d28 * d26) * (d27 * d24 - d28 * d26) + ((d28 * d20 - d25 * d24) * (d28 * d20 - d25 * d24) + (d25 * d26 - d27 * d20) * (d25 * d26 - d27 * d20));
  if (i9) d4 = 0.0; else {
   d18 = d21;
   i5 = 8;
  }
 }
 if ((i5 | 0) == 8) {
  d28 = d4 - d15;
  d24 = d13 - d18;
  d26 = d8 - d7;
  d27 = d17 - d10;
  d25 = d19 - d11;
  d4 = d16 - d12;
  d4 = (d28 * d25 - d24 * d27) * (d28 * d25 - d24 * d27) + ((d24 * d4 - d26 * d25) * (d24 * d4 - d26 * d25) + (d26 * d27 - d28 * d4) * (d26 * d27 - d28 * d4));
 }
 d28 = +Math_abs(+d6);
 d26 = +Math_abs(+d14);
 d24 = +Math_abs(+d20);
 d22 = +Math_abs(+d4);
 d27 = d28 > -999999984306749400.0 ? d28 : -999999984306749400.0;
 d25 = d26 > d27 ? d26 : d27;
 i23 = d22 > (d24 > d25 ? d24 : d25) ? 3 : d24 > d25 ? 2 : d26 > d27 ? 1 : (d28 > -999999984306749400.0 ^ 1) << 31 >> 31;
 i9 = (i23 | 0) < 0;
 i23 = i9 ? 0 : i23;
 i9 = i1 + (i23 * 184 | 0) + 4 | 0;
 _memcpy(i9 | 0, i3 | 0, 184) | 0;
 STACKTOP = i2;
 return i23 | 0;
}
function __ZN23btPoint2PointConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i2 = STACKTOP;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 i3 = HEAP32[i4 + 8 >> 2] | 0;
 HEAPF32[i3 >> 2] = 1.0;
 i7 = HEAP32[i4 + 24 >> 2] | 0;
 HEAPF32[i3 + (i7 + 1 << 2) >> 2] = 1.0;
 HEAPF32[i3 + ((i7 << 1) + 2 << 2) >> 2] = 1.0;
 d11 = +HEAPF32[i1 + 300 >> 2];
 d16 = +HEAPF32[i1 + 304 >> 2];
 d6 = +HEAPF32[i1 + 308 >> 2];
 d14 = +HEAPF32[i9 + 4 >> 2] * d11 + +HEAPF32[i9 + 8 >> 2] * d16 + +HEAPF32[i9 + 12 >> 2] * d6;
 d12 = d11 * +HEAPF32[i9 + 20 >> 2] + d16 * +HEAPF32[i9 + 24 >> 2] + d6 * +HEAPF32[i9 + 28 >> 2];
 d6 = d11 * +HEAPF32[i9 + 36 >> 2] + d16 * +HEAPF32[i9 + 40 >> 2] + d6 * +HEAPF32[i9 + 44 >> 2];
 i3 = HEAP32[i4 + 12 >> 2] | 0;
 HEAPF32[i3 >> 2] = 0.0;
 HEAPF32[i3 + 4 >> 2] = d6;
 HEAPF32[i3 + 8 >> 2] = -d12;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 HEAPF32[i3 + (i7 << 2) >> 2] = -d6;
 HEAPF32[i3 + (i7 + 1 << 2) >> 2] = 0.0;
 HEAPF32[i3 + (i7 + 2 << 2) >> 2] = d14;
 HEAPF32[i3 + (i7 + 3 << 2) >> 2] = 0.0;
 HEAPF32[i3 + (i7 << 1 << 2) >> 2] = d12;
 HEAPF32[i3 + ((i7 << 1 | 1) << 2) >> 2] = -d14;
 HEAPF32[i3 + ((i7 << 1) + 2 << 2) >> 2] = 0.0;
 HEAPF32[i3 + ((i7 << 1) + 3 << 2) >> 2] = 0.0;
 i3 = HEAP32[i4 + 16 >> 2] | 0;
 HEAPF32[i3 >> 2] = -1.0;
 HEAPF32[i3 + (i7 + 1 << 2) >> 2] = -1.0;
 HEAPF32[i3 + ((i7 << 1) + 2 << 2) >> 2] = -1.0;
 d16 = +HEAPF32[i1 + 316 >> 2];
 d11 = +HEAPF32[i1 + 320 >> 2];
 d5 = +HEAPF32[i1 + 324 >> 2];
 d15 = +HEAPF32[i10 + 4 >> 2] * d16 + +HEAPF32[i10 + 8 >> 2] * d11 + +HEAPF32[i10 + 12 >> 2] * d5;
 d13 = d16 * +HEAPF32[i10 + 20 >> 2] + d11 * +HEAPF32[i10 + 24 >> 2] + d5 * +HEAPF32[i10 + 28 >> 2];
 d5 = d16 * +HEAPF32[i10 + 36 >> 2] + d11 * +HEAPF32[i10 + 40 >> 2] + d5 * +HEAPF32[i10 + 44 >> 2];
 i3 = HEAP32[i4 + 20 >> 2] | 0;
 HEAPF32[i3 >> 2] = 0.0;
 HEAPF32[i3 + 4 >> 2] = -d5;
 HEAPF32[i3 + 8 >> 2] = d13;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 HEAPF32[i3 + (i7 << 2) >> 2] = d5;
 HEAPF32[i3 + (i7 + 1 << 2) >> 2] = 0.0;
 HEAPF32[i3 + (i7 + 2 << 2) >> 2] = -d15;
 HEAPF32[i3 + (i7 + 3 << 2) >> 2] = 0.0;
 HEAPF32[i3 + (i7 << 1 << 2) >> 2] = -d13;
 HEAPF32[i3 + ((i7 << 1 | 1) << 2) >> 2] = d15;
 HEAPF32[i3 + ((i7 << 1) + 2 << 2) >> 2] = 0.0;
 HEAPF32[i3 + ((i7 << 1) + 3 << 2) >> 2] = 0.0;
 i7 = HEAP32[i1 + 332 >> 2] | 0;
 d11 = +HEAPF32[((i7 & 1 | 0) == 0 ? i4 + 4 | 0 : i1 + 336 | 0) >> 2] * +HEAPF32[i4 >> 2];
 i3 = HEAP32[i4 + 24 >> 2] | 0;
 i8 = HEAP32[i4 + 28 >> 2] | 0;
 HEAPF32[i8 >> 2] = d11 * (d15 + +HEAPF32[i10 + 52 >> 2] - d14 - +HEAPF32[i9 + 52 >> 2]);
 HEAPF32[i8 + (i3 << 2) >> 2] = d11 * (d13 + +HEAPF32[i10 + 56 >> 2] - d12 - +HEAPF32[i9 + 56 >> 2]);
 HEAPF32[i8 + (i3 << 1 << 2) >> 2] = d11 * (d5 + +HEAPF32[i10 + 60 >> 2] - d6 - +HEAPF32[i9 + 60 >> 2]);
 if ((i7 & 2 | 0) != 0) {
  i10 = HEAP32[i4 + 32 >> 2] | 0;
  HEAPF32[i10 >> 2] = +HEAPF32[i1 + 340 >> 2];
  HEAPF32[i10 + (i3 << 2) >> 2] = +HEAPF32[i1 + 340 >> 2];
  HEAPF32[i10 + (i3 << 1 << 2) >> 2] = +HEAPF32[i1 + 340 >> 2];
 }
 d5 = +HEAPF32[i1 + 356 >> 2];
 if (d5 > 0.0) {
  HEAPF32[HEAP32[i4 + 36 >> 2] >> 2] = -d5;
  HEAPF32[HEAP32[i4 + 40 >> 2] >> 2] = d5;
  d6 = +HEAPF32[i1 + 356 >> 2];
 } else d6 = d5;
 if (d6 > 0.0) {
  HEAPF32[(HEAP32[i4 + 36 >> 2] | 0) + (i3 << 2) >> 2] = -d5;
  HEAPF32[(HEAP32[i4 + 40 >> 2] | 0) + (i3 << 2) >> 2] = d5;
  d6 = +HEAPF32[i1 + 356 >> 2];
 }
 if (!(d6 > 0.0)) {
  i10 = i1 + 352 | 0;
  d16 = +HEAPF32[i10 >> 2];
  i10 = i4 + 52 | 0;
  HEAPF32[i10 >> 2] = d16;
  STACKTOP = i2;
  return;
 }
 HEAPF32[(HEAP32[i4 + 36 >> 2] | 0) + (i3 << 1 << 2) >> 2] = -d5;
 HEAPF32[(HEAP32[i4 + 40 >> 2] | 0) + (i3 << 1 << 2) >> 2] = d5;
 i10 = i1 + 352 | 0;
 d16 = +HEAPF32[i10 >> 2];
 i10 = i4 + 52 | 0;
 HEAPF32[i10 >> 2] = d16;
 STACKTOP = i2;
 return;
}
function __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0;
 i2 = STACKTOP;
 i5 = HEAP32[i1 + 748 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 do {
  i5 = i5 + -1 | 0;
  d13 = +HEAPF32[i1 + (i5 * 184 | 0) + 4 >> 2];
  d14 = +HEAPF32[i1 + (i5 * 184 | 0) + 8 >> 2];
  d6 = +HEAPF32[i1 + (i5 * 184 | 0) + 12 >> 2];
  d12 = d13 * +HEAPF32[i3 >> 2] + d14 * +HEAPF32[i3 + 4 >> 2] + d6 * +HEAPF32[i3 + 8 >> 2] + +HEAPF32[i3 + 48 >> 2];
  d10 = d13 * +HEAPF32[i3 + 16 >> 2] + d14 * +HEAPF32[i3 + 20 >> 2] + d6 * +HEAPF32[i3 + 24 >> 2] + +HEAPF32[i3 + 52 >> 2];
  d6 = d13 * +HEAPF32[i3 + 32 >> 2] + d14 * +HEAPF32[i3 + 36 >> 2] + d6 * +HEAPF32[i3 + 40 >> 2] + +HEAPF32[i3 + 56 >> 2];
  HEAPF32[i1 + (i5 * 184 | 0) + 52 >> 2] = d12;
  HEAPF32[i1 + (i5 * 184 | 0) + 56 >> 2] = d10;
  HEAPF32[i1 + (i5 * 184 | 0) + 60 >> 2] = d6;
  HEAPF32[i1 + (i5 * 184 | 0) + 64 >> 2] = 0.0;
  d14 = +HEAPF32[i1 + (i5 * 184 | 0) + 20 >> 2];
  d13 = +HEAPF32[i1 + (i5 * 184 | 0) + 24 >> 2];
  d7 = +HEAPF32[i1 + (i5 * 184 | 0) + 28 >> 2];
  d11 = d14 * +HEAPF32[i4 >> 2] + d13 * +HEAPF32[i4 + 4 >> 2] + d7 * +HEAPF32[i4 + 8 >> 2] + +HEAPF32[i4 + 48 >> 2];
  d9 = d14 * +HEAPF32[i4 + 16 >> 2] + d13 * +HEAPF32[i4 + 20 >> 2] + d7 * +HEAPF32[i4 + 24 >> 2] + +HEAPF32[i4 + 52 >> 2];
  d7 = d14 * +HEAPF32[i4 + 32 >> 2] + d13 * +HEAPF32[i4 + 36 >> 2] + d7 * +HEAPF32[i4 + 40 >> 2] + +HEAPF32[i4 + 56 >> 2];
  HEAPF32[i1 + (i5 * 184 | 0) + 36 >> 2] = d11;
  HEAPF32[i1 + (i5 * 184 | 0) + 40 >> 2] = d9;
  HEAPF32[i1 + (i5 * 184 | 0) + 44 >> 2] = d7;
  HEAPF32[i1 + (i5 * 184 | 0) + 48 >> 2] = 0.0;
  HEAPF32[i1 + (i5 * 184 | 0) + 84 >> 2] = (d12 - d11) * +HEAPF32[i1 + (i5 * 184 | 0) + 68 >> 2] + (d10 - d9) * +HEAPF32[i1 + (i5 * 184 | 0) + 72 >> 2] + (d6 - d7) * +HEAPF32[i1 + (i5 * 184 | 0) + 76 >> 2];
  i8 = i1 + (i5 * 184 | 0) + 152 | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 } while ((i5 | 0) > 0);
 i3 = HEAP32[i1 + 748 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i3;
 do {
  i3 = i3 + -1 | 0;
  i5 = i1 + (i3 * 184 | 0) + 4 | 0;
  d7 = +HEAPF32[i1 + (i3 * 184 | 0) + 84 >> 2];
  d6 = +HEAPF32[i1 + 752 >> 2];
  if (d7 <= d6) {
   d12 = +HEAPF32[i1 + (i3 * 184 | 0) + 36 >> 2] - (+HEAPF32[i1 + (i3 * 184 | 0) + 52 >> 2] - +HEAPF32[i1 + (i3 * 184 | 0) + 68 >> 2] * d7);
   d13 = +HEAPF32[i1 + (i3 * 184 | 0) + 40 >> 2] - (+HEAPF32[i1 + (i3 * 184 | 0) + 56 >> 2] - d7 * +HEAPF32[i1 + (i3 * 184 | 0) + 72 >> 2]);
   d14 = +HEAPF32[i1 + (i3 * 184 | 0) + 44 >> 2] - (+HEAPF32[i1 + (i3 * 184 | 0) + 60 >> 2] - d7 * +HEAPF32[i1 + (i3 * 184 | 0) + 76 >> 2]);
   if (d12 * d12 + d13 * d13 + d14 * d14 > d6 * d6) {
    i8 = i4 + -1 | 0;
    if ((i8 | 0) != (i3 | 0)) {
     _memcpy(i5 | 0, i1 + (i8 * 184 | 0) + 4 | 0, 184) | 0;
     HEAP32[i1 + (i8 * 184 | 0) + 116 >> 2] = 0;
     HEAPF32[i1 + (i8 * 184 | 0) + 124 >> 2] = 0.0;
     HEAP8[i1 + (i8 * 184 | 0) + 120 >> 0] = 0;
     HEAPF32[i1 + (i8 * 184 | 0) + 128 >> 2] = 0.0;
     HEAPF32[i1 + (i8 * 184 | 0) + 132 >> 2] = 0.0;
     HEAP32[i1 + (i8 * 184 | 0) + 152 >> 2] = 0;
     i4 = HEAP32[i1 + 748 >> 2] | 0;
    }
    i4 = i4 + -1 | 0;
    HEAP32[i1 + 748 >> 2] = i4;
   }
  } else {
   i8 = i4 + -1 | 0;
   if ((i8 | 0) != (i3 | 0)) {
    _memcpy(i5 | 0, i1 + (i8 * 184 | 0) + 4 | 0, 184) | 0;
    HEAP32[i1 + (i8 * 184 | 0) + 116 >> 2] = 0;
    HEAPF32[i1 + (i8 * 184 | 0) + 124 >> 2] = 0.0;
    HEAP8[i1 + (i8 * 184 | 0) + 120 >> 0] = 0;
    HEAPF32[i1 + (i8 * 184 | 0) + 128 >> 2] = 0.0;
    HEAPF32[i1 + (i8 * 184 | 0) + 132 >> 2] = 0.0;
    HEAP32[i1 + (i8 * 184 | 0) + 152 >> 2] = 0;
    i4 = HEAP32[i1 + 748 >> 2] | 0;
   }
   i4 = i4 + -1 | 0;
   HEAP32[i1 + 748 >> 2] = i4;
  }
 } while ((i3 | 0) > 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btSliderConstraint_btSliderConstraint_5(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i7 = _malloc(1147) | 0;
 if ((i7 | 0) == 0) i7 = 0; else {
  HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
  i7 = i7 + 19 & -16;
 }
 HEAP32[i7 + 4 >> 2] = 7;
 HEAP32[i7 + 8 >> 2] = -1;
 HEAP32[i7 + 12 >> 2] = -1;
 HEAPF32[i7 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i7 + 20 >> 0] = 1;
 HEAP8[i7 + 21 >> 0] = 0;
 HEAP32[i7 + 24 >> 2] = -1;
 i8 = i7 + 28 | 0;
 HEAP32[i8 >> 2] = i1;
 i1 = i7 + 32 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAPF32[i7 + 36 >> 2] = 0.0;
 HEAPF32[i7 + 40 >> 2] = .30000001192092896;
 HEAP32[i7 + 44 >> 2] = 0;
 HEAP32[i7 >> 2] = 4264;
 HEAP8[i7 + 48 >> 0] = 0;
 i3 = i7 + 52 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i3 = i7 + 68 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 28 >> 2];
 i3 = i7 + 84 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 44 >> 2];
 i3 = i7 + 100 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 60 >> 2];
 i4 = i7 + 116 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i4 = i7 + 132 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 28 >> 2];
 i4 = i7 + 148 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 44 >> 2];
 i4 = i7 + 164 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 52 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 56 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAP8[i7 + 180 >> 0] = i6 & 1;
 HEAPF32[i7 + 184 >> 2] = 1.0;
 HEAPF32[i7 + 188 >> 2] = -1.0;
 HEAPF32[i7 + 192 >> 2] = 0.0;
 HEAPF32[i7 + 196 >> 2] = 0.0;
 HEAPF32[i7 + 200 >> 2] = 1.0;
 HEAPF32[i7 + 204 >> 2] = .699999988079071;
 HEAPF32[i7 + 208 >> 2] = 0.0;
 HEAPF32[i7 + 212 >> 2] = 0.0;
 HEAPF32[i7 + 216 >> 2] = 1.0;
 HEAPF32[i7 + 220 >> 2] = .699999988079071;
 HEAPF32[i7 + 224 >> 2] = 0.0;
 HEAPF32[i7 + 228 >> 2] = 0.0;
 HEAPF32[i7 + 264 >> 2] = 1.0;
 HEAPF32[i7 + 268 >> 2] = .699999988079071;
 HEAPF32[i7 + 272 >> 2] = 1.0;
 HEAPF32[i7 + 276 >> 2] = 0.0;
 HEAPF32[i7 + 280 >> 2] = 1.0;
 HEAPF32[i7 + 284 >> 2] = .699999988079071;
 HEAPF32[i7 + 288 >> 2] = 1.0;
 HEAPF32[i7 + 292 >> 2] = 0.0;
 HEAPF32[i7 + 232 >> 2] = 1.0;
 HEAPF32[i7 + 236 >> 2] = .699999988079071;
 HEAPF32[i7 + 240 >> 2] = 1.0;
 HEAPF32[i7 + 244 >> 2] = 0.0;
 HEAPF32[i7 + 248 >> 2] = 1.0;
 HEAPF32[i7 + 252 >> 2] = .699999988079071;
 HEAPF32[i7 + 256 >> 2] = 1.0;
 HEAPF32[i7 + 260 >> 2] = 0.0;
 HEAP8[i7 + 1096 >> 0] = 0;
 i5 = i7 + 1100 | 0;
 HEAPF32[i7 + 1116 >> 2] = 0.0;
 HEAPF32[i7 + 1120 >> 2] = 0.0;
 HEAPF32[i7 + 1124 >> 2] = 0.0;
 HEAP32[i7 + 300 >> 2] = 0;
 i6 = i7 + 49 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP8[i5 + 12 >> 0] = 0;
 HEAP8[i6 >> 0] = 1;
 __ZN18btSliderConstraint19calculateTransformsERK11btTransformS2_(i7, (HEAP32[i8 >> 2] | 0) + 4 | 0, (HEAP32[i1 >> 2] | 0) + 4 | 0);
 STACKTOP = i2;
 return i7 | 0;
}
function __ZN21btCollisionDispatcher14getNewManifoldEPK17btCollisionObjectS2_(i1, i5, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, d11 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[1698] = (HEAP32[1698] | 0) + 1;
 if ((HEAP32[i1 + 4 >> 2] & 2 | 0) == 0) i4 = 15720; else {
  i4 = HEAP32[i5 + 192 >> 2] | 0;
  d7 = +FUNCTION_TABLE_did[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 1](i4, .019999999552965164);
  HEAPF32[i2 + 4 >> 2] = d7;
  i4 = HEAP32[i6 + 192 >> 2] | 0;
  d8 = +FUNCTION_TABLE_did[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 1](i4, .019999999552965164);
  HEAPF32[i2 >> 2] = d8;
  i4 = d7 < d8 ? i2 + 4 | 0 : i2;
 }
 d8 = +HEAPF32[i4 >> 2];
 d11 = +HEAPF32[i5 + 184 >> 2];
 d7 = +HEAPF32[i6 + 184 >> 2];
 d7 = d11 < d7 ? d11 : d7;
 i9 = HEAP32[i1 + 68 >> 2] | 0;
 i4 = HEAP32[i9 + 8 >> 2] | 0;
 if ((i4 | 0) == 0) {
  if ((HEAP32[i1 + 4 >> 2] & 4 | 0) != 0) {
   i10 = 0;
   STACKTOP = i2;
   return i10 | 0;
  }
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i4 = _malloc(791) | 0;
  if ((i4 | 0) == 0) i4 = 0; else {
   HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
   i4 = i4 + 19 & -16;
  }
 } else {
  i10 = HEAP32[i9 + 12 >> 2] | 0;
  HEAP32[i9 + 12 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i9 + 8 >> 2] = i4 + -1;
  i4 = i10;
 }
 HEAP32[i4 >> 2] = 1025;
 HEAP32[i4 + 116 >> 2] = 0;
 HEAP8[i4 + 120 >> 0] = 0;
 i10 = i4 + 124 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i10 + 28 >> 2] = 0;
 HEAP32[i4 + 300 >> 2] = 0;
 HEAP8[i4 + 304 >> 0] = 0;
 i10 = i4 + 308 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i10 + 28 >> 2] = 0;
 HEAP32[i4 + 484 >> 2] = 0;
 HEAP8[i4 + 488 >> 0] = 0;
 i10 = i4 + 492 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i10 + 28 >> 2] = 0;
 HEAP32[i4 + 668 >> 2] = 0;
 HEAP8[i4 + 672 >> 0] = 0;
 i10 = i4 + 676 | 0;
 HEAP32[i10 + 0 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 24 >> 2] = 0;
 HEAP32[i10 + 28 >> 2] = 0;
 HEAP32[i4 + 740 >> 2] = i5;
 HEAP32[i4 + 744 >> 2] = i6;
 HEAP32[i4 + 748 >> 2] = 0;
 HEAPF32[i4 + 752 >> 2] = d8;
 HEAPF32[i4 + 756 >> 2] = d7;
 HEAP32[i4 + 768 >> 2] = HEAP32[i1 + 12 >> 2];
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (i3 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i3 | 0)) : 0) {
  if ((i3 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i3 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 12 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i10 = 0;
   do {
    i9 = i5 + (i10 << 2) | 0;
    if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + (i10 << 2) >> 2];
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i6 | 0));
  }
  i9 = HEAP32[i1 + 20 >> 2] | 0;
  if ((i9 | 0) != 0) {
   if ((HEAP8[i1 + 24 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i9 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 12 >> 2] | 0;
   }
   HEAP32[i1 + 20 >> 2] = 0;
  }
  HEAP8[i1 + 24 >> 0] = 1;
  HEAP32[i1 + 20 >> 2] = i5;
  HEAP32[i1 + 16 >> 2] = i3;
 }
 i3 = (HEAP32[i1 + 20 >> 2] | 0) + (i6 << 2) | 0;
 if ((i3 | 0) != 0) HEAP32[i3 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = i6 + 1;
 i10 = i4;
 STACKTOP = i2;
 return i10 | 0;
}
function __ZN20btAlignedObjectArrayI13GrahamVector3E17quickSortInternalI18btAngleCompareFuncEEvRKT_ii(i2, i8, i9, i10) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = HEAP32[i2 + 12 >> 2] | 0;
 d3 = +HEAPF32[i11 + (((i10 + i9 | 0) / 2 | 0) * 24 | 0) >> 2];
 d4 = +HEAPF32[i11 + (((i10 + i9 | 0) / 2 | 0) * 24 | 0) + 4 >> 2];
 d5 = +HEAPF32[i11 + (((i10 + i9 | 0) / 2 | 0) * 24 | 0) + 8 >> 2];
 d7 = +HEAPF32[i11 + (((i10 + i9 | 0) / 2 | 0) * 24 | 0) + 16 >> 2];
 i6 = HEAP32[i11 + (((i10 + i9 | 0) / 2 | 0) * 24 | 0) + 20 >> 2] | 0;
 i12 = i9;
 i13 = i10;
 while (1) {
  L3 : while (1) {
   d14 = +HEAPF32[i11 + (i12 * 24 | 0) + 16 >> 2];
   do if (d14 != d7) {
    if (!(d14 < d7)) break L3;
   } else {
    d16 = +HEAPF32[i8 >> 2];
    d19 = +HEAPF32[i11 + (i12 * 24 | 0) >> 2] - d16;
    d15 = +HEAPF32[i8 + 4 >> 2];
    d18 = +HEAPF32[i11 + (i12 * 24 | 0) + 4 >> 2] - d15;
    d14 = +HEAPF32[i8 + 8 >> 2];
    d17 = +HEAPF32[i11 + (i12 * 24 | 0) + 8 >> 2] - d14;
    if (d19 * d19 + d18 * d18 + d17 * d17 != (d3 - d16) * (d3 - d16) + (d4 - d15) * (d4 - d15) + (d5 - d14) * (d5 - d14)) if (d19 * d19 + d18 * d18 + d17 * d17 < (d3 - d16) * (d3 - d16) + (d4 - d15) * (d4 - d15) + (d5 - d14) * (d5 - d14)) break; else break L3; else if ((HEAP32[i11 + (i12 * 24 | 0) + 20 >> 2] | 0) < (i6 | 0)) break; else break L3;
   } while (0);
   i12 = i12 + 1 | 0;
  }
  L12 : while (1) {
   d14 = +HEAPF32[i11 + (i13 * 24 | 0) + 16 >> 2];
   do if (d7 != d14) {
    if (!(d7 < d14)) break L12;
   } else {
    d15 = +HEAPF32[i8 >> 2];
    d17 = +HEAPF32[i8 + 4 >> 2];
    d14 = +HEAPF32[i8 + 8 >> 2];
    d16 = +HEAPF32[i11 + (i13 * 24 | 0) >> 2] - d15;
    d18 = +HEAPF32[i11 + (i13 * 24 | 0) + 4 >> 2] - d17;
    d19 = +HEAPF32[i11 + (i13 * 24 | 0) + 8 >> 2] - d14;
    if ((d3 - d15) * (d3 - d15) + (d4 - d17) * (d4 - d17) + (d5 - d14) * (d5 - d14) != d16 * d16 + d18 * d18 + d19 * d19) if ((d3 - d15) * (d3 - d15) + (d4 - d17) * (d4 - d17) + (d5 - d14) * (d5 - d14) < d16 * d16 + d18 * d18 + d19 * d19) break; else break L12; else if ((i6 | 0) < (HEAP32[i11 + (i13 * 24 | 0) + 20 >> 2] | 0)) break; else break L12;
   } while (0);
   i13 = i13 + -1 | 0;
  }
  if ((i12 | 0) <= (i13 | 0)) {
   i20 = i11 + (i12 * 24 | 0) | 0;
   HEAP32[i1 + 0 >> 2] = HEAP32[i20 + 0 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i20 + 16 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i20 + 20 >> 2];
   i11 = i11 + (i13 * 24 | 0) | 0;
   HEAP32[i20 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
   HEAP32[i20 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i20 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i20 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i20 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
   HEAP32[i20 + 20 >> 2] = HEAP32[i11 + 20 >> 2];
   i11 = (HEAP32[i2 + 12 >> 2] | 0) + (i13 * 24 | 0) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i11 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i11 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
   i12 = i12 + 1 | 0;
   i13 = i13 + -1 | 0;
  }
  if ((i12 | 0) > (i13 | 0)) break;
  i11 = HEAP32[i2 + 12 >> 2] | 0;
 }
 if ((i13 | 0) > (i9 | 0)) __ZN20btAlignedObjectArrayI13GrahamVector3E17quickSortInternalI18btAngleCompareFuncEEvRKT_ii(i2, i8, i9, i13);
 if ((i12 | 0) >= (i10 | 0)) {
  STACKTOP = i1;
  return;
 }
 __ZN20btAlignedObjectArrayI13GrahamVector3E17quickSortInternalI18btAngleCompareFuncEEvRKT_ii(i2, i8, i12, i10);
 STACKTOP = i1;
 return;
}
function __ZN25btSimulationIslandManager21updateActivationStateEP16btCollisionWorldP12btDispatcher(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i3 + 8 >> 2] | 0) > 0) {
  i5 = HEAP32[i3 + 16 >> 2] | 0;
  i6 = 0;
  i4 = 0;
  do {
   i7 = HEAP32[i5 + (i6 << 2) >> 2] | 0;
   if ((HEAP32[i7 + 204 >> 2] & 3 | 0) == 0) {
    HEAP32[i7 + 208 >> 2] = i4;
    i4 = i4 + 1 | 0;
   }
   HEAP32[i7 + 212 >> 2] = -1;
   HEAPF32[i7 + 244 >> 2] = 1.0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAP32[i3 + 8 >> 2] | 0));
 } else i4 = 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i1 + 12 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i6 = 0;
    i9 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc((i4 << 3 | 3) + 16 | 0) | 0;
    if ((i6 | 0) == 0) i6 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i6 = i6 + 19 & -16;
    }
    i9 = HEAP32[i1 + 8 >> 2] | 0;
   }
   if ((i9 | 0) > 0) {
    i8 = 0;
    do {
     i7 = i6 + (i8 << 3) | 0;
     if ((i7 | 0) != 0) {
      i11 = (HEAP32[i1 + 16 >> 2] | 0) + (i8 << 3) | 0;
      i10 = HEAP32[i11 + 4 >> 2] | 0;
      HEAP32[i7 >> 2] = HEAP32[i11 >> 2];
      HEAP32[i7 + 4 >> 2] = i10;
     }
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i9 | 0));
   }
   i7 = HEAP32[i1 + 16 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 16 >> 2] = 0;
   }
   HEAP8[i1 + 20 >> 0] = 1;
   HEAP32[i1 + 16 >> 2] = i6;
   HEAP32[i1 + 12 >> 2] = i4;
   i6 = i1 + 16 | 0;
  } else i6 = i1 + 16 | 0;
  do {
   i7 = (HEAP32[i6 >> 2] | 0) + (i5 << 3) | 0;
   if ((i7 | 0) != 0) {
    HEAP32[i7 >> 2] = 0;
    HEAP32[i7 + 4 >> 2] = 0;
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i1 + 8 >> 2] = i4;
 if ((i4 | 0) > 0) {
  i6 = HEAP32[i1 + 16 >> 2] | 0;
  i5 = 0;
  do {
   HEAP32[i6 + (i5 << 3) >> 2] = i5;
   HEAP32[i6 + (i5 << 3) + 4 >> 2] = 1;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 i4 = HEAP32[i3 + 68 >> 2] | 0;
 i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 127](i4) | 0;
 if ((i3 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = 0;
 do {
  i7 = HEAP32[HEAP32[i5 + (i4 << 4) >> 2] >> 2] | 0;
  i6 = HEAP32[HEAP32[i5 + (i4 << 4) + 4 >> 2] >> 2] | 0;
  if (((i7 | 0) != 0 ? !((i6 | 0) == 0 ? 1 : (HEAP32[i7 + 204 >> 2] & 7 | 0) != 0) : 0) ? (HEAP32[i6 + 204 >> 2] & 7 | 0) == 0 : 0) {
   i8 = HEAP32[i7 + 208 >> 2] | 0;
   i7 = HEAP32[i6 + 208 >> 2] | 0;
   i6 = HEAP32[i1 + 16 >> 2] | 0;
   i9 = HEAP32[i6 + (i8 << 3) >> 2] | 0;
   if ((i9 | 0) != (i8 | 0)) {
    i10 = i6 + (i8 << 3) | 0;
    do {
     i8 = i6 + (i9 << 3) | 0;
     HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
     i8 = HEAP32[i8 >> 2] | 0;
     i10 = i6 + (i8 << 3) | 0;
     i9 = HEAP32[i10 >> 2] | 0;
    } while ((i8 | 0) != (i9 | 0));
   }
   i9 = HEAP32[i6 + (i7 << 3) >> 2] | 0;
   if ((i9 | 0) != (i7 | 0)) {
    i10 = i6 + (i7 << 3) | 0;
    do {
     i7 = i6 + (i9 << 3) | 0;
     HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
     i7 = HEAP32[i7 >> 2] | 0;
     i10 = i6 + (i7 << 3) | 0;
     i9 = HEAP32[i10 >> 2] | 0;
    } while ((i7 | 0) != (i9 | 0));
   }
   if ((i8 | 0) != (i7 | 0)) {
    HEAP32[i6 + (i8 << 3) >> 2] = i7;
    i11 = i6 + (i7 << 3) + 4 | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i6 + (i8 << 3) + 4 >> 2] | 0);
   }
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i3 | 0));
 STACKTOP = i2;
 return;
}
function __ZN22btVoronoiSimplexSolver14reduceVerticesERK15btUsageBitfield(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i6 = HEAP32[i1 >> 2] | 0;
 if ((i6 | 0) > 3) {
  i5 = HEAP8[i3 >> 0] | 0;
  if ((i5 & 8) == 0) {
   HEAP32[i1 >> 2] = i6 + -1;
   i4 = i1 + (i6 + -1 << 4) + 4 | 0;
   HEAP32[i1 + 52 >> 2] = HEAP32[i4 + 0 >> 2];
   HEAP32[i1 + 56 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i1 + 60 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i1 + 64 >> 2] = HEAP32[i4 + 12 >> 2];
   i4 = i1 + (i6 + -1 << 4) + 84 | 0;
   HEAP32[i1 + 132 >> 2] = HEAP32[i4 + 0 >> 2];
   HEAP32[i1 + 136 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i1 + 140 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i1 + 144 >> 2] = HEAP32[i4 + 12 >> 2];
   i4 = i1 + (i6 + -1 << 4) + 164 | 0;
   HEAP32[i1 + 212 >> 2] = HEAP32[i4 + 0 >> 2];
   HEAP32[i1 + 216 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i1 + 220 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i1 + 224 >> 2] = HEAP32[i4 + 12 >> 2];
   i6 = i6 + -1 | 0;
   i4 = 4;
  } else i4 = 6;
 } else i4 = 4;
 if ((i4 | 0) == 4) if ((i6 | 0) > 2) {
  i5 = HEAP8[i3 >> 0] | 0;
  i4 = 6;
 } else i5 = i6;
 if ((i4 | 0) == 6) if ((i5 & 4) == 0) {
  i5 = i6 + -1 | 0;
  HEAP32[i1 >> 2] = i5;
  HEAP32[i1 + 36 >> 2] = HEAP32[i1 + (i5 << 4) + 4 >> 2];
  HEAP32[i1 + 40 >> 2] = HEAP32[i1 + (i5 << 4) + 8 >> 2];
  HEAP32[i1 + 44 >> 2] = HEAP32[i1 + (i5 << 4) + 12 >> 2];
  HEAP32[i1 + 48 >> 2] = HEAP32[i1 + (i5 << 4) + 16 >> 2];
  HEAP32[i1 + 116 >> 2] = HEAP32[i1 + (i5 << 4) + 84 >> 2];
  HEAP32[i1 + 120 >> 2] = HEAP32[i1 + (i5 << 4) + 88 >> 2];
  HEAP32[i1 + 124 >> 2] = HEAP32[i1 + (i5 << 4) + 92 >> 2];
  HEAP32[i1 + 128 >> 2] = HEAP32[i1 + (i5 << 4) + 96 >> 2];
  HEAP32[i1 + 196 >> 2] = HEAP32[i1 + (i5 << 4) + 164 >> 2];
  HEAP32[i1 + 200 >> 2] = HEAP32[i1 + (i5 << 4) + 168 >> 2];
  HEAP32[i1 + 204 >> 2] = HEAP32[i1 + (i5 << 4) + 172 >> 2];
  HEAP32[i1 + 208 >> 2] = HEAP32[i1 + (i5 << 4) + 176 >> 2];
 } else i5 = i6;
 if ((i5 | 0) > 1) {
  i6 = HEAP8[i3 >> 0] | 0;
  if ((i6 & 2) == 0) {
   i5 = i5 + -1 | 0;
   HEAP32[i1 >> 2] = i5;
   HEAP32[i1 + 20 >> 2] = HEAP32[i1 + (i5 << 4) + 4 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i1 + (i5 << 4) + 8 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i1 + (i5 << 4) + 12 >> 2];
   HEAP32[i1 + 32 >> 2] = HEAP32[i1 + (i5 << 4) + 16 >> 2];
   HEAP32[i1 + 100 >> 2] = HEAP32[i1 + (i5 << 4) + 84 >> 2];
   HEAP32[i1 + 104 >> 2] = HEAP32[i1 + (i5 << 4) + 88 >> 2];
   HEAP32[i1 + 108 >> 2] = HEAP32[i1 + (i5 << 4) + 92 >> 2];
   HEAP32[i1 + 112 >> 2] = HEAP32[i1 + (i5 << 4) + 96 >> 2];
   HEAP32[i1 + 180 >> 2] = HEAP32[i1 + (i5 << 4) + 164 >> 2];
   HEAP32[i1 + 184 >> 2] = HEAP32[i1 + (i5 << 4) + 168 >> 2];
   HEAP32[i1 + 188 >> 2] = HEAP32[i1 + (i5 << 4) + 172 >> 2];
   HEAP32[i1 + 192 >> 2] = HEAP32[i1 + (i5 << 4) + 176 >> 2];
   i4 = 11;
  } else i3 = i6;
 } else i4 = 11;
 do if ((i4 | 0) == 11) if ((i5 | 0) > 0) {
  i3 = HEAP8[i3 >> 0] | 0;
  break;
 } else {
  STACKTOP = i2;
  return;
 } while (0);
 if (!((i3 & 1) == 0)) {
  STACKTOP = i2;
  return;
 }
 i6 = i5 + -1 | 0;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i1 + 4 >> 2] = HEAP32[i1 + (i6 << 4) + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i1 + (i6 << 4) + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i1 + (i6 << 4) + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i1 + (i6 << 4) + 16 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i1 + (i6 << 4) + 84 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i1 + (i6 << 4) + 88 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i1 + (i6 << 4) + 92 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i1 + (i6 << 4) + 96 >> 2];
 HEAP32[i1 + 164 >> 2] = HEAP32[i1 + (i6 << 4) + 164 >> 2];
 HEAP32[i1 + 168 >> 2] = HEAP32[i1 + (i6 << 4) + 168 >> 2];
 HEAP32[i1 + 172 >> 2] = HEAP32[i1 + (i6 << 4) + 172 >> 2];
 HEAP32[i1 + 176 >> 2] = HEAP32[i1 + (i6 << 4) + 176 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld25predictUnconstraintMotionEf(i3, d2) {
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1960);
 i15 = HEAP32[i3 + 232 >> 2] | 0;
 if ((i15 | 0) > 0) {
  i4 = 0;
  do {
   i5 = HEAP32[(HEAP32[i3 + 240 >> 2] | 0) + (i4 << 2) >> 2] | 0;
   if ((HEAP32[i5 + 204 >> 2] & 3 | 0) == 0) {
    d7 = +HEAPF32[i5 + 444 >> 2];
    d10 = +Math_pow(+(1.0 - d7), +d2);
    d12 = d10 * +HEAPF32[i5 + 312 >> 2];
    HEAPF32[i5 + 312 >> 2] = d12;
    d9 = d10 * +HEAPF32[i5 + 316 >> 2];
    HEAPF32[i5 + 316 >> 2] = d9;
    d10 = d10 * +HEAPF32[i5 + 320 >> 2];
    HEAPF32[i5 + 320 >> 2] = d10;
    d6 = +HEAPF32[i5 + 448 >> 2];
    d13 = +Math_pow(+(1.0 - d6), +d2);
    d8 = d13 * +HEAPF32[i5 + 328 >> 2];
    HEAPF32[i5 + 328 >> 2] = d8;
    d11 = d13 * +HEAPF32[i5 + 332 >> 2];
    HEAPF32[i5 + 332 >> 2] = d11;
    d13 = d13 * +HEAPF32[i5 + 336 >> 2];
    HEAPF32[i5 + 336 >> 2] = d13;
    do if ((HEAP8[i5 + 452 >> 0] | 0) != 0) {
     if (d13 * d13 + (d8 * d8 + d11 * d11) < +HEAPF32[i5 + 464 >> 2] ? d12 * d12 + d9 * d9 + d10 * d10 < +HEAPF32[i5 + 460 >> 2] : 0) {
      d14 = +HEAPF32[i5 + 456 >> 2];
      HEAPF32[i5 + 328 >> 2] = d8 * d14;
      HEAPF32[i5 + 332 >> 2] = d14 * d11;
      HEAPF32[i5 + 336 >> 2] = d14 * d13;
      HEAPF32[i5 + 312 >> 2] = d14 * d12;
      HEAPF32[i5 + 316 >> 2] = d14 * d9;
      HEAPF32[i5 + 320 >> 2] = d14 * d10;
      d12 = d14 * d12;
      d9 = d14 * d9;
      d10 = d14 * d10;
      d8 = d8 * d14;
      d11 = d14 * d11;
      d13 = d14 * d13;
     }
     d14 = +Math_sqrt(+(d12 * d12 + d9 * d9 + d10 * d10));
     do if (d14 < d7) if (d14 > .004999999888241291) {
      d12 = d12 - d12 * (1.0 / d14) * .004999999888241291;
      HEAPF32[i5 + 312 >> 2] = d12;
      d9 = d9 - d9 * (1.0 / d14) * .004999999888241291;
      HEAPF32[i5 + 316 >> 2] = d9;
      d10 = d10 - d10 * (1.0 / d14) * .004999999888241291;
      HEAPF32[i5 + 320 >> 2] = d10;
      break;
     } else {
      HEAP32[i5 + 312 >> 2] = 0;
      HEAP32[i5 + 316 >> 2] = 0;
      HEAP32[i5 + 320 >> 2] = 0;
      HEAP32[i5 + 324 >> 2] = 0;
      d12 = 0.0;
      d9 = 0.0;
      d10 = 0.0;
      break;
     } while (0);
     d7 = +Math_sqrt(+(d8 * d8 + d11 * d11 + d13 * d13));
     if (d7 < d6) if (d7 > .004999999888241291) {
      HEAPF32[i5 + 328 >> 2] = d8 - d8 * (1.0 / d7) * .004999999888241291;
      HEAPF32[i5 + 332 >> 2] = d11 - d11 * (1.0 / d7) * .004999999888241291;
      HEAPF32[i5 + 336 >> 2] = d13 - d13 * (1.0 / d7) * .004999999888241291;
      break;
     } else {
      HEAP32[i5 + 328 >> 2] = 0;
      HEAP32[i5 + 332 >> 2] = 0;
      HEAP32[i5 + 336 >> 2] = 0;
      HEAP32[i5 + 340 >> 2] = 0;
      break;
     }
    } while (0);
    __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i5 + 4 | 0, d12, d9, d10, i5 + 328 | 0, d2, i5 + 68 | 0);
    i15 = HEAP32[i3 + 232 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i15 | 0));
 }
 i3 = HEAP32[5022] | 0;
 i15 = (HEAP32[i3 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i3 + 16 >> 2] = i15;
 if ((i15 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i3 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i15 = HEAP32[5008] | 0;
  HEAPF32[i3 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i15 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i3 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i3 + 8 >> 2];
  if ((HEAP32[i3 + 16 >> 2] | 0) == 0) {
   i3 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i3 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN28btCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i2, i7, i8, i4, i5) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, d6 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0;
 i1 = STACKTOP;
 i16 = (HEAP8[i2 + 28 >> 0] | 0) != 0;
 i3 = i16 ? i8 : i7;
 i7 = i16 ? i7 : i8;
 i16 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i16 | 0) <= 0) {
  d27 = 1.0;
  STACKTOP = i1;
  return +d27;
 }
 i10 = (HEAP32[i3 + 192 >> 2] | 0) + 24 | 0;
 d11 = +HEAPF32[i3 + 4 >> 2];
 d12 = +HEAPF32[i3 + 8 >> 2];
 d13 = +HEAPF32[i3 + 12 >> 2];
 d23 = +HEAPF32[i3 + 16 >> 2];
 d14 = +HEAPF32[i3 + 20 >> 2];
 d15 = +HEAPF32[i3 + 24 >> 2];
 d6 = +HEAPF32[i3 + 28 >> 2];
 d24 = +HEAPF32[i3 + 32 >> 2];
 d17 = +HEAPF32[i3 + 36 >> 2];
 d18 = +HEAPF32[i3 + 40 >> 2];
 d19 = +HEAPF32[i3 + 44 >> 2];
 d25 = +HEAPF32[i3 + 48 >> 2];
 d20 = +HEAPF32[i3 + 52 >> 2];
 d21 = +HEAPF32[i3 + 56 >> 2];
 d22 = +HEAPF32[i3 + 60 >> 2];
 d26 = +HEAPF32[i3 + 64 >> 2];
 i8 = HEAP32[i3 + 260 >> 2] | 0;
 d27 = 1.0;
 i9 = 0;
 do {
  i29 = HEAP32[i10 >> 2] | 0;
  d40 = +HEAPF32[i29 + (i9 * 80 | 0) >> 2];
  d39 = +HEAPF32[i29 + (i9 * 80 | 0) + 16 >> 2];
  d38 = +HEAPF32[i29 + (i9 * 80 | 0) + 32 >> 2];
  d37 = +HEAPF32[i29 + (i9 * 80 | 0) + 4 >> 2];
  d36 = +HEAPF32[i29 + (i9 * 80 | 0) + 20 >> 2];
  d35 = +HEAPF32[i29 + (i9 * 80 | 0) + 36 >> 2];
  d34 = +HEAPF32[i29 + (i9 * 80 | 0) + 8 >> 2];
  d33 = +HEAPF32[i29 + (i9 * 80 | 0) + 24 >> 2];
  d32 = +HEAPF32[i29 + (i9 * 80 | 0) + 40 >> 2];
  d31 = +HEAPF32[i29 + (i9 * 80 | 0) + 48 >> 2];
  d30 = +HEAPF32[i29 + (i9 * 80 | 0) + 52 >> 2];
  d28 = +HEAPF32[i29 + (i9 * 80 | 0) + 56 >> 2];
  HEAP32[i3 + 260 >> 2] = i8 + 1;
  HEAPF32[i3 + 4 >> 2] = d11 * d40 + d12 * d39 + d13 * d38;
  HEAPF32[i3 + 8 >> 2] = d11 * d37 + d12 * d36 + d13 * d35;
  HEAPF32[i3 + 12 >> 2] = d11 * d34 + d12 * d33 + d13 * d32;
  HEAPF32[i3 + 16 >> 2] = 0.0;
  HEAPF32[i3 + 20 >> 2] = d14 * d40 + d15 * d39 + d6 * d38;
  HEAPF32[i3 + 24 >> 2] = d14 * d37 + d15 * d36 + d6 * d35;
  HEAPF32[i3 + 28 >> 2] = d14 * d34 + d15 * d33 + d6 * d32;
  HEAPF32[i3 + 32 >> 2] = 0.0;
  HEAPF32[i3 + 36 >> 2] = d17 * d40 + d18 * d39 + d19 * d38;
  HEAPF32[i3 + 40 >> 2] = d17 * d37 + d18 * d36 + d19 * d35;
  HEAPF32[i3 + 44 >> 2] = d17 * d34 + d18 * d33 + d19 * d32;
  HEAPF32[i3 + 48 >> 2] = 0.0;
  HEAPF32[i3 + 52 >> 2] = d20 + (d11 * d31 + d12 * d30 + d13 * d28);
  HEAPF32[i3 + 56 >> 2] = d21 + (d14 * d31 + d15 * d30 + d6 * d28);
  HEAPF32[i3 + 60 >> 2] = d22 + (d17 * d31 + d18 * d30 + d19 * d28);
  HEAPF32[i3 + 64 >> 2] = 0.0;
  i29 = HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i9 << 2) >> 2] | 0;
  d28 = +FUNCTION_TABLE_diiiii[HEAP32[(HEAP32[i29 >> 2] | 0) + 12 >> 2] & 15](i29, i3, i7, i4, i5);
  d27 = d28 < d27 ? d28 : d27;
  i8 = (HEAP32[i3 + 260 >> 2] | 0) + 1 | 0;
  HEAP32[i3 + 260 >> 2] = i8;
  HEAPF32[i3 + 4 >> 2] = d11;
  HEAPF32[i3 + 8 >> 2] = d12;
  HEAPF32[i3 + 12 >> 2] = d13;
  HEAPF32[i3 + 16 >> 2] = d23;
  HEAPF32[i3 + 20 >> 2] = d14;
  HEAPF32[i3 + 24 >> 2] = d15;
  HEAPF32[i3 + 28 >> 2] = d6;
  HEAPF32[i3 + 32 >> 2] = d24;
  HEAPF32[i3 + 36 >> 2] = d17;
  HEAPF32[i3 + 40 >> 2] = d18;
  HEAPF32[i3 + 44 >> 2] = d19;
  HEAPF32[i3 + 48 >> 2] = d25;
  HEAPF32[i3 + 52 >> 2] = d20;
  HEAPF32[i3 + 56 >> 2] = d21;
  HEAPF32[i3 + 60 >> 2] = d22;
  HEAPF32[i3 + 64 >> 2] = d26;
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != (i16 | 0));
 STACKTOP = i1;
 return +d27;
}
function __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvRKT_ii(i1, i8, i2) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = STACKTOP;
 while (1) {
  i7 = (i8 + i2 | 0) / 2 | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i6 = HEAP32[i5 + (i7 << 4) >> 2] | 0;
  i4 = HEAP32[i5 + (i7 << 4) + 4 >> 2] | 0;
  i7 = HEAP32[i5 + (i7 << 4) + 8 >> 2] | 0;
  i9 = i8;
  i13 = i2;
  while (1) {
   L5 : while (1) {
    i11 = HEAP32[i5 + (i9 << 4) >> 2] | 0;
    if ((i11 | 0) == 0) i15 = -1; else i15 = HEAP32[i11 + 12 >> 2] | 0;
    if ((i6 | 0) == 0) i12 = -1; else i12 = HEAP32[i6 + 12 >> 2] | 0;
    i10 = HEAP32[i5 + (i9 << 4) + 4 >> 2] | 0;
    if ((i10 | 0) == 0) i16 = -1; else i16 = HEAP32[i10 + 12 >> 2] | 0;
    if ((i4 | 0) == 0) i14 = -1; else i14 = HEAP32[i4 + 12 >> 2] | 0;
    do if ((i15 | 0) <= (i12 | 0)) {
     i12 = (i11 | 0) == (i6 | 0) & (i16 | 0) > (i14 | 0);
     if (i12 | (i11 | 0) == (i6 | 0) ^ 1) if (i12) break; else break L5;
     if ((i10 | 0) != (i4 | 0)) break L5;
     if (!((HEAP32[i5 + (i9 << 4) + 8 >> 2] | 0) >>> 0 > i7 >>> 0)) break L5;
    } while (0);
    i9 = i9 + 1 | 0;
   }
   L27 : do if ((i6 | 0) == 0) while (1) {
    i14 = HEAP32[i5 + (i13 << 4) >> 2] | 0;
    if ((i14 | 0) == 0) i16 = -1; else i16 = HEAP32[i14 + 12 >> 2] | 0;
    if ((i4 | 0) == 0) i17 = -1; else i17 = HEAP32[i4 + 12 >> 2] | 0;
    i12 = HEAP32[i5 + (i13 << 4) + 4 >> 2] | 0;
    if ((i12 | 0) == 0) i15 = -1; else i15 = HEAP32[i12 + 12 >> 2] | 0;
    do if (!((i16 | 0) < -1)) {
     i15 = (i14 | 0) == 0 & (i17 | 0) > (i15 | 0);
     if (i15 | (i14 | 0) == 0 ^ 1) if (i15) break; else break L27;
     if ((i4 | 0) != (i12 | 0)) break L27;
     if (!(i7 >>> 0 > (HEAP32[i5 + (i13 << 4) + 8 >> 2] | 0) >>> 0)) break L27;
    } while (0);
    i13 = i13 + -1 | 0;
   } else {
    i12 = HEAP32[i6 + 12 >> 2] | 0;
    i15 = i13;
    while (1) {
     i14 = HEAP32[i5 + (i15 << 4) >> 2] | 0;
     if ((i14 | 0) == 0) i18 = -1; else i18 = HEAP32[i14 + 12 >> 2] | 0;
     if ((i4 | 0) == 0) i16 = -1; else i16 = HEAP32[i4 + 12 >> 2] | 0;
     i13 = HEAP32[i5 + (i15 << 4) + 4 >> 2] | 0;
     if ((i13 | 0) == 0) i17 = -1; else i17 = HEAP32[i13 + 12 >> 2] | 0;
     do if ((i12 | 0) <= (i18 | 0)) {
      i16 = (i6 | 0) == (i14 | 0) & (i16 | 0) > (i17 | 0);
      if (i16 | (i6 | 0) == (i14 | 0) ^ 1) if (i16) break; else {
       i13 = i15;
       break L27;
      }
      if ((i4 | 0) != (i13 | 0)) {
       i13 = i15;
       break L27;
      }
      if (!(i7 >>> 0 > (HEAP32[i5 + (i15 << 4) + 8 >> 2] | 0) >>> 0)) {
       i13 = i15;
       break L27;
      }
     } while (0);
     i15 = i15 + -1 | 0;
    }
   } while (0);
   if ((i9 | 0) <= (i13 | 0)) {
    i18 = i5 + (i9 << 4) | 0;
    i16 = HEAP32[i5 + (i9 << 4) + 8 >> 2] | 0;
    i17 = HEAP32[i5 + (i9 << 4) + 12 >> 2] | 0;
    i15 = i5 + (i13 << 4) | 0;
    HEAP32[i18 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
    HEAP32[i18 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i18 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i18 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    i18 = HEAP32[i1 + 12 >> 2] | 0;
    HEAP32[i18 + (i13 << 4) >> 2] = i11;
    HEAP32[i18 + (i13 << 4) + 4 >> 2] = i10;
    HEAP32[i18 + (i13 << 4) + 8 >> 2] = i16;
    HEAP32[i18 + (i13 << 4) + 12 >> 2] = i17;
    i9 = i9 + 1 | 0;
    i13 = i13 + -1 | 0;
   }
   if ((i9 | 0) > (i13 | 0)) break;
   i5 = HEAP32[i1 + 12 >> 2] | 0;
  }
  if ((i13 | 0) > (i8 | 0)) __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvRKT_ii(i1, i8, i13);
  if ((i9 | 0) < (i2 | 0)) i8 = i9; else break;
 }
 STACKTOP = i3;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallback28internalProcessTriangleIndexE_0PS2_ii(i13, i14, i1, i6) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 d7 = +HEAPF32[i14 >> 2];
 d2 = d7 < 999999984306749400.0 ? d7 : 999999984306749400.0;
 d8 = +HEAPF32[i14 + 4 >> 2];
 d3 = d8 < 999999984306749400.0 ? d8 : 999999984306749400.0;
 d9 = +HEAPF32[i14 + 8 >> 2];
 d4 = d9 < 999999984306749400.0 ? d9 : 999999984306749400.0;
 d10 = +HEAPF32[i14 + 12 >> 2];
 d12 = d10 < 0.0 ? d10 : 0.0;
 d7 = d7 > -999999984306749400.0 ? d7 : -999999984306749400.0;
 d8 = d8 > -999999984306749400.0 ? d8 : -999999984306749400.0;
 d9 = d9 > -999999984306749400.0 ? d9 : -999999984306749400.0;
 d10 = d10 > 0.0 ? d10 : 0.0;
 d20 = +HEAPF32[i14 + 16 >> 2];
 d2 = d20 < d2 ? d20 : d2;
 d21 = +HEAPF32[i14 + 20 >> 2];
 d3 = d21 < d3 ? d21 : d3;
 d22 = +HEAPF32[i14 + 24 >> 2];
 d4 = d22 < d4 ? d22 : d4;
 d23 = +HEAPF32[i14 + 28 >> 2];
 d12 = d23 < d12 ? d23 : d12;
 d7 = d7 < d20 ? d20 : d7;
 d8 = d8 < d21 ? d21 : d8;
 d9 = d9 < d22 ? d22 : d9;
 d10 = d10 < d23 ? d23 : d10;
 d23 = +HEAPF32[i14 + 32 >> 2];
 d2 = d23 < d2 ? d23 : d2;
 d22 = +HEAPF32[i14 + 36 >> 2];
 d3 = d22 < d3 ? d22 : d3;
 d21 = +HEAPF32[i14 + 40 >> 2];
 d4 = d21 < d4 ? d21 : d4;
 d20 = +HEAPF32[i14 + 44 >> 2];
 d12 = d20 < d12 ? d20 : d12;
 d7 = d7 < d23 ? d23 : d7;
 d8 = d8 < d22 ? d22 : d8;
 d9 = d9 < d21 ? d21 : d9;
 d10 = d10 < d20 ? d20 : d10;
 i13 = HEAP32[i13 + 4 >> 2] | 0;
 i18 = HEAP32[i13 + 4 >> 2] | 0;
 if ((i18 | 0) == (HEAP32[i13 + 8 >> 2] | 0) ? (i11 = (i18 | 0) == 0 ? 1 : i18 << 1, (i18 | 0) < (i11 | 0)) : 0) {
  if ((i11 | 0) == 0) i14 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i14 = _malloc(i11 << 6 | 19) | 0;
   if ((i14 | 0) == 0) i14 = 0; else {
    HEAP32[(i14 + 19 & -16) + -4 >> 2] = i14;
    i14 = i14 + 19 & -16;
   }
   i18 = HEAP32[i13 + 4 >> 2] | 0;
  }
  if ((i18 | 0) > 0) {
   i19 = 0;
   do {
    i15 = i14 + (i19 << 6) + 0 | 0;
    i16 = (HEAP32[i13 + 12 >> 2] | 0) + (i19 << 6) + 0 | 0;
    i17 = i15 + 64 | 0;
    do {
     HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
     i15 = i15 + 4 | 0;
     i16 = i16 + 4 | 0;
    } while ((i15 | 0) < (i17 | 0));
    i19 = i19 + 1 | 0;
   } while ((i19 | 0) != (i18 | 0));
  }
  i15 = HEAP32[i13 + 12 >> 2] | 0;
  if ((i15 | 0) != 0) {
   if ((HEAP8[i13 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i15 + -4 >> 2] | 0);
   }
   HEAP32[i13 + 12 >> 2] = 0;
  }
  HEAP8[i13 + 16 >> 0] = 1;
  HEAP32[i13 + 12 >> 2] = i14;
  HEAP32[i13 + 8 >> 2] = i11;
  i18 = HEAP32[i13 + 4 >> 2] | 0;
 }
 i19 = HEAP32[i13 + 12 >> 2] | 0;
 HEAPF32[i19 + (i18 << 6) >> 2] = d2;
 HEAPF32[i19 + (i18 << 6) + 4 >> 2] = d3;
 HEAPF32[i19 + (i18 << 6) + 8 >> 2] = d4;
 HEAPF32[i19 + (i18 << 6) + 12 >> 2] = d12;
 HEAPF32[i19 + (i18 << 6) + 16 >> 2] = d7;
 HEAPF32[i19 + (i18 << 6) + 20 >> 2] = d8;
 HEAPF32[i19 + (i18 << 6) + 24 >> 2] = d9;
 HEAPF32[i19 + (i18 << 6) + 28 >> 2] = d10;
 HEAP32[i19 + (i18 << 6) + 32 >> 2] = -1;
 HEAP32[i19 + (i18 << 6) + 36 >> 2] = i1;
 HEAP32[i19 + (i18 << 6) + 40 >> 2] = i6;
 i19 = i19 + (i18 << 6) + 44 | 0;
 HEAP32[i19 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i19 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i19 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i19 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i19 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i13 + 4 >> 2] = (HEAP32[i13 + 4 >> 2] | 0) + 1;
 STACKTOP = i5;
 return;
}
function __ZN23btGeneric6DofConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP8[i1 + 1308 >> 0] | 0) == 0) {
  STACKTOP = i5;
  return;
 }
 HEAPF32[i1 + 928 >> 2] = 0.0;
 HEAPF32[i1 + 992 >> 2] = 0.0;
 HEAPF32[i1 + 1056 >> 2] = 0.0;
 HEAP32[i1 + 712 >> 2] = 0;
 HEAP32[i1 + 716 >> 2] = 0;
 HEAP32[i1 + 720 >> 2] = 0;
 HEAP32[i1 + 724 >> 2] = 0;
 __ZN23btGeneric6DofConstraint19calculateTransformsERK11btTransformS2_(i1, (HEAP32[i1 + 28 >> 2] | 0) + 4 | 0, (HEAP32[i1 + 32 >> 2] | 0) + 4 | 0);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 511](i1);
 d2 = +HEAPF32[i1 + 1284 >> 2];
 d3 = +HEAPF32[i1 + 1288 >> 2];
 d4 = +HEAPF32[i1 + 1292 >> 2];
 if (+HEAPF32[i1 + 696 >> 2] >= +HEAPF32[i1 + 680 >> 2]) {
  if ((HEAP8[i1 + 1300 >> 0] | 0) == 0) {
   i8 = i1 + 1160 | 0;
   i7 = i1 + 1144 | 0;
   i6 = i1 + 1128 | 0;
  } else {
   i8 = i1 + 1096 | 0;
   i7 = i1 + 1080 | 0;
   i6 = i1 + 1064 | 0;
  }
  d9 = +HEAPF32[i8 >> 2];
  d10 = +HEAPF32[i7 >> 2];
  HEAPF32[i5 >> 2] = +HEAPF32[i6 >> 2];
  HEAPF32[i5 + 4 >> 2] = d10;
  HEAPF32[i5 + 8 >> 2] = d9;
  HEAPF32[i5 + 12 >> 2] = 0.0;
  __ZN23btGeneric6DofConstraint19buildLinearJacobianER15btJacobianEntryRK9btVector3S4_S4_(i1, i1 + 176 | 0, i5, d2, d3, d4, d2, d3, d4);
 }
 if (+HEAPF32[i1 + 700 >> 2] >= +HEAPF32[i1 + 684 >> 2]) {
  if ((HEAP8[i1 + 1300 >> 0] | 0) == 0) {
   i8 = i1 + 1164 | 0;
   i7 = i1 + 1148 | 0;
   i6 = i1 + 1132 | 0;
  } else {
   i8 = i1 + 1100 | 0;
   i7 = i1 + 1084 | 0;
   i6 = i1 + 1068 | 0;
  }
  d10 = +HEAPF32[i8 >> 2];
  d9 = +HEAPF32[i7 >> 2];
  HEAPF32[i5 >> 2] = +HEAPF32[i6 >> 2];
  HEAPF32[i5 + 4 >> 2] = d9;
  HEAPF32[i5 + 8 >> 2] = d10;
  HEAPF32[i5 + 12 >> 2] = 0.0;
  __ZN23btGeneric6DofConstraint19buildLinearJacobianER15btJacobianEntryRK9btVector3S4_S4_(i1, i1 + 260 | 0, i5, d2, d3, d4, d2, d3, d4);
 }
 if (+HEAPF32[i1 + 704 >> 2] >= +HEAPF32[i1 + 688 >> 2]) {
  if ((HEAP8[i1 + 1300 >> 0] | 0) == 0) {
   i6 = i1 + 1168 | 0;
   i8 = i1 + 1152 | 0;
   i7 = i1 + 1136 | 0;
  } else {
   i6 = i1 + 1104 | 0;
   i8 = i1 + 1088 | 0;
   i7 = i1 + 1072 | 0;
  }
  d10 = +HEAPF32[i6 >> 2];
  d9 = +HEAPF32[i8 >> 2];
  HEAPF32[i5 >> 2] = +HEAPF32[i7 >> 2];
  HEAPF32[i5 + 4 >> 2] = d9;
  HEAPF32[i5 + 8 >> 2] = d10;
  HEAPF32[i5 + 12 >> 2] = 0.0;
  __ZN23btGeneric6DofConstraint19buildLinearJacobianER15btJacobianEntryRK9btVector3S4_S4_(i1, i1 + 344 | 0, i5, d2, d3, d4, d2, d3, d4);
 }
 if (__ZN23btGeneric6DofConstraint21testAngularLimitMotorEi(i1, 0) | 0) {
  HEAP32[i5 + 0 >> 2] = HEAP32[i1 + 1208 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 1212 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 1216 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 1220 >> 2];
  __ZN23btGeneric6DofConstraint20buildAngularJacobianER15btJacobianEntryRK9btVector3(i1, i1 + 428 | 0, i5);
 }
 if (__ZN23btGeneric6DofConstraint21testAngularLimitMotorEi(i1, 1) | 0) {
  HEAP32[i5 + 0 >> 2] = HEAP32[i1 + 1224 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 1228 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 1232 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 1236 >> 2];
  __ZN23btGeneric6DofConstraint20buildAngularJacobianER15btJacobianEntryRK9btVector3(i1, i1 + 512 | 0, i5);
 }
 if (!(__ZN23btGeneric6DofConstraint21testAngularLimitMotorEi(i1, 2) | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i5 + 0 >> 2] = HEAP32[i1 + 1240 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 1244 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 1248 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 1252 >> 2];
 __ZN23btGeneric6DofConstraint20buildAngularJacobianER15btJacobianEntryRK9btVector3(i1, i1 + 596 | 0, i5);
 STACKTOP = i5;
 return;
}
function __ZN28btHashedOverlappingPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher(i3, i4, i5, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 HEAP32[3810] = (HEAP32[3810] | 0) + 1;
 i8 = (HEAP32[i4 + 12 >> 2] | 0) > (HEAP32[i5 + 12 >> 2] | 0);
 i7 = i8 ? i5 : i4;
 i8 = i8 ? i4 : i5;
 i10 = HEAP32[i7 + 12 >> 2] | 0;
 i5 = HEAP32[i8 + 12 >> 2] | 0;
 i9 = ((i5 << 16 | i10) + ~((i5 << 16 | i10) << 15) >> 10 ^ (i5 << 16 | i10) + ~((i5 << 16 | i10) << 15)) * 9 | 0;
 i9 = ((i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11) >> 16 ^ (i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11)) & (HEAP32[i3 + 12 >> 2] | 0) + -1;
 i11 = HEAP32[(HEAP32[i3 + 44 >> 2] | 0) + (i9 << 2) >> 2] | 0;
 if ((i11 | 0) == -1) {
  i13 = 0;
  STACKTOP = i2;
  return i13 | 0;
 }
 i4 = HEAP32[i3 + 16 >> 2] | 0;
 while (1) {
  if ((HEAP32[(HEAP32[i4 + (i11 << 4) >> 2] | 0) + 12 >> 2] | 0) == (i10 | 0) ? (HEAP32[(HEAP32[i4 + (i11 << 4) + 4 >> 2] | 0) + 12 >> 2] | 0) == (i5 | 0) : 0) break;
  i11 = HEAP32[(HEAP32[i3 + 64 >> 2] | 0) + (i11 << 2) >> 2] | 0;
  if ((i11 | 0) == -1) {
   i3 = 0;
   i1 = 24;
   break;
  }
 }
 if ((i1 | 0) == 24) {
  STACKTOP = i2;
  return i3 | 0;
 }
 i5 = i4 + (i11 << 4) | 0;
 if ((i5 | 0) == 0) {
  i13 = 0;
  STACKTOP = i2;
  return i13 | 0;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 127](i3, i5, i6);
 i4 = HEAP32[i4 + (i11 << 4) + 12 >> 2] | 0;
 i5 = i5 - (HEAP32[i3 + 16 >> 2] | 0) >> 4;
 i9 = (HEAP32[i3 + 44 >> 2] | 0) + (i9 << 2) | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i11 = HEAP32[i3 + 64 >> 2] | 0;
 if ((i10 | 0) != (i5 | 0)) {
  while (1) {
   i12 = i11 + (i10 << 2) | 0;
   i13 = HEAP32[i12 >> 2] | 0;
   if ((i13 | 0) == (i5 | 0)) break; else i10 = i13;
  }
  i11 = HEAP32[i11 + (i5 << 2) >> 2] | 0;
  if ((i10 | 0) == -1) i1 = 12; else HEAP32[i12 >> 2] = i11;
 } else {
  i11 = HEAP32[i11 + (i5 << 2) >> 2] | 0;
  i1 = 12;
 }
 if ((i1 | 0) == 12) HEAP32[i9 >> 2] = i11;
 i9 = (HEAP32[i3 + 8 >> 2] | 0) + -1 | 0;
 i10 = HEAP32[i3 + 72 >> 2] | 0;
 if ((i10 | 0) != 0) FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 31](i10, i7, i8, i6) | 0;
 if ((i9 | 0) == (i5 | 0)) {
  HEAP32[i3 + 8 >> 2] = (HEAP32[i3 + 8 >> 2] | 0) + -1;
  i13 = i4;
  STACKTOP = i2;
  return i13 | 0;
 }
 i8 = HEAP32[i3 + 16 >> 2] | 0;
 i7 = HEAP32[(HEAP32[i8 + (i9 << 4) + 4 >> 2] | 0) + 12 >> 2] << 16 | HEAP32[(HEAP32[i8 + (i9 << 4) >> 2] | 0) + 12 >> 2];
 i7 = (i7 + ~(i7 << 15) >> 10 ^ i7 + ~(i7 << 15)) * 9 | 0;
 i7 = ((i7 >> 6 ^ i7) + ~((i7 >> 6 ^ i7) << 11) >> 16 ^ (i7 >> 6 ^ i7) + ~((i7 >> 6 ^ i7) << 11)) & (HEAP32[i3 + 12 >> 2] | 0) + -1;
 i6 = (HEAP32[i3 + 44 >> 2] | 0) + (i7 << 2) | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 i12 = HEAP32[i3 + 64 >> 2] | 0;
 if ((i11 | 0) != (i9 | 0)) {
  while (1) {
   i10 = i12 + (i11 << 2) | 0;
   i13 = HEAP32[i10 >> 2] | 0;
   if ((i13 | 0) == (i9 | 0)) break; else i11 = i13;
  }
  i12 = HEAP32[i12 + (i9 << 2) >> 2] | 0;
  if ((i11 | 0) == -1) i1 = 22; else HEAP32[i10 >> 2] = i12;
 } else {
  i12 = HEAP32[i12 + (i9 << 2) >> 2] | 0;
  i1 = 22;
 }
 if ((i1 | 0) == 22) HEAP32[i6 >> 2] = i12;
 HEAP32[i8 + (i5 << 4) + 0 >> 2] = HEAP32[i8 + (i9 << 4) + 0 >> 2];
 HEAP32[i8 + (i5 << 4) + 4 >> 2] = HEAP32[i8 + (i9 << 4) + 4 >> 2];
 HEAP32[i8 + (i5 << 4) + 8 >> 2] = HEAP32[i8 + (i9 << 4) + 8 >> 2];
 HEAP32[i8 + (i5 << 4) + 12 >> 2] = HEAP32[i8 + (i9 << 4) + 12 >> 2];
 i13 = (HEAP32[i3 + 44 >> 2] | 0) + (i7 << 2) | 0;
 HEAP32[(HEAP32[i3 + 64 >> 2] | 0) + (i5 << 2) >> 2] = HEAP32[i13 >> 2];
 HEAP32[i13 >> 2] = i5;
 HEAP32[i3 + 8 >> 2] = (HEAP32[i3 + 8 >> 2] | 0) + -1;
 i13 = i4;
 STACKTOP = i2;
 return i13 | 0;
}
function __ZNK17btHingeConstraint9serializeEPvP12btSerializer(i3, i1, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, d4 = 0.0;
 i2 = STACKTOP;
 __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i3, i1, i5) | 0;
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i3 + 552 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i3 + 556 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i3 + 560 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i3 + 564 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i3 + 568 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i3 + 572 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i3 + 576 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i3 + 580 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i3 + 584 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i3 + 588 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i3 + 592 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i3 + 596 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i3 + 600 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i3 + 604 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i3 + 608 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i3 + 612 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i3 + 616 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i3 + 620 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i3 + 624 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i3 + 628 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i3 + 632 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i3 + 636 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i3 + 640 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i3 + 644 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i3 + 648 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i3 + 652 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i3 + 656 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i3 + 660 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i3 + 664 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i3 + 668 >> 2];
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i3 + 672 >> 2];
 HEAPF32[i1 + 176 >> 2] = +HEAPF32[i3 + 676 >> 2];
 HEAP32[i1 + 184 >> 2] = HEAPU8[i3 + 736 >> 0];
 HEAP32[i1 + 188 >> 2] = HEAPU8[i3 + 737 >> 0];
 HEAPF32[i1 + 196 >> 2] = +HEAPF32[i3 + 684 >> 2];
 HEAPF32[i1 + 192 >> 2] = +HEAPF32[i3 + 680 >> 2];
 HEAP32[i1 + 180 >> 2] = HEAPU8[i3 + 740 >> 0];
 d4 = +_fmodf(+(+HEAPF32[i3 + 688 >> 2] - +HEAPF32[i3 + 692 >> 2]), 6.2831854820251465);
 if (!(d4 < -3.1415927410125732)) {
  if (d4 > 3.1415927410125732) d4 = d4 + -6.2831854820251465;
 } else d4 = d4 + 6.2831854820251465;
 HEAPF32[i1 + 200 >> 2] = d4;
 d4 = +_fmodf(+(+HEAPF32[i3 + 688 >> 2] + +HEAPF32[i3 + 692 >> 2]), 6.2831854820251465);
 if (d4 < -3.1415927410125732) {
  d4 = d4 + 6.2831854820251465;
  i5 = i1 + 204 | 0;
  HEAPF32[i5 >> 2] = d4;
  i5 = i3 + 696 | 0;
  d4 = +HEAPF32[i5 >> 2];
  i5 = i1 + 208 | 0;
  HEAPF32[i5 >> 2] = d4;
  i5 = i3 + 700 | 0;
  d4 = +HEAPF32[i5 >> 2];
  i5 = i1 + 212 | 0;
  HEAPF32[i5 >> 2] = d4;
  i5 = i3 + 704 | 0;
  d4 = +HEAPF32[i5 >> 2];
  i5 = i1 + 216 | 0;
  HEAPF32[i5 >> 2] = d4;
  STACKTOP = i2;
  return 2592;
 }
 if (!(d4 > 3.1415927410125732)) {
  i5 = i1 + 204 | 0;
  HEAPF32[i5 >> 2] = d4;
  i5 = i3 + 696 | 0;
  d4 = +HEAPF32[i5 >> 2];
  i5 = i1 + 208 | 0;
  HEAPF32[i5 >> 2] = d4;
  i5 = i3 + 700 | 0;
  d4 = +HEAPF32[i5 >> 2];
  i5 = i1 + 212 | 0;
  HEAPF32[i5 >> 2] = d4;
  i5 = i3 + 704 | 0;
  d4 = +HEAPF32[i5 >> 2];
  i5 = i1 + 216 | 0;
  HEAPF32[i5 >> 2] = d4;
  STACKTOP = i2;
  return 2592;
 }
 d4 = d4 + -6.2831854820251465;
 i5 = i1 + 204 | 0;
 HEAPF32[i5 >> 2] = d4;
 i5 = i3 + 696 | 0;
 d4 = +HEAPF32[i5 >> 2];
 i5 = i1 + 208 | 0;
 HEAPF32[i5 >> 2] = d4;
 i5 = i3 + 700 | 0;
 d4 = +HEAPF32[i5 >> 2];
 i5 = i1 + 212 | 0;
 HEAPF32[i5 >> 2] = d4;
 i5 = i3 + 704 | 0;
 d4 = +HEAPF32[i5 >> 2];
 i5 = i1 + 216 | 0;
 HEAPF32[i5 >> 2] = d4;
 STACKTOP = i2;
 return 2592;
}
function __ZN20btAlignedObjectArrayI12btSolverBodyE6expandERKS0_(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i4 | 0) == (HEAP32[i1 + 8 >> 2] | 0) ? (i5 = (i4 | 0) == 0 ? 1 : i4 << 1, (i4 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) {
   i6 = 0;
   i7 = i4;
  } else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i6 = _malloc((i5 * 244 | 3) + 16 | 0) | 0;
   if ((i6 | 0) == 0) i6 = 0; else {
    HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
    i6 = i6 + 19 & -16;
   }
   i7 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i7 | 0) > 0) {
   i8 = 0;
   do {
    i10 = i6 + (i8 * 244 | 0) | 0;
    i9 = HEAP32[i1 + 12 >> 2] | 0;
    i11 = i9 + (i8 * 244 | 0) | 0;
    HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    i10 = i6 + (i8 * 244 | 0) + 16 | 0;
    i11 = i9 + (i8 * 244 | 0) + 16 | 0;
    HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    i10 = i6 + (i8 * 244 | 0) + 32 | 0;
    i11 = i9 + (i8 * 244 | 0) + 32 | 0;
    HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    i10 = i6 + (i8 * 244 | 0) + 48 | 0;
    i11 = i9 + (i8 * 244 | 0) + 48 | 0;
    HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
    _memcpy(i6 + (i8 * 244 | 0) + 64 | 0, i9 + (i8 * 244 | 0) + 64 | 0, 180) | 0;
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i7 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i6;
  HEAP32[i1 + 8 >> 2] = i5;
  i5 = HEAP32[i1 + 4 >> 2] | 0;
 } else i5 = i4;
 HEAP32[i1 + 4 >> 2] = i5 + 1;
 i11 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i11 + (i4 * 244 | 0) + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 28 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 32 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 36 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 40 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 44 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 48 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 52 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 56 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i11 + (i4 * 244 | 0) + 60 >> 2] = HEAP32[i3 + 60 >> 2];
 _memcpy(i11 + (i4 * 244 | 0) + 64 | 0, i3 + 64 | 0, 180) | 0;
 STACKTOP = i2;
 return (HEAP32[i1 + 12 >> 2] | 0) + (i4 * 244 | 0) | 0;
}
function __ZNK15btCompoundShape9serializeEPvP12btSerializer(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 31](i1, i4) | 0;
 i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, i5) | 0;
 HEAP32[i3 >> 2] = i8;
 if ((i8 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1, i5);
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAPF32[i3 + 20 >> 2] = +HEAPF32[i4 + 72 >> 2];
 i5 = HEAP32[i4 + 16 >> 2] | 0;
 HEAP32[i3 + 16 >> 2] = i5;
 HEAP32[i3 + 12 >> 2] = 0;
 if ((i5 | 0) == 0) {
  STACKTOP = i2;
  return 9616;
 }
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 76, i5) | 0;
 i8 = HEAP32[i5 + 8 >> 2] | 0;
 i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, i8) | 0;
 HEAP32[i3 + 12 >> 2] = i7;
 if ((HEAP32[i3 + 16 >> 2] | 0) > 0) {
  i7 = HEAP32[i4 + 24 >> 2] | 0;
  i6 = 0;
  while (1) {
   HEAPF32[i8 + 72 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 72 >> 2];
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i7 + (i6 * 80 | 0) + 64 >> 2] | 0) | 0;
   HEAP32[i8 + 64 >> 2] = i7;
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, HEAP32[(HEAP32[i4 + 24 >> 2] | 0) + (i6 * 80 | 0) + 64 >> 2] | 0) | 0) == 0) {
    i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
    i9 = HEAP32[(HEAP32[i4 + 24 >> 2] | 0) + (i6 * 80 | 0) + 64 >> 2] | 0;
    i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] & 127](i9) | 0;
    i9 = FUNCTION_TABLE_iiii[i7 & 31](i1, i9, 1) | 0;
    i7 = HEAP32[(HEAP32[i4 + 24 >> 2] | 0) + (i6 * 80 | 0) + 64 >> 2] | 0;
    i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 56 >> 2] & 31](i7, HEAP32[i9 + 8 >> 2] | 0, i1) | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i9, i7, 1346455635, HEAP32[(HEAP32[i4 + 24 >> 2] | 0) + (i6 * 80 | 0) + 64 >> 2] | 0);
   }
   i7 = HEAP32[i4 + 24 >> 2] | 0;
   HEAP32[i8 + 68 >> 2] = HEAP32[i7 + (i6 * 80 | 0) + 68 >> 2];
   HEAPF32[i8 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) >> 2];
   HEAPF32[i8 + 4 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 4 >> 2];
   HEAPF32[i8 + 8 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 8 >> 2];
   HEAPF32[i8 + 12 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 12 >> 2];
   HEAPF32[i8 + 16 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 16 >> 2];
   HEAPF32[i8 + 20 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 20 >> 2];
   HEAPF32[i8 + 24 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 24 >> 2];
   HEAPF32[i8 + 28 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 28 >> 2];
   HEAPF32[i8 + 32 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 32 >> 2];
   HEAPF32[i8 + 36 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 36 >> 2];
   HEAPF32[i8 + 40 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 40 >> 2];
   HEAPF32[i8 + 44 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 44 >> 2];
   HEAPF32[i8 + 48 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 48 >> 2];
   HEAPF32[i8 + 52 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 52 >> 2];
   HEAPF32[i8 + 56 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 56 >> 2];
   HEAPF32[i8 + 60 >> 2] = +HEAPF32[i7 + (i6 * 80 | 0) + 60 >> 2];
   i6 = i6 + 1 | 0;
   if ((i6 | 0) >= (HEAP32[i3 + 16 >> 2] | 0)) {
    i3 = i1;
    break;
   } else i8 = i8 + 76 | 0;
  }
 } else i3 = i1;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 31](i1, i5, 9584, 1497453121, HEAP32[i5 + 8 >> 2] | 0);
 STACKTOP = i2;
 return 9616;
}
function __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i9, i8, i1, i3) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 d4 = +HEAPF32[i9 + 20 >> 2];
 d18 = +HEAPF32[i9 + 40 >> 2];
 d13 = +HEAPF32[i9 + 24 >> 2];
 d16 = +HEAPF32[i9 + 36 >> 2];
 d17 = +HEAPF32[i9 + 32 >> 2];
 d5 = +HEAPF32[i9 + 16 >> 2];
 d10 = +HEAPF32[i9 >> 2];
 d6 = +HEAPF32[i9 + 4 >> 2];
 d14 = +HEAPF32[i9 + 8 >> 2];
 d11 = 1.0 / ((d4 * d18 - d13 * d16) * d10 + d6 * (d13 * d17 - d18 * d5) + (d16 * d5 - d4 * d17) * d14);
 d24 = +HEAPF32[i8 >> 2];
 d23 = +HEAPF32[i8 + 4 >> 2];
 d22 = +HEAPF32[i8 + 8 >> 2];
 d21 = +HEAPF32[i8 + 16 >> 2];
 d20 = +HEAPF32[i8 + 20 >> 2];
 d19 = +HEAPF32[i8 + 24 >> 2];
 d15 = +HEAPF32[i8 + 32 >> 2];
 d12 = +HEAPF32[i8 + 36 >> 2];
 d7 = +HEAPF32[i8 + 40 >> 2];
 HEAPF32[i2 + 16 >> 2] = (d4 * d18 - d13 * d16) * d11 * d24 + (d13 * d17 - d18 * d5) * d11 * d23 + (d16 * d5 - d4 * d17) * d11 * d22;
 HEAPF32[i2 + 20 >> 2] = d24 * d11 * (d16 * d14 - d18 * d6) + d23 * d11 * (d18 * d10 - d17 * d14) + d11 * (d17 * d6 - d16 * d10) * d22;
 HEAPF32[i2 + 24 >> 2] = d24 * d11 * (d13 * d6 - d4 * d14) + d23 * d11 * (d5 * d14 - d13 * d10) + d11 * (d4 * d10 - d5 * d6) * d22;
 HEAPF32[i2 + 28 >> 2] = 0.0;
 HEAPF32[i2 + 32 >> 2] = (d4 * d18 - d13 * d16) * d11 * d21 + (d13 * d17 - d18 * d5) * d11 * d20 + (d16 * d5 - d4 * d17) * d11 * d19;
 HEAPF32[i2 + 36 >> 2] = d11 * (d16 * d14 - d18 * d6) * d21 + d11 * (d18 * d10 - d17 * d14) * d20 + d11 * (d17 * d6 - d16 * d10) * d19;
 HEAPF32[i2 + 40 >> 2] = d11 * (d13 * d6 - d4 * d14) * d21 + d11 * (d5 * d14 - d13 * d10) * d20 + d11 * (d4 * d10 - d5 * d6) * d19;
 HEAPF32[i2 + 44 >> 2] = 0.0;
 HEAPF32[i2 + 48 >> 2] = (d4 * d18 - d13 * d16) * d11 * d15 + (d13 * d17 - d18 * d5) * d11 * d12 + (d16 * d5 - d4 * d17) * d11 * d7;
 HEAPF32[i2 + 52 >> 2] = d11 * (d16 * d14 - d18 * d6) * d15 + d11 * (d18 * d10 - d17 * d14) * d12 + d11 * (d17 * d6 - d16 * d10) * d7;
 HEAPF32[i2 + 56 >> 2] = d11 * (d13 * d6 - d4 * d14) * d15 + d11 * (d5 * d14 - d13 * d10) * d12 + d11 * (d4 * d10 - d5 * d6) * d7;
 HEAPF32[i2 + 60 >> 2] = 0.0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i2 + 16 | 0, i2);
 d7 = +HEAPF32[i2 >> 2];
 d6 = +HEAPF32[i2 + 4 >> 2];
 d5 = +HEAPF32[i2 + 8 >> 2];
 d10 = +HEAPF32[i2 + 12 >> 2];
 d4 = 1.0 / +Math_sqrt(+(d7 * d7 + d6 * d6 + d5 * d5 + d10 * d10));
 HEAPF32[i2 >> 2] = d7 * d4;
 HEAPF32[i2 + 4 >> 2] = d6 * d4;
 HEAPF32[i2 + 8 >> 2] = d5 * d4;
 HEAPF32[i2 + 12 >> 2] = d10 * d4;
 d10 = d10 * d4 < -1.0 ? -1.0 : d10 * d4;
 d10 = +Math_acos(+(d10 > 1.0 ? 1.0 : d10)) * 2.0;
 HEAPF32[i3 >> 2] = d10;
 HEAPF32[i1 >> 2] = d7 * d4;
 HEAPF32[i1 + 4 >> 2] = d6 * d4;
 HEAPF32[i1 + 8 >> 2] = d5 * d4;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 if (d7 * d4 * d7 * d4 + d6 * d4 * d6 * d4 + d5 * d4 * d5 * d4 < 1.4210854715202004e-14) {
  HEAPF32[i1 >> 2] = 1.0;
  HEAPF32[i1 + 4 >> 2] = 0.0;
  HEAPF32[i1 + 8 >> 2] = 0.0;
  HEAPF32[i1 + 12 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 } else {
  d24 = 1.0 / +Math_sqrt(+(d7 * d4 * d7 * d4 + d6 * d4 * d6 * d4 + d5 * d4 * d5 * d4));
  HEAPF32[i1 >> 2] = d7 * d4 * d24;
  HEAPF32[i1 + 4 >> 2] = d24 * d6 * d4;
  HEAPF32[i1 + 8 >> 2] = d24 * d5 * d4;
  STACKTOP = i2;
  return;
 }
}
function __ZN23btDiscreteDynamicsWorld9serializeEP12btSerializer(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 511](i1);
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 104, 1) | 0;
 i5 = HEAP32[i4 + 8 >> 2] | 0;
 i6 = i5 + 0 | 0;
 i7 = i6 + 104 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i7 | 0));
 HEAPF32[i5 + 88 >> 2] = +HEAPF32[i2 + 248 >> 2];
 HEAPF32[i5 + 92 >> 2] = +HEAPF32[i2 + 252 >> 2];
 HEAPF32[i5 + 96 >> 2] = +HEAPF32[i2 + 256 >> 2];
 HEAPF32[i5 + 100 >> 2] = +HEAPF32[i2 + 260 >> 2];
 HEAPF32[i5 >> 2] = +HEAPF32[i2 + 92 >> 2];
 HEAPF32[i5 + 4 >> 2] = +HEAPF32[i2 + 96 >> 2];
 HEAPF32[i5 + 8 >> 2] = +HEAPF32[i2 + 100 >> 2];
 HEAPF32[i5 + 12 >> 2] = +HEAPF32[i2 + 104 >> 2];
 HEAPF32[i5 + 16 >> 2] = +HEAPF32[i2 + 108 >> 2];
 HEAPF32[i5 + 20 >> 2] = +HEAPF32[i2 + 116 >> 2];
 HEAPF32[i5 + 24 >> 2] = +HEAPF32[i2 + 120 >> 2];
 HEAPF32[i5 + 28 >> 2] = +HEAPF32[i2 + 124 >> 2];
 HEAPF32[i5 + 32 >> 2] = +HEAPF32[i2 + 128 >> 2];
 HEAPF32[i5 + 36 >> 2] = +HEAPF32[i2 + 132 >> 2];
 HEAPF32[i5 + 40 >> 2] = +HEAPF32[i2 + 140 >> 2];
 HEAPF32[i5 + 44 >> 2] = +HEAPF32[i2 + 144 >> 2];
 HEAPF32[i5 + 48 >> 2] = +HEAPF32[i2 + 148 >> 2];
 HEAPF32[i5 + 52 >> 2] = +HEAPF32[i2 + 152 >> 2];
 HEAPF32[i5 + 56 >> 2] = +HEAPF32[i2 + 168 >> 2];
 HEAPF32[i5 + 60 >> 2] = +HEAPF32[i2 + 172 >> 2];
 HEAP32[i5 + 64 >> 2] = HEAP32[i2 + 112 >> 2];
 HEAP32[i5 + 68 >> 2] = HEAP32[i2 + 156 >> 2];
 HEAP32[i5 + 72 >> 2] = HEAP32[i2 + 160 >> 2];
 HEAP32[i5 + 76 >> 2] = HEAP32[i2 + 164 >> 2];
 HEAP32[i5 + 80 >> 2] = HEAP32[i2 + 136 >> 2];
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i4, 1992, 1145853764, i5);
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i5 | 0) > 0) {
  i4 = 0;
  do {
   i6 = HEAP32[(HEAP32[i2 + 16 >> 2] | 0) + (i4 << 2) >> 2] | 0;
   if ((HEAP32[i6 + 236 >> 2] & 2 | 0) != 0) {
    i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 127](i6) | 0;
    i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i7, 1) | 0;
    i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] & 31](i6, HEAP32[i7 + 8 >> 2] | 0, i1) | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i7, i5, 1497645650, i6);
    i5 = HEAP32[i2 + 8 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i5 | 0));
 }
 if ((HEAP32[i2 + 212 >> 2] | 0) <= 0) {
  __ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer(i2, i1);
  i7 = HEAP32[i1 >> 2] | 0;
  i7 = i7 + 36 | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  FUNCTION_TABLE_vi[i7 & 511](i1);
  STACKTOP = i3;
  return;
 }
 i4 = 0;
 do {
  i7 = HEAP32[(HEAP32[i2 + 220 >> 2] | 0) + (i4 << 2) >> 2] | 0;
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0;
  i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i5, 1) | 0;
  i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 31](i7, HEAP32[i5 + 8 >> 2] | 0, i1) | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, i6, 1397641027, i7);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i2 + 212 >> 2] | 0));
 __ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer(i2, i1);
 i7 = HEAP32[i1 >> 2] | 0;
 i7 = i7 + 36 | 0;
 i7 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_vi[i7 & 511](i1);
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCache10growTablesEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 i2 = HEAP32[i1 + 36 >> 2] | 0;
 if ((i2 | 0) >= (i4 | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((i2 | 0) <= (i4 | 0)) {
  if ((HEAP32[i1 + 40 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i5 = 0;
    i7 = i2;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
    if ((i5 | 0) == 0) i5 = 0; else {
     HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
     i5 = i5 + 19 & -16;
    }
    i7 = HEAP32[i1 + 36 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i6 = 0;
    do {
     i8 = i5 + (i6 << 2) | 0;
     if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 44 >> 2] | 0) + (i6 << 2) >> 2];
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i7 | 0));
   }
   i6 = HEAP32[i1 + 44 >> 2] | 0;
   if ((i6 | 0) != 0) {
    if ((HEAP8[i1 + 48 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i6 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 44 >> 2] = 0;
   }
   HEAP8[i1 + 48 >> 0] = 1;
   HEAP32[i1 + 44 >> 2] = i5;
   HEAP32[i1 + 40 >> 2] = i4;
  } else i5 = HEAP32[i1 + 44 >> 2] | 0;
  i6 = i2;
  do {
   i7 = i5 + (i6 << 2) | 0;
   if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i4 | 0));
 }
 HEAP32[i1 + 36 >> 2] = i4;
 i5 = HEAP32[i1 + 56 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i1 + 60 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i6 = 0;
    i7 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
    if ((i6 | 0) == 0) i6 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i6 = i6 + 19 & -16;
    }
    i7 = HEAP32[i1 + 56 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i8 = 0;
    do {
     i9 = i6 + (i8 << 2) | 0;
     if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i1 + 64 >> 2] | 0) + (i8 << 2) >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i7 | 0));
   }
   i7 = HEAP32[i1 + 64 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i1 + 68 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 64 >> 2] = 0;
   }
   HEAP8[i1 + 68 >> 0] = 1;
   HEAP32[i1 + 64 >> 2] = i6;
   HEAP32[i1 + 60 >> 2] = i4;
  } else i6 = HEAP32[i1 + 64 >> 2] | 0;
  do {
   i7 = i6 + (i5 << 2) | 0;
   if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i1 + 56 >> 2] = i4;
 if ((i4 | 0) > 0) {
  _memset(HEAP32[i1 + 44 >> 2] | 0, -1, i4 << 2 | 0) | 0;
  _memset(HEAP32[i1 + 64 >> 2] | 0, -1, i4 << 2 | 0) | 0;
 }
 if ((i2 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 i4 = HEAP32[i1 + 64 >> 2] | 0;
 i7 = 0;
 do {
  i9 = HEAP32[(HEAP32[i6 + (i7 << 4) + 4 >> 2] | 0) + 12 >> 2] << 16 | HEAP32[(HEAP32[i6 + (i7 << 4) >> 2] | 0) + 12 >> 2];
  i9 = (i9 + ~(i9 << 15) >> 10 ^ i9 + ~(i9 << 15)) * 9 | 0;
  i9 = i5 + ((((i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11) >> 16 ^ (i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11)) & (HEAP32[i1 + 12 >> 2] | 0) + -1) << 2) | 0;
  HEAP32[i4 + (i7 << 2) >> 2] = HEAP32[i9 >> 2];
  HEAP32[i9 >> 2] = i7;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i2 | 0));
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCache20sortOverlappingPairsEP12btDispatcher(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP8[i1 + 16 >> 0] = 1;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i10 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i10 | 0) > 0) {
  i8 = 0;
  i4 = 0;
  i9 = 0;
  i5 = 0;
  while (1) {
   i6 = HEAP32[i2 + 16 >> 2] | 0;
   if ((i4 | 0) == (i9 | 0)) {
    i7 = (i9 | 0) == 0 ? 1 : i9 << 1;
    if ((i9 | 0) < (i7 | 0)) {
     if ((i7 | 0) != 0) {
      HEAP32[5004] = (HEAP32[5004] | 0) + 1;
      i8 = _malloc((i7 << 4 | 3) + 16 | 0) | 0;
      if ((i8 | 0) == 0) {
       i8 = 0;
       i9 = i4;
      } else {
       HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
       i8 = i8 + 19 & -16;
       i9 = i4;
      }
     } else i8 = 0;
     if ((i9 | 0) > 0) {
      i10 = 0;
      do {
       i11 = HEAP32[i1 + 12 >> 2] | 0;
       HEAP32[i8 + (i10 << 4) >> 2] = HEAP32[i11 + (i10 << 4) >> 2];
       HEAP32[i8 + (i10 << 4) + 4 >> 2] = HEAP32[i11 + (i10 << 4) + 4 >> 2];
       HEAP32[i8 + (i10 << 4) + 8 >> 2] = HEAP32[i11 + (i10 << 4) + 8 >> 2];
       HEAP32[i8 + (i10 << 4) + 12 >> 2] = HEAP32[i11 + (i10 << 4) + 12 >> 2];
       i10 = i10 + 1 | 0;
      } while ((i10 | 0) != (i9 | 0));
     }
     i10 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i10 | 0) == 0) i4 = i9; else {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i10 + -4 >> 2] | 0);
      HEAP32[i1 + 12 >> 2] = 0;
     }
     HEAP8[i1 + 16 >> 0] = 1;
     HEAP32[i1 + 12 >> 2] = i8;
     HEAP32[i1 + 8 >> 2] = i7;
     i10 = HEAP32[i2 + 8 >> 2] | 0;
     i9 = i4;
    } else i7 = i9;
   } else {
    i7 = i9;
    i9 = i4;
   }
   HEAP32[i8 + (i9 << 4) >> 2] = HEAP32[i6 + (i5 << 4) >> 2];
   HEAP32[i8 + (i9 << 4) + 4 >> 2] = HEAP32[i6 + (i5 << 4) + 4 >> 2];
   HEAP32[i8 + (i9 << 4) + 8 >> 2] = HEAP32[i6 + (i5 << 4) + 8 >> 2];
   HEAP32[i8 + (i9 << 4) + 12 >> 2] = HEAP32[i6 + (i5 << 4) + 12 >> 2];
   i4 = i9 + 1 | 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i10 | 0)) break; else i9 = i7;
  }
  HEAP32[i1 + 4 >> 2] = i4;
  if ((i9 | 0) > -1) {
   i5 = 0;
   do {
    FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 31](i2, HEAP32[i8 + (i5 << 4) >> 2] | 0, HEAP32[i8 + (i5 << 4) + 4 >> 2] | 0, i3) | 0;
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i4 | 0));
  }
 } else i4 = 0;
 if ((HEAP32[i2 + 56 >> 2] | 0) > 0) {
  i3 = HEAP32[i2 + 64 >> 2] | 0;
  i5 = 0;
  do {
   HEAP32[i3 + (i5 << 2) >> 2] = -1;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i2 + 56 >> 2] | 0));
 }
 if ((i4 | 0) > 1) {
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvRKT_ii(i1, 0, i4 + -1 | 0);
  i4 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if ((i4 | 0) > 0) {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = 0;
  do {
   FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, HEAP32[i3 + (i5 << 4) >> 2] | 0, HEAP32[i3 + (i5 << 4) + 4 >> 2] | 0) | 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (i4 | 0));
 } else i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function __ZN23btHashedSimplePairCache10growTablesEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 i2 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i2 | 0) >= (i4 | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((i2 | 0) <= (i4 | 0)) {
  if ((HEAP32[i1 + 36 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i5 = 0;
    i7 = i2;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
    if ((i5 | 0) == 0) i5 = 0; else {
     HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
     i5 = i5 + 19 & -16;
    }
    i7 = HEAP32[i1 + 32 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i6 = 0;
    do {
     i8 = i5 + (i6 << 2) | 0;
     if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 40 >> 2] | 0) + (i6 << 2) >> 2];
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i7 | 0));
   }
   i6 = HEAP32[i1 + 40 >> 2] | 0;
   if ((i6 | 0) != 0) {
    if ((HEAP8[i1 + 44 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i6 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 40 >> 2] = 0;
   }
   HEAP8[i1 + 44 >> 0] = 1;
   HEAP32[i1 + 40 >> 2] = i5;
   HEAP32[i1 + 36 >> 2] = i4;
  } else i5 = HEAP32[i1 + 40 >> 2] | 0;
  i6 = i2;
  do {
   i7 = i5 + (i6 << 2) | 0;
   if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i4 | 0));
 }
 HEAP32[i1 + 32 >> 2] = i4;
 i5 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i5 | 0) < (i4 | 0)) {
  if ((HEAP32[i1 + 56 >> 2] | 0) < (i4 | 0)) {
   if ((i4 | 0) == 0) {
    i6 = 0;
    i7 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i6 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
    if ((i6 | 0) == 0) i6 = 0; else {
     HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
     i6 = i6 + 19 & -16;
    }
    i7 = HEAP32[i1 + 52 >> 2] | 0;
   }
   if ((i7 | 0) > 0) {
    i8 = 0;
    do {
     i9 = i6 + (i8 << 2) | 0;
     if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i1 + 60 >> 2] | 0) + (i8 << 2) >> 2];
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i7 | 0));
   }
   i7 = HEAP32[i1 + 60 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i1 + 64 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 60 >> 2] = 0;
   }
   HEAP8[i1 + 64 >> 0] = 1;
   HEAP32[i1 + 60 >> 2] = i6;
   HEAP32[i1 + 56 >> 2] = i4;
  } else i6 = HEAP32[i1 + 60 >> 2] | 0;
  do {
   i7 = i6 + (i5 << 2) | 0;
   if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 HEAP32[i1 + 52 >> 2] = i4;
 if ((i4 | 0) > 0) {
  _memset(HEAP32[i1 + 40 >> 2] | 0, -1, i4 << 2 | 0) | 0;
  _memset(HEAP32[i1 + 60 >> 2] | 0, -1, i4 << 2 | 0) | 0;
 }
 if ((i2 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 40 >> 2] | 0;
 i4 = HEAP32[i1 + 60 >> 2] | 0;
 i7 = 0;
 do {
  i9 = HEAP32[i6 + (i7 * 12 | 0) + 4 >> 2] << 16 | HEAP32[i6 + (i7 * 12 | 0) >> 2];
  i9 = (i9 + ~(i9 << 15) >> 10 ^ i9 + ~(i9 << 15)) * 9 | 0;
  i9 = i5 + ((((i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11) >> 16 ^ (i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11)) & (HEAP32[i1 + 12 >> 2] | 0) + -1) << 2) | 0;
  HEAP32[i4 + (i7 << 2) >> 2] = HEAP32[i9 >> 2];
  HEAP32[i9 >> 2] = i7;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i2 | 0));
 STACKTOP = i3;
 return;
}
function __ZN23btPoint2PointConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 HEAPF32[i1 + 36 >> 2] = 0.0;
 HEAP32[i2 + 128 >> 2] = 0;
 HEAP32[i2 + 132 >> 2] = 0;
 HEAP32[i2 + 136 >> 2] = 0;
 HEAP32[i2 + 140 >> 2] = 0;
 i3 = 0;
 do {
  i4 = i2 + 128 + (i3 << 2) | 0;
  HEAPF32[i4 >> 2] = 1.0;
  i6 = HEAP32[i1 + 28 >> 2] | 0;
  d30 = +HEAPF32[i6 + 4 >> 2];
  HEAPF32[i2 + 80 >> 2] = d30;
  d26 = +HEAPF32[i6 + 20 >> 2];
  HEAPF32[i2 + 84 >> 2] = d26;
  d7 = +HEAPF32[i6 + 36 >> 2];
  HEAPF32[i2 + 88 >> 2] = d7;
  HEAPF32[i2 + 92 >> 2] = 0.0;
  d29 = +HEAPF32[i6 + 8 >> 2];
  HEAPF32[i2 + 96 >> 2] = d29;
  d25 = +HEAPF32[i6 + 24 >> 2];
  HEAPF32[i2 + 100 >> 2] = d25;
  d18 = +HEAPF32[i6 + 40 >> 2];
  HEAPF32[i2 + 104 >> 2] = d18;
  HEAPF32[i2 + 108 >> 2] = 0.0;
  d28 = +HEAPF32[i6 + 12 >> 2];
  HEAPF32[i2 + 112 >> 2] = d28;
  d24 = +HEAPF32[i6 + 28 >> 2];
  HEAPF32[i2 + 116 >> 2] = d24;
  d11 = +HEAPF32[i6 + 44 >> 2];
  HEAPF32[i2 + 120 >> 2] = d11;
  HEAPF32[i2 + 124 >> 2] = 0.0;
  i5 = HEAP32[i1 + 32 >> 2] | 0;
  d21 = +HEAPF32[i5 + 4 >> 2];
  HEAPF32[i2 + 32 >> 2] = d21;
  d17 = +HEAPF32[i5 + 20 >> 2];
  HEAPF32[i2 + 36 >> 2] = d17;
  d12 = +HEAPF32[i5 + 36 >> 2];
  HEAPF32[i2 + 40 >> 2] = d12;
  HEAPF32[i2 + 44 >> 2] = 0.0;
  d20 = +HEAPF32[i5 + 8 >> 2];
  HEAPF32[i2 + 48 >> 2] = d20;
  d16 = +HEAPF32[i5 + 24 >> 2];
  HEAPF32[i2 + 52 >> 2] = d16;
  d10 = +HEAPF32[i5 + 40 >> 2];
  HEAPF32[i2 + 56 >> 2] = d10;
  HEAPF32[i2 + 60 >> 2] = 0.0;
  d19 = +HEAPF32[i5 + 12 >> 2];
  HEAPF32[i2 + 64 >> 2] = d19;
  d15 = +HEAPF32[i5 + 28 >> 2];
  HEAPF32[i2 + 68 >> 2] = d15;
  d8 = +HEAPF32[i5 + 44 >> 2];
  HEAPF32[i2 + 72 >> 2] = d8;
  HEAPF32[i2 + 76 >> 2] = 0.0;
  d22 = +HEAPF32[i1 + 300 >> 2];
  d14 = +HEAPF32[i1 + 304 >> 2];
  d9 = +HEAPF32[i1 + 308 >> 2];
  d27 = +HEAPF32[i6 + 52 >> 2];
  d23 = +HEAPF32[i6 + 56 >> 2];
  d13 = +HEAPF32[i6 + 60 >> 2];
  HEAPF32[i2 + 16 >> 2] = d22 * d30 + d14 * d29 + d9 * d28 + d27 - d27;
  HEAPF32[i2 + 20 >> 2] = d22 * d26 + d14 * d25 + d9 * d24 + d23 - d23;
  HEAPF32[i2 + 24 >> 2] = d22 * d7 + d14 * d18 + d9 * d11 + d13 - d13;
  HEAPF32[i2 + 28 >> 2] = 0.0;
  d13 = +HEAPF32[i1 + 316 >> 2];
  d11 = +HEAPF32[i1 + 320 >> 2];
  d9 = +HEAPF32[i1 + 324 >> 2];
  d18 = +HEAPF32[i5 + 52 >> 2];
  d14 = +HEAPF32[i5 + 56 >> 2];
  d7 = +HEAPF32[i5 + 60 >> 2];
  HEAPF32[i2 >> 2] = d13 * d21 + d11 * d20 + d9 * d19 + d18 - d18;
  HEAPF32[i2 + 4 >> 2] = d13 * d17 + d11 * d16 + d9 * d15 + d14 - d14;
  HEAPF32[i2 + 8 >> 2] = d13 * d12 + d11 * d10 + d9 * d8 + d7 - d7;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  i6 = HEAP32[i1 + 28 >> 2] | 0;
  __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1 + (i3 * 84 | 0) + 48 | 0, i2 + 80 | 0, i2 + 32 | 0, i2 + 16 | 0, i2, i2 + 128 | 0, i6 + 396 | 0, +HEAPF32[i6 + 344 >> 2], i5 + 396 | 0, +HEAPF32[i5 + 344 >> 2]);
  HEAPF32[i4 >> 2] = 0.0;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 3);
 STACKTOP = i2;
 return;
}
function __ZN14btTriangleMeshC2Ebb(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAPF32[i1 + 4 >> 2] = 1.0;
 HEAPF32[i1 + 8 >> 2] = 1.0;
 HEAPF32[i1 + 12 >> 2] = 1.0;
 HEAPF32[i1 + 16 >> 2] = 0.0;
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 >> 2] = 17304;
 HEAP8[i1 + 100 >> 0] = 1;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP8[i1 + 120 >> 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP8[i1 + 140 >> 0] = 1;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 HEAP8[i1 + 160 >> 0] = 1;
 HEAP32[i1 + 156 >> 2] = 0;
 HEAP32[i1 + 148 >> 2] = 0;
 HEAP32[i1 + 152 >> 2] = 0;
 HEAP8[i1 + 164 >> 0] = i4 & 1;
 HEAP8[i1 + 165 >> 0] = i3 & 1;
 HEAPF32[i1 + 168 >> 2] = 0.0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(51) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i5 = 0;
  do {
   i6 = i3 + (i5 << 5) | 0;
   i7 = (HEAP32[i1 + 32 >> 2] | 0) + (i5 << 5) | 0;
   HEAP32[i6 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP32[i6 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
   HEAP32[i6 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
   HEAP32[i6 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
   HEAP32[i6 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 i4 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i4 | 0) != 0) {
  if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 32 >> 2] = 0;
 }
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = i3;
 HEAP32[i1 + 28 >> 2] = 1;
 i7 = HEAP32[i1 + 24 >> 2] | 0;
 HEAP32[i3 + (i7 << 5) >> 2] = 0;
 HEAP32[i3 + (i7 << 5) + 4 >> 2] = 0;
 HEAP32[i3 + (i7 << 5) + 8 >> 2] = 12;
 HEAP32[i3 + (i7 << 5) + 12 >> 2] = 0;
 HEAP32[i3 + (i7 << 5) + 16 >> 2] = 0;
 HEAP32[i3 + (i7 << 5) + 20 >> 2] = 16;
 HEAP32[i3 + (i7 << 5) + 24 >> 2] = 2;
 HEAP32[i3 + (i7 << 5) + 28 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = (HEAP32[i1 + 24 >> 2] | 0) + 1;
 if ((HEAP8[i1 + 164 >> 0] | 0) == 0) {
  i3 = HEAP32[i1 + 32 >> 2] | 0;
  HEAP32[i3 >> 2] = (HEAP32[i1 + 148 >> 2] | 0) / 3 | 0;
  HEAP32[i3 + 4 >> 2] = 0;
  i3 = HEAP32[i1 + 32 >> 2] | 0;
  HEAP32[i3 + 24 >> 2] = 3;
  HEAP32[i3 + 8 >> 2] = 6;
 } else {
  i3 = HEAP32[i1 + 32 >> 2] | 0;
  HEAP32[i3 >> 2] = (HEAP32[i1 + 128 >> 2] | 0) / 3 | 0;
  HEAP32[i3 + 4 >> 2] = 0;
  i3 = HEAP32[i1 + 32 >> 2] | 0;
  HEAP32[i3 + 24 >> 2] = 2;
  HEAP32[i3 + 8 >> 2] = 12;
 }
 if ((HEAP8[i1 + 165 >> 0] | 0) == 0) {
  HEAP32[i3 + 12 >> 2] = (HEAP32[i1 + 108 >> 2] | 0) / 3 | 0;
  HEAP32[i3 + 16 >> 2] = 0;
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + 20 >> 2] = 12;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 88 >> 2];
  HEAP32[i3 + 16 >> 2] = 0;
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + 20 >> 2] = 16;
  STACKTOP = i2;
  return;
 }
}
function __ZN16btDbvtBroadphase11createProxyERK9btVector3S2_iPvssP12btDispatcherS3_(i1, i4, i5, i3, i6, i7, i8, i9, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(83) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAP32[i3 >> 2] = i6;
 HEAP16[i3 + 4 >> 1] = i7;
 HEAP16[i3 + 6 >> 1] = i8;
 i6 = i3 + 16 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i6 = i3 + 32 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i3 + 8 >> 2] = 0;
 i6 = i3 + 56 | 0;
 HEAP32[i6 >> 2] = 0;
 i7 = i3 + 52 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i3 + 60 >> 2] = HEAP32[i1 + 144 >> 2];
 i4 = (HEAP32[i1 + 188 >> 2] | 0) + 1 | 0;
 HEAP32[i1 + 188 >> 2] = i4;
 HEAP32[i3 + 12 >> 2] = i4;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i4 | 0) == 0) {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i4 = _malloc(63) | 0;
  if ((i4 | 0) != 0 ? (HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4, (i4 + 19 & -16 | 0) != 0) : 0) {
   i8 = (i4 + 19 & -16) + 0 | 0;
   i5 = i8 + 44 | 0;
   do {
    HEAP32[i8 >> 2] = 0;
    i8 = i8 + 4 | 0;
   } while ((i8 | 0) < (i5 | 0));
   i4 = i4 + 19 & -16;
  } else i4 = 0;
 } else HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP32[i4 + 36 >> 2] = i3;
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i4 + 28 >> 2] = HEAP32[i2 + 44 >> 2];
 __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i1 + 4 | 0, HEAP32[i1 + 4 >> 2] | 0, i4);
 HEAP32[i1 + 16 >> 2] = (HEAP32[i1 + 16 >> 2] | 0) + 1;
 HEAP32[i3 + 48 >> 2] = i4;
 i4 = i1 + (HEAP32[i1 + 144 >> 2] << 2) + 124 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) != 0) HEAP32[i5 + 52 >> 2] = i3;
 HEAP32[i4 >> 2] = i3;
 if ((HEAP8[i1 + 193 >> 0] | 0) != 0) {
  STACKTOP = i2;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = 11696;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i2 + 8 >> 2] = i3;
 __ZNK6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(HEAP32[i1 + 4 >> 2] | 0, i2 + 16 | 0, i2);
 __ZNK6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(HEAP32[i1 + 64 >> 2] | 0, i2 + 16 | 0, i2);
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN25btTriangleRaycastCallback15processTriangleEP9btVector3ii(i1, i6, i3, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, d5 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 d26 = +HEAPF32[i6 + 16 >> 2];
 d16 = +HEAPF32[i6 >> 2];
 d25 = +HEAPF32[i6 + 20 >> 2];
 d18 = +HEAPF32[i6 + 4 >> 2];
 d22 = +HEAPF32[i6 + 24 >> 2];
 d21 = +HEAPF32[i6 + 8 >> 2];
 d19 = +HEAPF32[i6 + 32 >> 2];
 d12 = +HEAPF32[i6 + 36 >> 2];
 d13 = +HEAPF32[i6 + 40 >> 2];
 d10 = (d25 - d18) * (d13 - d21) - (d22 - d21) * (d12 - d18);
 d8 = (d22 - d21) * (d19 - d16) - (d26 - d16) * (d13 - d21);
 d9 = (d26 - d16) * (d12 - d18) - (d25 - d18) * (d19 - d16);
 HEAPF32[i4 + 16 >> 2] = d10;
 HEAPF32[i4 + 20 >> 2] = d8;
 HEAPF32[i4 + 24 >> 2] = d9;
 HEAPF32[i4 + 28 >> 2] = 0.0;
 d23 = +HEAPF32[i1 + 4 >> 2];
 d20 = +HEAPF32[i1 + 8 >> 2];
 d14 = +HEAPF32[i1 + 12 >> 2];
 d5 = d10 * d23 + d8 * d20 + d9 * d14 - (d16 * d10 + d18 * d8 + d21 * d9);
 d24 = +HEAPF32[i1 + 20 >> 2];
 d17 = +HEAPF32[i1 + 24 >> 2];
 d15 = +HEAPF32[i1 + 28 >> 2];
 if (d5 * (d10 * d24 + d8 * d17 + d9 * d15 - (d16 * d10 + d18 * d8 + d21 * d9)) >= 0.0) {
  STACKTOP = i4;
  return;
 }
 i6 = HEAP32[i1 + 36 >> 2] | 0;
 if (!((i6 & 1 | 0) == 0 | !(d5 <= 0.0))) {
  STACKTOP = i4;
  return;
 }
 d7 = d5 / (d5 - (d10 * d24 + d8 * d17 + d9 * d15 - (d16 * d10 + d18 * d8 + d21 * d9)));
 if (!(d7 < +HEAPF32[i1 + 40 >> 2])) {
  STACKTOP = i4;
  return;
 }
 d11 = (d10 * d10 + d8 * d8 + d9 * d9) * -9999999747378752.0e-20;
 d16 = d16 - (d24 * d7 + d23 * (1.0 - d7));
 d18 = d18 - (d17 * d7 + d20 * (1.0 - d7));
 d21 = d21 - (d15 * d7 + d14 * (1.0 - d7));
 d26 = d26 - (d24 * d7 + d23 * (1.0 - d7));
 d25 = d25 - (d17 * d7 + d20 * (1.0 - d7));
 d22 = d22 - (d15 * d7 + d14 * (1.0 - d7));
 if (!(d9 * (d16 * d25 - d18 * d26) + (d10 * (d18 * d22 - d21 * d25) + d8 * (d21 * d26 - d16 * d22)) >= d11)) {
  STACKTOP = i4;
  return;
 }
 d19 = d19 - (d24 * d7 + d23 * (1.0 - d7));
 d12 = d12 - (d17 * d7 + d20 * (1.0 - d7));
 d13 = d13 - (d15 * d7 + d14 * (1.0 - d7));
 if (!(d9 * (d26 * d12 - d25 * d19) + (d10 * (d25 * d13 - d22 * d12) + d8 * (d22 * d19 - d26 * d13)) >= d11)) {
  STACKTOP = i4;
  return;
 }
 if (!(d9 * (d18 * d19 - d16 * d12) + (d10 * (d21 * d12 - d18 * d13) + d8 * (d16 * d13 - d21 * d19)) >= d11)) {
  STACKTOP = i4;
  return;
 }
 d11 = 1.0 / +Math_sqrt(+(d10 * d10 + d8 * d8 + d9 * d9));
 HEAPF32[i4 + 16 >> 2] = d10 * d11;
 HEAPF32[i4 + 20 >> 2] = d8 * d11;
 HEAPF32[i4 + 24 >> 2] = d9 * d11;
 i27 = HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0;
 if ((i6 & 2 | 0) != 0 | !(d5 <= 0.0)) {
  d26 = +FUNCTION_TABLE_diidii[i27 & 3](i1, i4 + 16 | 0, d7, i3, i2);
  HEAPF32[i1 + 40 >> 2] = d26;
  STACKTOP = i4;
  return;
 } else {
  HEAPF32[i4 >> 2] = -(d10 * d11);
  HEAPF32[i4 + 4 >> 2] = -(d8 * d11);
  HEAPF32[i4 + 8 >> 2] = -(d9 * d11);
  HEAPF32[i4 + 12 >> 2] = 0.0;
  d26 = +FUNCTION_TABLE_diidii[i27 & 3](i1, i4, d7, i3, i2);
  HEAPF32[i1 + 40 >> 2] = d26;
  STACKTOP = i4;
  return;
 }
}
function __ZNK6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(i12, i13, i2) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i4 = STACKTOP;
 if ((i12 | 0) == 0) {
  STACKTOP = i4;
  return;
 }
 d1 = +HEAPF32[i13 >> 2];
 d9 = +HEAPF32[i13 + 4 >> 2];
 d10 = +HEAPF32[i13 + 8 >> 2];
 d6 = +HEAPF32[i13 + 16 >> 2];
 d8 = +HEAPF32[i13 + 20 >> 2];
 d11 = +HEAPF32[i13 + 24 >> 2];
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i14 = _malloc(275) | 0;
 if ((i14 | 0) != 0) {
  HEAP32[(i14 + 19 & -16) + -4 >> 2] = i14;
  i13 = i14 + 19 & -16;
  if ((i14 + 19 & -16 | 0) != 0) HEAP32[i13 >> 2] = i12;
 } else i13 = 0;
 i17 = 64;
 i12 = 1;
 do {
  i15 = i12 + -1 | 0;
  i14 = HEAP32[i13 + (i15 << 2) >> 2] | 0;
  do if (((((+HEAPF32[i14 >> 2] <= d6 ? +HEAPF32[i14 + 16 >> 2] >= d1 : 0) ? +HEAPF32[i14 + 4 >> 2] <= d8 : 0) ? +HEAPF32[i14 + 20 >> 2] >= d9 : 0) ? +HEAPF32[i14 + 8 >> 2] <= d11 : 0) ? +HEAPF32[i14 + 24 >> 2] >= d10 : 0) {
   if ((HEAP32[i14 + 40 >> 2] | 0) == 0) {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i14);
    i12 = i15;
    break;
   }
   i16 = HEAP32[i14 + 36 >> 2] | 0;
   if ((i15 | 0) == (i17 | 0) ? (i3 = (i17 | 0) == 0 ? 1 : i17 << 1, (i12 | 0) <= (i3 | 0)) : 0) {
    if ((i3 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i7 = _malloc((i3 << 2 | 3) + 16 | 0) | 0, (i7 | 0) != 0) : 0) {
     HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
     i18 = i7 + 19 & -16;
    } else i18 = 0;
    if ((i17 | 0) > 0) {
     i20 = 0;
     do {
      i19 = i18 + (i20 << 2) | 0;
      if ((i19 | 0) != 0) HEAP32[i19 >> 2] = HEAP32[i13 + (i20 << 2) >> 2];
      i20 = i20 + 1 | 0;
     } while ((i20 | 0) != (i17 | 0));
    }
    if ((i13 | 0) == 0) {
     i17 = i3;
     i13 = i18;
    } else {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i13 + -4 >> 2] | 0);
     i17 = i3;
     i13 = i18;
    }
   }
   i15 = i13 + (i15 << 2) | 0;
   if ((i15 | 0) != 0) HEAP32[i15 >> 2] = i16;
   i14 = HEAP32[i14 + 40 >> 2] | 0;
   if ((i12 | 0) == (i17 | 0)) {
    i17 = (i12 | 0) == 0 ? 1 : i12 << 1;
    if ((i12 | 0) < (i17 | 0)) {
     if ((i17 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i5 = _malloc((i17 << 2 | 3) + 16 | 0) | 0, (i5 | 0) != 0) : 0) {
      HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
      i15 = i5 + 19 & -16;
     } else i15 = 0;
     if ((i12 | 0) > 0) {
      i16 = 0;
      do {
       i18 = i15 + (i16 << 2) | 0;
       if ((i18 | 0) != 0) HEAP32[i18 >> 2] = HEAP32[i13 + (i16 << 2) >> 2];
       i16 = i16 + 1 | 0;
      } while ((i16 | 0) != (i12 | 0));
     }
     if ((i13 | 0) == 0) i13 = i15; else {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i13 + -4 >> 2] | 0);
      i13 = i15;
     }
    } else i17 = i12;
   }
   i15 = i13 + (i12 << 2) | 0;
   if ((i15 | 0) != 0) HEAP32[i15 >> 2] = i14;
   i12 = i12 + 1 | 0;
  } else i12 = i15; while (0);
 } while ((i12 | 0) > 0);
 if ((i13 | 0) == 0) {
  STACKTOP = i4;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i13 + -4 >> 2] | 0);
 STACKTOP = i4;
 return;
}
function __ZNK11btRigidBody9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btCollisionObject9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 256 >> 2] = +HEAPF32[i2 + 264 >> 2];
 HEAPF32[i1 + 260 >> 2] = +HEAPF32[i2 + 268 >> 2];
 HEAPF32[i1 + 264 >> 2] = +HEAPF32[i2 + 272 >> 2];
 HEAPF32[i1 + 268 >> 2] = +HEAPF32[i2 + 276 >> 2];
 HEAPF32[i1 + 272 >> 2] = +HEAPF32[i2 + 280 >> 2];
 HEAPF32[i1 + 276 >> 2] = +HEAPF32[i2 + 284 >> 2];
 HEAPF32[i1 + 280 >> 2] = +HEAPF32[i2 + 288 >> 2];
 HEAPF32[i1 + 284 >> 2] = +HEAPF32[i2 + 292 >> 2];
 HEAPF32[i1 + 288 >> 2] = +HEAPF32[i2 + 296 >> 2];
 HEAPF32[i1 + 292 >> 2] = +HEAPF32[i2 + 300 >> 2];
 HEAPF32[i1 + 296 >> 2] = +HEAPF32[i2 + 304 >> 2];
 HEAPF32[i1 + 300 >> 2] = +HEAPF32[i2 + 308 >> 2];
 HEAPF32[i1 + 304 >> 2] = +HEAPF32[i2 + 312 >> 2];
 HEAPF32[i1 + 308 >> 2] = +HEAPF32[i2 + 316 >> 2];
 HEAPF32[i1 + 312 >> 2] = +HEAPF32[i2 + 320 >> 2];
 HEAPF32[i1 + 316 >> 2] = +HEAPF32[i2 + 324 >> 2];
 HEAPF32[i1 + 320 >> 2] = +HEAPF32[i2 + 328 >> 2];
 HEAPF32[i1 + 324 >> 2] = +HEAPF32[i2 + 332 >> 2];
 HEAPF32[i1 + 328 >> 2] = +HEAPF32[i2 + 336 >> 2];
 HEAPF32[i1 + 332 >> 2] = +HEAPF32[i2 + 340 >> 2];
 HEAPF32[i1 + 448 >> 2] = +HEAPF32[i2 + 344 >> 2];
 HEAPF32[i1 + 336 >> 2] = +HEAPF32[i2 + 544 >> 2];
 HEAPF32[i1 + 340 >> 2] = +HEAPF32[i2 + 548 >> 2];
 HEAPF32[i1 + 344 >> 2] = +HEAPF32[i2 + 552 >> 2];
 HEAPF32[i1 + 348 >> 2] = +HEAPF32[i2 + 556 >> 2];
 HEAPF32[i1 + 352 >> 2] = +HEAPF32[i2 + 348 >> 2];
 HEAPF32[i1 + 356 >> 2] = +HEAPF32[i2 + 352 >> 2];
 HEAPF32[i1 + 360 >> 2] = +HEAPF32[i2 + 356 >> 2];
 HEAPF32[i1 + 364 >> 2] = +HEAPF32[i2 + 360 >> 2];
 HEAPF32[i1 + 368 >> 2] = +HEAPF32[i2 + 364 >> 2];
 HEAPF32[i1 + 372 >> 2] = +HEAPF32[i2 + 368 >> 2];
 HEAPF32[i1 + 376 >> 2] = +HEAPF32[i2 + 372 >> 2];
 HEAPF32[i1 + 380 >> 2] = +HEAPF32[i2 + 376 >> 2];
 HEAPF32[i1 + 384 >> 2] = +HEAPF32[i2 + 380 >> 2];
 HEAPF32[i1 + 388 >> 2] = +HEAPF32[i2 + 384 >> 2];
 HEAPF32[i1 + 392 >> 2] = +HEAPF32[i2 + 388 >> 2];
 HEAPF32[i1 + 396 >> 2] = +HEAPF32[i2 + 392 >> 2];
 HEAPF32[i1 + 400 >> 2] = +HEAPF32[i2 + 396 >> 2];
 HEAPF32[i1 + 404 >> 2] = +HEAPF32[i2 + 400 >> 2];
 HEAPF32[i1 + 408 >> 2] = +HEAPF32[i2 + 404 >> 2];
 HEAPF32[i1 + 412 >> 2] = +HEAPF32[i2 + 408 >> 2];
 HEAPF32[i1 + 416 >> 2] = +HEAPF32[i2 + 412 >> 2];
 HEAPF32[i1 + 420 >> 2] = +HEAPF32[i2 + 416 >> 2];
 HEAPF32[i1 + 424 >> 2] = +HEAPF32[i2 + 420 >> 2];
 HEAPF32[i1 + 428 >> 2] = +HEAPF32[i2 + 424 >> 2];
 HEAPF32[i1 + 432 >> 2] = +HEAPF32[i2 + 428 >> 2];
 HEAPF32[i1 + 436 >> 2] = +HEAPF32[i2 + 432 >> 2];
 HEAPF32[i1 + 440 >> 2] = +HEAPF32[i2 + 436 >> 2];
 HEAPF32[i1 + 444 >> 2] = +HEAPF32[i2 + 440 >> 2];
 HEAPF32[i1 + 452 >> 2] = +HEAPF32[i2 + 444 >> 2];
 HEAPF32[i1 + 456 >> 2] = +HEAPF32[i2 + 448 >> 2];
 HEAP32[i1 + 484 >> 2] = HEAPU8[i2 + 452 >> 0];
 HEAPF32[i1 + 460 >> 2] = +HEAPF32[i2 + 456 >> 2];
 HEAPF32[i1 + 464 >> 2] = +HEAPF32[i2 + 460 >> 2];
 HEAPF32[i1 + 468 >> 2] = +HEAPF32[i2 + 464 >> 2];
 HEAPF32[i1 + 472 >> 2] = +HEAPF32[i2 + 468 >> 2];
 HEAPF32[i1 + 476 >> 2] = +HEAPF32[i2 + 472 >> 2];
 HEAPF32[i1 + 480 >> 2] = +HEAPF32[i2 + 476 >> 2];
 STACKTOP = i4;
 return 3952;
}
function __ZN34btSphereTriangleCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i3, i6, i5, i7, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i8 = 0, i9 = 0, d10 = 0.0, i11 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i4 = HEAP32[i3 + 12 >> 2] | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i8 = (HEAP8[i3 + 16 >> 0] | 0) != 0;
 i9 = i8 ? i5 : i6;
 i6 = i8 ? i6 : i5;
 i11 = HEAP32[i9 + 4 >> 2] | 0;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = i4;
 d10 = +HEAPF32[(HEAP32[i3 + 12 >> 2] | 0) + 752 >> 2];
 HEAP32[i1 + 136 >> 2] = 17768;
 HEAP32[i1 + 140 >> 2] = i11;
 HEAP32[i1 + 144 >> 2] = i5;
 HEAPF32[i1 + 148 >> 2] = d10;
 HEAPF32[i1 + 128 >> 2] = 999999984306749400.0;
 i5 = HEAP32[i9 + 12 >> 2] | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i5 + 28 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i5 + 44 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i5 + 52 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i5 + 56 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i5 + 60 >> 2];
 i6 = HEAP32[i6 + 12 >> 2] | 0;
 HEAP32[i1 + 64 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i6 + 16 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i6 + 20 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i6 + 24 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i6 + 28 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i6 + 32 >> 2];
 HEAP32[i1 + 100 >> 2] = HEAP32[i6 + 36 >> 2];
 HEAP32[i1 + 104 >> 2] = HEAP32[i6 + 40 >> 2];
 HEAP32[i1 + 108 >> 2] = HEAP32[i6 + 44 >> 2];
 HEAP32[i1 + 112 >> 2] = HEAP32[i6 + 48 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i6 + 52 >> 2];
 HEAP32[i1 + 120 >> 2] = HEAP32[i6 + 56 >> 2];
 HEAP32[i1 + 124 >> 2] = HEAP32[i6 + 60 >> 2];
 __ZN22SphereTriangleDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1 + 136 | 0, i1, i2, HEAP32[i7 + 20 >> 2] | 0, i8);
 if ((HEAP8[i3 + 8 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 if ((HEAP32[i3 + 748 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i3 + 740 >> 2] | 0;
 i5 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0;
 if ((i4 | 0) == (i5 | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i4 + 4 | 0, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
  STACKTOP = i1;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i5 + 4 | 0);
  STACKTOP = i1;
  return;
 }
}
function __ZN23btGeneric6DofConstraint15setLinearLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_(i2, i1, i11, i5, i6, i7, i8, i9, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i3 = 0, i10 = 0, i12 = 0, i13 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 HEAPF32[i3 + 76 >> 2] = 0.0;
 HEAPF32[i3 + 24 >> 2] = 0.0;
 HEAPF32[i3 + 28 >> 2] = .10000000149011612;
 HEAPF32[i3 + 32 >> 2] = 300.0;
 HEAPF32[i3 + 16 >> 2] = 1.0;
 HEAPF32[i3 + 20 >> 2] = -1.0;
 HEAPF32[i3 + 44 >> 2] = 0.0;
 HEAPF32[i3 + 48 >> 2] = .20000000298023224;
 HEAPF32[i3 + 52 >> 2] = 0.0;
 HEAPF32[i3 + 56 >> 2] = 0.0;
 HEAPF32[i3 + 36 >> 2] = 1.0;
 HEAPF32[i3 + 40 >> 2] = .5;
 HEAP32[i3 + 72 >> 2] = 0;
 HEAPF32[i3 + 64 >> 2] = 0.0;
 HEAP8[i3 + 60 >> 0] = 0;
 i10 = 0;
 do {
  i13 = HEAP32[i2 + (i10 << 2) + 856 >> 2] | 0;
  i12 = HEAP8[i2 + i10 + 788 >> 0] | 0;
  do if (!((i13 | 0) == 0 & i12 << 24 >> 24 == 0)) {
   HEAPF32[i3 + 56 >> 2] = 0.0;
   HEAP32[i3 + 72 >> 2] = i13;
   HEAPF32[i3 + 68 >> 2] = +HEAPF32[i2 + (i10 << 2) + 840 >> 2];
   HEAPF32[i3 + 64 >> 2] = +HEAPF32[i2 + (i10 << 2) + 824 >> 2];
   HEAPF32[i3 + 36 >> 2] = +HEAPF32[i2 + 732 >> 2];
   HEAP8[i3 + 60 >> 0] = i12;
   HEAPF32[i3 + 20 >> 2] = +HEAPF32[i2 + (i10 << 2) + 696 >> 2];
   HEAPF32[i3 + 40 >> 2] = +HEAPF32[i2 + 728 >> 2];
   HEAPF32[i3 + 16 >> 2] = +HEAPF32[i2 + (i10 << 2) + 680 >> 2];
   HEAPF32[i3 + 32 >> 2] = 0.0;
   HEAPF32[i3 + 28 >> 2] = +HEAPF32[i2 + (i10 << 2) + 808 >> 2];
   HEAPF32[i3 + 24 >> 2] = +HEAPF32[i2 + (i10 << 2) + 792 >> 2];
   HEAPF32[i3 >> 2] = +HEAPF32[i2 + (i10 << 2) + 1064 >> 2];
   HEAPF32[i3 + 4 >> 2] = +HEAPF32[i2 + (i10 << 2) + 1080 >> 2];
   HEAPF32[i3 + 8 >> 2] = +HEAPF32[i2 + (i10 << 2) + 1096 >> 2];
   HEAPF32[i3 + 12 >> 2] = 0.0;
   i12 = HEAP32[i2 + 1304 >> 2] >> i10 * 3;
   if ((i12 & 1 | 0) == 0) i13 = HEAP32[i1 + 32 >> 2] | 0; else i13 = i2 + (i10 << 2) + 740 | 0;
   HEAPF32[i3 + 44 >> 2] = +HEAPF32[i13 >> 2];
   if ((i12 & 2 | 0) == 0) i13 = HEAP32[i1 + 32 >> 2] | 0; else i13 = i2 + (i10 << 2) + 772 | 0;
   HEAPF32[i3 + 52 >> 2] = +HEAPF32[i13 >> 2];
   if ((i12 & 4 | 0) == 0) i12 = i1 + 4 | 0; else i12 = i2 + (i10 << 2) + 756 | 0;
   HEAPF32[i3 + 48 >> 2] = +HEAPF32[i12 >> 2];
   if ((HEAP8[i2 + 1301 >> 0] | 0) == 0) {
    i11 = (__ZN23btGeneric6DofConstraint21get_limit_motor_info2EP22btRotationalLimitMotorRK11btTransformS4_RK9btVector3S7_S7_S7_PN17btTypedConstraint17btConstraintInfo2EiRS5_ii(i2, i3 + 16 | 0, i5, i6, i7, i8, i9, i4, i1, i11, i3, 0, 0) | 0) + i11 | 0;
    break;
   }
   i13 = i10 + 1 | 0;
   if ((HEAP32[i2 + (((i13 | 0) == 3 ? 0 : i13) << 6) + 924 >> 2] | 0) == 0) i12 = 1; else i12 = (HEAP32[i2 + (((i10 + 2 | 0) % 3 | 0) << 6) + 924 >> 2] | 0) == 0 & 1;
   i11 = (__ZN23btGeneric6DofConstraint21get_limit_motor_info2EP22btRotationalLimitMotorRK11btTransformS4_RK9btVector3S7_S7_S7_PN17btTypedConstraint17btConstraintInfo2EiRS5_ii(i2, i3 + 16 | 0, i5, i6, i7, i8, i9, i4, i1, i11, i3, 0, i12) | 0) + i11 | 0;
  } while (0);
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != 3);
 STACKTOP = i3;
 return i11 | 0;
}
function __ZN35btSequentialImpulseConstraintSolverD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 4024;
 i3 = HEAP32[i1 + 176 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 180 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 176 >> 2] = 0;
 }
 HEAP8[i1 + 180 >> 0] = 1;
 HEAP32[i1 + 176 >> 2] = 0;
 HEAP32[i1 + 168 >> 2] = 0;
 HEAP32[i1 + 172 >> 2] = 0;
 i3 = HEAP32[i1 + 156 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 160 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 156 >> 2] = 0;
 }
 HEAP8[i1 + 160 >> 0] = 1;
 HEAP32[i1 + 156 >> 2] = 0;
 HEAP32[i1 + 148 >> 2] = 0;
 HEAP32[i1 + 152 >> 2] = 0;
 i3 = HEAP32[i1 + 136 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 140 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 136 >> 2] = 0;
 }
 HEAP8[i1 + 140 >> 0] = 1;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 i3 = HEAP32[i1 + 116 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 120 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 116 >> 2] = 0;
 }
 HEAP8[i1 + 120 >> 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i3 = HEAP32[i1 + 96 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 100 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 96 >> 2] = 0;
 }
 HEAP8[i1 + 100 >> 0] = 1;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 i3 = HEAP32[i1 + 76 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 80 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 76 >> 2] = 0;
 }
 HEAP8[i1 + 80 >> 0] = 1;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 i3 = HEAP32[i1 + 56 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 60 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 56 >> 2] = 0;
 }
 HEAP8[i1 + 60 >> 0] = 1;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 40 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 36 >> 2] = 0;
 }
 HEAP8[i1 + 40 >> 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i3 = i1 + 12 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_(i1, i5, i7, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 d3 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 i4 = 0;
 do {
  i14 = i2 + 80 + (i4 << 2) | 0;
  HEAP32[i2 + 80 >> 2] = 0;
  HEAP32[i2 + 84 >> 2] = 0;
  HEAP32[i2 + 88 >> 2] = 0;
  HEAP32[i2 + 92 >> 2] = 0;
  HEAPF32[i14 >> 2] = 1.0;
  i8 = HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] | 0;
  d9 = +HEAPF32[i2 + 80 >> 2];
  d10 = +HEAPF32[i2 + 84 >> 2];
  d11 = +HEAPF32[i2 + 88 >> 2];
  d12 = d9 * +HEAPF32[i5 + 4 >> 2] + d10 * +HEAPF32[i5 + 20 >> 2] + d11 * +HEAPF32[i5 + 36 >> 2];
  d13 = d9 * +HEAPF32[i5 + 8 >> 2] + d10 * +HEAPF32[i5 + 24 >> 2] + d11 * +HEAPF32[i5 + 40 >> 2];
  HEAPF32[i2 + 48 >> 2] = +HEAPF32[i5 >> 2] * d9 + +HEAPF32[i5 + 16 >> 2] * d10 + +HEAPF32[i5 + 32 >> 2] * d11;
  HEAPF32[i2 + 52 >> 2] = d12;
  HEAPF32[i2 + 56 >> 2] = d13;
  HEAPF32[i2 + 60 >> 2] = 0.0;
  FUNCTION_TABLE_viii[i8 & 127](i2 + 64 | 0, i1, i2 + 48 | 0);
  d13 = +HEAPF32[i2 + 64 >> 2];
  d12 = +HEAPF32[i2 + 68 >> 2];
  d11 = +HEAPF32[i2 + 72 >> 2];
  d10 = d13 * +HEAPF32[i5 + 16 >> 2] + d12 * +HEAPF32[i5 + 20 >> 2] + d11 * +HEAPF32[i5 + 24 >> 2] + +HEAPF32[i5 + 52 >> 2];
  d9 = d13 * +HEAPF32[i5 + 32 >> 2] + d12 * +HEAPF32[i5 + 36 >> 2] + d11 * +HEAPF32[i5 + 40 >> 2] + +HEAPF32[i5 + 56 >> 2];
  HEAPF32[i2 + 32 >> 2] = d13 * +HEAPF32[i5 >> 2] + d12 * +HEAPF32[i5 + 4 >> 2] + d11 * +HEAPF32[i5 + 8 >> 2] + +HEAPF32[i5 + 48 >> 2];
  HEAPF32[i2 + 36 >> 2] = d10;
  HEAPF32[i2 + 40 >> 2] = d9;
  HEAPF32[i2 + 44 >> 2] = 0.0;
  i8 = i2 + 32 + (i4 << 2) | 0;
  HEAPF32[i6 + (i4 << 2) >> 2] = d3 + +HEAPF32[i8 >> 2];
  HEAPF32[i14 >> 2] = -1.0;
  i14 = HEAP32[(HEAP32[i1 >> 2] | 0) + 64 >> 2] | 0;
  d9 = +HEAPF32[i2 + 80 >> 2];
  d10 = +HEAPF32[i2 + 84 >> 2];
  d11 = +HEAPF32[i2 + 88 >> 2];
  d12 = d9 * +HEAPF32[i5 + 4 >> 2] + d10 * +HEAPF32[i5 + 20 >> 2] + d11 * +HEAPF32[i5 + 36 >> 2];
  d13 = d9 * +HEAPF32[i5 + 8 >> 2] + d10 * +HEAPF32[i5 + 24 >> 2] + d11 * +HEAPF32[i5 + 40 >> 2];
  HEAPF32[i2 >> 2] = +HEAPF32[i5 >> 2] * d9 + +HEAPF32[i5 + 16 >> 2] * d10 + +HEAPF32[i5 + 32 >> 2] * d11;
  HEAPF32[i2 + 4 >> 2] = d12;
  HEAPF32[i2 + 8 >> 2] = d13;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viii[i14 & 127](i2 + 16 | 0, i1, i2);
  d13 = +HEAPF32[i2 + 16 >> 2];
  d12 = +HEAPF32[i2 + 20 >> 2];
  d11 = +HEAPF32[i2 + 24 >> 2];
  d10 = d13 * +HEAPF32[i5 + 16 >> 2] + d12 * +HEAPF32[i5 + 20 >> 2] + d11 * +HEAPF32[i5 + 24 >> 2] + +HEAPF32[i5 + 52 >> 2];
  d9 = d13 * +HEAPF32[i5 + 32 >> 2] + d12 * +HEAPF32[i5 + 36 >> 2] + d11 * +HEAPF32[i5 + 40 >> 2] + +HEAPF32[i5 + 56 >> 2];
  HEAPF32[i2 + 32 >> 2] = d13 * +HEAPF32[i5 >> 2] + d12 * +HEAPF32[i5 + 4 >> 2] + d11 * +HEAPF32[i5 + 8 >> 2] + +HEAPF32[i5 + 48 >> 2];
  HEAPF32[i2 + 36 >> 2] = d10;
  HEAPF32[i2 + 40 >> 2] = d9;
  HEAPF32[i2 + 44 >> 2] = 0.0;
  HEAPF32[i7 + (i4 << 2) >> 2] = +HEAPF32[i8 >> 2] - d3;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 3);
 STACKTOP = i2;
 return;
}
function __ZN23btConvexConvexAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i8, i1, i2, i3, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 d12 = +HEAPF32[i1 + 116 >> 2] - +HEAPF32[i1 + 52 >> 2];
 d11 = +HEAPF32[i1 + 120 >> 2] - +HEAPF32[i1 + 56 >> 2];
 d10 = +HEAPF32[i1 + 124 >> 2] - +HEAPF32[i1 + 60 >> 2];
 d6 = +HEAPF32[i2 + 116 >> 2] - +HEAPF32[i2 + 52 >> 2];
 d5 = +HEAPF32[i2 + 120 >> 2] - +HEAPF32[i2 + 56 >> 2];
 d4 = +HEAPF32[i2 + 124 >> 2] - +HEAPF32[i2 + 60 >> 2];
 d9 = +HEAPF32[i1 + 252 >> 2];
 if (d12 * d12 + d11 * d11 + d10 * d10 < d9 * d9 ? (d12 = +HEAPF32[i2 + 252 >> 2], d6 * d6 + d5 * d5 + d4 * d4 < d12 * d12) : 0) {
  d12 = 1.0;
  STACKTOP = i3;
  return +d12;
 }
 i8 = HEAP32[i1 + 192 >> 2] | 0;
 d12 = +HEAPF32[i2 + 248 >> 2];
 HEAP32[i3 + 576 >> 2] = 0;
 HEAPF32[i3 + 580 >> 2] = 1.0;
 HEAPF32[i3 + 584 >> 2] = 1.0;
 HEAPF32[i3 + 588 >> 2] = 1.0;
 HEAPF32[i3 + 592 >> 2] = 0.0;
 HEAP32[i3 + 568 >> 2] = 16680;
 HEAP32[i3 + 572 >> 2] = 8;
 HEAPF32[i3 + 596 >> 2] = d12;
 HEAPF32[i3 + 612 >> 2] = d12;
 HEAP32[i3 + 392 >> 2] = 9440;
 HEAPF32[i3 + 556 >> 2] = 999999984306749400.0;
 HEAP32[i3 + 560 >> 2] = 0;
 HEAPF32[i3 + 564 >> 2] = 0.0;
 HEAPF32[i3 + 340 >> 2] = 9999999747378752.0e-20;
 HEAP8[i3 + 364 >> 0] = 0;
 HEAP32[i3 + 16 >> 2] = 13184;
 HEAP32[i3 + 20 >> 2] = i3 + 32;
 HEAP32[i3 + 24 >> 2] = i8;
 HEAP32[i3 + 28 >> 2] = i3 + 568;
 if (__ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i3 + 16 | 0, i1 + 4 | 0, i1 + 68 | 0, i2 + 4 | 0, i2 + 68 | 0, i3 + 392 | 0) | 0) {
  d5 = +HEAPF32[i3 + 556 >> 2];
  if (+HEAPF32[i1 + 244 >> 2] > d5) HEAPF32[i1 + 244 >> 2] = d5;
  if (+HEAPF32[i2 + 244 >> 2] > d5) HEAPF32[i2 + 244 >> 2] = d5;
  if (!(d5 < 1.0)) d5 = 1.0;
 } else d5 = 1.0;
 i8 = HEAP32[i2 + 192 >> 2] | 0;
 d12 = +HEAPF32[i1 + 248 >> 2];
 HEAP32[i3 + 576 >> 2] = 0;
 HEAPF32[i3 + 580 >> 2] = 1.0;
 HEAPF32[i3 + 584 >> 2] = 1.0;
 HEAPF32[i3 + 588 >> 2] = 1.0;
 HEAPF32[i3 + 592 >> 2] = 0.0;
 HEAP32[i3 + 568 >> 2] = 16680;
 HEAP32[i3 + 572 >> 2] = 8;
 HEAPF32[i3 + 596 >> 2] = d12;
 HEAPF32[i3 + 612 >> 2] = d12;
 HEAP32[i3 + 392 >> 2] = 9440;
 HEAPF32[i3 + 556 >> 2] = 999999984306749400.0;
 HEAP32[i3 + 560 >> 2] = 0;
 HEAPF32[i3 + 564 >> 2] = 0.0;
 HEAPF32[i3 + 340 >> 2] = 9999999747378752.0e-20;
 HEAP8[i3 + 364 >> 0] = HEAP8[i3 + 364 >> 0] & -16;
 HEAP32[i3 >> 2] = 13184;
 HEAP32[i3 + 4 >> 2] = i3 + 32;
 HEAP32[i3 + 8 >> 2] = i3 + 568;
 HEAP32[i3 + 12 >> 2] = i8;
 if (!(__ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i3, i1 + 4 | 0, i1 + 68 | 0, i2 + 4 | 0, i2 + 68 | 0, i3 + 392 | 0) | 0)) {
  d12 = d5;
  STACKTOP = i3;
  return +d12;
 }
 d4 = +HEAPF32[i3 + 556 >> 2];
 if (+HEAPF32[i1 + 244 >> 2] > d4) HEAPF32[i1 + 244 >> 2] = d4;
 if (+HEAPF32[i2 + 244 >> 2] > d4) HEAPF32[i2 + 244 >> 2] = d4;
 if (!(d5 > d4)) {
  d12 = d5;
  STACKTOP = i3;
  return +d12;
 }
 d12 = d4;
 STACKTOP = i3;
 return +d12;
}
function __ZNK16btCollisionWorld7rayTestERK9btVector3S2_RNS_17RayResultCallbackE(i1, i5, i6, i14) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 HEAP32[i4 + 32 >> 2] = 7960;
 i3 = i4 + 68 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i2 = i4 + 84 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i4 + 244 >> 2] = i1;
 HEAP32[i4 + 248 >> 2] = i14;
 HEAPF32[i4 + 100 >> 2] = 1.0;
 HEAP32[i4 + 104 >> 2] = 0;
 HEAP32[i4 + 108 >> 2] = 0;
 HEAP32[i4 + 112 >> 2] = 0;
 HEAP32[i4 + 116 >> 2] = 0;
 HEAPF32[i4 + 120 >> 2] = 1.0;
 HEAP32[i4 + 124 >> 2] = 0;
 HEAP32[i4 + 128 >> 2] = 0;
 HEAP32[i4 + 132 >> 2] = 0;
 HEAP32[i4 + 136 >> 2] = 0;
 HEAPF32[i4 + 140 >> 2] = 1.0;
 HEAP32[i4 + 144 >> 2] = 0;
 HEAP32[i4 + 148 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i4 + 152 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 156 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 160 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i4 + 164 >> 2] = 1.0;
 HEAP32[i4 + 168 >> 2] = 0;
 HEAP32[i4 + 172 >> 2] = 0;
 HEAP32[i4 + 176 >> 2] = 0;
 HEAP32[i4 + 180 >> 2] = 0;
 HEAPF32[i4 + 184 >> 2] = 1.0;
 HEAP32[i4 + 188 >> 2] = 0;
 HEAP32[i4 + 192 >> 2] = 0;
 HEAP32[i4 + 196 >> 2] = 0;
 HEAP32[i4 + 200 >> 2] = 0;
 HEAPF32[i4 + 204 >> 2] = 1.0;
 HEAP32[i4 + 208 >> 2] = 0;
 HEAP32[i4 + 212 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i4 + 216 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i4 + 220 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i4 + 224 >> 2] = HEAP32[i6 + 12 >> 2];
 d10 = +HEAPF32[i6 >> 2] - +HEAPF32[i5 >> 2];
 d7 = +HEAPF32[i6 + 4 >> 2] - +HEAPF32[i5 + 4 >> 2];
 d13 = +HEAPF32[i6 + 8 >> 2] - +HEAPF32[i5 + 8 >> 2];
 d8 = 1.0 / +Math_sqrt(+(d10 * d10 + d7 * d7 + d13 * d13));
 if (d10 * d8 == 0.0) d12 = 999999984306749400.0; else d12 = 1.0 / (d10 * d8);
 HEAPF32[i4 + 36 >> 2] = d12;
 if (d7 * d8 == 0.0) d11 = 999999984306749400.0; else d11 = 1.0 / (d7 * d8);
 HEAPF32[i4 + 40 >> 2] = d11;
 if (d13 * d8 == 0.0) d9 = 999999984306749400.0; else d9 = 1.0 / (d13 * d8);
 HEAPF32[i4 + 44 >> 2] = d9;
 HEAP32[i4 + 52 >> 2] = d12 < 0.0 & 1;
 HEAP32[i4 + 56 >> 2] = d11 < 0.0 & 1;
 HEAP32[i4 + 60 >> 2] = d9 < 0.0 & 1;
 HEAPF32[i4 + 64 >> 2] = d10 * d8 * (+HEAPF32[i2 >> 2] - +HEAPF32[i3 >> 2]) + d7 * d8 * (+HEAPF32[i4 + 88 >> 2] - +HEAPF32[i4 + 72 >> 2]) + d13 * d8 * (+HEAPF32[i4 + 92 >> 2] - +HEAPF32[i4 + 76 >> 2]);
 i14 = HEAP32[i1 + 68 >> 2] | 0;
 i3 = HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 FUNCTION_TABLE_viiiiii[i3 & 7](i14, i5, i6, i4 + 32 | 0, i4 + 16 | 0, i4);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(627) | 0;
 if ((i6 | 0) == 0) i6 = 0; else {
  HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
  i6 = i6 + 19 & -16;
 }
 HEAP32[i6 + 4 >> 2] = 5;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 HEAPF32[i6 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i6 + 20 >> 0] = 1;
 HEAP8[i6 + 21 >> 0] = 0;
 HEAP32[i6 + 24 >> 2] = -1;
 HEAP32[i6 + 28 >> 2] = i1;
 HEAP32[i6 + 32 >> 2] = i3;
 HEAPF32[i6 + 36 >> 2] = 0.0;
 HEAPF32[i6 + 40 >> 2] = .30000001192092896;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAP32[i6 >> 2] = 1264;
 i3 = i6 + 300 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i3 = i6 + 316 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 28 >> 2];
 i3 = i6 + 332 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 44 >> 2];
 i3 = i6 + 348 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 60 >> 2];
 i4 = i6 + 364 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i4 = i6 + 380 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 28 >> 2];
 i4 = i6 + 396 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 44 >> 2];
 i4 = i6 + 412 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 52 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 56 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 60 >> 2];
 i5 = i6 + 524 | 0;
 HEAP8[i6 + 552 >> 0] = 0;
 HEAP8[i5 >> 0] = 0;
 HEAP8[i5 + 1 >> 0] = 0;
 HEAP8[i5 + 2 >> 0] = 0;
 HEAP8[i5 + 3 >> 0] = 0;
 HEAPF32[i6 + 572 >> 2] = -1.0;
 HEAPF32[i6 + 444 >> 2] = 999999984306749400.0;
 HEAPF32[i6 + 448 >> 2] = 999999984306749400.0;
 HEAPF32[i6 + 452 >> 2] = 999999984306749400.0;
 HEAPF32[i6 + 428 >> 2] = 1.0;
 HEAPF32[i6 + 432 >> 2] = .30000001192092896;
 HEAPF32[i6 + 436 >> 2] = 1.0;
 HEAPF32[i6 + 440 >> 2] = .009999999776482582;
 HEAPF32[i6 + 456 >> 2] = .05000000074505806;
 HEAP32[i6 + 592 >> 2] = 0;
 HEAPF32[i6 + 596 >> 2] = 0.0;
 HEAPF32[i6 + 600 >> 2] = .699999988079071;
 HEAPF32[i6 + 604 >> 2] = 0.0;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZN26btBoxBoxCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i7, i3, i5, i6, i2) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i4 = HEAP32[i7 + 12 >> 2] | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i9 = HEAP32[i3 + 4 >> 2] | 0;
 i8 = HEAP32[i5 + 4 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = i4;
 HEAPF32[i1 + 140 >> 2] = 999999984306749400.0;
 i4 = HEAP32[i3 + 12 >> 2] | 0;
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i4 + 28 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i4 + 44 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i4 + 60 >> 2];
 i5 = HEAP32[i5 + 12 >> 2] | 0;
 HEAP32[i1 + 76 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 84 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 88 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i1 + 92 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i1 + 96 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i1 + 100 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i1 + 104 >> 2] = HEAP32[i5 + 28 >> 2];
 HEAP32[i1 + 108 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i1 + 112 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i1 + 116 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i1 + 120 >> 2] = HEAP32[i5 + 44 >> 2];
 HEAP32[i1 + 124 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i1 + 128 >> 2] = HEAP32[i5 + 52 >> 2];
 HEAP32[i1 + 132 >> 2] = HEAP32[i5 + 56 >> 2];
 HEAP32[i1 + 136 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAP32[i1 >> 2] = 17976;
 HEAP32[i1 + 4 >> 2] = i9;
 HEAP32[i1 + 8 >> 2] = i8;
 __ZN16btBoxBoxDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb(i1, i1 + 12 | 0, i2, HEAP32[i6 + 20 >> 2] | 0, 0);
 if ((HEAP8[i7 + 8 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 if ((HEAP32[i3 + 748 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i3 + 740 >> 2] | 0;
 i5 = HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 8 >> 2] | 0;
 if ((i4 | 0) == (i5 | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i4 + 4 | 0, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
  STACKTOP = i1;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, (HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i5 + 4 | 0);
  STACKTOP = i1;
  return;
 }
}
function __ZN6btDbvt19optimizeIncrementalEi(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((i3 | 0) < 0) i3 = HEAP32[i1 + 12 >> 2] | 0;
 i8 = HEAP32[i1 >> 2] | 0;
 if (!((i8 | 0) != 0 & (i3 | 0) > 0)) {
  STACKTOP = i2;
  return;
 }
 while (1) {
  i5 = i8 + 40 | 0;
  L9 : do if ((HEAP32[i5 >> 2] | 0) != 0) {
   i4 = 0;
   while (1) {
    i6 = (HEAP32[i1 + 16 >> 2] | 0) >>> i4 & 1;
    i9 = i8 + 32 | 0;
    i7 = HEAP32[i9 >> 2] | 0;
    if (i7 >>> 0 > i8 >>> 0) {
     i10 = (HEAP32[i7 + 40 >> 2] | 0) == (i8 | 0) & 1;
     i11 = HEAP32[i7 + ((i10 ^ 1) << 2) + 36 >> 2] | 0;
     i12 = HEAP32[i7 + 32 >> 2] | 0;
     if ((i12 | 0) == 0) HEAP32[i1 >> 2] = i8; else HEAP32[i12 + (((HEAP32[i12 + 40 >> 2] | 0) == (i7 | 0) & 1) << 2) + 36 >> 2] = i8;
     HEAP32[i11 + 32 >> 2] = i8;
     HEAP32[i7 + 32 >> 2] = i8;
     HEAP32[i9 >> 2] = i12;
     i12 = i8 + 36 | 0;
     HEAP32[i7 + 36 >> 2] = HEAP32[i12 >> 2];
     HEAP32[i7 + 40 >> 2] = HEAP32[i5 >> 2];
     HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] = i7;
     HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] = i7;
     HEAP32[i8 + (i10 << 2) + 36 >> 2] = i7;
     HEAP32[i8 + ((i10 ^ 1) << 2) + 36 >> 2] = i11;
     HEAP32[i2 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
     HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
     HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
     HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
     HEAP32[i2 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
     HEAP32[i2 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
     HEAP32[i2 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
     HEAP32[i2 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
     HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
     HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
     HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
     HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
     HEAP32[i7 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
     HEAP32[i7 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
     HEAP32[i7 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
     HEAP32[i7 + 28 >> 2] = HEAP32[i8 + 28 >> 2];
     HEAP32[i8 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
     HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i8 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i8 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i8 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     HEAP32[i8 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
     HEAP32[i8 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
     HEAP32[i8 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
    } else i7 = i8;
    i8 = HEAP32[i7 + (i6 << 2) + 36 >> 2] | 0;
    if ((HEAP32[i8 + 40 >> 2] | 0) == 0) break L9;
    i5 = i8 + 40 | 0;
    i4 = i4 + 1 & 31;
   }
  } while (0);
  if ((__ZL10removeleafP6btDbvtP10btDbvtNode(i1, i8) | 0) == 0) i4 = 0; else i4 = HEAP32[i1 >> 2] | 0;
  __ZL10insertleafP6btDbvtP10btDbvtNodeS2_(i1, i4, i8);
  HEAP32[i1 + 16 >> 2] = (HEAP32[i1 + 16 >> 2] | 0) + 1;
  i3 = i3 + -1 | 0;
  if ((i3 | 0) == 0) break;
  i8 = HEAP32[i1 >> 2] | 0;
 }
 STACKTOP = i2;
 return;
}
function __ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallback15processTriangleEP9btVector3ii(i1, i4, i2, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var d3 = 0.0, d6 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 HEAPF32[i2 + 712 >> 2] = 1.0;
 HEAP32[i2 + 716 >> 2] = 0;
 HEAP32[i2 + 720 >> 2] = 0;
 HEAP32[i2 + 724 >> 2] = 0;
 HEAP32[i2 + 728 >> 2] = 0;
 HEAPF32[i2 + 732 >> 2] = 1.0;
 HEAP32[i2 + 736 >> 2] = 0;
 HEAP32[i2 + 740 >> 2] = 0;
 HEAP32[i2 + 744 >> 2] = 0;
 HEAP32[i2 + 748 >> 2] = 0;
 HEAPF32[i2 + 752 >> 2] = 1.0;
 i5 = i2 + 756 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i2 + 536 >> 2] = 9440;
 HEAP32[i2 + 704 >> 2] = 0;
 HEAPF32[i2 + 708 >> 2] = 0.0;
 HEAPF32[i2 + 700 >> 2] = +HEAPF32[i1 + 200 >> 2];
 d6 = +HEAPF32[i1 + 196 >> 2];
 HEAP32[i2 + 488 >> 2] = 0;
 HEAPF32[i2 + 492 >> 2] = 1.0;
 HEAPF32[i2 + 496 >> 2] = 1.0;
 HEAPF32[i2 + 500 >> 2] = 1.0;
 HEAPF32[i2 + 504 >> 2] = 0.0;
 HEAP32[i2 + 480 >> 2] = 16680;
 HEAP32[i2 + 484 >> 2] = 8;
 HEAPF32[i2 + 508 >> 2] = d6;
 HEAPF32[i2 + 524 >> 2] = d6;
 HEAP32[i2 + 384 >> 2] = 0;
 HEAPF32[i2 + 388 >> 2] = 1.0;
 HEAPF32[i2 + 392 >> 2] = 1.0;
 HEAPF32[i2 + 396 >> 2] = 1.0;
 HEAPF32[i2 + 400 >> 2] = 0.0;
 HEAPF32[i2 + 420 >> 2] = .03999999910593033;
 HEAP32[i2 + 428 >> 2] = 0;
 HEAP32[i2 + 376 >> 2] = 16376;
 HEAP32[i2 + 380 >> 2] = 1;
 HEAP32[i2 + 432 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i2 + 436 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 440 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 444 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 448 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i2 + 452 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i2 + 456 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i2 + 460 >> 2] = HEAP32[i4 + 28 >> 2];
 HEAP32[i2 + 464 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i2 + 468 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i2 + 472 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i2 + 476 >> 2] = HEAP32[i4 + 44 >> 2];
 HEAPF32[i2 + 324 >> 2] = 9999999747378752.0e-20;
 HEAP8[i2 + 348 >> 0] = 0;
 HEAP32[i2 >> 2] = 17152;
 HEAP32[i2 + 4 >> 2] = i2 + 16;
 HEAP32[i2 + 8 >> 2] = i2 + 480;
 HEAP32[i2 + 12 >> 2] = i2 + 376;
 if (__ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i2, i1 + 4 | 0, i1 + 68 | 0, i2 + 712 | 0, i2 + 712 | 0, i2 + 536 | 0) | 0 ? (d3 = +HEAPF32[i2 + 700 >> 2], +HEAPF32[i1 + 200 >> 2] > d3) : 0) HEAPF32[i1 + 200 >> 2] = d3;
 HEAP32[i2 + 376 >> 2] = 15736;
 i1 = HEAP32[i2 + 428 >> 2] | 0;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 >> 2] >> 2] & 511](i1);
 i1 = HEAP32[i2 + 428 >> 2] | 0;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver33resolveSingleConstraintRowGenericER12btSolverBodyS1_RK18btSolverConstraint(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i5 = STACKTOP;
 d8 = +HEAPF32[i6 + 100 >> 2];
 d4 = +HEAPF32[i6 + 16 >> 2];
 d2 = +HEAPF32[i6 + 20 >> 2];
 d3 = +HEAPF32[i6 + 24 >> 2];
 d9 = +HEAPF32[i6 + 108 >> 2];
 d9 = +HEAPF32[i6 + 112 >> 2] - d8 * +HEAPF32[i6 + 116 >> 2] - (d4 * +HEAPF32[i7 + 64 >> 2] + d2 * +HEAPF32[i7 + 68 >> 2] + d3 * +HEAPF32[i7 + 72 >> 2] + (+HEAPF32[i6 >> 2] * +HEAPF32[i7 + 80 >> 2] + +HEAPF32[i6 + 4 >> 2] * +HEAPF32[i7 + 84 >> 2] + +HEAPF32[i6 + 8 >> 2] * +HEAPF32[i7 + 88 >> 2])) * d9 - d9 * (+HEAPF32[i6 + 48 >> 2] * +HEAPF32[i1 + 64 >> 2] + +HEAPF32[i6 + 52 >> 2] * +HEAPF32[i1 + 68 >> 2] + +HEAPF32[i6 + 56 >> 2] * +HEAPF32[i1 + 72 >> 2] + (+HEAPF32[i6 + 32 >> 2] * +HEAPF32[i1 + 80 >> 2] + +HEAPF32[i6 + 36 >> 2] * +HEAPF32[i1 + 84 >> 2] + +HEAPF32[i6 + 40 >> 2] * +HEAPF32[i1 + 88 >> 2]));
 d10 = +HEAPF32[i6 + 120 >> 2];
 do if (!(d8 + d9 < d10)) {
  d10 = +HEAPF32[i6 + 124 >> 2];
  if (d8 + d9 > d10) {
   HEAPF32[i6 + 100 >> 2] = d10;
   d9 = d10 - d8;
   break;
  } else {
   HEAPF32[i6 + 100 >> 2] = d8 + d9;
   break;
  }
 } else {
  HEAPF32[i6 + 100 >> 2] = d10;
  d9 = d10 - d8;
 } while (0);
 if ((HEAP32[i7 + 240 >> 2] | 0) != 0) {
  d10 = d9 * +HEAPF32[i7 + 132 >> 2] * d2 * +HEAPF32[i7 + 116 >> 2];
  d8 = d9 * +HEAPF32[i7 + 136 >> 2] * d3 * +HEAPF32[i7 + 120 >> 2];
  HEAPF32[i7 + 64 >> 2] = +HEAPF32[i7 + 112 >> 2] * d9 * +HEAPF32[i7 + 128 >> 2] * d4 + +HEAPF32[i7 + 64 >> 2];
  HEAPF32[i7 + 68 >> 2] = d10 + +HEAPF32[i7 + 68 >> 2];
  HEAPF32[i7 + 72 >> 2] = d8 + +HEAPF32[i7 + 72 >> 2];
  d8 = d9 * +HEAPF32[i7 + 100 >> 2] * +HEAPF32[i6 + 68 >> 2];
  d10 = d9 * +HEAPF32[i7 + 104 >> 2] * +HEAPF32[i6 + 72 >> 2];
  HEAPF32[i7 + 80 >> 2] = d9 * +HEAPF32[i7 + 96 >> 2] * +HEAPF32[i6 + 64 >> 2] + +HEAPF32[i7 + 80 >> 2];
  HEAPF32[i7 + 84 >> 2] = d8 + +HEAPF32[i7 + 84 >> 2];
  HEAPF32[i7 + 88 >> 2] = d10 + +HEAPF32[i7 + 88 >> 2];
 }
 if ((HEAP32[i1 + 240 >> 2] | 0) == 0) {
  STACKTOP = i5;
  return;
 }
 d10 = d9 * +HEAPF32[i1 + 132 >> 2] * +HEAPF32[i6 + 52 >> 2] * +HEAPF32[i1 + 116 >> 2];
 d8 = d9 * +HEAPF32[i1 + 136 >> 2] * +HEAPF32[i6 + 56 >> 2] * +HEAPF32[i1 + 120 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i1 + 112 >> 2] * d9 * +HEAPF32[i1 + 128 >> 2] * +HEAPF32[i6 + 48 >> 2] + +HEAPF32[i1 + 64 >> 2];
 HEAPF32[i1 + 68 >> 2] = d10 + +HEAPF32[i1 + 68 >> 2];
 HEAPF32[i1 + 72 >> 2] = d8 + +HEAPF32[i1 + 72 >> 2];
 d8 = d9 * +HEAPF32[i1 + 100 >> 2] * +HEAPF32[i6 + 84 >> 2];
 d10 = d9 * +HEAPF32[i1 + 104 >> 2] * +HEAPF32[i6 + 88 >> 2];
 HEAPF32[i1 + 80 >> 2] = d9 * +HEAPF32[i1 + 96 >> 2] * +HEAPF32[i6 + 80 >> 2] + +HEAPF32[i1 + 80 >> 2];
 HEAPF32[i1 + 84 >> 2] = d8 + +HEAPF32[i1 + 84 >> 2];
 HEAPF32[i1 + 88 >> 2] = d10 + +HEAPF32[i1 + 88 >> 2];
 STACKTOP = i5;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver43resolveSplitPenetrationImpulseCacheFriendlyER12btSolverBodyS1_RK18btSolverConstraint(i4, i5, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, d3 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i7 = STACKTOP;
 d9 = +HEAPF32[i2 + 128 >> 2];
 if (!(d9 != 0.0)) {
  STACKTOP = i7;
  return;
 }
 HEAP32[1002] = (HEAP32[1002] | 0) + 1;
 d8 = +HEAPF32[i2 + 96 >> 2];
 d3 = +HEAPF32[i2 + 16 >> 2];
 d6 = +HEAPF32[i2 + 20 >> 2];
 d1 = +HEAPF32[i2 + 24 >> 2];
 d11 = +HEAPF32[i2 + 108 >> 2];
 d11 = d9 - d8 * +HEAPF32[i2 + 116 >> 2] - (d3 * +HEAPF32[i4 + 144 >> 2] + d6 * +HEAPF32[i4 + 148 >> 2] + d1 * +HEAPF32[i4 + 152 >> 2] + (+HEAPF32[i2 >> 2] * +HEAPF32[i4 + 160 >> 2] + +HEAPF32[i2 + 4 >> 2] * +HEAPF32[i4 + 164 >> 2] + +HEAPF32[i2 + 8 >> 2] * +HEAPF32[i4 + 168 >> 2])) * d11 - d11 * (+HEAPF32[i2 + 48 >> 2] * +HEAPF32[i5 + 144 >> 2] + +HEAPF32[i2 + 52 >> 2] * +HEAPF32[i5 + 148 >> 2] + +HEAPF32[i2 + 56 >> 2] * +HEAPF32[i5 + 152 >> 2] + (+HEAPF32[i2 + 32 >> 2] * +HEAPF32[i5 + 160 >> 2] + +HEAPF32[i2 + 36 >> 2] * +HEAPF32[i5 + 164 >> 2] + +HEAPF32[i2 + 40 >> 2] * +HEAPF32[i5 + 168 >> 2]));
 d10 = +HEAPF32[i2 + 120 >> 2];
 if (d8 + d11 < d10) d9 = d10 - d8; else {
  d9 = d11;
  d10 = d8 + d11;
 }
 HEAPF32[i2 + 96 >> 2] = d10;
 if ((HEAP32[i4 + 240 >> 2] | 0) != 0) {
  d11 = d9 * +HEAPF32[i4 + 132 >> 2] * d6 * +HEAPF32[i4 + 116 >> 2];
  d10 = d9 * +HEAPF32[i4 + 136 >> 2] * d1 * +HEAPF32[i4 + 120 >> 2];
  HEAPF32[i4 + 144 >> 2] = +HEAPF32[i4 + 112 >> 2] * d9 * +HEAPF32[i4 + 128 >> 2] * d3 + +HEAPF32[i4 + 144 >> 2];
  HEAPF32[i4 + 148 >> 2] = d11 + +HEAPF32[i4 + 148 >> 2];
  HEAPF32[i4 + 152 >> 2] = d10 + +HEAPF32[i4 + 152 >> 2];
  d10 = d9 * +HEAPF32[i4 + 100 >> 2] * +HEAPF32[i2 + 68 >> 2];
  d11 = d9 * +HEAPF32[i4 + 104 >> 2] * +HEAPF32[i2 + 72 >> 2];
  HEAPF32[i4 + 160 >> 2] = d9 * +HEAPF32[i4 + 96 >> 2] * +HEAPF32[i2 + 64 >> 2] + +HEAPF32[i4 + 160 >> 2];
  HEAPF32[i4 + 164 >> 2] = d10 + +HEAPF32[i4 + 164 >> 2];
  HEAPF32[i4 + 168 >> 2] = d11 + +HEAPF32[i4 + 168 >> 2];
 }
 if ((HEAP32[i5 + 240 >> 2] | 0) == 0) {
  STACKTOP = i7;
  return;
 }
 d11 = d9 * +HEAPF32[i5 + 132 >> 2] * +HEAPF32[i2 + 52 >> 2] * +HEAPF32[i5 + 116 >> 2];
 d10 = d9 * +HEAPF32[i5 + 136 >> 2] * +HEAPF32[i2 + 56 >> 2] * +HEAPF32[i5 + 120 >> 2];
 HEAPF32[i5 + 144 >> 2] = +HEAPF32[i5 + 112 >> 2] * d9 * +HEAPF32[i5 + 128 >> 2] * +HEAPF32[i2 + 48 >> 2] + +HEAPF32[i5 + 144 >> 2];
 HEAPF32[i5 + 148 >> 2] = d11 + +HEAPF32[i5 + 148 >> 2];
 HEAPF32[i5 + 152 >> 2] = d10 + +HEAPF32[i5 + 152 >> 2];
 d10 = d9 * +HEAPF32[i5 + 100 >> 2] * +HEAPF32[i2 + 84 >> 2];
 d11 = d9 * +HEAPF32[i5 + 104 >> 2] * +HEAPF32[i2 + 88 >> 2];
 HEAPF32[i5 + 160 >> 2] = d9 * +HEAPF32[i5 + 96 >> 2] * +HEAPF32[i2 + 80 >> 2] + +HEAPF32[i5 + 160 >> 2];
 HEAPF32[i5 + 164 >> 2] = d10 + +HEAPF32[i5 + 164 >> 2];
 HEAPF32[i5 + 168 >> 2] = d11 + +HEAPF32[i5 + 168 >> 2];
 STACKTOP = i7;
 return;
}
function __ZNK18btStaticPlaneShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_(i2, i1, i20, i21) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d22 = 0.0, d23 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 d6 = +HEAPF32[i21 >> 2];
 d7 = +HEAPF32[i20 >> 2];
 d4 = +HEAPF32[i21 + 4 >> 2];
 d5 = +HEAPF32[i20 + 4 >> 2];
 d8 = +HEAPF32[i21 + 8 >> 2];
 d10 = +HEAPF32[i20 + 8 >> 2];
 d15 = +Math_sqrt(+((d6 - d7) * .5 * (d6 - d7) * .5 + (d4 - d5) * .5 * (d4 - d5) * .5 + (d8 - d10) * .5 * (d8 - d10) * .5));
 d11 = +HEAPF32[i2 + 56 >> 2];
 if (+Math_abs(+d11) > .7071067690849304) {
  d9 = +HEAPF32[i2 + 52 >> 2];
  d14 = 1.0 / +Math_sqrt(+(d11 * d11 + d9 * d9));
  d22 = +HEAPF32[i2 + 48 >> 2];
  d12 = d22;
  d19 = d9;
  d13 = 0.0;
  d18 = -(d11 * d14);
  d17 = d9 * d14;
  d16 = (d11 * d11 + d9 * d9) * d14;
  d9 = -(d22 * d9 * d14);
  d14 = d22 * -(d11 * d14);
 } else {
  d23 = +HEAPF32[i2 + 48 >> 2];
  d22 = +HEAPF32[i2 + 52 >> 2];
  d14 = 1.0 / +Math_sqrt(+(d23 * d23 + d22 * d22));
  d12 = d23;
  d19 = d22;
  d13 = -(d22 * d14);
  d18 = d23 * d14;
  d17 = 0.0;
  d16 = -(d11 * d23 * d14);
  d9 = d11 * -(d22 * d14);
  d14 = (d23 * d23 + d22 * d22) * d14;
 }
 d23 = (d6 + d7) * .5 * d12 + (d4 + d5) * .5 * d19 + (d8 + d10) * .5 * d11 - +HEAPF32[i2 + 64 >> 2];
 d5 = (d4 + d5) * .5 - d19 * d23;
 d12 = (d6 + d7) * .5 - d12 * d23;
 d13 = d15 * d13;
 d18 = d15 * d18;
 d22 = d15 * d17;
 d16 = d15 * d16;
 d17 = d15 * d9;
 d19 = d15 * d14;
 HEAPF32[i3 >> 2] = d16 + (d13 + d12);
 HEAPF32[i3 + 4 >> 2] = d17 + (d18 + d5);
 HEAPF32[i3 + 8 >> 2] = d19 + (d22 + ((d8 + d10) * .5 - d11 * d23));
 HEAPF32[i3 + 12 >> 2] = 0.0;
 HEAPF32[i3 + 16 >> 2] = d13 + d12 - d16;
 HEAPF32[i3 + 20 >> 2] = d18 + d5 - d17;
 HEAPF32[i3 + 24 >> 2] = d22 + ((d8 + d10) * .5 - d11 * d23) - d19;
 HEAPF32[i3 + 28 >> 2] = 0.0;
 HEAPF32[i3 + 32 >> 2] = d12 - d13 - d16;
 HEAPF32[i3 + 36 >> 2] = d5 - d18 - d17;
 HEAPF32[i3 + 40 >> 2] = (d8 + d10) * .5 - d11 * d23 - d22 - d19;
 HEAPF32[i3 + 44 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i3, 0, 0);
 HEAPF32[i3 >> 2] = d12 - d13 - d16;
 HEAPF32[i3 + 4 >> 2] = d5 - d18 - d17;
 HEAPF32[i3 + 8 >> 2] = (d8 + d10) * .5 - d11 * d23 - d22 - d19;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 HEAPF32[i3 + 16 >> 2] = d16 + (d12 - d13);
 HEAPF32[i3 + 20 >> 2] = d17 + (d5 - d18);
 HEAPF32[i3 + 24 >> 2] = d19 + ((d8 + d10) * .5 - d11 * d23 - d22);
 HEAPF32[i3 + 28 >> 2] = 0.0;
 HEAPF32[i3 + 32 >> 2] = d16 + (d13 + d12);
 HEAPF32[i3 + 36 >> 2] = d17 + (d18 + d5);
 HEAPF32[i3 + 40 >> 2] = d19 + (d22 + ((d8 + d10) * .5 - d11 * d23));
 HEAPF32[i3 + 44 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i3, 0, 1);
 STACKTOP = i3;
 return;
}
function __ZN23btHashedSimplePairCache21removeOverlappingPairEii(i3, i6, i8) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 HEAP32[4892] = (HEAP32[4892] | 0) + 1;
 i9 = ((i8 << 16 | i6) + ~((i8 << 16 | i6) << 15) >> 10 ^ (i8 << 16 | i6) + ~((i8 << 16 | i6) << 15)) * 9 | 0;
 i4 = HEAP32[i3 + 40 >> 2] | 0;
 i9 = i4 + (((HEAP32[i3 + 12 >> 2] | 0) + -1 & ((i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11) >> 16 ^ (i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11))) << 2) | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 if ((i10 | 0) == -1) {
  i13 = 0;
  STACKTOP = i1;
  return i13 | 0;
 }
 i5 = HEAP32[i3 + 16 >> 2] | 0;
 i7 = i10;
 while (1) {
  if ((HEAP32[i5 + (i7 * 12 | 0) >> 2] | 0) == (i6 | 0) ? (HEAP32[i5 + (i7 * 12 | 0) + 4 >> 2] | 0) == (i8 | 0) : 0) break;
  i7 = HEAP32[(HEAP32[i3 + 60 >> 2] | 0) + (i7 << 2) >> 2] | 0;
  if ((i7 | 0) == -1) {
   i3 = 0;
   i2 = 22;
   break;
  }
 }
 if ((i2 | 0) == 22) {
  STACKTOP = i1;
  return i3 | 0;
 }
 if ((i5 + (i7 * 12 | 0) | 0) == 0) {
  i13 = 0;
  STACKTOP = i1;
  return i13 | 0;
 }
 i6 = HEAP32[i5 + (i7 * 12 | 0) + 8 >> 2] | 0;
 i7 = (i7 * 12 | 0) / 12 | 0;
 i8 = HEAP32[i3 + 60 >> 2] | 0;
 if ((i10 | 0) != (i7 | 0)) {
  while (1) {
   i11 = i8 + (i10 << 2) | 0;
   i12 = HEAP32[i11 >> 2] | 0;
   if ((i12 | 0) == (i7 | 0)) break; else i10 = i12;
  }
  i12 = HEAP32[i8 + (i7 << 2) >> 2] | 0;
  if ((i10 | 0) == -1) i2 = 12; else HEAP32[i11 >> 2] = i12;
 } else {
  i12 = HEAP32[i8 + (i10 << 2) >> 2] | 0;
  i2 = 12;
 }
 if ((i2 | 0) == 12) HEAP32[i9 >> 2] = i12;
 i10 = (HEAP32[i3 + 8 >> 2] | 0) + -1 | 0;
 if ((i10 | 0) == (i7 | 0)) {
  HEAP32[i3 + 8 >> 2] = i7;
  i13 = i6;
  STACKTOP = i1;
  return i13 | 0;
 }
 i9 = HEAP32[i5 + (i10 * 12 | 0) + 4 >> 2] << 16 | HEAP32[i5 + (i10 * 12 | 0) >> 2];
 i9 = (i9 + ~(i9 << 15) >> 10 ^ i9 + ~(i9 << 15)) * 9 | 0;
 i9 = ((i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11) >> 16 ^ (i9 >> 6 ^ i9) + ~((i9 >> 6 ^ i9) << 11)) & (HEAP32[i3 + 12 >> 2] | 0) + -1;
 i12 = HEAP32[i4 + (i9 << 2) >> 2] | 0;
 if ((i12 | 0) != (i10 | 0)) {
  while (1) {
   i11 = i8 + (i12 << 2) | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if ((i13 | 0) == (i10 | 0)) break; else i12 = i13;
  }
  i8 = HEAP32[i8 + (i10 << 2) >> 2] | 0;
  if ((i12 | 0) == -1) i2 = 20; else HEAP32[i11 >> 2] = i8;
 } else {
  i8 = HEAP32[i8 + (i10 << 2) >> 2] | 0;
  i2 = 20;
 }
 if ((i2 | 0) == 20) HEAP32[i4 + (i9 << 2) >> 2] = i8;
 HEAP32[i5 + (i7 * 12 | 0) + 0 >> 2] = HEAP32[i5 + (i10 * 12 | 0) + 0 >> 2];
 HEAP32[i5 + (i7 * 12 | 0) + 4 >> 2] = HEAP32[i5 + (i10 * 12 | 0) + 4 >> 2];
 HEAP32[i5 + (i7 * 12 | 0) + 8 >> 2] = HEAP32[i5 + (i10 * 12 | 0) + 8 >> 2];
 i13 = (HEAP32[i3 + 40 >> 2] | 0) + (i9 << 2) | 0;
 HEAP32[(HEAP32[i3 + 60 >> 2] | 0) + (i7 << 2) >> 2] = HEAP32[i13 >> 2];
 HEAP32[i13 >> 2] = i7;
 HEAP32[i3 + 8 >> 2] = (HEAP32[i3 + 8 >> 2] | 0) + -1;
 i13 = i6;
 STACKTOP = i1;
 return i13 | 0;
}
function __ZN17btHingeConstraintC2ER11btRigidBodyRK11btTransformb(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i5 = STACKTOP;
 __ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBody(i1, 4, i4);
 HEAP32[i1 >> 2] = 2504;
 HEAP32[i1 + 552 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 556 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 560 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 564 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 568 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i1 + 572 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i1 + 576 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i1 + 580 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i1 + 584 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i1 + 588 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i1 + 592 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i1 + 596 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i1 + 600 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i1 + 604 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i1 + 608 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i1 + 612 >> 2] = HEAP32[i3 + 60 >> 2];
 HEAP32[i1 + 616 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 620 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 624 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 628 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 632 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i1 + 636 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i1 + 640 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i1 + 644 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i1 + 648 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i1 + 652 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i1 + 656 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i1 + 660 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i1 + 664 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i1 + 668 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i1 + 672 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i1 + 676 >> 2] = HEAP32[i3 + 60 >> 2];
 HEAPF32[i1 + 688 >> 2] = 0.0;
 HEAPF32[i1 + 692 >> 2] = -1.0;
 HEAPF32[i1 + 696 >> 2] = .8999999761581421;
 HEAPF32[i1 + 700 >> 2] = .30000001192092896;
 HEAPF32[i1 + 704 >> 2] = 1.0;
 HEAPF32[i1 + 708 >> 2] = 0.0;
 HEAPF32[i1 + 712 >> 2] = 0.0;
 HEAP8[i1 + 716 >> 0] = 0;
 HEAP8[i1 + 736 >> 0] = 0;
 HEAP8[i1 + 737 >> 0] = 0;
 HEAP8[i1 + 738 >> 0] = 0;
 HEAP8[i1 + 739 >> 0] = 1;
 HEAP8[i1 + 740 >> 0] = i2 & 1;
 HEAP32[i1 + 748 >> 2] = 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 d10 = +HEAPF32[i1 + 600 >> 2];
 d9 = +HEAPF32[i1 + 604 >> 2];
 d8 = +HEAPF32[i1 + 608 >> 2];
 d7 = d10 * +HEAPF32[i4 + 20 >> 2] + d9 * +HEAPF32[i4 + 24 >> 2] + d8 * +HEAPF32[i4 + 28 >> 2] + +HEAPF32[i4 + 56 >> 2];
 d6 = d10 * +HEAPF32[i4 + 36 >> 2] + d9 * +HEAPF32[i4 + 40 >> 2] + d8 * +HEAPF32[i4 + 44 >> 2] + +HEAPF32[i4 + 60 >> 2];
 HEAPF32[i1 + 664 >> 2] = d10 * +HEAPF32[i4 + 4 >> 2] + d9 * +HEAPF32[i4 + 8 >> 2] + d8 * +HEAPF32[i4 + 12 >> 2] + +HEAPF32[i4 + 52 >> 2];
 HEAPF32[i1 + 668 >> 2] = d7;
 HEAPF32[i1 + 672 >> 2] = d6;
 HEAPF32[i1 + 676 >> 2] = 0.0;
 HEAPF32[i1 + 732 >> 2] = i2 ? -1.0 : 1.0;
 STACKTOP = i5;
 return;
}
function __ZN23btHashedSimplePairCache18addOverlappingPairEii(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 HEAP32[4894] = (HEAP32[4894] | 0) + 1;
 i6 = ((i4 << 16 | i3) + ~((i4 << 16 | i3) << 15) >> 10 ^ (i4 << 16 | i3) + ~((i4 << 16 | i3) << 15)) * 9 | 0;
 i6 = (i6 >> 6 ^ i6) + ~((i6 >> 6 ^ i6) << 11) >> 16 ^ (i6 >> 6 ^ i6) + ~((i6 >> 6 ^ i6) << 11);
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i8 = HEAP32[(HEAP32[i1 + 40 >> 2] | 0) + ((i5 + -1 & i6) << 2) >> 2] | 0;
 L1 : do if (!((i8 | 0) == -1)) {
  i7 = HEAP32[i1 + 16 >> 2] | 0;
  while (1) {
   if ((HEAP32[i7 + (i8 * 12 | 0) >> 2] | 0) == (i3 | 0) ? (HEAP32[i7 + (i8 * 12 | 0) + 4 >> 2] | 0) == (i4 | 0) : 0) break;
   i8 = HEAP32[(HEAP32[i1 + 60 >> 2] | 0) + (i8 << 2) >> 2] | 0;
   if ((i8 | 0) == -1) break L1;
  }
  i7 = i7 + (i8 * 12 | 0) | 0;
  if ((i7 | 0) != 0) {
   i12 = i7;
   STACKTOP = i2;
   return i12 | 0;
  }
 } while (0);
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i7 | 0) == (i5 | 0)) {
  i8 = (i5 | 0) == 0 ? 1 : i5 << 1;
  if ((i5 | 0) < (i8 | 0)) {
   if ((i8 | 0) == 0) {
    i9 = 0;
    i12 = i5;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i9 = _malloc((i8 * 12 | 3) + 16 | 0) | 0;
    if ((i9 | 0) == 0) i9 = 0; else {
     HEAP32[(i9 + 19 & -16) + -4 >> 2] = i9;
     i9 = i9 + 19 & -16;
    }
    i12 = HEAP32[i1 + 8 >> 2] | 0;
   }
   if ((i12 | 0) > 0) {
    i11 = 0;
    do {
     i10 = i9 + (i11 * 12 | 0) | 0;
     if ((i10 | 0) != 0) {
      i13 = (HEAP32[i1 + 16 >> 2] | 0) + (i11 * 12 | 0) | 0;
      HEAP32[i10 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
      HEAP32[i10 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
      HEAP32[i10 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i12 | 0));
   }
   i10 = HEAP32[i1 + 16 >> 2] | 0;
   if ((i10 | 0) != 0) {
    if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i10 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 16 >> 2] = 0;
   }
   HEAP8[i1 + 20 >> 0] = 1;
   HEAP32[i1 + 16 >> 2] = i9;
   HEAP32[i1 + 12 >> 2] = i8;
   i9 = HEAP32[i1 + 8 >> 2] | 0;
  } else {
   i9 = i5;
   i8 = i5;
  }
 } else {
  i9 = i7;
  i8 = i5;
 }
 HEAP32[i1 + 8 >> 2] = i9 + 1;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i5 | 0) < (i8 | 0)) {
  __ZN23btHashedSimplePairCache10growTablesEv(i1);
  i5 = (HEAP32[i1 + 12 >> 2] | 0) + -1 & i6;
 } else i5 = i5 + -1 & i6;
 if ((i9 + (i7 * 12 | 0) | 0) == 0) i3 = 0; else {
  HEAP32[i9 + (i7 * 12 | 0) >> 2] = i3;
  HEAP32[i9 + (i7 * 12 | 0) + 4 >> 2] = i4;
  HEAP32[i9 + (i7 * 12 | 0) + 8 >> 2] = 0;
  i3 = i9 + (i7 * 12 | 0) | 0;
 }
 HEAP32[i3 + 8 >> 2] = 0;
 i13 = (HEAP32[i1 + 40 >> 2] | 0) + (i5 << 2) | 0;
 HEAP32[(HEAP32[i1 + 60 >> 2] | 0) + (i7 << 2) >> 2] = HEAP32[i13 >> 2];
 HEAP32[i13 >> 2] = i7;
 i13 = i3;
 STACKTOP = i2;
 return i13 | 0;
}
function __ZN32btSphereSphereCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i3, i11, i5, i2, i1) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d4 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i12 = 0, i13 = 0, d14 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = HEAP32[i3 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 + 4 >> 2] = i3;
 i12 = HEAP32[i11 + 4 >> 2] | 0;
 i13 = HEAP32[i5 + 4 >> 2] | 0;
 i11 = HEAP32[i11 + 12 >> 2] | 0;
 i5 = HEAP32[i5 + 12 >> 2] | 0;
 d9 = +HEAPF32[i11 + 48 >> 2] - +HEAPF32[i5 + 48 >> 2];
 d10 = +HEAPF32[i11 + 52 >> 2] - +HEAPF32[i5 + 52 >> 2];
 d8 = +HEAPF32[i11 + 56 >> 2] - +HEAPF32[i5 + 56 >> 2];
 d6 = +Math_sqrt(+(d9 * d9 + d10 * d10 + d8 * d8));
 d4 = +HEAPF32[i13 + 28 >> 2] * +HEAPF32[i13 + 12 >> 2];
 d7 = +HEAPF32[i12 + 28 >> 2] * +HEAPF32[i12 + 12 >> 2] + d4;
 if (d6 > d7) {
  if ((HEAP32[i3 + 748 >> 2] | 0) == 0) {
   STACKTOP = i2;
   return;
  }
  i5 = HEAP32[i3 + 740 >> 2] | 0;
  i11 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 8 >> 2] | 0;
  if ((i5 | 0) == (i11 | 0)) {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i5 + 4 | 0, (HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
   STACKTOP = i2;
   return;
  } else {
   __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, (HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i11 + 4 | 0);
   STACKTOP = i2;
   return;
  }
 }
 HEAPF32[i2 + 16 >> 2] = 1.0;
 HEAPF32[i2 + 20 >> 2] = 0.0;
 HEAPF32[i2 + 24 >> 2] = 0.0;
 HEAPF32[i2 + 28 >> 2] = 0.0;
 if (d6 > 1.1920928955078125e-7) {
  HEAPF32[i2 + 16 >> 2] = d9 * (1.0 / d6);
  HEAPF32[i2 + 20 >> 2] = d10 * (1.0 / d6);
  HEAPF32[i2 + 24 >> 2] = d8 * (1.0 / d6);
  HEAPF32[i2 + 28 >> 2] = 0.0;
  d9 = d9 * (1.0 / d6);
  d10 = d10 * (1.0 / d6);
  d8 = d8 * (1.0 / d6);
 } else {
  d9 = 1.0;
  d10 = 0.0;
  d8 = 0.0;
 }
 d14 = d4 * d10 + +HEAPF32[i5 + 52 >> 2];
 d10 = d4 * d8 + +HEAPF32[i5 + 56 >> 2];
 HEAPF32[i2 >> 2] = d4 * d9 + +HEAPF32[i5 + 48 >> 2];
 HEAPF32[i2 + 4 >> 2] = d14;
 HEAPF32[i2 + 8 >> 2] = d10;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiid[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 15](i1, i2 + 16 | 0, i2, d6 - d7);
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((HEAP32[i3 + 748 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[i3 + 740 >> 2] | 0;
 i11 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 8 >> 2] | 0;
 if ((i5 | 0) == (i11 | 0)) {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, i5 + 4 | 0, (HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0);
  STACKTOP = i2;
  return;
 } else {
  __ZN20btPersistentManifold20refreshContactPointsERK11btTransformS2_(i3, (HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0, i11 + 4 | 0);
  STACKTOP = i2;
  return;
 }
}
function _emscripten_bind_btHingeConstraint_btHingeConstraint_5(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i7 = _malloc(783) | 0;
 if ((i7 | 0) == 0) i7 = 0; else {
  HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
  i7 = i7 + 19 & -16;
 }
 HEAP32[i7 + 4 >> 2] = 4;
 HEAP32[i7 + 8 >> 2] = -1;
 HEAP32[i7 + 12 >> 2] = -1;
 HEAPF32[i7 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i7 + 20 >> 0] = 1;
 HEAP8[i7 + 21 >> 0] = 0;
 HEAP32[i7 + 24 >> 2] = -1;
 HEAP32[i7 + 28 >> 2] = i1;
 HEAP32[i7 + 32 >> 2] = i3;
 HEAPF32[i7 + 36 >> 2] = 0.0;
 HEAPF32[i7 + 40 >> 2] = .30000001192092896;
 HEAP32[i7 + 44 >> 2] = 0;
 HEAP32[i7 >> 2] = 2504;
 i3 = i7 + 552 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i3 = i7 + 568 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 28 >> 2];
 i3 = i7 + 584 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 44 >> 2];
 i3 = i7 + 600 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 60 >> 2];
 i4 = i7 + 616 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i4 = i7 + 632 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 28 >> 2];
 i4 = i7 + 648 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 44 >> 2];
 i4 = i7 + 664 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 52 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 56 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAPF32[i7 + 688 >> 2] = 0.0;
 HEAPF32[i7 + 692 >> 2] = -1.0;
 HEAPF32[i7 + 696 >> 2] = .8999999761581421;
 HEAPF32[i7 + 700 >> 2] = .30000001192092896;
 HEAPF32[i7 + 704 >> 2] = 1.0;
 HEAPF32[i7 + 708 >> 2] = 0.0;
 HEAPF32[i7 + 712 >> 2] = 0.0;
 HEAP8[i7 + 716 >> 0] = 0;
 HEAP8[i7 + 736 >> 0] = 0;
 HEAP8[i7 + 737 >> 0] = 0;
 HEAP8[i7 + 738 >> 0] = 0;
 HEAP8[i7 + 739 >> 0] = 1;
 HEAP8[i7 + 740 >> 0] = i6 & 1;
 HEAP32[i7 + 748 >> 2] = 0;
 HEAPF32[i7 + 732 >> 2] = i6 ? -1.0 : 1.0;
 STACKTOP = i2;
 return i7 | 0;
}
function __ZN20btAxisSweep3InternalItE25calculateOverlappingPairsEP12btDispatcher(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i15 = HEAP32[i1 + 92 >> 2] | 0;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 56 >> 2] & 127](i15) | 0)) {
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i1 + 92 >> 2] | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2) | 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i5 | 0) > 1) {
  __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvRKT_ii(i2, 0, i5 + -1 | 0);
  i5 = HEAP32[i2 + 4 >> 2] | 0;
 }
 i12 = i5 - (HEAP32[i1 + 104 >> 2] | 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 __ZN20btAlignedObjectArrayI16btBroadphasePairE6resizeEiRKS0_(i2, i12, i3 + 16 | 0);
 HEAP32[i1 + 104 >> 2] = 0;
 i12 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i12 | 0) > 0) {
  i6 = 0;
  i13 = 0;
  i10 = 0;
  i5 = 0;
  while (1) {
   i7 = HEAP32[i2 + 12 >> 2] | 0;
   i8 = i7 + (i5 << 4) | 0;
   i11 = HEAP32[i8 >> 2] | 0;
   i7 = i7 + (i5 << 4) + 4 | 0;
   i9 = HEAP32[i7 >> 2] | 0;
   if ((i11 | 0) == (i6 | 0)) if ((i9 | 0) == (i13 | 0)) {
    i9 = i13;
    i11 = i6;
    i6 = 12;
   } else {
    i11 = i6;
    i6 = 8;
   } else i6 = 8;
   L13 : do if ((i6 | 0) == 8) {
    i6 = 0;
    i14 = i11 + 54 | 0;
    i15 = i11 + 48 | 0;
    i13 = 0;
    do {
     if ((HEAPU16[i14 + (i13 << 1) >> 1] | 0) < (HEAPU16[i9 + 48 + (i13 << 1) >> 1] | 0)) {
      i6 = 12;
      break L13;
     }
     if ((HEAPU16[i9 + 54 + (i13 << 1) >> 1] | 0) < (HEAPU16[i15 + (i13 << 1) >> 1] | 0)) {
      i6 = 12;
      break L13;
     }
     i13 = i13 + 1 | 0;
    } while ((i13 | 0) < 3);
   } while (0);
   if ((i6 | 0) == 12) {
    i10 = HEAP32[i1 + 92 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] & 127](i10, i8, i4);
    HEAP32[i8 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    i10 = (HEAP32[i1 + 104 >> 2] | 0) + 1 | 0;
    HEAP32[i1 + 104 >> 2] = i10;
    HEAP32[3808] = (HEAP32[3808] | 0) + -1;
    i12 = HEAP32[i2 + 4 >> 2] | 0;
   }
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i12 | 0)) break; else {
    i6 = i11;
    i13 = i9;
   }
  }
  if ((i12 | 0) > 1) {
   __ZN20btAlignedObjectArrayI16btBroadphasePairE17quickSortInternalI29btBroadphasePairSortPredicateEEvRKT_ii(i2, 0, i12 + -1 | 0);
   i10 = HEAP32[i1 + 104 >> 2] | 0;
   i12 = HEAP32[i2 + 4 >> 2] | 0;
  }
 } else i10 = 0;
 i15 = i12 - i10 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 __ZN20btAlignedObjectArrayI16btBroadphasePairE6resizeEiRKS0_(i2, i15, i3);
 HEAP32[i1 + 104 >> 2] = 0;
 STACKTOP = i3;
 return;
}
function __ZNK22btBvhTriangleMeshShape9serializeEPvP12btSerializer(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 31](i1, i3) | 0;
 i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, i6) | 0;
 HEAP32[i4 >> 2] = i7;
 if ((i7 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1, i6);
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 i7 = HEAP32[i3 + 48 >> 2] | 0;
 FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 56 >> 2] & 31](i7, i4 + 12 | 0, i1) | 0;
 HEAPF32[i4 + 52 >> 2] = +HEAPF32[i3 + 12 >> 2];
 do if ((HEAP32[i3 + 52 >> 2] | 0) != 0 ? ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 127](i1) | 0) & 1 | 0) == 0 : 0) {
  i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, HEAP32[i3 + 52 >> 2] | 0) | 0;
  if ((i6 | 0) == 0) {
   i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i3 + 52 >> 2] | 0) | 0;
   HEAP32[i4 + 40 >> 2] = i6;
   HEAP32[i4 + 44 >> 2] = 0;
   i6 = HEAP32[i3 + 52 >> 2] | 0;
   i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 127](i6) | 0;
   i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i6, 1) | 0;
   i7 = HEAP32[i3 + 52 >> 2] | 0;
   i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 31](i7, HEAP32[i6 + 8 >> 2] | 0, i1) | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i6, i7, 1213612625, HEAP32[i3 + 52 >> 2] | 0);
   break;
  } else {
   HEAP32[i4 + 40 >> 2] = i6;
   HEAP32[i4 + 44 >> 2] = 0;
   break;
  }
 } else i5 = 8; while (0);
 if ((i5 | 0) == 8) {
  HEAP32[i4 + 40 >> 2] = 0;
  HEAP32[i4 + 44 >> 2] = 0;
 }
 if ((HEAP32[i3 + 56 >> 2] | 0) != 0 ? ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 127](i1) | 0) & 2 | 0) == 0 : 0) {
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, HEAP32[i3 + 56 >> 2] | 0) | 0;
  if ((i5 | 0) == 0) {
   i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i3 + 56 >> 2] | 0) | 0;
   HEAP32[i4 + 48 >> 2] = i6;
   i6 = HEAP32[i3 + 56 >> 2] | 0;
   i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 127](i6) | 0;
   i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i6, 1) | 0;
   i7 = HEAP32[i3 + 56 >> 2] | 0;
   i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 31](i7, HEAP32[i6 + 8 >> 2] | 0, i1) | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i6, i7, 1346456916, HEAP32[i3 + 56 >> 2] | 0);
   STACKTOP = i2;
   return 5712;
  } else {
   HEAP32[i4 + 48 >> 2] = i5;
   STACKTOP = i2;
   return 5712;
  }
 }
 HEAP32[i4 + 48 >> 2] = 0;
 STACKTOP = i2;
 return 5712;
}
function _emscripten_bind_btHingeConstraint_btHingeConstraint_4(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(783) | 0;
 if ((i6 | 0) == 0) i6 = 0; else {
  HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
  i6 = i6 + 19 & -16;
 }
 HEAP32[i6 + 4 >> 2] = 4;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 HEAPF32[i6 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i6 + 20 >> 0] = 1;
 HEAP8[i6 + 21 >> 0] = 0;
 HEAP32[i6 + 24 >> 2] = -1;
 HEAP32[i6 + 28 >> 2] = i1;
 HEAP32[i6 + 32 >> 2] = i3;
 HEAPF32[i6 + 36 >> 2] = 0.0;
 HEAPF32[i6 + 40 >> 2] = .30000001192092896;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAP32[i6 >> 2] = 2504;
 i3 = i6 + 552 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i3 = i6 + 568 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 28 >> 2];
 i3 = i6 + 584 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 44 >> 2];
 i3 = i6 + 600 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 60 >> 2];
 i4 = i6 + 616 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i4 = i6 + 632 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 28 >> 2];
 i4 = i6 + 648 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 32 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 36 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 40 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 44 >> 2];
 i4 = i6 + 664 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 52 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 56 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAPF32[i6 + 688 >> 2] = 0.0;
 HEAPF32[i6 + 692 >> 2] = -1.0;
 HEAPF32[i6 + 696 >> 2] = .8999999761581421;
 HEAPF32[i6 + 700 >> 2] = .30000001192092896;
 HEAPF32[i6 + 704 >> 2] = 1.0;
 HEAPF32[i6 + 708 >> 2] = 0.0;
 HEAPF32[i6 + 712 >> 2] = 0.0;
 HEAP8[i6 + 716 >> 0] = 0;
 HEAP8[i6 + 736 >> 0] = 0;
 HEAP8[i6 + 737 >> 0] = 0;
 HEAP8[i6 + 738 >> 0] = 0;
 HEAP8[i6 + 739 >> 0] = 1;
 HEAP8[i6 + 740 >> 0] = 0;
 HEAP32[i6 + 748 >> 2] = 0;
 HEAPF32[i6 + 732 >> 2] = 1.0;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZN23btDiscreteDynamicsWorld21updateActivationStateEf(i3, d2) {
 i3 = i3 | 0;
 d2 = +d2;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1680);
 if ((HEAP32[i3 + 232 >> 2] | 0) > 0) {
  i4 = (HEAP8[3896] | 0) == 0;
  i5 = 0;
  do {
   i7 = HEAP32[(HEAP32[i3 + 240 >> 2] | 0) + (i5 << 2) >> 2] | 0;
   L5 : do if ((i7 | 0) != 0) {
    i8 = HEAP32[i7 + 216 >> 2] | 0;
    do if (!((i8 | 0) == 4 | (i8 | 0) == 2)) {
     d12 = +HEAPF32[i7 + 312 >> 2];
     d11 = +HEAPF32[i7 + 316 >> 2];
     d10 = +HEAPF32[i7 + 320 >> 2];
     d9 = +HEAPF32[i7 + 472 >> 2];
     if (d12 * d12 + d11 * d11 + d10 * d10 < d9 * d9 ? (d9 = +HEAPF32[i7 + 328 >> 2], d10 = +HEAPF32[i7 + 332 >> 2], d11 = +HEAPF32[i7 + 336 >> 2], d12 = +HEAPF32[i7 + 476 >> 2], d9 * d9 + d10 * d10 + d11 * d11 < d12 * d12) : 0) {
      HEAPF32[i7 + 220 >> 2] = +HEAPF32[i7 + 220 >> 2] + d2;
      i6 = 10;
      break;
     }
     HEAPF32[i7 + 220 >> 2] = 0.0;
     if (!((i8 + -4 | 0) >>> 0 < 2)) {
      HEAP32[i7 + 216 >> 2] = 0;
      i8 = 0;
     } else i6 = 10;
    } else i6 = 10; while (0);
    if ((i6 | 0) == 10) {
     i6 = 0;
     if ((i8 | 0) == 4) break;
    }
    do if (i4) {
     if (!((i8 + -2 | 0) >>> 0 < 2) ? !(+HEAPF32[i7 + 220 >> 2] > 2.0) : 0) break;
     if ((HEAP32[i7 + 204 >> 2] & 3 | 0) != 0) {
      if ((i8 + -4 | 0) >>> 0 < 2) break L5;
      HEAP32[i7 + 216 >> 2] = 2;
      break L5;
     }
     if ((i8 | 0) == 1) {
      HEAP32[i7 + 216 >> 2] = 3;
      break L5;
     }
     if ((i8 | 0) != 2) break L5;
     i8 = (HEAP32[i7 + 260 >> 2] | 0) + 2 | 0;
     HEAP32[i7 + 328 >> 2] = 0;
     HEAP32[i7 + 332 >> 2] = 0;
     HEAP32[i7 + 336 >> 2] = 0;
     HEAP32[i7 + 340 >> 2] = 0;
     HEAP32[i7 + 260 >> 2] = i8;
     HEAP32[i7 + 312 >> 2] = 0;
     HEAP32[i7 + 316 >> 2] = 0;
     HEAP32[i7 + 320 >> 2] = 0;
     HEAP32[i7 + 324 >> 2] = 0;
     break L5;
    } while (0);
    if (!((i8 + -4 | 0) >>> 0 < 2)) HEAP32[i7 + 216 >> 2] = 1;
   } while (0);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i3 + 232 >> 2] | 0));
 }
 i3 = HEAP32[5022] | 0;
 i8 = (HEAP32[i3 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i3 + 16 >> 2] = i8;
 if ((i8 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i3 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i8 = HEAP32[5008] | 0;
  HEAPF32[i3 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i3 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i3 + 8 >> 2];
  if ((HEAP32[i3 + 16 >> 2] | 0) == 0) {
   i3 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i3 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN23btGeneric6DofConstraint20buildAngularJacobianER15btJacobianEntryRK9btVector3(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, i35 = 0;
 i2 = STACKTOP;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i35 = HEAP32[i1 + 28 >> 2] | 0;
 d18 = +HEAPF32[i35 + 4 >> 2];
 d17 = +HEAPF32[i35 + 20 >> 2];
 d16 = +HEAPF32[i35 + 36 >> 2];
 d14 = +HEAPF32[i35 + 8 >> 2];
 d13 = +HEAPF32[i35 + 24 >> 2];
 d12 = +HEAPF32[i35 + 40 >> 2];
 d10 = +HEAPF32[i35 + 12 >> 2];
 d8 = +HEAPF32[i35 + 28 >> 2];
 d6 = +HEAPF32[i35 + 44 >> 2];
 i1 = HEAP32[i1 + 32 >> 2] | 0;
 d34 = +HEAPF32[i1 + 4 >> 2];
 d33 = +HEAPF32[i1 + 20 >> 2];
 d32 = +HEAPF32[i1 + 36 >> 2];
 d30 = +HEAPF32[i1 + 8 >> 2];
 d29 = +HEAPF32[i1 + 24 >> 2];
 d28 = +HEAPF32[i1 + 40 >> 2];
 d26 = +HEAPF32[i1 + 12 >> 2];
 d24 = +HEAPF32[i1 + 28 >> 2];
 d22 = +HEAPF32[i1 + 44 >> 2];
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 d9 = +HEAPF32[i4 >> 2];
 d7 = +HEAPF32[i4 + 4 >> 2];
 d5 = +HEAPF32[i4 + 8 >> 2];
 HEAPF32[i3 + 16 >> 2] = d18 * d9 + d17 * d7 + d16 * d5;
 HEAPF32[i3 + 20 >> 2] = d14 * d9 + d13 * d7 + d12 * d5;
 HEAPF32[i3 + 24 >> 2] = d10 * d9 + d8 * d7 + d6 * d5;
 HEAPF32[i3 + 28 >> 2] = 0.0;
 d25 = -+HEAPF32[i4 >> 2];
 d23 = -+HEAPF32[i4 + 4 >> 2];
 d21 = -+HEAPF32[i4 + 8 >> 2];
 HEAPF32[i3 + 32 >> 2] = d34 * d25 + d33 * d23 + d32 * d21;
 HEAPF32[i3 + 36 >> 2] = d30 * d25 + d29 * d23 + d28 * d21;
 HEAPF32[i3 + 40 >> 2] = d26 * d25 + d24 * d23 + d22 * d21;
 HEAPF32[i3 + 44 >> 2] = 0.0;
 d19 = (d18 * d9 + d17 * d7 + d16 * d5) * +HEAPF32[i35 + 396 >> 2];
 d15 = (d14 * d9 + d13 * d7 + d12 * d5) * +HEAPF32[i35 + 400 >> 2];
 d11 = (d10 * d9 + d8 * d7 + d6 * d5) * +HEAPF32[i35 + 404 >> 2];
 HEAPF32[i3 + 48 >> 2] = d19;
 HEAPF32[i3 + 52 >> 2] = d15;
 HEAPF32[i3 + 56 >> 2] = d11;
 HEAPF32[i3 + 60 >> 2] = 0.0;
 d31 = (d34 * d25 + d33 * d23 + d32 * d21) * +HEAPF32[i1 + 396 >> 2];
 d27 = (d30 * d25 + d29 * d23 + d28 * d21) * +HEAPF32[i1 + 400 >> 2];
 d20 = (d26 * d25 + d24 * d23 + d22 * d21) * +HEAPF32[i1 + 404 >> 2];
 HEAPF32[i3 + 64 >> 2] = d31;
 HEAPF32[i3 + 68 >> 2] = d27;
 HEAPF32[i3 + 72 >> 2] = d20;
 HEAPF32[i3 + 76 >> 2] = 0.0;
 HEAPF32[i3 + 80 >> 2] = (d34 * d25 + d33 * d23 + d32 * d21) * d31 + (d30 * d25 + d29 * d23 + d28 * d21) * d27 + (d26 * d25 + d24 * d23 + d22 * d21) * d20 + (d19 * (d18 * d9 + d17 * d7 + d16 * d5) + d15 * (d14 * d9 + d13 * d7 + d12 * d5) + d11 * (d10 * d9 + d8 * d7 + d6 * d5));
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(i1, d5, i4, i3, i2) {
 i1 = i1 | 0;
 d5 = +d5;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 HEAPF32[i1 + 164 >> 2] = 1.0;
 HEAPF32[i1 + 168 >> 2] = 1.0;
 HEAPF32[i1 + 172 >> 2] = 1.0;
 HEAPF32[i1 + 176 >> 2] = 0.0;
 HEAP32[i1 + 180 >> 2] = 0;
 HEAPF32[i1 + 184 >> 2] = 999999984306749400.0;
 HEAP32[i1 + 188 >> 2] = 0;
 HEAP32[i1 + 192 >> 2] = 0;
 HEAP32[i1 + 196 >> 2] = 0;
 HEAP32[i1 + 200 >> 2] = 0;
 HEAP32[i1 + 204 >> 2] = 1;
 HEAP32[i1 + 208 >> 2] = -1;
 HEAP32[i1 + 212 >> 2] = -1;
 HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 HEAPF32[i1 + 224 >> 2] = .5;
 HEAPF32[i1 + 228 >> 2] = 0.0;
 HEAPF32[i1 + 232 >> 2] = 0.0;
 HEAP32[i1 + 236 >> 2] = 1;
 HEAP32[i1 + 240 >> 2] = 0;
 HEAPF32[i1 + 244 >> 2] = 1.0;
 HEAP32[i1 + 248 >> 2] = 0;
 HEAP32[i1 + 252 >> 2] = 0;
 HEAP32[i1 + 256 >> 2] = 0;
 HEAP32[i1 + 260 >> 2] = 0;
 HEAPF32[i1 + 4 >> 2] = 1.0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAPF32[i1 + 24 >> 2] = 1.0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAPF32[i1 + 44 >> 2] = 1.0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 >> 2] = 3912;
 HEAP8[i1 + 500 >> 0] = 1;
 HEAP32[i1 + 496 >> 2] = 0;
 HEAP32[i1 + 488 >> 2] = 0;
 HEAP32[i1 + 492 >> 2] = 0;
 HEAPF32[i6 >> 2] = d5;
 HEAP32[i6 + 4 >> 2] = i4;
 HEAP32[i6 + 72 >> 2] = i3;
 HEAP32[i6 + 76 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i6 + 80 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i6 + 84 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i6 + 88 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAPF32[i6 + 92 >> 2] = 0.0;
 HEAPF32[i6 + 96 >> 2] = 0.0;
 HEAPF32[i6 + 100 >> 2] = .5;
 HEAPF32[i6 + 104 >> 2] = 0.0;
 HEAPF32[i6 + 108 >> 2] = 0.0;
 HEAPF32[i6 + 112 >> 2] = .800000011920929;
 HEAPF32[i6 + 116 >> 2] = 1.0;
 HEAP8[i6 + 120 >> 0] = 0;
 HEAPF32[i6 + 124 >> 2] = .004999999888241291;
 HEAPF32[i6 + 128 >> 2] = .009999999776482582;
 HEAPF32[i6 + 132 >> 2] = .009999999776482582;
 HEAPF32[i6 + 136 >> 2] = .009999999776482582;
 HEAPF32[i6 + 8 >> 2] = 1.0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 HEAPF32[i6 + 28 >> 2] = 1.0;
 HEAP32[i6 + 32 >> 2] = 0;
 HEAP32[i6 + 36 >> 2] = 0;
 HEAP32[i6 + 40 >> 2] = 0;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAPF32[i6 + 48 >> 2] = 1.0;
 HEAP32[i6 + 52 >> 2] = 0;
 HEAP32[i6 + 56 >> 2] = 0;
 HEAP32[i6 + 60 >> 2] = 0;
 HEAP32[i6 + 64 >> 2] = 0;
 HEAP32[i6 + 68 >> 2] = 0;
 __ZN11btRigidBody14setupRigidBodyERKNS_27btRigidBodyConstructionInfoE(i1, i6);
 STACKTOP = i6;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver36resolveSingleConstraintRowLowerLimitER12btSolverBodyS1_RK18btSolverConstraint(i6, i1, i7) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i5 = STACKTOP;
 d10 = +HEAPF32[i7 + 100 >> 2];
 d4 = +HEAPF32[i7 + 16 >> 2];
 d2 = +HEAPF32[i7 + 20 >> 2];
 d3 = +HEAPF32[i7 + 24 >> 2];
 d11 = +HEAPF32[i7 + 108 >> 2];
 d11 = +HEAPF32[i7 + 112 >> 2] - d10 * +HEAPF32[i7 + 116 >> 2] - (d4 * +HEAPF32[i6 + 64 >> 2] + d2 * +HEAPF32[i6 + 68 >> 2] + d3 * +HEAPF32[i6 + 72 >> 2] + (+HEAPF32[i7 >> 2] * +HEAPF32[i6 + 80 >> 2] + +HEAPF32[i7 + 4 >> 2] * +HEAPF32[i6 + 84 >> 2] + +HEAPF32[i7 + 8 >> 2] * +HEAPF32[i6 + 88 >> 2])) * d11 - d11 * (+HEAPF32[i7 + 48 >> 2] * +HEAPF32[i1 + 64 >> 2] + +HEAPF32[i7 + 52 >> 2] * +HEAPF32[i1 + 68 >> 2] + +HEAPF32[i7 + 56 >> 2] * +HEAPF32[i1 + 72 >> 2] + (+HEAPF32[i7 + 32 >> 2] * +HEAPF32[i1 + 80 >> 2] + +HEAPF32[i7 + 36 >> 2] * +HEAPF32[i1 + 84 >> 2] + +HEAPF32[i7 + 40 >> 2] * +HEAPF32[i1 + 88 >> 2]));
 d9 = +HEAPF32[i7 + 120 >> 2];
 if (d10 + d11 < d9) d8 = d9 - d10; else {
  d8 = d11;
  d9 = d10 + d11;
 }
 HEAPF32[i7 + 100 >> 2] = d9;
 if ((HEAP32[i6 + 240 >> 2] | 0) != 0) {
  d11 = d8 * +HEAPF32[i6 + 132 >> 2] * d2 * +HEAPF32[i6 + 116 >> 2];
  d10 = d8 * +HEAPF32[i6 + 136 >> 2] * d3 * +HEAPF32[i6 + 120 >> 2];
  HEAPF32[i6 + 64 >> 2] = +HEAPF32[i6 + 112 >> 2] * d8 * +HEAPF32[i6 + 128 >> 2] * d4 + +HEAPF32[i6 + 64 >> 2];
  HEAPF32[i6 + 68 >> 2] = d11 + +HEAPF32[i6 + 68 >> 2];
  HEAPF32[i6 + 72 >> 2] = d10 + +HEAPF32[i6 + 72 >> 2];
  d10 = d8 * +HEAPF32[i6 + 100 >> 2] * +HEAPF32[i7 + 68 >> 2];
  d11 = d8 * +HEAPF32[i6 + 104 >> 2] * +HEAPF32[i7 + 72 >> 2];
  HEAPF32[i6 + 80 >> 2] = d8 * +HEAPF32[i6 + 96 >> 2] * +HEAPF32[i7 + 64 >> 2] + +HEAPF32[i6 + 80 >> 2];
  HEAPF32[i6 + 84 >> 2] = d10 + +HEAPF32[i6 + 84 >> 2];
  HEAPF32[i6 + 88 >> 2] = d11 + +HEAPF32[i6 + 88 >> 2];
 }
 if ((HEAP32[i1 + 240 >> 2] | 0) == 0) {
  STACKTOP = i5;
  return;
 }
 d11 = d8 * +HEAPF32[i1 + 132 >> 2] * +HEAPF32[i7 + 52 >> 2] * +HEAPF32[i1 + 116 >> 2];
 d10 = d8 * +HEAPF32[i1 + 136 >> 2] * +HEAPF32[i7 + 56 >> 2] * +HEAPF32[i1 + 120 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i1 + 112 >> 2] * d8 * +HEAPF32[i1 + 128 >> 2] * +HEAPF32[i7 + 48 >> 2] + +HEAPF32[i1 + 64 >> 2];
 HEAPF32[i1 + 68 >> 2] = d11 + +HEAPF32[i1 + 68 >> 2];
 HEAPF32[i1 + 72 >> 2] = d10 + +HEAPF32[i1 + 72 >> 2];
 d10 = d8 * +HEAPF32[i1 + 100 >> 2] * +HEAPF32[i7 + 84 >> 2];
 d11 = d8 * +HEAPF32[i1 + 104 >> 2] * +HEAPF32[i7 + 88 >> 2];
 HEAPF32[i1 + 80 >> 2] = d8 * +HEAPF32[i1 + 96 >> 2] * +HEAPF32[i7 + 80 >> 2] + +HEAPF32[i1 + 80 >> 2];
 HEAPF32[i1 + 84 >> 2] = d10 + +HEAPF32[i1 + 84 >> 2];
 HEAPF32[i1 + 88 >> 2] = d11 + +HEAPF32[i1 + 88 >> 2];
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorld23synchronizeMotionStatesEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1592);
 if ((HEAP8[i2 + 274 >> 0] | 0) == 0) {
  i7 = HEAP32[i2 + 232 >> 2] | 0;
  if ((i7 | 0) > 0) {
   i5 = 0;
   do {
    i6 = HEAP32[(HEAP32[i2 + 240 >> 2] | 0) + (i5 << 2) >> 2] | 0;
    i8 = HEAP32[i6 + 216 >> 2] | 0;
    if ((!((i8 | 0) == 2 | (i8 | 0) == 5) ? (HEAP32[i6 + 480 >> 2] | 0) != 0 : 0) ? (HEAP32[i6 + 204 >> 2] & 3 | 0) == 0 : 0) {
     if ((HEAP8[i2 + 300 >> 0] | 0) != 0 ? (d3 = +HEAPF32[i2 + 268 >> 2], d3 != 0.0) : 0) d4 = +HEAPF32[i2 + 264 >> 2] - d3; else d4 = +HEAPF32[i2 + 264 >> 2] * +HEAPF32[i6 + 244 >> 2];
     __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i6 + 68 | 0, +HEAPF32[i6 + 132 >> 2], +HEAPF32[i6 + 136 >> 2], +HEAPF32[i6 + 140 >> 2], i6 + 148 | 0, d4, i1);
     i7 = HEAP32[i6 + 480 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 127](i7, i1);
     i7 = HEAP32[i2 + 232 >> 2] | 0;
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i7 | 0));
  }
 } else {
  i7 = HEAP32[i2 + 8 >> 2] | 0;
  if ((i7 | 0) > 0) {
   i5 = 0;
   do {
    i6 = HEAP32[(HEAP32[i2 + 16 >> 2] | 0) + (i5 << 2) >> 2] | 0;
    if ((!((i6 | 0) == 0 ? 1 : (HEAP32[i6 + 236 >> 2] & 2 | 0) == 0) ? (HEAP32[i6 + 480 >> 2] | 0) != 0 : 0) ? (HEAP32[i6 + 204 >> 2] & 3 | 0) == 0 : 0) {
     if ((HEAP8[i2 + 300 >> 0] | 0) != 0 ? (d4 = +HEAPF32[i2 + 268 >> 2], d4 != 0.0) : 0) d3 = +HEAPF32[i2 + 264 >> 2] - d4; else d3 = +HEAPF32[i2 + 264 >> 2] * +HEAPF32[i6 + 244 >> 2];
     __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i6 + 68 | 0, +HEAPF32[i6 + 132 >> 2], +HEAPF32[i6 + 136 >> 2], +HEAPF32[i6 + 140 >> 2], i6 + 148 | 0, d3, i1 + 64 | 0);
     i7 = HEAP32[i6 + 480 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 127](i7, i1 + 64 | 0);
     i7 = HEAP32[i2 + 8 >> 2] | 0;
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i7 | 0));
  }
 }
 i2 = HEAP32[5022] | 0;
 i8 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i8;
 if ((i8 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 + 128 | 0, 0) | 0;
  i8 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 132 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) + (((HEAP32[i1 + 128 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN23btDiscreteDynamicsWorld14stepSimulationEfif(i2, d3, i6, d5) {
 i2 = i2 | 0;
 d3 = +d3;
 i6 = i6 | 0;
 d5 = +d5;
 var i1 = 0, i4 = 0, d7 = 0.0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _gettimeofday(HEAP32[5008] | 0, 0) | 0;
 __ZN12CProfileNode5ResetEv(20040);
 HEAP32[5011] = (HEAP32[5011] | 0) + 1;
 i8 = HEAP32[5014] | 0;
 HEAP32[5014] = i8 + 1;
 if ((i8 | 0) == 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i8 = HEAP32[5008] | 0;
  HEAP32[5013] = (HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) * 1e6 | 0);
 }
 HEAP32[5024] = 0;
 _gettimeofday(i1 | 0, 0) | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1616);
 if ((i6 | 0) != 0) {
  HEAPF32[i2 + 268 >> 2] = d5;
  d7 = +HEAPF32[i2 + 264 >> 2] + d3;
  HEAPF32[i2 + 264 >> 2] = d7;
  if (!(d7 >= d5)) {
   d3 = d5;
   i4 = 0;
  } else {
   HEAPF32[i2 + 264 >> 2] = d7 - +(~~(d7 / d5) | 0) * d5;
   d3 = d5;
   i4 = ~~(d7 / d5);
  }
 } else {
  HEAPF32[i2 + 264 >> 2] = (HEAP8[i2 + 300 >> 0] | 0) != 0 ? 0.0 : d3;
  HEAPF32[i2 + 268 >> 2] = 0.0;
  i4 = !(+Math_abs(+d3) < 1.1920928955078125e-7) & 1;
  i6 = i4;
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0) != 0) {
  i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2) | 0;
  i8 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] & 127](i8) | 0) >>> 4 & 1;
  HEAP8[3896] = i8;
 }
 if ((i4 | 0) != 0) {
  i6 = (i4 | 0) > (i6 | 0) ? i6 : i4;
  FUNCTION_TABLE_vid[HEAP32[(HEAP32[i2 >> 2] | 0) + 164 >> 2] & 31](i2, d3 * +(i6 | 0));
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 168 >> 2] & 511](i2);
  if ((i6 | 0) > 0) {
   i8 = 0;
   do {
    FUNCTION_TABLE_vid[HEAP32[(HEAP32[i2 >> 2] | 0) + 160 >> 2] & 31](i2, d3);
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 80 >> 2] & 511](i2);
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) < (i6 | 0));
  }
 } else FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 80 >> 2] & 511](i2);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 120 >> 2] & 511](i2);
 HEAP32[5024] = (HEAP32[5024] | 0) + 1;
 i2 = HEAP32[5022] | 0;
 i8 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i8;
 if ((i8 | 0) != 0) {
  STACKTOP = i1;
  return i4 | 0;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i8 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return i4 | 0;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return i4 | 0;
}
function __ZN23btDiscreteDynamicsWorldD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 1392;
 if ((HEAP8[i1 + 272 >> 0] | 0) != 0 ? (i5 = HEAP32[i1 + 204 >> 2] | 0, FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i5), i5 = HEAP32[i1 + 204 >> 2] | 0, (i5 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i5 + -4 >> 2] | 0);
 }
 i5 = HEAP32[i1 + 196 >> 2] | 0;
 if ((i5 | 0) != 0 ? (FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i5), i4 = HEAP32[i1 + 196 >> 2] | 0, (i4 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i4 + -4 >> 2] | 0);
 }
 if ((HEAP8[i1 + 273 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 200 >> 2] | 0, FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3), i3 = HEAP32[i1 + 200 >> 2] | 0, (i3 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i1 + 316 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 320 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 316 >> 2] = 0;
 }
 HEAP8[i1 + 320 >> 0] = 1;
 HEAP32[i1 + 316 >> 2] = 0;
 HEAP32[i1 + 308 >> 2] = 0;
 HEAP32[i1 + 312 >> 2] = 0;
 i3 = HEAP32[i1 + 288 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 292 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 288 >> 2] = 0;
 }
 HEAP8[i1 + 292 >> 0] = 1;
 HEAP32[i1 + 288 >> 2] = 0;
 HEAP32[i1 + 280 >> 2] = 0;
 HEAP32[i1 + 284 >> 2] = 0;
 i3 = HEAP32[i1 + 240 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 244 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 240 >> 2] = 0;
 }
 HEAP8[i1 + 244 >> 0] = 1;
 HEAP32[i1 + 240 >> 2] = 0;
 HEAP32[i1 + 232 >> 2] = 0;
 HEAP32[i1 + 236 >> 2] = 0;
 i3 = HEAP32[i1 + 220 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 224 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 220 >> 2] = 0;
 }
 HEAP8[i1 + 224 >> 0] = 1;
 HEAP32[i1 + 220 >> 2] = 0;
 HEAP32[i1 + 212 >> 2] = 0;
 HEAP32[i1 + 216 >> 2] = 0;
 i3 = HEAP32[i1 + 188 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 192 >> 0] = 1;
  HEAP32[i1 + 188 >> 2] = 0;
  HEAP32[i1 + 180 >> 2] = 0;
  i5 = i1 + 184 | 0;
  HEAP32[i5 >> 2] = 0;
  __ZN16btCollisionWorldD2Ev(i1);
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 192 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 188 >> 2] = 0;
 HEAP8[i1 + 192 >> 0] = 1;
 HEAP32[i1 + 188 >> 2] = 0;
 HEAP32[i1 + 180 >> 2] = 0;
 i5 = i1 + 184 | 0;
 HEAP32[i5 >> 2] = 0;
 __ZN16btCollisionWorldD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld18saveKinematicStateEf(i1, d3) {
 i1 = i1 | 0;
 d3 = +d3;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = 0;
 do {
  i5 = HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + (i4 << 2) >> 2] | 0;
  if ((!((i5 | 0) == 0 ? 1 : (HEAP32[i5 + 236 >> 2] & 2 | 0) == 0) ? (HEAP32[i5 + 216 >> 2] | 0) != 2 : 0) ? !((HEAP32[i5 + 204 >> 2] & 2 | 0) == 0 | d3 != 0.0 ^ 1) : 0) {
   i6 = HEAP32[i5 + 480 >> 2] | 0;
   if ((i6 | 0) == 0) i6 = i5 + 4 | 0; else {
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 127](i6, i5 + 4 | 0);
    i6 = i5 + 4 | 0;
   }
   d8 = (+HEAPF32[i5 + 56 >> 2] - +HEAPF32[i5 + 120 >> 2]) * (1.0 / d3);
   d9 = 1.0 / d3 * (+HEAPF32[i5 + 60 >> 2] - +HEAPF32[i5 + 124 >> 2]);
   HEAPF32[i5 + 312 >> 2] = (+HEAPF32[i5 + 52 >> 2] - +HEAPF32[i5 + 116 >> 2]) * (1.0 / d3);
   HEAPF32[i5 + 316 >> 2] = d8;
   HEAPF32[i5 + 320 >> 2] = d9;
   HEAPF32[i5 + 324 >> 2] = 0.0;
   __ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(i5 + 68 | 0, i6, i2 + 8 | 0, i2);
   d9 = +HEAPF32[i2 >> 2];
   d8 = 1.0 / d3 * d9 * +HEAPF32[i2 + 12 >> 2];
   d7 = 1.0 / d3 * d9 * +HEAPF32[i2 + 16 >> 2];
   HEAPF32[i5 + 328 >> 2] = 1.0 / d3 * +HEAPF32[i2 + 8 >> 2] * d9;
   HEAPF32[i5 + 332 >> 2] = d8;
   HEAPF32[i5 + 336 >> 2] = d7;
   HEAPF32[i5 + 340 >> 2] = 0.0;
   HEAP32[i5 + 132 >> 2] = HEAP32[i5 + 312 >> 2];
   HEAP32[i5 + 136 >> 2] = HEAP32[i5 + 316 >> 2];
   HEAP32[i5 + 140 >> 2] = HEAP32[i5 + 320 >> 2];
   HEAP32[i5 + 144 >> 2] = HEAP32[i5 + 324 >> 2];
   HEAP32[i5 + 148 >> 2] = HEAP32[i5 + 328 >> 2];
   HEAP32[i5 + 152 >> 2] = HEAP32[i5 + 332 >> 2];
   HEAP32[i5 + 156 >> 2] = HEAP32[i5 + 336 >> 2];
   HEAP32[i5 + 160 >> 2] = HEAP32[i5 + 340 >> 2];
   HEAP32[i5 + 68 >> 2] = HEAP32[i6 + 0 >> 2];
   HEAP32[i5 + 72 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i5 + 76 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i5 + 80 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i5 + 84 >> 2] = HEAP32[i5 + 20 >> 2];
   HEAP32[i5 + 88 >> 2] = HEAP32[i5 + 24 >> 2];
   HEAP32[i5 + 92 >> 2] = HEAP32[i5 + 28 >> 2];
   HEAP32[i5 + 96 >> 2] = HEAP32[i5 + 32 >> 2];
   HEAP32[i5 + 100 >> 2] = HEAP32[i5 + 36 >> 2];
   HEAP32[i5 + 104 >> 2] = HEAP32[i5 + 40 >> 2];
   HEAP32[i5 + 108 >> 2] = HEAP32[i5 + 44 >> 2];
   HEAP32[i5 + 112 >> 2] = HEAP32[i5 + 48 >> 2];
   HEAP32[i5 + 116 >> 2] = HEAP32[i5 + 52 >> 2];
   HEAP32[i5 + 120 >> 2] = HEAP32[i5 + 56 >> 2];
   HEAP32[i5 + 124 >> 2] = HEAP32[i5 + 60 >> 2];
   HEAP32[i5 + 128 >> 2] = HEAP32[i5 + 64 >> 2];
   i6 = HEAP32[i1 + 8 >> 2] | 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i6 | 0));
 STACKTOP = i2;
 return;
}
function __ZN14btTriangleMesh8addIndexEi(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i1 + 164 >> 0] | 0) == 0) {
  i6 = HEAP32[i1 + 148 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i1 + 152 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
   if ((i4 | 0) == 0) i5 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i5 = _malloc((i4 << 1) + 19 | 0) | 0;
    if ((i5 | 0) == 0) i5 = 0; else {
     HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
     i5 = i5 + 19 & -16;
    }
    i6 = HEAP32[i1 + 148 >> 2] | 0;
   }
   if ((i6 | 0) > 0) {
    i7 = 0;
    do {
     i8 = i5 + (i7 << 1) | 0;
     if ((i8 | 0) != 0) HEAP16[i8 >> 1] = HEAP16[(HEAP32[i1 + 156 >> 2] | 0) + (i7 << 1) >> 1] | 0;
     i7 = i7 + 1 | 0;
    } while ((i7 | 0) != (i6 | 0));
   }
   i7 = HEAP32[i1 + 156 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i1 + 160 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
     i6 = HEAP32[i1 + 148 >> 2] | 0;
    }
    HEAP32[i1 + 156 >> 2] = 0;
   }
   HEAP8[i1 + 160 >> 0] = 1;
   HEAP32[i1 + 156 >> 2] = i5;
   HEAP32[i1 + 152 >> 2] = i4;
  }
  i4 = HEAP32[i1 + 156 >> 2] | 0;
  i5 = i4 + (i6 << 1) | 0;
  if ((i5 | 0) != 0) HEAP16[i5 >> 1] = i3;
  HEAP32[i1 + 148 >> 2] = i6 + 1;
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + 4 >> 2] = i4;
  STACKTOP = i2;
  return;
 } else {
  i8 = HEAP32[i1 + 128 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i1 + 132 >> 2] | 0) ? (i5 = (i8 | 0) == 0 ? 1 : i8 << 1, (i8 | 0) < (i5 | 0)) : 0) {
   if ((i5 | 0) == 0) i4 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i4 = _malloc((i5 << 2 | 3) + 16 | 0) | 0;
    if ((i4 | 0) == 0) i4 = 0; else {
     HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
     i4 = i4 + 19 & -16;
    }
    i8 = HEAP32[i1 + 128 >> 2] | 0;
   }
   if ((i8 | 0) > 0) {
    i6 = 0;
    do {
     i7 = i4 + (i6 << 2) | 0;
     if ((i7 | 0) != 0) HEAP32[i7 >> 2] = HEAP32[(HEAP32[i1 + 136 >> 2] | 0) + (i6 << 2) >> 2];
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i8 | 0));
   }
   i6 = HEAP32[i1 + 136 >> 2] | 0;
   if ((i6 | 0) != 0) {
    if ((HEAP8[i1 + 140 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i6 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 136 >> 2] = 0;
   }
   HEAP8[i1 + 140 >> 0] = 1;
   HEAP32[i1 + 136 >> 2] = i4;
   HEAP32[i1 + 132 >> 2] = i5;
   i8 = HEAP32[i1 + 128 >> 2] | 0;
  }
  i4 = HEAP32[i1 + 136 >> 2] | 0;
  i5 = i4 + (i8 << 2) | 0;
  if ((i5 | 0) != 0) {
   HEAP32[i5 >> 2] = i3;
   i8 = HEAP32[i1 + 128 >> 2] | 0;
  }
  HEAP32[i1 + 128 >> 2] = i8 + 1;
  HEAP32[(HEAP32[i1 + 32 >> 2] | 0) + 4 >> 2] = i4;
  STACKTOP = i2;
  return;
 }
}
function __ZNK11btTransformmlERKS_(i1, i6, i7) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 d16 = +HEAPF32[i7 >> 2];
 d4 = +HEAPF32[i6 >> 2];
 d15 = +HEAPF32[i7 + 16 >> 2];
 d5 = +HEAPF32[i6 + 4 >> 2];
 d14 = +HEAPF32[i7 + 32 >> 2];
 d9 = +HEAPF32[i6 + 8 >> 2];
 HEAPF32[i2 + 80 >> 2] = d16 * d4 + d15 * d5 + d14 * d9;
 d13 = +HEAPF32[i7 + 4 >> 2];
 d12 = +HEAPF32[i7 + 20 >> 2];
 d11 = +HEAPF32[i7 + 36 >> 2];
 HEAPF32[i2 + 76 >> 2] = d13 * d4 + d12 * d5 + d11 * d9;
 d10 = +HEAPF32[i7 + 8 >> 2];
 d3 = +HEAPF32[i7 + 24 >> 2];
 d8 = +HEAPF32[i7 + 40 >> 2];
 HEAPF32[i2 + 72 >> 2] = d10 * d4 + d3 * d5 + d8 * d9;
 d9 = +HEAPF32[i6 + 16 >> 2];
 d5 = +HEAPF32[i6 + 20 >> 2];
 d4 = +HEAPF32[i6 + 24 >> 2];
 HEAPF32[i2 + 68 >> 2] = d16 * d9 + d15 * d5 + d14 * d4;
 HEAPF32[i2 + 64 >> 2] = d13 * d9 + d12 * d5 + d11 * d4;
 HEAPF32[i2 + 60 >> 2] = d10 * d9 + d3 * d5 + d8 * d4;
 d4 = +HEAPF32[i6 + 32 >> 2];
 d5 = +HEAPF32[i6 + 36 >> 2];
 d9 = +HEAPF32[i6 + 40 >> 2];
 HEAPF32[i2 + 56 >> 2] = d16 * d4 + d15 * d5 + d14 * d9;
 HEAPF32[i2 + 52 >> 2] = d13 * d4 + d12 * d5 + d11 * d9;
 HEAPF32[i2 + 48 >> 2] = d10 * d4 + d3 * d5 + d8 * d9;
 __ZN11btMatrix3x3C1ERKfS1_S1_S1_S1_S1_S1_S1_S1_(i2, i2 + 80 | 0, i2 + 76 | 0, i2 + 72 | 0, i2 + 68 | 0, i2 + 64 | 0, i2 + 60 | 0, i2 + 56 | 0, i2 + 52 | 0, i2 + 48 | 0);
 d9 = +HEAPF32[i7 + 48 >> 2];
 d8 = +HEAPF32[i7 + 52 >> 2];
 d5 = +HEAPF32[i7 + 56 >> 2];
 d3 = d9 * +HEAPF32[i6 >> 2] + d8 * +HEAPF32[i6 + 4 >> 2] + d5 * +HEAPF32[i6 + 8 >> 2] + +HEAPF32[i6 + 48 >> 2];
 d4 = d9 * +HEAPF32[i6 + 16 >> 2] + d8 * +HEAPF32[i6 + 20 >> 2] + d5 * +HEAPF32[i6 + 24 >> 2] + +HEAPF32[i6 + 52 >> 2];
 d5 = d9 * +HEAPF32[i6 + 32 >> 2] + d8 * +HEAPF32[i6 + 36 >> 2] + d5 * +HEAPF32[i6 + 40 >> 2] + +HEAPF32[i6 + 56 >> 2];
 i6 = i1;
 do i6 = i6 + 16 | 0; while ((i6 | 0) != (i1 + 48 | 0));
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAPF32[i1 + 48 >> 2] = d3;
 HEAPF32[i1 + 52 >> 2] = d4;
 HEAPF32[i1 + 56 >> 2] = d5;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN20btDefaultMotionStateC1ERK11btTransformS2_(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i3 >> 2] = 600;
 i5 = i3 + 4 | 0;
 do i5 = i5 + 16 | 0; while ((i5 | 0) != (i3 + 52 | 0));
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i3 + 28 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i3 + 32 >> 2] = HEAP32[i1 + 28 >> 2];
 HEAP32[i3 + 36 >> 2] = HEAP32[i1 + 32 >> 2];
 HEAP32[i3 + 40 >> 2] = HEAP32[i1 + 36 >> 2];
 HEAP32[i3 + 44 >> 2] = HEAP32[i1 + 40 >> 2];
 HEAP32[i3 + 48 >> 2] = HEAP32[i1 + 44 >> 2];
 HEAP32[i3 + 52 >> 2] = HEAP32[i1 + 48 >> 2];
 HEAP32[i3 + 56 >> 2] = HEAP32[i1 + 52 >> 2];
 HEAP32[i3 + 60 >> 2] = HEAP32[i1 + 56 >> 2];
 HEAP32[i3 + 64 >> 2] = HEAP32[i1 + 60 >> 2];
 i5 = i3 + 68 | 0;
 do i5 = i5 + 16 | 0; while ((i5 | 0) != (i3 + 116 | 0));
 HEAP32[i3 + 68 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 72 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 76 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 80 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i3 + 84 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 88 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i3 + 92 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i3 + 96 >> 2] = HEAP32[i4 + 28 >> 2];
 HEAP32[i3 + 100 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i3 + 104 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i3 + 108 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i3 + 112 >> 2] = HEAP32[i4 + 44 >> 2];
 HEAP32[i3 + 116 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i3 + 120 >> 2] = HEAP32[i4 + 52 >> 2];
 HEAP32[i3 + 124 >> 2] = HEAP32[i4 + 56 >> 2];
 HEAP32[i3 + 128 >> 2] = HEAP32[i4 + 60 >> 2];
 i4 = i3 + 132 | 0;
 do i4 = i4 + 16 | 0; while ((i4 | 0) != (i3 + 180 | 0));
 HEAP32[i3 + 132 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i3 + 136 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 140 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 144 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i3 + 148 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i3 + 152 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i3 + 156 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i3 + 160 >> 2] = HEAP32[i1 + 28 >> 2];
 HEAP32[i3 + 164 >> 2] = HEAP32[i1 + 32 >> 2];
 HEAP32[i3 + 168 >> 2] = HEAP32[i1 + 36 >> 2];
 HEAP32[i3 + 172 >> 2] = HEAP32[i1 + 40 >> 2];
 HEAP32[i3 + 176 >> 2] = HEAP32[i1 + 44 >> 2];
 HEAP32[i3 + 180 >> 2] = HEAP32[i1 + 48 >> 2];
 HEAP32[i3 + 184 >> 2] = HEAP32[i1 + 52 >> 2];
 HEAP32[i3 + 188 >> 2] = HEAP32[i1 + 56 >> 2];
 HEAP32[i3 + 192 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i3 + 196 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK14btCapsuleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = HEAP32[i3 + 52 >> 2] | 0;
 d6 = +HEAPF32[i3 + (((i8 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 if ((i1 | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i7 = 0;
 while (1) {
  i10 = i3 + (i8 << 2) + 28 | 0;
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i5 + 20 >> 2] = 0;
  HEAP32[i5 + 24 >> 2] = 0;
  HEAP32[i5 + 28 >> 2] = 0;
  HEAPF32[i5 + 16 + (i8 << 2) >> 2] = +HEAPF32[i10 >> 2];
  i10 = i4 + (i7 << 4) | 0;
  i9 = i4 + (i7 << 4) + 4 | 0;
  i8 = i4 + (i7 << 4) + 8 | 0;
  d18 = d6 * +HEAPF32[i10 >> 2] + +HEAPF32[i5 + 16 >> 2];
  d16 = d6 * +HEAPF32[i9 >> 2] + +HEAPF32[i5 + 20 >> 2];
  d14 = d6 * +HEAPF32[i8 >> 2] + +HEAPF32[i5 + 24 >> 2];
  d20 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
  d17 = +HEAPF32[i10 >> 2];
  d15 = +HEAPF32[i9 >> 2];
  d19 = +HEAPF32[i8 >> 2];
  if (d17 * (d18 - d20 * d17) + d15 * (d16 - d20 * d15) + d19 * (d14 - d20 * d19) > -999999984306749400.0) {
   HEAPF32[i2 + (i7 << 4) >> 2] = d18 - d20 * d17;
   HEAPF32[i2 + (i7 << 4) + 4 >> 2] = d16 - d20 * d15;
   HEAPF32[i2 + (i7 << 4) + 8 >> 2] = d14 - d20 * d19;
   HEAPF32[i2 + (i7 << 4) + 12 >> 2] = 0.0;
   d13 = +HEAPF32[i10 >> 2];
   d12 = +HEAPF32[i9 >> 2];
   d11 = +HEAPF32[i8 >> 2];
   d14 = d17 * (d18 - d20 * d17) + d15 * (d16 - d20 * d15) + d19 * (d14 - d20 * d19);
  } else {
   d13 = d17;
   d12 = d15;
   d11 = d19;
   d14 = -999999984306749400.0;
  }
  HEAP32[i5 + 0 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  i21 = HEAP32[i3 + 52 >> 2] | 0;
  HEAPF32[i5 + (i21 << 2) >> 2] = -+HEAPF32[i3 + (i21 << 2) + 28 >> 2];
  d13 = d6 * d13 + +HEAPF32[i5 >> 2];
  d12 = d6 * d12 + +HEAPF32[i5 + 4 >> 2];
  d15 = d6 * d11 + +HEAPF32[i5 + 8 >> 2];
  d11 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
  d16 = +HEAPF32[i10 >> 2];
  d17 = +HEAPF32[i9 >> 2];
  d18 = +HEAPF32[i8 >> 2];
  if (d16 * (d13 - d11 * d16) + d17 * (d12 - d11 * d17) + d18 * (d15 - d11 * d18) > d14) {
   HEAPF32[i2 + (i7 << 4) >> 2] = d13 - d11 * d16;
   HEAPF32[i2 + (i7 << 4) + 4 >> 2] = d12 - d11 * d17;
   HEAPF32[i2 + (i7 << 4) + 8 >> 2] = d15 - d11 * d18;
   HEAPF32[i2 + (i7 << 4) + 12 >> 2] = 0.0;
  }
  i7 = i7 + 1 | 0;
  if ((i7 | 0) == (i1 | 0)) break;
  i8 = HEAP32[i3 + 52 >> 2] | 0;
 }
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(627) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 __ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBody(i4, 5, i1);
 HEAP32[i4 >> 2] = 1264;
 i7 = i4 + 300 | 0;
 HEAP32[i7 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i6 = i4 + 316 | 0;
 HEAP32[i6 + 0 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 28 >> 2];
 i5 = i4 + 332 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 44 >> 2];
 i1 = i4 + 348 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 60 >> 2];
 i1 = i4 + 364 | 0;
 i3 = i4 + 524 | 0;
 HEAP8[i4 + 527 >> 0] = 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i1 = i4 + 380 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i1 = i4 + 396 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i1 = i4 + 412 | 0;
 HEAP8[i3 >> 0] = 0;
 HEAP8[i4 + 525 >> 0] = 0;
 HEAP8[i4 + 526 >> 0] = 0;
 HEAP8[i4 + 552 >> 0] = 0;
 i3 = i4 + 572 | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAPF32[i3 >> 2] = -1.0;
 HEAPF32[i4 + 444 >> 2] = 999999984306749400.0;
 HEAPF32[i4 + 448 >> 2] = 999999984306749400.0;
 HEAPF32[i4 + 452 >> 2] = 999999984306749400.0;
 HEAPF32[i4 + 428 >> 2] = 1.0;
 HEAPF32[i4 + 432 >> 2] = .30000001192092896;
 HEAPF32[i4 + 436 >> 2] = 1.0;
 HEAPF32[i4 + 440 >> 2] = .009999999776482582;
 HEAPF32[i4 + 456 >> 2] = .05000000074505806;
 HEAP32[i4 + 592 >> 2] = 0;
 HEAPF32[i4 + 596 >> 2] = 0.0;
 HEAPF32[i4 + 600 >> 2] = .699999988079071;
 HEAPF32[i4 + 604 >> 2] = 0.0;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN28btTriangleConvexcastCallback15processTriangleEP9btVector3ii(i6, i9, i3, i4) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, d2 = 0.0, d5 = 0.0, d7 = 0.0, d8 = 0.0, d10 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 672 | 0;
 HEAP32[i1 + 576 >> 2] = 0;
 HEAPF32[i1 + 580 >> 2] = 1.0;
 HEAPF32[i1 + 584 >> 2] = 1.0;
 HEAPF32[i1 + 588 >> 2] = 1.0;
 HEAPF32[i1 + 592 >> 2] = 0.0;
 HEAP32[i1 + 620 >> 2] = 0;
 HEAP32[i1 + 568 >> 2] = 16376;
 HEAP32[i1 + 572 >> 2] = 1;
 HEAP32[i1 + 624 >> 2] = HEAP32[i9 + 0 >> 2];
 HEAP32[i1 + 628 >> 2] = HEAP32[i9 + 4 >> 2];
 HEAP32[i1 + 632 >> 2] = HEAP32[i9 + 8 >> 2];
 HEAP32[i1 + 636 >> 2] = HEAP32[i9 + 12 >> 2];
 HEAP32[i1 + 640 >> 2] = HEAP32[i9 + 16 >> 2];
 HEAP32[i1 + 644 >> 2] = HEAP32[i9 + 20 >> 2];
 HEAP32[i1 + 648 >> 2] = HEAP32[i9 + 24 >> 2];
 HEAP32[i1 + 652 >> 2] = HEAP32[i9 + 28 >> 2];
 HEAP32[i1 + 656 >> 2] = HEAP32[i9 + 32 >> 2];
 HEAP32[i1 + 660 >> 2] = HEAP32[i9 + 36 >> 2];
 HEAP32[i1 + 664 >> 2] = HEAP32[i9 + 40 >> 2];
 HEAP32[i1 + 668 >> 2] = HEAP32[i9 + 44 >> 2];
 HEAPF32[i1 + 612 >> 2] = +HEAPF32[i6 + 204 >> 2];
 HEAPF32[i1 + 516 >> 2] = 9999999747378752.0e-20;
 HEAP8[i1 + 540 >> 0] = 0;
 HEAP32[i1 + 200 >> 2] = 13248;
 i9 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i1 + 176 >> 2] = 10152;
 HEAP32[i1 + 180 >> 2] = i1 + 208;
 HEAP32[i1 + 184 >> 2] = i1 + 200;
 HEAP32[i1 + 188 >> 2] = i9;
 HEAP32[i1 + 192 >> 2] = i1 + 568;
 HEAP32[i1 + 196 >> 2] = 0;
 HEAP32[i1 >> 2] = 9440;
 HEAP32[i1 + 168 >> 2] = 0;
 HEAPF32[i1 + 164 >> 2] = 1.0;
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i6 + 208 >> 2];
 if ((__ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i1 + 176 | 0, i6 + 8 | 0, i6 + 72 | 0, i6 + 136 | 0, i6 + 136 | 0, i1) | 0 ? (d2 = +HEAPF32[i1 + 132 >> 2], d7 = +HEAPF32[i1 + 136 >> 2], d8 = +HEAPF32[i1 + 140 >> 2], d2 * d2 + d7 * d7 + d8 * d8 > 9999999747378752.0e-20) : 0) ? (d5 = +HEAPF32[i1 + 164 >> 2], d5 < +HEAPF32[i6 + 200 >> 2]) : 0) {
  d10 = 1.0 / +Math_sqrt(+(d2 * d2 + d7 * d7 + d8 * d8));
  HEAPF32[i1 + 132 >> 2] = d2 * d10;
  HEAPF32[i1 + 136 >> 2] = d7 * d10;
  HEAPF32[i1 + 140 >> 2] = d8 * d10;
  +FUNCTION_TABLE_diiidii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 3](i6, i1 + 132 | 0, i1 + 148 | 0, d5, i3, i4);
 }
 HEAP32[i1 + 568 >> 2] = 15736;
 i3 = HEAP32[i1 + 620 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i1 + 620 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i3 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i1, i8, i6, i9, i7, i10, i5, d3, i4, d2) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 d2 = +d2;
 var i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0;
 i11 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 d18 = +HEAPF32[i9 + 4 >> 2];
 d17 = +HEAPF32[i1 + 8 >> 2];
 d15 = +HEAPF32[i9 + 8 >> 2];
 d21 = +HEAPF32[i1 + 4 >> 2];
 d12 = +HEAPF32[i1 >> 2];
 d23 = +HEAPF32[i9 >> 2];
 d22 = (d18 * d17 - d15 * d21) * +HEAPF32[i8 >> 2] + +HEAPF32[i8 + 4 >> 2] * (d15 * d12 - d17 * d23) + (d21 * d23 - d18 * d12) * +HEAPF32[i8 + 8 >> 2];
 d20 = (d18 * d17 - d15 * d21) * +HEAPF32[i8 + 16 >> 2] + (d15 * d12 - d17 * d23) * +HEAPF32[i8 + 20 >> 2] + (d21 * d23 - d18 * d12) * +HEAPF32[i8 + 24 >> 2];
 d18 = (d18 * d17 - d15 * d21) * +HEAPF32[i8 + 32 >> 2] + (d15 * d12 - d17 * d23) * +HEAPF32[i8 + 36 >> 2] + (d21 * d23 - d18 * d12) * +HEAPF32[i8 + 40 >> 2];
 HEAPF32[i1 + 16 >> 2] = d22;
 HEAPF32[i1 + 20 >> 2] = d20;
 HEAPF32[i1 + 24 >> 2] = d18;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 d23 = +HEAPF32[i7 + 4 >> 2];
 d15 = +HEAPF32[i7 + 8 >> 2];
 d19 = +HEAPF32[i7 >> 2];
 d16 = +HEAPF32[i6 >> 2] * (d23 * -d17 - d15 * -d21) + +HEAPF32[i6 + 4 >> 2] * (d15 * -d12 - d19 * -d17) + (d19 * -d21 - d23 * -d12) * +HEAPF32[i6 + 8 >> 2];
 d14 = (d23 * -d17 - d15 * -d21) * +HEAPF32[i6 + 16 >> 2] + (d15 * -d12 - d19 * -d17) * +HEAPF32[i6 + 20 >> 2] + (d19 * -d21 - d23 * -d12) * +HEAPF32[i6 + 24 >> 2];
 d12 = (d23 * -d17 - d15 * -d21) * +HEAPF32[i6 + 32 >> 2] + (d15 * -d12 - d19 * -d17) * +HEAPF32[i6 + 36 >> 2] + (d19 * -d21 - d23 * -d12) * +HEAPF32[i6 + 40 >> 2];
 HEAPF32[i1 + 32 >> 2] = d16;
 HEAPF32[i1 + 36 >> 2] = d14;
 HEAPF32[i1 + 40 >> 2] = d12;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 d23 = +HEAPF32[i5 >> 2] * d22;
 d21 = +HEAPF32[i5 + 4 >> 2] * d20;
 d19 = +HEAPF32[i5 + 8 >> 2] * d18;
 HEAPF32[i1 + 48 >> 2] = d23;
 HEAPF32[i1 + 52 >> 2] = d21;
 HEAPF32[i1 + 56 >> 2] = d19;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 d17 = +HEAPF32[i4 >> 2] * d16;
 d15 = +HEAPF32[i4 + 4 >> 2] * d14;
 d13 = +HEAPF32[i4 + 8 >> 2] * d12;
 HEAPF32[i1 + 64 >> 2] = d17;
 HEAPF32[i1 + 68 >> 2] = d15;
 HEAPF32[i1 + 72 >> 2] = d13;
 HEAPF32[i1 + 76 >> 2] = 0.0;
 HEAPF32[i1 + 80 >> 2] = d23 * d22 + d21 * d20 + d19 * d18 + d3 + d2 + (d17 * d16 + d15 * d14 + d13 * d12);
 STACKTOP = i11;
 return;
}
function __Z19TestInternalObjectsRK11btTransformS1_RK9btVector3S4_RK18btConvexPolyhedronS7_f(i24, i23, d11, d9, d1, d12, d7, d5, i2, i10, d4) {
 i24 = i24 | 0;
 i23 = i23 | 0;
 d11 = +d11;
 d9 = +d9;
 d1 = +d1;
 d12 = +d12;
 d7 = +d7;
 d5 = +d5;
 i2 = i2 | 0;
 i10 = i10 | 0;
 d4 = +d4;
 var d3 = 0.0, d6 = 0.0, i8 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d25 = 0.0, d26 = 0.0;
 i8 = STACKTOP;
 d6 = +HEAPF32[i24 >> 2] * d12 + +HEAPF32[i24 + 16 >> 2] * d7 + +HEAPF32[i24 + 32 >> 2] * d5;
 d3 = +HEAPF32[i24 + 4 >> 2] * d12 + +HEAPF32[i24 + 20 >> 2] * d7 + +HEAPF32[i24 + 36 >> 2] * d5;
 d14 = +HEAPF32[i24 + 8 >> 2] * d12 + +HEAPF32[i24 + 24 >> 2] * d7 + +HEAPF32[i24 + 40 >> 2] * d5;
 d13 = +HEAPF32[i23 >> 2] * d12 + +HEAPF32[i23 + 16 >> 2] * d7 + +HEAPF32[i23 + 32 >> 2] * d5;
 d15 = +HEAPF32[i23 + 4 >> 2] * d12 + +HEAPF32[i23 + 20 >> 2] * d7 + +HEAPF32[i23 + 36 >> 2] * d5;
 d16 = +HEAPF32[i23 + 8 >> 2] * d12 + +HEAPF32[i23 + 24 >> 2] * d7 + +HEAPF32[i23 + 40 >> 2] * d5;
 d17 = +HEAPF32[i2 + 80 >> 2];
 if (d6 < 0.0) d17 = -d17;
 d18 = +HEAPF32[i2 + 84 >> 2];
 if (d3 < 0.0) d18 = -d18;
 d19 = +HEAPF32[i2 + 88 >> 2];
 if (d14 < 0.0) d19 = -d19;
 d20 = +HEAPF32[i10 + 80 >> 2];
 if (d13 < 0.0) d20 = -d20;
 d21 = +HEAPF32[i10 + 84 >> 2];
 if (d15 < 0.0) d21 = -d21;
 d22 = +HEAPF32[i10 + 88 >> 2];
 if (!(d16 < 0.0)) {
  d25 = d22;
  d22 = d6 * d17;
  d18 = d3 * d18;
  d18 = d22 + d18;
  d22 = d14 * d19;
  d22 = d18 + d22;
  d20 = d13 * d20;
  d21 = d15 * d21;
  d21 = d20 + d21;
  d20 = d16 * d25;
  d20 = d21 + d20;
  i24 = i2 + 96 | 0;
  d21 = +HEAPF32[i24 >> 2];
  i24 = d22 > d21;
  d21 = i24 ? d22 : d21;
  i24 = i10 + 96 | 0;
  d22 = +HEAPF32[i24 >> 2];
  i24 = d20 > d22;
  d22 = i24 ? d20 : d22;
  d22 = d21 + d22;
  d21 = d11 * d12 + d9 * d7 + d1 * d5 + d22;
  d22 = d22 - (d11 * d12 + d9 * d7 + d1 * d5);
  i24 = d21 < d22;
  d22 = i24 ? d21 : d22;
  i24 = !(d22 > d4);
  STACKTOP = i8;
  return i24 | 0;
 }
 d26 = -d22;
 d25 = d6 * d17;
 d22 = d3 * d18;
 d22 = d25 + d22;
 d25 = d14 * d19;
 d25 = d22 + d25;
 d20 = d13 * d20;
 d22 = d15 * d21;
 d22 = d20 + d22;
 d21 = d16 * d26;
 d21 = d22 + d21;
 i24 = i2 + 96 | 0;
 d22 = +HEAPF32[i24 >> 2];
 i24 = d25 > d22;
 d22 = i24 ? d25 : d22;
 i24 = i10 + 96 | 0;
 d25 = +HEAPF32[i24 >> 2];
 i24 = d21 > d25;
 d25 = i24 ? d21 : d25;
 d25 = d22 + d25;
 d22 = d11 * d12 + d9 * d7 + d1 * d5 + d25;
 d25 = d25 - (d11 * d12 + d9 * d7 + d1 * d5);
 i24 = d22 < d25;
 d25 = i24 ? d22 : d25;
 i24 = !(d25 > d4);
 STACKTOP = i8;
 return i24 | 0;
}
function __ZNK23btGeneric6DofConstraint9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i2 + 48 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i2 + 52 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i2 + 56 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i2 + 60 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i2 + 64 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 + 68 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i2 + 72 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i2 + 76 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i2 + 80 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i2 + 84 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i2 + 88 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i2 + 92 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i2 + 96 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i2 + 100 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i2 + 104 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i2 + 108 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i2 + 112 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i2 + 116 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i2 + 120 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i2 + 124 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i2 + 128 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i2 + 132 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i2 + 136 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i2 + 140 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i2 + 144 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i2 + 148 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i2 + 152 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i2 + 156 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i2 + 160 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i2 + 164 >> 2];
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i2 + 168 >> 2];
 HEAPF32[i1 + 176 >> 2] = +HEAPF32[i2 + 172 >> 2];
 HEAPF32[i1 + 228 >> 2] = +HEAPF32[i2 + 868 >> 2];
 HEAPF32[i1 + 212 >> 2] = +HEAPF32[i2 + 872 >> 2];
 HEAPF32[i1 + 196 >> 2] = +HEAPF32[i2 + 680 >> 2];
 HEAPF32[i1 + 180 >> 2] = +HEAPF32[i2 + 696 >> 2];
 HEAPF32[i1 + 232 >> 2] = +HEAPF32[i2 + 932 >> 2];
 HEAPF32[i1 + 216 >> 2] = +HEAPF32[i2 + 936 >> 2];
 HEAPF32[i1 + 200 >> 2] = +HEAPF32[i2 + 684 >> 2];
 HEAPF32[i1 + 184 >> 2] = +HEAPF32[i2 + 700 >> 2];
 HEAPF32[i1 + 236 >> 2] = +HEAPF32[i2 + 996 >> 2];
 HEAPF32[i1 + 220 >> 2] = +HEAPF32[i2 + 1e3 >> 2];
 HEAPF32[i1 + 204 >> 2] = +HEAPF32[i2 + 688 >> 2];
 HEAPF32[i1 + 188 >> 2] = +HEAPF32[i2 + 704 >> 2];
 HEAP32[i1 + 244 >> 2] = HEAPU8[i2 + 1300 >> 0];
 HEAP32[i1 + 248 >> 2] = HEAPU8[i2 + 1301 >> 0];
 STACKTOP = i4;
 return 2464;
}
function __ZNK18btConvexPolyhedron15testContainmentEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0;
 i1 = STACKTOP;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  i2 = 0;
  do i2 = i2 + 1 | 0; while ((i2 | 0) < 8);
  i3 = 1;
  STACKTOP = i1;
  return i3 | 0;
 }
 i4 = HEAP32[i2 + 36 >> 2] | 0;
 d8 = 0.0;
 d7 = 0.0;
 d6 = 0.0;
 i5 = 0;
 L6 : while (1) {
  switch (i5 | 0) {
  case 0:
   {
    d6 = +HEAPF32[i2 + 88 >> 2] + +HEAPF32[i2 + 72 >> 2];
    d7 = +HEAPF32[i2 + 84 >> 2] + +HEAPF32[i2 + 68 >> 2];
    d8 = +HEAPF32[i2 + 80 >> 2] + +HEAPF32[i2 + 64 >> 2];
    break;
   }
  case 1:
   {
    d6 = +HEAPF32[i2 + 72 >> 2] - +HEAPF32[i2 + 88 >> 2];
    d7 = +HEAPF32[i2 + 84 >> 2] + +HEAPF32[i2 + 68 >> 2];
    d8 = +HEAPF32[i2 + 80 >> 2] + +HEAPF32[i2 + 64 >> 2];
    break;
   }
  case 2:
   {
    d6 = +HEAPF32[i2 + 88 >> 2] + +HEAPF32[i2 + 72 >> 2];
    d7 = +HEAPF32[i2 + 68 >> 2] - +HEAPF32[i2 + 84 >> 2];
    d8 = +HEAPF32[i2 + 80 >> 2] + +HEAPF32[i2 + 64 >> 2];
    break;
   }
  case 3:
   {
    d6 = +HEAPF32[i2 + 72 >> 2] - +HEAPF32[i2 + 88 >> 2];
    d7 = +HEAPF32[i2 + 68 >> 2] - +HEAPF32[i2 + 84 >> 2];
    d8 = +HEAPF32[i2 + 80 >> 2] + +HEAPF32[i2 + 64 >> 2];
    break;
   }
  case 4:
   {
    d6 = +HEAPF32[i2 + 88 >> 2] + +HEAPF32[i2 + 72 >> 2];
    d7 = +HEAPF32[i2 + 84 >> 2] + +HEAPF32[i2 + 68 >> 2];
    d8 = +HEAPF32[i2 + 64 >> 2] - +HEAPF32[i2 + 80 >> 2];
    break;
   }
  case 7:
   {
    d6 = +HEAPF32[i2 + 72 >> 2] - +HEAPF32[i2 + 88 >> 2];
    d7 = +HEAPF32[i2 + 68 >> 2] - +HEAPF32[i2 + 84 >> 2];
    d8 = +HEAPF32[i2 + 64 >> 2] - +HEAPF32[i2 + 80 >> 2];
    break;
   }
  case 5:
   {
    d6 = +HEAPF32[i2 + 72 >> 2] - +HEAPF32[i2 + 88 >> 2];
    d7 = +HEAPF32[i2 + 84 >> 2] + +HEAPF32[i2 + 68 >> 2];
    d8 = +HEAPF32[i2 + 64 >> 2] - +HEAPF32[i2 + 80 >> 2];
    break;
   }
  case 6:
   {
    d6 = +HEAPF32[i2 + 88 >> 2] + +HEAPF32[i2 + 72 >> 2];
    d7 = +HEAPF32[i2 + 68 >> 2] - +HEAPF32[i2 + 84 >> 2];
    d8 = +HEAPF32[i2 + 64 >> 2] - +HEAPF32[i2 + 80 >> 2];
    break;
   }
  default:
   {}
  }
  i9 = 0;
  do {
   if (+HEAPF32[i4 + (i9 * 36 | 0) + 32 >> 2] + (d8 * +HEAPF32[i4 + (i9 * 36 | 0) + 20 >> 2] + d7 * +HEAPF32[i4 + (i9 * 36 | 0) + 24 >> 2] + d6 * +HEAPF32[i4 + (i9 * 36 | 0) + 28 >> 2]) > 0.0) {
    i3 = 0;
    i2 = 17;
    break L6;
   }
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (i3 | 0));
  i5 = i5 + 1 | 0;
  if ((i5 | 0) >= 8) {
   i3 = 1;
   i2 = 17;
   break;
  }
 }
 if ((i2 | 0) == 17) {
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}
function __ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(i3, d5, d7, d6, i8, d2, i1) {
 i3 = i3 | 0;
 d5 = +d5;
 d7 = +d7;
 d6 = +d6;
 i8 = i8 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 d7 = d7 * d2 + +HEAPF32[i3 + 52 >> 2];
 d6 = d6 * d2 + +HEAPF32[i3 + 56 >> 2];
 HEAPF32[i1 + 48 >> 2] = d5 * d2 + +HEAPF32[i3 + 48 >> 2];
 HEAPF32[i1 + 52 >> 2] = d7;
 HEAPF32[i1 + 56 >> 2] = d6;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 d6 = +HEAPF32[i8 >> 2];
 d5 = +HEAPF32[i8 + 4 >> 2];
 d7 = +HEAPF32[i8 + 8 >> 2];
 d9 = +Math_sqrt(+(d6 * d6 + d5 * d5 + d7 * d7));
 if (d9 * d2 > .7853981852531433) d9 = .7853981852531433 / d2;
 if (d9 < .0010000000474974513) d10 = d2 * .5 - d9 * d2 * d2 * d2 * .02083333395421505 * d9; else d10 = +Math_sin(+(d9 * .5 * d2)) / d9;
 d13 = d10 * d6;
 d5 = d10 * d5;
 d7 = d10 * d7;
 d15 = +Math_cos(+(d9 * d2 * .5));
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i3, i4);
 d12 = +HEAPF32[i4 >> 2];
 d14 = +HEAPF32[i4 + 12 >> 2];
 d2 = +HEAPF32[i4 + 8 >> 2];
 d10 = +HEAPF32[i4 + 4 >> 2];
 d16 = 1.0 / +Math_sqrt(+((d15 * d14 - d13 * d12 - d5 * d10 - d7 * d2) * (d15 * d14 - d13 * d12 - d5 * d10 - d7 * d2) + ((d7 * d14 + d15 * d2 + d13 * d10 - d5 * d12) * (d7 * d14 + d15 * d2 + d13 * d10 - d5 * d12) + ((d15 * d12 + d13 * d14 + d5 * d2 - d7 * d10) * (d15 * d12 + d13 * d14 + d5 * d2 - d7 * d10) + (d7 * d12 + (d5 * d14 + d15 * d10) - d13 * d2) * (d7 * d12 + (d5 * d14 + d15 * d10) - d13 * d2)))));
 d6 = (d15 * d12 + d13 * d14 + d5 * d2 - d7 * d10) * d16;
 d9 = d16 * (d7 * d12 + (d5 * d14 + d15 * d10) - d13 * d2);
 d11 = d16 * (d7 * d14 + d15 * d2 + d13 * d10 - d5 * d12);
 d2 = d16 * (d15 * d14 - d13 * d12 - d5 * d10 - d7 * d2);
 d7 = d6 * (2.0 / (d2 * d2 + (d11 * d11 + (d6 * d6 + d9 * d9))));
 d10 = 2.0 / (d2 * d2 + (d11 * d11 + (d6 * d6 + d9 * d9))) * d9;
 d5 = 2.0 / (d2 * d2 + (d11 * d11 + (d6 * d6 + d9 * d9))) * d11;
 HEAPF32[i1 >> 2] = 1.0 - (d11 * d5 + d9 * d10);
 HEAPF32[i1 + 4 >> 2] = d6 * d10 - d2 * d5;
 HEAPF32[i1 + 8 >> 2] = d6 * d5 + d2 * d10;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = d2 * d5 + d6 * d10;
 HEAPF32[i1 + 20 >> 2] = 1.0 - (d6 * d7 + d11 * d5);
 HEAPF32[i1 + 24 >> 2] = d9 * d5 - d2 * d7;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAPF32[i1 + 32 >> 2] = d6 * d5 - d2 * d10;
 HEAPF32[i1 + 36 >> 2] = d2 * d7 + d9 * d5;
 HEAPF32[i1 + 40 >> 2] = 1.0 - (d6 * d7 + d9 * d10);
 HEAPF32[i1 + 44 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN28btHashedOverlappingPairCache18addOverlappingPairEP17btBroadphaseProxyS1_(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 HEAP32[3812] = (HEAP32[3812] | 0) + 1;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i3 | 0) == 0) {
  if ((HEAP16[i4 + 6 >> 1] & HEAP16[i5 + 4 >> 1]) << 16 >> 16 == 0) {
   i10 = 0;
   STACKTOP = i2;
   return i10 | 0;
  }
  if ((HEAP16[i5 + 6 >> 1] & HEAP16[i4 + 4 >> 1]) << 16 >> 16 == 0) {
   i10 = 0;
   STACKTOP = i2;
   return i10 | 0;
  }
 } else if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, i5, i4) | 0)) {
  i10 = 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 i7 = (HEAP32[i5 + 12 >> 2] | 0) > (HEAP32[i4 + 12 >> 2] | 0);
 i3 = i7 ? i4 : i5;
 i4 = i7 ? i5 : i4;
 i7 = HEAP32[i3 + 12 >> 2] | 0;
 i9 = HEAP32[i4 + 12 >> 2] | 0;
 i5 = ((i9 << 16 | i7) + ~((i9 << 16 | i7) << 15) >> 10 ^ (i9 << 16 | i7) + ~((i9 << 16 | i7) << 15)) * 9 | 0;
 i5 = (i5 >> 6 ^ i5) + ~((i5 >> 6 ^ i5) << 11) >> 16 ^ (i5 >> 6 ^ i5) + ~((i5 >> 6 ^ i5) << 11);
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i10 = HEAP32[(HEAP32[i1 + 44 >> 2] | 0) + ((i5 & i6 + -1) << 2) >> 2] | 0;
 L10 : do if (!((i10 | 0) == -1)) {
  i8 = HEAP32[i1 + 16 >> 2] | 0;
  while (1) {
   if ((HEAP32[(HEAP32[i8 + (i10 << 4) >> 2] | 0) + 12 >> 2] | 0) == (i7 | 0) ? (HEAP32[(HEAP32[i8 + (i10 << 4) + 4 >> 2] | 0) + 12 >> 2] | 0) == (i9 | 0) : 0) break;
   i10 = HEAP32[(HEAP32[i1 + 64 >> 2] | 0) + (i10 << 2) >> 2] | 0;
   if ((i10 | 0) == -1) break L10;
  }
  i7 = i8 + (i10 << 4) | 0;
  if ((i7 | 0) != 0) {
   i10 = i7;
   STACKTOP = i2;
   return i10 | 0;
  }
 } while (0);
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 i7 = __ZN20btAlignedObjectArrayI16btBroadphasePairE21expandNonInitializingEv(i1 + 4 | 0) | 0;
 i9 = HEAP32[i1 + 72 >> 2] | 0;
 if ((i9 | 0) != 0) FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 31](i9, i3, i4) | 0;
 if ((i6 | 0) < (HEAP32[i1 + 12 >> 2] | 0)) {
  __ZN28btHashedOverlappingPairCache10growTablesEv(i1);
  i5 = (HEAP32[i1 + 12 >> 2] | 0) + -1 & i5;
 } else i5 = i5 & i6 + -1;
 if ((HEAP32[i3 + 12 >> 2] | 0) < (HEAP32[i4 + 12 >> 2] | 0)) {
  HEAP32[i7 >> 2] = i3;
  HEAP32[i7 + 4 >> 2] = i4;
 } else {
  HEAP32[i7 >> 2] = i4;
  HEAP32[i7 + 4 >> 2] = i3;
 }
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 i10 = (HEAP32[i1 + 44 >> 2] | 0) + (i5 << 2) | 0;
 HEAP32[(HEAP32[i1 + 64 >> 2] | 0) + (i8 << 2) >> 2] = HEAP32[i10 >> 2];
 HEAP32[i10 >> 2] = i8;
 i10 = i7;
 STACKTOP = i2;
 return i10 | 0;
}
function __ZN16btRaycastVehicle23updateWheelTransformsWSER11btWheelInfob(i3, i1, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 HEAP8[i1 + 84 >> 0] = 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i2 + 48 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i2 + 52 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i2 + 56 >> 2] = HEAP32[i3 + 60 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i3 + 64 >> 2];
 if (i5 ? (i4 = HEAP32[i3 + 480 >> 2] | 0, (i4 | 0) != 0) : 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 127](i4, i2);
 d19 = +HEAPF32[i1 + 156 >> 2];
 d17 = +HEAPF32[i2 >> 2];
 d18 = +HEAPF32[i1 + 160 >> 2];
 d16 = +HEAPF32[i2 + 4 >> 2];
 d11 = +HEAPF32[i1 + 164 >> 2];
 d15 = +HEAPF32[i2 + 8 >> 2];
 d14 = +HEAPF32[i2 + 16 >> 2];
 d13 = +HEAPF32[i2 + 20 >> 2];
 d12 = +HEAPF32[i2 + 24 >> 2];
 d10 = +HEAPF32[i2 + 32 >> 2];
 d8 = +HEAPF32[i2 + 36 >> 2];
 d6 = +HEAPF32[i2 + 40 >> 2];
 d9 = d19 * d14 + d18 * d13 + d11 * d12 + +HEAPF32[i2 + 52 >> 2];
 d7 = d19 * d10 + d18 * d8 + d11 * d6 + +HEAPF32[i2 + 56 >> 2];
 HEAPF32[i1 + 36 >> 2] = d19 * d17 + d18 * d16 + d11 * d15 + +HEAPF32[i2 + 48 >> 2];
 HEAPF32[i1 + 40 >> 2] = d9;
 HEAPF32[i1 + 44 >> 2] = d7;
 HEAPF32[i1 + 48 >> 2] = 0.0;
 d7 = +HEAPF32[i1 + 172 >> 2];
 d9 = +HEAPF32[i1 + 176 >> 2];
 d11 = +HEAPF32[i1 + 180 >> 2];
 HEAPF32[i1 + 52 >> 2] = d17 * d7 + d16 * d9 + d15 * d11;
 HEAPF32[i1 + 56 >> 2] = d7 * d14 + d9 * d13 + d11 * d12;
 HEAPF32[i1 + 60 >> 2] = d7 * d10 + d9 * d8 + d11 * d6;
 HEAPF32[i1 + 64 >> 2] = 0.0;
 d11 = +HEAPF32[i1 + 188 >> 2];
 d9 = +HEAPF32[i1 + 192 >> 2];
 d7 = +HEAPF32[i1 + 196 >> 2];
 HEAPF32[i1 + 68 >> 2] = d17 * d11 + d16 * d9 + d15 * d7;
 HEAPF32[i1 + 72 >> 2] = d11 * d14 + d9 * d13 + d7 * d12;
 HEAPF32[i1 + 76 >> 2] = d11 * d10 + d9 * d8 + d7 * d6;
 HEAPF32[i1 + 80 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN27InplaceSolverIslandCallback18processConstraintsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) == 0) i4 = 0; else i4 = HEAP32[i1 + 40 >> 2] | 0;
 i5 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i5 | 0) == 0) i6 = 0; else i6 = HEAP32[i1 + 60 >> 2] | 0;
 i7 = HEAP32[i1 + 72 >> 2] | 0;
 if ((i7 | 0) == 0) i8 = 0; else i8 = HEAP32[i1 + 80 >> 2] | 0;
 i9 = HEAP32[i1 + 8 >> 2] | 0;
 +FUNCTION_TABLE_diiiiiiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 3](i9, i4, i3, i6, i5, i8, i7, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0);
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) < 0) {
  if ((HEAP32[i1 + 36 >> 2] | 0) < 0) {
   i4 = HEAP32[i1 + 40 >> 2] | 0;
   if ((i4 | 0) != 0) {
    if ((HEAP8[i1 + 44 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i4 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 40 >> 2] = 0;
   }
   HEAP8[i1 + 44 >> 0] = 1;
   HEAP32[i1 + 40 >> 2] = 0;
   HEAP32[i1 + 36 >> 2] = 0;
  }
  do {
   i4 = (HEAP32[i1 + 40 >> 2] | 0) + (i3 << 2) | 0;
   if ((i4 | 0) != 0) HEAP32[i4 >> 2] = 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 0);
 }
 HEAP32[i1 + 32 >> 2] = 0;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) < 0) {
  if ((HEAP32[i1 + 56 >> 2] | 0) < 0) {
   i4 = HEAP32[i1 + 60 >> 2] | 0;
   if ((i4 | 0) != 0) {
    if ((HEAP8[i1 + 64 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i4 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 60 >> 2] = 0;
   }
   HEAP8[i1 + 64 >> 0] = 1;
   HEAP32[i1 + 60 >> 2] = 0;
   HEAP32[i1 + 56 >> 2] = 0;
  }
  do {
   i4 = (HEAP32[i1 + 60 >> 2] | 0) + (i3 << 2) | 0;
   if ((i4 | 0) != 0) HEAP32[i4 >> 2] = 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != 0);
 }
 HEAP32[i1 + 52 >> 2] = 0;
 i3 = HEAP32[i1 + 72 >> 2] | 0;
 if ((i3 | 0) >= 0) {
  HEAP32[i1 + 72 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 76 >> 2] | 0) < 0) {
  i4 = HEAP32[i1 + 80 >> 2] | 0;
  if ((i4 | 0) != 0) {
   if ((HEAP8[i1 + 84 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i4 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 80 >> 2] = 0;
  }
  HEAP8[i1 + 84 >> 0] = 1;
  HEAP32[i1 + 80 >> 2] = 0;
  HEAP32[i1 + 76 >> 2] = 0;
  i4 = i3;
 } else i4 = i3;
 do {
  i3 = (HEAP32[i1 + 80 >> 2] | 0) + (i4 << 2) | 0;
  if ((i3 | 0) != 0) HEAP32[i3 >> 2] = 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 0);
 HEAP32[i1 + 72 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZL10removeleafP6btDbvtP10btDbvtNode(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = STACKTOP;
 if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
  HEAP32[i2 >> 2] = 0;
  i6 = 0;
  STACKTOP = i1;
  return i6 | 0;
 }
 i4 = HEAP32[i6 + 32 >> 2] | 0;
 i5 = HEAP32[i4 + 32 >> 2] | 0;
 i6 = HEAP32[i4 + (((HEAP32[i4 + 40 >> 2] | 0) != (i6 | 0) & 1) << 2) + 36 >> 2] | 0;
 if ((i5 | 0) == 0) {
  HEAP32[i2 >> 2] = i6;
  HEAP32[i6 + 32 >> 2] = 0;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i2 + 4 >> 2] = i4;
  i6 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i6 | 0;
 }
 HEAP32[i5 + (((HEAP32[i5 + 40 >> 2] | 0) == (i4 | 0) & 1) << 2) + 36 >> 2] = i6;
 HEAP32[i6 + 32 >> 2] = i5;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i6 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i6 + -4 >> 2] | 0);
 }
 HEAP32[i2 + 4 >> 2] = i4;
 do {
  d18 = +HEAPF32[i5 >> 2];
  i23 = i5 + 4 | 0;
  d16 = +HEAPF32[i23 >> 2];
  i21 = i5 + 8 | 0;
  d14 = +HEAPF32[i21 >> 2];
  i24 = i5 + 16 | 0;
  d12 = +HEAPF32[i24 >> 2];
  i22 = i5 + 20 | 0;
  d10 = +HEAPF32[i22 >> 2];
  i6 = i5 + 24 | 0;
  d8 = +HEAPF32[i6 >> 2];
  i20 = HEAP32[i5 + 36 >> 2] | 0;
  i4 = HEAP32[i5 + 40 >> 2] | 0;
  d19 = +HEAPF32[i20 >> 2];
  d17 = +HEAPF32[i4 >> 2];
  d17 = d19 < d17 ? d19 : d17;
  HEAPF32[i5 >> 2] = d17;
  d19 = +HEAPF32[i20 + 16 >> 2];
  d11 = +HEAPF32[i4 + 16 >> 2];
  d11 = d19 > d11 ? d19 : d11;
  HEAPF32[i24 >> 2] = d11;
  d19 = +HEAPF32[i20 + 4 >> 2];
  d15 = +HEAPF32[i4 + 4 >> 2];
  d15 = d19 < d15 ? d19 : d15;
  HEAPF32[i23 >> 2] = d15;
  d19 = +HEAPF32[i20 + 20 >> 2];
  d9 = +HEAPF32[i4 + 20 >> 2];
  d9 = d19 > d9 ? d19 : d9;
  HEAPF32[i22 >> 2] = d9;
  d19 = +HEAPF32[i20 + 8 >> 2];
  d13 = +HEAPF32[i4 + 8 >> 2];
  d13 = d19 < d13 ? d19 : d13;
  HEAPF32[i21 >> 2] = d13;
  d19 = +HEAPF32[i20 + 24 >> 2];
  d7 = +HEAPF32[i4 + 24 >> 2];
  d7 = d19 > d7 ? d19 : d7;
  HEAPF32[i6 >> 2] = d7;
  if (!(d18 != d17 | d16 != d15 | d14 != d13 | d12 != d11) ? !(d10 != d9 | d8 != d7) : 0) {
   i3 = 14;
   break;
  }
  i5 = HEAP32[i5 + 32 >> 2] | 0;
 } while ((i5 | 0) != 0);
 if ((i3 | 0) == 14) {
  STACKTOP = i1;
  return i5 | 0;
 }
 i24 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i24 | 0;
}
function __ZN16btCollisionWorld18addCollisionObjectEP17btCollisionObjectss(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i8 | 0) == (HEAP32[i1 + 12 >> 2] | 0) ? (i6 = (i8 | 0) == 0 ? 1 : i8 << 1, (i8 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) i7 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i7 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
   if ((i7 | 0) == 0) i7 = 0; else {
    HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
    i7 = i7 + 19 & -16;
   }
   i8 = HEAP32[i1 + 8 >> 2] | 0;
  }
  if ((i8 | 0) > 0) {
   i9 = 0;
   do {
    i10 = i7 + (i9 << 2) | 0;
    if ((i10 | 0) != 0) HEAP32[i10 >> 2] = HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + (i9 << 2) >> 2];
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i8 | 0));
  }
  i9 = HEAP32[i1 + 16 >> 2] | 0;
  if ((i9 | 0) != 0) {
   if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i9 + -4 >> 2] | 0);
    i8 = HEAP32[i1 + 8 >> 2] | 0;
   }
   HEAP32[i1 + 16 >> 2] = 0;
  }
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = i7;
  HEAP32[i1 + 12 >> 2] = i6;
 }
 i6 = (HEAP32[i1 + 16 >> 2] | 0) + (i8 << 2) | 0;
 if ((i6 | 0) != 0) HEAP32[i6 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i8 + 1;
 HEAP32[i2 + 32 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 + 48 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i2 + 52 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i2 + 56 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i2 + 64 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i2 + 68 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i2 + 72 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i2 + 76 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i2 + 80 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i2 + 84 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i2 + 88 >> 2] = HEAP32[i3 + 60 >> 2];
 HEAP32[i2 + 92 >> 2] = HEAP32[i3 + 64 >> 2];
 i10 = HEAP32[i3 + 192 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 127](i10, i2 + 32 | 0, i2 + 16 | 0, i2);
 i10 = HEAP32[i1 + 68 >> 2] | 0;
 i10 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 3](i10, i2 + 16 | 0, i2, HEAP32[(HEAP32[i3 + 192 >> 2] | 0) + 4 >> 2] | 0, i3, i4, i5, HEAP32[i1 + 24 >> 2] | 0, 0) | 0;
 HEAP32[i3 + 188 >> 2] = i10;
 STACKTOP = i2;
 return;
}
function __ZN36btCompoundCompoundCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i3, i6, i1, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 i3 = HEAP32[i6 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 48) | 0;
 if ((i3 | 0) == 0) {
  i10 = 0;
  STACKTOP = i5;
  return i10 | 0;
 }
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 >> 2] = 18208;
 HEAP8[i3 + 28 >> 0] = 1;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 32 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP8[i3 + 36 >> 0] = 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(87) | 0;
 if ((i6 | 0) != 0 ? (i4 = i6 + 19 & -16, HEAP32[i4 + -4 >> 2] = i6, (i6 + 19 & -16 | 0) != 0) : 0) {
  HEAP32[(i6 + 19 & -16) >> 2] = 19600;
  HEAP8[i4 + 20 >> 0] = 1;
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP8[i4 + 24 >> 0] = 0;
  HEAP8[i4 + 44 >> 0] = 1;
  HEAP32[i4 + 40 >> 2] = 0;
  HEAP32[i4 + 32 >> 2] = 0;
  HEAP32[i4 + 36 >> 2] = 0;
  HEAP8[i4 + 64 >> 0] = 1;
  HEAP32[i4 + 60 >> 2] = 0;
  HEAP32[i4 + 52 >> 2] = 0;
  HEAP32[i4 + 56 >> 2] = 0;
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i7 = _malloc(43) | 0;
  if ((i7 | 0) == 0) i7 = 0; else {
   HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
   i7 = i7 + 19 & -16;
  }
  i8 = HEAP32[i4 + 8 >> 2] | 0;
  if ((i8 | 0) > 0) {
   i9 = 0;
   do {
    i10 = i7 + (i9 * 12 | 0) | 0;
    if ((i10 | 0) != 0) {
     i11 = (HEAP32[i4 + 16 >> 2] | 0) + (i9 * 12 | 0) | 0;
     HEAP32[i10 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
     HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
    }
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i8 | 0));
  }
  i8 = HEAP32[i4 + 16 >> 2] | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i4 + 20 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i8 + -4 >> 2] | 0);
   }
   HEAP32[i4 + 16 >> 2] = 0;
  }
  HEAP8[i4 + 20 >> 0] = 1;
  HEAP32[i4 + 16 >> 2] = i7;
  HEAP32[i4 + 12 >> 2] = 2;
  __ZN23btHashedSimplePairCache10growTablesEv(i6 + 19 & -16);
  i4 = i6 + 19 & -16;
 } else i4 = 0;
 HEAP32[i3 + 8 >> 2] = i4;
 HEAP32[i3 + 40 >> 2] = HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 68 >> 2];
 HEAP32[i3 + 44 >> 2] = HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + 68 >> 2];
 i11 = i3;
 STACKTOP = i5;
 return i11 | 0;
}
function __ZN19btTriangleMeshShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = (HEAP32[i1 + 48 >> 2] | 0) + 4 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 0;
 HEAP32[i3 + 40 >> 2] = 0;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAPF32[i3 + 32 >> 2] = 1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i3 + 16 | 0, i1, i3 + 32 | 0);
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i3 + 16 >> 2] + +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i3 + 32 >> 2] = -1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i3, i1, i3 + 32 | 0);
 HEAP32[i3 + 16 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i3 + 28 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i3 + 16 >> 2] - +HEAPF32[i1 + 12 >> 2];
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 0;
 HEAP32[i3 + 40 >> 2] = 0;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAPF32[i3 + 36 >> 2] = 1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i3 + 16 | 0, i1, i3 + 32 | 0);
 HEAPF32[i1 + 36 >> 2] = +HEAPF32[i3 + 20 >> 2] + +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i3 + 36 >> 2] = -1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i3, i1, i3 + 32 | 0);
 HEAP32[i3 + 16 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i3 + 28 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i1 + 20 >> 2] = +HEAPF32[i3 + 20 >> 2] - +HEAPF32[i1 + 12 >> 2];
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 0;
 HEAP32[i3 + 40 >> 2] = 0;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAPF32[i3 + 40 >> 2] = 1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i3 + 16 | 0, i1, i3 + 32 | 0);
 HEAPF32[i1 + 40 >> 2] = +HEAPF32[i3 + 24 >> 2] + +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i3 + 40 >> 2] = -1.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 68 >> 2] & 127](i3, i1, i3 + 32 | 0);
 HEAP32[i3 + 16 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i3 + 28 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i1 + 24 >> 2] = +HEAPF32[i3 + 24 >> 2] - +HEAPF32[i1 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZNK13btConvexShape7projectERK11btTransformRK9btVector3RfS6_(i6, i5, i4, i1, i3) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 d11 = +HEAPF32[i4 >> 2];
 d12 = +HEAPF32[i4 + 4 >> 2];
 d10 = +HEAPF32[i4 + 8 >> 2];
 d13 = d11 * +HEAPF32[i5 + 4 >> 2] + d12 * +HEAPF32[i5 + 20 >> 2] + d10 * +HEAPF32[i5 + 36 >> 2];
 d14 = d11 * +HEAPF32[i5 + 8 >> 2] + d12 * +HEAPF32[i5 + 24 >> 2] + d10 * +HEAPF32[i5 + 40 >> 2];
 HEAPF32[i2 + 48 >> 2] = +HEAPF32[i5 >> 2] * d11 + +HEAPF32[i5 + 16 >> 2] * d12 + +HEAPF32[i5 + 32 >> 2] * d10;
 HEAPF32[i2 + 52 >> 2] = d13;
 HEAPF32[i2 + 56 >> 2] = d14;
 HEAPF32[i2 + 60 >> 2] = 0.0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 64 >> 2] & 127](i2 + 32 | 0, i6, i2 + 48 | 0);
 d14 = +HEAPF32[i2 + 32 >> 2];
 d13 = +HEAPF32[i2 + 36 >> 2];
 d10 = +HEAPF32[i2 + 40 >> 2];
 d12 = d14 * +HEAPF32[i5 >> 2] + d13 * +HEAPF32[i5 + 4 >> 2] + d10 * +HEAPF32[i5 + 8 >> 2] + +HEAPF32[i5 + 48 >> 2];
 d11 = d14 * +HEAPF32[i5 + 16 >> 2] + d13 * +HEAPF32[i5 + 20 >> 2] + d10 * +HEAPF32[i5 + 24 >> 2] + +HEAPF32[i5 + 52 >> 2];
 d10 = d14 * +HEAPF32[i5 + 32 >> 2] + d13 * +HEAPF32[i5 + 36 >> 2] + d10 * +HEAPF32[i5 + 40 >> 2] + +HEAPF32[i5 + 56 >> 2];
 i15 = HEAP32[(HEAP32[i6 >> 2] | 0) + 64 >> 2] | 0;
 d13 = -+HEAPF32[i2 + 52 >> 2];
 d14 = -+HEAPF32[i2 + 56 >> 2];
 HEAPF32[i2 >> 2] = -+HEAPF32[i2 + 48 >> 2];
 HEAPF32[i2 + 4 >> 2] = d13;
 HEAPF32[i2 + 8 >> 2] = d14;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i15 & 127](i2 + 16 | 0, i6, i2);
 d14 = +HEAPF32[i2 + 16 >> 2];
 d13 = +HEAPF32[i2 + 20 >> 2];
 d7 = +HEAPF32[i2 + 24 >> 2];
 d9 = d14 * +HEAPF32[i5 >> 2] + d13 * +HEAPF32[i5 + 4 >> 2] + d7 * +HEAPF32[i5 + 8 >> 2] + +HEAPF32[i5 + 48 >> 2];
 d8 = d14 * +HEAPF32[i5 + 16 >> 2] + d13 * +HEAPF32[i5 + 20 >> 2] + d7 * +HEAPF32[i5 + 24 >> 2] + +HEAPF32[i5 + 52 >> 2];
 d7 = d14 * +HEAPF32[i5 + 32 >> 2] + d13 * +HEAPF32[i5 + 36 >> 2] + d7 * +HEAPF32[i5 + 40 >> 2] + +HEAPF32[i5 + 56 >> 2];
 HEAPF32[i1 >> 2] = d12 * +HEAPF32[i4 >> 2] + d11 * +HEAPF32[i4 + 4 >> 2] + d10 * +HEAPF32[i4 + 8 >> 2];
 d7 = d9 * +HEAPF32[i4 >> 2] + d8 * +HEAPF32[i4 + 4 >> 2] + d7 * +HEAPF32[i4 + 8 >> 2];
 HEAPF32[i3 >> 2] = d7;
 d8 = +HEAPF32[i1 >> 2];
 if (!(d8 > d7)) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 >> 2] = d7;
 HEAPF32[i3 >> 2] = d8;
 STACKTOP = i2;
 return;
}
function __ZNK23btPolyhedralConvexShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, d17 = 0.0, i18 = 0, d19 = 0.0, d20 = 0.0, d21 = 0.0, i22 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 if ((i5 | 0) > 0) i7 = 0; else {
  STACKTOP = i6;
  return;
 }
 do {
  HEAPF32[i4 + (i7 << 4) + 12 >> 2] = -999999984306749400.0;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i5 | 0));
 i8 = 0;
 do {
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 96 >> 2] & 127](i2) | 0) > 0) {
   i12 = i3 + (i8 << 4) | 0;
   i13 = i3 + (i8 << 4) + 4 | 0;
   i7 = i3 + (i8 << 4) + 8 | 0;
   i10 = i4 + (i8 << 4) + 12 | 0;
   i9 = i4 + (i8 << 4) | 0;
   i11 = 0;
   do {
    if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 96 >> 2] & 127](i2) | 0) - i11 | 0) < 128) {
     i14 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 96 >> 2] & 127](i2) | 0) - i11 | 0;
     if ((i14 | 0) > 0) i1 = 8; else {
      d20 = -3.4028234663852886e+38;
      i16 = -1;
     }
    } else {
     i14 = 128;
     i1 = 8;
    }
    if ((i1 | 0) == 8) {
     i1 = 0;
     i16 = 0;
     do {
      FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 108 >> 2] & 127](i2, i16, i6 + (i16 << 4) | 0);
      i16 = i16 + 1 | 0;
     } while ((i16 | 0) != (i14 | 0));
     d17 = +HEAPF32[i12 >> 2];
     d15 = +HEAPF32[i13 >> 2];
     d19 = +HEAPF32[i7 >> 2];
     i18 = 0;
     d20 = -3.4028234663852886e+38;
     i16 = -1;
     do {
      d21 = d17 * +HEAPF32[i6 + (i18 << 4) >> 2] + d15 * +HEAPF32[i6 + (i18 << 4) + 4 >> 2] + d19 * +HEAPF32[i6 + (i18 << 4) + 8 >> 2];
      i22 = d21 > d20;
      i16 = i22 ? i18 : i16;
      d20 = i22 ? d21 : d20;
      i18 = i18 + 1 | 0;
     } while ((i18 | 0) != (i14 | 0));
    }
    if (d20 > +HEAPF32[i10 >> 2]) {
     i22 = i6 + (i16 << 4) | 0;
     HEAP32[i9 + 0 >> 2] = HEAP32[i22 + 0 >> 2];
     HEAP32[i9 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
     HEAP32[i9 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
     HEAP32[i9 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
     HEAPF32[i10 >> 2] = d20;
    }
    i11 = i11 + 128 | 0;
   } while ((i11 | 0) < (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 96 >> 2] & 127](i2) | 0));
  }
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != (i5 | 0));
 STACKTOP = i6;
 return;
}
function __ZNK17btConvexHullShape7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i7, i8, i14, i1, i2, i4, i3) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, d6 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d15 = 0.0, i16 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAPF32[i1 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i2 >> 2] = -3.4028234663852886e+38;
 i9 = HEAP32[i7 + 96 >> 2] | 0;
 if ((i9 | 0) > 0) {
  i10 = 0;
  do {
   i16 = HEAP32[i7 + 104 >> 2] | 0;
   d15 = +HEAPF32[i16 + (i10 << 4) >> 2] * +HEAPF32[i7 + 12 >> 2];
   d13 = +HEAPF32[i16 + (i10 << 4) + 4 >> 2] * +HEAPF32[i7 + 16 >> 2];
   d6 = +HEAPF32[i16 + (i10 << 4) + 8 >> 2] * +HEAPF32[i7 + 20 >> 2];
   d12 = d15 * +HEAPF32[i8 >> 2] + d13 * +HEAPF32[i8 + 4 >> 2] + d6 * +HEAPF32[i8 + 8 >> 2] + +HEAPF32[i8 + 48 >> 2];
   d11 = d15 * +HEAPF32[i8 + 16 >> 2] + d13 * +HEAPF32[i8 + 20 >> 2] + d6 * +HEAPF32[i8 + 24 >> 2] + +HEAPF32[i8 + 52 >> 2];
   d6 = d15 * +HEAPF32[i8 + 32 >> 2] + d13 * +HEAPF32[i8 + 36 >> 2] + d6 * +HEAPF32[i8 + 40 >> 2] + +HEAPF32[i8 + 56 >> 2];
   d13 = d12 * +HEAPF32[i14 >> 2] + d11 * +HEAPF32[i14 + 4 >> 2] + d6 * +HEAPF32[i14 + 8 >> 2];
   if (d13 < +HEAPF32[i1 >> 2]) {
    HEAPF32[i1 >> 2] = d13;
    HEAPF32[i4 >> 2] = d12;
    HEAPF32[i4 + 4 >> 2] = d11;
    HEAPF32[i4 + 8 >> 2] = d6;
    HEAPF32[i4 + 12 >> 2] = 0.0;
   }
   if (d13 > +HEAPF32[i2 >> 2]) {
    HEAPF32[i2 >> 2] = d13;
    HEAPF32[i3 >> 2] = d12;
    HEAPF32[i3 + 4 >> 2] = d11;
    HEAPF32[i3 + 8 >> 2] = d6;
    HEAPF32[i3 + 12 >> 2] = 0.0;
   }
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i9 | 0));
  d11 = +HEAPF32[i2 >> 2];
 } else d11 = -3.4028234663852886e+38;
 d6 = +HEAPF32[i1 >> 2];
 if (!(d6 > d11)) {
  STACKTOP = i5;
  return;
 }
 HEAPF32[i1 >> 2] = d11;
 HEAPF32[i2 >> 2] = d6;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i4 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 STACKTOP = i5;
 return;
}
function __ZNK12gjkepa2_impl3GJK10getsupportERK9btVector3RNS0_3sSVE(i2, d6, d4, d5, i1) {
 i2 = i2 | 0;
 d6 = +d6;
 d4 = +d4;
 d5 = +d5;
 i1 = i1 | 0;
 var i3 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 d10 = 1.0 / +Math_sqrt(+(d6 * d6 + d4 * d4 + d5 * d5));
 HEAPF32[i1 >> 2] = d10 * d6;
 HEAPF32[i1 + 4 >> 2] = d10 * d4;
 HEAPF32[i1 + 8 >> 2] = d10 * d5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 i8 = HEAPU8[i2 + 120 >> 0] | HEAPU8[i2 + 121 >> 0] << 8 | HEAPU8[i2 + 122 >> 0] << 16 | HEAPU8[i2 + 123 >> 0] << 24;
 i9 = HEAPU8[i2 + 124 >> 0] | HEAPU8[i2 + 125 >> 0] << 8 | HEAPU8[i2 + 126 >> 0] << 16 | HEAPU8[i2 + 127 >> 0] << 24;
 i7 = (HEAP32[i2 >> 2] | 0) + (i9 >> 1) | 0;
 if ((i9 & 1 | 0) != 0) i8 = HEAP32[(HEAP32[i7 >> 2] | 0) + i8 >> 2] | 0;
 FUNCTION_TABLE_viii[i8 & 127](i3, i7, i1);
 d4 = -+HEAPF32[i1 >> 2];
 d5 = -+HEAPF32[i1 + 4 >> 2];
 d6 = -+HEAPF32[i1 + 8 >> 2];
 i8 = HEAPU8[i2 + 120 >> 0] | HEAPU8[i2 + 121 >> 0] << 8 | HEAPU8[i2 + 122 >> 0] << 16 | HEAPU8[i2 + 123 >> 0] << 24;
 i9 = HEAPU8[i2 + 124 >> 0] | HEAPU8[i2 + 125 >> 0] << 8 | HEAPU8[i2 + 126 >> 0] << 16 | HEAPU8[i2 + 127 >> 0] << 24;
 i7 = (HEAP32[i2 + 4 >> 2] | 0) + (i9 >> 1) | 0;
 if ((i9 & 1 | 0) != 0) i8 = HEAP32[(HEAP32[i7 >> 2] | 0) + i8 >> 2] | 0;
 d10 = +HEAPF32[i2 + 24 >> 2] * d4 + +HEAPF32[i2 + 28 >> 2] * d5 + +HEAPF32[i2 + 32 >> 2] * d6;
 d11 = +HEAPF32[i2 + 40 >> 2] * d4 + +HEAPF32[i2 + 44 >> 2] * d5 + +HEAPF32[i2 + 48 >> 2] * d6;
 HEAPF32[i3 + 16 >> 2] = +HEAPF32[i2 + 8 >> 2] * d4 + +HEAPF32[i2 + 12 >> 2] * d5 + +HEAPF32[i2 + 16 >> 2] * d6;
 HEAPF32[i3 + 20 >> 2] = d10;
 HEAPF32[i3 + 24 >> 2] = d11;
 HEAPF32[i3 + 28 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i8 & 127](i3 + 32 | 0, i7, i3 + 16 | 0);
 d11 = +HEAPF32[i3 + 32 >> 2];
 d4 = +HEAPF32[i3 + 36 >> 2];
 d5 = +HEAPF32[i3 + 40 >> 2];
 d6 = +HEAPF32[i3 + 4 >> 2] - (d11 * +HEAPF32[i2 + 72 >> 2] + d4 * +HEAPF32[i2 + 76 >> 2] + d5 * +HEAPF32[i2 + 80 >> 2] + +HEAPF32[i2 + 108 >> 2]);
 d10 = +HEAPF32[i3 + 8 >> 2] - (d11 * +HEAPF32[i2 + 88 >> 2] + d4 * +HEAPF32[i2 + 92 >> 2] + d5 * +HEAPF32[i2 + 96 >> 2] + +HEAPF32[i2 + 112 >> 2]);
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i3 >> 2] - (d11 * +HEAPF32[i2 + 56 >> 2] + d4 * +HEAPF32[i2 + 60 >> 2] + d5 * +HEAPF32[i2 + 64 >> 2] + +HEAPF32[i2 + 104 >> 2]);
 HEAPF32[i1 + 20 >> 2] = d6;
 HEAPF32[i1 + 24 >> 2] = d10;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalI8pointCmpEEvRKT_ii(i8, i1, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = HEAP32[i8 + 12 >> 2] | 0;
 i4 = HEAP32[i6 + (((i2 + i1 | 0) / 2 | 0) << 4) >> 2] | 0;
 i5 = HEAP32[i6 + (((i2 + i1 | 0) / 2 | 0) << 4) + 4 >> 2] | 0;
 i3 = HEAP32[i6 + (((i2 + i1 | 0) / 2 | 0) << 4) + 8 >> 2] | 0;
 i9 = i1;
 i10 = i2;
 while (1) {
  while (1) {
   i11 = HEAP32[i6 + (i9 << 4) + 4 >> 2] | 0;
   if ((i11 | 0) >= (i5 | 0)) {
    if ((i11 | 0) != (i5 | 0)) break;
    i11 = HEAP32[i6 + (i9 << 4) >> 2] | 0;
    if ((i11 | 0) >= (i4 | 0)) {
     if ((i11 | 0) != (i4 | 0)) break;
     if ((HEAP32[i6 + (i9 << 4) + 8 >> 2] | 0) >= (i3 | 0)) break;
    }
   }
   i9 = i9 + 1 | 0;
  }
  while (1) {
   i11 = HEAP32[i6 + (i10 << 4) + 4 >> 2] | 0;
   if ((i5 | 0) >= (i11 | 0)) {
    if ((i5 | 0) != (i11 | 0)) break;
    i11 = HEAP32[i6 + (i10 << 4) >> 2] | 0;
    if ((i4 | 0) >= (i11 | 0)) {
     if ((i4 | 0) != (i11 | 0)) break;
     if ((i3 | 0) >= (HEAP32[i6 + (i10 << 4) + 8 >> 2] | 0)) break;
    }
   }
   i10 = i10 + -1 | 0;
  }
  if ((i9 | 0) <= (i10 | 0)) {
   i11 = i6 + (i9 << 4) | 0;
   HEAP32[i7 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i7 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   i6 = i6 + (i10 << 4) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   i11 = (HEAP32[i8 + 12 >> 2] | 0) + (i10 << 4) | 0;
   HEAP32[i11 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i9 = i9 + 1 | 0;
   i10 = i10 + -1 | 0;
  }
  if ((i9 | 0) > (i10 | 0)) break;
  i6 = HEAP32[i8 + 12 >> 2] | 0;
 }
 if ((i10 | 0) > (i1 | 0)) __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalI8pointCmpEEvRKT_ii(i8, i1, i10);
 if ((i9 | 0) >= (i2 | 0)) {
  STACKTOP = i7;
  return;
 }
 __ZN20btAlignedObjectArrayIN20btConvexHullInternal7Point32EE17quickSortInternalI8pointCmpEEvRKT_ii(i8, i9, i2);
 STACKTOP = i7;
 return;
}
function __ZN20btAxisSweep3InternalItE11sortMaxDownEitP12btDispatcherb(i6, i2, i13, i5) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 i12 = HEAP32[i6 + (i2 << 2) + 68 >> 2] | 0;
 i10 = HEAP16[i12 + ((i13 & 65535) + -1 << 2) >> 1] | 0;
 if (!((HEAPU16[i12 + ((i13 & 65535) << 2) >> 1] | 0) < (i10 & 65535))) {
  STACKTOP = i3;
  return;
 }
 i9 = HEAP32[i6 + 60 >> 2] | 0;
 i1 = i9 + ((HEAPU16[i12 + ((i13 & 65535) << 2) + 2 >> 1] | 0) << 6) + (i2 << 1) + 54 | 0;
 i11 = i12 + ((i13 & 65535) << 2) | 0;
 i12 = i12 + ((i13 & 65535) + -1 << 2) | 0;
 while (1) {
  i13 = HEAPU16[i12 + 2 >> 1] | 0;
  if ((i10 & 1) == 0) {
   i10 = HEAPU16[i11 + 2 >> 1] | 0;
   if (((((HEAPU16[i9 + (i10 << 6) + ((1 << i2 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i9 + (i13 << 6) + ((1 << i2 & 3) << 1) + 48 >> 1] | 0) ? (HEAPU16[i9 + (i13 << 6) + ((1 << i2 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i9 + (i10 << 6) + ((1 << i2 & 3) << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i9 + (i10 << 6) + ((1 << (1 << i2 & 3) & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i9 + (i13 << 6) + ((1 << (1 << i2 & 3) & 3) << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i9 + (i13 << 6) + ((1 << (1 << i2 & 3) & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i9 + (i10 << 6) + ((1 << (1 << i2 & 3) & 3) << 1) + 48 >> 1] | 0) : 0) ? (i7 = HEAP32[i6 + 92 >> 2] | 0, i8 = i9 + (i10 << 6) | 0, i4 = i9 + (i13 << 6) | 0, FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 31](i7, i8, i4, i5) | 0, i7 = HEAP32[i6 + 96 >> 2] | 0, (i7 | 0) != 0) : 0) FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 31](i7, i8, i4, i5) | 0;
   i13 = i9 + (i13 << 6) + (i2 << 1) + 48 | 0;
   HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + 1 << 16 >> 16;
  } else {
   i13 = i9 + (i13 << 6) + (i2 << 1) + 54 | 0;
   HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + -1 << 16 >> 16;
  i10 = HEAPU16[i11 >> 1] | HEAPU16[i11 + 2 >> 1] << 16;
  i13 = HEAPU16[i12 >> 1] | HEAPU16[i12 + 2 >> 1] << 16;
  HEAP16[i11 >> 1] = i13;
  HEAP16[i11 + 2 >> 1] = i13 >>> 16;
  HEAP16[i12 >> 1] = i10;
  HEAP16[i12 + 2 >> 1] = i10 >>> 16;
  i11 = i11 + -4 | 0;
  i12 = i12 + -4 | 0;
  i10 = HEAP16[i12 >> 1] | 0;
  if (!((HEAPU16[i11 >> 1] | 0) < (i10 & 65535))) break;
  i9 = HEAP32[i6 + 60 >> 2] | 0;
 }
 STACKTOP = i3;
 return;
}
function __ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i3, i6, i5, i2, i8, i4) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 var i1 = 0, i7 = 0;
 i1 = STACKTOP;
 if ((HEAPU8[i2 + 55 >> 0] | 0 | 0) == (i6 | 0)) {
  i8 = 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 i7 = HEAP32[19552 + (i8 << 2) >> 2] | 0;
 if (+HEAPF32[i2 >> 2] * +HEAPF32[i5 + 16 >> 2] + +HEAPF32[i2 + 4 >> 2] * +HEAPF32[i5 + 20 >> 2] + +HEAPF32[i2 + 8 >> 2] * +HEAPF32[i5 + 24 >> 2] - +HEAPF32[i2 + 16 >> 2] < -9999999747378752.0e-21) {
  i3 = __ZN12gjkepa2_impl3EPA7newfaceEPNS_3GJK3sSVES3_S3_b(i3, HEAP32[i2 + (i7 << 2) + 20 >> 2] | 0, HEAP32[i2 + (i8 << 2) + 20 >> 2] | 0, i5, 0) | 0;
  if ((i3 | 0) == 0) {
   i8 = 0;
   STACKTOP = i1;
   return i8 | 0;
  }
  HEAP8[i3 + 52 >> 0] = i8;
  HEAP32[i3 + 32 >> 2] = i2;
  HEAP8[i2 + i8 + 52 >> 0] = 0;
  HEAP32[i2 + (i8 << 2) + 32 >> 2] = i3;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) == 0) HEAP32[i4 + 4 >> 2] = i3; else {
   HEAP8[i2 + 53 >> 0] = 2;
   HEAP32[i2 + 36 >> 2] = i3;
   HEAP8[i3 + 54 >> 0] = 1;
   HEAP32[i3 + 40 >> 2] = i2;
  }
  HEAP32[i4 >> 2] = i3;
  HEAP32[i4 + 8 >> 2] = (HEAP32[i4 + 8 >> 2] | 0) + 1;
  i8 = 1;
  STACKTOP = i1;
  return i8 | 0;
 }
 i8 = HEAP32[19536 + (i8 << 2) >> 2] | 0;
 HEAP8[i2 + 55 >> 0] = i6;
 if (!(__ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i3, i6, i5, HEAP32[i2 + (i7 << 2) + 32 >> 2] | 0, HEAPU8[i2 + i7 + 52 >> 0] | 0, i4) | 0)) {
  i8 = 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 if (!(__ZN12gjkepa2_impl3EPA6expandEjPNS_3GJK3sSVEPNS0_5sFaceEjRNS0_8sHorizonE(i3, i6, i5, HEAP32[i2 + (i8 << 2) + 32 >> 2] | 0, HEAPU8[i2 + i8 + 52 >> 0] | 0, i4) | 0)) {
  i8 = 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 i4 = HEAP32[i2 + 48 >> 2] | 0;
 if ((i4 | 0) != 0) HEAP32[i4 + 44 >> 2] = HEAP32[i2 + 44 >> 2];
 i4 = HEAP32[i2 + 44 >> 2] | 0;
 if ((i4 | 0) != 0) HEAP32[i4 + 48 >> 2] = HEAP32[i2 + 48 >> 2];
 if ((HEAP32[i3 + 9280 >> 2] | 0) == (i2 | 0)) HEAP32[i3 + 9280 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i3 + 9284 >> 2] = (HEAP32[i3 + 9284 >> 2] | 0) + -1;
 HEAP32[i2 + 44 >> 2] = 0;
 HEAP32[i2 + 48 >> 2] = HEAP32[i3 + 9288 >> 2];
 i4 = HEAP32[i3 + 9288 >> 2] | 0;
 if ((i4 | 0) != 0) HEAP32[i4 + 44 >> 2] = i2;
 HEAP32[i3 + 9288 >> 2] = i2;
 HEAP32[i3 + 9292 >> 2] = (HEAP32[i3 + 9292 >> 2] | 0) + 1;
 i8 = 1;
 STACKTOP = i1;
 return i8 | 0;
}
function __ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEPK24btCollisionObjectWrapperS2_(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = (HEAP8[i1 + 28 >> 0] | 0) != 0;
 i2 = i6 ? i5 : i4;
 i5 = i6 ? i4 : i5;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i6 = HEAP32[i4 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i7 | 0) < (i6 | 0)) {
  if ((HEAP32[i1 + 16 >> 2] | 0) < (i6 | 0)) {
   if ((i6 | 0) == 0) {
    i8 = 0;
    i10 = i7;
   } else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i8 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
    if ((i8 | 0) == 0) i8 = 0; else {
     HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
     i8 = i8 + 19 & -16;
    }
    i10 = HEAP32[i1 + 12 >> 2] | 0;
   }
   if ((i10 | 0) > 0) {
    i9 = 0;
    do {
     i11 = i8 + (i9 << 2) | 0;
     if ((i11 | 0) != 0) HEAP32[i11 >> 2] = HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + (i9 << 2) >> 2];
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) != (i10 | 0));
   }
   i9 = HEAP32[i1 + 20 >> 2] | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i1 + 24 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i9 + -4 >> 2] | 0);
    }
    HEAP32[i1 + 20 >> 2] = 0;
   }
   HEAP8[i1 + 24 >> 0] = 1;
   HEAP32[i1 + 20 >> 2] = i8;
   HEAP32[i1 + 16 >> 2] = i6;
   i8 = i1 + 20 | 0;
  } else i8 = i1 + 20 | 0;
  do {
   i9 = (HEAP32[i8 >> 2] | 0) + (i7 << 2) | 0;
   if ((i9 | 0) != 0) HEAP32[i9 >> 2] = 0;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 HEAP32[i1 + 12 >> 2] = i6;
 if ((i6 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i7 = 0;
 do {
  if ((HEAP32[i4 + 64 >> 2] | 0) == 0) {
   i9 = HEAP32[(HEAP32[i4 + 24 >> 2] | 0) + (i7 * 80 | 0) + 64 >> 2] | 0;
   i10 = HEAP32[i2 + 8 >> 2] | 0;
   i11 = HEAP32[i2 + 12 >> 2] | 0;
   HEAP32[i3 >> 2] = i2;
   HEAP32[i3 + 4 >> 2] = i9;
   HEAP32[i3 + 8 >> 2] = i10;
   HEAP32[i3 + 12 >> 2] = i11;
   HEAP32[i3 + 16 >> 2] = -1;
   HEAP32[i3 + 20 >> 2] = i7;
   i11 = HEAP32[i1 + 4 >> 2] | 0;
   i11 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 31](i11, i3, i5, HEAP32[i1 + 32 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + (i7 << 2) >> 2] = i11;
  } else HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + (i7 << 2) >> 2] = 0;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i6 | 0));
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBody(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i2 = STACKTOP;
 i5 = HEAP32[i1 + 204 >> 2] | 0;
 if ((i5 & 3 | 0) == 0 ? (HEAP32[i1 + 504 >> 2] & 1 | 0) == 0 : 0) {
  d9 = +HEAPF32[i1 + 344 >> 2];
  if (d9 != 0.0) {
   d11 = 1.0 / d9 * +HEAPF32[i3 + 252 >> 2];
   d10 = 1.0 / d9 * +HEAPF32[i3 + 256 >> 2];
   HEAPF32[i1 + 364 >> 2] = 1.0 / d9 * +HEAPF32[i3 + 248 >> 2];
   HEAPF32[i1 + 368 >> 2] = d11;
   HEAPF32[i1 + 372 >> 2] = d10;
   HEAPF32[i1 + 376 >> 2] = 0.0;
  }
  HEAP32[i1 + 380 >> 2] = HEAP32[i3 + 248 >> 2];
  HEAP32[i1 + 384 >> 2] = HEAP32[i3 + 252 >> 2];
  HEAP32[i1 + 388 >> 2] = HEAP32[i3 + 256 >> 2];
  HEAP32[i1 + 392 >> 2] = HEAP32[i3 + 260 >> 2];
 }
 if ((HEAP32[i1 + 192 >> 2] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((i5 & 1 | 0) != 0) {
  if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 2;
 } else {
  i6 = HEAP32[i3 + 232 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i3 + 236 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
   if ((i4 | 0) == 0) i5 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
    if ((i5 | 0) == 0) i5 = 0; else {
     HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
     i5 = i5 + 19 & -16;
    }
    i6 = HEAP32[i3 + 232 >> 2] | 0;
   }
   if ((i6 | 0) > 0) {
    i7 = 0;
    do {
     i8 = i5 + (i7 << 2) | 0;
     if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i3 + 240 >> 2] | 0) + (i7 << 2) >> 2];
     i7 = i7 + 1 | 0;
    } while ((i7 | 0) != (i6 | 0));
   }
   i7 = HEAP32[i3 + 240 >> 2] | 0;
   if ((i7 | 0) != 0) {
    if ((HEAP8[i3 + 244 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i7 + -4 >> 2] | 0);
     i6 = HEAP32[i3 + 232 >> 2] | 0;
    }
    HEAP32[i3 + 240 >> 2] = 0;
   }
   HEAP8[i3 + 244 >> 0] = 1;
   HEAP32[i3 + 240 >> 2] = i5;
   HEAP32[i3 + 236 >> 2] = i4;
  }
  i4 = (HEAP32[i3 + 240 >> 2] | 0) + (i6 << 2) | 0;
  if ((i4 | 0) != 0) HEAP32[i4 >> 2] = i1;
  HEAP32[i3 + 232 >> 2] = i6 + 1;
  i5 = HEAP32[i1 + 204 >> 2] | 0;
 }
 if ((i5 & 1 | 0) == 0) i4 = (i5 & 2 | 0) == 0; else i4 = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3, i1, i4 ? 1 : 2, i4 ? -1 : -3);
 STACKTOP = i2;
 return;
}
function __ZNK20btDefaultMotionState17getWorldTransformER11btTransform(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 __ZN11btMatrix3x3C1ERKfS1_S1_S1_S1_S1_S1_S1_S1_(i2 + 128 | 0, i1 + 68 | 0, i1 + 84 | 0, i1 + 100 | 0, i1 + 72 | 0, i1 + 88 | 0, i1 + 104 | 0, i1 + 76 | 0, i1 + 92 | 0, i1 + 108 | 0);
 d9 = -+HEAPF32[i1 + 116 >> 2];
 d8 = -+HEAPF32[i1 + 120 >> 2];
 d5 = -+HEAPF32[i1 + 124 >> 2];
 d3 = +HEAPF32[i2 + 128 >> 2] * d9 + +HEAPF32[i2 + 132 >> 2] * d8 + +HEAPF32[i2 + 136 >> 2] * d5;
 d4 = +HEAPF32[i2 + 144 >> 2] * d9 + +HEAPF32[i2 + 148 >> 2] * d8 + +HEAPF32[i2 + 152 >> 2] * d5;
 d5 = +HEAPF32[i2 + 160 >> 2] * d9 + +HEAPF32[i2 + 164 >> 2] * d8 + +HEAPF32[i2 + 168 >> 2] * d5;
 i6 = i2;
 do i6 = i6 + 16 | 0; while ((i6 | 0) != (i2 + 48 | 0));
 HEAP32[i2 + 0 >> 2] = HEAP32[i2 + 128 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i2 + 132 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i2 + 136 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i2 + 140 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i2 + 144 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i2 + 148 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i2 + 152 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i2 + 156 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i2 + 160 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i2 + 164 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i2 + 168 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i2 + 172 >> 2];
 HEAPF32[i2 + 48 >> 2] = d3;
 HEAPF32[i2 + 52 >> 2] = d4;
 HEAPF32[i2 + 56 >> 2] = d5;
 HEAPF32[i2 + 60 >> 2] = 0.0;
 __ZNK11btTransformmlERKS_(i2 + 64 | 0, i2, i1 + 4 | 0);
 HEAP32[i7 + 0 >> 2] = HEAP32[i2 + 64 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 68 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 72 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 76 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i2 + 80 >> 2];
 HEAP32[i7 + 20 >> 2] = HEAP32[i2 + 84 >> 2];
 HEAP32[i7 + 24 >> 2] = HEAP32[i2 + 88 >> 2];
 HEAP32[i7 + 28 >> 2] = HEAP32[i2 + 92 >> 2];
 HEAP32[i7 + 32 >> 2] = HEAP32[i2 + 96 >> 2];
 HEAP32[i7 + 36 >> 2] = HEAP32[i2 + 100 >> 2];
 HEAP32[i7 + 40 >> 2] = HEAP32[i2 + 104 >> 2];
 HEAP32[i7 + 44 >> 2] = HEAP32[i2 + 108 >> 2];
 HEAP32[i7 + 48 >> 2] = HEAP32[i2 + 112 >> 2];
 HEAP32[i7 + 52 >> 2] = HEAP32[i2 + 116 >> 2];
 HEAP32[i7 + 56 >> 2] = HEAP32[i2 + 120 >> 2];
 HEAP32[i7 + 60 >> 2] = HEAP32[i2 + 124 >> 2];
 STACKTOP = i2;
 return;
}
function __ZN20btAxisSweep3InternalItE11sortMinDownEitP12btDispatcherb(i4, i1, i12) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 i11 = HEAP32[i4 + (i1 << 2) + 68 >> 2] | 0;
 i2 = HEAP32[i4 + 60 >> 2] | 0;
 i3 = HEAPU16[i11 + ((i12 & 65535) << 2) + 2 >> 1] | 0;
 i9 = HEAP16[i11 + ((i12 & 65535) + -1 << 2) >> 1] | 0;
 if (!((HEAPU16[i11 + ((i12 & 65535) << 2) >> 1] | 0) < (i9 & 65535))) {
  STACKTOP = i7;
  return;
 }
 i8 = i2;
 i10 = i11 + ((i12 & 65535) << 2) | 0;
 i11 = i11 + ((i12 & 65535) + -1 << 2) | 0;
 while (1) {
  i12 = HEAPU16[i11 + 2 >> 1] | 0;
  if ((i9 & 1) == 0) {
   i12 = i8 + (i12 << 6) + (i1 << 1) + 48 | 0;
   HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + 1 << 16 >> 16;
  } else {
   if (((((HEAPU16[i2 + (i3 << 6) + ((1 << i1 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i8 + (i12 << 6) + ((1 << i1 & 3) << 1) + 48 >> 1] | 0) ? (HEAPU16[i8 + (i12 << 6) + ((1 << i1 & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i2 + (i3 << 6) + ((1 << i1 & 3) << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i2 + (i3 << 6) + ((1 << (1 << i1 & 3) & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i8 + (i12 << 6) + ((1 << (1 << i1 & 3) & 3) << 1) + 48 >> 1] | 0) : 0) ? (HEAPU16[i8 + (i12 << 6) + ((1 << (1 << i1 & 3) & 3) << 1) + 54 >> 1] | 0) >= (HEAPU16[i2 + (i3 << 6) + ((1 << (1 << i1 & 3) & 3) << 1) + 48 >> 1] | 0) : 0) ? (i5 = HEAP32[i4 + 92 >> 2] | 0, i6 = i8 + (i12 << 6) | 0, FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, i2 + (i3 << 6) | 0, i6) | 0, i5 = HEAP32[i4 + 96 >> 2] | 0, (i5 | 0) != 0) : 0) FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, i2 + (i3 << 6) | 0, i6) | 0;
   i12 = i8 + (i12 << 6) + (i1 << 1) + 54 | 0;
   HEAP16[i12 >> 1] = (HEAP16[i12 >> 1] | 0) + 1 << 16 >> 16;
  }
  HEAP16[i2 + (i3 << 6) + (i1 << 1) + 48 >> 1] = (HEAP16[i2 + (i3 << 6) + (i1 << 1) + 48 >> 1] | 0) + -1 << 16 >> 16;
  i9 = HEAPU16[i10 >> 1] | HEAPU16[i10 + 2 >> 1] << 16;
  i12 = HEAPU16[i11 >> 1] | HEAPU16[i11 + 2 >> 1] << 16;
  HEAP16[i10 >> 1] = i12;
  HEAP16[i10 + 2 >> 1] = i12 >>> 16;
  HEAP16[i11 >> 1] = i9;
  HEAP16[i11 + 2 >> 1] = i9 >>> 16;
  i10 = i10 + -4 | 0;
  i11 = i11 + -4 | 0;
  i9 = HEAP16[i11 >> 1] | 0;
  if (!((HEAPU16[i10 >> 1] | 0) < (i9 & 65535))) break;
  i8 = HEAP32[i4 + 60 >> 2] | 0;
 }
 STACKTOP = i7;
 return;
}
function __ZNK18btConvexPolyhedron7projectERK11btTransformRK9btVector3RfS6_RS3_S7_(i7, i8, i14, i1, i2, i4, i3) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, d6 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d15 = 0.0, i16 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAPF32[i1 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i2 >> 2] = -3.4028234663852886e+38;
 i9 = HEAP32[i7 + 8 >> 2] | 0;
 if ((i9 | 0) > 0) {
  i10 = 0;
  do {
   i16 = HEAP32[i7 + 16 >> 2] | 0;
   d15 = +HEAPF32[i16 + (i10 << 4) >> 2];
   d13 = +HEAPF32[i16 + (i10 << 4) + 4 >> 2];
   d6 = +HEAPF32[i16 + (i10 << 4) + 8 >> 2];
   d12 = d15 * +HEAPF32[i8 >> 2] + d13 * +HEAPF32[i8 + 4 >> 2] + d6 * +HEAPF32[i8 + 8 >> 2] + +HEAPF32[i8 + 48 >> 2];
   d11 = d15 * +HEAPF32[i8 + 16 >> 2] + d13 * +HEAPF32[i8 + 20 >> 2] + d6 * +HEAPF32[i8 + 24 >> 2] + +HEAPF32[i8 + 52 >> 2];
   d6 = d15 * +HEAPF32[i8 + 32 >> 2] + d13 * +HEAPF32[i8 + 36 >> 2] + d6 * +HEAPF32[i8 + 40 >> 2] + +HEAPF32[i8 + 56 >> 2];
   d13 = d12 * +HEAPF32[i14 >> 2] + d11 * +HEAPF32[i14 + 4 >> 2] + d6 * +HEAPF32[i14 + 8 >> 2];
   if (d13 < +HEAPF32[i1 >> 2]) {
    HEAPF32[i1 >> 2] = d13;
    HEAPF32[i4 >> 2] = d12;
    HEAPF32[i4 + 4 >> 2] = d11;
    HEAPF32[i4 + 8 >> 2] = d6;
    HEAPF32[i4 + 12 >> 2] = 0.0;
   }
   if (d13 > +HEAPF32[i2 >> 2]) {
    HEAPF32[i2 >> 2] = d13;
    HEAPF32[i3 >> 2] = d12;
    HEAPF32[i3 + 4 >> 2] = d11;
    HEAPF32[i3 + 8 >> 2] = d6;
    HEAPF32[i3 + 12 >> 2] = 0.0;
   }
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i9 | 0));
  d11 = +HEAPF32[i2 >> 2];
 } else d11 = -3.4028234663852886e+38;
 d6 = +HEAPF32[i1 >> 2];
 if (!(d6 > d11)) {
  STACKTOP = i5;
  return;
 }
 HEAPF32[i1 >> 2] = d11;
 HEAPF32[i2 >> 2] = d6;
 HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i4 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i3 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBodyss(i2, i5, i3, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 i1 = STACKTOP;
 i7 = HEAP32[i5 + 204 >> 2] | 0;
 if ((i7 & 3 | 0) == 0 ? (HEAP32[i5 + 504 >> 2] & 1 | 0) == 0 : 0) {
  d11 = +HEAPF32[i5 + 344 >> 2];
  if (d11 != 0.0) {
   d13 = 1.0 / d11 * +HEAPF32[i2 + 252 >> 2];
   d12 = 1.0 / d11 * +HEAPF32[i2 + 256 >> 2];
   HEAPF32[i5 + 364 >> 2] = 1.0 / d11 * +HEAPF32[i2 + 248 >> 2];
   HEAPF32[i5 + 368 >> 2] = d13;
   HEAPF32[i5 + 372 >> 2] = d12;
   HEAPF32[i5 + 376 >> 2] = 0.0;
  }
  HEAP32[i5 + 380 >> 2] = HEAP32[i2 + 248 >> 2];
  HEAP32[i5 + 384 >> 2] = HEAP32[i2 + 252 >> 2];
  HEAP32[i5 + 388 >> 2] = HEAP32[i2 + 256 >> 2];
  HEAP32[i5 + 392 >> 2] = HEAP32[i2 + 260 >> 2];
 }
 if ((HEAP32[i5 + 192 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((i7 & 1 | 0) != 0) {
  if (!(((HEAP32[i5 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i5 + 216 >> 2] = 2;
 } else {
  i8 = HEAP32[i2 + 232 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i2 + 236 >> 2] | 0) ? (i6 = (i8 | 0) == 0 ? 1 : i8 << 1, (i8 | 0) < (i6 | 0)) : 0) {
   if ((i6 | 0) == 0) i7 = 0; else {
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i7 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
    if ((i7 | 0) == 0) i7 = 0; else {
     HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
     i7 = i7 + 19 & -16;
    }
    i8 = HEAP32[i2 + 232 >> 2] | 0;
   }
   if ((i8 | 0) > 0) {
    i10 = 0;
    do {
     i9 = i7 + (i10 << 2) | 0;
     if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i2 + 240 >> 2] | 0) + (i10 << 2) >> 2];
     i10 = i10 + 1 | 0;
    } while ((i10 | 0) != (i8 | 0));
   }
   i9 = HEAP32[i2 + 240 >> 2] | 0;
   if ((i9 | 0) != 0) {
    if ((HEAP8[i2 + 244 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i9 + -4 >> 2] | 0);
     i8 = HEAP32[i2 + 232 >> 2] | 0;
    }
    HEAP32[i2 + 240 >> 2] = 0;
   }
   HEAP8[i2 + 244 >> 0] = 1;
   HEAP32[i2 + 240 >> 2] = i7;
   HEAP32[i2 + 236 >> 2] = i6;
  }
  i6 = (HEAP32[i2 + 240 >> 2] | 0) + (i8 << 2) | 0;
  if ((i6 | 0) != 0) HEAP32[i6 >> 2] = i5;
  HEAP32[i2 + 232 >> 2] = i8 + 1;
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2, i5, i3, i4);
 STACKTOP = i1;
 return;
}
function __ZNK19btTriangleMeshShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0;
 i5 = STACKTOP;
 d14 = (+HEAPF32[i4 + 32 >> 2] - +HEAPF32[i4 + 16 >> 2]) * .5;
 d11 = (+HEAPF32[i4 + 36 >> 2] - +HEAPF32[i4 + 20 >> 2]) * .5;
 d8 = (+HEAPF32[i4 + 40 >> 2] - +HEAPF32[i4 + 24 >> 2]) * .5;
 d13 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d8 = d8 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d27 = (+HEAPF32[i4 + 32 >> 2] + +HEAPF32[i4 + 16 >> 2]) * .5;
 d25 = (+HEAPF32[i4 + 36 >> 2] + +HEAPF32[i4 + 20 >> 2]) * .5;
 d23 = (+HEAPF32[i4 + 40 >> 2] + +HEAPF32[i4 + 24 >> 2]) * .5;
 d31 = +HEAPF32[i3 >> 2];
 d22 = +Math_abs(+d31);
 d30 = +HEAPF32[i3 + 4 >> 2];
 d21 = +Math_abs(+d30);
 d19 = +HEAPF32[i3 + 8 >> 2];
 d20 = +Math_abs(+d19);
 d29 = +HEAPF32[i3 + 16 >> 2];
 d18 = +Math_abs(+d29);
 d28 = +HEAPF32[i3 + 20 >> 2];
 d17 = +Math_abs(+d28);
 d15 = +HEAPF32[i3 + 24 >> 2];
 d16 = +Math_abs(+d15);
 d26 = +HEAPF32[i3 + 32 >> 2];
 d12 = +Math_abs(+d26);
 d24 = +HEAPF32[i3 + 36 >> 2];
 d9 = +Math_abs(+d24);
 d6 = +HEAPF32[i3 + 40 >> 2];
 d7 = +Math_abs(+d6);
 d19 = d27 * d31 + d25 * d30 + d23 * d19 + +HEAPF32[i3 + 48 >> 2];
 d15 = d27 * d29 + d25 * d28 + d23 * d15 + +HEAPF32[i3 + 52 >> 2];
 d6 = d27 * d26 + d25 * d24 + d23 * d6 + +HEAPF32[i3 + 56 >> 2];
 HEAPF32[i2 >> 2] = d19 - ((d14 + d13) * d22 + (d11 + d10) * d21 + d8 * d20);
 HEAPF32[i2 + 4 >> 2] = d15 - ((d14 + d13) * d18 + (d11 + d10) * d17 + d8 * d16);
 HEAPF32[i2 + 8 >> 2] = d6 - ((d14 + d13) * d12 + (d11 + d10) * d9 + d8 * d7);
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = (d14 + d13) * d22 + (d11 + d10) * d21 + d8 * d20 + d19;
 HEAPF32[i1 + 4 >> 2] = (d14 + d13) * d18 + (d11 + d10) * d17 + d8 * d16 + d15;
 HEAPF32[i1 + 8 >> 2] = (d14 + d13) * d12 + (d11 + d10) * d9 + d8 * d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZNK20btConvexHullInternal10Rational647compareERKS0_(i3, i4, i7, i9, i1, i8) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 i5 = HEAP32[i8 + 16 >> 2] | 0;
 if ((i5 | 0) != (i1 | 0)) {
  i10 = i1 - i5 | 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 if ((i1 | 0) == 0) {
  i10 = 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 i10 = HEAP32[i8 + 8 >> 2] | 0;
 i12 = HEAP32[i8 + 12 >> 2] | 0;
 i6 = ___muldi3(i10 | 0, 0, i3 | 0, 0) | 0;
 i5 = tempRet0;
 i14 = ___muldi3(i12 | 0, 0, i3 | 0, 0) | 0;
 i11 = tempRet0;
 i10 = ___muldi3(i10 | 0, 0, i4 | 0, 0) | 0;
 i3 = tempRet0;
 i12 = ___muldi3(i12 | 0, 0, i4 | 0, 0) | 0;
 i13 = tempRet0;
 i4 = _i64Add(i14 | 0, 0, i10 | 0, 0) | 0;
 i10 = tempRet0;
 i13 = _i64Add(i11 | 0, 0, i12 | 0, i13 | 0) | 0;
 i3 = _i64Add(i13 | 0, tempRet0 | 0, i3 | 0, 0) | 0;
 i10 = _i64Add(i3 | 0, tempRet0 | 0, i10 | 0, 0) | 0;
 i3 = tempRet0;
 i5 = _i64Add(0, i4 | 0, i6 | 0, i5 | 0) | 0;
 i6 = tempRet0;
 i4 = _i64Add(i10 | 0, i3 | 0, (i6 >>> 0 < i4 >>> 0 | (i6 | 0) == (i4 | 0) & i5 >>> 0 < 0) & 1 | 0, 0) | 0;
 i3 = tempRet0;
 i10 = HEAP32[i8 >> 2] | 0;
 i13 = HEAP32[i8 + 4 >> 2] | 0;
 i12 = ___muldi3(i10 | 0, 0, i7 | 0, 0) | 0;
 i8 = tempRet0;
 i11 = ___muldi3(i13 | 0, 0, i7 | 0, 0) | 0;
 i14 = tempRet0;
 i10 = ___muldi3(i10 | 0, 0, i9 | 0, 0) | 0;
 i7 = tempRet0;
 i13 = ___muldi3(i13 | 0, 0, i9 | 0, 0) | 0;
 i9 = tempRet0;
 i10 = _i64Add(i11 | 0, 0, i10 | 0, 0) | 0;
 i11 = tempRet0;
 i9 = _i64Add(i14 | 0, 0, i13 | 0, i9 | 0) | 0;
 i9 = _i64Add(i9 | 0, tempRet0 | 0, i7 | 0, 0) | 0;
 i11 = _i64Add(i9 | 0, tempRet0 | 0, i11 | 0, 0) | 0;
 i9 = tempRet0;
 i8 = _i64Add(0, i10 | 0, i12 | 0, i8 | 0) | 0;
 i7 = tempRet0;
 i10 = _i64Add(i11 | 0, i9 | 0, (i7 >>> 0 < i10 >>> 0 | (i7 | 0) == (i10 | 0) & i8 >>> 0 < 0) & 1 | 0, 0) | 0;
 i9 = tempRet0;
 if (!(i3 >>> 0 < i9 >>> 0 | (i3 | 0) == (i9 | 0) & i4 >>> 0 < i10 >>> 0)) if (!(i3 >>> 0 > i9 >>> 0 | (i3 | 0) == (i9 | 0) & i4 >>> 0 > i10 >>> 0)) if (i6 >>> 0 < i7 >>> 0 | (i6 | 0) == (i7 | 0) & i5 >>> 0 < i8 >>> 0) i3 = -1; else i3 = (i6 >>> 0 > i7 >>> 0 | (i6 | 0) == (i7 | 0) & i5 >>> 0 > i8 >>> 0) & 1; else i3 = 1; else i3 = -1;
 i14 = Math_imul(i3, i1) | 0;
 STACKTOP = i2;
 return i14 | 0;
}
function _emscripten_bind_btBoxShape_btBoxShape_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0, d15 = 0.0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(75) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAP32[i3 + 8 >> 2] = 0;
 i6 = i3 + 12 | 0;
 HEAPF32[i6 >> 2] = 1.0;
 i4 = i3 + 16 | 0;
 HEAPF32[i4 >> 2] = 1.0;
 i5 = i3 + 20 | 0;
 HEAPF32[i5 >> 2] = 1.0;
 HEAPF32[i3 + 24 >> 2] = 0.0;
 i7 = i3 + 44 | 0;
 HEAPF32[i7 >> 2] = .03999999910593033;
 HEAP32[i3 + 52 >> 2] = 0;
 HEAP32[i3 >> 2] = 5448;
 HEAP32[i3 + 4 >> 2] = 0;
 d9 = +HEAPF32[i1 >> 2];
 d10 = +HEAPF32[i1 + 4 >> 2];
 d8 = +HEAPF32[i1 + 8 >> 2];
 if (d9 < d10) i11 = d9 < d8 ? 0 : 2; else i11 = d10 < d8 ? 1 : 2;
 d8 = +HEAPF32[i1 + (i11 << 2) >> 2] * .10000000149011612;
 if (d8 < .03999999910593033) {
  d15 = +__ZNK21btConvexInternalShape9getMarginEv(i3);
  d13 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
  d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
  i14 = i3 + 28 | 0;
  d15 = d15 + +HEAPF32[i14 >> 2];
  i12 = i3 + 32 | 0;
  d13 = d13 + +HEAPF32[i12 >> 2];
  i11 = i3 + 36 | 0;
  d10 = d10 + +HEAPF32[i11 >> 2];
  HEAPF32[i7 >> 2] = d8;
  d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
  d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
  d10 = d10 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
  HEAPF32[i14 >> 2] = d15 - d8;
  HEAPF32[i12 >> 2] = d13 - d9;
  HEAPF32[i11 >> 2] = d10;
  HEAPF32[i3 + 40 >> 2] = 0.0;
  i7 = HEAP32[i3 >> 2] | 0;
 } else i7 = 5448 | 0;
 d10 = +FUNCTION_TABLE_di[HEAP32[i7 + 48 >> 2] & 15](i3);
 d13 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d15 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d13 = +HEAPF32[i1 + 4 >> 2] * +HEAPF32[i4 >> 2] - d13;
 d15 = +HEAPF32[i1 + 8 >> 2] * +HEAPF32[i5 >> 2] - d15;
 HEAPF32[i3 + 28 >> 2] = +HEAPF32[i1 >> 2] * +HEAPF32[i6 >> 2] - d10;
 HEAPF32[i3 + 32 >> 2] = d13;
 HEAPF32[i3 + 36 >> 2] = d15;
 HEAPF32[i3 + 40 >> 2] = 0.0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN22btBvhTriangleMeshShape15setLocalScalingERK9btVector3(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i2 = STACKTOP;
 i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0;
 d7 = +HEAPF32[i8 >> 2] - +HEAPF32[i4 >> 2];
 d6 = +HEAPF32[i8 + 4 >> 2] - +HEAPF32[i4 + 4 >> 2];
 d5 = +HEAPF32[i8 + 8 >> 2] - +HEAPF32[i4 + 8 >> 2];
 if (!(d7 * d7 + d6 * d6 + d5 * d5 > 1.1920928955078125e-7)) {
  STACKTOP = i2;
  return;
 }
 __ZN19btTriangleMeshShape15setLocalScalingERK9btVector3(i1, i4);
 if ((HEAP8[i1 + 61 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 52 >> 2] | 0, FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3), i3 = HEAP32[i1 + 52 >> 2] | 0, (i3 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(191) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAP32[i3 + 52 >> 2] = 282;
 HEAP8[i3 + 60 >> 0] = 0;
 HEAP8[i3 + 80 >> 0] = 1;
 HEAP32[i3 + 76 >> 2] = 0;
 HEAP32[i3 + 68 >> 2] = 0;
 HEAP32[i3 + 72 >> 2] = 0;
 HEAP8[i3 + 100 >> 0] = 1;
 HEAP32[i3 + 96 >> 2] = 0;
 HEAP32[i3 + 88 >> 2] = 0;
 HEAP32[i3 + 92 >> 2] = 0;
 HEAP8[i3 + 120 >> 0] = 1;
 HEAP32[i3 + 116 >> 2] = 0;
 HEAP32[i3 + 108 >> 2] = 0;
 HEAP32[i3 + 112 >> 2] = 0;
 HEAP8[i3 + 140 >> 0] = 1;
 HEAP32[i3 + 136 >> 2] = 0;
 HEAP32[i3 + 128 >> 2] = 0;
 HEAP32[i3 + 132 >> 2] = 0;
 HEAP32[i3 + 144 >> 2] = 0;
 HEAP8[i3 + 164 >> 0] = 1;
 HEAP32[i3 + 160 >> 2] = 0;
 HEAP32[i3 + 152 >> 2] = 0;
 HEAP32[i3 + 156 >> 2] = 0;
 HEAP32[i3 + 168 >> 2] = 0;
 HEAPF32[i3 + 4 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i3 + 8 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i3 + 12 >> 2] = -3.4028234663852886e+38;
 HEAPF32[i3 + 16 >> 2] = 0.0;
 HEAPF32[i3 + 20 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i3 + 24 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i3 + 28 >> 2] = 3.4028234663852886e+38;
 HEAPF32[i3 + 32 >> 2] = 0.0;
 HEAP32[i3 >> 2] = 14880;
 HEAP32[i1 + 52 >> 2] = i3;
 __ZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_(i3, HEAP32[i1 + 48 >> 2] | 0, (HEAP8[i1 + 60 >> 0] | 0) != 0, i1 + 16 | 0, i1 + 32 | 0);
 HEAP8[i1 + 61 >> 0] = 1;
 STACKTOP = i2;
 return;
}
function __ZNK15btCompoundShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, i30 = 0;
 i5 = STACKTOP;
 d17 = +HEAPF32[i4 + 48 >> 2];
 d19 = +HEAPF32[i4 + 32 >> 2];
 d28 = +HEAPF32[i4 + 52 >> 2];
 d20 = +HEAPF32[i4 + 36 >> 2];
 d29 = +HEAPF32[i4 + 56 >> 2];
 d8 = +HEAPF32[i4 + 40 >> 2];
 i30 = (HEAP32[i4 + 16 >> 2] | 0) == 0;
 d21 = i30 ? 0.0 : (d29 + d8) * .5;
 d23 = i30 ? 0.0 : (d28 + d20) * .5;
 d25 = i30 ? 0.0 : (d17 + d19) * .5;
 d12 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d12 = (i30 ? 0.0 : (d17 - d19) * .5) + d12;
 d10 = (i30 ? 0.0 : (d28 - d20) * .5) + d10;
 d8 = (i30 ? 0.0 : (d29 - d8) * .5) + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d29 = +HEAPF32[i3 >> 2];
 d20 = +Math_abs(+d29);
 d28 = +HEAPF32[i3 + 4 >> 2];
 d19 = +Math_abs(+d28);
 d17 = +HEAPF32[i3 + 8 >> 2];
 d18 = +Math_abs(+d17);
 d27 = +HEAPF32[i3 + 16 >> 2];
 d16 = +Math_abs(+d27);
 d26 = +HEAPF32[i3 + 20 >> 2];
 d15 = +Math_abs(+d26);
 d13 = +HEAPF32[i3 + 24 >> 2];
 d14 = +Math_abs(+d13);
 d24 = +HEAPF32[i3 + 32 >> 2];
 d11 = +Math_abs(+d24);
 d22 = +HEAPF32[i3 + 36 >> 2];
 d9 = +Math_abs(+d22);
 d6 = +HEAPF32[i3 + 40 >> 2];
 d7 = +Math_abs(+d6);
 d17 = d25 * d29 + d23 * d28 + d21 * d17 + +HEAPF32[i3 + 48 >> 2];
 d13 = d25 * d27 + d23 * d26 + d21 * d13 + +HEAPF32[i3 + 52 >> 2];
 d6 = d25 * d24 + d23 * d22 + d21 * d6 + +HEAPF32[i3 + 56 >> 2];
 HEAPF32[i2 >> 2] = d17 - (d12 * d20 + d10 * d19 + d8 * d18);
 HEAPF32[i2 + 4 >> 2] = d13 - (d12 * d16 + d10 * d15 + d8 * d14);
 HEAPF32[i2 + 8 >> 2] = d6 - (d12 * d11 + d10 * d9 + d8 * d7);
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d12 * d20 + d10 * d19 + d8 * d18 + d17;
 HEAPF32[i1 + 4 >> 2] = d12 * d16 + d10 * d15 + d8 * d14 + d13;
 HEAPF32[i1 + 8 >> 2] = d12 * d11 + d10 * d9 + d8 * d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(307) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 HEAPF32[i2 + 164 >> 2] = 1.0;
 HEAPF32[i2 + 168 >> 2] = 1.0;
 HEAPF32[i2 + 172 >> 2] = 1.0;
 HEAPF32[i2 + 176 >> 2] = 0.0;
 HEAP32[i2 + 180 >> 2] = 0;
 HEAPF32[i2 + 184 >> 2] = 999999984306749400.0;
 i5 = i2 + 188 | 0;
 i3 = i2 + 204 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i3 >> 2] = 1;
 HEAP32[i2 + 208 >> 2] = -1;
 HEAP32[i2 + 212 >> 2] = -1;
 HEAP32[i2 + 216 >> 2] = 1;
 HEAPF32[i2 + 220 >> 2] = 0.0;
 HEAPF32[i2 + 224 >> 2] = .5;
 HEAPF32[i2 + 228 >> 2] = 0.0;
 HEAPF32[i2 + 232 >> 2] = 0.0;
 i3 = i2 + 236 | 0;
 HEAP32[i2 + 240 >> 2] = 0;
 HEAPF32[i2 + 244 >> 2] = 1.0;
 i5 = i2 + 248 | 0;
 i4 = i2 + 4 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 24 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAPF32[i5 >> 2] = 1.0;
 i5 = i2 + 28 | 0;
 i4 = i2 + 44 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i2 + 48 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP8[i2 + 280 >> 0] = 1;
 HEAP32[i2 + 276 >> 2] = 0;
 HEAP32[i2 + 268 >> 2] = 0;
 HEAP32[i2 + 272 >> 2] = 0;
 HEAP32[i3 >> 2] = 4;
 HEAP32[i2 >> 2] = 13056;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(95) | 0;
 if ((i3 | 0) == 0) {
  i4 = 0;
  i5 = i2 + 284 | 0;
  HEAP32[i5 >> 2] = i4;
  STACKTOP = i1;
  return i2 | 0;
 }
 HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
 if ((i3 + 19 & -16 | 0) == 0) {
  i4 = 0;
  i5 = i2 + 284 | 0;
  HEAP32[i5 >> 2] = i4;
  STACKTOP = i1;
  return i2 | 0;
 }
 __ZN28btHashedOverlappingPairCacheC2Ev(i3 + 19 & -16);
 i4 = i3 + 19 & -16;
 i5 = i2 + 284 | 0;
 HEAP32[i5 >> 2] = i4;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK19btTriangleMeshShape24localGetSupportingVertexERK9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 HEAP32[i4 + 160 >> 2] = 0;
 HEAP32[i4 + 164 >> 2] = 0;
 HEAP32[i4 + 168 >> 2] = 0;
 HEAP32[i4 + 172 >> 2] = 0;
 HEAP32[i4 + 136 >> 2] = 0;
 HEAP32[i4 + 140 >> 2] = 0;
 HEAP32[i4 + 144 >> 2] = 0;
 HEAP32[i4 + 148 >> 2] = 0;
 HEAP32[i4 + 152 >> 2] = 0;
 HEAP32[i4 + 32 >> 2] = 17560;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 44 >> 2] = 0;
 HEAP32[i4 + 48 >> 2] = 0;
 HEAPF32[i4 + 52 >> 2] = 1.0;
 HEAP32[i4 + 56 >> 2] = HEAP32[i4 + 160 >> 2];
 HEAP32[i4 + 60 >> 2] = HEAP32[i4 + 164 >> 2];
 HEAP32[i4 + 64 >> 2] = HEAP32[i4 + 168 >> 2];
 HEAP32[i4 + 68 >> 2] = 0;
 HEAPF32[i4 + 72 >> 2] = 1.0;
 HEAP32[i4 + 76 >> 2] = 0;
 HEAP32[i4 + 80 >> 2] = 0;
 HEAP32[i4 + 84 >> 2] = 0;
 HEAP32[i4 + 88 >> 2] = 0;
 HEAPF32[i4 + 92 >> 2] = 1.0;
 HEAPF32[i4 + 96 >> 2] = 0.0;
 HEAP32[i4 + 100 >> 2] = HEAP32[i4 + 140 >> 2];
 HEAP32[i4 + 104 >> 2] = HEAP32[i4 + 144 >> 2];
 HEAP32[i4 + 108 >> 2] = HEAP32[i4 + 148 >> 2];
 HEAP32[i4 + 112 >> 2] = HEAP32[i4 + 152 >> 2];
 HEAPF32[i4 + 116 >> 2] = -999999984306749400.0;
 d9 = +HEAPF32[i3 >> 2];
 d8 = +HEAPF32[i3 + 4 >> 2];
 d7 = +HEAPF32[i3 + 8 >> 2];
 d6 = d9 * +HEAPF32[i4 + 56 >> 2] + d8 + d7 * 0.0;
 d5 = d9 * +HEAPF32[i4 + 60 >> 2] + d8 * 0.0 + d7;
 HEAPF32[i4 + 120 >> 2] = d9 + d8 * 0.0 + d7 * 0.0;
 HEAPF32[i4 + 124 >> 2] = d6;
 HEAPF32[i4 + 128 >> 2] = d5;
 HEAPF32[i4 + 132 >> 2] = 0.0;
 HEAPF32[i4 + 16 >> 2] = 999999984306749400.0;
 HEAPF32[i4 + 20 >> 2] = 999999984306749400.0;
 HEAPF32[i4 + 24 >> 2] = 999999984306749400.0;
 HEAPF32[i4 + 28 >> 2] = 0.0;
 i3 = HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] | 0;
 HEAPF32[i4 >> 2] = -999999984306749400.0;
 HEAPF32[i4 + 4 >> 2] = -999999984306749400.0;
 HEAPF32[i4 + 8 >> 2] = -999999984306749400.0;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[i3 & 127](i2, i4 + 32 | 0, i4, i4 + 16 | 0);
 HEAP32[i1 + 0 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 44 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 48 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN20btAlignedObjectArrayIP20btPersistentManifoldE17quickSortInternalI33btPersistentManifoldSortPredicateEEvRKT_ii(i1, i6, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 while (1) {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = HEAP32[i4 + (((i6 + i2 | 0) / 2 | 0) << 2) >> 2] | 0;
  i10 = i6;
  i9 = i2;
  while (1) {
   i7 = HEAP32[(HEAP32[i5 + 740 >> 2] | 0) + 208 >> 2] | 0;
   if ((i7 | 0) > -1) while (1) {
    i8 = HEAP32[i4 + (i10 << 2) >> 2] | 0;
    i11 = HEAP32[(HEAP32[i8 + 740 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i11 | 0) > -1)) i11 = HEAP32[(HEAP32[i8 + 744 >> 2] | 0) + 208 >> 2] | 0;
    if ((i11 | 0) < (i7 | 0)) i10 = i10 + 1 | 0; else break;
   } else {
    i11 = HEAP32[(HEAP32[i5 + 744 >> 2] | 0) + 208 >> 2] | 0;
    while (1) {
     i8 = HEAP32[i4 + (i10 << 2) >> 2] | 0;
     i12 = HEAP32[(HEAP32[i8 + 740 >> 2] | 0) + 208 >> 2] | 0;
     if (!((i12 | 0) > -1)) i12 = HEAP32[(HEAP32[i8 + 744 >> 2] | 0) + 208 >> 2] | 0;
     if ((i12 | 0) < (i11 | 0)) i10 = i10 + 1 | 0; else break;
    }
   }
   if ((i7 | 0) > -1) while (1) {
    i11 = HEAP32[i4 + (i9 << 2) >> 2] | 0;
    i12 = HEAP32[(HEAP32[i11 + 740 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i12 | 0) > -1)) i12 = HEAP32[(HEAP32[i11 + 744 >> 2] | 0) + 208 >> 2] | 0;
    if ((i7 | 0) < (i12 | 0)) i9 = i9 + -1 | 0; else break;
   } else {
    i7 = HEAP32[(HEAP32[i5 + 744 >> 2] | 0) + 208 >> 2] | 0;
    while (1) {
     i11 = HEAP32[i4 + (i9 << 2) >> 2] | 0;
     i12 = HEAP32[(HEAP32[i11 + 740 >> 2] | 0) + 208 >> 2] | 0;
     if (!((i12 | 0) > -1)) i12 = HEAP32[(HEAP32[i11 + 744 >> 2] | 0) + 208 >> 2] | 0;
     if ((i7 | 0) < (i12 | 0)) i9 = i9 + -1 | 0; else break;
    }
   }
   if ((i10 | 0) <= (i9 | 0)) {
    HEAP32[i4 + (i10 << 2) >> 2] = i11;
    HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i9 << 2) >> 2] = i8;
    i10 = i10 + 1 | 0;
    i9 = i9 + -1 | 0;
   }
   if ((i10 | 0) > (i9 | 0)) break;
   i4 = HEAP32[i1 + 12 >> 2] | 0;
  }
  if ((i9 | 0) > (i6 | 0)) __ZN20btAlignedObjectArrayIP20btPersistentManifoldE17quickSortInternalI33btPersistentManifoldSortPredicateEEvRKT_ii(i1, i6, i9);
  if ((i10 | 0) < (i2 | 0)) i6 = i10; else break;
 }
 STACKTOP = i3;
 return;
}
function __ZN20btAlignedObjectArrayIP17btTypedConstraintE17quickSortInternalI33btSortConstraintOnIslandPredicateEEvRKT_ii(i1, i6, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 while (1) {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = HEAP32[i4 + (((i6 + i2 | 0) / 2 | 0) << 2) >> 2] | 0;
  i10 = i6;
  i9 = i2;
  while (1) {
   i7 = HEAP32[(HEAP32[i5 + 28 >> 2] | 0) + 208 >> 2] | 0;
   if ((i7 | 0) > -1) while (1) {
    i8 = HEAP32[i4 + (i10 << 2) >> 2] | 0;
    i11 = HEAP32[(HEAP32[i8 + 28 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i11 | 0) > -1)) i11 = HEAP32[(HEAP32[i8 + 32 >> 2] | 0) + 208 >> 2] | 0;
    if ((i11 | 0) < (i7 | 0)) i10 = i10 + 1 | 0; else break;
   } else {
    i11 = HEAP32[(HEAP32[i5 + 32 >> 2] | 0) + 208 >> 2] | 0;
    while (1) {
     i8 = HEAP32[i4 + (i10 << 2) >> 2] | 0;
     i12 = HEAP32[(HEAP32[i8 + 28 >> 2] | 0) + 208 >> 2] | 0;
     if (!((i12 | 0) > -1)) i12 = HEAP32[(HEAP32[i8 + 32 >> 2] | 0) + 208 >> 2] | 0;
     if ((i12 | 0) < (i11 | 0)) i10 = i10 + 1 | 0; else break;
    }
   }
   if ((i7 | 0) > -1) while (1) {
    i11 = HEAP32[i4 + (i9 << 2) >> 2] | 0;
    i12 = HEAP32[(HEAP32[i11 + 28 >> 2] | 0) + 208 >> 2] | 0;
    if (!((i12 | 0) > -1)) i12 = HEAP32[(HEAP32[i11 + 32 >> 2] | 0) + 208 >> 2] | 0;
    if ((i7 | 0) < (i12 | 0)) i9 = i9 + -1 | 0; else break;
   } else {
    i7 = HEAP32[(HEAP32[i5 + 32 >> 2] | 0) + 208 >> 2] | 0;
    while (1) {
     i11 = HEAP32[i4 + (i9 << 2) >> 2] | 0;
     i12 = HEAP32[(HEAP32[i11 + 28 >> 2] | 0) + 208 >> 2] | 0;
     if (!((i12 | 0) > -1)) i12 = HEAP32[(HEAP32[i11 + 32 >> 2] | 0) + 208 >> 2] | 0;
     if ((i7 | 0) < (i12 | 0)) i9 = i9 + -1 | 0; else break;
    }
   }
   if ((i10 | 0) <= (i9 | 0)) {
    HEAP32[i4 + (i10 << 2) >> 2] = i11;
    HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i9 << 2) >> 2] = i8;
    i10 = i10 + 1 | 0;
    i9 = i9 + -1 | 0;
   }
   if ((i10 | 0) > (i9 | 0)) break;
   i4 = HEAP32[i1 + 12 >> 2] | 0;
  }
  if ((i9 | 0) > (i6 | 0)) __ZN20btAlignedObjectArrayIP17btTypedConstraintE17quickSortInternalI33btSortConstraintOnIslandPredicateEEvRKT_ii(i1, i6, i9);
  if ((i10 | 0) < (i2 | 0)) i6 = i10; else break;
 }
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld16removeConstraintEP17btTypedConstraint(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 i9 = HEAP32[i4 + 212 >> 2] | 0;
 L1 : do if ((i9 | 0) > 0) {
  i5 = HEAP32[i4 + 220 >> 2] | 0;
  i6 = 0;
  while (1) {
   i7 = i5 + (i6 << 2) | 0;
   i8 = i6 + 1 | 0;
   if ((HEAP32[i7 >> 2] | 0) == (i3 | 0)) break;
   if ((i8 | 0) < (i9 | 0)) i6 = i8; else break L1;
  }
  if ((i6 | 0) < (i9 | 0)) {
   HEAP32[i7 >> 2] = HEAP32[i5 + (i9 + -1 << 2) >> 2];
   HEAP32[(HEAP32[i4 + 220 >> 2] | 0) + (i9 + -1 << 2) >> 2] = i3;
   HEAP32[i4 + 212 >> 2] = i9 + -1;
  }
 } while (0);
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i6 = HEAP32[i4 + 488 >> 2] | 0;
 L9 : do if ((i6 | 0) > 0) {
  i5 = HEAP32[i4 + 496 >> 2] | 0;
  i7 = 0;
  while (1) {
   i8 = i5 + (i7 << 2) | 0;
   i9 = i7 + 1 | 0;
   if ((HEAP32[i8 >> 2] | 0) == (i3 | 0)) break;
   if ((i9 | 0) < (i6 | 0)) i7 = i9; else break L9;
  }
  if ((i7 | 0) < (i6 | 0)) {
   HEAP32[i8 >> 2] = HEAP32[i5 + (i6 + -1 << 2) >> 2];
   HEAP32[(HEAP32[i4 + 496 >> 2] | 0) + (i6 + -1 << 2) >> 2] = i3;
   HEAP32[i4 + 488 >> 2] = i6 + -1;
   i6 = i6 + -1 | 0;
  }
 } while (0);
 HEAP32[i4 + 256 >> 2] = (i6 | 0) > 0 & 1;
 i4 = HEAP32[i3 + 32 >> 2] | 0;
 i5 = HEAP32[i4 + 488 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  i8 = i5;
  i8 = (i8 | 0) > 0;
  i8 = i8 & 1;
  i9 = i4 + 256 | 0;
  HEAP32[i9 >> 2] = i8;
  STACKTOP = i1;
  return;
 }
 i7 = HEAP32[i4 + 496 >> 2] | 0;
 i8 = 0;
 while (1) {
  i9 = i7 + (i8 << 2) | 0;
  i6 = i8 + 1 | 0;
  if ((HEAP32[i9 >> 2] | 0) == (i3 | 0)) break;
  if ((i6 | 0) < (i5 | 0)) i8 = i6; else {
   i2 = 19;
   break;
  }
 }
 if ((i2 | 0) == 19) {
  i8 = (i5 | 0) > 0;
  i8 = i8 & 1;
  i9 = i4 + 256 | 0;
  HEAP32[i9 >> 2] = i8;
  STACKTOP = i1;
  return;
 }
 if ((i8 | 0) >= (i5 | 0)) {
  i8 = i5;
  i8 = (i8 | 0) > 0;
  i8 = i8 & 1;
  i9 = i4 + 256 | 0;
  HEAP32[i9 >> 2] = i8;
  STACKTOP = i1;
  return;
 }
 HEAP32[i9 >> 2] = HEAP32[i7 + (i5 + -1 << 2) >> 2];
 HEAP32[(HEAP32[i4 + 496 >> 2] | 0) + (i5 + -1 << 2) >> 2] = i3;
 HEAP32[i4 + 488 >> 2] = i5 + -1;
 i8 = i5 + -1 | 0;
 i8 = (i8 | 0) > 0;
 i8 = i8 & 1;
 i9 = i4 + 256 | 0;
 HEAP32[i9 >> 2] = i8;
 STACKTOP = i1;
 return;
}
function __ZNK21btConeTwistConstraint9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i2 + 300 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i2 + 304 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i2 + 308 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i2 + 312 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i2 + 316 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 + 320 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i2 + 324 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i2 + 328 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i2 + 332 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i2 + 336 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i2 + 340 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i2 + 344 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i2 + 348 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i2 + 352 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i2 + 356 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i2 + 360 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i2 + 364 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i2 + 368 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i2 + 372 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i2 + 376 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i2 + 380 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i2 + 384 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i2 + 388 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i2 + 392 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i2 + 396 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i2 + 400 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i2 + 404 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i2 + 408 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i2 + 412 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i2 + 416 >> 2];
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i2 + 420 >> 2];
 HEAPF32[i1 + 176 >> 2] = +HEAPF32[i2 + 424 >> 2];
 HEAPF32[i1 + 180 >> 2] = +HEAPF32[i2 + 444 >> 2];
 HEAPF32[i1 + 184 >> 2] = +HEAPF32[i2 + 448 >> 2];
 HEAPF32[i1 + 188 >> 2] = +HEAPF32[i2 + 452 >> 2];
 HEAPF32[i1 + 192 >> 2] = +HEAPF32[i2 + 428 >> 2];
 HEAPF32[i1 + 196 >> 2] = +HEAPF32[i2 + 432 >> 2];
 HEAPF32[i1 + 200 >> 2] = +HEAPF32[i2 + 436 >> 2];
 HEAPF32[i1 + 204 >> 2] = +HEAPF32[i2 + 440 >> 2];
 STACKTOP = i4;
 return 1352;
}
function __ZN18btSliderConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0;
 i3 = STACKTOP;
 if ((HEAP8[i2 + 48 >> 0] | 0) != 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 HEAP32[i1 >> 2] = 4;
 HEAP32[i1 + 4 >> 2] = 2;
 __ZN18btSliderConstraint19calculateTransformsERK11btTransformS2_(i2, (HEAP32[i2 + 28 >> 2] | 0) + 4 | 0, (HEAP32[i2 + 32 >> 2] | 0) + 4 | 0);
 HEAPF32[i2 + 1088 >> 2] = 0.0;
 HEAP8[i2 + 297 >> 0] = 0;
 d4 = +HEAPF32[i2 + 192 >> 2];
 d5 = +HEAPF32[i2 + 196 >> 2];
 do if (d4 <= d5) {
  d9 = +HEAPF32[i2 + 892 >> 2];
  d8 = +HEAPF32[i2 + 908 >> 2];
  d6 = +HEAPF32[i2 + 924 >> 2];
  d4 = +__Z21btAdjustAngleToLimitsfff(+Math_atan2(+(+HEAPF32[i2 + 832 >> 2] * d9 + +HEAPF32[i2 + 848 >> 2] * d8 + +HEAPF32[i2 + 864 >> 2] * d6), +(+HEAPF32[i2 + 828 >> 2] * d9 + +HEAPF32[i2 + 844 >> 2] * d8 + +HEAPF32[i2 + 860 >> 2] * d6)), d4, d5);
  HEAPF32[i2 + 1084 >> 2] = d4;
  d5 = +HEAPF32[i2 + 192 >> 2];
  if (d4 < d5) {
   HEAPF32[i2 + 1088 >> 2] = d4 - d5;
   HEAP8[i2 + 297 >> 0] = 1;
   break;
  }
  d5 = +HEAPF32[i2 + 196 >> 2];
  if (d4 > d5) {
   HEAPF32[i2 + 1088 >> 2] = d4 - d5;
   HEAP8[i2 + 297 >> 0] = 1;
  }
 } while (0);
 HEAP8[i2 + 296 >> 0] = 0;
 d5 = +HEAPF32[i2 + 1032 >> 2];
 HEAPF32[i2 + 1080 >> 2] = d5;
 d4 = +HEAPF32[i2 + 184 >> 2];
 d6 = +HEAPF32[i2 + 188 >> 2];
 do if (d4 <= d6) {
  if (d5 > d6) {
   HEAPF32[i2 + 1032 >> 2] = d5 - d6;
   HEAP8[i2 + 296 >> 0] = 1;
   i7 = 14;
   break;
  }
  if (d5 < d4) {
   HEAPF32[i2 + 1032 >> 2] = d5 - d4;
   HEAP8[i2 + 296 >> 0] = 1;
   i7 = 14;
  } else i7 = 13;
 } else i7 = 13; while (0);
 if ((i7 | 0) == 13 ? (HEAPF32[i2 + 1032 >> 2] = 0.0, (HEAP8[i2 + 1096 >> 0] | 0) != 0) : 0) i7 = 14;
 if ((i7 | 0) == 14) {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + -1;
 }
 if ((HEAP8[i2 + 297 >> 0] | 0) == 0 ? (HEAP8[i2 + 1112 >> 0] | 0) == 0 : 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + -1;
 STACKTOP = i3;
 return;
}
function __ZNK14btCapsuleShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i4, i14) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 var i2 = 0, d3 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 d3 = +HEAPF32[i14 >> 2];
 d5 = +HEAPF32[i14 + 4 >> 2];
 d6 = +HEAPF32[i14 + 8 >> 2];
 if (d3 * d3 + d5 * d5 + d6 * d6 < 9999999747378752.0e-20) {
  d3 = 1.0;
  d5 = 0.0;
  d6 = 0.0;
 } else {
  d13 = 1.0 / +Math_sqrt(+(d3 * d3 + d5 * d5 + d6 * d6));
  d3 = d3 * d13;
  d5 = d5 * d13;
  d6 = d6 * d13;
 }
 i14 = HEAP32[i4 + 52 >> 2] | 0;
 d9 = +HEAPF32[i4 + (((i14 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAPF32[i2 + 16 + (i14 << 2) >> 2] = +HEAPF32[i4 + (i14 << 2) + 28 >> 2];
 d8 = d3 * d9;
 d7 = d5 * d9;
 d9 = d6 * d9;
 d13 = d8 + +HEAPF32[i2 + 16 >> 2];
 d10 = d7 + +HEAPF32[i2 + 20 >> 2];
 d11 = d9 + +HEAPF32[i2 + 24 >> 2];
 d12 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d13 = d13 - d3 * d12;
 d10 = d10 - d5 * d12;
 d12 = d11 - d6 * d12;
 d11 = d6 * d12 + (d3 * d13 + d5 * d10);
 if (d11 > -999999984306749400.0) {
  HEAPF32[i1 >> 2] = d13;
  HEAPF32[i1 + 4 >> 2] = d10;
  HEAPF32[i1 + 8 >> 2] = d12;
  HEAPF32[i1 + 12 >> 2] = 0.0;
 } else d11 = -999999984306749400.0;
 HEAP32[i2 + 0 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 i14 = HEAP32[i4 + 52 >> 2] | 0;
 HEAPF32[i2 + (i14 << 2) >> 2] = -+HEAPF32[i4 + (i14 << 2) + 28 >> 2];
 d8 = d8 + +HEAPF32[i2 >> 2];
 d7 = d7 + +HEAPF32[i2 + 4 >> 2];
 d13 = d9 + +HEAPF32[i2 + 8 >> 2];
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d8 = d8 - d3 * d9;
 d7 = d7 - d5 * d9;
 d9 = d13 - d6 * d9;
 if (!(d6 * d9 + (d3 * d8 + d5 * d7) > d11)) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 >> 2] = d8;
 HEAPF32[i1 + 4 >> 2] = d7;
 HEAPF32[i1 + 8 >> 2] = d9;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZNK23btPolyhedralConvexShape37localGetSupportingVertexWithoutMarginERK9btVector3(i3, i1, i7) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, i15 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 d5 = +HEAPF32[i7 >> 2];
 d6 = +HEAPF32[i7 + 4 >> 2];
 d8 = +HEAPF32[i7 + 8 >> 2];
 if (d5 * d5 + d6 * d6 + d8 * d8 < 9999999747378752.0e-20) {
  d5 = 1.0;
  d6 = 0.0;
  d8 = 0.0;
 } else {
  d13 = 1.0 / +Math_sqrt(+(d5 * d5 + d6 * d6 + d8 * d8));
  d5 = d5 * d13;
  d6 = d6 * d13;
  d8 = d8 * d13;
 }
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 96 >> 2] & 127](i1) | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i7 = 0;
 d9 = -999999984306749400.0;
 do {
  if (((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 96 >> 2] & 127](i1) | 0) - i7 | 0) < 128) {
   i10 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 96 >> 2] & 127](i1) | 0) - i7 | 0;
   if ((i10 | 0) > 0) i4 = 7; else {
    d13 = -3.4028234663852886e+38;
    i12 = -1;
   }
  } else {
   i10 = 128;
   i4 = 7;
  }
  if ((i4 | 0) == 7) {
   i4 = 0;
   i11 = 0;
   do {
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 108 >> 2] & 127](i1, i11, i2 + (i11 << 4) | 0);
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
   i11 = 0;
   d13 = -3.4028234663852886e+38;
   i12 = -1;
   do {
    d14 = d5 * +HEAPF32[i2 + (i11 << 4) >> 2] + d6 * +HEAPF32[i2 + (i11 << 4) + 4 >> 2] + d8 * +HEAPF32[i2 + (i11 << 4) + 8 >> 2];
    i15 = d14 > d13;
    i12 = i15 ? i11 : i12;
    d13 = i15 ? d14 : d13;
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i10 | 0));
  }
  if (d13 > d9) {
   i15 = i2 + (i12 << 4) | 0;
   HEAP32[i3 + 0 >> 2] = HEAP32[i15 + 0 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
   d9 = d13;
  }
  i7 = i7 + 128 | 0;
 } while ((i7 | 0) < (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 96 >> 2] & 127](i1) | 0));
 STACKTOP = i2;
 return;
}
function __ZN43btKinematicClosestNotMeConvexResultCallback15addSingleResultERN16btCollisionWorld17LocalConvexResultEb(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i2 = STACKTOP;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i1 + 80 >> 2] | 0)) {
  d8 = 1.0;
  STACKTOP = i2;
  return +d8;
 }
 if ((HEAP32[i3 + 204 >> 2] & 4 | 0) != 0) {
  d8 = 1.0;
  STACKTOP = i2;
  return +d8;
 }
 if (i5) {
  d8 = +HEAPF32[i4 + 8 >> 2];
  d7 = +HEAPF32[i4 + 12 >> 2];
  d6 = +HEAPF32[i4 + 16 >> 2];
 } else {
  d10 = +HEAPF32[i4 + 8 >> 2];
  d9 = +HEAPF32[i4 + 12 >> 2];
  d6 = +HEAPF32[i4 + 16 >> 2];
  d8 = +HEAPF32[i3 + 4 >> 2] * d10 + +HEAPF32[i3 + 8 >> 2] * d9 + +HEAPF32[i3 + 12 >> 2] * d6;
  d7 = d10 * +HEAPF32[i3 + 20 >> 2] + d9 * +HEAPF32[i3 + 24 >> 2] + d6 * +HEAPF32[i3 + 28 >> 2];
  d6 = d10 * +HEAPF32[i3 + 36 >> 2] + d9 * +HEAPF32[i3 + 40 >> 2] + d6 * +HEAPF32[i3 + 44 >> 2];
 }
 if (d8 * +HEAPF32[i1 + 84 >> 2] + d7 * +HEAPF32[i1 + 88 >> 2] + d6 * +HEAPF32[i1 + 92 >> 2] < +HEAPF32[i1 + 100 >> 2]) {
  d10 = 1.0;
  STACKTOP = i2;
  return +d10;
 }
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[i4 + 40 >> 2];
 HEAP32[i1 + 76 >> 2] = i3;
 if (i5) {
  HEAP32[i1 + 44 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i1 + 48 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i1 + 52 >> 2] = HEAP32[i4 + 16 >> 2];
  HEAP32[i1 + 56 >> 2] = HEAP32[i4 + 20 >> 2];
 } else {
  d6 = +HEAPF32[i4 + 8 >> 2];
  d7 = +HEAPF32[i4 + 12 >> 2];
  d8 = +HEAPF32[i4 + 16 >> 2];
  d9 = d6 * +HEAPF32[i3 + 20 >> 2] + d7 * +HEAPF32[i3 + 24 >> 2] + d8 * +HEAPF32[i3 + 28 >> 2];
  d10 = d6 * +HEAPF32[i3 + 36 >> 2] + d7 * +HEAPF32[i3 + 40 >> 2] + d8 * +HEAPF32[i3 + 44 >> 2];
  HEAPF32[i1 + 44 >> 2] = +HEAPF32[i3 + 4 >> 2] * d6 + +HEAPF32[i3 + 8 >> 2] * d7 + +HEAPF32[i3 + 12 >> 2] * d8;
  HEAPF32[i1 + 48 >> 2] = d9;
  HEAPF32[i1 + 52 >> 2] = d10;
  HEAPF32[i1 + 56 >> 2] = 0.0;
 }
 HEAP32[i1 + 60 >> 2] = HEAP32[i4 + 24 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i4 + 28 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i4 + 36 >> 2];
 d10 = +HEAPF32[i4 + 40 >> 2];
 STACKTOP = i2;
 return +d10;
}
function __ZNK18btSliderConstraint9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i2 + 52 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i2 + 56 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i2 + 60 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i2 + 64 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i2 + 68 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 + 72 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i2 + 76 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i2 + 80 >> 2];
 HEAPF32[i1 + 84 >> 2] = +HEAPF32[i2 + 84 >> 2];
 HEAPF32[i1 + 88 >> 2] = +HEAPF32[i2 + 88 >> 2];
 HEAPF32[i1 + 92 >> 2] = +HEAPF32[i2 + 92 >> 2];
 HEAPF32[i1 + 96 >> 2] = +HEAPF32[i2 + 96 >> 2];
 HEAPF32[i1 + 100 >> 2] = +HEAPF32[i2 + 100 >> 2];
 HEAPF32[i1 + 104 >> 2] = +HEAPF32[i2 + 104 >> 2];
 HEAPF32[i1 + 108 >> 2] = +HEAPF32[i2 + 108 >> 2];
 HEAPF32[i1 + 112 >> 2] = +HEAPF32[i2 + 112 >> 2];
 HEAPF32[i1 + 116 >> 2] = +HEAPF32[i2 + 116 >> 2];
 HEAPF32[i1 + 120 >> 2] = +HEAPF32[i2 + 120 >> 2];
 HEAPF32[i1 + 124 >> 2] = +HEAPF32[i2 + 124 >> 2];
 HEAPF32[i1 + 128 >> 2] = +HEAPF32[i2 + 128 >> 2];
 HEAPF32[i1 + 132 >> 2] = +HEAPF32[i2 + 132 >> 2];
 HEAPF32[i1 + 136 >> 2] = +HEAPF32[i2 + 136 >> 2];
 HEAPF32[i1 + 140 >> 2] = +HEAPF32[i2 + 140 >> 2];
 HEAPF32[i1 + 144 >> 2] = +HEAPF32[i2 + 144 >> 2];
 HEAPF32[i1 + 148 >> 2] = +HEAPF32[i2 + 148 >> 2];
 HEAPF32[i1 + 152 >> 2] = +HEAPF32[i2 + 152 >> 2];
 HEAPF32[i1 + 156 >> 2] = +HEAPF32[i2 + 156 >> 2];
 HEAPF32[i1 + 160 >> 2] = +HEAPF32[i2 + 160 >> 2];
 HEAPF32[i1 + 164 >> 2] = +HEAPF32[i2 + 164 >> 2];
 HEAPF32[i1 + 168 >> 2] = +HEAPF32[i2 + 168 >> 2];
 HEAPF32[i1 + 172 >> 2] = +HEAPF32[i2 + 172 >> 2];
 HEAPF32[i1 + 176 >> 2] = +HEAPF32[i2 + 176 >> 2];
 HEAPF32[i1 + 180 >> 2] = +HEAPF32[i2 + 188 >> 2];
 HEAPF32[i1 + 184 >> 2] = +HEAPF32[i2 + 184 >> 2];
 HEAPF32[i1 + 188 >> 2] = +HEAPF32[i2 + 196 >> 2];
 HEAPF32[i1 + 192 >> 2] = +HEAPF32[i2 + 192 >> 2];
 HEAP32[i1 + 196 >> 2] = HEAPU8[i2 + 180 >> 0];
 HEAP32[i1 + 200 >> 2] = HEAPU8[i2 + 49 >> 0];
 STACKTOP = i4;
 return 4352;
}
function __ZN23btGeneric6DofConstraint19buildLinearJacobianER15btJacobianEntryRK9btVector3S4_S4_(i1, i9, i10, d5, d3, d4, d8, d6, d7) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 d5 = +d5;
 d3 = +d3;
 d4 = +d4;
 d8 = +d8;
 d6 = +d6;
 d7 = +d7;
 var i2 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((i9 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i11 = HEAP32[i1 + 28 >> 2] | 0;
 HEAPF32[i2 + 80 >> 2] = +HEAPF32[i11 + 4 >> 2];
 HEAPF32[i2 + 84 >> 2] = +HEAPF32[i11 + 20 >> 2];
 HEAPF32[i2 + 88 >> 2] = +HEAPF32[i11 + 36 >> 2];
 HEAPF32[i2 + 92 >> 2] = 0.0;
 HEAPF32[i2 + 96 >> 2] = +HEAPF32[i11 + 8 >> 2];
 HEAPF32[i2 + 100 >> 2] = +HEAPF32[i11 + 24 >> 2];
 HEAPF32[i2 + 104 >> 2] = +HEAPF32[i11 + 40 >> 2];
 HEAPF32[i2 + 108 >> 2] = 0.0;
 HEAPF32[i2 + 112 >> 2] = +HEAPF32[i11 + 12 >> 2];
 HEAPF32[i2 + 116 >> 2] = +HEAPF32[i11 + 28 >> 2];
 HEAPF32[i2 + 120 >> 2] = +HEAPF32[i11 + 44 >> 2];
 HEAPF32[i2 + 124 >> 2] = 0.0;
 i1 = HEAP32[i1 + 32 >> 2] | 0;
 HEAPF32[i2 + 32 >> 2] = +HEAPF32[i1 + 4 >> 2];
 HEAPF32[i2 + 36 >> 2] = +HEAPF32[i1 + 20 >> 2];
 HEAPF32[i2 + 40 >> 2] = +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i2 + 44 >> 2] = 0.0;
 HEAPF32[i2 + 48 >> 2] = +HEAPF32[i1 + 8 >> 2];
 HEAPF32[i2 + 52 >> 2] = +HEAPF32[i1 + 24 >> 2];
 HEAPF32[i2 + 56 >> 2] = +HEAPF32[i1 + 40 >> 2];
 HEAPF32[i2 + 60 >> 2] = 0.0;
 HEAPF32[i2 + 64 >> 2] = +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i2 + 68 >> 2] = +HEAPF32[i1 + 28 >> 2];
 HEAPF32[i2 + 72 >> 2] = +HEAPF32[i1 + 44 >> 2];
 HEAPF32[i2 + 76 >> 2] = 0.0;
 d3 = d3 - +HEAPF32[i11 + 56 >> 2];
 d4 = d4 - +HEAPF32[i11 + 60 >> 2];
 HEAPF32[i2 + 16 >> 2] = d5 - +HEAPF32[i11 + 52 >> 2];
 HEAPF32[i2 + 20 >> 2] = d3;
 HEAPF32[i2 + 24 >> 2] = d4;
 HEAPF32[i2 + 28 >> 2] = 0.0;
 d6 = d6 - +HEAPF32[i1 + 56 >> 2];
 d7 = d7 - +HEAPF32[i1 + 60 >> 2];
 HEAPF32[i2 >> 2] = d8 - +HEAPF32[i1 + 52 >> 2];
 HEAPF32[i2 + 4 >> 2] = d6;
 HEAPF32[i2 + 8 >> 2] = d7;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 __ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(i9, i2 + 80 | 0, i2 + 32 | 0, i2 + 16 | 0, i2, i10, i11 + 396 | 0, +HEAPF32[i11 + 344 >> 2], i1 + 396 | 0, +HEAPF32[i1 + 344 >> 2]);
 STACKTOP = i2;
 return;
}
function __ZN23btHashedSimplePairCache14removeAllPairsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 16 >> 2] = 0;
 }
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i3 = HEAP32[i1 + 40 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 44 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 40 >> 2] = 0;
 }
 HEAP8[i1 + 44 >> 0] = 1;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 64 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 60 >> 2] = 0;
 }
 HEAP8[i1 + 64 >> 0] = 1;
 HEAP32[i1 + 60 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 if ((HEAP32[i1 + 12 >> 2] | 0) >= 2) {
  __ZN23btHashedSimplePairCache10growTablesEv(i1);
  STACKTOP = i2;
  return;
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(43) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i6 = 0;
  do {
   i5 = i3 + (i6 * 12 | 0) | 0;
   if ((i5 | 0) != 0) {
    i7 = (HEAP32[i1 + 16 >> 2] | 0) + (i6 * 12 | 0) | 0;
    HEAP32[i5 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
    HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i4 | 0));
 }
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i4 | 0) != 0) {
  if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 16 >> 2] = 0;
 }
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 12 >> 2] = 2;
 __ZN23btHashedSimplePairCache10growTablesEv(i1);
 STACKTOP = i2;
 return;
}
function __ZNK34btPolyhedralConvexAabbCachingShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0;
 i5 = STACKTOP;
 d14 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d20 = +HEAPF32[i4 + 72 >> 2];
 d19 = +HEAPF32[i4 + 56 >> 2];
 d17 = +HEAPF32[i4 + 76 >> 2];
 d16 = +HEAPF32[i4 + 60 >> 2];
 d13 = +HEAPF32[i4 + 80 >> 2];
 d12 = +HEAPF32[i4 + 64 >> 2];
 d30 = +HEAPF32[i3 >> 2];
 d24 = +Math_abs(+d30);
 d29 = +HEAPF32[i3 + 4 >> 2];
 d23 = +Math_abs(+d29);
 d10 = +HEAPF32[i3 + 8 >> 2];
 d11 = +Math_abs(+d10);
 d28 = +HEAPF32[i3 + 16 >> 2];
 d22 = +Math_abs(+d28);
 d27 = +HEAPF32[i3 + 20 >> 2];
 d21 = +Math_abs(+d27);
 d8 = +HEAPF32[i3 + 24 >> 2];
 d9 = +Math_abs(+d8);
 d26 = +HEAPF32[i3 + 32 >> 2];
 d18 = +Math_abs(+d26);
 d25 = +HEAPF32[i3 + 36 >> 2];
 d15 = +Math_abs(+d25);
 d6 = +HEAPF32[i3 + 40 >> 2];
 d7 = +Math_abs(+d6);
 d10 = (d20 + d19) * .5 * d30 + (d17 + d16) * .5 * d29 + (d13 + d12) * .5 * d10 + +HEAPF32[i3 + 48 >> 2];
 d8 = (d20 + d19) * .5 * d28 + (d17 + d16) * .5 * d27 + (d13 + d12) * .5 * d8 + +HEAPF32[i3 + 52 >> 2];
 d6 = (d20 + d19) * .5 * d26 + (d17 + d16) * .5 * d25 + (d13 + d12) * .5 * d6 + +HEAPF32[i3 + 56 >> 2];
 d11 = (d14 + (d20 - d19) * .5) * d24 + (d14 + (d17 - d16) * .5) * d23 + (d14 + (d13 - d12) * .5) * d11;
 d9 = (d14 + (d20 - d19) * .5) * d22 + (d14 + (d17 - d16) * .5) * d21 + (d14 + (d13 - d12) * .5) * d9;
 d7 = (d14 + (d20 - d19) * .5) * d18 + (d14 + (d17 - d16) * .5) * d15 + (d14 + (d13 - d12) * .5) * d7;
 HEAPF32[i2 >> 2] = d10 - d11;
 HEAPF32[i2 + 4 >> 2] = d8 - d9;
 HEAPF32[i2 + 8 >> 2] = d6 - d7;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d11 + d10;
 HEAPF32[i1 + 4 >> 2] = d9 + d8;
 HEAPF32[i1 + 8 >> 2] = d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver45solveGroupCacheFriendlySplitImpulseIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw(i1, i8, i3, i9, i4, i5, i6, i2, i7) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i3 = STACKTOP;
 if ((HEAP32[i2 + 44 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i2 + 20 >> 2] | 0;
 if ((HEAP32[i2 + 64 >> 2] & 256 | 0) == 0) {
  if ((i6 | 0) <= 0) {
   STACKTOP = i3;
   return;
  }
  i4 = 1;
  while (1) {
   i5 = HEAP32[i1 + 28 >> 2] | 0;
   if ((i5 | 0) > 0) {
    i6 = 0;
    do {
     i9 = HEAP32[(HEAP32[i1 + 116 >> 2] | 0) + (i6 << 2) >> 2] | 0;
     i8 = HEAP32[i1 + 36 >> 2] | 0;
     i7 = HEAP32[i1 + 16 >> 2] | 0;
     __ZN35btSequentialImpulseConstraintSolver43resolveSplitPenetrationImpulseCacheFriendlyER12btSolverBodyS1_RK18btSolverConstraint(i7 + ((HEAP32[i8 + (i9 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i7 + ((HEAP32[i8 + (i9 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i8 + (i9 * 152 | 0) | 0);
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i5 | 0));
    i6 = HEAP32[i2 + 20 >> 2] | 0;
   }
   if ((i4 | 0) >= (i6 | 0)) break;
   i4 = i4 + 1 | 0;
  }
  STACKTOP = i3;
  return;
 } else {
  if ((i6 | 0) <= 0) {
   STACKTOP = i3;
   return;
  }
  i4 = 1;
  while (1) {
   i5 = HEAP32[i1 + 28 >> 2] | 0;
   if ((i5 | 0) > 0) {
    i6 = 0;
    do {
     i9 = HEAP32[(HEAP32[i1 + 116 >> 2] | 0) + (i6 << 2) >> 2] | 0;
     i8 = HEAP32[i1 + 36 >> 2] | 0;
     i7 = HEAP32[i1 + 16 >> 2] | 0;
     __ZN35btSequentialImpulseConstraintSolver43resolveSplitPenetrationImpulseCacheFriendlyER12btSolverBodyS1_RK18btSolverConstraint(i7 + ((HEAP32[i8 + (i9 * 152 | 0) + 144 >> 2] | 0) * 244 | 0) | 0, i7 + ((HEAP32[i8 + (i9 * 152 | 0) + 148 >> 2] | 0) * 244 | 0) | 0, i8 + (i9 * 152 | 0) | 0);
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i5 | 0));
    i6 = HEAP32[i2 + 20 >> 2] | 0;
   }
   if ((i4 | 0) >= (i6 | 0)) break;
   i4 = i4 + 1 | 0;
  }
  STACKTOP = i3;
  return;
 }
}
function __ZN14btTriangleMesh19preallocateVerticesEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 if ((HEAP8[i1 + 165 >> 0] | 0) != 0) {
  if ((HEAP32[i1 + 92 >> 2] | 0) >= (i2 | 0)) {
   STACKTOP = i3;
   return;
  }
  if ((i2 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i5 = _malloc((i2 << 4 | 3) + 16 | 0) | 0, (i5 | 0) != 0) : 0) {
   HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
   i4 = i5 + 19 & -16;
  } else i4 = 0;
  i5 = HEAP32[i1 + 88 >> 2] | 0;
  if ((i5 | 0) > 0) {
   i6 = 0;
   do {
    i7 = i4 + (i6 << 4) | 0;
    i8 = (HEAP32[i1 + 96 >> 2] | 0) + (i6 << 4) | 0;
    HEAP32[i7 + 0 >> 2] = HEAP32[i8 + 0 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i5 | 0));
  }
  i5 = HEAP32[i1 + 96 >> 2] | 0;
  if ((i5 | 0) != 0) {
   if ((HEAP8[i1 + 100 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i5 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 96 >> 2] = 0;
  }
  HEAP8[i1 + 100 >> 0] = 1;
  HEAP32[i1 + 96 >> 2] = i4;
  HEAP32[i1 + 92 >> 2] = i2;
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i1 + 112 >> 2] | 0) >= (i2 | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((i2 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i4 = _malloc((i2 << 2 | 3) + 16 | 0) | 0, (i4 | 0) != 0) : 0) {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 } else i4 = 0;
 i5 = HEAP32[i1 + 108 >> 2] | 0;
 if ((i5 | 0) > 0) {
  i7 = 0;
  do {
   i6 = i4 + (i7 << 2) | 0;
   if ((i6 | 0) != 0) HEAPF32[i6 >> 2] = +HEAPF32[(HEAP32[i1 + 116 >> 2] | 0) + (i7 << 2) >> 2];
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i5 | 0));
 }
 i5 = HEAP32[i1 + 116 >> 2] | 0;
 if ((i5 | 0) != 0) {
  if ((HEAP8[i1 + 120 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i5 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 116 >> 2] = 0;
 }
 HEAP8[i1 + 120 >> 0] = 1;
 HEAP32[i1 + 116 >> 2] = i4;
 HEAP32[i1 + 112 >> 2] = i2;
 STACKTOP = i3;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i1, i4, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i4 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 28) | 0;
 if ((HEAP8[i1 + 4 >> 0] | 0) == 0) {
  if ((i3 | 0) == 0) {
   i6 = 0;
   STACKTOP = i2;
   return i6 | 0;
  }
  i7 = HEAP32[i1 + 8 >> 2] | 0;
  i1 = HEAP32[i1 + 12 >> 2] | 0;
  i4 = HEAP32[i4 >> 2] | 0;
  HEAP32[i3 + 4 >> 2] = i4;
  HEAP32[i3 >> 2] = 19408;
  HEAP8[i3 + 8 >> 0] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP8[i3 + 16 >> 0] = 0;
  HEAP32[i3 + 20 >> 2] = i7;
  HEAP32[i3 + 24 >> 2] = i1;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 31](i4, HEAP32[i5 + 8 >> 2] | 0, HEAP32[i6 + 8 >> 2] | 0) | 0)) {
   i7 = i3;
   STACKTOP = i2;
   return i7 | 0;
  }
  i7 = HEAP32[i3 + 4 >> 2] | 0;
  i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 31](i7, HEAP32[i5 + 8 >> 2] | 0, HEAP32[i6 + 8 >> 2] | 0) | 0;
  HEAP32[i3 + 12 >> 2] = i7;
  HEAP8[i3 + 8 >> 0] = 1;
  i7 = i3;
  STACKTOP = i2;
  return i7 | 0;
 } else {
  if ((i3 | 0) == 0) {
   i7 = 0;
   STACKTOP = i2;
   return i7 | 0;
  }
  i8 = HEAP32[i1 + 8 >> 2] | 0;
  i1 = HEAP32[i1 + 12 >> 2] | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  HEAP32[i3 + 4 >> 2] = i7;
  HEAP32[i3 >> 2] = 19408;
  HEAP8[i3 + 8 >> 0] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP8[i3 + 16 >> 0] = 1;
  HEAP32[i3 + 20 >> 2] = i8;
  HEAP32[i3 + 24 >> 2] = i1;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] & 31](i7, HEAP32[i6 + 8 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0) | 0)) {
   i8 = i3;
   STACKTOP = i2;
   return i8 | 0;
  }
  i8 = HEAP32[i3 + 4 >> 2] | 0;
  i8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, HEAP32[i6 + 8 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0) | 0;
  HEAP32[i3 + 12 >> 2] = i8;
  HEAP8[i3 + 8 >> 0] = 1;
  i8 = i3;
  STACKTOP = i2;
  return i8 | 0;
 }
 return 0;
}
function __ZNK15btTriangleShape8isInsideERK9btVector3f(i2, i6, d7) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 d7 = +d7;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 d11 = +HEAPF32[i2 + 56 >> 2];
 d15 = +HEAPF32[i2 + 72 >> 2] - d11;
 d10 = +HEAPF32[i2 + 60 >> 2];
 d13 = +HEAPF32[i2 + 76 >> 2] - d10;
 d9 = +HEAPF32[i2 + 64 >> 2];
 d16 = +HEAPF32[i2 + 80 >> 2] - d9;
 d12 = +HEAPF32[i2 + 88 >> 2] - d11;
 d14 = +HEAPF32[i2 + 92 >> 2] - d10;
 d3 = +HEAPF32[i2 + 96 >> 2] - d9;
 d5 = 1.0 / +Math_sqrt(+((d15 * d14 - d13 * d12) * (d15 * d14 - d13 * d12) + ((d13 * d3 - d16 * d14) * (d13 * d3 - d16 * d14) + (d16 * d12 - d15 * d3) * (d16 * d12 - d15 * d3))));
 d4 = d5 * (d13 * d3 - d16 * d14);
 d3 = d5 * (d16 * d12 - d15 * d3);
 d5 = (d15 * d14 - d13 * d12) * d5;
 d9 = +HEAPF32[i6 >> 2] * d4 + +HEAPF32[i6 + 4 >> 2] * d3 + d5 * +HEAPF32[i6 + 8 >> 2] - (d4 * d11 + d3 * d10 + d5 * d9);
 if (!(d9 >= -d7) | !(d9 <= d7)) {
  i8 = 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 i8 = 0;
 while (1) {
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 104 >> 2] & 127](i2, i8, i1 + 16 | 0, i1);
  d11 = +HEAPF32[i1 + 16 >> 2];
  d16 = +HEAPF32[i1 >> 2] - d11;
  d13 = +HEAPF32[i1 + 20 >> 2];
  d12 = +HEAPF32[i1 + 4 >> 2] - d13;
  d10 = +HEAPF32[i1 + 24 >> 2];
  d15 = +HEAPF32[i1 + 8 >> 2] - d10;
  d14 = 1.0 / +Math_sqrt(+((d3 * d16 - d4 * d12) * (d3 * d16 - d4 * d12) + ((d5 * d12 - d3 * d15) * (d5 * d12 - d3 * d15) + (d4 * d15 - d5 * d16) * (d4 * d15 - d5 * d16))));
  i8 = i8 + 1 | 0;
  if (+HEAPF32[i6 >> 2] * d14 * (d5 * d12 - d3 * d15) + +HEAPF32[i6 + 4 >> 2] * d14 * (d4 * d15 - d5 * d16) + (d3 * d16 - d4 * d12) * d14 * +HEAPF32[i6 + 8 >> 2] - (d10 * (d3 * d16 - d4 * d12) * d14 + (d11 * d14 * (d5 * d12 - d3 * d15) + d13 * d14 * (d4 * d15 - d5 * d16))) < -d7) {
   i6 = 0;
   i2 = 5;
   break;
  }
  if ((i8 | 0) >= 3) {
   i6 = 1;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) {
  STACKTOP = i1;
  return i6 | 0;
 }
 return 0;
}
function __ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii(i2, i8, i9) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 3](i4, i7 + 28 | 0, i7 + 24 | 0, i7 + 20 | 0, i7 + 16 | 0, i7 + 12 | 0, i7 + 8 | 0, i7 + 4 | 0, i7, i8);
 i4 = HEAP32[i7 + 12 >> 2] | 0;
 i5 = Math_imul(HEAP32[i7 + 8 >> 2] | 0, i9) | 0;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i1 = 2;
 while (1) {
  if ((i6 | 0) == 3) i11 = HEAPU16[i4 + i5 + (i1 << 1) >> 1] | 0; else if ((i6 | 0) == 2) i11 = HEAP32[i4 + i5 + (i1 << 2) >> 2] | 0; else i11 = HEAPU8[i4 + (i1 + i5) >> 0] | 0;
  i10 = HEAP32[i7 + 28 >> 2] | 0;
  i11 = Math_imul(HEAP32[i7 + 16 >> 2] | 0, i11) | 0;
  if ((HEAP32[i7 + 20 >> 2] | 0) == 0) {
   d13 = +HEAPF32[i10 + (i11 + 4) >> 2] * +HEAPF32[i3 + 8 >> 2];
   d12 = +HEAPF32[i10 + (i11 + 8) >> 2] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i2 + (i1 << 4) + 12 >> 2] = +HEAPF32[i10 + i11 >> 2] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i2 + (i1 << 4) + 16 >> 2] = d13;
   HEAPF32[i2 + (i1 << 4) + 20 >> 2] = d12;
   HEAPF32[i2 + (i1 << 4) + 24 >> 2] = 0.0;
  } else {
   d12 = +HEAPF64[i10 + (i11 + 8) >> 3] * +HEAPF32[i3 + 8 >> 2];
   d13 = +HEAPF64[i10 + (i11 + 16) >> 3] * +HEAPF32[i3 + 12 >> 2];
   HEAPF32[i2 + (i1 << 4) + 12 >> 2] = +HEAPF64[i10 + i11 >> 3] * +HEAPF32[i3 + 4 >> 2];
   HEAPF32[i2 + (i1 << 4) + 16 >> 2] = d12;
   HEAPF32[i2 + (i1 << 4) + 20 >> 2] = d13;
   HEAPF32[i2 + (i1 << 4) + 24 >> 2] = 0.0;
  }
  if ((i1 | 0) > 0) i1 = i1 + -1 | 0; else break;
 }
 i11 = HEAP32[i2 + 8 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 127](i11, i2 + 12 | 0, i8, i9);
 i11 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] & 127](i11, i8);
 STACKTOP = i7;
 return;
}
function __ZN16btDbvtBroadphase9resetPoolEP12btDispatcher(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 16 >> 2] | 0) != (0 - (HEAP32[i1 + 76 >> 2] | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i3 | 0) != 0) __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1 + 4 | 0, i3);
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = -1;
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 40 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 36 >> 2] = 0;
 }
 HEAP8[i1 + 40 >> 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 i3 = HEAP32[i1 + 64 >> 2] | 0;
 if ((i3 | 0) != 0) __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1 + 64 | 0, i3);
 i3 = HEAP32[i1 + 68 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = -1;
 i3 = HEAP32[i1 + 96 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 100 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 96 >> 2] = 0;
 }
 HEAP8[i1 + 100 >> 0] = 1;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP32[i1 + 80 >> 2] = 0;
 HEAP8[i1 + 193 >> 0] = 0;
 HEAP8[i1 + 194 >> 0] = 1;
 HEAP32[i1 + 144 >> 2] = 0;
 HEAP32[i1 + 164 >> 2] = 0;
 HEAP32[i1 + 148 >> 2] = 1;
 HEAP32[i1 + 152 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 10;
 HEAP32[i1 + 160 >> 2] = 1;
 HEAP32[i1 + 124 >> 2] = 0;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 HEAP32[i1 + 168 >> 2] = 0;
 HEAP32[i1 + 172 >> 2] = 0;
 HEAP32[i1 + 176 >> 2] = 0;
 HEAP32[i1 + 180 >> 2] = 0;
 HEAP32[i1 + 184 >> 2] = 0;
 HEAP32[i1 + 188 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK14btCapsuleShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i21 = HEAP32[i4 + 52 >> 2] | 0;
 d8 = +HEAPF32[i4 + (((i21 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 HEAPF32[i5 >> 2] = d8;
 HEAPF32[i5 + 4 >> 2] = d8;
 HEAPF32[i5 + 8 >> 2] = d8;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 HEAPF32[i5 + (i21 << 2) >> 2] = d8 + +HEAPF32[i4 + (i21 << 2) + 28 >> 2];
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d11 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d8 = d8 + +HEAPF32[i5 >> 2];
 HEAPF32[i5 >> 2] = d8;
 d6 = d6 + +HEAPF32[i5 + 4 >> 2];
 HEAPF32[i5 + 4 >> 2] = d6;
 d11 = d11 + +HEAPF32[i5 + 8 >> 2];
 d18 = +Math_abs(+(+HEAPF32[i3 >> 2]));
 d17 = +Math_abs(+(+HEAPF32[i3 + 4 >> 2]));
 d19 = +Math_abs(+(+HEAPF32[i3 + 8 >> 2]));
 d14 = +Math_abs(+(+HEAPF32[i3 + 16 >> 2]));
 d13 = +Math_abs(+(+HEAPF32[i3 + 20 >> 2]));
 d15 = +Math_abs(+(+HEAPF32[i3 + 24 >> 2]));
 d9 = +Math_abs(+(+HEAPF32[i3 + 32 >> 2]));
 d7 = +Math_abs(+(+HEAPF32[i3 + 36 >> 2]));
 d10 = +Math_abs(+(+HEAPF32[i3 + 40 >> 2]));
 d20 = +HEAPF32[i3 + 48 >> 2];
 d16 = +HEAPF32[i3 + 52 >> 2];
 d12 = +HEAPF32[i3 + 56 >> 2];
 HEAPF32[i2 >> 2] = d20 - (d11 * d19 + (d18 * d8 + d17 * d6));
 HEAPF32[i2 + 4 >> 2] = d16 - (d11 * d15 + (d14 * d8 + d13 * d6));
 HEAPF32[i2 + 8 >> 2] = d12 - (d11 * d10 + (d9 * d8 + d7 * d6));
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d20 + (d11 * d19 + (d18 * d8 + d17 * d6));
 HEAPF32[i1 + 4 >> 2] = d16 + (d11 * d15 + (d14 * d8 + d13 * d6));
 HEAPF32[i1 + 8 >> 2] = d12 + (d11 * d10 + (d9 * d8 + d7 * d6));
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii(i2, i9, i10) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, d12 = 0.0, d13 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_viiiiiiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 3](i6, i7 + 28 | 0, i7 + 24 | 0, i7 + 20 | 0, i7 + 16 | 0, i7 + 12 | 0, i7 + 8 | 0, i7 + 4 | 0, i7, i9);
 i6 = (HEAP32[i7 + 12 >> 2] | 0) + (Math_imul(HEAP32[i7 + 8 >> 2] | 0, i10) | 0) | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = (HEAP32[i7 >> 2] | 0) == 3;
 i5 = (HEAP32[i7 + 20 >> 2] | 0) == 0;
 i3 = HEAP32[i7 + 28 >> 2] | 0;
 i8 = 2;
 while (1) {
  if (i1) i11 = HEAPU16[i6 + (i8 << 1) >> 1] | 0; else i11 = HEAP32[i6 + (i8 << 2) >> 2] | 0;
  i11 = Math_imul(HEAP32[i7 + 16 >> 2] | 0, i11) | 0;
  if (i5) {
   d13 = +HEAPF32[i3 + (i11 + 4) >> 2] * +HEAPF32[i4 + 8 >> 2];
   d12 = +HEAPF32[i3 + (i11 + 8) >> 2] * +HEAPF32[i4 + 12 >> 2];
   HEAPF32[i7 + 32 + (i8 << 4) >> 2] = +HEAPF32[i3 + i11 >> 2] * +HEAPF32[i4 + 4 >> 2];
   HEAPF32[i7 + 32 + (i8 << 4) + 4 >> 2] = d13;
   HEAPF32[i7 + 32 + (i8 << 4) + 8 >> 2] = d12;
   HEAPF32[i7 + 32 + (i8 << 4) + 12 >> 2] = 0.0;
  } else {
   d12 = +HEAPF64[i3 + (i11 + 8) >> 3] * +HEAPF32[i4 + 8 >> 2];
   d13 = +HEAPF64[i3 + (i11 + 16) >> 3] * +HEAPF32[i4 + 12 >> 2];
   HEAPF32[i7 + 32 + (i8 << 4) >> 2] = +HEAPF64[i3 + i11 >> 3] * +HEAPF32[i4 + 4 >> 2];
   HEAPF32[i7 + 32 + (i8 << 4) + 4 >> 2] = d12;
   HEAPF32[i7 + 32 + (i8 << 4) + 8 >> 2] = d13;
   HEAPF32[i7 + 32 + (i8 << 4) + 12 >> 2] = 0.0;
  }
  if ((i8 | 0) > 0) i8 = i8 + -1 | 0; else break;
 }
 i11 = HEAP32[i2 + 8 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 127](i11, i7 + 32 | 0, i9, i10);
 i11 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] & 127](i11, i9);
 STACKTOP = i7;
 return;
}
function __ZN16btCollisionWorld33performDiscreteCollisionDetectionEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(7472);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 511](i2);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 511](i2);
 i3 = HEAP32[i2 + 24 >> 2] | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(7512);
 if ((i3 | 0) != 0) {
  i5 = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0;
  i4 = HEAP32[i2 + 68 >> 2] | 0;
  i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0;
  FUNCTION_TABLE_viiii[i5 & 127](i3, i4, i2 + 28 | 0, HEAP32[i2 + 24 >> 2] | 0);
 }
 i2 = HEAP32[5022] | 0;
 i5 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i5;
 do if ((i5 | 0) == 0) {
  if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
   _gettimeofday(i1 | 0, 0) | 0;
   i3 = HEAP32[5008] | 0;
   HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
   i3 = HEAP32[5022] | 0;
   if ((HEAP32[i2 + 16 >> 2] | 0) == 0) i2 = i3; else {
    i2 = i3;
    break;
   }
  }
  i2 = HEAP32[i2 + 20 >> 2] | 0;
  HEAP32[5022] = i2;
 } while (0);
 i3 = i2 + 16 | 0;
 i5 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
 HEAP32[i3 >> 2] = i5;
 if ((i5 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i4 = HEAP32[5008] | 0;
  i5 = i2 + 8 | 0;
  HEAPF32[i5 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i4 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i5 >> 2];
  if ((HEAP32[i3 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN20btAlignedObjectArrayI6btFaceE7reserveEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i1 + 8 >> 2] | 0) >= (i2 | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((i2 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i4 = _malloc((i2 * 36 | 3) + 16 | 0) | 0, (i4 | 0) != 0) : 0) {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 } else i4 = 0;
 i7 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i7 | 0) > 0) {
  i6 = 0;
  do {
   i5 = i4 + (i6 * 36 | 0) | 0;
   if ((i5 | 0) != 0) {
    i11 = HEAP32[i1 + 12 >> 2] | 0;
    __ZN20btAlignedObjectArrayIiEC2ERKS0_(i5, i11 + (i6 * 36 | 0) | 0);
    i11 = i11 + (i6 * 36 | 0) + 20 | 0;
    HEAP32[i5 + 20 >> 2] = HEAP32[i11 + 0 >> 2];
    HEAP32[i5 + 24 >> 2] = HEAP32[i11 + 4 >> 2];
    HEAP32[i5 + 28 >> 2] = HEAP32[i11 + 8 >> 2];
    HEAP32[i5 + 32 >> 2] = HEAP32[i11 + 12 >> 2];
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i7 | 0));
  i11 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i11 | 0) > 0) {
   i10 = 0;
   do {
    i9 = HEAP32[i1 + 12 >> 2] | 0;
    i6 = i9 + (i10 * 36 | 0) + 4 | 0;
    i7 = i9 + (i10 * 36 | 0) + 12 | 0;
    i5 = HEAP32[i7 >> 2] | 0;
    i8 = i9 + (i10 * 36 | 0) + 16 | 0;
    if ((i5 | 0) != 0) {
     if ((HEAP8[i8 >> 0] | 0) != 0) {
      HEAP32[5006] = (HEAP32[5006] | 0) + 1;
      _free(HEAP32[i5 + -4 >> 2] | 0);
     }
     HEAP32[i7 >> 2] = 0;
    }
    HEAP8[i8 >> 0] = 1;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i9 + (i10 * 36 | 0) + 8 >> 2] = 0;
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i11 | 0));
   i5 = i1 + 12 | 0;
  } else i5 = i1 + 12 | 0;
 } else i5 = i1 + 12 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i6 + -4 >> 2] | 0);
  }
  HEAP32[i5 >> 2] = 0;
 }
 HEAP8[i1 + 16 >> 0] = 1;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i2;
 STACKTOP = i3;
 return;
}
function __ZN15btCylinderShapeC2ERK9btVector3(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 HEAP32[i1 + 4 >> 2] = 35;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAPF32[i1 + 12 >> 2] = 1.0;
 HEAPF32[i1 + 16 >> 2] = 1.0;
 HEAPF32[i1 + 20 >> 2] = 1.0;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 HEAPF32[i1 + 44 >> 2] = .03999999910593033;
 HEAP32[i1 >> 2] = 10928;
 HEAP32[i1 + 52 >> 2] = 1;
 d5 = +HEAPF32[i3 >> 2];
 d6 = +HEAPF32[i3 + 4 >> 2];
 d4 = +HEAPF32[i3 + 8 >> 2];
 if (d5 < d6) i7 = d5 < d4 ? 0 : 2; else i7 = d6 < d4 ? 1 : 2;
 d4 = +HEAPF32[i3 + (i7 << 2) >> 2] * .10000000149011612;
 if (d4 < .03999999910593033) {
  d9 = +__ZNK21btConvexInternalShape9getMarginEv(i1);
  d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
  d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
  d9 = d9 + +HEAPF32[i1 + 28 >> 2];
  d8 = d8 + +HEAPF32[i1 + 32 >> 2];
  d6 = d6 + +HEAPF32[i1 + 36 >> 2];
  HEAPF32[i1 + 44 >> 2] = d4;
  d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
  d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
  d6 = d6 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
  HEAPF32[i1 + 28 >> 2] = d9 - d4;
  HEAPF32[i1 + 32 >> 2] = d8 - d5;
  HEAPF32[i1 + 36 >> 2] = d6;
  HEAPF32[i1 + 40 >> 2] = 0.0;
  i7 = HEAP32[i1 >> 2] | 0;
 } else i7 = 10928 | 0;
 d6 = +FUNCTION_TABLE_di[HEAP32[i7 + 48 >> 2] & 15](i1);
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d8 = +HEAPF32[i3 + 4 >> 2] * +HEAPF32[i1 + 16 >> 2] - d8;
 d9 = +HEAPF32[i3 + 8 >> 2] * +HEAPF32[i1 + 20 >> 2] - d9;
 HEAPF32[i1 + 28 >> 2] = +HEAPF32[i3 >> 2] * +HEAPF32[i1 + 12 >> 2] - d6;
 HEAPF32[i1 + 32 >> 2] = d8;
 HEAPF32[i1 + 36 >> 2] = d9;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 HEAP32[i1 + 4 >> 2] = 13;
 STACKTOP = i2;
 return;
}
function __ZNK17btConvexHullShape9serializeEPvP12btSerializer(i5, i4, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 31](i1, i5) | 0;
 i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, i3) | 0;
 HEAP32[i4 >> 2] = i7;
 if ((i7 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1, i3);
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i5 + 28 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i5 + 32 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i5 + 36 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i5 + 40 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i5 + 12 >> 2];
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i5 + 16 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i5 + 20 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i5 + 24 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i5 + 44 >> 2];
 i3 = HEAP32[i5 + 96 >> 2] | 0;
 HEAP32[i4 + 60 >> 2] = i3;
 if ((i3 | 0) == 0) {
  HEAP32[i4 + 52 >> 2] = 0;
  HEAP32[i4 + 56 >> 2] = 0;
  STACKTOP = i2;
  return 10504;
 }
 i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, HEAP32[i5 + 104 >> 2] | 0) | 0;
 HEAP32[i4 + 52 >> 2] = i7;
 HEAP32[i4 + 56 >> 2] = 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, 16, i3) | 0;
 if ((i3 | 0) > 0) {
  i6 = HEAP32[i5 + 104 >> 2] | 0;
  i5 = 0;
  i7 = HEAP32[i4 + 8 >> 2] | 0;
  while (1) {
   HEAPF32[i7 >> 2] = +HEAPF32[i6 + (i5 << 4) >> 2];
   HEAPF32[i7 + 4 >> 2] = +HEAPF32[i6 + (i5 << 4) + 4 >> 2];
   HEAPF32[i7 + 8 >> 2] = +HEAPF32[i6 + (i5 << 4) + 8 >> 2];
   HEAPF32[i7 + 12 >> 2] = +HEAPF32[i6 + (i5 << 4) + 12 >> 2];
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i3 | 0)) break; else i7 = i7 + 16 | 0;
  }
 } else i6 = HEAP32[i5 + 104 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i4, 19760, 1497453121, i6);
 STACKTOP = i2;
 return 10504;
}
function __ZN14btTriangleMesh18preallocateIndicesEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 if ((HEAP8[i1 + 164 >> 0] | 0) == 0) {
  if ((HEAP32[i1 + 152 >> 2] | 0) >= (i2 | 0)) {
   STACKTOP = i3;
   return;
  }
  if ((i2 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i5 = _malloc((i2 << 1) + 19 | 0) | 0, (i5 | 0) != 0) : 0) {
   HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
   i4 = i5 + 19 & -16;
  } else i4 = 0;
  i5 = HEAP32[i1 + 148 >> 2] | 0;
  if ((i5 | 0) > 0) {
   i7 = 0;
   do {
    i6 = i4 + (i7 << 1) | 0;
    if ((i6 | 0) != 0) HEAP16[i6 >> 1] = HEAP16[(HEAP32[i1 + 156 >> 2] | 0) + (i7 << 1) >> 1] | 0;
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i5 | 0));
  }
  i5 = HEAP32[i1 + 156 >> 2] | 0;
  if ((i5 | 0) != 0) {
   if ((HEAP8[i1 + 160 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i5 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 156 >> 2] = 0;
  }
  HEAP8[i1 + 160 >> 0] = 1;
  HEAP32[i1 + 156 >> 2] = i4;
  HEAP32[i1 + 152 >> 2] = i2;
  STACKTOP = i3;
  return;
 } else {
  if ((HEAP32[i1 + 132 >> 2] | 0) >= (i2 | 0)) {
   STACKTOP = i3;
   return;
  }
  if ((i2 | 0) != 0 ? (HEAP32[5004] = (HEAP32[5004] | 0) + 1, i4 = _malloc((i2 << 2 | 3) + 16 | 0) | 0, (i4 | 0) != 0) : 0) {
   HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
   i4 = i4 + 19 & -16;
  } else i4 = 0;
  i7 = HEAP32[i1 + 128 >> 2] | 0;
  if ((i7 | 0) > 0) {
   i6 = 0;
   do {
    i5 = i4 + (i6 << 2) | 0;
    if ((i5 | 0) != 0) HEAP32[i5 >> 2] = HEAP32[(HEAP32[i1 + 136 >> 2] | 0) + (i6 << 2) >> 2];
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i7 | 0));
  }
  i5 = HEAP32[i1 + 136 >> 2] | 0;
  if ((i5 | 0) != 0) {
   if ((HEAP8[i1 + 140 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i5 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 136 >> 2] = 0;
  }
  HEAP8[i1 + 140 >> 0] = 1;
  HEAP32[i1 + 136 >> 2] = i4;
  HEAP32[i1 + 132 >> 2] = i2;
  STACKTOP = i3;
  return;
 }
}
function __ZN6btDbvtD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) != 0) __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i1, i3);
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = -1;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 32 >> 2] = 0;
 }
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 56 >> 0] = 1;
  HEAP32[i1 + 52 >> 2] = 0;
  HEAP32[i1 + 44 >> 2] = 0;
  HEAP32[i1 + 48 >> 2] = 0;
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 56 >> 0] | 0) == 0) {
  HEAP8[i1 + 56 >> 0] = 1;
  HEAP32[i1 + 52 >> 2] = 0;
  HEAP32[i1 + 44 >> 2] = 0;
  HEAP32[i1 + 48 >> 2] = 0;
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i3 + -4 >> 2] | 0);
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP8[i1 + 56 >> 0] = 1;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK11btMatrix3x311getRotationER12btQuaternion(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 d6 = +HEAPF32[i1 >> 2];
 d5 = +HEAPF32[i1 + 20 >> 2];
 d4 = +HEAPF32[i1 + 40 >> 2];
 if (d6 + d5 + d4 > 0.0) {
  d6 = +Math_sqrt(+(d6 + d5 + d4 + 1.0));
  HEAPF32[i2 + 12 >> 2] = d6 * .5;
  d8 = (+HEAPF32[i1 + 36 >> 2] - +HEAPF32[i1 + 24 >> 2]) * (.5 / d6);
  HEAPF32[i2 >> 2] = d8;
  d4 = (+HEAPF32[i1 + 8 >> 2] - +HEAPF32[i1 + 32 >> 2]) * (.5 / d6);
  HEAPF32[i2 + 4 >> 2] = d4;
  d5 = (+HEAPF32[i1 + 16 >> 2] - +HEAPF32[i1 + 4 >> 2]) * (.5 / d6);
  HEAPF32[i2 + 8 >> 2] = d5;
  d6 = d6 * .5;
  HEAPF32[i3 >> 2] = d8;
  i7 = i3 + 4 | 0;
  HEAPF32[i7 >> 2] = d4;
  i7 = i3 + 8 | 0;
  HEAPF32[i7 >> 2] = d5;
  i7 = i3 + 12 | 0;
  HEAPF32[i7 >> 2] = d6;
  STACKTOP = i2;
  return;
 }
 if (d6 < d5) i7 = d5 < d4 ? 2 : 1; else i7 = d6 < d4 ? 2 : 0;
 i10 = ((i7 + 1 | 0) >>> 0) % 3 | 0;
 i9 = ((i7 + 2 | 0) >>> 0) % 3 | 0;
 d4 = +Math_sqrt(+(+HEAPF32[i1 + (i7 << 4) + (i7 << 2) >> 2] - +HEAPF32[i1 + (i10 << 4) + (i10 << 2) >> 2] - +HEAPF32[i1 + (i9 << 4) + (i9 << 2) >> 2] + 1.0));
 HEAPF32[i2 + (i7 << 2) >> 2] = d4 * .5;
 HEAPF32[i2 + 12 >> 2] = (+HEAPF32[i1 + (i9 << 4) + (i10 << 2) >> 2] - +HEAPF32[i1 + (i10 << 4) + (i9 << 2) >> 2]) * (.5 / d4);
 HEAPF32[i2 + (i10 << 2) >> 2] = (+HEAPF32[i1 + (i10 << 4) + (i7 << 2) >> 2] + +HEAPF32[i1 + (i7 << 4) + (i10 << 2) >> 2]) * (.5 / d4);
 HEAPF32[i2 + (i9 << 2) >> 2] = (+HEAPF32[i1 + (i9 << 4) + (i7 << 2) >> 2] + +HEAPF32[i1 + (i7 << 4) + (i9 << 2) >> 2]) * (.5 / d4);
 d4 = +HEAPF32[i2 >> 2];
 d5 = +HEAPF32[i2 + 4 >> 2];
 d6 = +HEAPF32[i2 + 8 >> 2];
 d8 = +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i3 >> 2] = d4;
 i7 = i3 + 4 | 0;
 HEAPF32[i7 >> 2] = d5;
 i7 = i3 + 8 | 0;
 HEAPF32[i7 >> 2] = d6;
 i7 = i3 + 12 | 0;
 HEAPF32[i7 >> 2] = d8;
 STACKTOP = i2;
 return;
}
function __ZN14btTriangleMeshD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 17304;
 i3 = HEAP32[i1 + 156 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 160 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 156 >> 2] = 0;
 }
 HEAP8[i1 + 160 >> 0] = 1;
 HEAP32[i1 + 156 >> 2] = 0;
 HEAP32[i1 + 148 >> 2] = 0;
 HEAP32[i1 + 152 >> 2] = 0;
 i3 = HEAP32[i1 + 136 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 140 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 136 >> 2] = 0;
 }
 HEAP8[i1 + 140 >> 0] = 1;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 i3 = HEAP32[i1 + 116 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 120 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 116 >> 2] = 0;
 }
 HEAP8[i1 + 120 >> 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i3 = HEAP32[i1 + 96 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 100 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 96 >> 2] = 0;
 }
 HEAP8[i1 + 100 >> 0] = 1;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP32[i1 >> 2] = 19904;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  i3 = i1 + 28 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 i3 = i1 + 28 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN25btDefaultVehicleRaycaster7castRayERK9btVector3S2_RN18btVehicleRaycaster24btVehicleRaycasterResultE(i5, i4, i3, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAPF32[i2 + 4 >> 2] = 1.0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP16[i2 + 12 >> 1] = 1;
 HEAP16[i2 + 14 >> 1] = -1;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 336;
 HEAP32[i2 + 20 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i2 + 48 >> 2] = HEAP32[i3 + 12 >> 2];
 i5 = HEAP32[i5 + 4 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] & 127](i5, i4, i3, i2);
 i3 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i3 | 0) == 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAP32[i3 + 236 >> 2] & 2 | 0) == 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAP32[i3 + 204 >> 2] & 4 | 0) != 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 68 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 72 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 76 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 80 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 60 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 64 >> 2];
 d9 = +HEAPF32[i1 + 16 >> 2];
 d8 = +HEAPF32[i1 + 20 >> 2];
 d7 = +HEAPF32[i1 + 24 >> 2];
 d6 = 1.0 / +Math_sqrt(+(d9 * d9 + d8 * d8 + d7 * d7));
 HEAPF32[i1 + 16 >> 2] = d9 * d6;
 HEAPF32[i1 + 20 >> 2] = d8 * d6;
 HEAPF32[i1 + 24 >> 2] = d7 * d6;
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i2 + 4 >> 2];
 i5 = i3;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN14btQuantizedBvhD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 16080;
 i3 = HEAP32[i1 + 160 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 164 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 160 >> 2] = 0;
 }
 HEAP8[i1 + 164 >> 0] = 1;
 HEAP32[i1 + 160 >> 2] = 0;
 HEAP32[i1 + 152 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 i3 = HEAP32[i1 + 136 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 140 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 136 >> 2] = 0;
 }
 HEAP8[i1 + 140 >> 0] = 1;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 128 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 i3 = HEAP32[i1 + 116 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 120 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 116 >> 2] = 0;
 }
 HEAP8[i1 + 120 >> 0] = 1;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i3 = HEAP32[i1 + 96 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 100 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 96 >> 2] = 0;
 }
 HEAP8[i1 + 100 >> 0] = 1;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 92 >> 2] = 0;
 i3 = HEAP32[i1 + 76 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 80 >> 0] = 1;
  HEAP32[i1 + 76 >> 2] = 0;
  HEAP32[i1 + 68 >> 2] = 0;
  i3 = i1 + 72 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 80 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP8[i1 + 80 >> 0] = 1;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 i3 = i1 + 72 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK16btDbvtBroadphase17getBroadphaseAabbER9btVector3S1_(i5, i1, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i3 = STACKTOP;
 i4 = HEAP32[i5 + 4 >> 2] | 0;
 i5 = HEAP32[i5 + 64 >> 2] | 0;
 do if ((i4 | 0) == 0) if ((i5 | 0) == 0) {
  d6 = 0.0;
  d7 = 0.0;
  d12 = 0.0;
  d11 = 0.0;
  d10 = 0.0;
  d9 = 0.0;
  d8 = 0.0;
  d13 = 0.0;
 } else {
  d6 = +HEAPF32[i5 >> 2];
  d7 = +HEAPF32[i5 + 4 >> 2];
  d12 = +HEAPF32[i5 + 8 >> 2];
  d11 = +HEAPF32[i5 + 12 >> 2];
  d10 = +HEAPF32[i5 + 16 >> 2];
  d9 = +HEAPF32[i5 + 20 >> 2];
  d8 = +HEAPF32[i5 + 24 >> 2];
  d13 = +HEAPF32[i5 + 28 >> 2];
 } else {
  d6 = +HEAPF32[i4 >> 2];
  if ((i5 | 0) == 0) {
   d7 = +HEAPF32[i4 + 4 >> 2];
   d12 = +HEAPF32[i4 + 8 >> 2];
   d11 = +HEAPF32[i4 + 12 >> 2];
   d10 = +HEAPF32[i4 + 16 >> 2];
   d9 = +HEAPF32[i4 + 20 >> 2];
   d8 = +HEAPF32[i4 + 24 >> 2];
   d13 = +HEAPF32[i4 + 28 >> 2];
   break;
  } else {
   d17 = +HEAPF32[i5 >> 2];
   d15 = +HEAPF32[i4 + 16 >> 2];
   d10 = +HEAPF32[i5 + 16 >> 2];
   d16 = +HEAPF32[i4 + 4 >> 2];
   d7 = +HEAPF32[i5 + 4 >> 2];
   d14 = +HEAPF32[i4 + 20 >> 2];
   d9 = +HEAPF32[i5 + 20 >> 2];
   d11 = +HEAPF32[i4 + 8 >> 2];
   d12 = +HEAPF32[i5 + 8 >> 2];
   d13 = +HEAPF32[i4 + 24 >> 2];
   d8 = +HEAPF32[i5 + 24 >> 2];
   d6 = d6 < d17 ? d6 : d17;
   d7 = d16 < d7 ? d16 : d7;
   d12 = d11 < d12 ? d11 : d12;
   d11 = 0.0;
   d10 = d15 > d10 ? d15 : d10;
   d9 = d14 > d9 ? d14 : d9;
   d8 = d13 > d8 ? d13 : d8;
   d13 = 0.0;
   break;
  }
 } while (0);
 HEAPF32[i1 >> 2] = d6;
 HEAPF32[i1 + 4 >> 2] = d7;
 HEAPF32[i1 + 8 >> 2] = d12;
 HEAPF32[i1 + 12 >> 2] = d11;
 HEAPF32[i2 >> 2] = d10;
 HEAPF32[i2 + 4 >> 2] = d9;
 HEAPF32[i2 + 8 >> 2] = d8;
 HEAPF32[i2 + 12 >> 2] = d13;
 STACKTOP = i3;
 return;
}
function __ZN18btConvexPolyhedronD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 19496;
 i3 = HEAP32[i1 + 56 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 60 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 56 >> 2] = 0;
 }
 HEAP8[i1 + 60 >> 0] = 1;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i5 = 0;
  do {
   i6 = HEAP32[i1 + 36 >> 2] | 0;
   i9 = i6 + (i5 * 36 | 0) + 4 | 0;
   i8 = i6 + (i5 * 36 | 0) + 12 | 0;
   i3 = HEAP32[i8 >> 2] | 0;
   i7 = i6 + (i5 * 36 | 0) + 16 | 0;
   if ((i3 | 0) != 0) {
    if ((HEAP8[i7 >> 0] | 0) != 0) {
     HEAP32[5006] = (HEAP32[5006] | 0) + 1;
     _free(HEAP32[i3 + -4 >> 2] | 0);
    }
    HEAP32[i8 >> 2] = 0;
   }
   HEAP8[i7 >> 0] = 1;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i6 + (i5 * 36 | 0) + 8 >> 2] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 40 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 36 >> 2] = 0;
 }
 HEAP8[i1 + 40 >> 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i9 = i1 + 12 | 0;
  HEAP32[i9 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i9 = i1 + 12 | 0;
 HEAP32[i9 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN16btRaycastVehicleD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3752;
 i3 = HEAP32[i1 + 144 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 148 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 144 >> 2] = 0;
 }
 HEAP8[i1 + 148 >> 0] = 1;
 HEAP32[i1 + 144 >> 2] = 0;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 i3 = HEAP32[i1 + 76 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 80 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 76 >> 2] = 0;
 }
 HEAP8[i1 + 80 >> 0] = 1;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 i3 = HEAP32[i1 + 56 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 60 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 56 >> 2] = 0;
 }
 HEAP8[i1 + 60 >> 0] = 1;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 40 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 36 >> 2] = 0;
 }
 HEAP8[i1 + 40 >> 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i3 = i1 + 12 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN24btPairCachingGhostObject28addOverlappingObjectInternalEP17btBroadphaseProxyS1_(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 if ((i4 | 0) == 0) i4 = HEAP32[i1 + 188 >> 2] | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 i8 = HEAP32[i1 + 268 >> 2] | 0;
 L4 : do if ((i8 | 0) > 0) {
  i10 = HEAP32[i1 + 276 >> 2] | 0;
  i7 = 0;
  while (1) {
   i9 = i7 + 1 | 0;
   if ((HEAP32[i10 + (i7 << 2) >> 2] | 0) == (i5 | 0)) break;
   if ((i9 | 0) < (i8 | 0)) i7 = i9; else break L4;
  }
  if ((i7 | 0) != (i8 | 0)) {
   STACKTOP = i3;
   return;
  }
 } while (0);
 if ((i8 | 0) == (HEAP32[i1 + 272 >> 2] | 0) ? (i6 = (i8 | 0) == 0 ? 1 : i8 << 1, (i8 | 0) < (i6 | 0)) : 0) {
  if ((i6 | 0) == 0) i7 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i7 = _malloc((i6 << 2 | 3) + 16 | 0) | 0;
   if ((i7 | 0) == 0) i7 = 0; else {
    HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
    i7 = i7 + 19 & -16;
   }
   i8 = HEAP32[i1 + 268 >> 2] | 0;
  }
  if ((i8 | 0) > 0) {
   i10 = 0;
   do {
    i9 = i7 + (i10 << 2) | 0;
    if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i1 + 276 >> 2] | 0) + (i10 << 2) >> 2];
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) != (i8 | 0));
  }
  i9 = HEAP32[i1 + 276 >> 2] | 0;
  if ((i9 | 0) != 0) {
   if ((HEAP8[i1 + 280 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i9 + -4 >> 2] | 0);
    i8 = HEAP32[i1 + 268 >> 2] | 0;
   }
   HEAP32[i1 + 276 >> 2] = 0;
  }
  HEAP8[i1 + 280 >> 0] = 1;
  HEAP32[i1 + 276 >> 2] = i7;
  HEAP32[i1 + 272 >> 2] = i6;
 }
 i6 = (HEAP32[i1 + 276 >> 2] | 0) + (i8 << 2) | 0;
 if ((i6 | 0) != 0) HEAP32[i6 >> 2] = i5;
 HEAP32[i1 + 268 >> 2] = i8 + 1;
 i10 = HEAP32[i1 + 284 >> 2] | 0;
 FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 31](i10, i4, i2) | 0;
 STACKTOP = i3;
 return;
}
function __ZNK13btConvexShape31localGetSupportVertexNonVirtualERK9btVector3(i1, i3, i7) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d8 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i2 + 16 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i7 + 12 >> 2];
 d5 = +HEAPF32[i2 + 16 >> 2];
 d6 = +HEAPF32[i2 + 20 >> 2];
 d4 = +HEAPF32[i2 + 24 >> 2];
 if (d5 * d5 + d6 * d6 + d4 * d4 < 1.4210854715202004e-14) {
  HEAPF32[i2 + 16 >> 2] = -1.0;
  HEAPF32[i2 + 20 >> 2] = -1.0;
  HEAPF32[i2 + 24 >> 2] = -1.0;
  HEAPF32[i2 + 28 >> 2] = 0.0;
  d5 = -1.0;
  d6 = -1.0;
  d4 = -1.0;
 }
 d8 = 1.0 / +Math_sqrt(+(d5 * d5 + d6 * d6 + d4 * d4));
 HEAPF32[i2 + 16 >> 2] = d5 * d8;
 HEAPF32[i2 + 20 >> 2] = d6 * d8;
 HEAPF32[i2 + 24 >> 2] = d4 * d8;
 __ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3(i2, i3, i2 + 16 | 0);
 switch (HEAP32[i3 + 4 >> 2] | 0) {
 case 1:
  {
   d4 = +HEAPF32[i3 + 44 >> 2];
   break;
  }
 case 8:
  {
   d4 = +HEAPF32[i3 + 28 >> 2] * +HEAPF32[i3 + 12 >> 2];
   break;
  }
 case 11:
  {
   d4 = +HEAPF32[i3 + 44 >> 2];
   break;
  }
 case 0:
  {
   d4 = +HEAPF32[i3 + 44 >> 2];
   break;
  }
 case 10:
  {
   d4 = +HEAPF32[i3 + 44 >> 2];
   break;
  }
 case 4:
 case 5:
  {
   d4 = +HEAPF32[i3 + 44 >> 2];
   break;
  }
 case 13:
  {
   d4 = +HEAPF32[i3 + 44 >> 2];
   break;
  }
 default:
  d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 }
 d6 = d4 * +HEAPF32[i2 + 20 >> 2] + +HEAPF32[i2 + 4 >> 2];
 d8 = d4 * +HEAPF32[i2 + 24 >> 2] + +HEAPF32[i2 + 8 >> 2];
 HEAPF32[i1 >> 2] = d4 * +HEAPF32[i2 + 16 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i1 + 4 >> 2] = d6;
 HEAPF32[i1 + 8 >> 2] = d8;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZNK11btTransform12inverseTimesERKS_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0;
 d9 = +HEAPF32[i3 + 48 >> 2] - +HEAPF32[i2 + 48 >> 2];
 d7 = +HEAPF32[i3 + 52 >> 2] - +HEAPF32[i2 + 52 >> 2];
 d5 = +HEAPF32[i3 + 56 >> 2] - +HEAPF32[i2 + 56 >> 2];
 d15 = +HEAPF32[i2 >> 2];
 d24 = +HEAPF32[i3 >> 2];
 d14 = +HEAPF32[i2 + 16 >> 2];
 d23 = +HEAPF32[i3 + 16 >> 2];
 d13 = +HEAPF32[i2 + 32 >> 2];
 d22 = +HEAPF32[i3 + 32 >> 2];
 d21 = +HEAPF32[i3 + 4 >> 2];
 d20 = +HEAPF32[i3 + 20 >> 2];
 d19 = +HEAPF32[i3 + 36 >> 2];
 d18 = +HEAPF32[i3 + 8 >> 2];
 d17 = +HEAPF32[i3 + 24 >> 2];
 d16 = +HEAPF32[i3 + 40 >> 2];
 d12 = +HEAPF32[i2 + 4 >> 2];
 d11 = +HEAPF32[i2 + 20 >> 2];
 d10 = +HEAPF32[i2 + 36 >> 2];
 d8 = +HEAPF32[i2 + 8 >> 2];
 d6 = +HEAPF32[i2 + 24 >> 2];
 d4 = +HEAPF32[i2 + 40 >> 2];
 HEAPF32[i1 >> 2] = d15 * d24 + d14 * d23 + d13 * d22;
 HEAPF32[i1 + 4 >> 2] = d15 * d21 + d14 * d20 + d13 * d19;
 HEAPF32[i1 + 8 >> 2] = d15 * d18 + d14 * d17 + d13 * d16;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = d24 * d12 + d23 * d11 + d22 * d10;
 HEAPF32[i1 + 20 >> 2] = d21 * d12 + d20 * d11 + d19 * d10;
 HEAPF32[i1 + 24 >> 2] = d18 * d12 + d17 * d11 + d16 * d10;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAPF32[i1 + 32 >> 2] = d24 * d8 + d23 * d6 + d22 * d4;
 HEAPF32[i1 + 36 >> 2] = d21 * d8 + d20 * d6 + d19 * d4;
 HEAPF32[i1 + 40 >> 2] = d18 * d8 + d17 * d6 + d16 * d4;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAPF32[i1 + 48 >> 2] = d9 * d15 + d7 * d14 + d5 * d13;
 HEAPF32[i1 + 52 >> 2] = d9 * d12 + d7 * d11 + d5 * d10;
 HEAPF32[i1 + 56 >> 2] = d9 * d8 + d7 * d6 + d5 * d4;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 return;
}
function __ZN16btDbvtBroadphaseC2EP22btOverlappingPairCache(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 11432;
 i4 = i2 + 4 | 0;
 do {
  HEAP8[i4 + 36 >> 0] = 1;
  HEAP32[i4 + 32 >> 2] = 0;
  HEAP32[i4 + 24 >> 2] = 0;
  HEAP32[i4 + 28 >> 2] = 0;
  HEAP8[i4 + 56 >> 0] = 1;
  HEAP32[i4 + 52 >> 2] = 0;
  HEAP32[i4 + 44 >> 2] = 0;
  HEAP32[i4 + 48 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = -1;
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = 0;
  i4 = i4 + 60 | 0;
 } while ((i4 | 0) != (i2 + 124 | 0));
 HEAP8[i2 + 193 >> 0] = 0;
 HEAP8[i2 + 194 >> 0] = 1;
 HEAP8[i2 + 192 >> 0] = (i3 | 0) != 0 ^ 1;
 HEAPF32[i2 + 140 >> 2] = 0.0;
 HEAP32[i2 + 144 >> 2] = 0;
 HEAP32[i2 + 164 >> 2] = 0;
 HEAP32[i2 + 148 >> 2] = 1;
 HEAP32[i2 + 152 >> 2] = 0;
 HEAP32[i2 + 156 >> 2] = 10;
 HEAP32[i2 + 160 >> 2] = 1;
 HEAP32[i2 + 168 >> 2] = 0;
 HEAP32[i2 + 172 >> 2] = 0;
 HEAPF32[i2 + 176 >> 2] = 0.0;
 if ((i3 | 0) != 0) {
  i4 = i2 + 136 | 0;
  HEAP32[i4 >> 2] = i3;
  i4 = i2 + 188 | 0;
  HEAP32[i4 >> 2] = 0;
  i4 = i2 + 180 | 0;
  HEAP32[i4 >> 2] = 0;
  i4 = i2 + 184 | 0;
  HEAP32[i4 >> 2] = 0;
  i4 = i2 + 124 | 0;
  HEAP32[i4 + 0 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(95) | 0;
 if ((i3 | 0) != 0 ? (HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3, (i3 + 19 & -16 | 0) != 0) : 0) {
  __ZN28btHashedOverlappingPairCacheC2Ev(i3 + 19 & -16);
  i3 = i3 + 19 & -16;
 } else i3 = 0;
 i4 = i2 + 136 | 0;
 HEAP32[i4 >> 2] = i3;
 i4 = i2 + 188 | 0;
 HEAP32[i4 >> 2] = 0;
 i4 = i2 + 180 | 0;
 HEAP32[i4 >> 2] = 0;
 i4 = i2 + 184 | 0;
 HEAP32[i4 >> 2] = 0;
 i4 = i2 + 124 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function _emscripten_bind_btRigidBody_btRigidBody_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(635) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAPF32[i3 + 164 >> 2] = 1.0;
 HEAPF32[i3 + 168 >> 2] = 1.0;
 HEAPF32[i3 + 172 >> 2] = 1.0;
 HEAPF32[i3 + 176 >> 2] = 0.0;
 HEAP32[i3 + 180 >> 2] = 0;
 HEAPF32[i3 + 184 >> 2] = 999999984306749400.0;
 i4 = i3 + 188 | 0;
 i5 = i3 + 204 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i5 >> 2] = 1;
 HEAP32[i3 + 208 >> 2] = -1;
 HEAP32[i3 + 212 >> 2] = -1;
 HEAP32[i3 + 216 >> 2] = 1;
 HEAPF32[i3 + 220 >> 2] = 0.0;
 HEAPF32[i3 + 224 >> 2] = .5;
 HEAPF32[i3 + 228 >> 2] = 0.0;
 HEAPF32[i3 + 232 >> 2] = 0.0;
 HEAP32[i3 + 236 >> 2] = 1;
 HEAP32[i3 + 240 >> 2] = 0;
 HEAPF32[i3 + 244 >> 2] = 1.0;
 i5 = i3 + 248 | 0;
 i4 = i3 + 4 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 24 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAPF32[i5 >> 2] = 1.0;
 i5 = i3 + 28 | 0;
 i4 = i3 + 44 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i3 + 48 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i3 >> 2] = 3912;
 HEAP8[i3 + 500 >> 0] = 1;
 HEAP32[i3 + 496 >> 2] = 0;
 HEAP32[i3 + 488 >> 2] = 0;
 HEAP32[i3 + 492 >> 2] = 0;
 __ZN11btRigidBody14setupRigidBodyERKNS_27btRigidBodyConstructionInfoE(i3, i1);
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i2, i1, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, HEAP32[i2 + 28 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = i5;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, HEAP32[i2 + 32 >> 2] | 0) | 0;
 HEAP32[i1 + 4 >> 2] = i5;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 31](i4, i2) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 31](i4, i5) | 0;
 HEAP32[i1 + 8 >> 2] = i6;
 if ((i6 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 127](i4, i5);
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAPU8[i2 + 21 >> 0];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAPF32[i1 + 44 >> 2] = +HEAPF32[i2 + 16 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAPU8[i2 + 20 >> 0];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAPF32[i1 + 28 >> 2] = +HEAPF32[i2 + 36 >> 2];
 HEAPF32[i1 + 32 >> 2] = +HEAPF32[i2 + 40 >> 2];
 HEAP32[i1 + 36 >> 2] = 0;
 i5 = HEAP32[i2 + 28 >> 2] | 0;
 if ((HEAP32[i5 + 488 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   if ((HEAP32[(HEAP32[i5 + 496 >> 2] | 0) + (i4 << 2) >> 2] | 0) == (i2 | 0)) {
    HEAP32[i1 + 36 >> 2] = 1;
    i5 = HEAP32[i2 + 28 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i5 + 488 >> 2] | 0));
 }
 i5 = HEAP32[i2 + 32 >> 2] | 0;
 if ((HEAP32[i5 + 488 >> 2] | 0) > 0) i4 = 0; else {
  STACKTOP = i3;
  return 4376;
 }
 do {
  if ((HEAP32[(HEAP32[i5 + 496 >> 2] | 0) + (i4 << 2) >> 2] | 0) == (i2 | 0)) {
   HEAP32[i1 + 36 >> 2] = 1;
   i5 = HEAP32[i2 + 32 >> 2] | 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i5 + 488 >> 2] | 0));
 STACKTOP = i3;
 return 4376;
}
function _emscripten_bind_btConeTwistConstraint_setMotorTarget_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i1 + 364 | 0, i3 + 16 | 0);
 d7 = -+HEAPF32[i3 + 16 >> 2];
 d5 = -+HEAPF32[i3 + 20 >> 2];
 d11 = -+HEAPF32[i3 + 24 >> 2];
 d10 = +HEAPF32[i3 + 28 >> 2];
 d6 = +HEAPF32[i2 >> 2];
 d12 = +HEAPF32[i2 + 12 >> 2];
 d9 = +HEAPF32[i2 + 8 >> 2];
 d8 = +HEAPF32[i2 + 4 >> 2];
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i1 + 300 | 0, i3);
 d14 = +HEAPF32[i3 >> 2];
 d15 = +HEAPF32[i3 + 12 >> 2];
 d4 = +HEAPF32[i3 + 8 >> 2];
 d13 = +HEAPF32[i3 + 4 >> 2];
 HEAPF32[i3 + 32 >> 2] = d14 * (d10 * d12 - d6 * d7 - d8 * d5 - d9 * d11) + (d10 * d6 + d12 * d7 + d9 * d5 - d8 * d11) * d15 + (d6 * d11 + (d12 * d5 + d10 * d8) - d9 * d7) * d4 - (d12 * d11 + d10 * d9 + d8 * d7 - d6 * d5) * d13;
 HEAPF32[i3 + 36 >> 2] = d14 * (d12 * d11 + d10 * d9 + d8 * d7 - d6 * d5) + (d15 * (d6 * d11 + (d12 * d5 + d10 * d8) - d9 * d7) + (d10 * d12 - d6 * d7 - d8 * d5 - d9 * d11) * d13) - (d10 * d6 + d12 * d7 + d9 * d5 - d8 * d11) * d4;
 HEAPF32[i3 + 40 >> 2] = d15 * (d12 * d11 + d10 * d9 + d8 * d7 - d6 * d5) + (d10 * d12 - d6 * d7 - d8 * d5 - d9 * d11) * d4 + (d10 * d6 + d12 * d7 + d9 * d5 - d8 * d11) * d13 - d14 * (d6 * d11 + (d12 * d5 + d10 * d8) - d9 * d7);
 HEAPF32[i3 + 44 >> 2] = (d10 * d12 - d6 * d7 - d8 * d5 - d9 * d11) * d15 - d14 * (d10 * d6 + d12 * d7 + d9 * d5 - d8 * d11) - (d6 * d11 + (d12 * d5 + d10 * d8) - d9 * d7) * d13 - (d12 * d11 + d10 * d9 + d8 * d7 - d6 * d5) * d4;
 __ZN21btConeTwistConstraint31setMotorTargetInConstraintSpaceERK12btQuaternion(i1, i3 + 32 | 0);
 STACKTOP = i3;
 return;
}
function __ZNK11btConeShape16coneLocalSupportERK9btVector3(i2, i1, i11) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 d4 = +HEAPF32[i1 + 60 >> 2] * .5;
 i3 = HEAP32[i1 + 68 >> 2] | 0;
 d7 = +HEAPF32[i11 >> 2];
 d9 = +HEAPF32[i11 + 4 >> 2];
 d10 = +HEAPF32[i11 + 8 >> 2];
 d10 = +Math_sqrt(+(d7 * d7 + d9 * d9 + d10 * d10));
 i5 = HEAP32[i1 + 64 >> 2] | 0;
 if (+HEAPF32[i11 + (i3 << 2) >> 2] > d10 * +HEAPF32[i1 + 52 >> 2]) {
  HEAPF32[i6 + 32 + (i5 << 2) >> 2] = 0.0;
  HEAPF32[i6 + 32 + (i3 << 2) >> 2] = d4;
  HEAPF32[i6 + 32 + (HEAP32[i1 + 72 >> 2] << 2) >> 2] = 0.0;
  HEAP32[i2 + 0 >> 2] = HEAP32[i6 + 32 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 36 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 40 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i6 + 44 >> 2];
  STACKTOP = i6;
  return;
 }
 d7 = +HEAPF32[i11 + (i5 << 2) >> 2];
 i8 = HEAP32[i1 + 72 >> 2] | 0;
 d9 = +HEAPF32[i11 + (i8 << 2) >> 2];
 d10 = +Math_sqrt(+(d7 * d7 + d9 * d9));
 if (d10 > 1.1920928955078125e-7) {
  d10 = +HEAPF32[i1 + 56 >> 2] / d10;
  HEAPF32[i6 + 16 + (i5 << 2) >> 2] = d7 * d10;
  HEAPF32[i6 + 16 + (i3 << 2) >> 2] = -d4;
  HEAPF32[i6 + 16 + (i8 << 2) >> 2] = d10 * d9;
  HEAP32[i2 + 0 >> 2] = HEAP32[i6 + 16 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 20 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 24 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i6 + 28 >> 2];
  STACKTOP = i6;
  return;
 } else {
  HEAPF32[i6 + (i5 << 2) >> 2] = 0.0;
  HEAPF32[i6 + (i3 << 2) >> 2] = -d4;
  HEAPF32[i6 + (i8 << 2) >> 2] = 0.0;
  HEAP32[i2 + 0 >> 2] = HEAP32[i6 + 0 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  STACKTOP = i6;
  return;
 }
}
function __ZN20btAlignedObjectArrayI16btBroadphasePairE21expandNonInitializingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i2 | 0) != (HEAP32[i1 + 8 >> 2] | 0)) {
  i7 = i2;
  i7 = i7 + 1 | 0;
  HEAP32[i1 + 4 >> 2] = i7;
  i7 = i1 + 12 | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  i7 = i7 + (i2 << 4) | 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 i3 = (i2 | 0) == 0 ? 1 : i2 << 1;
 if ((i2 | 0) >= (i3 | 0)) {
  i7 = i2;
  i7 = i7 + 1 | 0;
  HEAP32[i1 + 4 >> 2] = i7;
  i7 = i1 + 12 | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  i7 = i7 + (i2 << 4) | 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 if ((i3 | 0) == 0) {
  i5 = 0;
  i6 = i2;
 } else {
  HEAP32[5004] = (HEAP32[5004] | 0) + 1;
  i5 = _malloc((i3 << 4 | 3) + 16 | 0) | 0;
  if ((i5 | 0) == 0) i5 = 0; else {
   HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
   i5 = i5 + 19 & -16;
  }
  i6 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if ((i6 | 0) > 0) {
  i7 = 0;
  do {
   i8 = HEAP32[i1 + 12 >> 2] | 0;
   HEAP32[i5 + (i7 << 4) >> 2] = HEAP32[i8 + (i7 << 4) >> 2];
   HEAP32[i5 + (i7 << 4) + 4 >> 2] = HEAP32[i8 + (i7 << 4) + 4 >> 2];
   HEAP32[i5 + (i7 << 4) + 8 >> 2] = HEAP32[i8 + (i7 << 4) + 8 >> 2];
   HEAP32[i5 + (i7 << 4) + 12 >> 2] = HEAP32[i8 + (i7 << 4) + 12 >> 2];
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i6 | 0));
 }
 i7 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i7 | 0) != 0) {
  if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i7 + -4 >> 2] | 0);
   i6 = HEAP32[i1 + 4 >> 2] | 0;
  }
  HEAP32[i1 + 12 >> 2] = 0;
 }
 HEAP8[i1 + 16 >> 0] = 1;
 HEAP32[i1 + 12 >> 2] = i5;
 HEAP32[i1 + 8 >> 2] = i3;
 i8 = i6;
 i8 = i8 + 1 | 0;
 HEAP32[i1 + 4 >> 2] = i8;
 i8 = i1 + 12 | 0;
 i8 = HEAP32[i8 >> 2] | 0;
 i8 = i8 + (i2 << 4) | 0;
 STACKTOP = i4;
 return i8 | 0;
}
function __ZN34btClosestNotMeConvexResultCallback15addSingleResultERN16btCollisionWorld17LocalConvexResultEb(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i4 + 80 >> 2] | 0)) {
  d6 = 1.0;
  STACKTOP = i2;
  return +d6;
 }
 if ((HEAP32[i3 + 204 >> 2] & 4 | 0) != 0) {
  d6 = 1.0;
  STACKTOP = i2;
  return +d6;
 }
 if ((+HEAPF32[i4 + 28 >> 2] - +HEAPF32[i4 + 12 >> 2]) * +HEAPF32[i1 + 8 >> 2] + (+HEAPF32[i4 + 32 >> 2] - +HEAPF32[i4 + 16 >> 2]) * +HEAPF32[i1 + 12 >> 2] + (+HEAPF32[i4 + 36 >> 2] - +HEAPF32[i4 + 20 >> 2]) * +HEAPF32[i1 + 16 >> 2] >= -+HEAPF32[i4 + 84 >> 2]) {
  d6 = 1.0;
  STACKTOP = i2;
  return +d6;
 }
 HEAPF32[i4 + 4 >> 2] = +HEAPF32[i1 + 40 >> 2];
 HEAP32[i4 + 76 >> 2] = i3;
 if (i5) {
  HEAP32[i4 + 44 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i4 + 48 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i4 + 52 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i4 + 56 >> 2] = HEAP32[i1 + 20 >> 2];
 } else {
  d10 = +HEAPF32[i1 + 8 >> 2];
  d9 = +HEAPF32[i1 + 12 >> 2];
  d8 = +HEAPF32[i1 + 16 >> 2];
  d7 = d10 * +HEAPF32[i3 + 20 >> 2] + d9 * +HEAPF32[i3 + 24 >> 2] + d8 * +HEAPF32[i3 + 28 >> 2];
  d6 = d10 * +HEAPF32[i3 + 36 >> 2] + d9 * +HEAPF32[i3 + 40 >> 2] + d8 * +HEAPF32[i3 + 44 >> 2];
  HEAPF32[i4 + 44 >> 2] = +HEAPF32[i3 + 4 >> 2] * d10 + +HEAPF32[i3 + 8 >> 2] * d9 + +HEAPF32[i3 + 12 >> 2] * d8;
  HEAPF32[i4 + 48 >> 2] = d7;
  HEAPF32[i4 + 52 >> 2] = d6;
  HEAPF32[i4 + 56 >> 2] = 0.0;
 }
 HEAP32[i4 + 60 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i4 + 64 >> 2] = HEAP32[i1 + 28 >> 2];
 HEAP32[i4 + 68 >> 2] = HEAP32[i1 + 32 >> 2];
 HEAP32[i4 + 72 >> 2] = HEAP32[i1 + 36 >> 2];
 d10 = +HEAPF32[i1 + 40 >> 2];
 STACKTOP = i2;
 return +d10;
}
function __ZN20btAlignedObjectArrayI16btBroadphasePairE6resizeEiRKS0_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 if (!((i5 | 0) <= (i2 | 0) & (i5 | 0) < (i2 | 0))) {
  HEAP32[i1 + 4 >> 2] = i2;
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i1 + 8 >> 2] | 0) < (i2 | 0)) {
  if ((i2 | 0) == 0) {
   i6 = 0;
   i7 = i5;
  } else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i6 = _malloc((i2 << 4 | 3) + 16 | 0) | 0;
   if ((i6 | 0) == 0) i6 = 0; else {
    HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
    i6 = i6 + 19 & -16;
   }
   i7 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i7 | 0) > 0) {
   i8 = 0;
   do {
    i9 = HEAP32[i1 + 12 >> 2] | 0;
    HEAP32[i6 + (i8 << 4) >> 2] = HEAP32[i9 + (i8 << 4) >> 2];
    HEAP32[i6 + (i8 << 4) + 4 >> 2] = HEAP32[i9 + (i8 << 4) + 4 >> 2];
    HEAP32[i6 + (i8 << 4) + 8 >> 2] = HEAP32[i9 + (i8 << 4) + 8 >> 2];
    HEAP32[i6 + (i8 << 4) + 12 >> 2] = HEAP32[i9 + (i8 << 4) + 12 >> 2];
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i7 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i6;
  HEAP32[i1 + 8 >> 2] = i2;
  i6 = i1 + 12 | 0;
 } else i6 = i1 + 12 | 0;
 do {
  i9 = HEAP32[i6 >> 2] | 0;
  HEAP32[i9 + (i5 << 4) >> 2] = HEAP32[i3 >> 2];
  HEAP32[i9 + (i5 << 4) + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i9 + (i5 << 4) + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i9 + (i5 << 4) + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i2 | 0));
 HEAP32[i1 + 4 >> 2] = i2;
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btGhostObject_btGhostObject_0() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(303) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 HEAPF32[i2 + 164 >> 2] = 1.0;
 HEAPF32[i2 + 168 >> 2] = 1.0;
 HEAPF32[i2 + 172 >> 2] = 1.0;
 HEAPF32[i2 + 176 >> 2] = 0.0;
 HEAP32[i2 + 180 >> 2] = 0;
 HEAPF32[i2 + 184 >> 2] = 999999984306749400.0;
 i5 = i2 + 188 | 0;
 i3 = i2 + 204 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i3 >> 2] = 1;
 HEAP32[i2 + 208 >> 2] = -1;
 HEAP32[i2 + 212 >> 2] = -1;
 HEAP32[i2 + 216 >> 2] = 1;
 HEAPF32[i2 + 220 >> 2] = 0.0;
 HEAPF32[i2 + 224 >> 2] = .5;
 HEAPF32[i2 + 228 >> 2] = 0.0;
 HEAPF32[i2 + 232 >> 2] = 0.0;
 i3 = i2 + 236 | 0;
 HEAP32[i2 + 240 >> 2] = 0;
 HEAPF32[i2 + 244 >> 2] = 1.0;
 i5 = i2 + 248 | 0;
 i4 = i2 + 4 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 24 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAPF32[i5 >> 2] = 1.0;
 i5 = i2 + 28 | 0;
 i4 = i2 + 44 | 0;
 HEAP32[i5 + 0 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i4 >> 2] = 1.0;
 i4 = i2 + 48 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 13008;
 HEAP8[i2 + 280 >> 0] = 1;
 HEAP32[i2 + 276 >> 2] = 0;
 HEAP32[i2 + 268 >> 2] = 0;
 HEAP32[i2 + 272 >> 2] = 0;
 HEAP32[i3 >> 2] = 4;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZN18btSliderConstraint8setParamEifi(i3, i5, d1, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) == 2) {
  if ((i4 | 0) < 1) {
   HEAPF32[i3 + 232 >> 2] = d1;
   HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 512;
   STACKTOP = i2;
   return;
  }
  if ((i4 | 0) < 3) {
   HEAPF32[i3 + 264 >> 2] = d1;
   HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 32;
   STACKTOP = i2;
   return;
  }
  if ((i4 | 0) == 3) {
   HEAPF32[i3 + 248 >> 2] = d1;
   HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 2048;
   STACKTOP = i2;
   return;
  }
  if ((i4 | 0) >= 6) {
   STACKTOP = i2;
   return;
  }
  HEAPF32[i3 + 280 >> 2] = d1;
  HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 128;
  STACKTOP = i2;
  return;
 } else if ((i5 | 0) == 3) {
  if ((i4 | 0) < 1) {
   HEAPF32[i3 + 212 >> 2] = d1;
   HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 1;
   STACKTOP = i2;
   return;
  }
  if ((i4 | 0) != 3) {
   STACKTOP = i2;
   return;
  }
  HEAPF32[i3 + 228 >> 2] = d1;
  HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 4;
  STACKTOP = i2;
  return;
 } else if ((i5 | 0) == 4) {
  if ((i4 | 0) < 1) {
   HEAPF32[i3 + 244 >> 2] = d1;
   HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 256;
   STACKTOP = i2;
   return;
  }
  if ((i4 | 0) < 3) {
   HEAPF32[i3 + 276 >> 2] = d1;
   HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 16;
   STACKTOP = i2;
   return;
  }
  if ((i4 | 0) == 3) {
   HEAPF32[i3 + 260 >> 2] = d1;
   HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 1024;
   STACKTOP = i2;
   return;
  }
  if ((i4 | 0) >= 6) {
   STACKTOP = i2;
   return;
  }
  HEAPF32[i3 + 292 >> 2] = d1;
  HEAP32[i3 + 300 >> 2] = HEAP32[i3 + 300 >> 2] | 64;
  STACKTOP = i2;
  return;
 } else {
  STACKTOP = i2;
  return;
 }
}
function __ZN15CProfileManager13Start_ProfileEPKc(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = HEAP32[5022] | 0;
 if ((HEAP32[i3 >> 2] | 0) != (i2 | 0)) {
  i5 = HEAP32[i3 + 24 >> 2] | 0;
  L3 : do if ((i5 | 0) == 0) i4 = 5; else while (1) {
   if ((HEAP32[i5 >> 2] | 0) == (i2 | 0)) {
    i3 = i5;
    break L3;
   }
   i5 = HEAP32[i5 + 28 >> 2] | 0;
   if ((i5 | 0) == 0) {
    i4 = 5;
    break;
   }
  } while (0);
  if ((i4 | 0) == 5) {
   i4 = _malloc(36) | 0;
   L9 : do if ((i4 | 0) == 0) {
    while (1) {
     i4 = HEAP32[5158] | 0;
     HEAP32[5158] = i4 + 0;
     if ((i4 | 0) == 0) break;
     FUNCTION_TABLE_v[i4 & 3]();
     i4 = _malloc(36) | 0;
     if ((i4 | 0) != 0) break L9;
    }
    i5 = ___cxa_allocate_exception(4) | 0;
    HEAP32[i5 >> 2] = 20472;
    ___cxa_throw(i5 | 0, 20520, 265);
   } while (0);
   HEAP32[i4 >> 2] = i2;
   i2 = i4 + 4 | 0;
   i5 = i4 + 20 | 0;
   HEAP32[i2 + 0 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   HEAP32[i5 >> 2] = i3;
   HEAP32[i4 + 24 >> 2] = 0;
   i5 = i4 + 28 | 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i4 + 32 >> 2] = 0;
   __ZN12CProfileNode5ResetEv(i4);
   HEAP32[i5 >> 2] = HEAP32[i3 + 24 >> 2];
   HEAP32[i3 + 24 >> 2] = i4;
   i3 = i4;
  }
  HEAP32[5022] = i3;
 }
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i4 = i3 + 16 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i5 + 1;
 if ((i5 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 _gettimeofday(i1 | 0, 0) | 0;
 i5 = HEAP32[5008] | 0;
 HEAP32[i3 + 12 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) * 1e6 | 0);
 STACKTOP = i1;
 return;
}
function __ZN17btConvexHullShape8addPointERK9btVector3b(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 i7 = HEAP32[i1 + 96 >> 2] | 0;
 if ((i7 | 0) == (HEAP32[i1 + 100 >> 2] | 0) ? (i5 = (i7 | 0) == 0 ? 1 : i7 << 1, (i7 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) i6 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i6 = _malloc((i5 << 4 | 3) + 16 | 0) | 0;
   if ((i6 | 0) == 0) i6 = 0; else {
    HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
    i6 = i6 + 19 & -16;
   }
   i7 = HEAP32[i1 + 96 >> 2] | 0;
  }
  if ((i7 | 0) > 0) {
   i8 = 0;
   do {
    i9 = i6 + (i8 << 4) | 0;
    i10 = (HEAP32[i1 + 104 >> 2] | 0) + (i8 << 4) | 0;
    HEAP32[i9 + 0 >> 2] = HEAP32[i10 + 0 >> 2];
    HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
    HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
    HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i7 | 0));
  }
  i7 = HEAP32[i1 + 104 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 108 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
   }
   HEAP32[i1 + 104 >> 2] = 0;
  }
  HEAP8[i1 + 108 >> 0] = 1;
  HEAP32[i1 + 104 >> 2] = i6;
  HEAP32[i1 + 100 >> 2] = i5;
  i7 = HEAP32[i1 + 96 >> 2] | 0;
 }
 i10 = (HEAP32[i1 + 104 >> 2] | 0) + (i7 << 4) | 0;
 HEAP32[i10 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 96 >> 2] = (HEAP32[i1 + 96 >> 2] | 0) + 1;
 if (!i4) {
  STACKTOP = i2;
  return;
 }
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
 STACKTOP = i2;
 return;
}
function __ZN21btConeTwistConstraint9setFramesERK11btTransformS2_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 HEAP32[i1 + 300 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 304 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 308 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 312 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 316 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i1 + 320 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i1 + 324 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i1 + 328 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i1 + 332 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i1 + 336 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i1 + 340 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i1 + 344 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i1 + 348 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i1 + 352 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i1 + 356 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i1 + 360 >> 2] = HEAP32[i3 + 60 >> 2];
 HEAP32[i1 + 364 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 368 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 372 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 376 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 380 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 384 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 388 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 392 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 396 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 400 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 404 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 408 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 412 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 416 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 420 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 424 >> 2] = HEAP32[i2 + 60 >> 2];
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
 STACKTOP = i4;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i2, i3, i5, i7) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0;
 i1 = STACKTOP;
 if ((i6 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
   STACKTOP = i1;
   return;
  }
  if ((HEAP32[i2 + 28 >> 2] | 0) == 1) {
   STACKTOP = i1;
   return;
  }
  HEAP32[i2 + 28 >> 2] = i5;
  STACKTOP = i1;
  return;
 }
 if ((i6 | 0) != (HEAP32[i2 >> 2] | 0)) {
  i6 = HEAP32[i6 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 31](i6, i2, i3, i5, i7);
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0) ? (HEAP32[i2 + 20 >> 2] | 0) != (i3 | 0) : 0) {
  HEAP32[i2 + 32 >> 2] = i5;
  if ((HEAP32[i2 + 44 >> 2] | 0) == 4) {
   STACKTOP = i1;
   return;
  }
  HEAP8[i2 + 52 >> 0] = 0;
  HEAP8[i2 + 53 >> 0] = 0;
  i6 = HEAP32[i6 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] & 7](i6, i2, i3, i3, 1, i7);
  if ((HEAP8[i2 + 53 >> 0] | 0) != 0) {
   if ((HEAP8[i2 + 52 >> 0] | 0) == 0) {
    i5 = 1;
    i4 = 13;
   }
  } else {
   i5 = 0;
   i4 = 13;
  }
  do if ((i4 | 0) == 13) {
   HEAP32[i2 + 20 >> 2] = i3;
   HEAP32[i2 + 40 >> 2] = (HEAP32[i2 + 40 >> 2] | 0) + 1;
   if ((HEAP32[i2 + 36 >> 2] | 0) == 1 ? (HEAP32[i2 + 24 >> 2] | 0) == 2 : 0) {
    HEAP8[i2 + 54 >> 0] = 1;
    if (i5) break;
   } else i4 = 16;
   if ((i4 | 0) == 16 ? i5 : 0) break;
   HEAP32[i2 + 44 >> 2] = 4;
   STACKTOP = i1;
   return;
  } while (0);
  HEAP32[i2 + 44 >> 2] = 3;
  STACKTOP = i1;
  return;
 }
 if ((i5 | 0) != 1) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i2 + 32 >> 2] = 1;
 STACKTOP = i1;
 return;
}
function __ZN11btRigidBody16addConstraintRefEP17btTypedConstraint(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 i6 = HEAP32[i1 + 488 >> 2] | 0;
 L1 : do if ((i6 | 0) > 0) {
  i7 = HEAP32[i1 + 496 >> 2] | 0;
  i5 = 0;
  while (1) {
   i8 = i5 + 1 | 0;
   if ((HEAP32[i7 + (i5 << 2) >> 2] | 0) == (i2 | 0)) break;
   if ((i8 | 0) < (i6 | 0)) i5 = i8; else break L1;
  }
  if ((i5 | 0) != (i6 | 0)) {
   i8 = i1 + 256 | 0;
   HEAP32[i8 >> 2] = 1;
   STACKTOP = i3;
   return;
  }
 } while (0);
 if ((i6 | 0) == (HEAP32[i1 + 492 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 488 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 496 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 496 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 500 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 488 >> 2] | 0;
   }
   HEAP32[i1 + 496 >> 2] = 0;
  }
  HEAP8[i1 + 500 >> 0] = 1;
  HEAP32[i1 + 496 >> 2] = i5;
  HEAP32[i1 + 492 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 496 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) != 0) HEAP32[i4 >> 2] = i2;
 HEAP32[i1 + 488 >> 2] = i6 + 1;
 i8 = i1 + 256 | 0;
 HEAP32[i8 >> 2] = 1;
 STACKTOP = i3;
 return;
}
function __ZNK25btConvexTriangleMeshShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 d5 = +HEAPF32[i4 >> 2];
 d7 = +HEAPF32[i4 + 4 >> 2];
 d6 = +HEAPF32[i4 + 8 >> 2];
 if (d5 * d5 + d7 * d7 + d6 * d6 < 9999999747378752.0e-20) {
  d5 = 1.0;
  d7 = 0.0;
  d6 = 0.0;
  d8 = 0.0;
 } else {
  d8 = 1.0 / +Math_sqrt(+(d5 * d5 + d7 * d7 + d6 * d6));
  d5 = d5 * d8;
  d7 = d7 * d8;
  d6 = d6 * d8;
  d8 = +HEAPF32[i4 + 12 >> 2];
 }
 HEAP32[i3 + 32 >> 2] = 10856;
 HEAP32[i3 + 36 >> 2] = 0;
 HEAP32[i3 + 40 >> 2] = 0;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAP32[i3 + 48 >> 2] = 0;
 HEAPF32[i3 + 52 >> 2] = -999999984306749400.0;
 HEAPF32[i3 + 56 >> 2] = d5;
 HEAPF32[i3 + 60 >> 2] = d7;
 HEAPF32[i3 + 64 >> 2] = d6;
 HEAPF32[i3 + 68 >> 2] = d8;
 HEAPF32[i3 + 16 >> 2] = 999999984306749400.0;
 HEAPF32[i3 + 20 >> 2] = 999999984306749400.0;
 HEAPF32[i3 + 24 >> 2] = 999999984306749400.0;
 HEAPF32[i3 + 28 >> 2] = 0.0;
 i4 = HEAP32[i2 + 92 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0;
 HEAPF32[i3 >> 2] = -999999984306749400.0;
 HEAPF32[i3 + 4 >> 2] = -999999984306749400.0;
 HEAPF32[i3 + 8 >> 2] = -999999984306749400.0;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viiii[i2 & 127](i4, i3 + 32 | 0, i3, i3 + 16 | 0);
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 48 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCacheC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 15272;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP8[i1 + 28 >> 0] = 0;
 HEAP8[i1 + 48 >> 0] = 1;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP8[i1 + 68 >> 0] = 1;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(51) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i5 = 0;
  do {
   i6 = HEAP32[i1 + 16 >> 2] | 0;
   HEAP32[i3 + (i5 << 4) >> 2] = HEAP32[i6 + (i5 << 4) >> 2];
   HEAP32[i3 + (i5 << 4) + 4 >> 2] = HEAP32[i6 + (i5 << 4) + 4 >> 2];
   HEAP32[i3 + (i5 << 4) + 8 >> 2] = HEAP32[i6 + (i5 << 4) + 8 >> 2];
   HEAP32[i3 + (i5 << 4) + 12 >> 2] = HEAP32[i6 + (i5 << 4) + 12 >> 2];
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i4 | 0));
 }
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i4 | 0) == 0) {
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = i3;
  HEAP32[i1 + 12 >> 2] = 2;
  __ZN28btHashedOverlappingPairCache10growTablesEv(i1);
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i4 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 12 >> 2] = 2;
 __ZN28btHashedOverlappingPairCache10growTablesEv(i1);
 STACKTOP = i2;
 return;
}
function __ZN13btGhostObject28addOverlappingObjectInternalEP17btBroadphaseProxyS1_(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i4 >> 2] | 0;
 i6 = HEAP32[i1 + 268 >> 2] | 0;
 L1 : do if ((i6 | 0) > 0) {
  i8 = HEAP32[i1 + 276 >> 2] | 0;
  i7 = 0;
  while (1) {
   i5 = i7 + 1 | 0;
   if ((HEAP32[i8 + (i7 << 2) >> 2] | 0) == (i4 | 0)) break;
   if ((i5 | 0) < (i6 | 0)) i7 = i5; else break L1;
  }
  if ((i7 | 0) != (i6 | 0)) {
   STACKTOP = i2;
   return;
  }
 } while (0);
 if ((i6 | 0) == (HEAP32[i1 + 272 >> 2] | 0) ? (i3 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i3 | 0)) : 0) {
  if ((i3 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i3 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 268 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i8 = 0;
   do {
    i7 = i5 + (i8 << 2) | 0;
    if ((i7 | 0) != 0) HEAP32[i7 >> 2] = HEAP32[(HEAP32[i1 + 276 >> 2] | 0) + (i8 << 2) >> 2];
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 276 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 280 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 268 >> 2] | 0;
   }
   HEAP32[i1 + 276 >> 2] = 0;
  }
  HEAP8[i1 + 280 >> 0] = 1;
  HEAP32[i1 + 276 >> 2] = i5;
  HEAP32[i1 + 272 >> 2] = i3;
 }
 i3 = (HEAP32[i1 + 276 >> 2] | 0) + (i6 << 2) | 0;
 if ((i3 | 0) != 0) HEAP32[i3 >> 2] = i4;
 HEAP32[i1 + 268 >> 2] = i6 + 1;
 STACKTOP = i2;
 return;
}
function __ZNK25btConvexTriangleMeshShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i3, i1, i4, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((i5 | 0) > 0) i6 = 0; else {
  STACKTOP = i2;
  return;
 }
 do {
  HEAPF32[i4 + (i6 << 4) + 12 >> 2] = -999999984306749400.0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i5 | 0));
 i6 = 0;
 do {
  i7 = i1 + (i6 << 4) | 0;
  HEAP32[i2 + 32 >> 2] = 10856;
  HEAP32[i2 + 36 >> 2] = 0;
  HEAP32[i2 + 40 >> 2] = 0;
  HEAP32[i2 + 44 >> 2] = 0;
  HEAP32[i2 + 48 >> 2] = 0;
  HEAPF32[i2 + 52 >> 2] = -999999984306749400.0;
  HEAP32[i2 + 56 >> 2] = HEAP32[i7 + 0 >> 2];
  HEAP32[i2 + 60 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i2 + 64 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i2 + 68 >> 2] = HEAP32[i7 + 12 >> 2];
  HEAPF32[i2 + 16 >> 2] = 999999984306749400.0;
  HEAPF32[i2 + 20 >> 2] = 999999984306749400.0;
  HEAPF32[i2 + 24 >> 2] = 999999984306749400.0;
  HEAPF32[i2 + 28 >> 2] = 0.0;
  i7 = HEAP32[i3 + 92 >> 2] | 0;
  i8 = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0;
  HEAPF32[i2 >> 2] = -999999984306749400.0;
  HEAPF32[i2 + 4 >> 2] = -999999984306749400.0;
  HEAPF32[i2 + 8 >> 2] = -999999984306749400.0;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiii[i8 & 127](i7, i2 + 32 | 0, i2, i2 + 16 | 0);
  i7 = i4 + (i6 << 4) | 0;
  HEAP32[i7 + 0 >> 2] = HEAP32[i2 + 36 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 40 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 44 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 48 >> 2];
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (i5 | 0));
 STACKTOP = i2;
 return;
}
function __ZNK17btConvexHullShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, i19 = 0;
 i5 = STACKTOP;
 if ((i4 | 0) > 0) i7 = 0; else {
  STACKTOP = i5;
  return;
 }
 do {
  HEAPF32[i3 + (i7 << 4) + 12 >> 2] = -999999984306749400.0;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i4 | 0));
 i7 = 0;
 do {
  d17 = +HEAPF32[i1 + 12 >> 2];
  d11 = +HEAPF32[i2 + (i7 << 4) >> 2] * d17;
  d8 = +HEAPF32[i1 + 16 >> 2];
  d12 = +HEAPF32[i2 + (i7 << 4) + 4 >> 2] * d8;
  d9 = +HEAPF32[i1 + 20 >> 2];
  d13 = +HEAPF32[i2 + (i7 << 4) + 8 >> 2] * d9;
  i14 = HEAP32[i1 + 96 >> 2] | 0;
  if ((i14 | 0) > 0) {
   i15 = HEAP32[i1 + 104 >> 2] | 0;
   i16 = 0;
   d6 = -3.4028234663852886e+38;
   i10 = -1;
   do {
    d18 = d11 * +HEAPF32[i15 + (i16 << 4) >> 2] + d12 * +HEAPF32[i15 + (i16 << 4) + 4 >> 2] + d13 * +HEAPF32[i15 + (i16 << 4) + 8 >> 2];
    i19 = d18 > d6;
    i10 = i19 ? i16 : i10;
    d6 = i19 ? d18 : d6;
    i16 = i16 + 1 | 0;
   } while ((i16 | 0) != (i14 | 0));
   d13 = +HEAPF32[i15 + (i10 << 4) + 4 >> 2] * d8;
   d18 = +HEAPF32[i15 + (i10 << 4) + 8 >> 2] * d9;
   HEAPF32[i3 + (i7 << 4) >> 2] = +HEAPF32[i15 + (i10 << 4) >> 2] * d17;
   HEAPF32[i3 + (i7 << 4) + 4 >> 2] = d13;
   HEAPF32[i3 + (i7 << 4) + 8 >> 2] = d18;
   HEAPF32[i3 + (i7 << 4) + 12 >> 2] = d6;
  } else HEAPF32[i3 + (i7 << 4) + 12 >> 2] = -999999984306749400.0;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i4 | 0));
 STACKTOP = i5;
 return;
}
function __ZN16btCollisionWorld27ClosestConvexResultCallback15addSingleResultERNS_17LocalConvexResultEb(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i2 = STACKTOP;
 HEAPF32[i4 + 4 >> 2] = +HEAPF32[i1 + 40 >> 2];
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i4 + 76 >> 2] = i3;
 if (i5) {
  HEAP32[i4 + 44 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i4 + 48 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i4 + 52 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i4 + 56 >> 2] = HEAP32[i1 + 20 >> 2];
  i5 = i4 + 60 | 0;
  i4 = i1 + 24 | 0;
  HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  d6 = +HEAPF32[i1 + 40 >> 2];
  STACKTOP = i2;
  return +d6;
 } else {
  d10 = +HEAPF32[i1 + 8 >> 2];
  d9 = +HEAPF32[i1 + 12 >> 2];
  d8 = +HEAPF32[i1 + 16 >> 2];
  d7 = +HEAPF32[i3 + 20 >> 2] * d10 + +HEAPF32[i3 + 24 >> 2] * d9 + +HEAPF32[i3 + 28 >> 2] * d8;
  d6 = +HEAPF32[i3 + 36 >> 2] * d10 + +HEAPF32[i3 + 40 >> 2] * d9 + +HEAPF32[i3 + 44 >> 2] * d8;
  HEAPF32[i4 + 44 >> 2] = +HEAPF32[i3 + 4 >> 2] * d10 + +HEAPF32[i3 + 8 >> 2] * d9 + +HEAPF32[i3 + 12 >> 2] * d8;
  HEAPF32[i4 + 48 >> 2] = d7;
  HEAPF32[i4 + 52 >> 2] = d6;
  HEAPF32[i4 + 56 >> 2] = 0.0;
  i5 = i4 + 60 | 0;
  i4 = i1 + 24 | 0;
  HEAP32[i5 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  d6 = +HEAPF32[i1 + 40 >> 2];
  STACKTOP = i2;
  return +d6;
 }
 return 0.0;
}
function __ZN21btCollisionDispatcher19defaultNearCallbackER16btBroadphasePairRS_RK16btDispatcherInfo(i5, i6, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, d8 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
 i4 = HEAP32[HEAP32[i5 + 4 >> 2] >> 2] | 0;
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 31](i6, i3, i4) | 0)) {
  STACKTOP = i2;
  return;
 }
 i7 = HEAP32[i3 + 192 >> 2] | 0;
 HEAP32[i2 + 56 >> 2] = 0;
 HEAP32[i2 + 60 >> 2] = i7;
 HEAP32[i2 + 64 >> 2] = i3;
 HEAP32[i2 + 68 >> 2] = i3 + 4;
 HEAP32[i2 + 72 >> 2] = -1;
 HEAP32[i2 + 76 >> 2] = -1;
 i7 = HEAP32[i4 + 192 >> 2] | 0;
 HEAP32[i2 + 32 >> 2] = 0;
 HEAP32[i2 + 36 >> 2] = i7;
 HEAP32[i2 + 40 >> 2] = i4;
 HEAP32[i2 + 44 >> 2] = i4 + 4;
 HEAP32[i2 + 48 >> 2] = -1;
 HEAP32[i2 + 52 >> 2] = -1;
 i7 = HEAP32[i5 + 8 >> 2] | 0;
 if ((i7 | 0) == 0) {
  i7 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 31](i6, i2 + 56 | 0, i2 + 32 | 0, 0) | 0;
  HEAP32[i5 + 8 >> 2] = i7;
  if ((i7 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[i2 >> 2] = 13504;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = i2 + 56;
 HEAP32[i2 + 12 >> 2] = i2 + 32;
 if ((HEAP32[i1 + 8 >> 2] | 0) == 1) {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] & 31](i7, i2 + 56 | 0, i2 + 32 | 0, i1, i2);
  STACKTOP = i2;
  return;
 }
 d8 = +FUNCTION_TABLE_diiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 15](i7, i3, i4, i1, i2);
 if (!(+HEAPF32[i1 + 12 >> 2] > d8)) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 + 12 >> 2] = d8;
 STACKTOP = i2;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver33solveGroupCacheFriendlyIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw(i8, i4, i5, i6, i7, i2, i9, i10, i11) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(4112);
 FUNCTION_TABLE_viiiiiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2] & 1](i8, i4, i5, i6, i7, i2, i9, i10, i11);
 i12 = HEAP32[i8 + 184 >> 2] | 0;
 i3 = HEAP32[i10 + 20 >> 2] | 0;
 i3 = (i12 | 0) > (i3 | 0) ? i12 : i3;
 if ((i3 | 0) > 0) {
  i12 = 0;
  do {
   +FUNCTION_TABLE_diiiiiiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 3](i8, i12, i4, i5, i6, i7, i2, i9, i10, i11);
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) < (i3 | 0));
 }
 i2 = HEAP32[5022] | 0;
 i12 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i12;
 if ((i12 | 0) != 0) {
  STACKTOP = i1;
  return 0.0;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i12 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i12 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return 0.0;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return 0.0;
}
function __ZNK16btCollisionShape21calculateTemporalAabbERK11btTransformRK9btVector3S5_fRS3_S6_(i1, i16, i15, i2, i4, i3) {
 i1 = i1 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i16, i4, i3);
 d13 = +HEAPF32[i3 >> 2];
 d11 = +HEAPF32[i3 + 4 >> 2];
 d6 = +HEAPF32[i3 + 8 >> 2];
 d8 = +HEAPF32[i4 >> 2];
 d12 = +HEAPF32[i4 + 4 >> 2];
 d7 = +HEAPF32[i4 + 8 >> 2];
 d14 = +HEAPF32[i15 >> 2];
 d10 = +HEAPF32[i15 + 4 >> 2];
 d9 = +HEAPF32[i15 + 8 >> 2];
 if (d14 > 0.0) d13 = d13 + d14; else d8 = d8 + d14;
 if (d10 > 0.0) d11 = d11 + d10; else d12 = d12 + d10;
 if (d9 > 0.0) d6 = d6 + d9; else d7 = d7 + d9;
 d9 = +HEAPF32[i2 >> 2];
 d10 = +HEAPF32[i2 + 4 >> 2];
 d14 = +HEAPF32[i2 + 8 >> 2];
 d14 = +Math_sqrt(+(d9 * d9 + d10 * d10 + d14 * d14));
 d14 = d14 * +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 15](i1);
 HEAPF32[i4 >> 2] = d8;
 HEAPF32[i4 + 4 >> 2] = d12;
 HEAPF32[i4 + 8 >> 2] = d7;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 HEAPF32[i3 >> 2] = d13;
 HEAPF32[i3 + 4 >> 2] = d11;
 HEAPF32[i3 + 8 >> 2] = d6;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 HEAPF32[i4 >> 2] = +HEAPF32[i4 >> 2] - d14;
 HEAPF32[i4 + 4 >> 2] = +HEAPF32[i4 + 4 >> 2] - d14;
 HEAPF32[i4 + 8 >> 2] = +HEAPF32[i4 + 8 >> 2] - d14;
 HEAPF32[i3 >> 2] = d14 + +HEAPF32[i3 >> 2];
 HEAPF32[i3 + 4 >> 2] = d14 + +HEAPF32[i3 + 4 >> 2];
 HEAPF32[i3 + 8 >> 2] = d14 + +HEAPF32[i3 + 8 >> 2];
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btPersistentManifold_btPersistentManifold_0() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(791) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 HEAP32[i2 >> 2] = 1025;
 HEAP32[i2 + 116 >> 2] = 0;
 HEAP8[i2 + 120 >> 0] = 0;
 i3 = i2 + 124 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i2 + 300 >> 2] = 0;
 HEAP8[i2 + 304 >> 0] = 0;
 i3 = i2 + 308 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i2 + 484 >> 2] = 0;
 HEAP8[i2 + 488 >> 0] = 0;
 i3 = i2 + 492 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i2 + 668 >> 2] = 0;
 HEAP8[i2 + 672 >> 0] = 0;
 i3 = i2 + 676 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i2 + 740 >> 2] = 0;
 HEAP32[i2 + 744 >> 2] = 0;
 HEAP32[i2 + 748 >> 2] = 0;
 HEAP32[i2 + 768 >> 2] = 0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK15btCylinderShape21calculateLocalInertiaEfR9btVector3(i4, d1, i3) {
 i4 = i4 | 0;
 d1 = +d1;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 + 0 >> 2] = HEAP32[i4 + 28 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 36 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 40 >> 2];
 d9 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 HEAPF32[i2 >> 2] = d9 + +HEAPF32[i2 >> 2];
 HEAPF32[i2 + 4 >> 2] = d6 + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i2 + 8 >> 2] = d8 + +HEAPF32[i2 + 8 >> 2];
 i4 = HEAP32[i4 + 52 >> 2] | 0;
 if ((i4 | 0) == 0) {
  i5 = 0;
  i7 = 1;
 } else if ((i4 | 0) == 2) {
  i5 = 2;
  i7 = 0;
 } else {
  i5 = 1;
  i7 = 0;
 }
 d6 = +HEAPF32[i2 + (i7 << 2) >> 2];
 d8 = +HEAPF32[i2 + (i5 << 2) >> 2];
 d8 = d1 * .25 * d6 * d6 + d1 / 12.0 * d8 * d8 * 4.0;
 if ((i4 | 0) == 0) {
  HEAPF32[i3 >> 2] = d1 * .5 * d6 * d6;
  HEAPF32[i3 + 4 >> 2] = d8;
  HEAPF32[i3 + 8 >> 2] = d8;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 } else if ((i4 | 0) == 2) {
  HEAPF32[i3 >> 2] = d8;
  HEAPF32[i3 + 4 >> 2] = d8;
  HEAPF32[i3 + 8 >> 2] = d1 * .5 * d6 * d6;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 } else {
  HEAPF32[i3 >> 2] = d8;
  HEAPF32[i3 + 4 >> 2] = d1 * .5 * d6 * d6;
  HEAPF32[i3 + 8 >> 2] = d8;
  HEAPF32[i3 + 12 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 }
}
function __ZN20btConvexHullInternalD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 92 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 96 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 92 >> 2] = 0;
 }
 HEAP8[i1 + 96 >> 0] = 1;
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP32[i1 + 84 >> 2] = 0;
 HEAP32[i1 + 88 >> 2] = 0;
 i3 = HEAP32[i1 + 64 >> 2] | 0;
 if ((i3 | 0) != 0) do {
  HEAP32[i1 + 64 >> 2] = HEAP32[i3 + 8 >> 2];
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
  }
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
  i3 = HEAP32[i1 + 64 >> 2] | 0;
 } while ((i3 | 0) != 0);
 i4 = HEAP32[i1 + 48 >> 2] | 0;
 if ((i4 | 0) != 0) do {
  HEAP32[i1 + 48 >> 2] = HEAP32[i4 + 8 >> 2];
  i3 = HEAP32[i4 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i4 + -4 >> 2] | 0);
  i4 = HEAP32[i1 + 48 >> 2] | 0;
 } while ((i4 | 0) != 0);
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 do {
  HEAP32[i1 + 32 >> 2] = HEAP32[i3 + 8 >> 2];
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
  }
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
  i3 = HEAP32[i1 + 32 >> 2] | 0;
 } while ((i3 | 0) != 0);
 STACKTOP = i2;
 return;
}
function __ZN23btGeneric6DofConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i3 + 1308 >> 0] | 0) != 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 __ZN23btGeneric6DofConstraint19calculateTransformsERK11btTransformS2_(i3, (HEAP32[i3 + 28 >> 2] | 0) + 4 | 0, (HEAP32[i3 + 32 >> 2] | 0) + 4 | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 6;
 if ((HEAP32[i3 + 856 >> 2] | 0) == 0 ? (HEAP8[i3 + 788 >> 0] | 0) == 0 : 0) {
  i5 = 0;
  i4 = 6;
 } else {
  HEAP32[i1 >> 2] = 1;
  HEAP32[i1 + 4 >> 2] = 5;
  i5 = 1;
  i4 = 5;
 }
 if (!((HEAP32[i3 + 860 >> 2] | 0) == 0 ? (HEAP8[i3 + 789 >> 0] | 0) == 0 : 0)) {
  i5 = i5 + 1 | 0;
  HEAP32[i1 >> 2] = i5;
  i4 = i4 + -1 | 0;
  HEAP32[i1 + 4 >> 2] = i4;
 }
 if (!((HEAP32[i3 + 864 >> 2] | 0) == 0 ? (HEAP8[i3 + 790 >> 0] | 0) == 0 : 0)) {
  HEAP32[i1 >> 2] = i5 + 1;
  HEAP32[i1 + 4 >> 2] = i4 + -1;
 }
 if (__ZN23btGeneric6DofConstraint21testAngularLimitMotorEi(i3, 0) | 0) {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + -1;
 }
 if (__ZN23btGeneric6DofConstraint21testAngularLimitMotorEi(i3, 1) | 0) {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + -1;
 }
 if (!(__ZN23btGeneric6DofConstraint21testAngularLimitMotorEi(i3, 2) | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + -1;
 STACKTOP = i2;
 return;
}
function __ZN20btConvexHullInternal4PoolINS_4EdgeEE9newObjectEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i4 | 0) == 0) {
  i6 = HEAP32[i2 + 4 >> 2] | 0;
  if ((i6 | 0) == 0) {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i4 = _malloc(31) | 0;
   if ((i4 | 0) != 0 ? (i3 = i4 + 19 & -16, HEAP32[i3 + -4 >> 2] = i4, (i4 + 19 & -16 | 0) != 0) : 0) {
    i6 = HEAP32[i2 + 12 >> 2] | 0;
    HEAP32[i3 + 4 >> 2] = i6;
    HEAP32[i3 + 8 >> 2] = 0;
    HEAP32[5004] = (HEAP32[5004] | 0) + 1;
    i3 = _malloc((i6 * 24 | 3) + 16 | 0) | 0;
    if ((i3 | 0) == 0) i3 = 0; else {
     HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
     i3 = i3 + 19 & -16;
    }
    HEAP32[(i4 + 19 & -16) >> 2] = i3;
    i6 = i4 + 19 & -16;
   } else i6 = 0;
   HEAP32[i6 + 8 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i2 >> 2] = i6;
  } else HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 8 >> 2];
  i5 = HEAP32[i6 + 4 >> 2] | 0;
  if ((i5 | 0) > 0) {
   i3 = 0;
   i4 = HEAP32[i6 >> 2] | 0;
   do {
    i3 = i3 + 1 | 0;
    i7 = i4;
    i4 = i4 + 24 | 0;
    HEAP32[i7 >> 2] = (i3 | 0) < (i5 | 0) ? i4 : 0;
   } while ((i3 | 0) != (i5 | 0));
  }
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i2 + 8 >> 2] = HEAP32[i4 >> 2];
  if ((i4 | 0) == 0) {
   i7 = 0;
   STACKTOP = i1;
   return i7 | 0;
  }
 } else HEAP32[i2 + 8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 i7 = i4;
 STACKTOP = i1;
 return i7 | 0;
}
function __ZN23btDiscreteDynamicsWorld13addConstraintEP17btTypedConstraintb(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i7 = HEAP32[i3 + 212 >> 2] | 0;
 if ((i7 | 0) == (HEAP32[i3 + 216 >> 2] | 0) ? (i5 = (i7 | 0) == 0 ? 1 : i7 << 1, (i7 | 0) < (i5 | 0)) : 0) {
  if ((i5 | 0) == 0) i6 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i6 = _malloc((i5 << 2 | 3) + 16 | 0) | 0;
   if ((i6 | 0) == 0) i6 = 0; else {
    HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
    i6 = i6 + 19 & -16;
   }
   i7 = HEAP32[i3 + 212 >> 2] | 0;
  }
  if ((i7 | 0) > 0) {
   i8 = 0;
   do {
    i9 = i6 + (i8 << 2) | 0;
    if ((i9 | 0) != 0) HEAP32[i9 >> 2] = HEAP32[(HEAP32[i3 + 220 >> 2] | 0) + (i8 << 2) >> 2];
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i7 | 0));
  }
  i8 = HEAP32[i3 + 220 >> 2] | 0;
  if ((i8 | 0) != 0) {
   if ((HEAP8[i3 + 224 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i8 + -4 >> 2] | 0);
    i7 = HEAP32[i3 + 212 >> 2] | 0;
   }
   HEAP32[i3 + 220 >> 2] = 0;
  }
  HEAP8[i3 + 224 >> 0] = 1;
  HEAP32[i3 + 220 >> 2] = i6;
  HEAP32[i3 + 216 >> 2] = i5;
 }
 i5 = (HEAP32[i3 + 220 >> 2] | 0) + (i7 << 2) | 0;
 if ((i5 | 0) != 0) HEAP32[i5 >> 2] = i1;
 HEAP32[i3 + 212 >> 2] = i7 + 1;
 if (!i4) {
  STACKTOP = i2;
  return;
 }
 __ZN11btRigidBody16addConstraintRefEP17btTypedConstraint(HEAP32[i1 + 28 >> 2] | 0, i1);
 __ZN11btRigidBody16addConstraintRefEP17btTypedConstraint(HEAP32[i1 + 32 >> 2] | 0, i1);
 STACKTOP = i2;
 return;
}
function __ZN9btHashMapI9btHashPtrP16btCollisionShapeED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 72 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 76 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 72 >> 2] = 0;
 }
 HEAP8[i1 + 76 >> 0] = 1;
 HEAP32[i1 + 72 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 56 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 52 >> 2] = 0;
 }
 HEAP8[i1 + 56 >> 0] = 1;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 32 >> 2] = 0;
 }
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i3 = i1 + 8 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP8[i1 + 16 >> 0] = 1;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallback28internalProcessTriangleIndexEPS2_ii(i2, i5, i4, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0;
 i3 = STACKTOP;
 d8 = +HEAPF32[i5 >> 2];
 d7 = +HEAPF32[i5 + 16 >> 2];
 d9 = d8 < d7 ? d8 : d7;
 d6 = +HEAPF32[i5 + 32 >> 2];
 if ((d9 < d6 ? d9 : d6) > +HEAPF32[i2 + 24 >> 2]) {
  STACKTOP = i3;
  return;
 }
 i10 = d8 > d7 ? i5 : i5 + 16 | 0;
 if (+HEAPF32[(+HEAPF32[i10 >> 2] > d6 ? i10 : i5 + 32 | 0) >> 2] < +HEAPF32[i2 + 8 >> 2]) {
  STACKTOP = i3;
  return;
 }
 d6 = +HEAPF32[i5 + 8 >> 2];
 d7 = +HEAPF32[i5 + 24 >> 2];
 d9 = d6 < d7 ? d6 : d7;
 d8 = +HEAPF32[i5 + 40 >> 2];
 if ((d9 < d8 ? d9 : d8) > +HEAPF32[i2 + 32 >> 2]) {
  STACKTOP = i3;
  return;
 }
 i10 = d6 > d7 ? i5 + 8 | 0 : i5 + 24 | 0;
 if (+HEAPF32[(+HEAPF32[i10 >> 2] > d8 ? i10 : i5 + 40 | 0) >> 2] < +HEAPF32[i2 + 16 >> 2]) {
  STACKTOP = i3;
  return;
 }
 d6 = +HEAPF32[i5 + 4 >> 2];
 d7 = +HEAPF32[i5 + 20 >> 2];
 d9 = d6 < d7 ? d6 : d7;
 d8 = +HEAPF32[i5 + 36 >> 2];
 if ((d9 < d8 ? d9 : d8) > +HEAPF32[i2 + 28 >> 2]) {
  STACKTOP = i3;
  return;
 }
 i10 = d6 > d7 ? i5 + 4 | 0 : i5 + 20 | 0;
 if (+HEAPF32[(+HEAPF32[i10 >> 2] > d8 ? i10 : i5 + 36 | 0) >> 2] < +HEAPF32[i2 + 12 >> 2]) {
  STACKTOP = i3;
  return;
 }
 i10 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 127](i10, i5, i4, i1);
 STACKTOP = i3;
 return;
}
function __ZN20btAxisSweep3InternalItED2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 5216;
 if ((HEAP32[i2 + 108 >> 2] | 0) != 0) {
  i3 = HEAP32[i2 + 112 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
  i3 = HEAP32[i2 + 112 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  i3 = HEAP32[i2 + 108 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
  i3 = HEAP32[i2 + 108 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
 }
 i3 = HEAP32[i2 + 88 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 84 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 80 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i2 + 60 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 if ((HEAP8[i2 + 100 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i2 + 92 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i2 = HEAP32[i2 + 92 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN15btCompoundShapeC2Eb(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 >> 2] = 9512;
 HEAP8[i1 + 28 >> 0] = 1;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAPF32[i1 + 32 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 36 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 40 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAPF32[i1 + 48 >> 2] = -999999984306749400.0;
 HEAPF32[i1 + 52 >> 2] = -999999984306749400.0;
 HEAPF32[i1 + 56 >> 2] = -999999984306749400.0;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 1;
 HEAPF32[i1 + 72 >> 2] = 0.0;
 HEAPF32[i1 + 76 >> 2] = 1.0;
 HEAPF32[i1 + 80 >> 2] = 1.0;
 HEAPF32[i1 + 84 >> 2] = 1.0;
 HEAPF32[i1 + 88 >> 2] = 0.0;
 HEAP32[i1 + 4 >> 2] = 31;
 if (!i4) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(79) | 0;
 if ((i4 | 0) != 0 ? (i3 = i4 + 19 & -16, HEAP32[i3 + -4 >> 2] = i4, (i4 + 19 & -16 | 0) != 0) : 0) {
  HEAP8[i3 + 36 >> 0] = 1;
  HEAP32[i3 + 32 >> 2] = 0;
  HEAP32[i3 + 24 >> 2] = 0;
  HEAP32[i3 + 28 >> 2] = 0;
  HEAP8[i3 + 56 >> 0] = 1;
  HEAP32[i3 + 52 >> 2] = 0;
  HEAP32[i3 + 44 >> 2] = 0;
  HEAP32[i3 + 48 >> 2] = 0;
  HEAP32[(i4 + 19 & -16) >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = -1;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP32[i3 + 16 >> 2] = 0;
  i3 = i4 + 19 & -16;
 } else i3 = 0;
 HEAP32[i1 + 64 >> 2] = i3;
 STACKTOP = i2;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i2 + 12 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP8[i2 + 8 >> 0] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 8 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 12 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) != 0) HEAP32[i4 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 4 >> 2] = i6 + 1;
 STACKTOP = i3;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i2 + 12 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP8[i2 + 8 >> 0] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 8 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 12 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) != 0) HEAP32[i4 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 4 >> 2] = i6 + 1;
 STACKTOP = i3;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i2 + 12 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP8[i2 + 8 >> 0] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 8 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 12 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) != 0) HEAP32[i4 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 4 >> 2] = i6 + 1;
 STACKTOP = i3;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i2 + 12 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP8[i2 + 8 >> 0] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 8 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 12 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) != 0) HEAP32[i4 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 4 >> 2] = i6 + 1;
 STACKTOP = i3;
 return;
}
function __ZN17btHingeConstraint13getHingeAngleERK11btTransformS2_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0;
 d21 = +HEAPF32[i1 + 552 >> 2];
 d20 = +HEAPF32[i1 + 568 >> 2];
 d19 = +HEAPF32[i1 + 584 >> 2];
 d18 = +HEAPF32[i3 >> 2];
 d17 = +HEAPF32[i3 + 4 >> 2];
 d16 = +HEAPF32[i3 + 8 >> 2];
 d14 = +HEAPF32[i3 + 16 >> 2];
 d13 = +HEAPF32[i3 + 20 >> 2];
 d12 = +HEAPF32[i3 + 24 >> 2];
 d10 = +HEAPF32[i3 + 32 >> 2];
 d8 = +HEAPF32[i3 + 36 >> 2];
 d6 = +HEAPF32[i3 + 40 >> 2];
 d9 = +HEAPF32[i1 + 556 >> 2];
 d7 = +HEAPF32[i1 + 572 >> 2];
 d5 = +HEAPF32[i1 + 588 >> 2];
 d23 = +HEAPF32[i1 + 620 >> 2];
 d22 = +HEAPF32[i1 + 636 >> 2];
 d4 = +HEAPF32[i1 + 652 >> 2];
 d15 = d23 * +HEAPF32[i2 >> 2] + d22 * +HEAPF32[i2 + 4 >> 2] + d4 * +HEAPF32[i2 + 8 >> 2];
 d11 = d23 * +HEAPF32[i2 + 16 >> 2] + d22 * +HEAPF32[i2 + 20 >> 2] + d4 * +HEAPF32[i2 + 24 >> 2];
 d4 = d23 * +HEAPF32[i2 + 32 >> 2] + d22 * +HEAPF32[i2 + 36 >> 2] + d4 * +HEAPF32[i2 + 40 >> 2];
 d4 = +Math_atan2(+((d21 * d18 + d20 * d17 + d19 * d16) * d15 + (d21 * d14 + d20 * d13 + d19 * d12) * d11 + (d21 * d10 + d20 * d8 + d19 * d6) * d4), +((d18 * d9 + d17 * d7 + d16 * d5) * d15 + (d14 * d9 + d13 * d7 + d12 * d5) * d11 + (d10 * d9 + d8 * d7 + d6 * d5) * d4));
 return +(d4 * +HEAPF32[i1 + 732 >> 2]);
}
function __ZN16btRaycastVehicle9debugDrawEP12btIDebugDraw(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((HEAP32[i1 + 136 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = 0;
 do {
  i9 = HEAP32[i1 + 144 >> 2] | 0;
  HEAPF32[i2 + 32 >> 2] = (HEAP8[i9 + (i4 * 284 | 0) + 84 >> 0] | 0) == 0 ? 1.0 : 0.0;
  HEAPF32[i2 + 36 >> 2] = 0.0;
  HEAPF32[i2 + 40 >> 2] = 1.0;
  HEAPF32[i2 + 44 >> 2] = 0.0;
  i8 = i9 + (i4 * 284 | 0) + 140 | 0;
  HEAP32[i2 + 16 >> 2] = HEAP32[i8 + 0 >> 2];
  HEAP32[i2 + 20 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i2 + 24 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i2 + 28 >> 2] = HEAP32[i8 + 12 >> 2];
  i8 = HEAP32[i1 + 120 >> 2] | 0;
  i5 = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0;
  d7 = +HEAPF32[i9 + (i4 * 284 | 0) + (i8 << 2) + 108 >> 2] + +HEAPF32[i2 + 20 >> 2];
  d6 = +HEAPF32[i9 + (i4 * 284 | 0) + (i8 << 2) + 124 >> 2] + +HEAPF32[i2 + 24 >> 2];
  HEAPF32[i2 >> 2] = +HEAPF32[i9 + (i4 * 284 | 0) + (i8 << 2) + 92 >> 2] + +HEAPF32[i2 + 16 >> 2];
  HEAPF32[i2 + 4 >> 2] = d7;
  HEAPF32[i2 + 8 >> 2] = d6;
  HEAPF32[i2 + 12 >> 2] = 0.0;
  FUNCTION_TABLE_viiii[i5 & 127](i3, i2 + 16 | 0, i2, i2 + 32 | 0);
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i2 + 16 | 0, (HEAP32[i1 + 144 >> 2] | 0) + (i4 * 284 | 0) + 16 | 0, i2 + 32 | 0);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i1 + 136 >> 2] | 0));
 STACKTOP = i2;
 return;
}
function __ZN23btConvexConvexAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i2 + 20 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP8[i2 + 16 >> 0] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 8 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 12 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) != 0) HEAP32[i4 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 4 >> 2] = i6 + 1;
 STACKTOP = i3;
 return;
}
function __ZN16btDbvtBroadphase12destroyProxyEP17btBroadphaseProxyP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 if ((HEAP32[i2 + 60 >> 2] | 0) == 2) {
  i5 = HEAP32[i2 + 48 >> 2] | 0;
  __ZL10removeleafP6btDbvtP10btDbvtNode(i1 + 64 | 0, i5) | 0;
  i6 = HEAP32[i1 + 68 >> 2] | 0;
  if ((i6 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i6 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 68 >> 2] = i5;
  HEAP32[i1 + 76 >> 2] = (HEAP32[i1 + 76 >> 2] | 0) + -1;
 } else {
  i5 = HEAP32[i2 + 48 >> 2] | 0;
  __ZL10removeleafP6btDbvtP10btDbvtNode(i1 + 4 | 0, i5) | 0;
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  if ((i6 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i6 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 8 >> 2] = i5;
  HEAP32[i1 + 16 >> 2] = (HEAP32[i1 + 16 >> 2] | 0) + -1;
 }
 i6 = HEAP32[i2 + 52 >> 2] | 0;
 i5 = HEAP32[i2 + 56 >> 2] | 0;
 if ((i6 | 0) == 0) HEAP32[i1 + (HEAP32[i2 + 60 >> 2] << 2) + 124 >> 2] = i5; else HEAP32[i6 + 56 >> 2] = i5;
 i5 = HEAP32[i2 + 56 >> 2] | 0;
 if ((i5 | 0) != 0) HEAP32[i5 + 52 >> 2] = HEAP32[i2 + 52 >> 2];
 i6 = HEAP32[i1 + 136 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 127](i6, i2, i3);
 if ((i2 | 0) == 0) {
  i6 = i1 + 194 | 0;
  HEAP8[i6 >> 0] = 1;
  STACKTOP = i4;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 i6 = i1 + 194 | 0;
 HEAP8[i6 >> 0] = 1;
 STACKTOP = i4;
 return;
}
function __ZN17btHingeConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0, d6 = 0.0;
 i2 = STACKTOP;
 if ((HEAP8[i3 + 738 >> 0] | 0) != 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = 5;
 HEAP32[i1 + 4 >> 2] = 1;
 d5 = +__ZN17btHingeConstraint13getHingeAngleERK11btTransformS2_(i3, (HEAP32[i3 + 28 >> 2] | 0) + 4 | 0, (HEAP32[i3 + 32 >> 2] | 0) + 4 | 0);
 HEAPF32[i3 + 728 >> 2] = d5;
 HEAPF32[i3 + 708 >> 2] = 0.0;
 HEAPF32[i3 + 712 >> 2] = 0.0;
 HEAP8[i3 + 716 >> 0] = 0;
 do if (+HEAPF32[i3 + 692 >> 2] >= 0.0) {
  d5 = +_fmodf(+(d5 - +HEAPF32[i3 + 688 >> 2]), 6.2831854820251465);
  if (!(d5 < -3.1415927410125732)) {
   if (d5 > 3.1415927410125732) d5 = d5 + -6.2831854820251465;
  } else d5 = d5 + 6.2831854820251465;
  d6 = +HEAPF32[i3 + 692 >> 2];
  if (d5 < -d6) {
   HEAP8[i3 + 716 >> 0] = 1;
   HEAPF32[i3 + 708 >> 2] = -(d5 + d6);
   HEAPF32[i3 + 712 >> 2] = 1.0;
   break;
  }
  if (!(d5 > d6)) if ((HEAP8[i3 + 716 >> 0] | 0) == 0) {
   i4 = 13;
   break;
  } else break; else {
   HEAP8[i3 + 716 >> 0] = 1;
   HEAPF32[i3 + 708 >> 2] = d6 - d5;
   HEAPF32[i3 + 712 >> 2] = -1.0;
   break;
  }
 } else i4 = 13; while (0);
 if ((i4 | 0) == 13 ? (HEAP8[i3 + 737 >> 0] | 0) == 0 : 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + -1;
 STACKTOP = i2;
 return;
}
function __ZN23btGeneric6DofConstraint21testAngularLimitMotorEi(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0;
 i2 = STACKTOP;
 d3 = +__Z21btAdjustAngleToLimitsfff(+HEAPF32[i6 + (i7 << 2) + 1192 >> 2], +HEAPF32[i6 + (i7 << 6) + 868 >> 2], +HEAPF32[i6 + (i7 << 6) + 872 >> 2]);
 HEAPF32[i6 + (i7 << 6) + 920 >> 2] = d3;
 d4 = +HEAPF32[i6 + (i7 << 6) + 868 >> 2];
 d5 = +HEAPF32[i6 + (i7 << 6) + 872 >> 2];
 do if (!(d4 > d5)) {
  if (d4 > d3) {
   HEAP32[i6 + (i7 << 6) + 924 >> 2] = 1;
   HEAPF32[i6 + (i7 << 6) + 916 >> 2] = d3 - d4;
   if (d3 - d4 > 3.1415927410125732) {
    HEAPF32[i6 + (i7 << 6) + 916 >> 2] = d3 - d4 + -6.2831854820251465;
    break;
   }
   if (!(d3 - d4 < -3.1415927410125732)) break;
   HEAPF32[i6 + (i7 << 6) + 916 >> 2] = d3 - d4 + 6.2831854820251465;
   break;
  }
  if (!(d5 < d3)) {
   HEAP32[i6 + (i7 << 6) + 924 >> 2] = 0;
   i1 = 14;
   break;
  }
  HEAP32[i6 + (i7 << 6) + 924 >> 2] = 2;
  HEAPF32[i6 + (i7 << 6) + 916 >> 2] = d3 - d5;
  if (d3 - d5 > 3.1415927410125732) {
   HEAPF32[i6 + (i7 << 6) + 916 >> 2] = d3 - d5 + -6.2831854820251465;
   break;
  }
  if (d3 - d5 < -3.1415927410125732) HEAPF32[i6 + (i7 << 6) + 916 >> 2] = d3 - d5 + 6.2831854820251465;
 } else {
  HEAP32[i6 + (i7 << 6) + 924 >> 2] = 0;
  i1 = 14;
 } while (0);
 if ((i1 | 0) == 14 ? (HEAP8[i6 + (i7 << 6) + 912 >> 0] | 0) == 0 : 0) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i7 = 1;
 STACKTOP = i2;
 return i7 | 0;
}
function ___dynamic_cast(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = i5 + (HEAP32[i3 + -8 >> 2] | 0) | 0;
 i3 = HEAP32[i3 + -4 >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i1 + 4 >> 2] = i5;
 HEAP32[i1 + 8 >> 2] = 20728;
 i6 = i1 + 12 | 0;
 i5 = i6 + 40 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i5 | 0));
 HEAP16[i1 + 52 >> 1] = 0;
 HEAP8[i1 + 54 >> 0] = 0;
 do if ((i3 | 0) == (i2 | 0)) {
  HEAP32[i1 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 7](i3, i1, i4, i4, 1, 0);
  i2 = (HEAP32[i1 + 24 >> 2] | 0) == 1 ? i4 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 31](i3, i1, i4, 1, 0);
  i2 = HEAP32[i1 + 36 >> 2] | 0;
  if ((i2 | 0) == 0) {
   if ((HEAP32[i1 + 40 >> 2] | 0) != 1) {
    i2 = 0;
    break;
   }
   if ((HEAP32[i1 + 28 >> 2] | 0) != 1) {
    i2 = 0;
    break;
   }
   i2 = (HEAP32[i1 + 32 >> 2] | 0) == 1 ? HEAP32[i1 + 20 >> 2] | 0 : 0;
   break;
  } else if ((i2 | 0) != 1) {
   i2 = 0;
   break;
  }
  if ((HEAP32[i1 + 24 >> 2] | 0) != 1) {
   if ((HEAP32[i1 + 40 >> 2] | 0) != 0) {
    i2 = 0;
    break;
   }
   if ((HEAP32[i1 + 28 >> 2] | 0) != 1) {
    i2 = 0;
    break;
   }
   if ((HEAP32[i1 + 32 >> 2] | 0) != 1) {
    i2 = 0;
    break;
   }
  }
  i2 = HEAP32[i1 + 16 >> 2] | 0;
 } while (0);
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK15btCylinderShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0;
 i5 = STACKTOP;
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d12 = d8 + +HEAPF32[i4 + 28 >> 2];
 d10 = d8 + +HEAPF32[i4 + 32 >> 2];
 d8 = d8 + +HEAPF32[i4 + 36 >> 2];
 d20 = +Math_abs(+(+HEAPF32[i3 >> 2]));
 d19 = +Math_abs(+(+HEAPF32[i3 + 4 >> 2]));
 d18 = +Math_abs(+(+HEAPF32[i3 + 8 >> 2]));
 d16 = +Math_abs(+(+HEAPF32[i3 + 16 >> 2]));
 d15 = +Math_abs(+(+HEAPF32[i3 + 20 >> 2]));
 d14 = +Math_abs(+(+HEAPF32[i3 + 24 >> 2]));
 d11 = +Math_abs(+(+HEAPF32[i3 + 32 >> 2]));
 d9 = +Math_abs(+(+HEAPF32[i3 + 36 >> 2]));
 d7 = +Math_abs(+(+HEAPF32[i3 + 40 >> 2]));
 d17 = +HEAPF32[i3 + 48 >> 2];
 d13 = +HEAPF32[i3 + 52 >> 2];
 d6 = +HEAPF32[i3 + 56 >> 2];
 HEAPF32[i2 >> 2] = d17 - (d12 * d20 + d10 * d19 + d8 * d18);
 HEAPF32[i2 + 4 >> 2] = d13 - (d12 * d16 + d10 * d15 + d8 * d14);
 HEAPF32[i2 + 8 >> 2] = d6 - (d12 * d11 + d10 * d9 + d8 * d7);
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d12 * d20 + d10 * d19 + d8 * d18 + d17;
 HEAPF32[i1 + 4 >> 2] = d12 * d16 + d10 * d15 + d8 * d14 + d13;
 HEAPF32[i1 + 8 >> 2] = d12 * d11 + d10 * d9 + d8 * d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i7, i5, i4, i3, i2, i1) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 if ((i7 | 0) == (HEAP32[i5 + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i5, i4, i3, i2);
  STACKTOP = i6;
  return;
 }
 i8 = HEAP8[i5 + 52 >> 0] | 0;
 i9 = HEAP8[i5 + 53 >> 0] | 0;
 i10 = HEAP32[i7 + 12 >> 2] | 0;
 HEAP8[i5 + 52 >> 0] = 0;
 HEAP8[i5 + 53 >> 0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i7 + 16 | 0, i5, i4, i3, i2, i1);
 L5 : do if ((i10 | 0) > 1) {
  i11 = i7 + 24 | 0;
  do {
   if ((HEAP8[i5 + 54 >> 0] | 0) != 0) break L5;
   if ((HEAP8[i5 + 52 >> 0] | 0) == 0) {
    if ((HEAP8[i5 + 53 >> 0] | 0) != 0 ? (HEAP32[i7 + 8 >> 2] & 1 | 0) == 0 : 0) break L5;
   } else {
    if ((HEAP32[i5 + 24 >> 2] | 0) == 1) break L5;
    if ((HEAP32[i7 + 8 >> 2] & 2 | 0) == 0) break L5;
   }
   HEAP8[i5 + 52 >> 0] = 0;
   HEAP8[i5 + 53 >> 0] = 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i11, i5, i4, i3, i2, i1);
   i11 = i11 + 8 | 0;
  } while (i11 >>> 0 < (i7 + (i10 << 3) + 16 | 0) >>> 0);
 } while (0);
 HEAP8[i5 + 52 >> 0] = i8;
 HEAP8[i5 + 53 >> 0] = i9;
 STACKTOP = i6;
 return;
}
function __ZN20btAlignedObjectArrayIiEC2ERKS0_(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 HEAP8[i5 + 16 >> 0] = 1;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i1 | 0) <= 0) {
  HEAP32[i5 + 4 >> 2] = i1;
  STACKTOP = i3;
  return;
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc((i1 << 2 | 3) + 16 | 0) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 i7 = HEAP32[i5 + 4 >> 2] | 0;
 if ((i7 | 0) > 0) {
  i6 = 0;
  do {
   i8 = i4 + (i6 << 2) | 0;
   if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + (i6 << 2) >> 2];
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i7 | 0));
 }
 i6 = HEAP32[i5 + 12 >> 2] | 0;
 if ((i6 | 0) != 0) {
  if ((HEAP8[i5 + 16 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i6 + -4 >> 2] | 0);
  }
  HEAP32[i5 + 12 >> 2] = 0;
 }
 HEAP8[i5 + 16 >> 0] = 1;
 HEAP32[i5 + 12 >> 2] = i4;
 HEAP32[i5 + 8 >> 2] = i1;
 i6 = 0;
 do {
  i7 = i4 + (i6 << 2) | 0;
  if ((i7 | 0) != 0) HEAP32[i7 >> 2] = 0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i1 | 0));
 HEAP32[i5 + 4 >> 2] = i1;
 i5 = 0;
 do {
  i6 = i4 + (i5 << 2) | 0;
  if ((i6 | 0) != 0) HEAP32[i6 >> 2] = HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + (i5 << 2) >> 2];
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i1 | 0));
 STACKTOP = i3;
 return;
}
function __ZNK10btBoxShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0;
 i5 = STACKTOP;
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d12 = d8 + +HEAPF32[i4 + 28 >> 2];
 d10 = d8 + +HEAPF32[i4 + 32 >> 2];
 d8 = d8 + +HEAPF32[i4 + 36 >> 2];
 d20 = +Math_abs(+(+HEAPF32[i3 >> 2]));
 d19 = +Math_abs(+(+HEAPF32[i3 + 4 >> 2]));
 d18 = +Math_abs(+(+HEAPF32[i3 + 8 >> 2]));
 d16 = +Math_abs(+(+HEAPF32[i3 + 16 >> 2]));
 d15 = +Math_abs(+(+HEAPF32[i3 + 20 >> 2]));
 d14 = +Math_abs(+(+HEAPF32[i3 + 24 >> 2]));
 d11 = +Math_abs(+(+HEAPF32[i3 + 32 >> 2]));
 d9 = +Math_abs(+(+HEAPF32[i3 + 36 >> 2]));
 d7 = +Math_abs(+(+HEAPF32[i3 + 40 >> 2]));
 d17 = +HEAPF32[i3 + 48 >> 2];
 d13 = +HEAPF32[i3 + 52 >> 2];
 d6 = +HEAPF32[i3 + 56 >> 2];
 HEAPF32[i2 >> 2] = d17 - (d12 * d20 + d10 * d19 + d8 * d18);
 HEAPF32[i2 + 4 >> 2] = d13 - (d12 * d16 + d10 * d15 + d8 * d14);
 HEAPF32[i2 + 8 >> 2] = d6 - (d12 * d11 + d10 * d9 + d8 * d7);
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = d12 * d20 + d10 * d19 + d8 * d18 + d17;
 HEAPF32[i1 + 4 >> 2] = d12 * d16 + d10 * d15 + d8 * d14 + d13;
 HEAPF32[i1 + 8 >> 2] = d12 * d11 + d10 * d9 + d8 * d7 + d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN35btSequentialImpulseConstraintSolver10solveGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btDispatcher(i5, i4, i3, i10, i9, i8, i2, i7, i6, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(4152);
 +FUNCTION_TABLE_diiiiiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 3](i5, i4, i3, i10, i9, i8, i2, i7, i6);
 +FUNCTION_TABLE_diiiiiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 3](i5, i4, i3, i10, i9, i8, i2, i7, i6);
 +FUNCTION_TABLE_diiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 1](i5, i4, i3, i7);
 i2 = HEAP32[5022] | 0;
 i10 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i10;
 if ((i10 | 0) != 0) {
  STACKTOP = i1;
  return 0.0;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i10 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i10 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return 0.0;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return 0.0;
}
function __ZNK11btConeShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAPF32[i4 + 32 >> 2] = 1.0;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 44 >> 2] = 0;
 HEAP32[i4 + 48 >> 2] = 0;
 HEAPF32[i4 + 52 >> 2] = 1.0;
 HEAP32[i4 + 56 >> 2] = 0;
 HEAP32[i4 + 60 >> 2] = 0;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 0;
 HEAPF32[i4 + 72 >> 2] = 1.0;
 i9 = i4 + 76 | 0;
 HEAP32[i9 + 0 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i4 + 32 | 0, i4 + 16 | 0, i4);
 d7 = (+HEAPF32[i4 >> 2] - +HEAPF32[i4 + 16 >> 2]) * .5;
 d6 = (+HEAPF32[i4 + 4 >> 2] - +HEAPF32[i4 + 20 >> 2]) * .5;
 d8 = (+HEAPF32[i4 + 8 >> 2] - +HEAPF32[i4 + 24 >> 2]) * .5;
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i1 >> 2] = d2 * .0833333283662796 * ((d6 + d5) * 2.0 * (d6 + d5) * 2.0 + (d8 + d5) * 2.0 * (d8 + d5) * 2.0);
 HEAPF32[i1 + 4 >> 2] = d2 * .0833333283662796 * ((d7 + d5) * 2.0 * (d7 + d5) * 2.0 + (d8 + d5) * 2.0 * (d8 + d5) * 2.0);
 HEAPF32[i1 + 8 >> 2] = d2 * .0833333283662796 * ((d7 + d5) * 2.0 * (d7 + d5) * 2.0 + (d6 + d5) * 2.0 * (d6 + d5) * 2.0);
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4(d4, i6, i1, i2) {
 d4 = +d4;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 i5 = _malloc(140) | 0;
 L1 : do if ((i5 | 0) == 0) {
  while (1) {
   i5 = HEAP32[5158] | 0;
   HEAP32[5158] = i5 + 0;
   if ((i5 | 0) == 0) break;
   FUNCTION_TABLE_v[i5 & 3]();
   i5 = _malloc(140) | 0;
   if ((i5 | 0) != 0) break L1;
  }
  i8 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i8 >> 2] = 20472;
  ___cxa_throw(i8 | 0, 20520, 265);
 } while (0);
 HEAPF32[i5 >> 2] = d4;
 HEAP32[i5 + 4 >> 2] = i6;
 i6 = i5 + 8 | 0;
 i7 = i5 + 56 | 0;
 i8 = i6;
 do i8 = i8 + 16 | 0; while ((i8 | 0) != (i7 | 0));
 HEAP32[i5 + 72 >> 2] = i1;
 i8 = i5 + 76 | 0;
 HEAP32[i8 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAPF32[i5 + 92 >> 2] = 0.0;
 HEAPF32[i5 + 96 >> 2] = 0.0;
 HEAPF32[i5 + 100 >> 2] = .5;
 HEAPF32[i5 + 104 >> 2] = 0.0;
 HEAPF32[i5 + 108 >> 2] = 0.0;
 HEAPF32[i5 + 112 >> 2] = .800000011920929;
 HEAPF32[i5 + 116 >> 2] = 1.0;
 HEAP8[i5 + 120 >> 0] = 0;
 HEAPF32[i5 + 124 >> 2] = .004999999888241291;
 HEAPF32[i5 + 128 >> 2] = .009999999776482582;
 HEAPF32[i5 + 132 >> 2] = .009999999776482582;
 HEAPF32[i5 + 136 >> 2] = .009999999776482582;
 __ZN11btTransform11setIdentityEv(i6);
 STACKTOP = i3;
 return i5 | 0;
}
function __ZN15btCompoundShape20recalculateLocalAabbEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAPF32[i1 + 32 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 36 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 40 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAPF32[i1 + 48 >> 2] = -999999984306749400.0;
 HEAPF32[i1 + 52 >> 2] = -999999984306749400.0;
 HEAPF32[i1 + 56 >> 2] = -999999984306749400.0;
 HEAPF32[i1 + 60 >> 2] = 0.0;
 if ((HEAP32[i1 + 16 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i3 = 0;
 do {
  i5 = HEAP32[i1 + 24 >> 2] | 0;
  i6 = HEAP32[i5 + (i3 * 80 | 0) + 64 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 127](i6, i5 + (i3 * 80 | 0) | 0, i2 + 16 | 0, i2);
  d4 = +HEAPF32[i2 + 16 >> 2];
  if (+HEAPF32[i1 + 32 >> 2] > d4) HEAPF32[i1 + 32 >> 2] = d4;
  d4 = +HEAPF32[i2 >> 2];
  if (+HEAPF32[i1 + 48 >> 2] < d4) HEAPF32[i1 + 48 >> 2] = d4;
  d4 = +HEAPF32[i2 + 20 >> 2];
  if (+HEAPF32[i1 + 36 >> 2] > d4) HEAPF32[i1 + 36 >> 2] = d4;
  d4 = +HEAPF32[i2 + 4 >> 2];
  if (+HEAPF32[i1 + 52 >> 2] < d4) HEAPF32[i1 + 52 >> 2] = d4;
  d4 = +HEAPF32[i2 + 24 >> 2];
  if (+HEAPF32[i1 + 40 >> 2] > d4) HEAPF32[i1 + 40 >> 2] = d4;
  d4 = +HEAPF32[i2 + 8 >> 2];
  if (+HEAPF32[i1 + 56 >> 2] < d4) HEAPF32[i1 + 56 >> 2] = d4;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (HEAP32[i1 + 16 >> 2] | 0));
 STACKTOP = i2;
 return;
}
function __ZN23btGeneric6DofConstraint16setAngularLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_(i2, i4, i11, i5, i6, i7, i1, i9, i10) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i8 = 0, i12 = 0, i13 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = 0;
 do {
  i12 = i2 + (i3 << 6) + 868 | 0;
  if (!((HEAP32[i2 + (i3 << 6) + 924 >> 2] | 0) == 0 ? (HEAP8[i2 + (i3 << 6) + 912 >> 0] | 0) == 0 : 0)) {
   i13 = i2 + (i3 << 4) + 1208 | 0;
   HEAP32[i8 + 0 >> 2] = HEAP32[i13 + 0 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   i13 = HEAP32[i2 + 1304 >> 2] >> (i3 * 3 | 0) + 9;
   if ((i13 & 1 | 0) == 0) HEAPF32[i2 + (i3 << 6) + 896 >> 2] = +HEAPF32[HEAP32[i4 + 32 >> 2] >> 2];
   if ((i13 & 2 | 0) == 0) HEAPF32[i2 + (i3 << 6) + 904 >> 2] = +HEAPF32[HEAP32[i4 + 32 >> 2] >> 2];
   if ((i13 & 4 | 0) == 0) HEAPF32[i2 + (i3 << 6) + 900 >> 2] = +HEAPF32[i4 + 4 >> 2];
   i11 = (__ZN23btGeneric6DofConstraint21get_limit_motor_info2EP22btRotationalLimitMotorRK11btTransformS4_RK9btVector3S7_S7_S7_PN17btTypedConstraint17btConstraintInfo2EiRS5_ii(i2, i12, i5, i6, i7, i1, i9, i10, i4, i11, i8, 1, 0) | 0) + i11 | 0;
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 3);
 STACKTOP = i8;
 return i11 | 0;
}
function __ZN33btConvexConcaveCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 if ((HEAP32[i2 + 76 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 8 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 4 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i1 + 12 >> 2] = 0;
  }
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 12 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) != 0) HEAP32[i4 >> 2] = HEAP32[i2 + 76 >> 2];
 HEAP32[i1 + 4 >> 2] = i6 + 1;
 STACKTOP = i3;
 return;
}
function __ZN20btAxisSweep3InternalItE8aabbTestERK9btVector3S3_R24btBroadphaseAabbCallback(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 i6 = HEAP32[i4 + 108 >> 2] | 0;
 if ((i6 | 0) != 0) {
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 127](i6, i1, i2, i3);
  STACKTOP = i5;
  return;
 }
 i8 = HEAP16[i4 + 56 >> 1] | 0;
 if (!((i8 & 65535) << 1 >>> 0 > 1)) {
  STACKTOP = i5;
  return;
 }
 i9 = 1;
 i6 = 2;
 while (1) {
  i10 = HEAP32[i4 + 68 >> 2] | 0;
  if (!((HEAP16[i10 + (i9 << 2) >> 1] & 1) == 0)) {
   i7 = HEAP32[i4 + 60 >> 2] | 0;
   i9 = HEAPU16[i10 + (i9 << 2) + 2 >> 1] | 0;
   if (!(+HEAPF32[i1 >> 2] > +HEAPF32[i7 + (i9 << 6) + 32 >> 2]) ? !(+HEAPF32[i2 >> 2] < +HEAPF32[i7 + (i9 << 6) + 16 >> 2]) : 0) i10 = 1; else i10 = 0;
   if (!(!(+HEAPF32[i1 + 8 >> 2] > +HEAPF32[i7 + (i9 << 6) + 40 >> 2]) ? !(+HEAPF32[i2 + 8 >> 2] < +HEAPF32[i7 + (i9 << 6) + 24 >> 2]) : 0)) i10 = 0;
   if (!(+HEAPF32[i1 + 4 >> 2] > +HEAPF32[i7 + (i9 << 6) + 36 >> 2]) ? !(+HEAPF32[i2 + 4 >> 2] < +HEAPF32[i7 + (i9 << 6) + 20 >> 2] | i10 ^ 1) : 0) {
    FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, i7 + (i9 << 6) | 0) | 0;
    i8 = HEAP16[i4 + 56 >> 1] | 0;
   }
  }
  i9 = i6 & 65535;
  if (!(i9 >>> 0 < ((i8 & 65535) << 1 | 1) >>> 0)) break;
  i6 = i6 + 1 << 16 >> 16;
 }
 STACKTOP = i5;
 return;
}
function __ZNK20btAxisSweep3InternalItE8quantizeEPtRK9btVector3i(i3, i1, d7, d6, d5, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d7 = +d7;
 d6 = +d6;
 d5 = +d5;
 i4 = i4 | 0;
 var i2 = 0, i8 = 0;
 i2 = STACKTOP;
 d7 = (d7 - +HEAPF32[i3 + 8 >> 2]) * +HEAPF32[i3 + 40 >> 2];
 d6 = (d6 - +HEAPF32[i3 + 12 >> 2]) * +HEAPF32[i3 + 44 >> 2];
 d5 = (d5 - +HEAPF32[i3 + 16 >> 2]) * +HEAPF32[i3 + 48 >> 2];
 do if (!(d7 <= 0.0)) {
  i8 = HEAP16[i3 + 6 >> 1] | 0;
  if (!(d7 >= +(i8 & 65535 | 0))) {
   i8 = HEAP16[i3 + 4 >> 1] & (~~d7 & 65535) & 65535 | i4;
   break;
  } else {
   i8 = HEAP16[i3 + 4 >> 1] & i8 & 65535 | i4;
   break;
  }
 } else i8 = i4; while (0);
 HEAP16[i1 >> 1] = i8;
 do if (!(d6 <= 0.0)) {
  i8 = HEAP16[i3 + 6 >> 1] | 0;
  if (!(d6 >= +(i8 & 65535 | 0))) {
   i8 = HEAP16[i3 + 4 >> 1] & (~~d6 & 65535) & 65535 | i4;
   break;
  } else {
   i8 = HEAP16[i3 + 4 >> 1] & i8 & 65535 | i4;
   break;
  }
 } else i8 = i4; while (0);
 HEAP16[i1 + 2 >> 1] = i8;
 if (d5 <= 0.0) {
  i4 = i4 & 65535;
  i8 = i1 + 4 | 0;
  HEAP16[i8 >> 1] = i4;
  STACKTOP = i2;
  return;
 }
 i8 = HEAP16[i3 + 6 >> 1] | 0;
 if (!(d5 >= +(i8 & 65535 | 0))) {
  i4 = HEAP16[i3 + 4 >> 1] & (~~d5 & 65535) & 65535 | i4;
  i4 = i4 & 65535;
  i8 = i1 + 4 | 0;
  HEAP16[i8 >> 1] = i4;
  STACKTOP = i2;
  return;
 } else {
  i4 = HEAP16[i3 + 4 >> 1] & i8 & 65535 | i4;
  i4 = i4 & 65535;
  i8 = i1 + 4 | 0;
  HEAP16[i8 >> 1] = i4;
  STACKTOP = i2;
  return;
 }
}
function _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(379) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 __ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBody(i4, 3, i1);
 HEAP32[i4 >> 2] = 2984;
 i10 = i4 + 300 | 0;
 HEAP32[i10 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 d9 = +HEAPF32[i3 >> 2];
 d8 = +HEAPF32[i3 + 4 >> 2];
 d7 = +HEAPF32[i3 + 8 >> 2];
 d6 = d9 * +HEAPF32[i1 + 20 >> 2] + d8 * +HEAPF32[i1 + 24 >> 2] + d7 * +HEAPF32[i1 + 28 >> 2] + +HEAPF32[i1 + 56 >> 2];
 d5 = d9 * +HEAPF32[i1 + 36 >> 2] + d8 * +HEAPF32[i1 + 40 >> 2] + d7 * +HEAPF32[i1 + 44 >> 2] + +HEAPF32[i1 + 60 >> 2];
 HEAPF32[i4 + 316 >> 2] = d9 * +HEAPF32[i1 + 4 >> 2] + d8 * +HEAPF32[i1 + 8 >> 2] + d7 * +HEAPF32[i1 + 12 >> 2] + +HEAPF32[i1 + 52 >> 2];
 HEAPF32[i4 + 320 >> 2] = d6;
 HEAPF32[i4 + 324 >> 2] = d5;
 HEAPF32[i4 + 328 >> 2] = 0.0;
 HEAP32[i4 + 332 >> 2] = 0;
 HEAP8[i4 + 344 >> 0] = 0;
 HEAPF32[i4 + 348 >> 2] = .30000001192092896;
 HEAPF32[i4 + 352 >> 2] = 1.0;
 HEAPF32[i4 + 356 >> 2] = 0.0;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN36btCompoundCompoundCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18208;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = HEAP32[i4 + 8 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i5 = 0;
  do {
   i6 = HEAP32[(HEAP32[i4 + 16 >> 2] | 0) + (i5 * 12 | 0) + 8 >> 2] | 0;
   if ((i6 | 0) != 0) {
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i6);
    i7 = HEAP32[i1 + 4 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i7 >> 2] | 0) + 60 >> 2] & 127](i7, i6);
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i3 | 0));
  i4 = HEAP32[i1 + 8 >> 2] | 0;
 }
 __ZN23btHashedSimplePairCache14removeAllPairsEv(i4);
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 28 >> 0] = 1;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  i7 = i1 + 20 | 0;
  HEAP32[i7 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 28 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP8[i1 + 28 >> 0] = 1;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 i7 = i1 + 20 | 0;
 HEAP32[i7 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld9addActionEP17btActionInterface(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i6 = HEAP32[i1 + 280 >> 2] | 0;
 if ((i6 | 0) == (HEAP32[i1 + 284 >> 2] | 0) ? (i4 = (i6 | 0) == 0 ? 1 : i6 << 1, (i6 | 0) < (i4 | 0)) : 0) {
  if ((i4 | 0) == 0) i5 = 0; else {
   HEAP32[5004] = (HEAP32[5004] | 0) + 1;
   i5 = _malloc((i4 << 2 | 3) + 16 | 0) | 0;
   if ((i5 | 0) == 0) i5 = 0; else {
    HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
    i5 = i5 + 19 & -16;
   }
   i6 = HEAP32[i1 + 280 >> 2] | 0;
  }
  if ((i6 | 0) > 0) {
   i7 = 0;
   do {
    i8 = i5 + (i7 << 2) | 0;
    if ((i8 | 0) != 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i1 + 288 >> 2] | 0) + (i7 << 2) >> 2];
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != (i6 | 0));
  }
  i7 = HEAP32[i1 + 288 >> 2] | 0;
  if ((i7 | 0) != 0) {
   if ((HEAP8[i1 + 292 >> 0] | 0) != 0) {
    HEAP32[5006] = (HEAP32[5006] | 0) + 1;
    _free(HEAP32[i7 + -4 >> 2] | 0);
    i6 = HEAP32[i1 + 280 >> 2] | 0;
   }
   HEAP32[i1 + 288 >> 2] = 0;
  }
  HEAP8[i1 + 292 >> 0] = 1;
  HEAP32[i1 + 288 >> 2] = i5;
  HEAP32[i1 + 284 >> 2] = i4;
 }
 i4 = (HEAP32[i1 + 288 >> 2] | 0) + (i6 << 2) | 0;
 if ((i4 | 0) == 0) {
  i8 = i6 + 1 | 0;
  HEAP32[i1 + 280 >> 2] = i8;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = i3;
 i8 = i6 + 1 | 0;
 HEAP32[i1 + 280 >> 2] = i8;
 STACKTOP = i2;
 return;
}
function __ZN26LocalSupportVertexCallback28internalProcessTriangleIndexEP9btVector3ii(i1, i2, i9, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i3 = STACKTOP;
 d4 = +HEAPF32[i1 + 24 >> 2];
 d6 = +HEAPF32[i1 + 28 >> 2];
 d5 = +HEAPF32[i1 + 32 >> 2];
 d7 = d4 * +HEAPF32[i2 >> 2] + d6 * +HEAPF32[i2 + 4 >> 2] + d5 * +HEAPF32[i2 + 8 >> 2];
 d8 = +HEAPF32[i1 + 20 >> 2];
 if (d7 > d8) {
  HEAPF32[i1 + 20 >> 2] = d7;
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 } else d7 = d8;
 d8 = d4 * +HEAPF32[i2 + 16 >> 2] + d6 * +HEAPF32[i2 + 20 >> 2] + d5 * +HEAPF32[i2 + 24 >> 2];
 if (d8 > d7) {
  HEAPF32[i1 + 20 >> 2] = d8;
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 24 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 28 >> 2];
  d7 = d8;
 }
 d4 = d4 * +HEAPF32[i2 + 32 >> 2] + d6 * +HEAPF32[i2 + 36 >> 2] + d5 * +HEAPF32[i2 + 40 >> 2];
 if (!(d4 > d7)) {
  STACKTOP = i3;
  return;
 }
 HEAPF32[i1 + 20 >> 2] = d4;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 44 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN12gjkepa2_impl3GJK13projectoriginERK9btVector3S3_PfRj(i8, i7, i1, i6) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i5 = STACKTOP;
 d9 = +HEAPF32[i8 >> 2];
 d2 = +HEAPF32[i7 >> 2] - d9;
 d10 = +HEAPF32[i8 + 4 >> 2];
 d3 = +HEAPF32[i7 + 4 >> 2] - d10;
 d11 = +HEAPF32[i8 + 8 >> 2];
 d4 = +HEAPF32[i7 + 8 >> 2] - d11;
 if (!(d2 * d2 + d3 * d3 + d4 * d4 > 0.0)) {
  d11 = -1.0;
  STACKTOP = i5;
  return +d11;
 }
 d9 = -(d9 * d2 + d10 * d3 + d11 * d4) / (d2 * d2 + d3 * d3 + d4 * d4);
 if (d9 >= 1.0) {
  HEAPF32[i1 >> 2] = 0.0;
  HEAPF32[i1 + 4 >> 2] = 1.0;
  HEAP32[i6 >> 2] = 2;
  d9 = +HEAPF32[i7 >> 2];
  d10 = +HEAPF32[i7 + 4 >> 2];
  d11 = +HEAPF32[i7 + 8 >> 2];
  d11 = d9 * d9 + d10 * d10 + d11 * d11;
  STACKTOP = i5;
  return +d11;
 }
 if (!(d9 <= 0.0)) {
  HEAPF32[i1 + 4 >> 2] = d9;
  HEAPF32[i1 >> 2] = 1.0 - d9;
  HEAP32[i6 >> 2] = 3;
  d2 = d2 * d9 + +HEAPF32[i8 >> 2];
  d10 = d3 * d9 + +HEAPF32[i8 + 4 >> 2];
  d11 = d4 * d9 + +HEAPF32[i8 + 8 >> 2];
  d11 = d2 * d2 + d10 * d10 + d11 * d11;
  STACKTOP = i5;
  return +d11;
 } else {
  HEAPF32[i1 >> 2] = 1.0;
  HEAPF32[i1 + 4 >> 2] = 0.0;
  HEAP32[i6 >> 2] = 1;
  d9 = +HEAPF32[i8 >> 2];
  d10 = +HEAPF32[i8 + 4 >> 2];
  d11 = +HEAPF32[i8 + 8 >> 2];
  d11 = d9 * d9 + d10 * d10 + d11 * d11;
  STACKTOP = i5;
  return +d11;
 }
 return 0.0;
}
function __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAP8[i1 + 88 >> 0] = 1;
 if ((HEAP8[15960] | 0) == 0 ? (___cxa_guard_acquire(15960) | 0) != 0 : 0) {
  HEAPF32[3966] = 1.0;
  HEAP32[3967] = 0;
  HEAP32[3968] = 0;
  HEAP32[3969] = 0;
  HEAP32[3970] = 0;
  HEAPF32[3971] = 1.0;
  HEAP32[3972] = 0;
  HEAP32[3973] = 0;
  HEAP32[3974] = 0;
  HEAP32[3975] = 0;
  HEAPF32[3976] = 1.0;
  HEAPF32[3977] = 0.0;
  HEAPF32[3978] = -1.0;
  HEAP32[3979] = 0;
  HEAP32[3980] = 0;
  HEAP32[3981] = 0;
  HEAP32[3982] = 0;
  HEAPF32[3983] = -1.0;
  HEAP32[3984] = 0;
  HEAP32[3985] = 0;
  HEAP32[3986] = 0;
  HEAP32[3987] = 0;
  HEAPF32[3988] = -1.0;
  HEAPF32[3989] = 0.0;
  ___cxa_guard_release(15960);
 }
 i4 = i2 + 0 | 0;
 i3 = i4 + 96 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 76 >> 2] & 127](i1, 15864, i2, 6);
 d5 = +HEAPF32[i1 + 44 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 >> 2] + d5;
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i2 + 48 >> 2] - d5;
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i2 + 20 >> 2] + d5;
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i2 + 68 >> 2] - d5;
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i2 + 40 >> 2] + d5;
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i2 + 88 >> 2] - d5;
 STACKTOP = i2;
 return;
}
function __ZN21SupportVertexCallback15processTriangleEP9btVector3ii(i1, i2, i9, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i3 = STACKTOP;
 d4 = +HEAPF32[i1 + 88 >> 2];
 d6 = +HEAPF32[i1 + 92 >> 2];
 d5 = +HEAPF32[i1 + 96 >> 2];
 d7 = d4 * +HEAPF32[i2 >> 2] + d6 * +HEAPF32[i2 + 4 >> 2] + d5 * +HEAPF32[i2 + 8 >> 2];
 d8 = +HEAPF32[i1 + 84 >> 2];
 if (d7 > d8) {
  HEAPF32[i1 + 84 >> 2] = d7;
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 } else d7 = d8;
 d8 = d4 * +HEAPF32[i2 + 16 >> 2] + d6 * +HEAPF32[i2 + 20 >> 2] + d5 * +HEAPF32[i2 + 24 >> 2];
 if (d8 > d7) {
  HEAPF32[i1 + 84 >> 2] = d8;
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 24 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 28 >> 2];
  d7 = d8;
 }
 d4 = d4 * +HEAPF32[i2 + 32 >> 2] + d6 * +HEAPF32[i2 + 36 >> 2] + d5 * +HEAPF32[i2 + 40 >> 2];
 if (!(d4 > d7)) {
  STACKTOP = i3;
  return;
 }
 HEAPF32[i1 + 84 >> 2] = d4;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 44 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3(d3, i5, i1) {
 d3 = +d3;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i4 = _malloc(140) | 0;
 L1 : do if ((i4 | 0) == 0) {
  while (1) {
   i4 = HEAP32[5158] | 0;
   HEAP32[5158] = i4 + 0;
   if ((i4 | 0) == 0) break;
   FUNCTION_TABLE_v[i4 & 3]();
   i4 = _malloc(140) | 0;
   if ((i4 | 0) != 0) break L1;
  }
  i7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i7 >> 2] = 20472;
  ___cxa_throw(i7 | 0, 20520, 265);
 } while (0);
 HEAPF32[i4 >> 2] = d3;
 HEAP32[i4 + 4 >> 2] = i5;
 i5 = i4 + 8 | 0;
 i6 = i4 + 56 | 0;
 i7 = i5;
 do i7 = i7 + 16 | 0; while ((i7 | 0) != (i6 | 0));
 HEAP32[i4 + 72 >> 2] = i1;
 i6 = i4 + 76 | 0;
 i7 = i4 + 100 | 0;
 HEAP32[i6 + 0 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAPF32[i7 >> 2] = .5;
 HEAPF32[i4 + 104 >> 2] = 0.0;
 HEAPF32[i4 + 108 >> 2] = 0.0;
 HEAPF32[i4 + 112 >> 2] = .800000011920929;
 HEAPF32[i4 + 116 >> 2] = 1.0;
 HEAP8[i4 + 120 >> 0] = 0;
 HEAPF32[i4 + 124 >> 2] = .004999999888241291;
 HEAPF32[i4 + 128 >> 2] = .009999999776482582;
 HEAPF32[i4 + 132 >> 2] = .009999999776482582;
 HEAPF32[i4 + 136 >> 2] = .009999999776482582;
 __ZN11btTransform11setIdentityEv(i5);
 STACKTOP = i2;
 return i4 | 0;
}
function _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4(i3, i5, d4, i1) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 d4 = +d4;
 i1 = i1 | 0;
 var i2 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(203) | 0;
 if ((i6 | 0) == 0) i6 = 0; else {
  HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
  i6 = i6 + 19 & -16;
 }
 HEAP32[i6 >> 2] = 2632;
 HEAP8[i6 + 144 >> 0] = 1;
 HEAP32[i6 + 140 >> 2] = 0;
 HEAP32[i6 + 132 >> 2] = 0;
 HEAP32[i6 + 136 >> 2] = 0;
 HEAP32[i6 + 176 >> 2] = i1;
 HEAPF32[i6 + 56 >> 2] = .019999999552965164;
 i7 = i6 + 60 | 0;
 i1 = i6 + 170 | 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP8[i1 >> 0] = 1;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAPF32[i6 + 52 >> 2] = d4;
 HEAPF32[i6 + 48 >> 2] = 0.0;
 HEAP32[i6 + 12 >> 2] = i5;
 HEAP8[i6 + 171 >> 0] = 1;
 HEAPF32[i6 + 172 >> 2] = 0.0;
 HEAPF32[i6 + 16 >> 2] = 0.0;
 HEAPF32[i6 + 20 >> 2] = 0.0;
 HEAPF32[i6 + 44 >> 2] = 29.399999618530273;
 HEAPF32[i6 + 24 >> 2] = 55.0;
 HEAPF32[i6 + 28 >> 2] = 10.0;
 HEAP8[i6 + 168 >> 0] = 0;
 HEAP8[i6 + 169 >> 0] = 0;
 HEAP8[i6 + 180 >> 0] = 1;
 HEAPF32[i6 + 36 >> 2] = .7853981852531433;
 HEAPF32[i6 + 40 >> 2] = .7071067690849304;
 HEAPF32[i6 + 108 >> 2] = 0.0;
 HEAP8[i6 + 181 >> 0] = 0;
 HEAP8[i6 + 182 >> 0] = 0;
 STACKTOP = i2;
 return i6 | 0;
}
function _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(215) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 HEAP32[i2 >> 2] = 4024;
 HEAP8[i2 + 20 >> 0] = 1;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP8[i2 + 40 >> 0] = 1;
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i2 + 32 >> 2] = 0;
 HEAP8[i2 + 60 >> 0] = 1;
 HEAP32[i2 + 56 >> 2] = 0;
 HEAP32[i2 + 48 >> 2] = 0;
 HEAP32[i2 + 52 >> 2] = 0;
 HEAP8[i2 + 80 >> 0] = 1;
 HEAP32[i2 + 76 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 0;
 HEAP8[i2 + 100 >> 0] = 1;
 HEAP32[i2 + 96 >> 2] = 0;
 HEAP32[i2 + 88 >> 2] = 0;
 HEAP32[i2 + 92 >> 2] = 0;
 HEAP8[i2 + 120 >> 0] = 1;
 HEAP32[i2 + 116 >> 2] = 0;
 HEAP32[i2 + 108 >> 2] = 0;
 HEAP32[i2 + 112 >> 2] = 0;
 HEAP8[i2 + 140 >> 0] = 1;
 HEAP32[i2 + 136 >> 2] = 0;
 HEAP32[i2 + 128 >> 2] = 0;
 HEAP32[i2 + 132 >> 2] = 0;
 HEAP8[i2 + 160 >> 0] = 1;
 HEAP32[i2 + 156 >> 2] = 0;
 HEAP32[i2 + 148 >> 2] = 0;
 HEAP32[i2 + 152 >> 2] = 0;
 HEAP8[i2 + 180 >> 0] = 1;
 HEAP32[i2 + 176 >> 2] = 0;
 HEAP32[i2 + 168 >> 2] = 0;
 HEAP32[i2 + 172 >> 2] = 0;
 HEAP32[i2 + 192 >> 2] = 0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResult15addContactPointE_0RK9btVector3SB_f(i3, i1, i5, d4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 d4 = +d4;
 var i2 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAPF32[i3 + 32 >> 2] = d4;
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i1 + 12 >> 2];
 d6 = +HEAPF32[i3 + 28 >> 2];
 d8 = +HEAPF32[i5 + 4 >> 2] - d6 * +HEAPF32[i1 + 4 >> 2];
 d7 = +HEAPF32[i5 + 8 >> 2] - d6 * +HEAPF32[i1 + 8 >> 2];
 HEAPF32[i2 >> 2] = +HEAPF32[i5 >> 2] - +HEAPF32[i1 >> 2] * d6;
 HEAPF32[i2 + 4 >> 2] = d8;
 HEAPF32[i2 + 8 >> 2] = d7;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 d4 = +HEAPF32[i3 + 24 >> 2] + d6 + d4;
 HEAPF32[i3 + 32 >> 2] = d4;
 if (!(d4 < 0.0)) {
  i5 = i3 + 4 | 0;
  i5 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i5 >> 2] | 0;
  i3 = i3 + 16 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  FUNCTION_TABLE_viiid[i3 & 15](i5, i1, i2, d4);
  STACKTOP = i2;
  return;
 }
 HEAP8[i3 + 36 >> 0] = 1;
 i5 = i3 + 4 | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i3 = i3 + 16 | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_viiid[i3 & 15](i5, i1, i2, d4);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3(i1, i4, d3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(203) | 0;
 if ((i5 | 0) == 0) i5 = 0; else {
  HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
  i5 = i5 + 19 & -16;
 }
 HEAP32[i5 >> 2] = 2632;
 HEAP8[i5 + 144 >> 0] = 1;
 HEAP32[i5 + 140 >> 2] = 0;
 HEAP32[i5 + 132 >> 2] = 0;
 HEAP32[i5 + 136 >> 2] = 0;
 HEAP32[i5 + 176 >> 2] = 1;
 HEAPF32[i5 + 56 >> 2] = .019999999552965164;
 i7 = i5 + 60 | 0;
 i6 = i5 + 170 | 0;
 HEAP32[i7 + 0 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP8[i6 >> 0] = 1;
 HEAP32[i5 + 8 >> 2] = i1;
 HEAPF32[i5 + 52 >> 2] = d3;
 HEAPF32[i5 + 48 >> 2] = 0.0;
 HEAP32[i5 + 12 >> 2] = i4;
 HEAP8[i5 + 171 >> 0] = 1;
 HEAPF32[i5 + 172 >> 2] = 0.0;
 HEAPF32[i5 + 16 >> 2] = 0.0;
 HEAPF32[i5 + 20 >> 2] = 0.0;
 HEAPF32[i5 + 44 >> 2] = 29.399999618530273;
 HEAPF32[i5 + 24 >> 2] = 55.0;
 HEAPF32[i5 + 28 >> 2] = 10.0;
 HEAP8[i5 + 168 >> 0] = 0;
 HEAP8[i5 + 169 >> 0] = 0;
 HEAP8[i5 + 180 >> 0] = 1;
 HEAPF32[i5 + 36 >> 2] = .7853981852531433;
 HEAPF32[i5 + 40 >> 2] = .7071067690849304;
 HEAPF32[i5 + 108 >> 2] = 0.0;
 HEAP8[i5 + 181 >> 0] = 0;
 HEAP8[i5 + 182 >> 0] = 0;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN20btAlignedObjectArrayI9btElementE17quickSortInternalI31btUnionFindElementSortPredicateEEvRKT_ii(i1, i6, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 while (1) {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i5 = HEAP32[i4 + (((i6 + i3 | 0) / 2 | 0) << 3) >> 2] | 0;
  i9 = i6;
  i7 = i3;
  while (1) {
   while (1) {
    i10 = i9 + 1 | 0;
    if ((HEAP32[i4 + (i9 << 3) >> 2] | 0) < (i5 | 0)) i9 = i10; else {
     i8 = i7;
     break;
    }
   }
   while (1) {
    i11 = i4 + (i8 << 3) | 0;
    i7 = i8 + -1 | 0;
    if ((i5 | 0) < (HEAP32[i11 >> 2] | 0)) i8 = i7; else break;
   }
   if ((i9 | 0) > (i8 | 0)) i7 = i8; else {
    i9 = i4 + (i9 << 3) | 0;
    i12 = HEAP32[i9 >> 2] | 0;
    i4 = HEAP32[i9 + 4 >> 2] | 0;
    i13 = HEAP32[i11 + 4 >> 2] | 0;
    HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i9 + 4 >> 2] = i13;
    i9 = (HEAP32[i1 + 12 >> 2] | 0) + (i8 << 3) | 0;
    HEAP32[i9 >> 2] = i12;
    HEAP32[i9 + 4 >> 2] = i4;
    i9 = i10;
   }
   if ((i9 | 0) > (i7 | 0)) break;
   i4 = HEAP32[i1 + 12 >> 2] | 0;
  }
  if ((i7 | 0) > (i6 | 0)) __ZN20btAlignedObjectArrayI9btElementE17quickSortInternalI31btUnionFindElementSortPredicateEEvRKT_ii(i1, i6, i7);
  if ((i9 | 0) < (i3 | 0)) i6 = i9; else break;
 }
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld24ClosestRayResultCallback15addSingleResultERNS_14LocalRayResultEb(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i1 + 24 >> 2];
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i3 + 8 >> 2] = i2;
 if (i4) {
  HEAP32[i3 + 52 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i3 + 56 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i3 + 60 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i3 + 64 >> 2] = HEAP32[i1 + 20 >> 2];
 } else {
  d9 = +HEAPF32[i1 + 8 >> 2];
  d8 = +HEAPF32[i1 + 12 >> 2];
  d7 = +HEAPF32[i1 + 16 >> 2];
  d6 = +HEAPF32[i2 + 20 >> 2] * d9 + +HEAPF32[i2 + 24 >> 2] * d8 + +HEAPF32[i2 + 28 >> 2] * d7;
  d5 = +HEAPF32[i2 + 36 >> 2] * d9 + +HEAPF32[i2 + 40 >> 2] * d8 + +HEAPF32[i2 + 44 >> 2] * d7;
  HEAPF32[i3 + 52 >> 2] = +HEAPF32[i2 + 4 >> 2] * d9 + +HEAPF32[i2 + 8 >> 2] * d8 + +HEAPF32[i2 + 12 >> 2] * d7;
  HEAPF32[i3 + 56 >> 2] = d6;
  HEAPF32[i3 + 60 >> 2] = d5;
  HEAPF32[i3 + 64 >> 2] = 0.0;
 }
 d9 = +HEAPF32[i1 + 24 >> 2];
 HEAPF32[i3 + 68 >> 2] = (1.0 - d9) * +HEAPF32[i3 + 20 >> 2] + +HEAPF32[i3 + 36 >> 2] * d9;
 HEAPF32[i3 + 72 >> 2] = (1.0 - d9) * +HEAPF32[i3 + 24 >> 2] + d9 * +HEAPF32[i3 + 40 >> 2];
 HEAPF32[i3 + 76 >> 2] = (1.0 - d9) * +HEAPF32[i3 + 28 >> 2] + d9 * +HEAPF32[i3 + 44 >> 2];
 return +(+HEAPF32[i1 + 24 >> 2]);
}
function __ZN16btCollisionWorldD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 7144;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i4 = 0;
  do {
   i6 = (HEAP32[i5 + (i4 << 2) >> 2] | 0) + 188 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   if ((i7 | 0) != 0) {
    i3 = HEAP32[i1 + 68 >> 2] | 0;
    i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3, i7, HEAP32[i1 + 24 >> 2] | 0);
    i3 = HEAP32[i1 + 68 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3, i7, HEAP32[i1 + 24 >> 2] | 0);
    HEAP32[i6 >> 2] = 0;
    i3 = HEAP32[i1 + 8 >> 2] | 0;
    i5 = HEAP32[i1 + 16 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i3 | 0));
 }
 if ((i5 | 0) == 0) {
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i7 = i1 + 12 | 0;
  HEAP32[i7 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i5 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i7 = i1 + 12 | 0;
 HEAP32[i7 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK23btPolyhedralConvexShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i4 + 32 >> 2] = 1.0;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 44 >> 2] = 0;
 HEAP32[i4 + 48 >> 2] = 0;
 HEAPF32[i4 + 52 >> 2] = 1.0;
 HEAP32[i4 + 56 >> 2] = 0;
 HEAP32[i4 + 60 >> 2] = 0;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 0;
 HEAPF32[i4 + 72 >> 2] = 1.0;
 i8 = i4 + 76 | 0;
 HEAP32[i8 + 0 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i4 + 32 | 0, i4 + 16 | 0, i4);
 d6 = (d7 + (+HEAPF32[i4 >> 2] - +HEAPF32[i4 + 16 >> 2]) * .5) * 2.0;
 d5 = (d7 + (+HEAPF32[i4 + 4 >> 2] - +HEAPF32[i4 + 20 >> 2]) * .5) * 2.0;
 d7 = (d7 + (+HEAPF32[i4 + 8 >> 2] - +HEAPF32[i4 + 24 >> 2]) * .5) * 2.0;
 HEAPF32[i1 >> 2] = d2 * .0833333283662796 * (d5 * d5 + d7 * d7);
 HEAPF32[i1 + 4 >> 2] = d2 * .0833333283662796 * (d6 * d6 + d7 * d7);
 HEAPF32[i1 + 8 >> 2] = d2 * .0833333283662796 * (d6 * d6 + d5 * d5);
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i2 = STACKTOP;
 if (!(+HEAPF32[i1 + 344 >> 2] != 0.0)) {
  STACKTOP = i2;
  return;
 }
 __ZN11btRigidBody19applyCentralImpulseERK9btVector3(i1, i3);
 d7 = +HEAPF32[i3 >> 2] * +HEAPF32[i1 + 348 >> 2];
 d9 = +HEAPF32[i3 + 4 >> 2] * +HEAPF32[i1 + 352 >> 2];
 d11 = +HEAPF32[i3 + 8 >> 2] * +HEAPF32[i1 + 356 >> 2];
 d8 = +HEAPF32[i4 + 4 >> 2];
 d12 = +HEAPF32[i4 + 8 >> 2];
 d10 = +HEAPF32[i4 >> 2];
 d6 = (+HEAPF32[i1 + 280 >> 2] * (d8 * d11 - d12 * d9) + +HEAPF32[i1 + 284 >> 2] * (d12 * d7 - d10 * d11) + +HEAPF32[i1 + 288 >> 2] * (d10 * d9 - d8 * d7)) * +HEAPF32[i1 + 548 >> 2];
 d5 = (+HEAPF32[i1 + 296 >> 2] * (d8 * d11 - d12 * d9) + +HEAPF32[i1 + 300 >> 2] * (d12 * d7 - d10 * d11) + +HEAPF32[i1 + 304 >> 2] * (d10 * d9 - d8 * d7)) * +HEAPF32[i1 + 552 >> 2];
 HEAPF32[i1 + 328 >> 2] = +HEAPF32[i1 + 328 >> 2] + (+HEAPF32[i1 + 264 >> 2] * (d8 * d11 - d12 * d9) + +HEAPF32[i1 + 268 >> 2] * (d12 * d7 - d10 * d11) + +HEAPF32[i1 + 272 >> 2] * (d10 * d9 - d8 * d7)) * +HEAPF32[i1 + 544 >> 2];
 HEAPF32[i1 + 332 >> 2] = +HEAPF32[i1 + 332 >> 2] + d6;
 HEAPF32[i1 + 336 >> 2] = +HEAPF32[i1 + 336 >> 2] + d5;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i3 = STACKTOP;
 i4 = _malloc(152) | 0;
 L1 : do if ((i4 | 0) == 0) {
  while (1) {
   i4 = HEAP32[5158] | 0;
   HEAP32[5158] = i4 + 0;
   if ((i4 | 0) == 0) break;
   FUNCTION_TABLE_v[i4 & 3]();
   i4 = _malloc(152) | 0;
   if ((i4 | 0) != 0) break L1;
  }
  i4 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i4 >> 2] = 20472;
  ___cxa_throw(i4 | 0, 20520, 265);
 } while (0);
 HEAP32[i4 >> 2] = 3752;
 HEAP8[i4 + 20 >> 0] = 1;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP8[i4 + 40 >> 0] = 1;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP8[i4 + 60 >> 0] = 1;
 HEAP32[i4 + 56 >> 2] = 0;
 HEAP32[i4 + 48 >> 2] = 0;
 HEAP32[i4 + 52 >> 2] = 0;
 HEAP8[i4 + 80 >> 0] = 1;
 HEAP32[i4 + 76 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 0;
 HEAP32[i4 + 72 >> 2] = 0;
 HEAP32[i4 + 100 >> 2] = i1;
 HEAPF32[i4 + 104 >> 2] = 0.0;
 HEAP8[i4 + 148 >> 0] = 1;
 HEAP32[i4 + 144 >> 2] = 0;
 HEAP32[i4 + 136 >> 2] = 0;
 HEAP32[i4 + 140 >> 2] = 0;
 HEAP32[i4 + 116 >> 2] = i2;
 HEAP32[i4 + 120 >> 2] = 0;
 HEAP32[i4 + 124 >> 2] = 2;
 HEAP32[i4 + 128 >> 2] = 1;
 HEAPF32[i4 + 112 >> 2] = 0.0;
 HEAPF32[i4 + 108 >> 2] = 0.0;
 STACKTOP = i3;
 return i4 | 0;
}
function _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(379) | 0;
 if ((i6 | 0) == 0) i6 = 0; else {
  HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
  i6 = i6 + 19 & -16;
 }
 HEAP32[i6 + 4 >> 2] = 3;
 HEAP32[i6 + 8 >> 2] = -1;
 HEAP32[i6 + 12 >> 2] = -1;
 HEAPF32[i6 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i6 + 20 >> 0] = 1;
 HEAP8[i6 + 21 >> 0] = 0;
 HEAP32[i6 + 24 >> 2] = -1;
 HEAP32[i6 + 28 >> 2] = i1;
 HEAP32[i6 + 32 >> 2] = i3;
 HEAPF32[i6 + 36 >> 2] = 0.0;
 HEAPF32[i6 + 40 >> 2] = .30000001192092896;
 HEAP32[i6 + 44 >> 2] = 0;
 HEAP32[i6 >> 2] = 2984;
 i3 = i6 + 300 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = i6 + 316 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i6 + 332 >> 2] = 0;
 HEAP8[i6 + 344 >> 0] = 0;
 HEAPF32[i6 + 348 >> 2] = .30000001192092896;
 HEAPF32[i6 + 352 >> 2] = 1.0;
 HEAPF32[i6 + 356 >> 2] = 0.0;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZNK10btBoxShape16getPlaneEquationER9btVector4i(i7, i1, i5) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d6 = 0.0;
 i2 = STACKTOP;
 d3 = +HEAPF32[i7 + 28 >> 2];
 d4 = +HEAPF32[i7 + 32 >> 2];
 d6 = +HEAPF32[i7 + 36 >> 2];
 switch (i5 | 0) {
 case 1:
  {
   HEAPF32[i1 >> 2] = -1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d3;
   STACKTOP = i2;
   return;
  }
 case 2:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d4;
   STACKTOP = i2;
   return;
  }
 case 3:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = -1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d4;
   STACKTOP = i2;
   return;
  }
 case 0:
  {
   HEAPF32[i1 >> 2] = 1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = -d3;
   STACKTOP = i2;
   return;
  }
 case 5:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = -1.0;
   HEAPF32[i1 + 12 >> 2] = -d6;
   STACKTOP = i2;
   return;
  }
 case 4:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 1.0;
   HEAPF32[i1 + 12 >> 2] = -d6;
   STACKTOP = i2;
   return;
  }
 default:
  {
   STACKTOP = i2;
   return;
  }
 }
}
function _emscripten_bind_btRigidBody_updateInertiaTensor_0(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 d13 = +HEAPF32[i1 + 4 >> 2];
 d7 = +HEAPF32[i1 + 396 >> 2];
 d12 = +HEAPF32[i1 + 8 >> 2];
 d5 = +HEAPF32[i1 + 400 >> 2];
 d11 = +HEAPF32[i1 + 12 >> 2];
 d3 = +HEAPF32[i1 + 404 >> 2];
 d10 = +HEAPF32[i1 + 20 >> 2];
 d9 = +HEAPF32[i1 + 24 >> 2];
 d8 = +HEAPF32[i1 + 28 >> 2];
 d6 = +HEAPF32[i1 + 36 >> 2];
 d4 = +HEAPF32[i1 + 40 >> 2];
 d2 = +HEAPF32[i1 + 44 >> 2];
 HEAPF32[i1 + 264 >> 2] = d13 * d13 * d7 + d12 * d12 * d5 + d11 * d11 * d3;
 HEAPF32[i1 + 268 >> 2] = d13 * d7 * d10 + d12 * d5 * d9 + d11 * d3 * d8;
 HEAPF32[i1 + 272 >> 2] = d13 * d7 * d6 + d12 * d5 * d4 + d11 * d3 * d2;
 HEAPF32[i1 + 276 >> 2] = 0.0;
 HEAPF32[i1 + 280 >> 2] = d13 * d7 * d10 + d12 * d5 * d9 + d11 * d3 * d8;
 HEAPF32[i1 + 284 >> 2] = d10 * d7 * d10 + d9 * d5 * d9 + d8 * d3 * d8;
 HEAPF32[i1 + 288 >> 2] = d7 * d10 * d6 + d5 * d9 * d4 + d3 * d8 * d2;
 HEAPF32[i1 + 292 >> 2] = 0.0;
 HEAPF32[i1 + 296 >> 2] = d13 * d7 * d6 + d12 * d5 * d4 + d11 * d3 * d2;
 HEAPF32[i1 + 300 >> 2] = d10 * d7 * d6 + d9 * d5 * d4 + d8 * d3 * d2;
 HEAPF32[i1 + 304 >> 2] = d6 * d7 * d6 + d4 * d5 * d4 + d2 * d3 * d2;
 HEAPF32[i1 + 308 >> 2] = 0.0;
 return;
}
function _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 i4 = _malloc(5260) | 0;
 L1 : do if ((i4 | 0) == 0) {
  while (1) {
   i3 = HEAP32[5158] | 0;
   HEAP32[5158] = i3 + 0;
   if ((i3 | 0) == 0) break;
   FUNCTION_TABLE_v[i3 & 3]();
   i4 = _malloc(5260) | 0;
   if ((i4 | 0) != 0) break L1;
  }
  i5 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i5 >> 2] = 20472;
  ___cxa_throw(i5 | 0, 20520, 265);
 } while (0);
 HEAP32[i4 >> 2] = 6808;
 HEAP32[i4 + 4 >> 2] = 2;
 HEAP8[i4 + 24 >> 0] = 1;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 13504;
 i3 = i4 + 5256 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 + 60 >> 2] = 69;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2) | 0;
 HEAP32[i4 + 64 >> 2] = i5;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i2) | 0;
 HEAP32[i4 + 68 >> 2] = i2;
 i2 = 0;
 do {
  i5 = 0;
  do {
   i6 = HEAP32[i3 >> 2] | 0;
   i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 31](i6, i2, i5) | 0;
   HEAP32[i4 + (i2 * 144 | 0) + (i5 << 2) + 72 >> 2] = i6;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < 36);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) < 36);
 STACKTOP = i1;
 return i4 | 0;
}
function __ZN11btTransform11getIdentityEv() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((HEAP8[528] | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 if ((___cxa_guard_acquire(528) | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP8[584] | 0) == 0 ? (___cxa_guard_acquire(584) | 0) != 0 : 0) {
  HEAPF32[i1 + 32 >> 2] = 1.0;
  HEAPF32[i1 + 28 >> 2] = 0.0;
  HEAPF32[i1 + 24 >> 2] = 0.0;
  HEAPF32[i1 + 20 >> 2] = 0.0;
  HEAPF32[i1 + 16 >> 2] = 1.0;
  HEAPF32[i1 + 12 >> 2] = 0.0;
  HEAPF32[i1 + 8 >> 2] = 0.0;
  HEAPF32[i1 + 4 >> 2] = 0.0;
  HEAPF32[i1 >> 2] = 1.0;
  __ZN11btMatrix3x3C1ERKfS1_S1_S1_S1_S1_S1_S1_S1_(536, i1 + 32 | 0, i1 + 28 | 0, i1 + 24 | 0, i1 + 20 | 0, i1 + 16 | 0, i1 + 12 | 0, i1 + 8 | 0, i1 + 4 | 0, i1);
  ___cxa_guard_release(584);
  i2 = 464;
 } else i2 = 464;
 do i2 = i2 + 16 | 0; while ((i2 | 0) != 512);
 HEAP32[116] = HEAP32[134];
 HEAP32[117] = HEAP32[135];
 HEAP32[118] = HEAP32[136];
 HEAP32[119] = HEAP32[137];
 HEAP32[120] = HEAP32[138];
 HEAP32[121] = HEAP32[139];
 HEAP32[122] = HEAP32[140];
 HEAP32[123] = HEAP32[141];
 HEAP32[124] = HEAP32[142];
 HEAP32[125] = HEAP32[143];
 HEAP32[126] = HEAP32[144];
 HEAP32[127] = HEAP32[145];
 HEAP32[128] = 0;
 HEAP32[129] = 0;
 HEAP32[130] = 0;
 HEAP32[131] = 0;
 ___cxa_guard_release(528);
 STACKTOP = i1;
 return;
}
function __Z21btAdjustAngleToLimitsfff(d1, d4, d3) {
 d1 = +d1;
 d4 = +d4;
 d3 = +d3;
 var i2 = 0;
 i2 = STACKTOP;
 if (d4 >= d3) {
  d4 = d1;
  STACKTOP = i2;
  return +d4;
 }
 if (d1 < d4) {
  d4 = +_fmodf(+(d4 - d1), 6.2831854820251465);
  if (!(d4 < -3.1415927410125732)) {
   if (d4 > 3.1415927410125732) d4 = d4 + -6.2831854820251465;
  } else d4 = d4 + 6.2831854820251465;
  d4 = +Math_abs(+d4);
  d3 = +_fmodf(+(d3 - d1), 6.2831854820251465);
  if (!(d3 < -3.1415927410125732)) {
   if (d3 > 3.1415927410125732) d3 = d3 + -6.2831854820251465;
  } else d3 = d3 + 6.2831854820251465;
  if (d4 < +Math_abs(+d3)) {
   d4 = d1;
   STACKTOP = i2;
   return +d4;
  }
  d4 = d1 + 6.2831854820251465;
  STACKTOP = i2;
  return +d4;
 }
 if (!(d1 > d3)) {
  d4 = d1;
  STACKTOP = i2;
  return +d4;
 }
 d3 = +_fmodf(+(d1 - d3), 6.2831854820251465);
 if (!(d3 < -3.1415927410125732)) {
  if (d3 > 3.1415927410125732) d3 = d3 + -6.2831854820251465;
 } else d3 = d3 + 6.2831854820251465;
 d3 = +Math_abs(+d3);
 d4 = +_fmodf(+(d1 - d4), 6.2831854820251465);
 if (!(d4 < -3.1415927410125732)) {
  if (d4 > 3.1415927410125732) d4 = d4 + -6.2831854820251465;
 } else d4 = d4 + 6.2831854820251465;
 if (!(+Math_abs(+d4) < d3)) {
  d4 = d1;
  STACKTOP = i2;
  return +d4;
 }
 d4 = d1 + -6.2831854820251465;
 STACKTOP = i2;
 return +d4;
}
function __ZNK17btConvexHullShape37localGetSupportingVertexWithoutMarginERK9btVector3(i2, i10, i12) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 var d1 = 0.0, i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d11 = 0.0, i13 = 0, d14 = 0.0, i15 = 0;
 i6 = STACKTOP;
 i3 = HEAP32[i10 + 96 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  HEAP32[i2 + 0 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  STACKTOP = i6;
  return;
 }
 d1 = +HEAPF32[i10 + 12 >> 2];
 d5 = +HEAPF32[i12 >> 2] * d1;
 d7 = +HEAPF32[i10 + 16 >> 2];
 d4 = +HEAPF32[i12 + 4 >> 2] * d7;
 d8 = +HEAPF32[i10 + 20 >> 2];
 d9 = +HEAPF32[i12 + 8 >> 2] * d8;
 i10 = HEAP32[i10 + 104 >> 2] | 0;
 i12 = 0;
 d11 = -3.4028234663852886e+38;
 i13 = -1;
 while (1) {
  d14 = d5 * +HEAPF32[i10 + (i12 << 4) >> 2] + d4 * +HEAPF32[i10 + (i12 << 4) + 4 >> 2] + d9 * +HEAPF32[i10 + (i12 << 4) + 8 >> 2];
  i15 = d14 > d11;
  i13 = i15 ? i12 : i13;
  i12 = i12 + 1 | 0;
  if ((i12 | 0) == (i3 | 0)) break; else d11 = i15 ? d14 : d11;
 }
 d11 = +HEAPF32[i10 + (i13 << 4) + 4 >> 2] * d7;
 d14 = +HEAPF32[i10 + (i13 << 4) + 8 >> 2] * d8;
 HEAPF32[i2 >> 2] = +HEAPF32[i10 + (i13 << 4) >> 2] * d1;
 HEAPF32[i2 + 4 >> 2] = d11;
 HEAPF32[i2 + 8 >> 2] = d14;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 STACKTOP = i6;
 return;
}
function __ZN28btHashedOverlappingPairCache8findPairEP17btBroadphaseProxyS1_(i4, i5, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[3814] = (HEAP32[3814] | 0) + 1;
 i7 = (HEAP32[i5 + 12 >> 2] | 0) > (HEAP32[i6 + 12 >> 2] | 0);
 i3 = HEAP32[(i7 ? i6 : i5) + 12 >> 2] | 0;
 i5 = HEAP32[(i7 ? i5 : i6) + 12 >> 2] | 0;
 i6 = ((i5 << 16 | i3) + ~((i5 << 16 | i3) << 15) >> 10 ^ (i5 << 16 | i3) + ~((i5 << 16 | i3) << 15)) * 9 | 0;
 i6 = ((i6 >> 6 ^ i6) + ~((i6 >> 6 ^ i6) << 11) >> 16 ^ (i6 >> 6 ^ i6) + ~((i6 >> 6 ^ i6) << 11)) & (HEAP32[i4 + 12 >> 2] | 0) + -1;
 if ((i6 | 0) >= (HEAP32[i4 + 36 >> 2] | 0)) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i7 = HEAP32[(HEAP32[i4 + 44 >> 2] | 0) + (i6 << 2) >> 2] | 0;
 if ((i7 | 0) == -1) {
  i7 = 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i6 = HEAP32[i4 + 16 >> 2] | 0;
 while (1) {
  if ((HEAP32[(HEAP32[i6 + (i7 << 4) >> 2] | 0) + 12 >> 2] | 0) == (i3 | 0) ? (HEAP32[(HEAP32[i6 + (i7 << 4) + 4 >> 2] | 0) + 12 >> 2] | 0) == (i5 | 0) : 0) break;
  i7 = HEAP32[(HEAP32[i4 + 64 >> 2] | 0) + (i7 << 2) >> 2] | 0;
  if ((i7 | 0) == -1) {
   i3 = 0;
   i1 = 8;
   break;
  }
 }
 if ((i1 | 0) == 8) {
  STACKTOP = i2;
  return i3 | 0;
 }
 i7 = i6 + (i7 << 4) | 0;
 STACKTOP = i2;
 return i7 | 0;
}
function __ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAPF32[i4 + 32 >> 2] = 1.0;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 44 >> 2] = 0;
 HEAP32[i4 + 48 >> 2] = 0;
 HEAPF32[i4 + 52 >> 2] = 1.0;
 HEAP32[i4 + 56 >> 2] = 0;
 HEAP32[i4 + 60 >> 2] = 0;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 0;
 HEAPF32[i4 + 72 >> 2] = 1.0;
 i12 = i4 + 76 | 0;
 HEAP32[i12 + 0 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAP32[i12 + 16 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i4 + 32 | 0, i4 + 16 | 0, i4);
 d9 = +HEAPF32[i4 >> 2];
 d10 = +HEAPF32[i4 + 16 >> 2];
 d7 = +HEAPF32[i4 + 4 >> 2];
 d8 = +HEAPF32[i4 + 20 >> 2];
 d5 = +HEAPF32[i4 + 8 >> 2];
 d6 = +HEAPF32[i4 + 24 >> 2];
 d11 = +Math_sqrt(+((d9 - d10) * (d9 - d10) + (d7 - d8) * (d7 - d8) + (d5 - d6) * (d5 - d6))) * .5;
 HEAPF32[i2 >> 2] = d11;
 HEAPF32[i1 >> 2] = (d10 + d9) * .5;
 HEAPF32[i1 + 4 >> 2] = (d8 + d7) * .5;
 HEAPF32[i1 + 8 >> 2] = (d6 + d5) * .5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN23btGeneric6DofConstraint8setParamEifi(i3, i5, d1, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (i4 >>> 0 < 3) if ((i5 | 0) == 2) {
  HEAPF32[i3 + (i4 << 2) + 756 >> 2] = d1;
  HEAP32[i3 + 1304 >> 2] = HEAP32[i3 + 1304 >> 2] | 4 << i4 * 3;
  STACKTOP = i2;
  return;
 } else if ((i5 | 0) == 3) {
  HEAPF32[i3 + (i4 << 2) + 740 >> 2] = d1;
  HEAP32[i3 + 1304 >> 2] = HEAP32[i3 + 1304 >> 2] | 1 << i4 * 3;
  STACKTOP = i2;
  return;
 } else if ((i5 | 0) == 4) {
  HEAPF32[i3 + (i4 << 2) + 772 >> 2] = d1;
  HEAP32[i3 + 1304 >> 2] = HEAP32[i3 + 1304 >> 2] | 2 << i4 * 3;
  STACKTOP = i2;
  return;
 } else {
  STACKTOP = i2;
  return;
 }
 if (!((i4 + -3 | 0) >>> 0 < 3)) {
  STACKTOP = i2;
  return;
 }
 if ((i5 | 0) == 4) {
  HEAPF32[i3 + (i4 + -3 << 6) + 904 >> 2] = d1;
  HEAP32[i3 + 1304 >> 2] = HEAP32[i3 + 1304 >> 2] | 2 << i4 * 3;
  STACKTOP = i2;
  return;
 } else if ((i5 | 0) == 3) {
  HEAPF32[i3 + (i4 + -3 << 6) + 896 >> 2] = d1;
  HEAP32[i3 + 1304 >> 2] = HEAP32[i3 + 1304 >> 2] | 1 << i4 * 3;
  STACKTOP = i2;
  return;
 } else if ((i5 | 0) == 2) {
  HEAPF32[i3 + (i4 + -3 << 6) + 900 >> 2] = d1;
  HEAP32[i3 + 1304 >> 2] = HEAP32[i3 + 1304 >> 2] | 4 << i4 * 3;
  STACKTOP = i2;
  return;
 } else {
  STACKTOP = i2;
  return;
 }
}
function __ZN16btCollisionWorld15contactPairTestEP17btCollisionObjectS1_RNS_21ContactResultCallbackE(i3, i5, i4, i1) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = HEAP32[i5 + 192 >> 2] | 0;
 HEAP32[i2 + 64 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = i6;
 HEAP32[i2 + 72 >> 2] = i5;
 HEAP32[i2 + 76 >> 2] = i5 + 4;
 HEAP32[i2 + 80 >> 2] = -1;
 HEAP32[i2 + 84 >> 2] = -1;
 i5 = HEAP32[i4 + 192 >> 2] | 0;
 HEAP32[i2 + 40 >> 2] = 0;
 HEAP32[i2 + 44 >> 2] = i5;
 HEAP32[i2 + 48 >> 2] = i4;
 HEAP32[i2 + 52 >> 2] = i4 + 4;
 HEAP32[i2 + 56 >> 2] = -1;
 HEAP32[i2 + 60 >> 2] = -1;
 i4 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, i2 + 64 | 0, i2 + 40 | 0, 0) | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = i2 + 64;
 HEAP32[i2 + 12 >> 2] = i2 + 40;
 HEAP32[i2 >> 2] = 7728;
 HEAP32[i2 + 32 >> 2] = i1;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, i2 + 64 | 0, i2 + 40 | 0, i3 + 28 | 0, i2);
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i4);
 i6 = HEAP32[i3 + 24 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2] & 127](i6, i4);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld10setGravityERK9btVector3(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0;
 i2 = STACKTOP;
 HEAP32[i3 + 248 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i3 + 252 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 256 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 260 >> 2] = HEAP32[i1 + 12 >> 2];
 i6 = HEAP32[i3 + 232 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = 0;
 do {
  i5 = HEAP32[(HEAP32[i3 + 240 >> 2] | 0) + (i4 << 2) >> 2] | 0;
  i8 = HEAP32[i5 + 216 >> 2] | 0;
  if (!((i8 | 0) == 2 | (i8 | 0) == 5) ? (HEAP32[i5 + 504 >> 2] & 1 | 0) == 0 : 0) {
   d7 = +HEAPF32[i5 + 344 >> 2];
   if (d7 != 0.0) {
    d10 = 1.0 / d7 * +HEAPF32[i1 + 4 >> 2];
    d9 = 1.0 / d7 * +HEAPF32[i1 + 8 >> 2];
    HEAPF32[i5 + 364 >> 2] = 1.0 / d7 * +HEAPF32[i1 >> 2];
    HEAPF32[i5 + 368 >> 2] = d10;
    HEAPF32[i5 + 372 >> 2] = d9;
    HEAPF32[i5 + 376 >> 2] = 0.0;
   }
   HEAP32[i5 + 380 >> 2] = HEAP32[i1 + 0 >> 2];
   HEAP32[i5 + 384 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i5 + 388 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i5 + 392 >> 2] = HEAP32[i1 + 12 >> 2];
   i6 = HEAP32[i3 + 232 >> 2] | 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i6 | 0));
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN9RayTester7ProcessE_1PK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = HEAP32[i2 + 36 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 24 >> 2] | 0;
 i5 = HEAP32[i2 + (i4 * 80 | 0) + 64 >> 2] | 0;
 __ZNK11btTransformmlERKS_(i3 + 56 | 0, HEAP32[i1 + 12 >> 2] | 0, i2 + (i4 * 80 | 0) | 0);
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = i5;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 44 >> 2] = i3 + 56;
 HEAP32[i3 + 48 >> 2] = -1;
 HEAP32[i3 + 52 >> 2] = i4;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 HEAPF32[i3 + 4 >> 2] = 1.0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP16[i3 + 12 >> 1] = 1;
 HEAP16[i3 + 14 >> 1] = -1;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 >> 2] = 8664;
 HEAP32[i3 + 20 >> 2] = i2;
 HEAP32[i3 + 24 >> 2] = i4;
 HEAPF32[i3 + 4 >> 2] = +HEAPF32[i2 + 4 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 __ZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackE(HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0, i3 + 32 | 0, i3);
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCacheD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 15272;
 i3 = HEAP32[i1 + 64 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 68 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 64 >> 2] = 0;
 }
 HEAP8[i1 + 68 >> 0] = 1;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 i3 = HEAP32[i1 + 44 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 48 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 44 >> 2] = 0;
 }
 HEAP8[i1 + 48 >> 0] = 1;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i3 = i1 + 12 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN27InplaceSolverIslandCallbackD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2240;
 i3 = HEAP32[i1 + 80 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 84 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 80 >> 2] = 0;
 }
 HEAP8[i1 + 84 >> 0] = 1;
 HEAP32[i1 + 80 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 0;
 HEAP32[i1 + 76 >> 2] = 0;
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 64 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 60 >> 2] = 0;
 }
 HEAP8[i1 + 64 >> 0] = 1;
 HEAP32[i1 + 60 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 i3 = HEAP32[i1 + 40 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 44 >> 0] = 1;
  HEAP32[i1 + 40 >> 2] = 0;
  HEAP32[i1 + 32 >> 2] = 0;
  i3 = i1 + 36 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 44 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP8[i1 + 44 >> 0] = 1;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN25btSimulationIslandManagerD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 16568;
 i3 = HEAP32[i1 + 56 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 60 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 56 >> 2] = 0;
 }
 HEAP8[i1 + 60 >> 0] = 1;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 40 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 36 >> 2] = 0;
 }
 HEAP8[i1 + 40 >> 0] = 1;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) == 0) {
  i3 = i1 + 12 | 0;
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 i3 = i1 + 12 | 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN23btHashedSimplePairCacheD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 19600;
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 64 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 60 >> 2] = 0;
 }
 HEAP8[i1 + 64 >> 0] = 1;
 HEAP32[i1 + 60 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 i3 = HEAP32[i1 + 40 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 44 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 40 >> 2] = 0;
 }
 HEAP8[i1 + 44 >> 0] = 1;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 20 >> 0] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i3 = i1 + 12 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN23btGeneric6DofConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((HEAP8[i1 + 1301 >> 0] | 0) == 0) {
  __ZN23btGeneric6DofConstraint16setAngularLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_(i1, i5, __ZN23btGeneric6DofConstraint15setLinearLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_(i1, i5, 0, i4 + 4 | 0, i3 + 4 | 0, i4 + 312 | 0, i3 + 312 | 0, i4 + 328 | 0, i3 + 328 | 0) | 0, i4 + 4 | 0, i3 + 4 | 0, i4 + 312 | 0, i3 + 312 | 0, i4 + 328 | 0, i3 + 328 | 0) | 0;
  STACKTOP = i2;
  return;
 } else {
  __ZN23btGeneric6DofConstraint15setLinearLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_(i1, i5, __ZN23btGeneric6DofConstraint16setAngularLimitsEPN17btTypedConstraint17btConstraintInfo2EiRK11btTransformS5_RK9btVector3S8_S8_S8_(i1, i5, 0, i4 + 4 | 0, i3 + 4 | 0, i4 + 312 | 0, i3 + 312 | 0, i4 + 328 | 0, i3 + 328 | 0) | 0, i4 + 4 | 0, i3 + 4 | 0, i4 + 312 | 0, i3 + 312 | 0, i4 + 328 | 0, i3 + 328 | 0) | 0;
  STACKTOP = i2;
  return;
 }
}
function __ZN35btSequentialImpulseConstraintSolver19getOrInitSolverBodyER17btCollisionObjectf(i1, i5, d3) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 d3 = +d3;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 i4 = HEAP32[i5 + 212 >> 2] | 0;
 if ((i4 | 0) > -1) {
  i5 = i4;
  STACKTOP = i2;
  return i5 | 0;
 }
 do if ((HEAP32[i5 + 236 >> 2] & 2 | 0) != 0) {
  if (!(+HEAPF32[i5 + 344 >> 2] != 0.0) ? (HEAP32[i5 + 204 >> 2] & 2 | 0) == 0 : 0) break;
  i4 = HEAP32[i1 + 8 >> 2] | 0;
  _memset(i2 + 244 | 0, 0, 244) | 0;
  __ZN35btSequentialImpulseConstraintSolver14initSolverBodyEP12btSolverBodyP17btCollisionObjectf(__ZN20btAlignedObjectArrayI12btSolverBodyE6expandERKS0_(i1 + 4 | 0, i2 + 244 | 0) | 0, i5, d3);
  HEAP32[i5 + 212 >> 2] = i4;
  i5 = i4;
  STACKTOP = i2;
  return i5 | 0;
 } while (0);
 i4 = HEAP32[i1 + 188 >> 2] | 0;
 if ((i4 | 0) >= 0) {
  i5 = i4;
  STACKTOP = i2;
  return i5 | 0;
 }
 HEAP32[i1 + 188 >> 2] = HEAP32[i1 + 8 >> 2];
 _memset(i2 | 0, 0, 244) | 0;
 __ZN35btSequentialImpulseConstraintSolver14initSolverBodyEP12btSolverBodyP17btCollisionObjectf(__ZN20btAlignedObjectArrayI12btSolverBodyE6expandERKS0_(i1 + 4 | 0, i2) | 0, 0, d3);
 i5 = HEAP32[i1 + 188 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN35btSequentialImpulseConstraintSolver24applyAnisotropicFrictionEP17btCollisionObjectR9btVector3i(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 180 >> 2] & 1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 d15 = +HEAPF32[i1 + 4 >> 2];
 d17 = +HEAPF32[i3 >> 2];
 d12 = +HEAPF32[i1 + 20 >> 2];
 d16 = +HEAPF32[i3 + 4 >> 2];
 d9 = +HEAPF32[i1 + 36 >> 2];
 d4 = +HEAPF32[i3 + 8 >> 2];
 d14 = +HEAPF32[i1 + 8 >> 2];
 d11 = +HEAPF32[i1 + 24 >> 2];
 d7 = +HEAPF32[i1 + 40 >> 2];
 d13 = +HEAPF32[i1 + 12 >> 2];
 d10 = +HEAPF32[i1 + 28 >> 2];
 d5 = +HEAPF32[i1 + 44 >> 2];
 d8 = (d15 * d17 + d12 * d16 + d9 * d4) * +HEAPF32[i1 + 164 >> 2];
 d6 = (d17 * d14 + d16 * d11 + d4 * d7) * +HEAPF32[i1 + 168 >> 2];
 d4 = (d17 * d13 + d16 * d10 + d4 * d5) * +HEAPF32[i1 + 172 >> 2];
 HEAPF32[i3 >> 2] = d15 * d8 + d14 * d6 + d13 * d4;
 HEAPF32[i3 + 4 >> 2] = d12 * d8 + d11 * d6 + d10 * d4;
 HEAPF32[i3 + 8 >> 2] = d9 * d8 + d7 * d6 + d5 * d4;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN20btConvexHullComputerD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 56 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 52 >> 2] = 0;
 }
 HEAP8[i1 + 56 >> 0] = 1;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 32 >> 2] = 0;
 }
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 16 >> 0] = 1;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i3 = i1 + 8 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 16 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP8[i1 + 16 >> 0] = 1;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK10btBoxShape32getPreferredPenetrationDirectionEiR9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = STACKTOP;
 switch (i2 | 0) {
 case 5:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = -1.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 0:
  {
   HEAPF32[i1 >> 2] = 1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 2:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 1:
  {
   HEAPF32[i1 >> 2] = -1.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 4:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = 0.0;
   HEAPF32[i1 + 8 >> 2] = 1.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 case 3:
  {
   HEAPF32[i1 >> 2] = 0.0;
   HEAPF32[i1 + 4 >> 2] = -1.0;
   HEAPF32[i1 + 8 >> 2] = 0.0;
   HEAPF32[i1 + 12 >> 2] = 0.0;
   STACKTOP = i3;
   return;
  }
 default:
  {
   STACKTOP = i3;
   return;
  }
 }
}
function __ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i5 = HEAP32[i3 + 188 >> 2] | 0;
 if ((i5 | 0) != 0) {
  i9 = HEAP32[i4 + 68 >> 2] | 0;
  i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] & 127](i9, i5, HEAP32[i4 + 24 >> 2] | 0);
  i9 = HEAP32[i4 + 68 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 127](i9, i5, HEAP32[i4 + 24 >> 2] | 0);
  HEAP32[i3 + 188 >> 2] = 0;
 }
 i5 = HEAP32[i4 + 8 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[i4 + 16 >> 2] | 0;
 i7 = 0;
 while (1) {
  i8 = i6 + (i7 << 2) | 0;
  i9 = i7 + 1 | 0;
  if ((HEAP32[i8 >> 2] | 0) == (i3 | 0)) break;
  if ((i9 | 0) < (i5 | 0)) i7 = i9; else {
   i1 = 9;
   break;
  }
 }
 if ((i1 | 0) == 9) {
  STACKTOP = i2;
  return;
 }
 if ((i7 | 0) >= (i5 | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[i6 + (i5 + -1 << 2) >> 2];
 HEAP32[(HEAP32[i4 + 16 >> 2] | 0) + (i5 + -1 << 2) >> 2] = i3;
 HEAP32[i4 + 8 >> 2] = i5 + -1;
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher15releaseManifoldEP20btPersistentManifold(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[1698] = (HEAP32[1698] | 0) + -1;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i3, i1);
 i4 = HEAP32[i1 + 768 >> 2] | 0;
 i5 = (HEAP32[i3 + 12 >> 2] | 0) + -1 | 0;
 i7 = HEAP32[i3 + 20 >> 2] | 0;
 i6 = HEAP32[i7 + (i4 << 2) >> 2] | 0;
 HEAP32[i7 + (i4 << 2) >> 2] = HEAP32[i7 + (i5 << 2) >> 2];
 HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + (i5 << 2) >> 2] = i6;
 HEAP32[(HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + (i4 << 2) >> 2] | 0) + 768 >> 2] = i4;
 HEAP32[i3 + 12 >> 2] = (HEAP32[i3 + 12 >> 2] | 0) + -1;
 i3 = HEAP32[i3 + 68 >> 2] | 0;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i7 = HEAP32[i3 + 16 >> 2] | 0;
 if (!(i7 >>> 0 > i1 >>> 0) ? (i7 + (Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0) | 0) | 0) >>> 0 > i1 >>> 0 : 0) {
  HEAP32[i1 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i3 + 12 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = (HEAP32[i3 + 8 >> 2] | 0) + 1;
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitE_0RK9btVector3fii(i1, i3, d2, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i6 + 32 >> 2] = i5;
 HEAP32[i6 + 36 >> 2] = i4;
 d11 = +HEAPF32[i3 >> 2];
 d10 = +HEAPF32[i3 + 4 >> 2];
 d7 = +HEAPF32[i3 + 8 >> 2];
 d9 = +HEAPF32[i1 + 56 >> 2] * d11 + +HEAPF32[i1 + 60 >> 2] * d10 + +HEAPF32[i1 + 64 >> 2] * d7;
 d8 = d11 * +HEAPF32[i1 + 72 >> 2] + d10 * +HEAPF32[i1 + 76 >> 2] + d7 * +HEAPF32[i1 + 80 >> 2];
 d7 = d11 * +HEAPF32[i1 + 88 >> 2] + d10 * +HEAPF32[i1 + 92 >> 2] + d7 * +HEAPF32[i1 + 96 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i1 + 48 >> 2];
 HEAP32[i6 + 4 >> 2] = i6 + 32;
 HEAPF32[i6 + 8 >> 2] = d9;
 HEAPF32[i6 + 12 >> 2] = d8;
 HEAPF32[i6 + 16 >> 2] = d7;
 HEAPF32[i6 + 20 >> 2] = 0.0;
 HEAPF32[i6 + 24 >> 2] = d2;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 d2 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 15](i5, i6, 1);
 STACKTOP = i6;
 return +d2;
}
function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_pthread_once(20288, 3) | 0) != 0) _abort_message(20296, i1);
 i2 = _pthread_getspecific(HEAP32[5070] | 0) | 0;
 if ((i2 | 0) == 0) _abort_message(20264, i1);
 i2 = HEAP32[i2 >> 2] | 0;
 if ((i2 | 0) == 0) _abort_message(20264, i1);
 i3 = HEAP32[i2 + 48 >> 2] | 0;
 i4 = HEAP32[i2 + 52 >> 2] | 0;
 if (!((i3 & -256 | 0) == 1126902528 & (i4 | 0) == 1129074247)) {
  HEAP32[i1 >> 2] = 20112;
  _abort_message(20224, i1);
 }
 if ((i3 | 0) == 1126902529 & (i4 | 0) == 1129074247) i3 = HEAP32[i2 + 44 >> 2] | 0; else i3 = i2 + 80 | 0;
 HEAP32[i1 + 12 >> 2] = i3;
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 if (__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(20656, i4, i1 + 12 | 0) | 0) {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 127](i4) | 0;
  HEAP32[i1 >> 2] = 20112;
  HEAP32[i1 + 4 >> 2] = i2;
  HEAP32[i1 + 8 >> 2] = i4;
  _abort_message(20128, i1);
 } else {
  HEAP32[i1 >> 2] = 20112;
  HEAP32[i1 + 4 >> 2] = i2;
  _abort_message(20176, i1);
 }
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitERK9btVector3fii(i1, i3, d2, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i6 + 32 >> 2] = i5;
 HEAP32[i6 + 36 >> 2] = i4;
 d11 = +HEAPF32[i3 >> 2];
 d10 = +HEAPF32[i3 + 4 >> 2];
 d7 = +HEAPF32[i3 + 8 >> 2];
 d9 = +HEAPF32[i1 + 56 >> 2] * d11 + +HEAPF32[i1 + 60 >> 2] * d10 + +HEAPF32[i1 + 64 >> 2] * d7;
 d8 = d11 * +HEAPF32[i1 + 72 >> 2] + d10 * +HEAPF32[i1 + 76 >> 2] + d7 * +HEAPF32[i1 + 80 >> 2];
 d7 = d11 * +HEAPF32[i1 + 88 >> 2] + d10 * +HEAPF32[i1 + 92 >> 2] + d7 * +HEAPF32[i1 + 96 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i1 + 48 >> 2];
 HEAP32[i6 + 4 >> 2] = i6 + 32;
 HEAPF32[i6 + 8 >> 2] = d9;
 HEAPF32[i6 + 12 >> 2] = d8;
 HEAPF32[i6 + 16 >> 2] = d7;
 HEAPF32[i6 + 20 >> 2] = 0.0;
 HEAPF32[i6 + 24 >> 2] = d2;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 d2 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 15](i5, i6, 1);
 STACKTOP = i6;
 return +d2;
}
function __ZN12gjkepa2_impl3EPA11getedgedistEPNS0_5sFaceEPNS_3GJK3sSVES5_Rf(d10, d11, d9, d2, d3, d4, d1, d7, d8, i5) {
 d10 = +d10;
 d11 = +d11;
 d9 = +d9;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d1 = +d1;
 d7 = +d7;
 d8 = +d8;
 i5 = i5 | 0;
 var i6 = 0;
 i6 = STACKTOP;
 if (!(((d1 - d2) * d11 - (d7 - d3) * d10) * d4 + (((d7 - d3) * d9 - (d8 - d4) * d11) * d2 + ((d8 - d4) * d10 - (d1 - d2) * d9) * d3) < 0.0)) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((d1 - d2) * d2 + (d7 - d3) * d3 + (d8 - d4) * d4 > 0.0) {
  d11 = +Math_sqrt(+(d2 * d2 + d3 * d3 + d4 * d4));
  HEAPF32[i5 >> 2] = d11;
  i5 = 1;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((d1 - d2) * d1 + (d7 - d3) * d7 + (d8 - d4) * d8 < 0.0) {
  d11 = +Math_sqrt(+(d1 * d1 + d7 * d7 + d8 * d8));
  HEAPF32[i5 >> 2] = d11;
  i5 = 1;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  d11 = ((d1 * d1 + d7 * d7 + d8 * d8) * (d2 * d2 + d3 * d3 + d4 * d4) - (d1 * d2 + d7 * d3 + d8 * d4) * (d1 * d2 + d7 * d3 + d8 * d4)) / ((d1 - d2) * (d1 - d2) + (d7 - d3) * (d7 - d3) + (d8 - d4) * (d8 - d4));
  d11 = +Math_sqrt(+(d11 > 0.0 ? d11 : 0.0));
  HEAPF32[i5 >> 2] = d11;
  i5 = 1;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}
function __ZNK14btQuantizedBvh42walkRecursiveQuantizedTreeAgainstQueryAabbEPK18btQuantizedBvhNodeP21btNodeOverlapCallbackPtS5_(i6, i1, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i7 = 0;
 i2 = STACKTOP;
 while (1) {
  i7 = HEAP32[i6 + 12 >> 2] | 0;
  if (!(((HEAPU16[i5 >> 1] | 0) >= (HEAPU16[i6 >> 1] | 0) ? (HEAPU16[i4 >> 1] | 0) <= (HEAPU16[i6 + 6 >> 1] | 0) : 0) & (HEAPU16[i4 + 4 >> 1] | 0) <= (HEAPU16[i6 + 10 >> 1] | 0) & (HEAPU16[i5 + 4 >> 1] | 0) >= (HEAPU16[i6 + 4 >> 1] | 0) & (HEAPU16[i4 + 2 >> 1] | 0) <= (HEAPU16[i6 + 8 >> 1] | 0) & (HEAPU16[i5 + 2 >> 1] | 0) >= (HEAPU16[i6 + 2 >> 1] | 0))) {
   i3 = 8;
   break;
  }
  if ((i7 | 0) > -1) break;
  __ZNK14btQuantizedBvh42walkRecursiveQuantizedTreeAgainstQueryAabbEPK18btQuantizedBvhNodeP21btNodeOverlapCallbackPtS5_(i6 + 16 | 0, i1, i4, i5);
  i7 = HEAP32[i6 + 28 >> 2] | 0;
  if ((i7 | 0) > -1) {
   i6 = i6 + 32 | 0;
   continue;
  } else {
   i6 = i6 + (1 - i7 << 4) | 0;
   continue;
  }
 }
 if ((i3 | 0) == 8) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i7 >> 21, i7 & 2097151);
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBody12setMassPropsEfRK9btVector3(i1, d4, i3) {
 i1 = i1 | 0;
 d4 = +d4;
 i3 = i3 | 0;
 var d2 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0;
 i7 = HEAP32[i1 + 204 >> 2] | 0;
 if (d4 == 0.0) {
  HEAP32[i1 + 204 >> 2] = i7 | 1;
  HEAPF32[i1 + 344 >> 2] = 0.0;
  d2 = 0.0;
 } else {
  HEAP32[i1 + 204 >> 2] = i7 & -2;
  HEAPF32[i1 + 344 >> 2] = 1.0 / d4;
  d2 = 1.0 / d4;
 }
 d5 = +HEAPF32[i1 + 384 >> 2] * d4;
 d6 = +HEAPF32[i1 + 388 >> 2] * d4;
 HEAPF32[i1 + 364 >> 2] = +HEAPF32[i1 + 380 >> 2] * d4;
 HEAPF32[i1 + 368 >> 2] = d5;
 HEAPF32[i1 + 372 >> 2] = d6;
 HEAPF32[i1 + 376 >> 2] = 0.0;
 d4 = +HEAPF32[i3 >> 2];
 if (d4 != 0.0) d4 = 1.0 / d4; else d4 = 0.0;
 d5 = +HEAPF32[i3 + 4 >> 2];
 if (d5 != 0.0) d5 = 1.0 / d5; else d5 = 0.0;
 d6 = +HEAPF32[i3 + 8 >> 2];
 if (d6 != 0.0) d6 = 1.0 / d6; else d6 = 0.0;
 HEAPF32[i1 + 396 >> 2] = d4;
 HEAPF32[i1 + 400 >> 2] = d5;
 HEAPF32[i1 + 404 >> 2] = d6;
 HEAPF32[i1 + 408 >> 2] = 0.0;
 d5 = d2 * +HEAPF32[i1 + 352 >> 2];
 d6 = d2 * +HEAPF32[i1 + 356 >> 2];
 HEAPF32[i1 + 560 >> 2] = +HEAPF32[i1 + 348 >> 2] * d2;
 HEAPF32[i1 + 564 >> 2] = d5;
 HEAPF32[i1 + 568 >> 2] = d6;
 HEAPF32[i1 + 572 >> 2] = 0.0;
 return;
}
function __ZN30btKinematicCharacterController5resetEP16btCollisionWorld(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAPF32[i3 + 16 >> 2] = 0.0;
 HEAPF32[i3 + 20 >> 2] = 0.0;
 HEAP8[i3 + 168 >> 0] = 0;
 HEAP8[i3 + 169 >> 0] = 0;
 HEAPF32[i3 + 172 >> 2] = 0.0;
 HEAP32[i3 + 60 >> 2] = 0;
 HEAP32[i3 + 64 >> 2] = 0;
 HEAP32[i3 + 68 >> 2] = 0;
 HEAP32[i3 + 72 >> 2] = 0;
 i3 = HEAP32[(HEAP32[i3 + 8 >> 2] | 0) + 284 >> 2] | 0;
 i4 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) + 4 | 0;
 if ((HEAP32[i4 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 do {
  i5 = HEAP32[i3 >> 2] | 0;
  i6 = HEAP32[i5 + 12 >> 2] | 0;
  i5 = (FUNCTION_TABLE_ii[HEAP32[i5 + 28 >> 2] & 127](i3) | 0) + 12 | 0;
  i5 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
  i4 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) + 12 | 0;
  FUNCTION_TABLE_iiiii[i6 & 31](i3, i5, HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0) | 0;
  i4 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) + 4 | 0;
 } while ((HEAP32[i4 >> 2] | 0) > 0);
 STACKTOP = i2;
 return;
}
function __ZNK15btCompoundShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 HEAPF32[i4 + 32 >> 2] = 1.0;
 HEAP32[i4 + 36 >> 2] = 0;
 HEAP32[i4 + 40 >> 2] = 0;
 HEAP32[i4 + 44 >> 2] = 0;
 HEAP32[i4 + 48 >> 2] = 0;
 HEAPF32[i4 + 52 >> 2] = 1.0;
 HEAP32[i4 + 56 >> 2] = 0;
 HEAP32[i4 + 60 >> 2] = 0;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 0;
 HEAPF32[i4 + 72 >> 2] = 1.0;
 i8 = i4 + 76 | 0;
 HEAP32[i8 + 0 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3, i4 + 32 | 0, i4 + 16 | 0, i4);
 d6 = (+HEAPF32[i4 >> 2] - +HEAPF32[i4 + 16 >> 2]) * .5 * 2.0;
 d5 = (+HEAPF32[i4 + 4 >> 2] - +HEAPF32[i4 + 20 >> 2]) * .5 * 2.0;
 d7 = (+HEAPF32[i4 + 8 >> 2] - +HEAPF32[i4 + 24 >> 2]) * .5 * 2.0;
 HEAPF32[i1 >> 2] = d2 / 12.0 * (d5 * d5 + d7 * d7);
 HEAPF32[i1 + 4 >> 2] = d2 / 12.0 * (d6 * d6 + d7 * d7);
 HEAPF32[i1 + 8 >> 2] = d2 / 12.0 * (d6 * d6 + d5 * d5);
 STACKTOP = i4;
 return;
}
function __ZN23btDiscreteDynamicsWorld14updateVehiclesEf(i2, d3) {
 i2 = i2 | 0;
 d3 = +d3;
 var i1 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(1664);
 if ((HEAP32[i2 + 280 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   i5 = HEAP32[(HEAP32[i2 + 288 >> 2] | 0) + (i4 << 2) >> 2] | 0;
   FUNCTION_TABLE_viid[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 7](i5, i2, d3);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i2 + 280 >> 2] | 0));
 }
 i2 = HEAP32[5022] | 0;
 i5 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i5;
 if ((i5 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i5 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZNK15btTriangleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i2, i4, i5, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0;
 i6 = STACKTOP;
 if ((i3 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i1 = 0;
 do {
  d13 = +HEAPF32[i4 + (i1 << 4) >> 2];
  d12 = +HEAPF32[i4 + (i1 << 4) + 4 >> 2];
  d8 = +HEAPF32[i4 + (i1 << 4) + 8 >> 2];
  d10 = d13 * +HEAPF32[i2 + 56 >> 2] + d12 * +HEAPF32[i2 + 60 >> 2] + d8 * +HEAPF32[i2 + 64 >> 2];
  d9 = d13 * +HEAPF32[i2 + 72 >> 2] + d12 * +HEAPF32[i2 + 76 >> 2] + d8 * +HEAPF32[i2 + 80 >> 2];
  d8 = d13 * +HEAPF32[i2 + 88 >> 2] + d12 * +HEAPF32[i2 + 92 >> 2] + d8 * +HEAPF32[i2 + 96 >> 2];
  i7 = i5 + (i1 << 4) | 0;
  if (d10 < d9) i11 = d9 < d8 ? 2 : 1; else i11 = d10 < d8 ? 2 : 0;
  i11 = i2 + (i11 << 4) + 56 | 0;
  HEAP32[i7 + 0 >> 2] = HEAP32[i11 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i3 | 0));
 STACKTOP = i6;
 return;
}
function __ZNK21btConeTwistConstraint16GetPointForAngleEff(i3, i8, d4, d1) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 d4 = +d4;
 d1 = +d1;
 var d2 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 d2 = +Math_cos(+d4);
 d4 = +Math_sin(+d4);
 d5 = +HEAPF32[i8 + 444 >> 2];
 if (+Math_abs(+d2) > 1.1920928955078125e-7) {
  d9 = +HEAPF32[i8 + 448 >> 2];
  d6 = d4 * d4;
  d7 = d2 * d2;
  d5 = +Math_sqrt(+((d4 * d4 / (d2 * d2) + 1.0) / (1.0 / (d9 * d9) + d4 * d4 / (d2 * d2) / (d5 * d5))));
 } else {
  d6 = d4 * d4;
  d7 = d2 * d2;
 }
 d10 = d5 * .5;
 d9 = +Math_sin(+d10) / +Math_sqrt(+(d7 + 0.0 + d6));
 d10 = +Math_cos(+d10);
 d11 = d10 * d1 + d2 * d9 * 0.0 - d4 * d9 * -0.0;
 d7 = d10 * 0.0 - d4 * d9 * d1 - d9 * 0.0 * 0.0;
 d5 = d10 * 0.0 + d9 * 0.0 * 0.0 - d2 * d9 * d1;
 d6 = -(d9 * 0.0 * d1) - d2 * d9 * 0.0 - d4 * d9 * -0.0;
 HEAPF32[i3 >> 2] = d4 * d9 * d7 + (d10 * d11 + d6 * -(d9 * 0.0)) - d5 * -(d2 * d9);
 HEAPF32[i3 + 4 >> 2] = d5 * -(d9 * 0.0) + (d10 * d7 + d6 * -(d2 * d9)) - d4 * d9 * d11;
 HEAPF32[i3 + 8 >> 2] = d11 * -(d2 * d9) + (d10 * d5 + d4 * d9 * d6) - d7 * -(d9 * 0.0);
 HEAPF32[i3 + 12 >> 2] = 0.0;
 return;
}
function __ZNK15btTriangleShape32getPreferredPenetrationDirectionEiR9btVector3(i11, i3, i2) {
 i11 = i11 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d1 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i6 = STACKTOP;
 d8 = +HEAPF32[i11 + 56 >> 2];
 d5 = +HEAPF32[i11 + 72 >> 2] - d8;
 d7 = +HEAPF32[i11 + 60 >> 2];
 d4 = +HEAPF32[i11 + 76 >> 2] - d7;
 d9 = +HEAPF32[i11 + 64 >> 2];
 d1 = +HEAPF32[i11 + 80 >> 2] - d9;
 d8 = +HEAPF32[i11 + 88 >> 2] - d8;
 d7 = +HEAPF32[i11 + 92 >> 2] - d7;
 d9 = +HEAPF32[i11 + 96 >> 2] - d9;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 d10 = 1.0 / +Math_sqrt(+((d5 * d7 - d4 * d8) * (d5 * d7 - d4 * d8) + ((d4 * d9 - d1 * d7) * (d4 * d9 - d1 * d7) + (d1 * d8 - d5 * d9) * (d1 * d8 - d5 * d9))));
 HEAPF32[i2 >> 2] = d10 * (d4 * d9 - d1 * d7);
 HEAPF32[i2 + 4 >> 2] = d10 * (d1 * d8 - d5 * d9);
 HEAPF32[i2 + 8 >> 2] = (d5 * d7 - d4 * d8) * d10;
 if ((i3 | 0) == 0) {
  STACKTOP = i6;
  return;
 }
 HEAPF32[i2 >> 2] = d10 * (d4 * d9 - d1 * d7) * -1.0;
 HEAPF32[i2 + 4 >> 2] = d10 * (d1 * d8 - d5 * d9) * -1.0;
 HEAPF32[i2 + 8 >> 2] = (d5 * d7 - d4 * d8) * d10 * -1.0;
 STACKTOP = i6;
 return;
}
function __ZN31btDefaultCollisionConfiguration31getCollisionAlgorithmCreateFuncEii(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 do if (!((i3 | 0) == 8 & (i4 | 0) == 8)) {
  if ((i3 | 0) == 8 & (i4 | 0) == 1) {
   i2 = i2 + 76 | 0;
   break;
  }
  if ((i3 | 0) == 1 & (i4 | 0) == 8) {
   i2 = i2 + 80 | 0;
   break;
  }
  if ((i4 | i3 | 0) == 0) {
   i2 = i2 + 72 | 0;
   break;
  }
  if ((i3 | 0) < 20 & (i4 | 0) == 28) {
   i2 = i2 + 88 | 0;
   break;
  }
  if ((i4 | 0) < 20 & (i3 | 0) == 28) {
   i2 = i2 + 84 | 0;
   break;
  }
  if ((i3 | 0) < 20) {
   if ((i4 | 0) < 20) {
    i2 = i2 + 32 | 0;
    break;
   }
   if ((i4 + -21 | 0) >>> 0 < 9) {
    i2 = i2 + 36 | 0;
    break;
   }
  } else if ((i4 | 0) < 20 ? (i3 + -21 | 0) >>> 0 < 9 : 0) {
   i2 = i2 + 40 | 0;
   break;
  }
  if ((i3 | 0) == 31) if ((i4 | 0) == 31) {
   i2 = i2 + 48 | 0;
   break;
  } else {
   i2 = i2 + 44 | 0;
   break;
  } else if ((i4 | 0) == 31) {
   i2 = i2 + 52 | 0;
   break;
  } else {
   i2 = i2 + 56 | 0;
   break;
  }
 } else i2 = i2 + 60 | 0; while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}
function __ZN30btKinematicCharacterController4warpERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i2 + 260 >> 2] = (HEAP32[i2 + 260 >> 2] | 0) + 1;
 HEAPF32[i2 + 4 >> 2] = 1.0;
 HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i2 + 20 >> 2] = 0;
 HEAPF32[i2 + 24 >> 2] = 1.0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i2 + 32 >> 2] = 0;
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 40 >> 2] = 0;
 HEAPF32[i2 + 44 >> 2] = 1.0;
 HEAPF32[i2 + 48 >> 2] = 0.0;
 HEAP32[i2 + 52 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i2 + 56 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i2 + 64 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitE_0RK9btVector3SE_fii(i3, i4, i5, d1, i7, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 HEAP32[i2 + 48 >> 2] = i7;
 HEAP32[i2 + 52 >> 2] = i6;
 i6 = HEAP32[i3 + 212 >> 2] | 0;
 if (!(+HEAPF32[i6 + 4 >> 2] >= d1)) {
  STACKTOP = i2;
  return +d1;
 }
 HEAP32[i2 >> 2] = HEAP32[i3 + 216 >> 2];
 HEAP32[i2 + 4 >> 2] = i2 + 48;
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAPF32[i2 + 40 >> 2] = d1;
 d1 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i2, 0);
 STACKTOP = i2;
 return +d1;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitERK9btVector3SE_fii(i3, i4, i5, d1, i7, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 HEAP32[i2 + 48 >> 2] = i7;
 HEAP32[i2 + 52 >> 2] = i6;
 i6 = HEAP32[i3 + 212 >> 2] | 0;
 if (!(+HEAPF32[i6 + 4 >> 2] >= d1)) {
  STACKTOP = i2;
  return +d1;
 }
 HEAP32[i2 >> 2] = HEAP32[i3 + 216 >> 2];
 HEAP32[i2 + 4 >> 2] = i2 + 48;
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAPF32[i2 + 40 >> 2] = d1;
 d1 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i2, 1);
 STACKTOP = i2;
 return +d1;
}
function _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i4 = _malloc(84) | 0;
 L1 : do if ((i4 | 0) == 0) {
  while (1) {
   i4 = HEAP32[5158] | 0;
   HEAP32[5158] = i4 + 0;
   if ((i4 | 0) == 0) break;
   FUNCTION_TABLE_v[i4 & 3]();
   i4 = _malloc(84) | 0;
   if ((i4 | 0) != 0) break L1;
  }
  i4 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i4 >> 2] = 20472;
  ___cxa_throw(i4 | 0, 20520, 265);
 } while (0);
 HEAPF32[i4 + 4 >> 2] = 1.0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP16[i4 + 12 >> 1] = 1;
 HEAP16[i4 + 14 >> 1] = -1;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 >> 2] = 336;
 i5 = i4 + 20 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = i4 + 36 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN28btCompoundCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18040;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i4 = 0;
  do {
   i5 = HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + (i4 << 2) >> 2] | 0;
   if ((i5 | 0) != 0) {
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i5 >> 2] >> 2] & 511](i5);
    i5 = HEAP32[i1 + 4 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] & 127](i5, HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + (i4 << 2) >> 2] | 0);
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i3 | 0));
 }
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 24 >> 0] = 1;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  i5 = i1 + 16 | 0;
  HEAP32[i5 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 24 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP8[i1 + 24 >> 0] = 1;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i5 = i1 + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN17btTypedConstraintC2E21btTypedConstraintTypeR11btRigidBody(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 >> 2] = 64;
 HEAP32[i1 + 8 >> 2] = -1;
 HEAP32[i1 + 12 >> 2] = -1;
 HEAPF32[i1 + 16 >> 2] = 3.4028234663852886e+38;
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP8[i1 + 21 >> 0] = 0;
 HEAP32[i1 + 24 >> 2] = -1;
 HEAP32[i1 + 28 >> 2] = i3;
 if ((HEAP8[5024] | 0) == 0 ? (___cxa_guard_acquire(5024) | 0) != 0 : 0) {
  HEAP32[i2 + 16 >> 2] = 0;
  HEAP32[i2 + 20 >> 2] = 0;
  HEAP32[i2 + 24 >> 2] = 0;
  HEAP32[i2 + 28 >> 2] = 0;
  __ZN11btRigidBodyC2EfP13btMotionStateP16btCollisionShapeRK9btVector3(4408, 0.0, 0, 0, i2 + 16 | 0);
  ___cxa_guard_release(5024);
 }
 HEAP32[i2 + 0 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 __ZN11btRigidBody12setMassPropsEfRK9btVector3(4408, 0.0, i2);
 HEAP32[i1 + 32 >> 2] = 4408;
 HEAPF32[i1 + 36 >> 2] = 0.0;
 HEAPF32[i1 + 40 >> 2] = .30000001192092896;
 HEAP32[i1 + 44 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK15btTriangleShape16getPlaneEquationEiR9btVector3S1_(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i4 = STACKTOP;
 d6 = +HEAPF32[i2 + 56 >> 2];
 d9 = +HEAPF32[i2 + 72 >> 2] - d6;
 d8 = +HEAPF32[i2 + 60 >> 2];
 d7 = +HEAPF32[i2 + 76 >> 2] - d8;
 d10 = +HEAPF32[i2 + 64 >> 2];
 d11 = +HEAPF32[i2 + 80 >> 2] - d10;
 d6 = +HEAPF32[i2 + 88 >> 2] - d6;
 d8 = +HEAPF32[i2 + 92 >> 2] - d8;
 d10 = +HEAPF32[i2 + 96 >> 2] - d10;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 d5 = 1.0 / +Math_sqrt(+((d9 * d8 - d7 * d6) * (d9 * d8 - d7 * d6) + ((d7 * d10 - d11 * d8) * (d7 * d10 - d11 * d8) + (d11 * d6 - d9 * d10) * (d11 * d6 - d9 * d10))));
 HEAPF32[i3 >> 2] = d5 * (d7 * d10 - d11 * d8);
 HEAPF32[i3 + 4 >> 2] = d5 * (d11 * d6 - d9 * d10);
 HEAPF32[i3 + 8 >> 2] = (d9 * d8 - d7 * d6) * d5;
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 60 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 64 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 68 >> 2];
 STACKTOP = i4;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i4 = _malloc(80) | 0;
 L1 : do if ((i4 | 0) == 0) {
  while (1) {
   i4 = HEAP32[5158] | 0;
   HEAP32[5158] = i4 + 0;
   if ((i4 | 0) == 0) break;
   FUNCTION_TABLE_v[i4 & 3]();
   i4 = _malloc(80) | 0;
   if ((i4 | 0) != 0) break L1;
  }
  i4 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i4 >> 2] = 20472;
  ___cxa_throw(i4 | 0, 20520, 265);
 } while (0);
 HEAPF32[i4 + 4 >> 2] = 1.0;
 HEAP16[i4 + 8 >> 1] = 1;
 HEAP16[i4 + 10 >> 1] = -1;
 HEAP32[i4 >> 2] = 688;
 i5 = i4 + 12 | 0;
 HEAP32[i5 + 0 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = i4 + 28 | 0;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i4 + 76 >> 2] = 0;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN21btConeTwistConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i3 + 527 >> 0] | 0) != 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = 3;
 HEAP32[i1 + 4 >> 2] = 3;
 i8 = HEAP32[i3 + 28 >> 2] | 0;
 i7 = HEAP32[i3 + 32 >> 2] | 0;
 __ZN21btConeTwistConstraint14calcAngleInfo2ERK11btTransformS2_RK11btMatrix3x3S5_(i3, i8 + 4 | 0, i7 + 4 | 0, i8 + 264 | 0, i7 + 264 | 0);
 if (((HEAP8[i3 + 526 >> 0] | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, HEAP32[i1 >> 2] = i4 + 1, i5 = HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 4 >> 2] = i5 + -1, d6 = +HEAPF32[i3 + 456 >> 2], +HEAPF32[i3 + 444 >> 2] < d6) : 0) ? +HEAPF32[i3 + 448 >> 2] < d6 : 0) {
  HEAP32[i1 >> 2] = i4 + 2;
  HEAP32[i1 + 4 >> 2] = i5 + -2;
 }
 if ((HEAP8[i3 + 525 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + -1;
 STACKTOP = i2;
 return;
}
function __ZN25btSimulationIslandManager26storeIslandActivationStateEP16btCollisionWorld(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 if ((HEAP32[i2 + 8 >> 2] | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i3 = HEAP32[i2 + 16 >> 2] | 0;
 i4 = 0;
 i6 = 0;
 do {
  i7 = HEAP32[i3 + (i4 << 2) >> 2] | 0;
  if ((HEAP32[i7 + 204 >> 2] & 3 | 0) == 0) {
   i8 = HEAP32[i1 + 16 >> 2] | 0;
   i10 = i8 + (i6 << 3) | 0;
   i9 = HEAP32[i10 >> 2] | 0;
   if ((i9 | 0) == (i6 | 0)) i11 = i6; else do {
    i11 = i8 + (i9 << 3) | 0;
    HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
    i11 = HEAP32[i11 >> 2] | 0;
    i10 = i8 + (i11 << 3) | 0;
    i9 = HEAP32[i10 >> 2] | 0;
   } while ((i11 | 0) != (i9 | 0));
   HEAP32[i7 + 208 >> 2] = i11;
   HEAP32[i8 + (i6 << 3) + 4 >> 2] = i4;
   HEAP32[i7 + 212 >> 2] = -1;
   i6 = i6 + 1 | 0;
  } else {
   HEAP32[i7 + 208 >> 2] = -1;
   HEAP32[i7 + 212 >> 2] = -2;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i2 + 8 >> 2] | 0));
 STACKTOP = i5;
 return;
}
function __ZN15btCylinderShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i3 = STACKTOP;
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d12 = (d10 + +HEAPF32[i1 + 28 >> 2]) / +HEAPF32[i1 + 12 >> 2];
 d9 = (d7 + +HEAPF32[i1 + 32 >> 2]) / +HEAPF32[i1 + 16 >> 2];
 d6 = (d4 + +HEAPF32[i1 + 36 >> 2]) / +HEAPF32[i1 + 20 >> 2];
 d11 = +Math_abs(+(+HEAPF32[i2 >> 2]));
 d8 = +Math_abs(+(+HEAPF32[i2 + 4 >> 2]));
 d5 = +Math_abs(+(+HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 + 12 >> 2] = d11;
 HEAPF32[i1 + 16 >> 2] = d8;
 HEAPF32[i1 + 20 >> 2] = d5;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 HEAPF32[i1 + 28 >> 2] = d12 * d11 - d10;
 HEAPF32[i1 + 32 >> 2] = d9 * d8 - d7;
 HEAPF32[i1 + 36 >> 2] = d6 * d5 - d4;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN14btCapsuleShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i3 = STACKTOP;
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d12 = (d10 + +HEAPF32[i1 + 28 >> 2]) / +HEAPF32[i1 + 12 >> 2];
 d9 = (d7 + +HEAPF32[i1 + 32 >> 2]) / +HEAPF32[i1 + 16 >> 2];
 d6 = (d4 + +HEAPF32[i1 + 36 >> 2]) / +HEAPF32[i1 + 20 >> 2];
 d11 = +Math_abs(+(+HEAPF32[i2 >> 2]));
 d8 = +Math_abs(+(+HEAPF32[i2 + 4 >> 2]));
 d5 = +Math_abs(+(+HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 + 12 >> 2] = d11;
 HEAPF32[i1 + 16 >> 2] = d8;
 HEAPF32[i1 + 20 >> 2] = d5;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 HEAPF32[i1 + 28 >> 2] = d12 * d11 - d10;
 HEAPF32[i1 + 32 >> 2] = d9 * d8 - d7;
 HEAPF32[i1 + 36 >> 2] = d6 * d5 - d4;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function _emscripten_bind_LocalConvexResult_LocalConvexResult_5(i1, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i2 = 0, i7 = 0;
 i2 = STACKTOP;
 i7 = _malloc(44) | 0;
 L1 : do if ((i7 | 0) == 0) {
  while (1) {
   i7 = HEAP32[5158] | 0;
   HEAP32[5158] = i7 + 0;
   if ((i7 | 0) == 0) break;
   FUNCTION_TABLE_v[i7 & 3]();
   i7 = _malloc(44) | 0;
   if ((i7 | 0) != 0) break L1;
  }
  i7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i7 >> 2] = 20472;
  ___cxa_throw(i7 | 0, 20520, 265);
 } while (0);
 HEAP32[i7 >> 2] = i1;
 HEAP32[i7 + 4 >> 2] = i3;
 i3 = i7 + 8 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = i7 + 24 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i5 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAPF32[i7 + 40 >> 2] = d6;
 STACKTOP = i2;
 return i7 | 0;
}
function __ZN10btBoxShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i3 = STACKTOP;
 d10 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d12 = (d10 + +HEAPF32[i1 + 28 >> 2]) / +HEAPF32[i1 + 12 >> 2];
 d9 = (d7 + +HEAPF32[i1 + 32 >> 2]) / +HEAPF32[i1 + 16 >> 2];
 d6 = (d4 + +HEAPF32[i1 + 36 >> 2]) / +HEAPF32[i1 + 20 >> 2];
 d11 = +Math_abs(+(+HEAPF32[i2 >> 2]));
 d8 = +Math_abs(+(+HEAPF32[i2 + 4 >> 2]));
 d5 = +Math_abs(+(+HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 + 12 >> 2] = d11;
 HEAPF32[i1 + 16 >> 2] = d8;
 HEAPF32[i1 + 20 >> 2] = d5;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 HEAPF32[i1 + 28 >> 2] = d12 * d11 - d10;
 HEAPF32[i1 + 32 >> 2] = d9 * d8 - d7;
 HEAPF32[i1 + 36 >> 2] = d6 * d5 - d4;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZNK25btConvexTriangleMeshShape24localGetSupportingVertexERK9btVector3(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] & 127](i4, i3, i1);
 if (!(+FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3) != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d9 = +HEAPF32[i1 >> 2];
 d7 = +HEAPF32[i1 + 4 >> 2];
 d6 = +HEAPF32[i1 + 8 >> 2];
 d5 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d6;
 d8 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d7;
 d9 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d9;
 d6 = 1.0 / +Math_sqrt(+(d5 * d5 + (d9 * d9 + d8 * d8)));
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i4 >> 2] = d6 * d9 * d7 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 + 4 >> 2] = d7 * d6 * d8 + +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i4 + 8 >> 2] = d7 * d6 * d5 + +HEAPF32[i4 + 8 >> 2];
 STACKTOP = i2;
 return;
}
function __ZNK21btConvexInternalShape24localGetSupportingVertexERK9btVector3(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] & 127](i4, i3, i1);
 if (!(+FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3) != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d9 = +HEAPF32[i1 >> 2];
 d7 = +HEAPF32[i1 + 4 >> 2];
 d6 = +HEAPF32[i1 + 8 >> 2];
 d5 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d6;
 d8 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d7;
 d9 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d9;
 d6 = 1.0 / +Math_sqrt(+(d5 * d5 + (d9 * d9 + d8 * d8)));
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i4 >> 2] = d6 * d9 * d7 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 + 4 >> 2] = d7 * d6 * d8 + +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i4 + 8 >> 2] = d7 * d6 * d5 + +HEAPF32[i4 + 8 >> 2];
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBody_applyForce_2(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 d4 = +HEAPF32[i1 + 348 >> 2];
 d6 = +HEAPF32[i1 + 352 >> 2];
 d7 = +HEAPF32[i3 + 4 >> 2] * d6;
 d8 = +HEAPF32[i1 + 356 >> 2];
 d9 = +HEAPF32[i3 + 8 >> 2] * d8;
 HEAPF32[i1 + 412 >> 2] = +HEAPF32[i1 + 412 >> 2] + +HEAPF32[i3 >> 2] * d4;
 HEAPF32[i1 + 416 >> 2] = +HEAPF32[i1 + 416 >> 2] + d7;
 HEAPF32[i1 + 420 >> 2] = +HEAPF32[i1 + 420 >> 2] + d9;
 d4 = +HEAPF32[i3 >> 2] * d4;
 d6 = +HEAPF32[i3 + 4 >> 2] * d6;
 d8 = +HEAPF32[i3 + 8 >> 2] * d8;
 d9 = +HEAPF32[i2 + 4 >> 2];
 d7 = +HEAPF32[i2 + 8 >> 2];
 d10 = +HEAPF32[i2 >> 2];
 d5 = (d7 * d4 - d10 * d8) * +HEAPF32[i1 + 548 >> 2];
 d4 = (d10 * d6 - d9 * d4) * +HEAPF32[i1 + 552 >> 2];
 HEAPF32[i1 + 428 >> 2] = +HEAPF32[i1 + 428 >> 2] + (d9 * d8 - d7 * d6) * +HEAPF32[i1 + 544 >> 2];
 HEAPF32[i1 + 432 >> 2] = +HEAPF32[i1 + 432 >> 2] + d5;
 HEAPF32[i1 + 436 >> 2] = +HEAPF32[i1 + 436 >> 2] + d4;
 return;
}
function __ZNK17btConvexHullShape24localGetSupportingVertexERK9btVector3(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] & 127](i4, i3, i1);
 if (!(+FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3) != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d9 = +HEAPF32[i1 >> 2];
 d7 = +HEAPF32[i1 + 4 >> 2];
 d6 = +HEAPF32[i1 + 8 >> 2];
 d5 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d6;
 d8 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d7;
 d9 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d9;
 d6 = 1.0 / +Math_sqrt(+(d5 * d5 + (d9 * d9 + d8 * d8)));
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i4 >> 2] = d6 * d9 * d7 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 + 4 >> 2] = d7 * d6 * d8 + +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i4 + 8 >> 2] = d7 * d6 * d5 + +HEAPF32[i4 + 8 >> 2];
 STACKTOP = i2;
 return;
}
function __ZNK18btSliderConstraint8getParamEii(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, d5 = 0.0;
 i1 = STACKTOP;
 do if ((i4 | 0) == 2) {
  if ((i3 | 0) < 1) {
   d5 = +HEAPF32[i2 + 232 >> 2];
   break;
  }
  if ((i3 | 0) < 3) {
   d5 = +HEAPF32[i2 + 264 >> 2];
   break;
  }
  if ((i3 | 0) == 3) {
   d5 = +HEAPF32[i2 + 248 >> 2];
   break;
  }
  if ((i3 | 0) < 6) d5 = +HEAPF32[i2 + 280 >> 2]; else d5 = 3.4028234663852886e+38;
 } else if ((i4 | 0) == 3) {
  if ((i3 | 0) < 1) {
   d5 = +HEAPF32[i2 + 212 >> 2];
   break;
  }
  if ((i3 | 0) == 3) d5 = +HEAPF32[i2 + 228 >> 2]; else d5 = 3.4028234663852886e+38;
 } else if ((i4 | 0) == 4) {
  if ((i3 | 0) < 1) {
   d5 = +HEAPF32[i2 + 244 >> 2];
   break;
  }
  if ((i3 | 0) < 3) {
   d5 = +HEAPF32[i2 + 276 >> 2];
   break;
  }
  if ((i3 | 0) == 3) {
   d5 = +HEAPF32[i2 + 260 >> 2];
   break;
  }
  if ((i3 | 0) < 6) d5 = +HEAPF32[i2 + 292 >> 2]; else d5 = 3.4028234663852886e+38;
 } else d5 = 3.4028234663852886e+38; while (0);
 STACKTOP = i1;
 return +d5;
}
function __ZNK15btCylinderShape24localGetSupportingVertexERK9btVector3(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] & 127](i4, i3, i1);
 if (!(+FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3) != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d9 = +HEAPF32[i1 >> 2];
 d7 = +HEAPF32[i1 + 4 >> 2];
 d6 = +HEAPF32[i1 + 8 >> 2];
 d5 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d6;
 d8 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d7;
 d9 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d9;
 d6 = 1.0 / +Math_sqrt(+(d5 * d5 + (d9 * d9 + d8 * d8)));
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i4 >> 2] = d6 * d9 * d7 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 + 4 >> 2] = d7 * d6 * d8 + +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i4 + 8 >> 2] = d7 * d6 * d5 + +HEAPF32[i4 + 8 >> 2];
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(115) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 1.0;
 HEAPF32[i4 + 16 >> 2] = 1.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 HEAPF32[i4 + 24 >> 2] = 0.0;
 HEAPF32[i4 + 44 >> 2] = .03999999910593033;
 HEAP32[i4 + 52 >> 2] = 0;
 HEAPF32[i4 + 56 >> 2] = 1.0;
 HEAPF32[i4 + 60 >> 2] = 1.0;
 HEAPF32[i4 + 64 >> 2] = 1.0;
 HEAPF32[i4 + 68 >> 2] = 0.0;
 HEAPF32[i4 + 72 >> 2] = -1.0;
 HEAPF32[i4 + 76 >> 2] = -1.0;
 HEAPF32[i4 + 80 >> 2] = -1.0;
 HEAPF32[i4 + 84 >> 2] = 0.0;
 HEAP8[i4 + 88 >> 0] = 0;
 HEAP32[i4 >> 2] = 10656;
 HEAP32[i4 + 92 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = 3;
 if (!i3) {
  STACKTOP = i2;
  return i4 | 0;
 }
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i4);
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN21btSingleSweepCallback7processEPK17btBroadphaseProxy(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, d5 = 0.0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = HEAP32[i1 + 184 >> 2] | 0;
 if (+HEAPF32[i3 + 4 >> 2] == 0.0) {
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 i4 = HEAP32[i4 >> 2] | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, HEAP32[i4 + 188 >> 2] | 0) | 0)) {
  i4 = 1;
  STACKTOP = i2;
  return i4 | 0;
 }
 i6 = HEAP32[i1 + 192 >> 2] | 0;
 i7 = HEAP32[i4 + 192 >> 2] | 0;
 i3 = HEAP32[i1 + 184 >> 2] | 0;
 d5 = +HEAPF32[i1 + 188 >> 2];
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = i7;
 HEAP32[i2 + 8 >> 2] = i4;
 HEAP32[i2 + 12 >> 2] = i4 + 4;
 HEAP32[i2 + 16 >> 2] = -1;
 HEAP32[i2 + 20 >> 2] = -1;
 __ZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEf(i6, i1 + 36 | 0, i1 + 100 | 0, i2, i3, d5);
 i4 = 1;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZNK11btConeShape24localGetSupportingVertexERK9btVector3(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 __ZNK11btConeShape16coneLocalSupportERK9btVector3(i4, i3, i1);
 if (!(+FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3) != 0.0)) {
  STACKTOP = i2;
  return;
 }
 d9 = +HEAPF32[i1 >> 2];
 d7 = +HEAPF32[i1 + 4 >> 2];
 d6 = +HEAPF32[i1 + 8 >> 2];
 d5 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d6;
 d8 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d7;
 d9 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d9;
 d6 = 1.0 / +Math_sqrt(+(d5 * d5 + (d9 * d9 + d8 * d8)));
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i4 >> 2] = d6 * d9 * d7 + +HEAPF32[i4 >> 2];
 HEAPF32[i4 + 4 >> 2] = d7 * d6 * d8 + +HEAPF32[i4 + 4 >> 2];
 HEAPF32[i4 + 8 >> 2] = d7 * d6 * d5 + +HEAPF32[i4 + 8 >> 2];
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConvexHullShape_btConvexHullShape_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(131) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 HEAP32[i2 + 8 >> 2] = 0;
 HEAPF32[i2 + 12 >> 2] = 1.0;
 HEAPF32[i2 + 16 >> 2] = 1.0;
 HEAPF32[i2 + 20 >> 2] = 1.0;
 HEAPF32[i2 + 24 >> 2] = 0.0;
 HEAPF32[i2 + 44 >> 2] = .03999999910593033;
 HEAP32[i2 + 52 >> 2] = 0;
 HEAPF32[i2 + 56 >> 2] = 1.0;
 HEAPF32[i2 + 60 >> 2] = 1.0;
 HEAPF32[i2 + 64 >> 2] = 1.0;
 HEAPF32[i2 + 68 >> 2] = 0.0;
 HEAPF32[i2 + 72 >> 2] = -1.0;
 HEAPF32[i2 + 76 >> 2] = -1.0;
 HEAPF32[i2 + 80 >> 2] = -1.0;
 HEAPF32[i2 + 84 >> 2] = 0.0;
 HEAP8[i2 + 88 >> 0] = 0;
 HEAP32[i2 >> 2] = 10376;
 HEAP8[i2 + 108 >> 0] = 1;
 HEAP32[i2 + 104 >> 2] = 0;
 HEAP32[i2 + 100 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 4;
 HEAP32[i2 + 96 >> 2] = 0;
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i2);
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK17btConvexHullShape7getEdgeEiR9btVector3S1_(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0;
 i7 = HEAP32[i2 + 96 >> 2] | 0;
 i8 = HEAP32[i2 + 104 >> 2] | 0;
 d5 = +HEAPF32[i8 + (((i3 | 0) % (i7 | 0) | 0) << 4) + 4 >> 2] * +HEAPF32[i2 + 16 >> 2];
 d6 = +HEAPF32[i8 + (((i3 | 0) % (i7 | 0) | 0) << 4) + 8 >> 2] * +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i4 >> 2] = +HEAPF32[i8 + (((i3 | 0) % (i7 | 0) | 0) << 4) >> 2] * +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i4 + 4 >> 2] = d5;
 HEAPF32[i4 + 8 >> 2] = d6;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 i4 = HEAP32[i2 + 104 >> 2] | 0;
 d6 = +HEAPF32[i4 + (((i3 + 1 | 0) % (i7 | 0) | 0) << 4) + 4 >> 2] * +HEAPF32[i2 + 16 >> 2];
 d5 = +HEAPF32[i4 + (((i3 + 1 | 0) % (i7 | 0) | 0) << 4) + 8 >> 2] * +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i4 + (((i3 + 1 | 0) % (i7 | 0) | 0) << 4) >> 2] * +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i1 + 4 >> 2] = d6;
 HEAPF32[i1 + 8 >> 2] = d5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZN24btPairCachingGhostObject31removeOverlappingObjectInternalEP17btBroadphaseProxyP12btDispatcherS1_(i1, i3, i4, i8) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 i2 = HEAP32[i3 >> 2] | 0;
 if ((i8 | 0) == 0) i8 = HEAP32[i1 + 188 >> 2] | 0;
 i9 = HEAP32[i1 + 268 >> 2] | 0;
 if ((i9 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i10 = HEAP32[i1 + 276 >> 2] | 0;
 i11 = 0;
 while (1) {
  i12 = i10 + (i11 << 2) | 0;
  i7 = i11 + 1 | 0;
  if ((HEAP32[i12 >> 2] | 0) == (i2 | 0)) break;
  if ((i7 | 0) < (i9 | 0)) i11 = i7; else {
   i5 = 9;
   break;
  }
 }
 if ((i5 | 0) == 9) {
  STACKTOP = i6;
  return;
 }
 if ((i11 | 0) >= (i9 | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i12 >> 2] = HEAP32[i10 + (i9 + -1 << 2) >> 2];
 HEAP32[i1 + 268 >> 2] = i9 + -1;
 i12 = HEAP32[i1 + 284 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 31](i12, i8, i3, i4) | 0;
 STACKTOP = i6;
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i2, i4, i5, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 HEAP8[i2 + 53 >> 0] = 1;
 if ((HEAP32[i2 + 4 >> 2] | 0) != (i5 | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP8[i2 + 52 >> 0] = 1;
 i5 = HEAP32[i2 + 16 >> 2] | 0;
 if ((i5 | 0) == 0) {
  HEAP32[i2 + 16 >> 2] = i4;
  HEAP32[i2 + 24 >> 2] = i3;
  HEAP32[i2 + 36 >> 2] = 1;
  if (!((i3 | 0) == 1 ? (HEAP32[i2 + 48 >> 2] | 0) == 1 : 0)) {
   STACKTOP = i1;
   return;
  }
  HEAP8[i2 + 54 >> 0] = 1;
  STACKTOP = i1;
  return;
 }
 if ((i5 | 0) != (i4 | 0)) {
  HEAP32[i2 + 36 >> 2] = (HEAP32[i2 + 36 >> 2] | 0) + 1;
  HEAP8[i2 + 54 >> 0] = 1;
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i4 | 0) == 2) HEAP32[i2 + 24 >> 2] = i3; else i3 = i4;
 if (!((i3 | 0) == 1 ? (HEAP32[i2 + 48 >> 2] | 0) == 1 : 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP8[i2 + 54 >> 0] = 1;
 STACKTOP = i1;
 return;
}
function __ZNK15btCylinderShape9serializeEPvP12btSerializer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i1) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i6 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i1 + 28 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i1 + 32 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i1 + 40 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i1 + 16 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i1 + 20 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i1 + 24 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i1 + 44 >> 2];
 HEAP32[i4 + 52 >> 2] = HEAP32[i1 + 52 >> 2];
 STACKTOP = i2;
 return 11384;
}
function __ZN30btKinematicCharacterController26setVelocityForTimeIntervalERK9btVector3f(i2, i8, d1) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 d1 = +d1;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0;
 i3 = STACKTOP;
 HEAP8[i2 + 171 >> 0] = 0;
 HEAP32[i2 + 60 >> 2] = HEAP32[i8 + 0 >> 2];
 HEAP32[i2 + 64 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i2 + 68 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i2 + 72 >> 2] = HEAP32[i8 + 12 >> 2];
 d4 = +HEAPF32[i2 + 60 >> 2];
 d7 = +HEAPF32[i2 + 64 >> 2];
 d5 = +HEAPF32[i2 + 68 >> 2];
 d6 = 1.0 / +Math_sqrt(+(d4 * d4 + d7 * d7 + d5 * d5));
 if (+Math_sqrt(+(d5 * d6 * d5 * d6 + (d4 * d6 * d4 * d6 + d7 * d6 * d7 * d6))) < 1.1920928955078125e-7) {
  d4 = 0.0;
  d7 = 0.0;
  d6 = 0.0;
  d5 = 0.0;
 } else {
  d4 = d4 * d6;
  d7 = d7 * d6;
  d6 = d5 * d6;
  d5 = +HEAPF32[i2 + 72 >> 2];
 }
 HEAPF32[i2 + 76 >> 2] = d4;
 HEAPF32[i2 + 80 >> 2] = d7;
 HEAPF32[i2 + 84 >> 2] = d6;
 HEAPF32[i2 + 88 >> 2] = d5;
 HEAPF32[i2 + 172 >> 2] = +HEAPF32[i2 + 172 >> 2] + d1;
 STACKTOP = i3;
 return;
}
function __ZNK14btCapsuleShape9serializeEPvP12btSerializer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i1) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i6 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i1 + 28 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i1 + 32 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i1 + 40 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i1 + 16 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i1 + 20 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i1 + 24 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i1 + 44 >> 2];
 HEAP32[i4 + 52 >> 2] = HEAP32[i1 + 52 >> 2];
 STACKTOP = i2;
 return 6752;
}
function __ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 80) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 >> 2] = 18432;
 HEAP8[i5 + 8 >> 0] = 1;
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 + 12 >> 2] = 18464;
 HEAP32[i5 + 60 >> 2] = i1;
 HEAP32[i5 + 64 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = i2;
 HEAP32[i5 + 20 >> 2] = i3;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
 HEAP32[i5 + 76 >> 2] = i3;
 i2 = HEAP32[i5 + 60 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2, i3);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i4, i2, i3, i1, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i5 = STACKTOP;
 if ((HEAP32[i2 + 8 >> 2] | 0) == (i4 | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) != (i3 | 0)) {
   STACKTOP = i5;
   return;
  }
  if ((HEAP32[i2 + 28 >> 2] | 0) == 1) {
   STACKTOP = i5;
   return;
  }
  HEAP32[i2 + 28 >> 2] = i1;
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i2 >> 2] | 0) != (i4 | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0) ? (HEAP32[i2 + 20 >> 2] | 0) != (i3 | 0) : 0) {
  HEAP32[i2 + 32 >> 2] = i1;
  HEAP32[i2 + 20 >> 2] = i3;
  HEAP32[i2 + 40 >> 2] = (HEAP32[i2 + 40 >> 2] | 0) + 1;
  if ((HEAP32[i2 + 36 >> 2] | 0) == 1 ? (HEAP32[i2 + 24 >> 2] | 0) == 2 : 0) HEAP8[i2 + 54 >> 0] = 1;
  HEAP32[i2 + 44 >> 2] = 4;
  STACKTOP = i5;
  return;
 }
 if ((i1 | 0) != 1) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i2 + 32 >> 2] = 1;
 STACKTOP = i5;
 return;
}
function __ZNK11btConeShape9serializeEPvP12btSerializer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i1) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i6 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i1 + 28 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i1 + 32 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i1 + 40 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i1 + 16 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i1 + 20 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i1 + 24 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i1 + 44 >> 2];
 HEAP32[i4 + 52 >> 2] = HEAP32[i1 + 68 >> 2];
 STACKTOP = i2;
 return 10120;
}
function __ZN33btConvexConcaveCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 80) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 >> 2] = 18432;
 HEAP8[i5 + 8 >> 0] = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 + 12 >> 2] = 18464;
 HEAP32[i5 + 60 >> 2] = i1;
 HEAP32[i5 + 64 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = i2;
 HEAP32[i5 + 20 >> 2] = i3;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
 HEAP32[i5 + 76 >> 2] = i3;
 i2 = HEAP32[i5 + 60 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i2, i3);
 STACKTOP = i4;
 return i5 | 0;
}
function _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2(i1, d3) {
 i1 = i1 | 0;
 d3 = +d3;
 var i2 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(103) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = 35;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 HEAP32[i4 >> 2] = 16992;
 d10 = +HEAPF32[i1 >> 2];
 d9 = +HEAPF32[i1 + 4 >> 2];
 d8 = +HEAPF32[i1 + 8 >> 2];
 d6 = +HEAPF32[i1 + 12 >> 2];
 d7 = 1.0 / +Math_sqrt(+(d10 * d10 + d9 * d9 + d8 * d8));
 HEAPF32[i4 + 48 >> 2] = d10 * d7;
 HEAPF32[i4 + 52 >> 2] = d9 * d7;
 HEAPF32[i4 + 56 >> 2] = d8 * d7;
 HEAPF32[i4 + 60 >> 2] = d6;
 HEAPF32[i4 + 64 >> 2] = d3;
 i1 = i4 + 68 | 0;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i5 >> 2] = 28;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZNK16btCylinderShapeX49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i2, i3, i1, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0;
 i6 = STACKTOP;
 if ((i5 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i4 = 0;
 do {
  d7 = +HEAPF32[i2 + 32 >> 2];
  d11 = +HEAPF32[i2 + 28 >> 2];
  i12 = i3 + (i4 << 4) | 0;
  d10 = +HEAPF32[i3 + (i4 << 4) + 4 >> 2];
  d8 = +HEAPF32[i3 + (i4 << 4) + 8 >> 2];
  d9 = +Math_sqrt(+(d10 * d10 + d8 * d8));
  if (!(d9 != 0.0)) if (+HEAPF32[i12 >> 2] < 0.0) {
   d11 = -d11;
   d10 = d7;
   d7 = 0.0;
  } else {
   d10 = d7;
   d7 = 0.0;
  } else {
   if (+HEAPF32[i12 >> 2] < 0.0) d11 = -d11;
   d10 = d10 * (d7 / d9);
   d7 = d8 * (d7 / d9);
  }
  HEAPF32[i1 + (i4 << 4) >> 2] = d11;
  HEAPF32[i1 + (i4 << 4) + 4 >> 2] = d10;
  HEAPF32[i1 + (i4 << 4) + 8 >> 2] = d7;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i5 | 0));
 STACKTOP = i6;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i5, i4, i3, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 if ((i5 | 0) == (HEAP32[i4 + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i4, i3, i2);
  STACKTOP = i1;
  return;
 }
 i6 = HEAP32[i5 + 12 >> 2] | 0;
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i5 + 16 | 0, i4, i3, i2);
 if ((i6 | 0) <= 1) {
  STACKTOP = i1;
  return;
 }
 i7 = i5 + 24 | 0;
 while (1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i7, i4, i3, i2);
  if ((HEAP8[i4 + 54 >> 0] | 0) != 0) {
   i2 = 7;
   break;
  }
  i7 = i7 + 8 | 0;
  if (!(i7 >>> 0 < (i5 + (i6 << 3) + 16 | 0) >>> 0)) {
   i2 = 7;
   break;
  }
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i1;
  return;
 }
}
function __ZN16btCollisionWorld23computeOverlappingPairsEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN15CProfileManager13Start_ProfileEPKc(7440);
 i3 = HEAP32[i2 + 68 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 127](i3, HEAP32[i2 + 24 >> 2] | 0);
 i2 = HEAP32[5022] | 0;
 i3 = (HEAP32[i2 + 16 >> 2] | 0) + -1 | 0;
 HEAP32[i2 + 16 >> 2] = i3;
 if ((i3 | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 do if ((HEAP32[i2 + 4 >> 2] | 0) != 0) {
  _gettimeofday(i1 | 0, 0) | 0;
  i3 = HEAP32[5008] | 0;
  HEAPF32[i2 + 8 >> 2] = +(((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0) * 1e6 | 0) - (HEAP32[i2 + 12 >> 2] | 0) | 0) >>> 0) / 1.0e3 + +HEAPF32[i2 + 8 >> 2];
  if ((HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i2 = HEAP32[5022] | 0;
   break;
  } else {
   STACKTOP = i1;
   return;
  }
 } while (0);
 HEAP32[5022] = HEAP32[i2 + 20 >> 2];
 STACKTOP = i1;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 16) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 + 4 >> 2] = i1;
 HEAP32[i5 >> 2] = 17896;
 HEAP8[i5 + 8 >> 0] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0)) {
  STACKTOP = i4;
  return i5 | 0;
 }
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
 HEAP32[i5 + 12 >> 2] = i3;
 HEAP8[i5 + 8 >> 0] = 1;
 STACKTOP = i4;
 return i5 | 0;
}
function __ZNK16btCylinderShapeZ49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i6 = STACKTOP;
 if ((i2 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i5 = 0;
 do {
  d11 = +HEAPF32[i4 + 28 >> 2];
  d8 = +HEAPF32[i4 + 36 >> 2];
  d7 = +HEAPF32[i3 + (i5 << 4) >> 2];
  d10 = +HEAPF32[i3 + (i5 << 4) + 4 >> 2];
  d9 = +Math_sqrt(+(d7 * d7 + d10 * d10));
  if (!(d9 != 0.0)) if (+HEAPF32[i3 + (i5 << 4) + 8 >> 2] < 0.0) {
   d7 = d11;
   d9 = 0.0;
   d8 = -d8;
  } else {
   d7 = d11;
   d9 = 0.0;
  } else {
   if (+HEAPF32[i3 + (i5 << 4) + 8 >> 2] < 0.0) d8 = -d8;
   d7 = d7 * (d11 / d9);
   d9 = d10 * (d11 / d9);
  }
  HEAPF32[i1 + (i5 << 4) >> 2] = d7;
  HEAPF32[i1 + (i5 << 4) + 4 >> 2] = d9;
  HEAPF32[i1 + (i5 << 4) + 8 >> 2] = d8;
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i2 | 0));
 STACKTOP = i6;
 return;
}
function __ZNK15btCylinderShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i6 = STACKTOP;
 if ((i2 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i5 = 0;
 do {
  d8 = +HEAPF32[i4 + 28 >> 2];
  d11 = +HEAPF32[i4 + 32 >> 2];
  d7 = +HEAPF32[i3 + (i5 << 4) >> 2];
  d9 = +HEAPF32[i3 + (i5 << 4) + 8 >> 2];
  d10 = +Math_sqrt(+(d7 * d7 + d9 * d9));
  if (!(d10 != 0.0)) if (+HEAPF32[i3 + (i5 << 4) + 4 >> 2] < 0.0) {
   d7 = d8;
   d11 = -d11;
   d8 = 0.0;
  } else {
   d7 = d8;
   d8 = 0.0;
  } else {
   if (+HEAPF32[i3 + (i5 << 4) + 4 >> 2] < 0.0) d11 = -d11;
   d7 = d7 * (d8 / d10);
   d8 = d9 * (d8 / d10);
  }
  HEAPF32[i1 + (i5 << 4) >> 2] = d7;
  HEAPF32[i1 + (i5 << 4) + 4 >> 2] = d11;
  HEAPF32[i1 + (i5 << 4) + 8 >> 2] = d8;
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i2 | 0));
 STACKTOP = i6;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i6, i5, i1, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i5 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 20) | 0;
 if ((i3 | 0) == 0) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i7 = HEAP32[i5 + 4 >> 2] | 0;
 i6 = HEAP8[i6 + 4 >> 0] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i3 + 4 >> 2] = i5;
 HEAP32[i3 >> 2] = 16904;
 HEAP8[i3 + 8 >> 0] = 0;
 HEAP32[i3 + 12 >> 2] = i7;
 HEAP8[i3 + 16 >> 0] = i6;
 if ((i7 | 0) != 0) {
  i7 = i3;
  STACKTOP = i2;
  return i7 | 0;
 }
 i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0;
 HEAP32[i3 + 12 >> 2] = i7;
 HEAP8[i3 + 8 >> 0] = 1;
 i7 = i3;
 STACKTOP = i2;
 return i7 | 0;
}
function __ZN11btMatrix3x311setRotationERK12btQuaternion(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 d6 = +HEAPF32[i2 >> 2];
 d4 = +HEAPF32[i2 + 4 >> 2];
 d9 = +HEAPF32[i2 + 8 >> 2];
 d7 = +HEAPF32[i2 + 12 >> 2];
 d5 = d6 * (2.0 / (d6 * d6 + d4 * d4 + d9 * d9 + d7 * d7));
 d3 = d4 * (2.0 / (d6 * d6 + d4 * d4 + d9 * d9 + d7 * d7));
 d8 = d9 * (2.0 / (d6 * d6 + d4 * d4 + d9 * d9 + d7 * d7));
 HEAPF32[i1 >> 2] = 1.0 - (d4 * d3 + d9 * d8);
 HEAPF32[i1 + 4 >> 2] = d6 * d3 - d7 * d8;
 HEAPF32[i1 + 8 >> 2] = d6 * d8 + d7 * d3;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = d6 * d3 + d7 * d8;
 HEAPF32[i1 + 20 >> 2] = 1.0 - (d6 * d5 + d9 * d8);
 HEAPF32[i1 + 24 >> 2] = d4 * d8 - d7 * d5;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAPF32[i1 + 32 >> 2] = d6 * d8 - d7 * d3;
 HEAPF32[i1 + 36 >> 2] = d4 * d8 + d7 * d5;
 HEAPF32[i1 + 40 >> 2] = 1.0 - (d6 * d5 + d4 * d3);
 HEAPF32[i1 + 44 >> 2] = 0.0;
 return;
}
function __ZN20btDefaultMotionState17setWorldTransformERK11btTransform(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 __ZNK11btTransformmlERKS_(i3, i2, i1 + 68 | 0);
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i3 + 36 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i3 + 40 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i3 + 44 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i3 + 52 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i3 + 56 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i3 + 60 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(115) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAP32[i3 + 8 >> 2] = 0;
 HEAPF32[i3 + 12 >> 2] = 1.0;
 HEAPF32[i3 + 16 >> 2] = 1.0;
 HEAPF32[i3 + 20 >> 2] = 1.0;
 HEAPF32[i3 + 24 >> 2] = 0.0;
 HEAPF32[i3 + 44 >> 2] = .03999999910593033;
 HEAP32[i3 + 52 >> 2] = 0;
 HEAPF32[i3 + 56 >> 2] = 1.0;
 HEAPF32[i3 + 60 >> 2] = 1.0;
 HEAPF32[i3 + 64 >> 2] = 1.0;
 HEAPF32[i3 + 68 >> 2] = 0.0;
 HEAPF32[i3 + 72 >> 2] = -1.0;
 HEAPF32[i3 + 76 >> 2] = -1.0;
 HEAPF32[i3 + 80 >> 2] = -1.0;
 HEAPF32[i3 + 84 >> 2] = 0.0;
 HEAP8[i3 + 88 >> 0] = 0;
 HEAP32[i3 >> 2] = 10656;
 HEAP32[i3 + 92 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = 3;
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i3);
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNK21btConvexInternalShape9serializeEPvP12btSerializer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i1) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i6 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i1 + 28 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i1 + 32 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i1 + 40 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i1 + 12 >> 2];
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i1 + 16 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i1 + 20 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i1 + 24 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i1 + 44 >> 2];
 STACKTOP = i2;
 return 2112;
}
function __ZNK18btStaticPlaneShape9serializeEPvP12btSerializer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i1) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i6 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAPF32[i4 + 12 >> 2] = +HEAPF32[i1 + 68 >> 2];
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i1 + 72 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i1 + 76 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i1 + 80 >> 2];
 HEAPF32[i4 + 28 >> 2] = +HEAPF32[i1 + 48 >> 2];
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i1 + 52 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i1 + 56 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i1 + 60 >> 2];
 HEAPF32[i4 + 44 >> 2] = +HEAPF32[i1 + 64 >> 2];
 STACKTOP = i2;
 return 17104;
}
function __ZN20btAxisSweep3InternalItE7rayTestERK9btVector3S3_R23btBroadphaseRayCallbackS3_S3_(i1, i8, i7, i2, i4, i5) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i3 = 0, i6 = 0;
 i3 = STACKTOP;
 i6 = HEAP32[i1 + 108 >> 2] | 0;
 if ((i6 | 0) != 0) {
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 7](i6, i8, i7, i2, i4, i5);
  STACKTOP = i3;
  return;
 }
 i6 = HEAP16[i1 + 56 >> 1] | 0;
 if (!((i6 & 65535) << 1 >>> 0 > 1)) {
  STACKTOP = i3;
  return;
 }
 i4 = 1;
 i5 = 2;
 while (1) {
  i7 = HEAP32[i1 + 68 >> 2] | 0;
  if (!((HEAP16[i7 + (i4 << 2) >> 1] & 1) == 0)) {
   FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, (HEAP32[i1 + 60 >> 2] | 0) + ((HEAPU16[i7 + (i4 << 2) + 2 >> 1] | 0) << 6) | 0) | 0;
   i6 = HEAP16[i1 + 56 >> 1] | 0;
  }
  i4 = i5 & 65535;
  if (!(i4 >>> 0 < ((i6 & 65535) << 1 | 1) >>> 0)) break;
  i5 = i5 + 1 << 16 >> 16;
 }
 STACKTOP = i3;
 return;
}
function __ZNK10btBoxShape7getEdgeEiR9btVector3S1_(i1, i6, i3, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 do switch (i6 | 0) {
 case 0:
  {
   i5 = 0;
   i6 = 1;
   break;
  }
 case 7:
  {
   i5 = 3;
   break;
  }
 case 8:
  {
   i5 = 4;
   i6 = 5;
   break;
  }
 case 2:
  {
   i5 = 1;
   i6 = 3;
   break;
  }
 case 1:
  {
   i5 = 0;
   i6 = 2;
   break;
  }
 case 3:
  {
   i5 = 2;
   break;
  }
 case 9:
  {
   i5 = 4;
   i6 = 6;
   break;
  }
 case 10:
  {
   i5 = 5;
   i6 = 7;
   break;
  }
 case 6:
  {
   i5 = 2;
   break;
  }
 case 11:
  {
   i5 = 6;
   i6 = 7;
   break;
  }
 case 5:
  {
   i5 = 1;
   break;
  }
 case 4:
  {
   i5 = 0;
   break;
  }
 default:
  {
   i5 = 0;
   i6 = 0;
  }
 } while (0);
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 108 >> 2] & 127](i1, i5, i3);
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 108 >> 2] & 127](i1, i6, i4);
 STACKTOP = i2;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((i1 | 0) == (i4 | 0)) {
  i6 = 1;
  STACKTOP = i2;
  return i6 | 0;
 }
 if ((i4 | 0) == 0) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i4 = ___dynamic_cast(i4, 20784) | 0;
 if ((i4 | 0) == 0) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i6 = i2 + 0 | 0;
 i5 = i6 + 56 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i5 | 0));
 HEAP32[i2 >> 2] = i4;
 HEAP32[i2 + 8 >> 2] = i1;
 HEAP32[i2 + 12 >> 2] = -1;
 HEAP32[i2 + 48 >> 2] = 1;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4, i2, HEAP32[i3 >> 2] | 0, 1);
 if ((HEAP32[i2 + 24 >> 2] | 0) != 1) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[i2 + 16 >> 2];
 i6 = 1;
 STACKTOP = i2;
 return i6 | 0;
}
function _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 60 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCollisionObject_setWorldTransform_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 60 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btGhostObject_setWorldTransform_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 60 >> 2];
 STACKTOP = i3;
 return;
}
function __ZNK20btConvexHullInternal6Int1288toScalarEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) > -1 | (i3 | 0) == -1 & i4 >>> 0 > 4294967295) {
  d5 = (+(i4 >>> 0) + 4294967296.0 * +(i3 >>> 0)) * 18446744073709552000.0 + (+((HEAP32[i1 >> 2] | 0) >>> 0) + 4294967296.0 * +((HEAP32[i1 + 4 >> 2] | 0) >>> 0));
  STACKTOP = i2;
  return +d5;
 } else {
  i8 = HEAP32[i1 >> 2] | 0;
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  i6 = _i64Subtract(0, 0, i8 | 0, i7 | 0) | 0;
  i1 = tempRet0;
  i4 = _i64Add((i8 | 0) == 0 & (i7 | 0) == 0 & 1 | 0, 0, ~i4 | 0, ~i3 | 0) | 0;
  HEAP32[i2 >> 2] = i6;
  HEAP32[i2 + 4 >> 2] = i1;
  HEAP32[i2 + 8 >> 2] = i4;
  HEAP32[i2 + 12 >> 2] = tempRet0;
  d5 = -+__ZNK20btConvexHullInternal6Int1288toScalarEv(i2);
  STACKTOP = i2;
  return +d5;
 }
 return 0.0;
}
function _emscripten_bind_btRigidBody_setWorldTransform_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 60 >> 2];
 STACKTOP = i3;
 return;
}
function __ZNK10btBoxShape8getPlaneER9btVector3S1_i(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 124 >> 2] & 127](i2, i5 + 32 | 0, i4);
 d8 = +HEAPF32[i5 + 32 >> 2];
 d7 = +HEAPF32[i5 + 36 >> 2];
 d6 = +HEAPF32[i5 + 40 >> 2];
 HEAPF32[i3 >> 2] = d8;
 HEAPF32[i3 + 4 >> 2] = d7;
 HEAPF32[i3 + 8 >> 2] = d6;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] | 0;
 HEAPF32[i5 >> 2] = -d8;
 HEAPF32[i5 + 4 >> 2] = -d7;
 HEAPF32[i5 + 8 >> 2] = -d6;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 FUNCTION_TABLE_viii[i4 & 127](i5 + 16 | 0, i2, i5);
 HEAP32[i1 + 0 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 28 >> 2];
 STACKTOP = i5;
 return;
}
function __ZN30btKinematicCharacterController16setWalkDirectionERK9btVector3(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0;
 i2 = STACKTOP;
 HEAP8[i1 + 171 >> 0] = 1;
 HEAP32[i1 + 60 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i7 + 12 >> 2];
 d3 = +HEAPF32[i1 + 60 >> 2];
 d6 = +HEAPF32[i1 + 64 >> 2];
 d4 = +HEAPF32[i1 + 68 >> 2];
 d5 = 1.0 / +Math_sqrt(+(d3 * d3 + d6 * d6 + d4 * d4));
 if (+Math_sqrt(+(d4 * d5 * d4 * d5 + (d3 * d5 * d3 * d5 + d6 * d5 * d6 * d5))) < 1.1920928955078125e-7) {
  d3 = 0.0;
  d6 = 0.0;
  d5 = 0.0;
  d4 = 0.0;
 } else {
  d3 = d3 * d5;
  d6 = d6 * d5;
  d5 = d4 * d5;
  d4 = +HEAPF32[i1 + 72 >> 2];
 }
 HEAPF32[i1 + 76 >> 2] = d3;
 HEAPF32[i1 + 80 >> 2] = d6;
 HEAPF32[i1 + 84 >> 2] = d5;
 HEAPF32[i1 + 88 >> 2] = d4;
 STACKTOP = i2;
 return;
}
function __ZNK14btCapsuleShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = HEAP32[i3 + 52 >> 2] | 0;
 d6 = +HEAPF32[i3 + (((i8 + 2 | 0) % 3 | 0) << 2) + 28 >> 2];
 HEAPF32[i4 >> 2] = d6;
 HEAPF32[i4 + 4 >> 2] = d6;
 HEAPF32[i4 + 8 >> 2] = d6;
 HEAPF32[i4 + 12 >> 2] = 0.0;
 HEAPF32[i4 + (i8 << 2) >> 2] = +HEAPF32[i3 + (i8 << 2) + 28 >> 2] + +HEAPF32[i4 + (i8 << 2) >> 2];
 d6 = (+HEAPF32[i4 >> 2] + .03999999910593033) * 2.0;
 d5 = (+HEAPF32[i4 + 4 >> 2] + .03999999910593033) * 2.0;
 d7 = (+HEAPF32[i4 + 8 >> 2] + .03999999910593033) * 2.0;
 HEAPF32[i1 >> 2] = d2 * .0833333283662796 * (d5 * d5 + d7 * d7);
 HEAPF32[i1 + 4 >> 2] = d2 * .0833333283662796 * (d6 * d6 + d7 * d7);
 HEAPF32[i1 + 8 >> 2] = d2 * .0833333283662796 * (d6 * d6 + d5 * d5);
 STACKTOP = i4;
 return;
}
function __ZN28btCompoundCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 44) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 >> 2] = 18040;
 HEAP8[i5 + 24 >> 0] = 1;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP8[i5 + 28 >> 0] = 1;
 HEAP32[i5 + 32 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP8[i5 + 36 >> 0] = 0;
 HEAP32[i5 + 40 >> 2] = HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + 68 >> 2];
 __ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEPK24btCollisionObjectWrapperS2_(i5, i3, i2);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZNK13btSphereShape24localGetSupportingVertexERK9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 68 >> 2] & 127](i1, i2, i3);
 d9 = +HEAPF32[i3 >> 2];
 d7 = +HEAPF32[i3 + 4 >> 2];
 d6 = +HEAPF32[i3 + 8 >> 2];
 d5 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d6;
 d8 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d7;
 d9 = d9 * d9 + d7 * d7 + d6 * d6 < 1.4210854715202004e-14 ? -1.0 : d9;
 d6 = 1.0 / +Math_sqrt(+(d5 * d5 + (d9 * d9 + d8 * d8)));
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 15](i2);
 HEAPF32[i1 >> 2] = d6 * d9 * d7 + +HEAPF32[i1 >> 2];
 HEAPF32[i1 + 4 >> 2] = d7 * d6 * d8 + +HEAPF32[i1 + 4 >> 2];
 HEAPF32[i1 + 8 >> 2] = d7 * d6 * d5 + +HEAPF32[i1 + 8 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN28btCompoundCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 44) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 >> 2] = 18040;
 HEAP8[i5 + 24 >> 0] = 1;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP8[i5 + 28 >> 0] = 0;
 HEAP32[i5 + 32 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP8[i5 + 36 >> 0] = 0;
 HEAP32[i5 + 40 >> 2] = HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + 68 >> 2];
 __ZN28btCompoundCollisionAlgorithm26preallocateChildAlgorithmsEPK24btCollisionObjectWrapperS2_(i5, i2, i3);
 STACKTOP = i4;
 return i5 | 0;
}
function __ZN11btConeShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0;
 i8 = HEAP32[i1 + 68 >> 2] | 0;
 i7 = HEAP32[i1 + 64 >> 2] | 0;
 i6 = HEAP32[i1 + 72 >> 2] | 0;
 d4 = +HEAPF32[i2 + (i8 << 2) >> 2] / +HEAPF32[i1 + (i8 << 2) + 12 >> 2] * +HEAPF32[i1 + 60 >> 2];
 HEAPF32[i1 + 60 >> 2] = d4;
 d5 = +HEAPF32[i1 + 56 >> 2] * (+HEAPF32[i2 + (i7 << 2) >> 2] / +HEAPF32[i1 + (i7 << 2) + 12 >> 2] + +HEAPF32[i2 + (i6 << 2) >> 2] / +HEAPF32[i1 + (i6 << 2) + 12 >> 2]) * .5;
 HEAPF32[i1 + 56 >> 2] = d5;
 d5 = d5 / +Math_sqrt(+(d4 * d4 + d5 * d5));
 HEAPF32[i1 + 52 >> 2] = d5;
 d5 = +Math_abs(+(+HEAPF32[i2 >> 2]));
 d4 = +Math_abs(+(+HEAPF32[i2 + 4 >> 2]));
 d3 = +Math_abs(+(+HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 + 12 >> 2] = d5;
 HEAPF32[i1 + 16 >> 2] = d4;
 HEAPF32[i1 + 20 >> 2] = d3;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 return;
}
function __ZN19btSingleRayCallback7processEPK17btBroadphaseProxy(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = HEAP32[i1 + 216 >> 2] | 0;
 if (+HEAPF32[i3 + 4 >> 2] == 0.0) {
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 i4 = HEAP32[i4 >> 2] | 0;
 if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 31](i3, HEAP32[i4 + 188 >> 2] | 0) | 0)) {
  i4 = 1;
  STACKTOP = i2;
  return i4 | 0;
 }
 i5 = HEAP32[i4 + 192 >> 2] | 0;
 i3 = HEAP32[i1 + 216 >> 2] | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = i5;
 HEAP32[i2 + 8 >> 2] = i4;
 HEAP32[i2 + 12 >> 2] = i4 + 4;
 HEAP32[i2 + 16 >> 2] = -1;
 HEAP32[i2 + 20 >> 2] = -1;
 __ZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackE(i1 + 68 | 0, i1 + 132 | 0, i2, i3);
 i4 = 1;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN15btCylinderShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i3 = STACKTOP;
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d7 = d7 + +HEAPF32[i1 + 28 >> 2];
 d5 = d5 + +HEAPF32[i1 + 32 >> 2];
 d8 = d8 + +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i1 + 44 >> 2] = d2;
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d2 = d8 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 HEAPF32[i1 + 28 >> 2] = d7 - d6;
 HEAPF32[i1 + 32 >> 2] = d5 - d4;
 HEAPF32[i1 + 36 >> 2] = d2;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN14btCapsuleShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i3 = STACKTOP;
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d7 = d7 + +HEAPF32[i1 + 28 >> 2];
 d5 = d5 + +HEAPF32[i1 + 32 >> 2];
 d8 = d8 + +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i1 + 44 >> 2] = d2;
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d2 = d8 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 HEAPF32[i1 + 28 >> 2] = d7 - d6;
 HEAPF32[i1 + 32 >> 2] = d5 - d4;
 HEAPF32[i1 + 36 >> 2] = d2;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function __ZN23btConvexConvexAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i1 >> 2] | 0;
 i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] & 31](i4, 36) | 0;
 if ((i4 | 0) == 0) {
  i4 = 0;
  STACKTOP = i3;
  return i4 | 0;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i8 = HEAP32[i2 + 12 >> 2] | 0;
 i7 = HEAP32[i2 + 8 >> 2] | 0;
 i5 = HEAP32[i2 + 16 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 >> 2] = 18816;
 HEAP32[i4 + 8 >> 2] = i8;
 HEAP32[i4 + 12 >> 2] = i7;
 HEAP8[i4 + 16 >> 0] = 0;
 HEAP32[i4 + 20 >> 2] = i6;
 HEAP8[i4 + 24 >> 0] = 0;
 HEAP32[i4 + 28 >> 2] = i5;
 HEAP32[i4 + 32 >> 2] = i2;
 STACKTOP = i3;
 return i4 | 0;
}
function __ZN10btBoxShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i3 = STACKTOP;
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d7 = d7 + +HEAPF32[i1 + 28 >> 2];
 d5 = d5 + +HEAPF32[i1 + 32 >> 2];
 d8 = d8 + +HEAPF32[i1 + 36 >> 2];
 HEAPF32[i1 + 44 >> 2] = d2;
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d4 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d2 = d8 - +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 HEAPF32[i1 + 28 >> 2] = d7 - d6;
 HEAPF32[i1 + 32 >> 2] = d5 - d4;
 HEAPF32[i1 + 36 >> 2] = d2;
 HEAPF32[i1 + 40 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 60 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN28btHashedOverlappingPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 if ((HEAP32[i2 + 8 >> 2] | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i5 = 0;
 L4 : while (1) {
  while (1) {
   i7 = HEAP32[i2 + 16 >> 2] | 0;
   i6 = i7 + (i5 << 4) | 0;
   if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, i6) | 0)) break;
   FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 31](i2, HEAP32[i6 >> 2] | 0, HEAP32[i7 + (i5 << 4) + 4 >> 2] | 0, i3) | 0;
   HEAP32[3808] = (HEAP32[3808] | 0) + -1;
   if ((i5 | 0) >= (HEAP32[i2 + 8 >> 2] | 0)) {
    i2 = 7;
    break L4;
   }
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) >= (HEAP32[i2 + 8 >> 2] | 0)) {
   i2 = 7;
   break;
  }
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i1;
  return;
 }
}
function __ZN24btPairCachingGhostObjectD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 13056;
 i3 = HEAP32[i1 + 284 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i3 = HEAP32[i1 + 284 >> 2] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 >> 2] = 13008;
 i3 = HEAP32[i1 + 276 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 280 >> 0] = 1;
  HEAP32[i1 + 276 >> 2] = 0;
  HEAP32[i1 + 268 >> 2] = 0;
  i3 = i1 + 272 | 0;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 280 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 276 >> 2] = 0;
 HEAP8[i1 + 280 >> 0] = 1;
 HEAP32[i1 + 276 >> 2] = 0;
 HEAP32[i1 + 268 >> 2] = 0;
 i3 = i1 + 272 | 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK13btSphereShape7getAabbERK11btTransformR9btVector3S4_(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i5 = STACKTOP;
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 15](i4);
 d10 = +HEAPF32[i2 + 52 >> 2] - d7;
 d9 = +HEAPF32[i2 + 56 >> 2] - d6;
 HEAPF32[i3 >> 2] = +HEAPF32[i2 + 48 >> 2] - d8;
 HEAPF32[i3 + 4 >> 2] = d10;
 HEAPF32[i3 + 8 >> 2] = d9;
 HEAPF32[i3 + 12 >> 2] = 0.0;
 d7 = d7 + +HEAPF32[i2 + 52 >> 2];
 d6 = d6 + +HEAPF32[i2 + 56 >> 2];
 HEAPF32[i1 >> 2] = d8 + +HEAPF32[i2 + 48 >> 2];
 HEAPF32[i1 + 4 >> 2] = d7;
 HEAPF32[i1 + 8 >> 2] = d6;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i5;
 return;
}
function __ZN16btDbvtBroadphase8aabbTestERK9btVector3S2_R24btBroadphaseAabbCallback(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i5 + 32 >> 2] = 11536;
 HEAP32[i5 + 36 >> 2] = i4;
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i5 + 20 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i5 + 24 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i5 + 28 >> 2] = HEAP32[i2 + 12 >> 2];
 __ZNK6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(HEAP32[i1 + 4 >> 2] | 0, i5, i5 + 32 | 0);
 __ZNK6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE(HEAP32[i1 + 64 >> 2] | 0, i5, i5 + 32 | 0);
 STACKTOP = i5;
 return;
}
function __ZNK15btTriangleShape37localGetSupportingVertexWithoutMarginERK9btVector3(i3, i1, i7) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 d9 = +HEAPF32[i7 >> 2];
 d8 = +HEAPF32[i7 + 4 >> 2];
 d4 = +HEAPF32[i7 + 8 >> 2];
 d6 = d9 * +HEAPF32[i1 + 56 >> 2] + d8 * +HEAPF32[i1 + 60 >> 2] + d4 * +HEAPF32[i1 + 64 >> 2];
 d5 = d9 * +HEAPF32[i1 + 72 >> 2] + d8 * +HEAPF32[i1 + 76 >> 2] + d4 * +HEAPF32[i1 + 80 >> 2];
 d4 = d9 * +HEAPF32[i1 + 88 >> 2] + d8 * +HEAPF32[i1 + 92 >> 2] + d4 * +HEAPF32[i1 + 96 >> 2];
 if (d6 < d5) i7 = d5 < d4 ? 2 : 1; else i7 = d6 < d4 ? 2 : 0;
 i7 = i1 + (i7 << 4) + 56 | 0;
 HEAP32[i3 + 0 >> 2] = HEAP32[i7 + 0 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConeShapeZ_btConeShapeZ_2(d1, d3) {
 d1 = +d1;
 d3 = +d3;
 var i2 = 0, i4 = 0, d5 = 0.0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(95) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 1.0;
 HEAPF32[i4 + 16 >> 2] = 1.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 HEAPF32[i4 + 24 >> 2] = 0.0;
 HEAPF32[i4 + 44 >> 2] = .03999999910593033;
 HEAPF32[i4 + 56 >> 2] = d1;
 HEAPF32[i4 + 60 >> 2] = d3;
 HEAP32[i4 + 4 >> 2] = 11;
 d5 = d1 / +Math_sqrt(+(d1 * d1 + d3 * d3));
 HEAPF32[i4 + 52 >> 2] = d5;
 HEAP32[i4 >> 2] = 9808;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 2;
 HEAP32[i4 + 72 >> 2] = 1;
 HEAPF32[i4 + 28 >> 2] = d1;
 HEAPF32[i4 + 36 >> 2] = d3;
 HEAPF32[i4 + 32 >> 2] = d1;
 STACKTOP = i2;
 return i4 | 0;
}
function _emscripten_bind_btConeShapeX_btConeShapeX_2(d1, d3) {
 d1 = +d1;
 d3 = +d3;
 var i2 = 0, i4 = 0, d5 = 0.0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(95) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 1.0;
 HEAPF32[i4 + 16 >> 2] = 1.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 HEAPF32[i4 + 24 >> 2] = 0.0;
 HEAPF32[i4 + 44 >> 2] = .03999999910593033;
 HEAPF32[i4 + 56 >> 2] = d1;
 HEAPF32[i4 + 60 >> 2] = d3;
 HEAP32[i4 + 4 >> 2] = 11;
 d5 = d1 / +Math_sqrt(+(d1 * d1 + d3 * d3));
 HEAPF32[i4 + 52 >> 2] = d5;
 HEAP32[i4 >> 2] = 9912;
 HEAP32[i4 + 64 >> 2] = 1;
 HEAP32[i4 + 68 >> 2] = 0;
 HEAP32[i4 + 72 >> 2] = 2;
 HEAPF32[i4 + 32 >> 2] = d1;
 HEAPF32[i4 + 28 >> 2] = d3;
 HEAPF32[i4 + 36 >> 2] = d1;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN17btConvexHullShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 10376;
 i4 = HEAP32[i1 + 104 >> 2] | 0;
 if ((i4 | 0) != 0) {
  if ((HEAP8[i1 + 108 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i4 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 104 >> 2] = 0;
 }
 HEAP8[i1 + 108 >> 0] = 1;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 100 >> 2] = 0;
 HEAP32[i1 >> 2] = 15736;
 i4 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i4 | 0) != 0 ? (FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i4), i3 = HEAP32[i1 + 52 >> 2] | 0, (i3 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld12applyGravityEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0;
 i1 = STACKTOP;
 i2 = HEAP32[i3 + 232 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i3 + 240 >> 2] | 0;
 i4 = 0;
 do {
  i5 = HEAP32[i3 + (i4 << 2) >> 2] | 0;
  i6 = HEAP32[i5 + 216 >> 2] | 0;
  if (!((i6 | 0) == 2 | (i6 | 0) == 5) ? (HEAP32[i5 + 204 >> 2] & 3 | 0) == 0 : 0) {
   d8 = +HEAPF32[i5 + 368 >> 2] * +HEAPF32[i5 + 352 >> 2];
   d7 = +HEAPF32[i5 + 372 >> 2] * +HEAPF32[i5 + 356 >> 2];
   HEAPF32[i5 + 412 >> 2] = +HEAPF32[i5 + 364 >> 2] * +HEAPF32[i5 + 348 >> 2] + +HEAPF32[i5 + 412 >> 2];
   HEAPF32[i5 + 416 >> 2] = d8 + +HEAPF32[i5 + 416 >> 2];
   HEAPF32[i5 + 420 >> 2] = d7 + +HEAPF32[i5 + 420 >> 2];
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i2 | 0));
 STACKTOP = i1;
 return;
}
function _emscripten_bind_btConeShape_btConeShape_2(d1, d3) {
 d1 = +d1;
 d3 = +d3;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(95) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 1.0;
 HEAPF32[i4 + 16 >> 2] = 1.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 HEAPF32[i4 + 24 >> 2] = 0.0;
 HEAPF32[i4 + 44 >> 2] = .03999999910593033;
 HEAP32[i4 >> 2] = 9704;
 HEAPF32[i4 + 56 >> 2] = d1;
 HEAPF32[i4 + 60 >> 2] = d3;
 HEAP32[i4 + 4 >> 2] = 11;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP32[i4 + 68 >> 2] = 1;
 HEAP32[i4 + 72 >> 2] = 2;
 HEAPF32[i4 + 28 >> 2] = d1;
 HEAPF32[i4 + 32 >> 2] = d3;
 HEAPF32[i4 + 36 >> 2] = d1;
 d3 = d1 / +Math_sqrt(+(d1 * d1 + d3 * d3));
 HEAPF32[i4 + 52 >> 2] = d3;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN11btMatrix3x3C1ERKfS1_S1_S1_S1_S1_S1_S1_S1_(i4, i2, i5, i6, i1, i8, i9, i10, i11, i12) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i3 = 0, i7 = 0;
 i7 = STACKTOP;
 i3 = i4;
 do i3 = i3 + 16 | 0; while ((i3 | 0) != (i4 + 48 | 0));
 HEAPF32[i4 >> 2] = +HEAPF32[i2 >> 2];
 HEAPF32[i4 + 4 >> 2] = +HEAPF32[i5 >> 2];
 HEAPF32[i4 + 8 >> 2] = +HEAPF32[i6 >> 2];
 HEAPF32[i4 + 12 >> 2] = 0.0;
 HEAPF32[i4 + 16 >> 2] = +HEAPF32[i1 >> 2];
 HEAPF32[i4 + 20 >> 2] = +HEAPF32[i8 >> 2];
 HEAPF32[i4 + 24 >> 2] = +HEAPF32[i9 >> 2];
 HEAPF32[i4 + 28 >> 2] = 0.0;
 HEAPF32[i4 + 32 >> 2] = +HEAPF32[i10 >> 2];
 HEAPF32[i4 + 36 >> 2] = +HEAPF32[i11 >> 2];
 HEAPF32[i4 + 40 >> 2] = +HEAPF32[i12 >> 2];
 HEAPF32[i4 + 44 >> 2] = 0.0;
 STACKTOP = i7;
 return;
}
function __ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i4 = STACKTOP;
 d8 = +HEAPF32[i3 + 28 >> 2];
 d6 = +HEAPF32[i3 + 32 >> 2];
 d9 = +HEAPF32[i3 + 36 >> 2];
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d5 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d9 = (d9 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3)) * 2.0;
 HEAPF32[i1 >> 2] = d2 / 12.0 * ((d6 + d5) * 2.0 * (d6 + d5) * 2.0 + d9 * d9);
 HEAPF32[i1 + 4 >> 2] = d2 / 12.0 * ((d8 + d7) * 2.0 * (d8 + d7) * 2.0 + d9 * d9);
 HEAPF32[i1 + 8 >> 2] = d2 / 12.0 * ((d8 + d7) * 2.0 * (d8 + d7) * 2.0 + (d6 + d5) * 2.0 * (d6 + d5) * 2.0);
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btTransform_btTransform_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i4 = _malloc(64) | 0;
 L1 : do if ((i4 | 0) == 0) {
  while (1) {
   i4 = HEAP32[5158] | 0;
   HEAP32[5158] = i4 + 0;
   if ((i4 | 0) == 0) break;
   FUNCTION_TABLE_v[i4 & 3]();
   i4 = _malloc(64) | 0;
   if ((i4 | 0) != 0) break L1;
  }
  i6 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i6 >> 2] = 20472;
  ___cxa_throw(i6 | 0, 20520, 265);
 } while (0);
 i5 = i4 + 48 | 0;
 i6 = i4;
 do i6 = i6 + 16 | 0; while ((i6 | 0) != (i5 | 0));
 __ZN11btMatrix3x311setRotationERK12btQuaternion(i4, i1);
 HEAP32[i5 + 0 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN15btCompoundShapeD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 9512;
 i3 = HEAP32[i1 + 64 >> 2] | 0;
 if ((i3 | 0) != 0 ? (__ZN6btDbvtD2Ev(i3), i4 = HEAP32[i1 + 64 >> 2] | 0, (i4 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i4 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 28 >> 0] = 1;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  i4 = i1 + 20 | 0;
  HEAP32[i4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP8[i1 + 28 >> 0] | 0) != 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP8[i1 + 28 >> 0] = 1;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 i4 = i1 + 20 | 0;
 HEAP32[i4 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK10btBoxShape9getVertexEiR9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i4 = STACKTOP;
 d9 = +HEAPF32[i3 + 28 >> 2];
 d7 = +HEAPF32[i3 + 32 >> 2];
 d5 = +HEAPF32[i3 + 36 >> 2];
 d8 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d5 = d5 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 HEAPF32[i1 >> 2] = +(i2 & 1 ^ 1 | 0) * (d9 + d8) - +(i2 & 1 | 0) * (d9 + d8);
 HEAPF32[i1 + 4 >> 2] = +(i2 >>> 1 & 1 ^ 1 | 0) * (d7 + d6) - +(i2 >>> 1 & 1 | 0) * (d7 + d6);
 HEAPF32[i1 + 8 >> 2] = +(i2 >>> 2 & 1 ^ 1 | 0) * d5 - +(i2 >>> 2 & 1 | 0) * d5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZNK23btGeneric6DofConstraint8getParamEii(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, d5 = 0.0;
 i1 = STACKTOP;
 do if (i3 >>> 0 < 3) if ((i4 | 0) == 2) {
  d5 = +HEAPF32[i2 + (i3 << 2) + 756 >> 2];
  break;
 } else if ((i4 | 0) == 3) {
  d5 = +HEAPF32[i2 + (i3 << 2) + 740 >> 2];
  break;
 } else if ((i4 | 0) == 4) {
  d5 = +HEAPF32[i2 + (i3 << 2) + 772 >> 2];
  break;
 } else {
  d5 = 0.0;
  break;
 } else if ((i3 + -3 | 0) >>> 0 < 3) if ((i4 | 0) == 2) {
  d5 = +HEAPF32[i2 + (i3 + -3 << 6) + 900 >> 2];
  break;
 } else if ((i4 | 0) == 4) {
  d5 = +HEAPF32[i2 + (i3 + -3 << 6) + 904 >> 2];
  break;
 } else if ((i4 | 0) == 3) {
  d5 = +HEAPF32[i2 + (i3 + -3 << 6) + 896 >> 2];
  break;
 } else {
  d5 = 0.0;
  break;
 } else d5 = 0.0; while (0);
 STACKTOP = i1;
 return +d5;
}
function __ZNK10btBoxShape24localGetSupportingVertexERK9btVector3(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i4 = STACKTOP;
 d8 = +HEAPF32[i3 + 28 >> 2];
 d9 = +HEAPF32[i3 + 32 >> 2];
 d5 = +HEAPF32[i3 + 36 >> 2];
 d7 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d6 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d5 = d5 + +FUNCTION_TABLE_di[HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 15](i3);
 d6 = +HEAPF32[i2 + 4 >> 2] >= 0.0 ? d9 + d6 : -(d9 + d6);
 d5 = +HEAPF32[i2 + 8 >> 2] >= 0.0 ? d5 : -d5;
 HEAPF32[i1 >> 2] = +HEAPF32[i2 >> 2] >= 0.0 ? d8 + d7 : -(d8 + d7);
 HEAPF32[i1 + 4 >> 2] = d6;
 HEAPF32[i1 + 8 >> 2] = d5;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = _malloc(92) | 0;
 L1 : do if ((i2 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i2 = _malloc(92) | 0;
   if ((i2 | 0) != 0) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 20472;
  ___cxa_throw(i2 | 0, 20520, 265);
 } while (0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 4096;
 HEAP32[i1 + 12 >> 2] = 4096;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 1;
 __ZN31btDefaultCollisionConfigurationC2ERK34btDefaultCollisionConstructionInfo(i2, i1);
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK10btBoxShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 if ((i5 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i6 = 0;
 do {
  d9 = +HEAPF32[i1 + 28 >> 2];
  d8 = +HEAPF32[i1 + 32 >> 2];
  d8 = +HEAPF32[i3 + (i6 << 4) + 4 >> 2] >= 0.0 ? d8 : -d8;
  d7 = +HEAPF32[i1 + 36 >> 2];
  d7 = +HEAPF32[i3 + (i6 << 4) + 8 >> 2] >= 0.0 ? d7 : -d7;
  HEAPF32[i4 + (i6 << 4) >> 2] = +HEAPF32[i3 + (i6 << 4) >> 2] >= 0.0 ? d9 : -d9;
  HEAPF32[i4 + (i6 << 4) + 4 >> 2] = d8;
  HEAPF32[i4 + (i6 << 4) + 8 >> 2] = d7;
  HEAPF32[i4 + (i6 << 4) + 12 >> 2] = 0.0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i5 | 0));
 STACKTOP = i2;
 return;
}
function __ZN15btCompoundShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 9512;
 i3 = HEAP32[i1 + 64 >> 2] | 0;
 if ((i3 | 0) != 0 ? (__ZN6btDbvtD2Ev(i3), i4 = HEAP32[i1 + 64 >> 2] | 0, (i4 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i4 + -4 >> 2] | 0);
 }
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 28 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 24 >> 2] = 0;
 }
 HEAP8[i1 + 28 >> 0] = 1;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN17btConvexHullShapeD1Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 10376;
 i3 = HEAP32[i2 + 104 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i2 + 108 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i2 + 104 >> 2] = 0;
 }
 HEAP8[i2 + 108 >> 0] = 1;
 HEAP32[i2 + 104 >> 2] = 0;
 HEAP32[i2 + 96 >> 2] = 0;
 HEAP32[i2 + 100 >> 2] = 0;
 HEAP32[i2 >> 2] = 15736;
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN13btGhostObject31removeOverlappingObjectInternalEP17btBroadphaseProxyP12btDispatcherS1_(i1, i4, i5, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i4 >> 2] | 0;
 i7 = HEAP32[i1 + 268 >> 2] | 0;
 if ((i7 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i9 = HEAP32[i1 + 276 >> 2] | 0;
 i8 = 0;
 while (1) {
  i6 = i9 + (i8 << 2) | 0;
  i5 = i8 + 1 | 0;
  if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) break;
  if ((i5 | 0) < (i7 | 0)) i8 = i5; else {
   i2 = 7;
   break;
  }
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i3;
  return;
 }
 if ((i8 | 0) >= (i7 | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[i9 + (i7 + -1 << 2) >> 2];
 HEAP32[i1 + 268 >> 2] = i7 + -1;
 STACKTOP = i3;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i1 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] & 31](i5, 16) | 0;
 if ((i5 | 0) == 0) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 + 4 >> 2] = i1;
 HEAP32[i5 >> 2] = 16816;
 HEAP8[i5 + 8 >> 0] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
 HEAP32[i5 + 12 >> 2] = i3;
 HEAP8[i5 + 8 >> 0] = 1;
 STACKTOP = i4;
 return i5 | 0;
}
function __ZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i5 >> 2] = 17624;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i5 + 20 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i5 + 24 >> 2] = HEAP32[i1 + 0 >> 2];
 HEAP32[i5 + 28 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 32 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i5 + 36 >> 2] = HEAP32[i1 + 12 >> 2];
 i4 = HEAP32[i3 + 48 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 127](i4, i5, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN23btDiscreteDynamicsWorld12removeActionEP17btActionInterface(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i5 + 280 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[i5 + 288 >> 2] | 0;
 i7 = 0;
 while (1) {
  i8 = i6 + (i7 << 2) | 0;
  i9 = i7 + 1 | 0;
  if ((HEAP32[i8 >> 2] | 0) == (i4 | 0)) break;
  if ((i9 | 0) < (i3 | 0)) i7 = i9; else {
   i1 = 7;
   break;
  }
 }
 if ((i1 | 0) == 7) {
  STACKTOP = i2;
  return;
 }
 if ((i7 | 0) >= (i3 | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[i6 + (i3 + -1 << 2) >> 2];
 HEAP32[(HEAP32[i5 + 288 >> 2] | 0) + (i3 + -1 << 2) >> 2] = i4;
 HEAP32[i5 + 280 >> 2] = i3 + -1;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBody_applyTorqueImpulse_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0;
 d7 = +HEAPF32[i2 >> 2];
 d6 = +HEAPF32[i2 + 4 >> 2];
 d5 = +HEAPF32[i2 + 8 >> 2];
 d4 = (+HEAPF32[i1 + 280 >> 2] * d7 + +HEAPF32[i1 + 284 >> 2] * d6 + +HEAPF32[i1 + 288 >> 2] * d5) * +HEAPF32[i1 + 548 >> 2];
 d3 = (+HEAPF32[i1 + 296 >> 2] * d7 + +HEAPF32[i1 + 300 >> 2] * d6 + +HEAPF32[i1 + 304 >> 2] * d5) * +HEAPF32[i1 + 552 >> 2];
 HEAPF32[i1 + 328 >> 2] = +HEAPF32[i1 + 328 >> 2] + (+HEAPF32[i1 + 264 >> 2] * d7 + +HEAPF32[i1 + 268 >> 2] * d6 + +HEAPF32[i1 + 272 >> 2] * d5) * +HEAPF32[i1 + 544 >> 2];
 HEAPF32[i1 + 332 >> 2] = +HEAPF32[i1 + 332 >> 2] + d4;
 HEAPF32[i1 + 336 >> 2] = +HEAPF32[i1 + 336 >> 2] + d3;
 return;
}
function __ZNK26btTriangleIndexVertexArray32getLockedReadOnlyVertexIndexBaseEPPKhRiR14PHY_ScalarTypeS3_S2_S3_S3_S5_i(i10, i8, i9, i7, i6, i4, i3, i5, i1, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = HEAP32[i10 + 32 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 + (i2 << 5) + 12 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 + (i2 << 5) + 16 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i10 + (i2 << 5) + 28 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i10 + (i2 << 5) + 20 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i10 + (i2 << 5) >> 2];
 HEAP32[i4 >> 2] = HEAP32[i10 + (i2 << 5) + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i10 + (i2 << 5) + 8 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i10 + (i2 << 5) + 24 >> 2];
 return;
}
function __ZN26btTriangleIndexVertexArray24getLockedVertexIndexBaseEPPhRiR14PHY_ScalarTypeS2_S1_S2_S2_S4_i(i10, i8, i9, i7, i6, i4, i3, i5, i1, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = HEAP32[i10 + 32 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 + (i2 << 5) + 12 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 + (i2 << 5) + 16 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i10 + (i2 << 5) + 28 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i10 + (i2 << 5) + 20 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i10 + (i2 << 5) >> 2];
 HEAP32[i4 >> 2] = HEAP32[i10 + (i2 << 5) + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i10 + (i2 << 5) + 8 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i10 + (i2 << 5) + 24 >> 2];
 return;
}
function __ZN23btDiscreteDynamicsWorld15removeRigidBodyEP11btRigidBody(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i4 + 232 >> 2] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i5 = HEAP32[i4 + 240 >> 2] | 0;
  i6 = 0;
  while (1) {
   i7 = i5 + (i6 << 2) | 0;
   i8 = i6 + 1 | 0;
   if ((HEAP32[i7 >> 2] | 0) == (i1 | 0)) break;
   if ((i8 | 0) < (i2 | 0)) i6 = i8; else break L1;
  }
  if ((i6 | 0) < (i2 | 0)) {
   HEAP32[i7 >> 2] = HEAP32[i5 + (i2 + -1 << 2) >> 2];
   HEAP32[(HEAP32[i4 + 240 >> 2] | 0) + (i2 + -1 << 2) >> 2] = i1;
   HEAP32[i4 + 232 >> 2] = i2 + -1;
  }
 } while (0);
 __ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject(i4, i1);
 STACKTOP = i3;
 return;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResult15addContactPointERKS8_SE_f(i1, i4, i3, d2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var i5 = 0;
 i5 = STACKTOP;
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i1 + 36 >> 2] = d2;
 HEAP8[i1 + 40 >> 0] = 1;
 STACKTOP = i5;
 return;
}
function __ZNK16btCylinderShapeZ37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i9, i6) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d7 = 0.0, d8 = 0.0;
 i2 = STACKTOP;
 d3 = +HEAPF32[i9 + 28 >> 2];
 d8 = +HEAPF32[i9 + 36 >> 2];
 d7 = +HEAPF32[i6 >> 2];
 d5 = +HEAPF32[i6 + 4 >> 2];
 d4 = +Math_sqrt(+(d7 * d7 + d5 * d5));
 if (d4 != 0.0) {
  HEAPF32[i1 >> 2] = d7 * (d3 / d4);
  if (+HEAPF32[i6 + 8 >> 2] < 0.0) d8 = -d8;
  HEAPF32[i1 + 8 >> 2] = d8;
  HEAPF32[i1 + 4 >> 2] = d5 * (d3 / d4);
  STACKTOP = i2;
  return;
 } else {
  HEAPF32[i1 >> 2] = d3;
  if (+HEAPF32[i6 + 8 >> 2] < 0.0) d8 = -d8;
  HEAPF32[i1 + 8 >> 2] = d8;
  HEAPF32[i1 + 4 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 }
}
function __ZNK15btCylinderShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i9, i6) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d7 = 0.0, d8 = 0.0;
 i2 = STACKTOP;
 d3 = +HEAPF32[i9 + 28 >> 2];
 d8 = +HEAPF32[i9 + 32 >> 2];
 d7 = +HEAPF32[i6 >> 2];
 d5 = +HEAPF32[i6 + 8 >> 2];
 d4 = +Math_sqrt(+(d7 * d7 + d5 * d5));
 if (d4 != 0.0) {
  HEAPF32[i1 >> 2] = d7 * (d3 / d4);
  if (+HEAPF32[i6 + 4 >> 2] < 0.0) d8 = -d8;
  HEAPF32[i1 + 4 >> 2] = d8;
  HEAPF32[i1 + 8 >> 2] = d5 * (d3 / d4);
  STACKTOP = i2;
  return;
 } else {
  HEAPF32[i1 >> 2] = d3;
  if (+HEAPF32[i6 + 4 >> 2] < 0.0) d8 = -d8;
  HEAPF32[i1 + 4 >> 2] = d8;
  HEAPF32[i1 + 8 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 }
}
function _emscripten_bind_btMatrix3x3_setEulerZYX_3(i1, d4, d3, d2) {
 i1 = i1 | 0;
 d4 = +d4;
 d3 = +d3;
 d2 = +d2;
 var d5 = 0.0, d6 = 0.0, d7 = 0.0;
 d5 = +Math_cos(+d4);
 d6 = +Math_cos(+d3);
 d7 = +Math_cos(+d2);
 d4 = +Math_sin(+d4);
 d3 = +Math_sin(+d3);
 d2 = +Math_sin(+d2);
 HEAPF32[i1 >> 2] = d6 * d7;
 HEAPF32[i1 + 4 >> 2] = d3 * d4 * d7 - d5 * d2;
 HEAPF32[i1 + 8 >> 2] = d3 * d5 * d7 + d4 * d2;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 HEAPF32[i1 + 16 >> 2] = d6 * d2;
 HEAPF32[i1 + 20 >> 2] = d3 * d4 * d2 + d5 * d7;
 HEAPF32[i1 + 24 >> 2] = d3 * d5 * d2 - d4 * d7;
 HEAPF32[i1 + 28 >> 2] = 0.0;
 HEAPF32[i1 + 32 >> 2] = -d3;
 HEAPF32[i1 + 36 >> 2] = d6 * d4;
 HEAPF32[i1 + 40 >> 2] = d6 * d5;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 return;
}
function __ZNK16btCylinderShapeX37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i9, i6) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d7 = 0.0, d8 = 0.0;
 i2 = STACKTOP;
 d3 = +HEAPF32[i9 + 32 >> 2];
 d8 = +HEAPF32[i9 + 28 >> 2];
 d7 = +HEAPF32[i6 + 4 >> 2];
 d5 = +HEAPF32[i6 + 8 >> 2];
 d4 = +Math_sqrt(+(d7 * d7 + d5 * d5));
 if (d4 != 0.0) {
  HEAPF32[i1 + 4 >> 2] = d7 * (d3 / d4);
  if (+HEAPF32[i6 >> 2] < 0.0) d8 = -d8;
  HEAPF32[i1 >> 2] = d8;
  HEAPF32[i1 + 8 >> 2] = d5 * (d3 / d4);
  STACKTOP = i2;
  return;
 } else {
  HEAPF32[i1 + 4 >> 2] = d3;
  if (+HEAPF32[i6 >> 2] < 0.0) d8 = -d8;
  HEAPF32[i1 >> 2] = d8;
  HEAPF32[i1 + 8 >> 2] = 0.0;
  STACKTOP = i2;
  return;
 }
}
function __ZNK11btRigidBody24checkCollideWithOverrideEPK17btCollisionObject(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 L1 : do if ((HEAP32[i2 + 236 >> 2] & 2 | 0) != 0 ? (i3 = HEAP32[i4 + 488 >> 2] | 0, (i3 | 0) > 0) : 0) {
  i4 = HEAP32[i4 + 496 >> 2] | 0;
  i5 = 0;
  while (1) {
   i6 = HEAP32[i4 + (i5 << 2) >> 2] | 0;
   if ((HEAP8[i6 + 20 >> 0] | 0) != 0) {
    if ((HEAP32[i6 + 28 >> 2] | 0) == (i2 | 0)) {
     i2 = 0;
     break L1;
    }
    if ((HEAP32[i6 + 32 >> 2] | 0) == (i2 | 0)) {
     i2 = 0;
     break L1;
    }
   }
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i3 | 0)) {
    i2 = 1;
    break;
   }
  }
 } else i2 = 1; while (0);
 STACKTOP = i1;
 return i2 | 0;
}
function __ZN21btConeTwistConstraint8setParamEifi(i3, i5, d1, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) == 4 | (i5 | 0) == 3) if (i4 >>> 0 < 3) {
  HEAPF32[i3 + 596 >> 2] = d1;
  HEAP32[i3 + 592 >> 2] = HEAP32[i3 + 592 >> 2] | 1;
  STACKTOP = i2;
  return;
 } else {
  HEAPF32[i3 + 604 >> 2] = d1;
  HEAP32[i3 + 592 >> 2] = HEAP32[i3 + 592 >> 2] | 4;
  STACKTOP = i2;
  return;
 } else if ((i5 | 0) == 2 | (i5 | 0) == 1) if (i4 >>> 0 < 3) {
  HEAPF32[i3 + 600 >> 2] = d1;
  HEAP32[i3 + 592 >> 2] = HEAP32[i3 + 592 >> 2] | 2;
  STACKTOP = i2;
  return;
 } else {
  HEAPF32[i3 + 432 >> 2] = d1;
  STACKTOP = i2;
  return;
 } else {
  STACKTOP = i2;
  return;
 }
}
function _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2(d1, d3) {
 d1 = +d1;
 d3 = +d3;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(75) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 1.0;
 HEAPF32[i4 + 16 >> 2] = 1.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 HEAPF32[i4 + 24 >> 2] = 0.0;
 HEAPF32[i4 + 44 >> 2] = .03999999910593033;
 HEAP32[i4 + 4 >> 2] = 10;
 HEAP32[i4 >> 2] = 6504;
 HEAP32[i4 + 52 >> 2] = 2;
 HEAPF32[i4 + 28 >> 2] = d1;
 HEAPF32[i4 + 32 >> 2] = d1;
 HEAPF32[i4 + 36 >> 2] = d3 * .5;
 HEAPF32[i4 + 40 >> 2] = 0.0;
 STACKTOP = i2;
 return i4 | 0;
}
function _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2(d3, d1) {
 d3 = +d3;
 d1 = +d1;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(75) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 1.0;
 HEAPF32[i4 + 16 >> 2] = 1.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 HEAPF32[i4 + 24 >> 2] = 0.0;
 HEAPF32[i4 + 44 >> 2] = .03999999910593033;
 HEAP32[i4 + 4 >> 2] = 10;
 HEAP32[i4 >> 2] = 6400;
 HEAP32[i4 + 52 >> 2] = 0;
 HEAPF32[i4 + 28 >> 2] = d1 * .5;
 HEAPF32[i4 + 32 >> 2] = d3;
 HEAPF32[i4 + 36 >> 2] = d3;
 HEAPF32[i4 + 40 >> 2] = 0.0;
 STACKTOP = i2;
 return i4 | 0;
}
function _emscripten_bind_btCapsuleShape_btCapsuleShape_2(d1, d3) {
 d1 = +d1;
 d3 = +d3;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(75) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 HEAP32[i4 + 8 >> 2] = 0;
 HEAPF32[i4 + 12 >> 2] = 1.0;
 HEAPF32[i4 + 16 >> 2] = 1.0;
 HEAPF32[i4 + 20 >> 2] = 1.0;
 HEAPF32[i4 + 24 >> 2] = 0.0;
 HEAPF32[i4 + 44 >> 2] = .03999999910593033;
 HEAP32[i4 >> 2] = 6296;
 HEAP32[i4 + 4 >> 2] = 10;
 HEAP32[i4 + 52 >> 2] = 1;
 HEAPF32[i4 + 28 >> 2] = d1;
 HEAPF32[i4 + 32 >> 2] = d3 * .5;
 HEAPF32[i4 + 36 >> 2] = d1;
 HEAPF32[i4 + 40 >> 2] = 0.0;
 STACKTOP = i2;
 return i4 | 0;
}
function ___remdi3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 i7 = i3 >> 31 | ((i3 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i3 | 0) < 0 ? -1 : 0) >> 31 | ((i3 | 0) < 0 ? -1 : 0) << 1;
 i9 = i1 >> 31 | ((i1 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i1 | 0) < 0 ? -1 : 0) >> 31 | ((i1 | 0) < 0 ? -1 : 0) << 1;
 i3 = _i64Subtract(i7 ^ i4, i6 ^ i3, i7, i6) | 0;
 i4 = tempRet0;
 ___udivmoddi4(i3, i4, _i64Subtract(i9 ^ i2, i8 ^ i1, i9, i8) | 0, tempRet0, i5 | 0) | 0;
 i4 = _i64Subtract(HEAP32[i5 >> 2] ^ i7, HEAP32[i5 + 4 >> 2] ^ i6, i7, i6) | 0;
 i3 = tempRet0;
 STACKTOP = i5;
 return (tempRet0 = i3, i4) | 0;
}
function _emscripten_bind_btVehicleTuning_btVehicleTuning_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = _malloc(24) | 0;
 L1 : do if ((i2 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i2 = _malloc(24) | 0;
   if ((i2 | 0) != 0) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 20472;
  ___cxa_throw(i2 | 0, 20520, 265);
 } while (0);
 HEAPF32[i2 >> 2] = 5.880000114440918;
 HEAPF32[i2 + 4 >> 2] = .8299999833106995;
 HEAPF32[i2 + 8 >> 2] = .8799999952316284;
 HEAPF32[i2 + 12 >> 2] = 500.0;
 HEAPF32[i2 + 16 >> 2] = 10.5;
 HEAPF32[i2 + 20 >> 2] = 6.0e3;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK22btBvhTriangleMeshShape30serializeSingleTriangleInfoMapEP12btSerializer(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i4 + 56 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 127](i3) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i5, 1) | 0;
 i3 = HEAP32[i4 + 56 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 31](i3, HEAP32[i5 + 8 >> 2] | 0, i1) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, i3, 1346456916, HEAP32[i4 + 56 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN30btKinematicCharacterControllerD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2632;
 i3 = HEAP32[i1 + 140 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 144 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP8[i1 + 144 >> 0] = 1;
  HEAP32[i1 + 140 >> 2] = 0;
  HEAP32[i1 + 132 >> 2] = 0;
  HEAP32[i1 + 136 >> 2] = 0;
  if ((i1 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
 } else {
  HEAP8[i1 + 144 >> 0] = 1;
  HEAP32[i1 + 140 >> 2] = 0;
  HEAP32[i1 + 132 >> 2] = 0;
  HEAP32[i1 + 136 >> 2] = 0;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __GLOBAL__I_a() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = _malloc(8) | 0;
 L1 : do if ((i2 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i2 = _malloc(8) | 0;
   if ((i2 | 0) != 0) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 20472;
  ___cxa_throw(i2 | 0, 20520, 265);
 } while (0);
 HEAP32[5008] = i2;
 _gettimeofday(i2 | 0, 0) | 0;
 HEAP32[5010] = 20080;
 HEAP32[5011] = 0;
 HEAP32[5012] = 0;
 HEAP32[5013] = 0;
 HEAP32[5014] = 0;
 HEAP32[5015] = 0;
 HEAP32[5016] = 0;
 HEAP32[5017] = 0;
 HEAP32[5018] = 0;
 __ZN12CProfileNode5ResetEv(20040);
 STACKTOP = i1;
 return;
}
function __ZN16btDbvtBroadphase7rayTestERK9btVector3S2_R23btBroadphaseRayCallbackS2_S2_(i5, i4, i6, i3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i6 >> 2] = 11616;
 HEAP32[i6 + 4 >> 2] = i3;
 __ZNK6btDbvt15rayTestInternalEPK10btDbvtNodeRK9btVector3S5_S5_PjfS5_S5_RNS_8ICollideE(i5 + 4 | 0, HEAP32[i5 + 4 >> 2] | 0, i4, i3 + 4 | 0, i3 + 20 | 0, +HEAPF32[i3 + 32 >> 2], i2, i1, i6);
 __ZNK6btDbvt15rayTestInternalEPK10btDbvtNodeRK9btVector3S5_S5_PjfS5_S5_RNS_8ICollideE(i5 + 64 | 0, HEAP32[i5 + 64 >> 2] | 0, i4, i3 + 4 | 0, i3 + 20 | 0, +HEAPF32[i3 + 32 >> 2], i2, i1, i6);
 STACKTOP = i6;
 return;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN14LocalInfoAdder15addSingleResultE_1RNS_17LocalConvexResultEb(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, d5 = 0.0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = -1;
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 16 >> 2];
 if ((HEAP32[i3 + 4 >> 2] | 0) == 0) HEAP32[i3 + 4 >> 2] = i2;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 d5 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i3, i4);
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[(HEAP32[i1 + 12 >> 2] | 0) + 4 >> 2];
 STACKTOP = i2;
 return +d5;
}
function __ZNK22btBvhTriangleMeshShape18serializeSingleBvhEP12btSerializer(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i4 + 52 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i5, 1) | 0;
 i3 = HEAP32[i4 + 52 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 31](i3, HEAP32[i5 + 8 >> 2] | 0, i1) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, i5, i3, 1213612625, HEAP32[i4 + 52 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNK34btClosestNotMeConvexResultCallback14needsCollisionEP17btBroadphaseProxy(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i5 >> 2] | 0;
 i3 = HEAP32[i1 + 80 >> 2] | 0;
 if ((i4 | 0) == (i3 | 0)) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAP16[i1 + 10 >> 1] & HEAP16[i5 + 4 >> 1]) << 16 >> 16 == 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAP16[i5 + 6 >> 1] & HEAP16[i1 + 8 >> 1]) << 16 >> 16 == 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 i5 = HEAP32[i1 + 92 >> 2] | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3, i4) | 0;
 STACKTOP = i2;
 return i5 | 0;
}
function _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = _malloc(24) | 0;
 L1 : do if ((i2 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i2 = _malloc(24) | 0;
   if ((i2 | 0) != 0) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 20472;
  ___cxa_throw(i2 | 0, 20520, 265);
 } while (0);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 4096;
 HEAP32[i2 + 12 >> 2] = 4096;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 1;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK11btConeShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i3, i4, i1, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i6 = 0;
 do {
  i7 = i1 + (i6 << 4) | 0;
  __ZNK11btConeShape16coneLocalSupportERK9btVector3(i2, i3, i4 + (i6 << 4) | 0);
  HEAP32[i7 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i5 | 0));
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = _malloc(4) | 0;
 if ((i2 | 0) != 0) {
  i3 = i2;
  HEAP32[i3 >> 2] = 192;
  STACKTOP = i1;
  return i3 | 0;
 }
 while (1) {
  i2 = HEAP32[5158] | 0;
  HEAP32[5158] = i2 + 0;
  if ((i2 | 0) == 0) {
   i2 = 4;
   break;
  }
  FUNCTION_TABLE_v[i2 & 3]();
  i3 = _malloc(4) | 0;
  if ((i3 | 0) != 0) {
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 4) {
  i3 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i3 >> 2] = 20472;
  ___cxa_throw(i3 | 0, 20520, 265);
 } else if ((i2 | 0) == 5) {
  HEAP32[i3 >> 2] = 192;
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}
function __ZN16btPointCollector15addContactPointERK9btVector3S2_f(i1, i3, i4, d5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 var i2 = 0;
 i2 = STACKTOP;
 if (!(+HEAPF32[i1 + 36 >> 2] > d5)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[i1 + 40 >> 0] = 1;
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i4 + 0 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAPF32[i1 + 36 >> 2] = d5;
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN15LocalInfoAdder215addSingleResultERNS_14LocalRayResultEb(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, d5 = 0.0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = -1;
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 24 >> 2];
 if ((HEAP32[i3 + 4 >> 2] | 0) == 0) HEAP32[i3 + 4 >> 2] = i2;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 d5 = +FUNCTION_TABLE_diii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 15](i6, i3, i4);
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[(HEAP32[i1 + 20 >> 2] | 0) + 4 >> 2];
 STACKTOP = i2;
 return +d5;
}
function _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = _malloc(8) | 0;
 L1 : do if ((i2 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i2 = _malloc(8) | 0;
   if ((i2 | 0) != 0) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 20472;
  ___cxa_throw(i2 | 0, 20520, 265);
 } while (0);
 i3 = i2;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP16[i2 + 4 >> 1] = 1;
 HEAP16[i2 + 6 >> 1] = -1;
 HEAP32[i2 >> 2] = 840;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i4 + 16 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP32[i4 + 16 >> 2] = i1;
  HEAP32[i4 + 24 >> 2] = i5;
  HEAP32[i4 + 36 >> 2] = 1;
  STACKTOP = i2;
  return;
 }
 if ((i3 | 0) != (i1 | 0)) {
  HEAP32[i4 + 36 >> 2] = (HEAP32[i4 + 36 >> 2] | 0) + 1;
  HEAP32[i4 + 24 >> 2] = 2;
  HEAP8[i4 + 54 >> 0] = 1;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i4 + 24 >> 2] | 0) != 2) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 + 24 >> 2] = i5;
 STACKTOP = i2;
 return;
}
function __ZNK23btPoint2PointConstraint9serializeEPvP12btSerializer(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK17btTypedConstraint9serializeEPvP12btSerializer(i2, i1, i3) | 0;
 HEAPF32[i1 + 52 >> 2] = +HEAPF32[i2 + 300 >> 2];
 HEAPF32[i1 + 56 >> 2] = +HEAPF32[i2 + 304 >> 2];
 HEAPF32[i1 + 60 >> 2] = +HEAPF32[i2 + 308 >> 2];
 HEAPF32[i1 + 64 >> 2] = +HEAPF32[i2 + 312 >> 2];
 HEAPF32[i1 + 68 >> 2] = +HEAPF32[i2 + 316 >> 2];
 HEAPF32[i1 + 72 >> 2] = +HEAPF32[i2 + 320 >> 2];
 HEAPF32[i1 + 76 >> 2] = +HEAPF32[i2 + 324 >> 2];
 HEAPF32[i1 + 80 >> 2] = +HEAPF32[i2 + 328 >> 2];
 STACKTOP = i4;
 return 3080;
}
function _emscripten_bind_btQuaternion_btQuaternion_4(d1, d3, d4, d5) {
 d1 = +d1;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 i6 = _malloc(16) | 0;
 L1 : do if ((i6 | 0) == 0) {
  while (1) {
   i6 = HEAP32[5158] | 0;
   HEAP32[5158] = i6 + 0;
   if ((i6 | 0) == 0) break;
   FUNCTION_TABLE_v[i6 & 3]();
   i6 = _malloc(16) | 0;
   if ((i6 | 0) != 0) break L1;
  }
  i6 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i6 >> 2] = 20472;
  ___cxa_throw(i6 | 0, 20520, 265);
 } while (0);
 HEAPF32[i6 >> 2] = d1;
 HEAPF32[i6 + 4 >> 2] = d3;
 HEAPF32[i6 + 8 >> 2] = d4;
 HEAPF32[i6 + 12 >> 2] = d5;
 STACKTOP = i2;
 return i6 | 0;
}
function _memcpy(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if ((i1 | 0) >= 4096) return _emscripten_memcpy_big(i3 | 0, i2 | 0, i1 | 0) | 0;
 i4 = i3 | 0;
 if ((i3 & 3) == (i2 & 3)) {
  while (i3 & 3) {
   if ((i1 | 0) == 0) return i4 | 0;
   HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
   i3 = i3 + 1 | 0;
   i2 = i2 + 1 | 0;
   i1 = i1 - 1 | 0;
  }
  while ((i1 | 0) >= 4) {
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   i3 = i3 + 4 | 0;
   i2 = i2 + 4 | 0;
   i1 = i1 - 4 | 0;
  }
 }
 while ((i1 | 0) > 0) {
  HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i2 = i2 + 1 | 0;
  i1 = i1 - 1 | 0;
 }
 return i4 | 0;
}
function __ZN26btTriangleIndexVertexArrayD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 19904;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
 } else {
  if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP8[i1 + 36 >> 0] = 1;
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher22freeCollisionAlgorithmEPv(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i3 + 64 >> 2] | 0;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 + 16 >> 2] | 0;
 if (!(i4 >>> 0 > i1 >>> 0) ? (i4 + (Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0) | 0) | 0) >>> 0 > i1 >>> 0 : 0) {
  HEAP32[i1 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i3 + 12 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = (HEAP32[i3 + 8 >> 2] | 0) + 1;
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN13btGhostObjectD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 13008;
 i3 = HEAP32[i1 + 276 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 280 >> 0] = 1;
  HEAP32[i1 + 276 >> 2] = 0;
  HEAP32[i1 + 268 >> 2] = 0;
  HEAP32[i1 + 272 >> 2] = 0;
 } else {
  if ((HEAP8[i1 + 280 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP8[i1 + 280 >> 0] = 1;
  HEAP32[i1 + 276 >> 2] = 0;
  HEAP32[i1 + 268 >> 2] = 0;
  HEAP32[i1 + 272 >> 2] = 0;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN11btRigidBodyD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3912;
 i3 = HEAP32[i1 + 496 >> 2] | 0;
 if ((i3 | 0) == 0) {
  HEAP8[i1 + 500 >> 0] = 1;
  HEAP32[i1 + 496 >> 2] = 0;
  HEAP32[i1 + 488 >> 2] = 0;
  HEAP32[i1 + 492 >> 2] = 0;
 } else {
  if ((HEAP8[i1 + 500 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP8[i1 + 500 >> 0] = 1;
  HEAP32[i1 + 496 >> 2] = 0;
  HEAP32[i1 + 488 >> 2] = 0;
  HEAP32[i1 + 492 >> 2] = 0;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN36btCompoundCompoundCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i3 + 8 >> 2] | 0;
 i5 = HEAP32[i3 + 8 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = 0;
 do {
  i6 = HEAP32[(HEAP32[i3 + 16 >> 2] | 0) + (i4 * 12 | 0) + 8 >> 2] | 0;
  if ((i6 | 0) != 0) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 127](i6, i1);
   i5 = HEAP32[i3 + 8 >> 2] | 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i5 | 0));
 STACKTOP = i2;
 return;
}
function __ZN23btGeneric6DofConstraint13calcAnchorPosEv(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0;
 d3 = +HEAPF32[(HEAP32[i1 + 28 >> 2] | 0) + 344 >> 2];
 d2 = +HEAPF32[(HEAP32[i1 + 32 >> 2] | 0) + 344 >> 2];
 if (d2 == 0.0) d2 = 1.0; else d2 = d3 / (d3 + d2);
 d5 = 1.0 - d2;
 d4 = d2 * +HEAPF32[i1 + 1116 >> 2] + d5 * +HEAPF32[i1 + 1180 >> 2];
 d3 = d2 * +HEAPF32[i1 + 1120 >> 2] + d5 * +HEAPF32[i1 + 1184 >> 2];
 HEAPF32[i1 + 1284 >> 2] = d2 * +HEAPF32[i1 + 1112 >> 2] + d5 * +HEAPF32[i1 + 1176 >> 2];
 HEAPF32[i1 + 1288 >> 2] = d4;
 HEAPF32[i1 + 1292 >> 2] = d3;
 HEAPF32[i1 + 1296 >> 2] = 0.0;
 return;
}
function _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = _malloc(92) | 0;
 L1 : do if ((i3 | 0) == 0) {
  while (1) {
   i3 = HEAP32[5158] | 0;
   HEAP32[5158] = i3 + 0;
   if ((i3 | 0) == 0) break;
   FUNCTION_TABLE_v[i3 & 3]();
   i3 = _malloc(92) | 0;
   if ((i3 | 0) != 0) break L1;
  }
  i3 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i3 >> 2] = 20472;
  ___cxa_throw(i3 | 0, 20520, 265);
 } while (0);
 __ZN31btDefaultCollisionConfigurationC2ERK34btDefaultCollisionConstructionInfo(i3, i1);
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN19btGhostPairCallback21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i4 = STACKTOP;
 i6 = HEAP32[i3 >> 2] | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 if ((HEAP32[i6 + 236 >> 2] | 0) != 4) i6 = 0;
 if ((HEAP32[i5 + 236 >> 2] | 0) != 4) i5 = 0;
 if ((i6 | 0) != 0) FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 127](i6, i1, i2, i3);
 if ((i5 | 0) == 0) {
  STACKTOP = i4;
  return 0;
 }
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] & 127](i5, i3, i2, i1);
 STACKTOP = i4;
 return 0;
}
function __ZN20btAxisSweep3InternalItE9resetPoolEP12btDispatcher(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 if ((HEAP16[i1 + 56 >> 1] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 HEAP16[i1 + 64 >> 1] = 1;
 i4 = HEAP16[i1 + 58 >> 1] | 0;
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i4 & 65535) > 1) {
  i4 = 1;
  i5 = 1;
  while (1) {
   HEAP16[i3 + (i4 << 6) + 48 >> 1] = i4 + 1;
   i5 = i5 + 1 << 16 >> 16;
   i4 = HEAP16[i1 + 58 >> 1] | 0;
   if ((i5 & 65535) < (i4 & 65535)) i4 = i5 & 65535; else break;
  }
 }
 HEAP16[i3 + ((i4 & 65535) + -1 << 6) + 48 >> 1] = 0;
 STACKTOP = i2;
 return;
}
function __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 40 >> 2] | 0) != 0) {
  __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i3, HEAP32[i1 + 36 >> 2] | 0);
  __ZL17recursedeletenodeP6btDbvtP10btDbvtNode(i3, HEAP32[i1 + 40 >> 2] | 0);
 }
 if ((HEAP32[i3 >> 2] | 0) == (i1 | 0)) HEAP32[i3 >> 2] = 0;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i4 | 0) == 0) {
  HEAP32[i3 + 4 >> 2] = i1;
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i4 + -4 >> 2] | 0);
 HEAP32[i3 + 4 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher26allocateCollisionAlgorithmEi(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = STACKTOP;
 i3 = HEAP32[i3 + 64 >> 2] | 0;
 i4 = HEAP32[i3 + 8 >> 2] | 0;
 if ((i4 | 0) != 0) {
  i2 = HEAP32[i3 + 12 >> 2] | 0;
  HEAP32[i3 + 12 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 8 >> 2] = i4 + -1;
  i4 = i2;
  STACKTOP = i1;
  return i4 | 0;
 }
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(i2 + 19 | 0) | 0;
 if ((i2 | 0) == 0) {
  i4 = 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
 i4 = i2 + 19 & -16;
 STACKTOP = i1;
 return i4 | 0;
}
function _emscripten_bind_btRigidBody_setLinearFactor_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0;
 i3 = STACKTOP;
 HEAP32[i1 + 348 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 352 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 356 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 360 >> 2] = HEAP32[i2 + 12 >> 2];
 d6 = +HEAPF32[i1 + 344 >> 2];
 d5 = +HEAPF32[i1 + 352 >> 2] * d6;
 d4 = +HEAPF32[i1 + 356 >> 2] * d6;
 HEAPF32[i1 + 560 >> 2] = +HEAPF32[i1 + 348 >> 2] * d6;
 HEAPF32[i1 + 564 >> 2] = d5;
 HEAPF32[i1 + 568 >> 2] = d4;
 HEAPF32[i1 + 572 >> 2] = 0.0;
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btTriangleMesh_addTriangle_4(i3, i5, i4, i2, i1) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[i3 + 32 >> 2] | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 __ZN14btTriangleMesh8addIndexEi(i3, __ZN14btTriangleMesh15findOrAddVertexERK9btVector3b(i3, i5, i1) | 0);
 __ZN14btTriangleMesh8addIndexEi(i3, __ZN14btTriangleMesh15findOrAddVertexERK9btVector3b(i3, i4, i1) | 0);
 __ZN14btTriangleMesh8addIndexEi(i3, __ZN14btTriangleMesh15findOrAddVertexERK9btVector3b(i3, i2, i1) | 0);
 STACKTOP = i6;
 return;
}
function ___divdi3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = i3 >> 31 | ((i3 | 0) < 0 ? -1 : 0) << 1;
 i5 = ((i3 | 0) < 0 ? -1 : 0) >> 31 | ((i3 | 0) < 0 ? -1 : 0) << 1;
 i8 = i1 >> 31 | ((i1 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i1 | 0) < 0 ? -1 : 0) >> 31 | ((i1 | 0) < 0 ? -1 : 0) << 1;
 i3 = _i64Subtract(i7 ^ i4, i5 ^ i3, i7, i5) | 0;
 i4 = tempRet0;
 i4 = _i64Subtract((___udivmoddi4(i3, i4, _i64Subtract(i8 ^ i2, i6 ^ i1, i8, i6) | 0, tempRet0, 0) | 0) ^ (i8 ^ i7), tempRet0 ^ (i6 ^ i5), i8 ^ i7, i6 ^ i5) | 0;
 return i4 | 0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i7, i5, i4, i3, i1, i6) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i7 | 0) == (HEAP32[i5 + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i5, i4, i3, i1);
  STACKTOP = i2;
  return;
 } else {
  i7 = HEAP32[i7 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 7](i7, i5, i4, i3, i1, i6);
  STACKTOP = i2;
  return;
 }
}
function __ZN23btDiscreteDynamicsWorld11clearForcesEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 232 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i3 = 0;
 do {
  i4 = (HEAP32[(HEAP32[i1 + 240 >> 2] | 0) + (i3 << 2) >> 2] | 0) + 412 | 0;
  HEAP32[i4 + 0 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i4 + 20 >> 2] = 0;
  HEAP32[i4 + 24 >> 2] = 0;
  HEAP32[i4 + 28 >> 2] = 0;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (HEAP32[i1 + 232 >> 2] | 0));
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConstraintSetting_btConstraintSetting_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = _malloc(12) | 0;
 L1 : do if ((i2 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i2 = _malloc(12) | 0;
   if ((i2 | 0) != 0) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 20472;
  ___cxa_throw(i2 | 0, 20520, 265);
 } while (0);
 HEAPF32[i2 >> 2] = .30000001192092896;
 HEAPF32[i2 + 4 >> 2] = 1.0;
 HEAPF32[i2 + 8 >> 2] = 0.0;
 STACKTOP = i1;
 return i2 | 0;
}
function __ZN17btHingeConstraint8setParamEifi(i3, i4, d1, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 do if ((i5 | 0) == 5 | (i5 | 0) == -1) if ((i4 | 0) == 3) {
  HEAPF32[i3 + 752 >> 2] = d1;
  HEAP32[i3 + 748 >> 2] = HEAP32[i3 + 748 >> 2] | 4;
  break;
 } else if ((i4 | 0) == 2) {
  HEAPF32[i3 + 760 >> 2] = d1;
  HEAP32[i3 + 748 >> 2] = HEAP32[i3 + 748 >> 2] | 2;
  break;
 } else if ((i4 | 0) == 4) {
  HEAPF32[i3 + 756 >> 2] = d1;
  HEAP32[i3 + 748 >> 2] = HEAP32[i3 + 748 >> 2] | 1;
  break;
 } else break; while (0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTriangleMesh_addTriangle_3(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 i6 = HEAP32[i2 + 32 >> 2] | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 __ZN14btTriangleMesh8addIndexEi(i2, __ZN14btTriangleMesh15findOrAddVertexERK9btVector3b(i2, i4, 0) | 0);
 __ZN14btTriangleMesh8addIndexEi(i2, __ZN14btTriangleMesh15findOrAddVertexERK9btVector3b(i2, i3, 0) | 0);
 __ZN14btTriangleMesh8addIndexEi(i2, __ZN14btTriangleMesh15findOrAddVertexERK9btVector3b(i2, i1, 0) | 0);
 STACKTOP = i5;
 return;
}
function __ZN28btCompoundCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i5 = HEAP32[i3 + 12 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i4 = 0;
 do {
  i6 = HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + (i4 << 2) >> 2] | 0;
  if ((i6 | 0) != 0) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 127](i6, i1);
   i5 = HEAP32[i3 + 12 >> 2] | 0;
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i5 | 0));
 STACKTOP = i2;
 return;
}
function __ZN19btGhostPairCallback18addOverlappingPairEP17btBroadphaseProxyS1_(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i5 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if ((HEAP32[i5 + 236 >> 2] | 0) != 4) i5 = 0;
 if ((HEAP32[i4 + 236 >> 2] | 0) != 4) i4 = 0;
 if ((i5 | 0) != 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 127](i5, i1, i2);
 if ((i4 | 0) == 0) {
  STACKTOP = i3;
  return 0;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4, i2, i1);
 STACKTOP = i3;
 return 0;
}
function _emscripten_bind_btTransform_btTransform_0() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 i4 = _malloc(64) | 0;
 L1 : do if ((i4 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i4 = _malloc(64) | 0;
   if ((i4 | 0) != 0) break L1;
  }
  i4 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i4 >> 2] = 20472;
  ___cxa_throw(i4 | 0, 20520, 265);
 } while (0);
 i2 = i4 + 48 | 0;
 i3 = i4;
 do i3 = i3 + 16 | 0; while ((i3 | 0) != (i2 | 0));
 STACKTOP = i1;
 return i4 | 0;
}
function __ZNK21btConeTwistConstraint8getParamEii(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, d5 = 0.0;
 i1 = STACKTOP;
 do if ((i4 | 0) == 4 | (i4 | 0) == 3) {
  if (i3 >>> 0 < 3) {
   d5 = +HEAPF32[i2 + 596 >> 2];
   break;
  }
  if ((i3 + -3 | 0) >>> 0 < 3) d5 = +HEAPF32[i2 + 604 >> 2]; else d5 = 0.0;
 } else if ((i4 | 0) == 2 | (i4 | 0) == 1) {
  if (i3 >>> 0 < 3) {
   d5 = +HEAPF32[i2 + 600 >> 2];
   break;
  }
  if ((i3 + -3 | 0) >>> 0 < 3) d5 = +HEAPF32[i2 + 432 >> 2]; else d5 = 0.0;
 } else d5 = 0.0; while (0);
 STACKTOP = i1;
 return +d5;
}
function _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = _malloc(8) | 0;
 L1 : do if ((i3 | 0) == 0) {
  while (1) {
   i3 = HEAP32[5158] | 0;
   HEAP32[5158] = i3 + 0;
   if ((i3 | 0) == 0) break;
   FUNCTION_TABLE_v[i3 & 3]();
   i3 = _malloc(8) | 0;
   if ((i3 | 0) != 0) break L1;
  }
  i3 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i3 >> 2] = 20472;
  ___cxa_throw(i3 | 0, 20520, 265);
 } while (0);
 HEAP32[i3 >> 2] = 3832;
 HEAP32[i3 + 4 >> 2] = i1;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNK26btTriangleIndexVertexArray14setPremadeAabbERK9btVector3S2_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 HEAP32[i1 + 52 >> 2] = HEAP32[i3 + 0 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 48 >> 2] = 1;
 STACKTOP = i4;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i9 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i3 & 1 | 0) == 0) i9 = i3 >> 8; else i9 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i3 >> 8) >> 2] | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 7](i1, i4, i5, i6 + i9 | 0, (i3 & 2 | 0) != 0 ? i7 : 2, i8);
 STACKTOP = i2;
 return;
}
function __ZNK11btRigidBody21serializeSingleObjectEP12btSerializer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 i5 = FUNCTION_TABLE_iiii[i4 & 31](i2, i5, 1) | 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i5 + 8 >> 2] | 0, i2) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i5, i4, 1497645650, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btSphereShape_btSphereShape_1(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(71) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 HEAP32[i3 + 8 >> 2] = 0;
 HEAPF32[i3 + 12 >> 2] = 1.0;
 HEAPF32[i3 + 16 >> 2] = 1.0;
 HEAPF32[i3 + 20 >> 2] = 1.0;
 HEAPF32[i3 + 24 >> 2] = 0.0;
 HEAP32[i3 >> 2] = 16680;
 HEAP32[i3 + 4 >> 2] = 8;
 HEAPF32[i3 + 28 >> 2] = d1;
 HEAPF32[i3 + 44 >> 2] = d1;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN21btCollisionDispatcher13findAlgorithmEPK24btCollisionObjectWrapperS2_P20btPersistentManifold(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 4 >> 2] = i4;
 i4 = HEAP32[i3 + ((HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + 4 >> 2] | 0) * 144 | 0) + (HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 4 >> 2] << 2) + 72 >> 2] | 0;
 i4 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 31](i4, i5, i2, i1) | 0;
 STACKTOP = i5;
 return i4 | 0;
}
function _emscripten_bind_btHingeConstraint_setLimit_5(i1, d6, d7, d3, d4, d5) {
 i1 = i1 | 0;
 d6 = +d6;
 d7 = +d7;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 var i2 = 0;
 i2 = STACKTOP;
 HEAPF32[i1 + 692 >> 2] = (d7 - d6) * .5;
 d6 = +_fmodf(+((d7 - d6) * .5 + d6), 6.2831854820251465);
 if (!(d6 < -3.1415927410125732)) {
  if (d6 > 3.1415927410125732) d6 = d6 + -6.2831854820251465;
 } else d6 = d6 + 6.2831854820251465;
 HEAPF32[i1 + 688 >> 2] = d6;
 HEAPF32[i1 + 696 >> 2] = d3;
 HEAPF32[i1 + 700 >> 2] = d4;
 HEAPF32[i1 + 704 >> 2] = d5;
 STACKTOP = i2;
 return;
}
function __ZNK20btAxisSweep3InternalItE7getAabbEP17btBroadphaseProxyR9btVector3S4_(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = STACKTOP;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 44 >> 2];
 STACKTOP = i4;
 return;
}
function __ZNK17btCollisionObject21serializeSingleObjectEP12btSerializer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 31](i2, i5, 1) | 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i5 + 8 >> 2] | 0, i2) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i5, i4, 1245859651, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = _malloc(196) | 0;
 L1 : do if ((i2 | 0) == 0) {
  while (1) {
   i2 = HEAP32[5158] | 0;
   HEAP32[5158] = i2 + 0;
   if ((i2 | 0) == 0) break;
   FUNCTION_TABLE_v[i2 & 3]();
   i2 = _malloc(196) | 0;
   if ((i2 | 0) != 0) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 20472;
  ___cxa_throw(i2 | 0, 20520, 265);
 } while (0);
 __ZN16btDbvtBroadphaseC2EP22btOverlappingPairCache(i2, 0);
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK16btCollisionShape20serializeSingleShapeEP12btSerializer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 127](i1) | 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 31](i2, i5, 1) | 0;
 i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 56 >> 2] & 31](i1, HEAP32[i5 + 8 >> 2] | 0, i2) | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 31](i2, i5, i4, 1346455635, i1);
 STACKTOP = i3;
 return;
}
function __ZNK16btDbvtBroadphase7getAabbEP17btBroadphaseProxyR9btVector3S3_(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = STACKTOP;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 44 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN22btBvhTriangleMeshShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5624;
 if ((HEAP8[i1 + 61 >> 0] | 0) != 0) {
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  if ((i1 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN11btTransform11setIdentityEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 HEAPF32[i1 >> 2] = 1.0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = 1.0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = 1.0;
 HEAPF32[i1 + 44 >> 2] = 0.0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i5, i4, i3, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i5 | 0) == (HEAP32[i4 + 8 >> 2] | 0)) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i4, i3, i1);
  STACKTOP = i2;
  return;
 } else {
  i5 = HEAP32[i5 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 127](i5, i4, i3, i1);
  STACKTOP = i2;
  return;
 }
}
function _emscripten_bind_btHingeConstraint_setLimit_4(i1, d5, d6, d3, d4) {
 i1 = i1 | 0;
 d5 = +d5;
 d6 = +d6;
 d3 = +d3;
 d4 = +d4;
 var i2 = 0;
 i2 = STACKTOP;
 HEAPF32[i1 + 692 >> 2] = (d6 - d5) * .5;
 d5 = +_fmodf(+((d6 - d5) * .5 + d5), 6.2831854820251465);
 if (!(d5 < -3.1415927410125732)) {
  if (d5 > 3.1415927410125732) d5 = d5 + -6.2831854820251465;
 } else d5 = d5 + 6.2831854820251465;
 HEAPF32[i1 + 688 >> 2] = d5;
 HEAPF32[i1 + 696 >> 2] = d3;
 HEAPF32[i1 + 700 >> 2] = d4;
 HEAPF32[i1 + 704 >> 2] = 1.0;
 STACKTOP = i2;
 return;
}
function __ZNK26btTriangleIndexVertexArray14getPremadeAabbEP9btVector3S1_(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 60 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 64 >> 2];
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 68 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 72 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 76 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 80 >> 2];
 STACKTOP = i4;
 return;
}
function __ZNK20btAxisSweep3InternalItE17getBroadphaseAabbER9btVector3S2_(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 HEAP32[i3 + 0 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 36 >> 2];
 STACKTOP = i4;
 return;
}
function __ZNK10btBoxShape8isInsideERK9btVector3f(i8, i4, d2) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 d2 = +d2;
 var i1 = 0, d3 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d9 = 0.0, d10 = 0.0;
 i1 = STACKTOP;
 d9 = +HEAPF32[i8 + 28 >> 2];
 d3 = +HEAPF32[i8 + 32 >> 2];
 d7 = +HEAPF32[i8 + 36 >> 2];
 d10 = +HEAPF32[i4 >> 2];
 if ((((d10 <= d9 + d2 ? d10 >= -d9 - d2 : 0) ? (d6 = +HEAPF32[i4 + 4 >> 2], d6 <= d3 + d2) : 0) ? d6 >= -d3 - d2 : 0) ? (d5 = +HEAPF32[i4 + 8 >> 2], d5 <= d7 + d2) : 0) i4 = d5 >= -d7 - d2; else i4 = 0;
 STACKTOP = i1;
 return i4 | 0;
}
function __ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallback14processOverlapER16btBroadphasePair(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) != (i4 | 0) ? (HEAP32[i3 + 4 >> 2] | 0) != (i4 | 0) : 0) {
  STACKTOP = i2;
  return 0;
 }
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] & 127](i4, i3, HEAP32[i1 + 12 >> 2] | 0);
 STACKTOP = i2;
 return 0;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i3 & 1 | 0) == 0) i8 = i3 >> 8; else i8 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 >> 8) >> 2] | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 31](i1, i4, i5 + i8 | 0, (i3 & 2 | 0) != 0 ? i6 : 2, i7);
 STACKTOP = i2;
 return;
}
function __ZN25btConvexTriangleMeshShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 15736;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  if ((i1 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN23btPolyhedralConvexShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 15736;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  if ((i1 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i4, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i3 & 1 | 0) == 0) i7 = i3 >> 8; else i7 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 >> 8) >> 2] | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1, i4, i5 + i7 | 0, (i3 & 2 | 0) != 0 ? i6 : 2);
 STACKTOP = i2;
 return;
}
function _memset(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0;
 i2 = i1 + i3 | 0;
 if ((i3 | 0) >= 20) {
  i4 = i4 & 255;
  i6 = i1 & 3;
  i5 = i4 | i4 << 8 | i4 << 16 | i4 << 24;
  if (i6) {
   i6 = i1 + 4 - i6 | 0;
   while ((i1 | 0) < (i6 | 0)) {
    HEAP8[i1 >> 0] = i4;
    i1 = i1 + 1 | 0;
   }
  }
  while ((i1 | 0) < (i2 & ~3 | 0)) {
   HEAP32[i1 >> 2] = i5;
   i1 = i1 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i2 | 0)) {
  HEAP8[i1 >> 0] = i4;
  i1 = i1 + 1 | 0;
 }
 return i1 - i3 | 0;
}
function __ZN15btTriangleShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 15736;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  if ((i1 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btHingeConstraint_btHingeConstraint_7(i1, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i9 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i9 = _malloc(783) | 0;
 if ((i9 | 0) == 0) i9 = 0; else {
  HEAP32[(i9 + 19 & -16) + -4 >> 2] = i9;
  i9 = i9 + 19 & -16;
 }
 __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK9btVector3S4_S4_S4_b(i9, i1, i3, i4, i5, i6, i7, i8);
 STACKTOP = i2;
 return i9 | 0;
}
function __ZN16btDbvtBroadphaseD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 11432;
 if ((HEAP8[i1 + 192 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 136 >> 2] | 0, FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3), i3 = HEAP32[i1 + 136 >> 2] | 0, (i3 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = i1 + 124 | 0;
 do {
  i3 = i3 + -60 | 0;
  __ZN6btDbvtD2Ev(i3);
 } while ((i3 | 0) != (i1 + 4 | 0));
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN10btBoxShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 15736;
 i3 = HEAP32[i1 + 52 >> 2] | 0;
 if ((i3 | 0) != 0) {
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
  i3 = HEAP32[i1 + 52 >> 2] | 0;
  if ((i3 | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  if ((i1 | 0) == 0) {
   STACKTOP = i2;
   return;
  }
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZNK16btCollisionShape9serializeEPvP12btSerializer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 31](i5, i1) | 0;
 i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i3) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i6 | 0) != 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] & 127](i5, i3);
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 STACKTOP = i2;
 return 7080;
}
function __ZN16btEmptyAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_(i2, i1, i3, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 31](i3, 8) | 0;
 if ((i3 | 0) == 0) {
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 >> 2] = 12904;
 i4 = i3;
 STACKTOP = i2;
 return i4 | 0;
}
function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_pthread_once(20288, 3) | 0) != 0) _abort_message(20296, i2);
 i2 = _pthread_getspecific(HEAP32[5070] | 0) | 0;
 if (((i2 | 0) != 0 ? (i1 = HEAP32[i2 >> 2] | 0, (i1 | 0) != 0) : 0) ? (HEAP32[i1 + 52 >> 2] | 0) == 1129074247 ? (HEAP32[i1 + 48 >> 2] & -256 | 0) == 1126902528 : 0 : 0) __ZSt11__terminatePFvvE(HEAP32[i1 + 12 >> 2] | 0);
 i2 = HEAP32[5026] | 0;
 HEAP32[5026] = i2 + 0;
 __ZSt11__terminatePFvvE(i2);
}
function __ZN16btDbvtBroadphaseD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 11432;
 if ((HEAP8[i1 + 192 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 136 >> 2] | 0, FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3), i3 = HEAP32[i1 + 136 >> 2] | 0, (i3 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 i3 = i1 + 124 | 0;
 do {
  i3 = i3 + -60 | 0;
  __ZN6btDbvtD2Ev(i3);
 } while ((i3 | 0) != (i1 + 4 | 0));
 STACKTOP = i2;
 return;
}
function __ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNodeS2_(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 if ((i3 | 0) == (i4 | 0)) {
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 136 >> 2] | 0;
 FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 31](i5, HEAP32[i3 + 36 >> 2] | 0, HEAP32[i4 + 36 >> 2] | 0) | 0;
 i4 = (HEAP32[i1 + 4 >> 2] | 0) + 160 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btHingeConstraint_btHingeConstraint_6(i1, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i8 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i8 = _malloc(783) | 0;
 if ((i8 | 0) == 0) i8 = 0; else {
  HEAP32[(i8 + 19 & -16) + -4 >> 2] = i8;
  i8 = i8 + 19 & -16;
 }
 __ZN17btHingeConstraintC2ER11btRigidBodyS1_RK9btVector3S4_S4_S4_b(i8, i1, i3, i4, i5, i6, i7, 0);
 STACKTOP = i2;
 return i8 | 0;
}
function __ZN11btRigidBody19applyCentralImpulseERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0;
 d5 = +HEAPF32[i1 + 344 >> 2];
 d4 = +HEAPF32[i2 + 4 >> 2] * +HEAPF32[i1 + 352 >> 2] * d5;
 d3 = +HEAPF32[i2 + 8 >> 2] * +HEAPF32[i1 + 356 >> 2] * d5;
 HEAPF32[i1 + 312 >> 2] = +HEAPF32[i1 + 312 >> 2] + +HEAPF32[i2 >> 2] * +HEAPF32[i1 + 348 >> 2] * d5;
 HEAPF32[i1 + 316 >> 2] = +HEAPF32[i1 + 316 >> 2] + d4;
 HEAPF32[i1 + 320 >> 2] = +HEAPF32[i1 + 320 >> 2] + d3;
 return;
}
function __ZNK10btBoxShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0;
 d6 = +HEAPF32[i3 + 28 >> 2];
 d5 = +HEAPF32[i3 + 32 >> 2];
 d5 = +HEAPF32[i2 + 4 >> 2] >= 0.0 ? d5 : -d5;
 d4 = +HEAPF32[i3 + 36 >> 2];
 d4 = +HEAPF32[i2 + 8 >> 2] >= 0.0 ? d4 : -d4;
 HEAPF32[i1 >> 2] = +HEAPF32[i2 >> 2] >= 0.0 ? d6 : -d6;
 HEAPF32[i1 + 4 >> 2] = d5;
 HEAPF32[i1 + 8 >> 2] = d4;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZNK13btSphereShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i3 = STACKTOP;
 if ((i2 | 0) > 0) i4 = 0; else {
  STACKTOP = i3;
  return;
 }
 do {
  i6 = i1 + (i4 << 4) | 0;
  i4 = i4 + 1 | 0;
  i5 = (i4 | 0) == (i2 | 0);
  HEAP32[i6 + 0 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
 } while (!i5);
 STACKTOP = i3;
 return;
}
function __ZN23btPoint2PointConstraint8setParamEifi(i3, i4, d1, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 do if ((i5 | 0) == -1) if ((i4 | 0) == 2 | (i4 | 0) == 1) {
  HEAPF32[i3 + 336 >> 2] = d1;
  HEAP32[i3 + 332 >> 2] = HEAP32[i3 + 332 >> 2] | 1;
  break;
 } else if ((i4 | 0) == 4 | (i4 | 0) == 3) {
  HEAPF32[i3 + 340 >> 2] = d1;
  HEAP32[i3 + 332 >> 2] = HEAP32[i3 + 332 >> 2] | 2;
  break;
 } else break; while (0);
 STACKTOP = i2;
 return;
}
function __ZN28btHashedOverlappingPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i4 | 0) == 0 | (i1 | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i4 >> 2] >> 2] & 511](i4);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 60 >> 2] & 127](i1, HEAP32[i2 + 8 >> 2] | 0);
 HEAP32[i2 + 8 >> 2] = 0;
 STACKTOP = i3;
 return;
}
function __ZNK18btStaticPlaneShape7getAabbERK11btTransformR9btVector3S4_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAPF32[i2 >> 2] = -999999984306749400.0;
 HEAPF32[i2 + 4 >> 2] = -999999984306749400.0;
 HEAPF32[i2 + 8 >> 2] = -999999984306749400.0;
 HEAPF32[i2 + 12 >> 2] = 0.0;
 HEAPF32[i1 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 4 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 8 >> 2] = 999999984306749400.0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZNK17btConvexHullShape9getVertexEiR9btVector3(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var d4 = 0.0, d5 = 0.0, i6 = 0;
 i6 = HEAP32[i2 + 104 >> 2] | 0;
 d5 = +HEAPF32[i6 + (i3 << 4) + 4 >> 2] * +HEAPF32[i2 + 16 >> 2];
 d4 = +HEAPF32[i6 + (i3 << 4) + 8 >> 2] * +HEAPF32[i2 + 20 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i6 + (i3 << 4) >> 2] * +HEAPF32[i2 + 12 >> 2];
 HEAPF32[i1 + 4 >> 2] = d5;
 HEAPF32[i1 + 8 >> 2] = d4;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function _emscripten_bind_btAxisSweep3_btAxisSweep3_5(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i7 = _malloc(135) | 0;
 if ((i7 | 0) == 0) i7 = 0; else {
  HEAP32[(i7 + 19 & -16) + -4 >> 2] = i7;
  i7 = i7 + 19 & -16;
 }
 __ZN12btAxisSweep3C2ERK9btVector3S2_tP22btOverlappingPairCacheb(i7, i1, i3, i4 & 65535, i5, i6);
 STACKTOP = i2;
 return i7 | 0;
}
function _emscripten_bind_btDiscreteDynamicsWorld_getGravity_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP8[24] | 0) == 0 ? (___cxa_guard_acquire(24) | 0) != 0 : 0) ___cxa_guard_release(24);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 76 >> 2] & 127](i2, i1);
 HEAP32[2] = HEAP32[i2 + 0 >> 2];
 HEAP32[3] = HEAP32[i2 + 4 >> 2];
 HEAP32[4] = HEAP32[i2 + 8 >> 2];
 HEAP32[5] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i2;
 return 8;
}
function __ZN30btKinematicCharacterControllerD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 2632;
 i3 = HEAP32[i1 + 140 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 144 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 140 >> 2] = 0;
 }
 HEAP8[i1 + 144 >> 0] = 1;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = 0;
 HEAP32[i1 + 136 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcherD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 6808;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 24 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 20 >> 2] = 0;
 }
 HEAP8[i1 + 24 >> 0] = 1;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZNK17btHingeConstraint8getParamEii(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, d5 = 0.0;
 i1 = STACKTOP;
 do if ((i4 | 0) == 5 | (i4 | 0) == -1) if ((i3 | 0) == 2) {
  d5 = +HEAPF32[i2 + 760 >> 2];
  break;
 } else if ((i3 | 0) == 4) {
  d5 = +HEAPF32[i2 + 756 >> 2];
  break;
 } else if ((i3 | 0) == 3) {
  d5 = +HEAPF32[i2 + 752 >> 2];
  break;
 } else {
  d5 = 0.0;
  break;
 } else d5 = 0.0; while (0);
 STACKTOP = i1;
 return +d5;
}
function __ZN21btCollisionDispatcher14needsCollisionEPK17btCollisionObjectS2_(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i1 + 216 >> 2] | 0;
 if ((i4 | 0) == 2 | (i4 | 0) == 5 ? (i4 = HEAP32[i3 + 216 >> 2] | 0, (i4 | 0) == 2 | (i4 | 0) == 5) : 0) i1 = 0; else if ((HEAP32[i1 + 256 >> 2] | 0) == 0) i1 = 1; else i1 = FUNCTION_TABLE_iii[HEAP32[HEAP32[i1 >> 2] >> 2] & 31](i1, i3) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function __ZN26btTriangleIndexVertexArrayD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 19904;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 36 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 32 >> 2] = 0;
 }
 HEAP8[i1 + 36 >> 0] = 1;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN22btBvhTriangleMeshShapeD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 5624;
 if ((HEAP8[i2 + 61 >> 0] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZNK13btSphereShape21calculateLocalInertiaEfR9btVector3(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 d3 = d3 * .4000000059604645 * +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 15](i2);
 d3 = d3 * +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 15](i2);
 HEAPF32[i1 >> 2] = d3;
 HEAPF32[i1 + 4 >> 2] = d3;
 HEAPF32[i1 + 8 >> 2] = d3;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 STACKTOP = i4;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18432;
 HEAP32[i1 + 12 >> 2] = 18464;
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i3, HEAP32[i1 + 76 >> 2] | 0);
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3, HEAP32[i1 + 76 >> 2] | 0);
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld19setConstraintSolverEP18btConstraintSolver(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i1 + 273 >> 0] | 0) != 0 ? (i4 = HEAP32[i1 + 200 >> 2] | 0, (i4 | 0) != 0) : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i4 + -4 >> 2] | 0);
 }
 HEAP8[i1 + 273 >> 0] = 0;
 HEAP32[i1 + 200 >> 2] = i3;
 HEAP32[(HEAP32[i1 + 196 >> 2] | 0) + 8 >> 2] = i3;
 STACKTOP = i2;
 return;
}
function __ZNK23btPoint2PointConstraint8getParamEii(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, d5 = 0.0;
 i1 = STACKTOP;
 do if ((i4 | 0) == -1) if ((i3 | 0) == 2 | (i3 | 0) == 1) {
  d5 = +HEAPF32[i2 + 336 >> 2];
  break;
 } else if ((i3 | 0) == 4 | (i3 | 0) == 3) {
  d5 = +HEAPF32[i2 + 340 >> 2];
  break;
 } else {
  d5 = 3.4028234663852886e+38;
  break;
 } else d5 = 3.4028234663852886e+38; while (0);
 STACKTOP = i1;
 return +d5;
}
function __ZN21btCollisionDispatcherD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 6808;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 24 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 20 >> 2] = 0;
 }
 HEAP8[i1 + 24 >> 0] = 1;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN13btGhostObjectD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 13008;
 i3 = HEAP32[i1 + 276 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 280 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 276 >> 2] = 0;
 }
 HEAP8[i1 + 280 >> 0] = 1;
 HEAP32[i1 + 276 >> 2] = 0;
 HEAP32[i1 + 268 >> 2] = 0;
 HEAP32[i1 + 272 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[i1 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[i1 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[i1 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[i1 + 7 >> 0];
}
function _emscripten_bind_btAxisSweep3_btAxisSweep3_4(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(135) | 0;
 if ((i6 | 0) == 0) i6 = 0; else {
  HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
  i6 = i6 + 19 & -16;
 }
 __ZN12btAxisSweep3C2ERK9btVector3S2_tP22btOverlappingPairCacheb(i6, i1, i3, i4 & 65535, i5, 0);
 STACKTOP = i2;
 return i6 | 0;
}
function __ZN11btRigidBodyD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 3912;
 i3 = HEAP32[i1 + 496 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 500 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 496 >> 2] = 0;
 }
 HEAP8[i1 + 500 >> 0] = 1;
 HEAP32[i1 + 496 >> 2] = 0;
 HEAP32[i1 + 488 >> 2] = 0;
 HEAP32[i1 + 492 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZN25btConvexTriangleMeshShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = (HEAP32[i1 + 92 >> 2] | 0) + 4 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
 STACKTOP = i3;
 return;
}
function __ZN25btConvexTriangleMeshShapeD1Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 15736;
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN15btNullPairCacheD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5280;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) != 0) {
  if ((HEAP8[i1 + 20 >> 0] | 0) != 0) {
   HEAP32[5006] = (HEAP32[5006] | 0) + 1;
   _free(HEAP32[i3 + -4 >> 2] | 0);
  }
  HEAP32[i1 + 16 >> 2] = 0;
 }
 HEAP8[i1 + 20 >> 0] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVector4_btVector4_4(d1, d3, d4, d5) {
 d1 = +d1;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 var i2 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i6 = _malloc(35) | 0;
 if ((i6 | 0) == 0) i6 = 0; else {
  HEAP32[(i6 + 19 & -16) + -4 >> 2] = i6;
  i6 = i6 + 19 & -16;
 }
 HEAPF32[i6 >> 2] = d1;
 HEAPF32[i6 + 4 >> 2] = d3;
 HEAPF32[i6 + 8 >> 2] = d4;
 HEAPF32[i6 + 12 >> 2] = d5;
 STACKTOP = i2;
 return i6 | 0;
}
function __ZN23btPolyhedralConvexShapeD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 15736;
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function _emscripten_bind_btTransform_getRotation_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP8[48] | 0) == 0 ? (___cxa_guard_acquire(48) | 0) != 0 : 0) ___cxa_guard_release(48);
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i1, i2);
 HEAP32[8] = HEAP32[i2 + 0 >> 2];
 HEAP32[9] = HEAP32[i2 + 4 >> 2];
 HEAP32[10] = HEAP32[i2 + 8 >> 2];
 HEAP32[11] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i2;
 return 32;
}
function __ZN33btConvexConcaveCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18432;
 HEAP32[i1 + 12 >> 2] = 18464;
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i3, HEAP32[i1 + 76 >> 2] | 0);
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3, HEAP32[i1 + 76 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBody_applyCentralForce_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i2 + 4 >> 2] * +HEAPF32[i1 + 352 >> 2];
 d3 = +HEAPF32[i2 + 8 >> 2] * +HEAPF32[i1 + 356 >> 2];
 HEAPF32[i1 + 412 >> 2] = +HEAPF32[i1 + 412 >> 2] + +HEAPF32[i2 >> 2] * +HEAPF32[i1 + 348 >> 2];
 HEAPF32[i1 + 416 >> 2] = +HEAPF32[i1 + 416 >> 2] + d4;
 HEAPF32[i1 + 420 >> 2] = +HEAPF32[i1 + 420 >> 2] + d3;
 return;
}
function _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(219) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 __ZN11btTransform11getIdentityEv();
 __ZN11btTransform11getIdentityEv();
 __ZN20btDefaultMotionStateC1ERK11btTransformS2_(i2, 464, 464);
 STACKTOP = i1;
 return i2 | 0;
}
function __ZNK16btCollisionShape20getAngularMotionDiscEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1, i2 + 8 | 0, i2);
 d5 = +HEAPF32[i2 + 8 >> 2];
 d4 = +HEAPF32[i2 + 12 >> 2];
 d3 = +HEAPF32[i2 + 16 >> 2];
 d3 = +Math_sqrt(+(d5 * d5 + d4 * d4 + d3 * d3));
 STACKTOP = i2;
 return +(d3 + +HEAPF32[i2 >> 2]);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i1, i2, i3, i4, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i6 = STACKTOP;
 if ((HEAP32[i1 + 8 >> 2] | 0) != (i5 | 0)) {
  STACKTOP = i6;
  return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i1, i2, i3, i4);
 STACKTOP = i6;
 return;
}
function __ZN15btTriangleShapeD1Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 15736;
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function __ZN21btCollisionDispatcher25dispatchAllCollisionPairsEP22btOverlappingPairCacheRK16btDispatcherInfoP12btDispatcher(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i5 >> 2] = 6920;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 8 >> 2] = i3;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 127](i2, i5, i1);
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btRigidBody_applyTorque_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i2 + 4 >> 2] * +HEAPF32[i1 + 548 >> 2];
 d3 = +HEAPF32[i2 + 8 >> 2] * +HEAPF32[i1 + 552 >> 2];
 HEAPF32[i1 + 428 >> 2] = +HEAPF32[i1 + 428 >> 2] + +HEAPF32[i2 >> 2] * +HEAPF32[i1 + 544 >> 2];
 HEAPF32[i1 + 432 >> 2] = +HEAPF32[i1 + 432 >> 2] + d4;
 HEAPF32[i1 + 436 >> 2] = +HEAPF32[i1 + 436 >> 2] + d3;
 return;
}
function _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(95) | 0;
 if ((i5 | 0) == 0) i5 = 0; else {
  HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
  i5 = i5 + 19 & -16;
 }
 __ZN22btBvhTriangleMeshShapeC2EP23btStridingMeshInterfacebb(i5, i1, i3, i4);
 STACKTOP = i2;
 return i5 | 0;
}
function __ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallback14processOverlapER16btBroadphasePair(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) {
  i3 = 1;
  STACKTOP = i2;
  return i3 | 0;
 }
 i3 = (HEAP32[i1 + 4 >> 2] | 0) == (i3 | 0);
 STACKTOP = i2;
 return i3 | 0;
}
function _emscripten_bind_btAxisSweep3_btAxisSweep3_3(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(135) | 0;
 if ((i5 | 0) == 0) i5 = 0; else {
  HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
  i5 = i5 + 19 & -16;
 }
 __ZN12btAxisSweep3C2ERK9btVector3S2_tP22btOverlappingPairCacheb(i5, i1, i3, i4 & 65535, 0, 0);
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN10btBoxShapeD1Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = 15736;
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i3 >> 2] >> 2] & 511](i3);
 i2 = HEAP32[i2 + 52 >> 2] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i2 + -4 >> 2] | 0);
 STACKTOP = i1;
 return;
}
function _emscripten_bind_btVector3_btVector3_3(d1, d3, d4) {
 d1 = +d1;
 d3 = +d3;
 d4 = +d4;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(35) | 0;
 if ((i5 | 0) == 0) i5 = 0; else {
  HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
  i5 = i5 + 19 & -16;
 }
 HEAPF32[i5 >> 2] = d1;
 HEAPF32[i5 + 4 >> 2] = d3;
 HEAPF32[i5 + 8 >> 2] = d4;
 HEAPF32[i5 + 12 >> 2] = 0.0;
 STACKTOP = i2;
 return i5 | 0;
}
function __ZN29ConcreteContactResultCallback15addSingleResultER15btManifoldPointPK24btCollisionObjectWrapperiiS4_ii(i8, i7, i6, i5, i4, i3, i2, i1) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d9 = 0.0, i10 = 0;
 i10 = STACKTOP;
 d9 = +_emscripten_asm_const_double(960, i8 | 0, i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
 STACKTOP = i10;
 return +d9;
}
function __ZN23btDiscreteDynamicsWorld21removeCollisionObjectEP17btCollisionObject(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i3 | 0) == 0 ? 1 : (HEAP32[i3 + 236 >> 2] & 2 | 0) == 0) {
  __ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject(i1, i3);
  STACKTOP = i2;
  return;
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 92 >> 2] & 127](i1, i3);
  STACKTOP = i2;
  return;
 }
}
function __ZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 >> 2] = 15576;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i1;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 127](i2, i4, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btHingeConstraint_btHingeConstraint_3(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i5 = _malloc(783) | 0;
 if ((i5 | 0) == 0) i5 = 0; else {
  HEAP32[(i5 + 19 & -16) + -4 >> 2] = i5;
  i5 = i5 + 19 & -16;
 }
 __ZN17btHingeConstraintC2ER11btRigidBodyRK11btTransformb(i5, i1, i3, i4);
 STACKTOP = i2;
 return i5 | 0;
}
function _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(219) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 __ZN11btTransform11getIdentityEv();
 __ZN20btDefaultMotionStateC1ERK11btTransformS2_(i3, i1, 464);
 STACKTOP = i2;
 return i3 | 0;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfENK14LocalInfoAdder14needsCollisionE_1P17btBroadphaseProxy(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 12 >> 2] | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, i1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function __ZN24btConvexTriangleCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18464;
 i3 = HEAP32[i1 + 48 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i3, HEAP32[i1 + 64 >> 2] | 0);
 i3 = HEAP32[i1 + 48 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3, HEAP32[i1 + 64 >> 2] | 0);
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(95) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 __ZN22btBvhTriangleMeshShapeC2EP23btStridingMeshInterfacebb(i4, i1, i3, 1);
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN34btSphereTriangleCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 16904;
 if ((HEAP8[i1 + 8 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 16816;
 if ((HEAP8[i1 + 8 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btAxisSweep3_btAxisSweep3_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(135) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 __ZN12btAxisSweep3C2ERK9btVector3S2_tP22btOverlappingPairCacheb(i4, i1, i3, 16384, 0, 0);
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN31btConvexPlaneCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 19408;
 if ((HEAP8[i1 + 8 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(75) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 __ZN15btCylinderShapeC2ERK9btVector3(i3, i1);
 HEAP32[i3 >> 2] = 11136;
 HEAP32[i3 + 52 >> 2] = 2;
 STACKTOP = i2;
 return i3 | 0;
}
function _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(75) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 __ZN15btCylinderShapeC2ERK9btVector3(i3, i1);
 HEAP32[i3 >> 2] = 11032;
 HEAP32[i3 + 52 >> 2] = 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i5, i1, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 8 >> 2] | 0) != (i5 | 0)) {
  STACKTOP = i2;
  return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i3, i4);
 STACKTOP = i2;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 17896;
 if ((HEAP8[i1 + 8 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function __ZN24btConvexTriangleCallbackD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18464;
 i3 = HEAP32[i1 + 48 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i3, HEAP32[i1 + 64 >> 2] | 0);
 i3 = HEAP32[i1 + 48 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3, HEAP32[i1 + 64 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btHingeConstraint_btHingeConstraint_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(783) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 __ZN17btHingeConstraintC2ER11btRigidBodyRK11btTransformb(i4, i1, i3, 0);
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN23btConvexConvexAlgorithmD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18816;
 if ((HEAP8[i1 + 16 >> 0] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i3);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(219) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 __ZN20btDefaultMotionStateC1ERK11btTransformS2_(i4, i1, i3);
 STACKTOP = i2;
 return i4 | 0;
}
function __ZN17btConvexHullShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 12 >> 2];
 __ZN34btPolyhedralConvexAabbCachingShape15recalcLocalAabbEv(i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7(i8, i7, i6, i5, i4, i3, i2, i1) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d9 = 0.0, i10 = 0;
 i10 = STACKTOP;
 d9 = +FUNCTION_TABLE_diiiiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 1](i8, i7, i6, i5, i4, i3, i2, i1);
 STACKTOP = i10;
 return +d9;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEENK15LocalInfoAdder214needsCollisionEP17btBroadphaseProxy(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, i1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function __ZNK16btCylinderShapeZ9getRadiusEv(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0;
 i4 = STACKTOP;
 d3 = +HEAPF32[i1 + 28 >> 2];
 d2 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 STACKTOP = i4;
 return +(d3 + d2);
}
function __ZNK16btCylinderShapeX9getRadiusEv(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0;
 i4 = STACKTOP;
 d3 = +HEAPF32[i1 + 32 >> 2];
 +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 d2 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 STACKTOP = i4;
 return +(d3 + d2);
}
function __ZNK15btCylinderShape9getRadiusEv(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0;
 i4 = STACKTOP;
 d3 = +HEAPF32[i1 + 28 >> 2];
 d2 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 +FUNCTION_TABLE_di[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 15](i1);
 STACKTOP = i4;
 return +(d3 + d2);
}
function _emscripten_bind_btRigidBody_setAngularVelocity_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 328 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 332 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 336 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 340 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZNK15btTriangleShape9getVertexEiR9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = HEAP32[i3 + (i2 << 4) + 56 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + (i2 << 4) + 60 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + (i2 << 4) + 64 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + (i2 << 4) + 68 >> 2];
 STACKTOP = i4;
 return;
}
function __ZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 >> 2] = 15400;
 HEAP32[i4 + 4 >> 2] = i3;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 127](i2, i4, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btRigidBody_setLinearVelocity_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 312 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 316 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 320 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 324 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_ContactResultCallback_addSingleResult_7(i8, i7, i6, i5, i4, i3, i2, i1) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d9 = 0.0, i10 = 0;
 i10 = STACKTOP;
 d9 = +FUNCTION_TABLE_diiiiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 1](i8, i7, i6, i5, i4, i3, i2, i1);
 STACKTOP = i10;
 return +d9;
}
function _emscripten_bind_btRigidBody_setAngularFactor_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 544 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 548 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 552 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 556 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function ___cxa_can_catch(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 i3 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 31](i4, i3, i2) | 0;
 if (!i3) {
  STACKTOP = i2;
  return i3 & 1 | 0;
 }
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i2;
 return i3 & 1 | 0;
}
function __ZN21btConvexInternalShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0;
 d5 = +Math_abs(+(+HEAPF32[i2 >> 2]));
 d4 = +Math_abs(+(+HEAPF32[i2 + 4 >> 2]));
 d3 = +Math_abs(+(+HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 + 12 >> 2] = d5;
 HEAPF32[i1 + 16 >> 2] = d4;
 HEAPF32[i1 + 20 >> 2] = d3;
 HEAPF32[i1 + 24 >> 2] = 0.0;
 return;
}
function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = Math_imul(i2 & 65535, i1 & 65535) | 0;
 i5 = (i3 >>> 16) + (Math_imul(i2 & 65535, i1 >>> 16) | 0) | 0;
 i4 = Math_imul(i2 >>> 16, i1 & 65535) | 0;
 return (tempRet0 = (i5 >>> 16) + (Math_imul(i2 >>> 16, i1 >>> 16) | 0) + (((i5 & 65535) + i4 | 0) >>> 16) | 0, i5 + i4 << 16 | i3 & 65535 | 0) | 0;
}
function __ZN34btSphereTriangleCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 16904;
 if ((HEAP8[i1 + 8 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 16816;
 if ((HEAP8[i1 + 8 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 _free(i1);
 STACKTOP = i2;
 return;
}
function dynCall_viiiidddddidi(i13, i12, i11, i10, i9, d8, d1, d6, d5, d4, i3, d7, i2) {
 i13 = i13 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 d8 = +d8;
 d1 = +d1;
 d6 = +d6;
 d5 = +d5;
 d4 = +d4;
 i3 = i3 | 0;
 d7 = +d7;
 i2 = i2 | 0;
 FUNCTION_TABLE_viiiidddddidi[i13 & 0](i12 | 0, i11 | 0, i10 | 0, i9 | 0, +d8, +d1, +d6, +d5, +d4, i3 | 0, +d7, i2 | 0);
}
function _memmove(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if ((i3 | 0) < (i2 | 0) & (i2 | 0) < (i3 + i1 | 0)) {
  i4 = i2;
  i3 = i3 + i1 | 0;
  i2 = i2 + i1 | 0;
  while ((i1 | 0) > 0) {
   i2 = i2 - 1 | 0;
   i3 = i3 - 1 | 0;
   i1 = i1 - 1 | 0;
   HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
  }
  i2 = i4;
 } else _memcpy(i2, i3, i1) | 0;
 return i2 | 0;
}
function __ZN31btConvexPlaneCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 19408;
 if ((HEAP8[i1 + 8 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher13needsResponseEPK17btCollisionObjectS2_(i2, i4, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 i4 = HEAP32[i4 + 204 >> 2] | 0;
 if ((i4 & 4 | 0) == 0 ? (i3 = HEAP32[i1 + 204 >> 2] | 0, (i3 & 4 | 0) == 0) : 0) if ((i4 & 3 | 0) == 0) i1 = 1; else i1 = (i3 & 3 | 0) == 0; else i1 = 0;
 STACKTOP = i2;
 return i1 | 0;
}
function __ZN26btBoxBoxCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 17896;
 if ((HEAP8[i1 + 8 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 12 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN22btCompoundLeafCallback7ProcessEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 36 >> 2] | 0;
 __ZN22btCompoundLeafCallback17ProcessChildShapeEPK16btCollisionShapei(i1, HEAP32[(HEAP32[(HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 4 >> 2] | 0) + 24 >> 2] | 0) + (i2 * 80 | 0) + 64 >> 2] | 0, i2);
 STACKTOP = i3;
 return;
}
function __ZNK16btCollisionWorld21ContactResultCallback14needsCollisionEP17btBroadphaseProxy(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP16[i3 + 4 >> 1] & HEAP16[i1 + 6 >> 1]) << 16 >> 16 == 0) {
  i3 = 0;
  STACKTOP = i2;
  return i3 | 0;
 }
 i3 = (HEAP16[i1 + 4 >> 1] & HEAP16[i3 + 6 >> 1]) << 16 >> 16 != 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZNK16btCollisionWorld20ConvexResultCallback14needsCollisionEP17btBroadphaseProxy(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP16[i3 + 4 >> 1] & HEAP16[i1 + 10 >> 1]) << 16 >> 16 == 0) {
  i3 = 0;
  STACKTOP = i2;
  return i3 | 0;
 }
 i3 = (HEAP16[i1 + 8 >> 1] & HEAP16[i3 + 6 >> 1]) << 16 >> 16 != 0;
 STACKTOP = i2;
 return i3 | 0;
}
function __ZN23btConvexConvexAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 18816;
 if ((HEAP8[i1 + 16 >> 0] | 0) != 0 ? (i3 = HEAP32[i1 + 20 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 127](i4, i3);
 }
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZNK16btCollisionWorld17RayResultCallback14needsCollisionEP17btBroadphaseProxy(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP16[i3 + 4 >> 1] & HEAP16[i1 + 14 >> 1]) << 16 >> 16 == 0) {
  i3 = 0;
  STACKTOP = i2;
  return i3 | 0;
 }
 i3 = (HEAP16[i1 + 12 >> 1] & HEAP16[i3 + 6 >> 1]) << 16 >> 16 != 0;
 STACKTOP = i2;
 return i3 | 0;
}
function _emscripten_bind_btTriangleMesh_btTriangleMesh_2(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i4 = _malloc(191) | 0;
 if ((i4 | 0) == 0) i4 = 0; else {
  HEAP32[(i4 + 19 & -16) + -4 >> 2] = i4;
  i4 = i4 + 19 & -16;
 }
 __ZN14btTriangleMeshC2Ebb(i4, i1, i3);
 STACKTOP = i2;
 return i4 | 0;
}
function _llvm_cttz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[cttz_i8 + (i1 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 8 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 16 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[cttz_i8 + (i1 >>> 24) >> 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[ctlz_i8 + (i1 >>> 24) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 16 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 8 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[ctlz_i8 + (i1 & 255) >> 0] | 0) + 24 | 0;
}
function __ZN16btCollisionWorld9serializeEP12btSerializer(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 511](i1);
 __ZN16btCollisionWorld25serializeCollisionObjectsEP12btSerializer(i2, i1);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 511](i1);
 STACKTOP = i3;
 return;
}
function __ZNK15btTriangleShape7getEdgeEiR9btVector3S1_(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 108 >> 2] & 127](i3, i2, i4);
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 108 >> 2] & 127](i3, (i2 + 1 | 0) % 3 | 0, i1);
 STACKTOP = i5;
 return;
}
function dynCall_iiiiiiiiiii(i11, i10, i9, i8, i7, i1, i5, i4, i3, i6, i2) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iiiiiiiiiii[i11 & 3](i10 | 0, i9 | 0, i8 | 0, i7 | 0, i1 | 0, i5 | 0, i4 | 0, i3 | 0, i6 | 0, i2 | 0) | 0;
}
function __ZN23btPoint2PointConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP8[i3 + 344 >> 0] | 0) == 0) {
  HEAP32[i1 >> 2] = 3;
  HEAP32[i1 + 4 >> 2] = 3;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
}
function dynCall_diiiiiiiiii(i11, i10, i9, i8, i7, i1, i5, i4, i3, i6, i2) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 return +FUNCTION_TABLE_diiiiiiiiii[i11 & 3](i10 | 0, i9 | 0, i8 | 0, i7 | 0, i1 | 0, i5 | 0, i4 | 0, i3 | 0, i6 | 0, i2 | 0);
}
function _emscripten_bind_btCylinderShape_btCylinderShape_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(75) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 __ZN15btCylinderShapeC2ERK9btVector3(i3, i1);
 STACKTOP = i2;
 return i3 | 0;
}
function _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5(i6, i5, i4, i3, i2, d1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 var i7 = 0;
 i7 = STACKTOP;
 __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i6, i5, i4, i3, i2, d1);
 STACKTOP = i7;
 return;
}
function _emscripten_bind_btSliderConstraint_setUpperAngLimit_1(i1, d3) {
 i1 = i1 | 0;
 d3 = +d3;
 var i2 = 0;
 i2 = STACKTOP;
 d3 = +_fmodf(+d3, 6.2831854820251465);
 if (!(d3 < -3.1415927410125732)) {
  if (d3 > 3.1415927410125732) d3 = d3 + -6.2831854820251465;
 } else d3 = d3 + 6.2831854820251465;
 HEAPF32[i1 + 196 >> 2] = d3;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btSliderConstraint_setLowerAngLimit_1(i1, d3) {
 i1 = i1 | 0;
 d3 = +d3;
 var i2 = 0;
 i2 = STACKTOP;
 d3 = +_fmodf(+d3, 6.2831854820251465);
 if (!(d3 < -3.1415927410125732)) {
  if (d3 > 3.1415927410125732) d3 = d3 + -6.2831854820251465;
 } else d3 = d3 + 6.2831854820251465;
 HEAPF32[i1 + 192 >> 2] = d3;
 STACKTOP = i2;
 return;
}
function dynCall_viiiiddddiid(i12, i11, i10, i9, i8, d1, d6, d5, d4, i3, i7, d2) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 d1 = +d1;
 d6 = +d6;
 d5 = +d5;
 d4 = +d4;
 i3 = i3 | 0;
 i7 = i7 | 0;
 d2 = +d2;
 FUNCTION_TABLE_viiiiddddiid[i12 & 0](i11 | 0, i10 | 0, i9 | 0, i8 | 0, +d1, +d6, +d5, +d4, i3 | 0, i7 | 0, +d2);
}
function _emscripten_bind_btPairCachingGhostObject_activate_1(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (!i3 ? (HEAP32[i1 + 204 >> 2] & 3 | 0) != 0 : 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function dynCall_viiiiiiiiii(i11, i10, i9, i8, i7, i1, i5, i4, i3, i6, i2) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_viiiiiiiiii[i11 & 3](i10 | 0, i9 | 0, i8 | 0, i7 | 0, i1 | 0, i5 | 0, i4 | 0, i3 | 0, i6 | 0, i2 | 0);
}
function _emscripten_bind_btCollisionWorld_convexSweepTest_5(i6, i5, i4, i3, i2, d1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 var i7 = 0;
 i7 = STACKTOP;
 __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i6, i5, i4, i3, i2, d1);
 STACKTOP = i7;
 return;
}
function _emscripten_bind_btTriangleMesh_btTriangleMesh_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(191) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 __ZN14btTriangleMeshC2Ebb(i3, i1, 1);
 STACKTOP = i2;
 return i3 | 0;
}
function _emscripten_bind_btDynamicsWorld_convexSweepTest_5(i6, i5, i4, i3, i2, d1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 var i7 = 0;
 i7 = STACKTOP;
 __ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEf(i6, i5, i4, i3, i2, d1);
 STACKTOP = i7;
 return;
}
function _emscripten_bind_btCompoundShape_btCompoundShape_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i3 = _malloc(111) | 0;
 if ((i3 | 0) == 0) i3 = 0; else {
  HEAP32[(i3 + 19 & -16) + -4 >> 2] = i3;
  i3 = i3 + 19 & -16;
 }
 __ZN15btCompoundShapeC2Eb(i3, i1);
 STACKTOP = i2;
 return i3 | 0;
}
function _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCollisionObject_activate_1(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (!i3 ? (HEAP32[i1 + 204 >> 2] & 3 | 0) != 0 : 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 68 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btGhostObject_activate_1(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (!i3 ? (HEAP32[i1 + 204 >> 2] & 3 | 0) != 0 : 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN30btKinematicCharacterController12updateActionEP16btCollisionWorldf(i3, i2, d1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 127](i3, i2);
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 7](i3, i2, d1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btRigidBody_activate_1(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (!i3 ? (HEAP32[i1 + 204 >> 2] & 3 | 0) != 0 : 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btPoint2PointConstraint_setPivotB_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 316 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 320 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 324 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 328 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btPoint2PointConstraint_setPivotA_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 300 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 304 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 308 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 312 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 64 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 68 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN18btStaticPlaneShape15setLocalScalingERK9btVector3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 68 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 72 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 76 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 80 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btTriangleMesh_btTriangleMesh_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(191) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 __ZN14btTriangleMeshC2Ebb(i2, 1, 1);
 STACKTOP = i1;
 return i2 | 0;
}
function _emscripten_bind_btManifoldPoint_set_m_localPointB_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCompoundShape_btCompoundShape_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(111) | 0;
 if ((i2 | 0) == 0) i2 = 0; else {
  HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
  i2 = i2 + 19 & -16;
 }
 __ZN15btCompoundShapeC2Eb(i2, 1);
 STACKTOP = i1;
 return i2 | 0;
}
function dynCall_iiiiiiiiii(i10, i9, i8, i7, i6, i5, i4, i3, i2, i1) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[i10 & 3](i9 | 0, i8 | 0, i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0) | 0;
}
function _emscripten_bind_btManifoldPoint_set_m_localPointA_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function __ZNK23btDiscreteDynamicsWorld10getGravityEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = HEAP32[i2 + 248 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 252 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 256 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 260 >> 2];
 STACKTOP = i3;
 return;
}
function dynCall_diiiiiiiii(i10, i9, i8, i7, i6, i5, i4, i3, i2, i1) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diiiiiiiii[i10 & 3](i9 | 0, i8 | 0, i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btPairCachingGhostObject_activate_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 204 >> 2] & 3 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZNK15btCylinderShape38getAnisotropicRollingFrictionDirectionEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i2 + 0 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAPF32[i2 + (HEAP32[i1 + 52 >> 2] << 2) >> 2] = 1.0;
 STACKTOP = i3;
 return;
}
function __ZN12CProfileNode5ResetEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = STACKTOP;
 do {
  HEAP32[i2 + 4 >> 2] = 0;
  HEAPF32[i2 + 8 >> 2] = 0.0;
  i3 = HEAP32[i2 + 24 >> 2] | 0;
  if ((i3 | 0) != 0) __ZN12CProfileNode5ResetEv(i3);
  i2 = HEAP32[i2 + 28 >> 2] | 0;
 } while ((i2 | 0) != 0);
 STACKTOP = i1;
 return;
}
function __ZNK14btCapsuleShape38getAnisotropicRollingFrictionDirectionEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i2 + 0 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAPF32[i2 + (HEAP32[i1 + 52 >> 2] << 2) >> 2] = 1.0;
 STACKTOP = i3;
 return;
}
function __ZN15btNullPairCacheD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[i1 >> 2] = 5280;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) != 0 ? (HEAP8[i1 + 20 >> 0] | 0) != 0 : 0) {
  HEAP32[5006] = (HEAP32[5006] | 0) + 1;
  _free(HEAP32[i3 + -4 >> 2] | 0);
 }
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTransform_setOrigin_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}
function dynCall_viiiiiiiii(i10, i9, i8, i7, i6, i5, i4, i3, i2, i1) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiiiiiiii[i10 & 1](i9 | 0, i8 | 0, i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function __ZN21btCollisionDispatcher13clearManifoldEP20btPersistentManifold(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 748 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i4 = 0;
  do i4 = i4 + 1 | 0; while ((i4 | 0) < (i3 | 0));
 }
 HEAP32[i1 + 748 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConeTwistConstraint_setLimit_2(i3, i4, d1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 d1 = +d1;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i4 | 0) == 3) HEAPF32[i3 + 452 >> 2] = d1; else if ((i4 | 0) == 4) HEAPF32[i3 + 448 >> 2] = d1; else if ((i4 | 0) == 5) HEAPF32[i3 + 444 >> 2] = d1;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionObject_activate_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 204 >> 2] & 3 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZN30btKinematicCharacterController4jumpEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAPF32[i1 + 16 >> 2] = +HEAPF32[i1 + 28 >> 2];
 HEAP8[i1 + 169 >> 0] = 1;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btGhostObject_activate_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 204 >> 2] & 3 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVector4_btVector4_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(35) | 0;
 if ((i2 | 0) == 0) {
  i2 = 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
 i2 = i2 + 19 & -16;
 STACKTOP = i1;
 return i2 | 0;
}
function _emscripten_bind_btVector3_btVector3_0() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[5004] = (HEAP32[5004] | 0) + 1;
 i2 = _malloc(35) | 0;
 if ((i2 | 0) == 0) {
  i2 = 0;
  STACKTOP = i1;
  return i2 | 0;
 }
 HEAP32[(i2 + 19 & -16) + -4 >> 2] = i2;
 i2 = i2 + 19 & -16;
 STACKTOP = i1;
 return i2 | 0;
}
function _emscripten_bind_btRigidBody_activate_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 204 >> 2] & 3 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if (!(((HEAP32[i1 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2)) HEAP32[i1 + 216 >> 2] = 1;
 HEAPF32[i1 + 220 >> 2] = 0.0;
 STACKTOP = i2;
 return;
}
function __ZThn4_N17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 + -4 >> 2] | 0) + 8 >> 2] & 127](i4 + -4 | 0, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN35btSequentialImpulseConstraintSolverD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN35btSequentialImpulseConstraintSolverD2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 __ZN16btCollisionWorld15contactPairTestEP17btCollisionObjectS1_RNS_21ContactResultCallbackE(i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btCollisionWorld_contactPairTest_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 __ZN16btCollisionWorld15contactPairTestEP17btCollisionObjectS1_RNS_21ContactResultCallbackE(i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function dynCall_diiiiiiii(i9, i8, i7, i6, i5, i4, i3, i2, i1) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diiiiiiii[i9 & 1](i8 | 0, i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btDynamicsWorld_contactPairTest_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 __ZN16btCollisionWorld15contactPairTestEP17btCollisionObjectS1_RNS_21ContactResultCallbackE(i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btPoint2PointConstraint_set_m_setting_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 348 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i1 + 352 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 356 >> 2] = HEAP32[i2 + 8 >> 2];
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld18addCollisionObjectEP17btCollisionObjectss(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 __ZN16btCollisionWorld18addCollisionObjectEP17btCollisionObjectss(i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN23btCollisionPairCallback14processOverlapER16btBroadphasePair(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[i4 + 60 >> 2] & 127](i2, i4, HEAP32[i1 + 4 >> 2] | 0);
 STACKTOP = i3;
 return 0;
}
function _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 i3 = FUNCTION_TABLE_iidid[HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] & 1](i3, d2, i1, .01666666753590107) | 0;
 STACKTOP = i4;
 return i3 | 0;
}
function __ZNK21btConvexInternalShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 80 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3(i4, d3, i2, d1) {
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 d1 = +d1;
 var i5 = 0;
 i5 = STACKTOP;
 i4 = FUNCTION_TABLE_iidid[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 1](i4, d3, i2, d1) | 0;
 STACKTOP = i5;
 return i4 | 0;
}
function _emscripten_bind_btRaycastVehicle_updateWheelTransform_2(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZN16btRaycastVehicle20updateWheelTransformEib(HEAP32[i3 + 116 >> 2] | 0, HEAP32[i3 + 144 >> 2] | 0, i2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN24btPairCachingGhostObjectD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN24btPairCachingGhostObjectD2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function ___uremdi3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 ___udivmoddi4(i4, i3, i2, i1, i5 | 0) | 0;
 STACKTOP = i5;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}
function __ZNK15btTriangleShape7getAabbERK11btTransformR9btVector3S4_(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 80 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZNK13btSphereShape37localGetSupportingVertexWithoutMarginERK9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorldD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN23btDiscreteDynamicsWorldD2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN20btAxisSweep3InternalItED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBody_setDamping_2(i1, d3, d2) {
 i1 = i1 | 0;
 d3 = +d3;
 d2 = +d2;
 if (d3 < 0.0) d3 = 0.0; else d3 = d3 > 1.0 ? 1.0 : d3;
 HEAPF32[i1 + 444 >> 2] = d3;
 if (d2 < 0.0) d2 = 0.0; else d2 = d2 > 1.0 ? 1.0 : d2;
 HEAPF32[i1 + 448 >> 2] = d2;
 return;
}
function __ZN20BroadphaseAabbTester7ProcessEPK10btDbvtNode(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, HEAP32[i1 + 36 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}
function __ZN19BroadphaseRayTester7ProcessEPK10btDbvtNode(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 31](i2, HEAP32[i1 + 36 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_setActivationState_1(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (((HEAP32[i3 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 + 216 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0E_0v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZNK19btTriangleMeshShape37localGetSupportingVertexWithoutMarginERK9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 68 >> 2] & 127](i3, i2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCollisionWorld_addCollisionObject_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDynamicsWorld_addCollisionObject_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResult20setShapeIdentifiersBEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResult20setShapeIdentifiersAEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1, i2, HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + 48 >> 2] | 0);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCollisionObject_setActivationState_1(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (((HEAP32[i3 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 + 216 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function __ZN18btConvexPolyhedronD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN18btConvexPolyhedronD2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2(i3, i2, d1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 7](i3, i2, d1);
 STACKTOP = i4;
 return;
}
function __ZNK15btTriangleShape8getPlaneER9btVector3S1_i(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 124 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZN12btAxisSweep3D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = FUNCTION_TABLE_iidid[HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] & 1](i2, d1, 1, .01666666753590107) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function __ZNK19btTriangleMeshShape21calculateLocalInertiaEfR9btVector3(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function __ZNK18btStaticPlaneShape21calculateLocalInertiaEfR9btVector3(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btGhostObject_setActivationState_1(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (((HEAP32[i3 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 + 216 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDefaultCollisionConfiguration___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free(i1);
 if ((_pthread_setspecific(HEAP32[5070] | 0, 0) | 0) == 0) {
  STACKTOP = i2;
  return;
 } else _abort_message(20408, i2);
}
function _emscripten_bind_btRigidBody_setActivationState_1(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (((HEAP32[i3 + 216 >> 2] | 0) + -4 | 0) >>> 0 < 2) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 + 216 >> 2] = i1;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btKinematicCharacterController___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3, i2, i1, -3);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCollisionWorld_rayTest_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function __ZNK15btTriangleShape21calculateLocalInertiaEfR9btVector3(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 i2 = STACKTOP;
 HEAP32[i1 + 0 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDynamicsWorld_rayTest_3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] & 127](i4, i3, i2, i1);
 STACKTOP = i5;
 return;
}
function _emscripten_bind_ConcreteContactResultCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function __ZN14btTriangleMeshD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btTriangleMeshD2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN14btQuantizedBvhD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btQuantizedBvhD2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN14btOptimizedBvhD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btQuantizedBvhD2Ev(i1);
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function __ZNK30btKinematicCharacterController8onGroundEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if (!(+HEAPF32[i1 + 16 >> 2] == 0.0)) {
  i1 = 0;
  STACKTOP = i2;
  return i1 | 0;
 }
 i1 = +HEAPF32[i1 + 20 >> 2] == 0.0;
 STACKTOP = i2;
 return i1 | 0;
}
function _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function dynCall_viiiiiii(i8, i7, i6, i5, i4, i3, i2, i1) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiiiiii[i8 & 1](i7 | 0, i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btOverlappingPairCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDefaultVehicleRaycaster___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConvexTriangleMeshShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN21btConeTwistConstraint31setMotorTargetInConstraintSpaceERK12btQuaternion(i2, i1);
 STACKTOP = i3;
 return;
}
function ___muldi3(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = ___muldsi3(i1, i3) | 0;
 i6 = tempRet0;
 return (tempRet0 = (Math_imul(i4, i3) | 0) + (Math_imul(i2, i1) | 0) + i6 | i6 & 0, i5 | 0 | 0) | 0;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN14LocalInfoAdderD0E_1v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPersistentManifold___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionConfiguration___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_ClosestRayResultCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function __ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btStridingMeshInterface___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPoint2PointConstraint___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btGeneric6DofConstraint___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionWorld_addCollisionObject_2(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3, i2, i1, -1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 31](i2, i1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult15addContactPointERK9btVector3SB_f(i1, i2, i3, d4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 return;
}
function _emscripten_bind_btOverlappingPairCache___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDynamicsWorld_addCollisionObject_2(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3, i2, i1, -1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btBvhTriangleMeshShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function _emscripten_bind_btConeTwistConstraint___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionDispatcher___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btBroadphaseInterface___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_ContactResultCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + 56 >> 2] & 127](i3, i2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btDefaultMotionState___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_ConvexResultCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTriangleMeshShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btKinematicCharacterController_playerStep_2(i3, i2, d1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_viid[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 7](i3, i2, d1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btGhostPairCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVehicleRaycaster___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btStaticPlaneShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btSliderConstraint___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConvexHullShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btConstraintSolver___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTypedConstraint___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btHingeConstraint___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btConvexHullShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCollisionObject___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btActionInterface___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_RayResultCallback___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function __ZNK11btConeShape37localGetSupportingVertexWithoutMarginERK9btVector3(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZNK11btConeShape16coneLocalSupportERK9btVector3(i3, i2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btRaycastVehicle___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDbvtBroadphase___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCylinderShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCylinderShapeZ___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCylinderShapeX___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCompoundShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCollisionWorld___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = HEAP32[_stderr >> 2] | 0;
 _vfprintf(i2 | 0, i1 | 0, i3 | 0) | 0;
 _fputc(10, i2 | 0) | 0;
 _abort();
}
function _emscripten_bind_btDynamicsWorld___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCylinderShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConcaveShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCompoundShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCapsuleShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btCapsuleShapeZ___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCapsuleShapeX___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0E_0v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTriangleMesh___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btSphereShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btDispatcher_getManifoldByIndexInternal_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 31](i2, i1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function _emscripten_bind_btConvexShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btConcaveShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionWorld_getPairCache_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function _emscripten_bind_btCapsuleShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVector4___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVector3___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btSphereShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btMotionState___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btGhostObject___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDynamicsWorld_getPairCache_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function _emscripten_bind_btConvexShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConeShapeZ_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btConeShapeX_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDispatcher___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConeShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btConeShapeZ___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConeShapeX___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btAxisSweep3___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBody___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btQuaternion_setValue_4(i1, d5, d4, d3, d2) {
 i1 = i1 | 0;
 d5 = +d5;
 d4 = +d4;
 d3 = +d3;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d5;
 HEAPF32[i1 + 4 >> 2] = d4;
 HEAPF32[i1 + 8 >> 2] = d3;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2, i1, 2, -3);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConeShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btBoxShape_calculateLocalInertia_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] & 15](i3, d2, i1);
 STACKTOP = i4;
 return;
}
function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
}
function _emscripten_bind_btBoxShape___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVector4_length_0(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i1 >> 2];
 d3 = +HEAPF32[i1 + 4 >> 2];
 d2 = +HEAPF32[i1 + 8 >> 2];
 d2 = +Math_sqrt(+(d4 * d4 + d3 * d3 + d2 * d2));
 return +d2;
}
function _emscripten_bind_btVector3_length_0(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i1 >> 2];
 d3 = +HEAPF32[i1 + 4 >> 2];
 d2 = +HEAPF32[i1 + 8 >> 2];
 d2 = +Math_sqrt(+(d4 * d4 + d3 * d3 + d2 * d2));
 return +d2;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResultD0E_0v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResult20setShapeIdentifiersBE_0ii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResult20setShapeIdentifiersAE_0ii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function dynCall_iiiiiii(i7, i6, i5, i4, i3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 3](i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0) | 0;
}
function _emscripten_bind_btVector4_setValue_4(i1, d5, d4, d3, d2) {
 i1 = i1 | 0;
 d5 = +d5;
 d4 = +d4;
 d3 = +d3;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d5;
 HEAPF32[i1 + 4 >> 2] = d4;
 HEAPF32[i1 + 8 >> 2] = d3;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function _bitshift64Ashr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i1 - 32 | 0;
}
function __ZN23btDiscreteDynamicsWorld15removeCharacterEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 68 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btVector4_op_mul_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = +HEAPF32[i1 >> 2] * d2;
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * d2;
 HEAPF32[i1 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * d2;
 return i1 | 0;
}
function _emscripten_bind_btVector3_op_mul_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = +HEAPF32[i1 >> 2] * d2;
 HEAPF32[i1 + 4 >> 2] = +HEAPF32[i1 + 4 >> 2] * d2;
 HEAPF32[i1 + 8 >> 2] = +HEAPF32[i1 + 8 >> 2] * d2;
 return i1 | 0;
}
function _emscripten_bind_btKinematicCharacterController_setWalkDirection_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZNK14btOptimizedBvh16serializeInPlaceEPvjb(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 __ZNK14btQuantizedBvh9serializeEPvjb(i4, i3, i2, i1) | 0;
 STACKTOP = i5;
 return 1;
}
function __ZN36btCompoundCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 0.0;
}
function __ZN23btPoint2PointConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN23btGeneric6DofConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld13removeVehicleEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 68 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld12addCharacterEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCollisionWorld_addCollisionObject_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2, i1, 1, -1);
 STACKTOP = i3;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __ZN21btConeTwistConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDynamicsWorld_addCollisionObject_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2, i1, 1, -1);
 STACKTOP = i3;
 return;
}
function __ZN23btDiscreteDynamicsWorld10addVehicleEP17btActionInterface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN20btDefaultMotionStateD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __ZN19btTriangleMeshShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 56 >> 2] & 127](i2, i1, 0);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZNK16btCollisionShape27getContactBreakingThresholdEf(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 var i3 = 0;
 i3 = STACKTOP;
 d1 = +FUNCTION_TABLE_di[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 15](i2) * d1;
 STACKTOP = i3;
 return +d1;
}
function __ZN31btConvexPlaneCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __ZN18btStaticPlaneShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN18btSliderConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef(i2, i1, d3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 d3 = +d3;
 var i4 = 0;
 i4 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i4;
 return;
}
function __ZN17btTypedConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN17btHingeConstraintD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function dynCall_diiidii(i7, i6, i5, i4, d3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diiidii[i7 & 3](i6 | 0, i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 92 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersBEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersAEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN15LocalInfoAdder2D0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btRaycastVehicle12updateActionEP16btCollisionWorldf(i2, i3, d1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 d1 = +d1;
 i3 = STACKTOP;
 FUNCTION_TABLE_vid[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 31](i2, d1);
 STACKTOP = i3;
 return;
}
function __ZN16btCylinderShapeZD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN16btCylinderShapeXD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btKinematicCharacterController_preStep_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btDefaultMotionState_setWorldTransform_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZNK16btCollisionShape38getAnisotropicRollingFrictionDirectionEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i1 >> 2] = 1.0;
 HEAPF32[i1 + 4 >> 2] = 1.0;
 HEAPF32[i1 + 8 >> 2] = 1.0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZN17btCollisionObject17setCollisionShapeEP16btCollisionShape(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAP32[i1 + 192 >> 2] = i2;
 HEAP32[i1 + 200 >> 2] = i2;
 return;
}
function __ZN15btCylinderShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN15btCapsuleShapeZD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN15btCapsuleShapeXD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function dynCall_viiiiii(i7, i6, i5, i4, i3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 7](i6 | 0, i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function b31(i2, i7, i3, i4, d5, d6, d1, d8, d9, i10, d11, i12) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 d6 = +d6;
 d1 = +d1;
 d8 = +d8;
 d9 = +d9;
 i10 = i10 | 0;
 d11 = +d11;
 i12 = i12 | 0;
 abort(31);
}
function _emscripten_bind_btDefaultMotionState_getWorldTransform_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN14btCapsuleShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 84 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function __ZN13btSphereShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTriangleMeshShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btKinematicCharacterController_warp_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCollisionObject_setCollisionShape_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN12btConeShapeZD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN12btConeShapeXD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVector3_setValue_3(i1, d4, d3, d2) {
 i1 = i1 | 0;
 d4 = +d4;
 d3 = +d3;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d4;
 HEAPF32[i1 + 4 >> 2] = d3;
 HEAPF32[i1 + 8 >> 2] = d2;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function _emscripten_bind_btStaticPlaneShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 72 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _bitshift64Shl(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i3 << i1 | (i2 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i2 << i1;
 }
 tempRet0 = i2 << i1 - 32;
 return 0;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN9RayTesterD0E_1v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZNK12btConeShapeZ38getAnisotropicRollingFrictionDirectionEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i1 >> 2] = 0.0;
 HEAPF32[i1 + 4 >> 2] = 0.0;
 HEAPF32[i1 + 8 >> 2] = 1.0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZNK12btConeShapeX38getAnisotropicRollingFrictionDirectionEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i1 >> 2] = 1.0;
 HEAPF32[i1 + 4 >> 2] = 0.0;
 HEAPF32[i1 + 8 >> 2] = 0.0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function __ZN11btConeShapeD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[5006] = (HEAP32[5006] | 0) + 1;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_pthread_key_create(20280, 273) | 0) == 0) {
  STACKTOP = i1;
  return;
 } else _abort_message(20352, i1);
}
function _emscripten_bind_btDiscreteDynamicsWorld_addAction_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConvexHullShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZNK11btConeShape38getAnisotropicRollingFrictionDirectionEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAPF32[i1 >> 2] = 0.0;
 HEAPF32[i1 + 4 >> 2] = 1.0;
 HEAPF32[i1 + 8 >> 2] = 0.0;
 HEAPF32[i1 + 12 >> 2] = 0.0;
 return;
}
function _emscripten_bind_btKinematicCharacterController_onGround_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function _emscripten_bind_btCylinderShapeZ_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCylinderShapeX_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCollisionShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function dynCall_viiidii(i7, i6, i5, i4, d3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiidii[i7 & 0](i6 | 0, i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function _emscripten_bind_btMotionState_setWorldTransform_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btKinematicCharacterController_canJump_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function _emscripten_bind_btGhostObject_setCollisionShape_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCylinderShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCompoundShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCapsuleShapeX_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btRigidBody_setCenterOfMassTransform_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN11btRigidBody24setCenterOfMassTransformERK11btTransform(i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btMotionState_getWorldTransform_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConcaveShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btCollisionDispatcher_getNumManifolds_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function _emscripten_bind_btCapsuleShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}
function __ZN16btRaycastVehicle19setCoordinateSystemEiii(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 120 >> 2] = i4;
 HEAP32[i1 + 124 >> 2] = i3;
 HEAP32[i1 + 128 >> 2] = i2;
 return;
}
function _emscripten_bind_btSphereShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btRigidBody_setCollisionShape_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConvexShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConvexHullShape_addPoint_2(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZN17btConvexHullShape8addPointERK9btVector3b(i3, i2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btRigidBody_applyImpulse_2(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZN11btRigidBody12applyImpulseERK9btVector3S2_(i3, i2, i1);
 STACKTOP = i4;
 return;
}
function _emscripten_bind_btConeShapeZ_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConeShapeX_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btConeShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function b27(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 abort(27);
 return 0.0;
}
function _emscripten_bind_btBoxShape_setLocalScaling_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2E_0v(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btEmptyAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 1.0;
}
function dynCall_viddiii(i7, i6, d5, d4, i3, i2, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 d5 = +d5;
 d4 = +d4;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viddiii[i7 & 0](i6 | 0, +d5, +d4, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btDynamicsWorld_addAction_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 64 >> 2] & 127](i2, i1);
 STACKTOP = i3;
 return;
}
function __ZN16btEmptyAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function _emscripten_bind_btRigidBody_setMassProps_2(i3, d2, i1) {
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 __ZN11btRigidBody12setMassPropsEfRK9btVector3(i3, d2, i1);
 STACKTOP = i4;
 return;
}
function runPostSets() {}
function _i64Subtract(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 - i3 - (i1 >>> 0 > i2 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i2 - i1 >>> 0 | 0) | 0;
}
function b5(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 abort(5);
 return 0;
}
function _emscripten_bind_btDispatcher_getNumManifolds_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function __ZNK30btKinematicCharacterController7canJumpEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 127](i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}
function __ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResultD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b13(i2, i6, i3, i4, d5, d1, d7, d8, i9, i10, d11) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 d1 = +d1;
 d7 = +d7;
 d8 = +d8;
 i9 = i9 | 0;
 i10 = i10 | 0;
 d11 = +d11;
 abort(13);
}
function __ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function dynCall_diiiii(i6, i5, i4, i3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diiiii[i6 & 15](i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btRigidBody_applyCentralImpulse_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN11btRigidBody19applyCentralImpulseERK9btVector3(i2, i1);
 STACKTOP = i3;
 return;
}
function __ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function b24(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 abort(24);
}
function _emscripten_bind_btKinematicCharacterController_jump_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 511](i1);
 STACKTOP = i2;
 return;
}
function dynCall_diidii(i6, i5, i4, d3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diidii[i6 & 3](i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function dynCall_viiiii(i6, i5, i4, i3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiiii[i6 & 31](i5 | 0, i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btConvexHullShape_addPoint_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN17btConvexHullShape8addPointERK9btVector3b(i2, i1, 1);
 STACKTOP = i3;
 return;
}
function __ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btKinematicCharacterController_setUpAxis_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((i2 | 0) < 0) i2 = 0; else i2 = (i2 | 0) > 2 ? 2 : i2;
 HEAP32[i1 + 176 >> 2] = i2;
 return;
}
function __ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN14LocalInfoAdderD2E_1v(i1) {
 i1 = i1 | 0;
 return;
}
function __ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN17btTypedConstraint21setupSolverConstraintER20btAlignedObjectArrayI18btSolverConstraintEiif(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 return;
}
function b29(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(29);
 return 0.0;
}
function _emscripten_bind_btTransform_setRotation_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZN11btMatrix3x311setRotationERK12btQuaternion(i2, i1);
 STACKTOP = i3;
 return;
}
function _emscripten_bind_btMatrix3x3_getRotation_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 __ZNK11btMatrix3x311getRotationER12btQuaternion(i2, i1);
 STACKTOP = i3;
 return;
}
function dynCall_viiiid(i6, i5, i4, i3, i2, d1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_viiiid[i6 & 1](i5 | 0, i4 | 0, i3 | 0, i2 | 0, +d1);
}
function dynCall_viidii(i6, i5, i4, d3, i2, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viidii[i6 & 0](i5 | 0, i4 | 0, +d3, i2 | 0, i1 | 0);
}
function b34(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(34);
 return 0;
}
function _emscripten_bind_btPairCachingGhostObject_setRestitution_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 228 >> 2] = d2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_setFriction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 224 >> 2] = d2;
 return;
}
function _emscripten_bind_btRaycastVehicle_setSteeringValue_2(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 HEAPF32[(HEAP32[i2 + 144 >> 2] | 0) + (i1 * 284 | 0) + 232 >> 2] = d3;
 return;
}
function _emscripten_bind_btRaycastVehicle_applyEngineForce_2(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 HEAPF32[(HEAP32[i2 + 144 >> 2] | 0) + (i1 * 284 | 0) + 252 >> 2] = d3;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD0E_0v(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btKinematicCharacterController_setMaxSlope_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 36 >> 2] = d2;
 d2 = +Math_cos(+d2);
 HEAPF32[i1 + 40 >> 2] = d2;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2E_0v(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN36btCompoundCompoundCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN36btCompoundCompoundCollisionAlgorithmD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function ___cxa_is_pointer_type(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 if ((i2 | 0) == 0) i2 = 0; else i2 = (___dynamic_cast(i2, 20896) | 0) != 0;
 STACKTOP = i1;
 return i2 & 1 | 0;
}
function _emscripten_bind_btCollisionObject_setRestitution_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 228 >> 2] = d2;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_iiiii(i5, i4, i3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 31](i4 | 0, i3 | 0, i2 | 0, i1 | 0) | 0;
}
function _emscripten_bind_btCollisionObject_setFriction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 224 >> 2] = d2;
 return;
}
function b23(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(23);
}
function _i64Add(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return (tempRet0 = i4 + i3 + (i2 + i1 >>> 0 >>> 0 < i2 >>> 0 | 0) >>> 0, i2 + i1 >>> 0 | 0) | 0;
}
function _emscripten_bind_btGhostObject_setRestitution_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 228 >> 2] = d2;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResultD2E_0v(i1) {
 i1 = i1 | 0;
 return;
}
function _emscripten_bind_btRaycastVehicle_setBrake_2(i2, d3, i1) {
 i2 = i2 | 0;
 d3 = +d3;
 i1 = i1 | 0;
 HEAPF32[(HEAP32[i2 + 144 >> 2] | 0) + (i1 * 284 | 0) + 256 >> 2] = d3;
 return;
}
function _emscripten_bind_btRigidBody_setRestitution_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 228 >> 2] = d2;
 return;
}
function dynCall_diiii(i5, i4, i3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diiii[i5 & 1](i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btGhostObject_setFriction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 224 >> 2] = d2;
 return;
}
function __ZN31btDefaultCollisionConfigurationD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN31btDefaultCollisionConfigurationD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN21btCollisionDispatcher26getInternalManifoldPointerEv(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 12 >> 2] | 0) == 0) i1 = 0; else i1 = HEAP32[i1 + 20 >> 2] | 0;
 return i1 | 0;
}
function b12(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(12);
 return 0.0;
}
function _emscripten_bind_btRigidBody_setFriction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAP32[i1 + 260 >> 2] = (HEAP32[i1 + 260 >> 2] | 0) + 1;
 HEAPF32[i1 + 224 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBody_setSleepingThresholds_2(i1, d3, d2) {
 i1 = i1 | 0;
 d3 = +d3;
 d2 = +d2;
 HEAPF32[i1 + 472 >> 2] = d3;
 HEAPF32[i1 + 476 >> 2] = d2;
 return;
}
function dynCall_viiii(i5, i4, i3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viiii[i5 & 127](i4 | 0, i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 572 >> 2] = d2;
 HEAP8[i1 + 553 >> 0] = 1;
 return;
}
function __ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN15LocalInfoAdder2D2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN28btHashedOverlappingPairCacheD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN28btHashedOverlappingPairCacheD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN28btCompoundCollisionAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN28btCompoundCollisionAlgorithmD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 276 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function __ZN28btHashedOverlappingPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 72 >> 2] = i2;
 return;
}
function __ZN16btManifoldResult20setShapeIdentifiersBEii(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 20 >> 2] = i3;
 HEAP32[i1 + 28 >> 2] = i2;
 return;
}
function __ZN16btManifoldResult20setShapeIdentifiersAEii(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 24 >> 2] = i2;
 return;
}
function __ZN15btNullPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 0;
}
function dynCall_iidid(i5, i4, d3, i2, d1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 d1 = +d1;
 return FUNCTION_TABLE_iidid[i5 & 1](i4 | 0, +d3, i2 | 0, +d1) | 0;
}
function __ZN27InplaceSolverIslandCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN27InplaceSolverIslandCallbackD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN19btGhostPairCallback37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN9RayTesterD2E_1v(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_viiid(i5, i4, i3, i2, d1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_viiid[i5 & 15](i4 | 0, i3 | 0, i2 | 0, +d1);
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 132 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN25btSimulationIslandManagerD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN25btSimulationIslandManagerD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function dynCall_viidi(i5, i4, i3, d2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 FUNCTION_TABLE_viidi[i5 & 7](i4 | 0, i3 | 0, +d2, i1 | 0);
}
function dynCall_vidii(i5, i4, d3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vidii[i5 & 0](i4 | 0, +d3, i2 | 0, i1 | 0);
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 128 >> 2] = d2;
 return;
}
function __ZN28btHashedOverlappingPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 24 >> 2] = i2;
 return;
}
function __ZN15btNullPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 572 >> 2] = d2;
 HEAP8[i1 + 553 >> 0] = 0;
 return;
}
function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
 _abort_message(20536, i2);
}
function __ZN21btCollisionDispatcher26getManifoldByIndexInternalEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function __ZN23btHashedSimplePairCacheD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN23btHashedSimplePairCacheD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 136 >> 2] = d2;
 return;
}
function _emscripten_bind_btGhostObject_getOverlappingObject_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 276 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function _emscripten_bind_btRaycastVehicle_getWheelTransformWS_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (HEAP32[i2 + 144 >> 2] | 0) + (i1 * 284 | 0) + 92 | 0;
}
function _emscripten_bind_btTransform_setIdentity_0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN11btTransform11setIdentityEv(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btConstraintSetting___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN27InplaceSolverIslandCallbackD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN27InplaceSolverIslandCallbackD2Ev(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_isActive_0(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 216 >> 2] | 0;
 return ((i1 | 0) == 2 ? 0 : (i1 | 0) != 5) | 0;
}
function _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 32 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_LocalConvexResult___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function dynCall_iiii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiii[i4 & 31](i3 | 0, i2 | 0, i1 | 0) | 0;
}
function _emscripten_bind_btDispatcherInfo___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 116 >> 2] = d2;
 return;
}
function _emscripten_bind_btManifoldPoint___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function __ZNK23btDiscreteDynamicsWorld13getConstraintEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 220 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 112 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 124 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 36 >> 2] = d2;
 return;
}
function _emscripten_bind_LocalShapeInfo___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btDiscreteDynamicsWorld13getConstraintEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i2 + 220 >> 2] | 0) + (i1 << 2) >> 2] | 0;
}
function __ZN15btNullPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function dynCall_diii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_diii[i4 & 15](i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 120 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 170 >> 0] = i2 & 1;
 return;
}
function __ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function _emscripten_bind_btQuaternion___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN17btTypedConstraint23solveConstraintObsoleteER12btSolverBodyS1_f(i1, i2, i3, d4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 return;
}
function _emscripten_bind_btWheelInfo___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btTransform___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 184 >> 2] = d2;
 return;
}
function _emscripten_bind_btMatrix3x3___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btCollisionObject_isActive_0(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 216 >> 2] | 0;
 return ((i1 | 0) == 2 ? 0 : (i1 | 0) != 5) | 0;
}
function _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 10 >> 1] = i2;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 8 >> 1] = i2;
 return;
}
function __ZN20btAxisSweep3InternalItED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btQuadWord___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function __ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_iiid(i4, i3, i2, d1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 return FUNCTION_TABLE_iiid[i4 & 7](i3 | 0, i2 | 0, +d1) | 0;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 132 >> 2]);
}
function _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 12 >> 1] = i2;
 return;
}
function __ZN16btRaycastVehicleD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN16btRaycastVehicleD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorldD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN16btCollisionWorldD2Ev(i1);
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 128 >> 2]);
}
function _emscripten_bind_btRaycastVehicle_getWheelInfo_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (HEAP32[i2 + 144 >> 2] | 0) + (i1 * 284 | 0) | 0;
}
function _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 14 >> 1] = i2;
 return;
}
function ___udivdi3(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = ___udivmoddi4(i4, i3, i2, i1, 0) | 0;
 return i4 | 0;
}
function __ZN36btCompoundCompoundCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function b22(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(22);
}
function _emscripten_bind_btGhostObject_isActive_0(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 216 >> 2] | 0;
 return ((i1 | 0) == 2 ? 0 : (i1 | 0) != 5) | 0;
}
function _emscripten_bind_VoidPtr___destroy___0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) != 0) _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function __ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN15btNullPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function dynCall_viii(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_viii[i4 & 127](i3 | 0, i2 | 0, i1 | 0);
}
function _emscripten_bind_btRigidBody_upcast_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i1 + 236 >> 2] & 2 | 0) == 0) i1 = 0;
 return i1 | 0;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 104 >> 2] = d2;
 return;
}
function __ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btEmptyAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _emscripten_bind_btRigidBody_isActive_0(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 216 >> 2] | 0;
 return ((i1 | 0) == 2 ? 0 : (i1 | 0) != 5) | 0;
}
function __ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld27ClosestConvexResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 96 >> 2] = d2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_forceActivationState_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 216 >> 2] = i2;
 return;
}
function _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 184 >> 2] = d2;
 return;
}
function _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 10 >> 1] = i2;
 return;
}
function _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 8 >> 1] = i2;
 return;
}
function __ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK25btConvexTriangleMeshShape8getPlaneER9btVector3S1_i(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}
function __ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN32btSphereSphereCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 92 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 136 >> 2]);
}
function _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 32 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 + 32 >> 0] & 1) != 0 | 0;
}
function _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}
function __ZNK25btConvexTriangleMeshShape7getEdgeEiR9btVector3S1_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}
function __ZN43btKinematicClosestNotMeConvexResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 108 >> 2] = d2;
 return;
}
function _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 12 >> 1] = i2;
 return;
}
function __ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN18btConstraintSolver9allSolvedERK19btContactSolverInfoP12btIDebugDraw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN16btCollisionWorld24ClosestRayResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 204 >> 2] = i2;
 return;
}
function _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i1 + 14 >> 1] = i2;
 return;
}
function b19(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(19);
 return 0;
}
function _emscripten_bind_btGhostObject_setContactProcessingThreshold_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 184 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 28 >> 2] = d2;
 return;
}
function _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN28btCompoundCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN12btAxisSweep3D1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN20btAxisSweep3InternalItED2Ev(i1);
 STACKTOP = i2;
 return;
}
function dynCall_vidi(i4, i3, d2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 FUNCTION_TABLE_vidi[i4 & 15](i3 | 0, +d2, i1 | 0);
}
function b20(i1, i2, i3, d4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(20);
 return 0.0;
}
function _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 220 >> 2] = d2;
 return;
}
function _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 100 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 + 120 >> 0] & 1) != 0 | 0;
}
function _emscripten_bind_btPoint2PointConstraint_enableFeedback_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 21 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 28 >> 2] = d2;
 return;
}
function _emscripten_bind_btKinematicCharacterController_setFallSpeed_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 24 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 24 >> 0] = i2 & 1;
 return;
}
function __ZN30btKinematicCharacterController16setUpInterpolateEb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 180 >> 0] = i2 & 1;
 return;
}
function dynCall_viid(i4, i3, i2, d1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_viid[i4 & 7](i3 | 0, i2 | 0, +d1);
}
function _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 224 >> 2] = d2;
 return;
}
function _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBody_setContactProcessingThreshold_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 184 >> 2] = d2;
 return;
}
function _emscripten_bind_btConeTwistConstraint_setAngularOnly_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 524 >> 0] = i2 & 1;
 return;
}
function __ZN26btBoxBoxCollisionAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 116 >> 2]);
}
function _emscripten_bind_btKinematicCharacterController_setGravity_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 44 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 16 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btConeTwistConstraint_enableFeedback_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 21 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btCollisionObject_forceActivationState_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 216 >> 2] = i2;
 return;
}
function _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 204 >> 2] = d2;
 return;
}
function _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 208 >> 2] = d2;
 return;
}
function _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 20 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 112 >> 2]);
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 124 >> 2]);
}
function _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 36 >> 2]);
}
function _emscripten_bind_RayResultCallback_set_m_collisionObject_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}
function __ZNK17btConvexHullShape8getPlaneER9btVector3S1_i(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return;
}
function __ZN15btNullPairCache18addOverlappingPairEP17btBroadphaseProxyS1_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}
function _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 204 >> 2] & 2 | 0) != 0 | 0;
}
function _emscripten_bind_btConeTwistConstraint_enableMotor_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 552 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 return;
}
function _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = i2;
 return;
}
function __ZN23btConvexConvexAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 216 >> 2] = d2;
 return;
}
function _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 8 >> 2] = d2;
 return;
}
function _emscripten_bind_btSliderConstraint_enableFeedback_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 21 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btPersistentManifold_getContactPoint_1(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i2 + (i1 * 184 | 0) + 4 | 0;
}
function _emscripten_bind_btCollisionObject_setCollisionFlags_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 204 >> 2] = i2;
 return;
}
function __ZN34btClosestNotMeConvexResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 248 >> 2] = d2;
 return;
}
function _emscripten_bind_btTypedConstraint_enableFeedback_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 21 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btHingeConstraint_enableFeedback_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 21 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btGhostObject_forceActivationState_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 216 >> 2] = i2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 25 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 8 >> 2] = d2;
 return;
}
function __ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD2E_0v(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN33btMinkowskiPenetrationDepthSolverD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btCollisionWorld14setDebugDrawerEP12btIDebugDraw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 72 >> 2] = i2;
 return;
}
function __ZN14btTriangleMeshD1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btTriangleMeshD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN14btOptimizedBvhD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 __ZN14btQuantizedBvhD2Ev(i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d2;
 return;
}
function _emscripten_bind_btSliderConstraint_setUpperLinLimit_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 188 >> 2] = d2;
 return;
}
function _emscripten_bind_btSliderConstraint_setLowerLinLimit_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 184 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBody_forceActivationState_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 216 >> 2] = i2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 return;
}
function _emscripten_bind_LocalConvexResult_set_m_hitFraction_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 40 >> 2] = d2;
 return;
}
function __ZThn4_N17DebugDrawcallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1 + -4 | 0);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 16 >> 2] = d2;
 return;
}
function _emscripten_bind_btGhostObject_setCollisionFlags_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 204 >> 2] = i2;
 return;
}
function _emscripten_bind_btDispatcherInfo_set_m_useEpa_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 + 26 >> 0] = i2 & 1;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 10 >> 1] | 0;
}
function _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 8 >> 1] | 0;
}
function __ZN30btGjkEpaPenetrationDepthSolverD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN30btCompoundCompoundLeafCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function b16(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(16);
}
function _llvm_bswap_i32(i1) {
 i1 = i1 | 0;
 return (i1 & 255) << 24 | (i1 >> 8 & 255) << 16 | (i1 >> 16 & 255) << 8 | i1 >>> 24 | 0;
}
function _emscripten_bind_btDispatcherInfo_set_m_stepCount_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 return;
}
function _emscripten_bind_btConeTwistConstraint_setDamping_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 440 >> 2] = d2;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function __ZN29ConcreteContactResultCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function dynCall_iii(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iii[i3 & 31](i2 | 0, i1 | 0) | 0;
}
function _emscripten_bind_btWheelInfo_set_m_rollInfluence_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 244 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBody_setCollisionFlags_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 204 >> 2] = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 104 >> 2]);
}
function _emscripten_bind_btConstraintSetting_set_m_damping_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function _emscripten_bind_btCollisionObject_isKinematicObject_0(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 204 >> 2] & 2 | 0) != 0 | 0;
}
function _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 12 >> 1] | 0;
}
function __ZN28btTriangleConvexcastCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btEmptyAlgorithm10CreateFuncD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 212 >> 2] = d2;
 return;
}
function _emscripten_bind_btWheelInfo_set_m_frictionSlip_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 228 >> 2] = d2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 268 >> 2] | 0;
}
function _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 14 >> 1] | 0;
}
function __ZN27btContinuousConvexCollisionD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 96 >> 2]);
}
function __ZN26LocalSupportVertexCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 92 >> 2]);
}
function _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 + 24 >> 0] & 1) != 0 | 0;
}
function __ZN25btDefaultVehicleRaycasterD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN15btNullPairCache8findPairEP17btBroadphaseProxyS1_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}
function __ZN15btNullPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function b3(i1, i2, i3, d4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(3);
}
function b14(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(14);
 return 0.0;
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 108 >> 2]);
}
function _emscripten_bind_btGhostObject_isKinematicObject_0(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 204 >> 2] & 2 | 0) != 0 | 0;
}
function __ZNK25btConvexTriangleMeshShape9getVertexEiR9btVector3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN31btDefaultCollisionConfiguration25getCollisionAlgorithmPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN24btPerturbedContactResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN12btConvexCast10CastResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btWheelInfo_set_m_steering_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 232 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 + 16 >> 0] & 1) != 0 | 0;
}
function _emscripten_bind_LocalShapeInfo_set_m_shapePart_1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = i2;
 return;
}
function _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 10 >> 1] | 0;
}
function _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 8 >> 1] | 0;
}
function __ZNK28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZNK25btConvexTriangleMeshShape8isInsideERK9btVector3f(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 return 0;
}
function __ZN31btDefaultCollisionConfiguration25getPersistentManifoldPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function __ZN23btCollisionPairCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btBridgedManifoldResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btRigidBody_isKinematicObject_0(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 204 >> 2] & 2 | 0) != 0 | 0;
}
function _emscripten_bind_btDispatcherInfo_set_m_timeStep_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 28 >> 2]);
}
function _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function _emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function __ZN28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN22btSubsimplexConvexCastD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN22btCompoundLeafCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN22SphereTriangleDetectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function b8(i1, d2, d3, i4, i5, i6) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(8);
}
function b32(i1, i2, d3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(32);
 return 0.0;
}
function _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 220 >> 2]);
}
function _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 12 >> 2]);
}
function _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 100 >> 2]);
}
function _emscripten_bind_btKinematicCharacterController_getGhostObject_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 12 >> 1] | 0;
}
function __ZN21btSingleSweepCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN21SupportVertexCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1;
 while (HEAP8[i2 >> 0] | 0) i2 = i2 + 1 | 0;
 return i2 - i1 | 0;
}
function _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 224 >> 2]);
}
function _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function _emscripten_bind_btPairCachingGhostObject_getCollisionShape_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 192 >> 2] | 0;
}
function _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 204 >> 2] | 0;
}
function _emscripten_bind_btKinematicCharacterController_getMaxSlope_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 36 >> 2]);
}
function _emscripten_bind_btConstraintSetting_set_m_tau_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d2;
 return;
}
function _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0(i1) {
 i1 = i1 | 0;
 return HEAP16[i1 + 14 >> 1] | 0;
}
function __ZNK26btTriangleIndexVertexArray14hasPremadeAabbEv(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 48 >> 2] | 0) == 1 | 0;
}
function __ZN20BroadphaseAabbTesterD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = i1;
  threwValue = i2;
 }
}
function _emscripten_bind_btKinematicCharacterController_getGravity_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 44 >> 2]);
}
function _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 + 25 >> 0] & 1) != 0 | 0;
}
function __ZNK25btConvexTriangleMeshShape15getLocalScalingEv(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 92 >> 2] | 0) + 4 | 0;
}
function __ZN19btSingleRayCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN19btGhostPairCallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN19BroadphaseRayTesterD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function dynCall_vii(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vii[i3 & 127](i2 | 0, i1 | 0);
}
function dynCall_did(i3, i2, d1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 return +FUNCTION_TABLE_did[i3 & 1](i2 | 0, +d1);
}
function _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 204 >> 2]);
}
function _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 208 >> 2]);
}
function _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 20 >> 2]);
}
function _emscripten_bind_ClosestRayResultCallback_hasHit_0(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 8 >> 2] | 0) != 0 | 0;
}
function _emscripten_bind_ClosestConvexResultCallback_hasHit_0(i1) {
 i1 = i1 | 0;
 return +HEAPF32[i1 + 4 >> 2] < 1.0 | 0;
}
function __ZNK28btHashedOverlappingPairCache22getNumOverlappingPairsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function __ZN18btDbvtTreeColliderD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN23btHashedSimplePairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN17btGjkPairDetectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN17DebugDrawcallbackD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN12btConvexCast10CastResult13reportFailureEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 216 >> 2]);
}
function _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 8 >> 2]);
}
function _emscripten_bind_btGhostObject_getNumOverlappingObjects_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 268 >> 2] | 0;
}
function _emscripten_bind_btDispatcherInfo_get_m_useEpa_0(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 + 26 >> 0] & 1) != 0 | 0;
}
function __ZNK13btSphereShape9getMarginEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 28 >> 2] * +HEAPF32[i1 + 12 >> 2]);
}
function __ZN21btConvexInternalShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 44 >> 2] = d2;
 return;
}
function __ZN16btPointCollectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btPointCollector20setShapeIdentifiersBEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN16btPointCollector20setShapeIdentifiersAEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN16btManifoldResultD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btEmptyAlgorithmD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZN16btBoxBoxDetectorD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 248 >> 2]);
}
function _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 8 >> 2]);
}
function _emscripten_bind_RayResultCallback_get_m_collisionObject_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function __ZNK20btAxisSweep3InternalItE23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 92 >> 2] | 0;
}
function __ZNK17btConvexHullShape8isInsideERK9btVector3f(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 return 0;
}
function __ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN31btDefaultCollisionConfiguration16getSimplexSolverEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}
function __ZN15btGjkConvexCastD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 >> 2]);
}
function _emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}
function _emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 68 >> 2] | 0;
}
function _emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}
function _emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 >> 2] | 0;
}
function __ZN20btAxisSweep3InternalItE23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 92 >> 2] | 0;
}
function __ZN12btConvexCast10CastResult15drawCoordSystemERK11btTransform(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _emscripten_bind_btQuaternion_setW_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function _emscripten_bind_btPersistentManifold_getNumContacts_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 748 >> 2] | 0;
}
function _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 12 >> 2]);
}
function _emscripten_bind_btCollisionObject_getCollisionShape_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 192 >> 2] | 0;
}
function _emscripten_bind_btCollisionObject_getCollisionFlags_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 204 >> 2] | 0;
}
function _emscripten_bind_LocalConvexResult_get_m_hitFraction_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 40 >> 2]);
}
function _emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 12 | 0;
}
function __ZNK21btCollisionDispatcher23getInternalManifoldPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 68 >> 2] | 0;
}
function __ZNK19btTriangleMeshShape15getLocalScalingEv(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 48 >> 2] | 0) + 4 | 0;
}
function __ZN30btKinematicCharacterController9debugDrawEP12btIDebugDraw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 16 >> 2]);
}
function _emscripten_bind_btQuaternion_setZ_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 8 >> 2] = d2;
 return;
}
function _emscripten_bind_btQuaternion_setY_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function _emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 44 | 0;
}
function __ZNK26btTriangleIndexVertexArray24unLockReadOnlyVertexBaseEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function __ZN21btCollisionDispatcher23getInternalManifoldPoolEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 68 >> 2] | 0;
}
function dynCall_vid(i3, i2, d1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_vid[i3 & 31](i2 | 0, +d1);
}
function _emscripten_bind_btQuadWord_setW_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}
function _emscripten_bind_RayResultCallback_hasHit_0(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 8 >> 2] | 0) != 0 | 0;
}
function _emscripten_bind_ConvexResultCallback_hasHit_0(i1) {
 i1 = i1 | 0;
 return +HEAPF32[i1 + 4 >> 2] < 1.0 | 0;
}
function _emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 60 | 0;
}
function _emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 28 | 0;
}
function __ZN23btDiscreteDynamicsWorld19getConstraintSolverEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 200 >> 2] | 0;
}
function _emscripten_bind_btWheelInfo_get_m_rollInfluence_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 244 >> 2]);
}
function _emscripten_bind_btQuadWord_setZ_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 8 >> 2] = d2;
 return;
}
function _emscripten_bind_btQuadWord_setY_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function _emscripten_bind_btConstraintSetting_get_m_damping_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}
function __ZNSt9bad_allocD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 _free(i1);
 STACKTOP = i2;
 return;
}
function __ZNK23btDiscreteDynamicsWorld17getNumConstraintsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 212 >> 2] | 0;
}
function __ZNK15btNullPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN35btSequentialImpulseConstraintSolver5resetEv(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 192 >> 2] = 0;
 return;
}
function __ZN18btConstraintSolver12prepareSolveEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}
function __ZN15btNullPairCache20sortOverlappingPairsEP12btDispatcher(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function __ZN15btCompoundShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 72 >> 2] = d2;
 return;
}
function b0(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(0);
}
function _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 212 >> 2]);
}
function _emscripten_bind_btWheelInfo_get_m_frictionSlip_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 228 >> 2]);
}
function _emscripten_bind_btVector4_setZ_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 8 >> 2] = d2;
 return;
}
function _emscripten_bind_btVector4_setY_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function _emscripten_bind_btVector3_setZ_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 8 >> 2] = d2;
 return;
}
function _emscripten_bind_btVector3_setY_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 4 >> 2] = d2;
 return;
}
function _emscripten_bind_btGhostObject_getCollisionShape_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 192 >> 2] | 0;
}
function _emscripten_bind_btGhostObject_getCollisionFlags_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 204 >> 2] | 0;
}
function _emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 52 | 0;
}
function __ZNK26btTriangleIndexVertexArray14getNumSubPartsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}
function __ZNK16btDbvtBroadphase23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 136 >> 2] | 0;
}
function __ZN15btNullPairCache26getOverlappingPairArrayPtrEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 16 >> 2] | 0;
}
function __ZN14btConcaveShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 12 >> 2] = d2;
 return;
}
function b28(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 abort(28);
}
function b21(i1, i2, d3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(21);
}
function _emscripten_bind_btQuaternion_setX_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d2;
 return;
}
function _emscripten_bind_btDispatcherInfo_get_m_stepCount_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}
function _emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function _emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 68 | 0;
}
function __ZNK17btCollisionObject24checkCollideWithOverrideEPKS_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}
function __ZN16btDbvtBroadphase23getOverlappingPairCacheEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 136 >> 2] | 0;
}
function __ZN13btSphereShape9setMarginEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 + 44 >> 2] = d2;
 return;
}
function _emscripten_bind_btRigidBody_getCollisionShape_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 192 >> 2] | 0;
}
function _emscripten_bind_btRigidBody_getCollisionFlags_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 204 >> 2] | 0;
}
function _emscripten_bind_btRaycastVehicle_getRigidBody_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 116 >> 2] | 0;
}
function _emscripten_bind_btRaycastVehicle_getNumWheels_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 136 >> 2] | 0;
}
function _emscripten_bind_btPersistentManifold_getBody1_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 744 >> 2] | 0;
}
function _emscripten_bind_btPersistentManifold_getBody0_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 740 >> 2] | 0;
}
function _emscripten_bind_btCollisionWorld_getDispatcher_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}
function _emscripten_bind_btCollisionWorld_getBroadphase_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 68 >> 2] | 0;
}
function _emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 20 | 0;
}
function b33(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(33);
 return 0.0;
}
function _emscripten_bind_btQuadWord_setX_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d2;
 return;
}
function _emscripten_bind_btDynamicsWorld_getDispatcher_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}
function _emscripten_bind_btDynamicsWorld_getBroadphase_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 68 >> 2] | 0;
}
function __ZN26btTriangleIndexVertexArray19preallocateVerticesEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _emscripten_bind_btWheelInfo_get_m_steering_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 232 >> 2]);
}
function _emscripten_bind_btVector4_setX_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d2;
 return;
}
function _emscripten_bind_btVector3_setX_1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 HEAPF32[i1 >> 2] = d2;
 return;
}
function _emscripten_bind_btPairCachingGhostObject_getWorldTransform_0(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function _emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0(i1) {
 i1 = i1 | 0;
 return i1 + 36 | 0;
}
function __ZNK21btCollisionDispatcher15getNumManifoldsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}
function __ZN28btHashedOverlappingPairCache23getOverlappingPairArrayEv(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function __ZN26btTriangleIndexVertexArray18preallocateIndicesEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function b10(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(10);
 return 0;
}
function _emscripten_bind_btRigidBody_getMotionState_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 480 >> 2] | 0;
}
function _emscripten_bind_btDispatcherInfo_get_m_timeStep_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 >> 2]);
}
function _emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0(i1) {
 i1 = i1 | 0;
 return i1 + 28 | 0;
}
function __ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZN26btTriangleIndexVertexArray16unLockVertexBaseEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _emscripten_bind_btPoint2PointConstraint_get_m_setting_0(i1) {
 i1 = i1 | 0;
 return i1 + 348 | 0;
}
function _emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0(i1) {
 i1 = i1 | 0;
 return i1 + 32 | 0;
}
function _emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0(i1) {
 i1 = i1 | 0;
 return i1 + 48 | 0;
}
function _emscripten_bind_btConstraintSetting_get_m_tau_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 >> 2]);
}
function _emscripten_bind_LocalShapeInfo_get_m_shapePart_0(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 >> 2] | 0;
}
function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 127](i1 | 0) | 0;
}
function _emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0(i1) {
 i1 = i1 | 0;
 return i1 + 24 | 0;
}
function _emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0(i1) {
 i1 = i1 | 0;
 return i1 + 8 | 0;
}
function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}
function _emscripten_bind_btPoint2PointConstraint_getPivotInB_0(i1) {
 i1 = i1 | 0;
 return i1 + 316 | 0;
}
function _emscripten_bind_btPoint2PointConstraint_getPivotInA_0(i1) {
 i1 = i1 | 0;
 return i1 + 300 | 0;
}
function _emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0(i1) {
 i1 = i1 | 0;
 return i1 + 64 | 0;
}
function __ZNK17btConvexHullShape14getNumVerticesEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 96 >> 2] | 0;
}
function _emscripten_bind_btRigidBody_getCenterOfMassTransform_0(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function _emscripten_bind_btManifoldPoint_getPositionWorldOnB_0(i1) {
 i1 = i1 | 0;
 return i1 + 32 | 0;
}
function _emscripten_bind_btManifoldPoint_getPositionWorldOnA_0(i1) {
 i1 = i1 | 0;
 return i1 + 48 | 0;
}
function __ZNK23btGeneric6DofConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 252;
}
function __ZNK21btConvexInternalShape9getMarginEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 44 >> 2]);
}
function b39(i1, d2, i3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 d4 = +d4;
 abort(39);
 return 0;
}
function _emscripten_bind_btCollisionObject_getWorldTransform_0(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function __ZNK23btStridingMeshInterface28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 28;
}
function __ZNK23btPoint2PointConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 84;
}
function __ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}
function __ZN16btCollisionWorld14getDebugDrawerEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 72 >> 2] | 0;
}
function dynCall_di(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +FUNCTION_TABLE_di[i2 & 15](i1 | 0);
}
function _emscripten_bind_btManifoldPoint_get_m_localPointB_0(i1) {
 i1 = i1 | 0;
 return i1 + 16 | 0;
}
function __ZNK22btBvhTriangleMeshShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 60;
}
function __ZNK21btConeTwistConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 212;
}
function __ZNK17btConvexHullShape11getNumEdgesEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 96 >> 2] | 0;
}
function __ZNK15btTriangleShape36getNumPreferredPenetrationDirectionsEv(i1) {
 i1 = i1 | 0;
 return 2;
}
function _emscripten_bind_btCollisionWorld_getDispatchInfo_0(i1) {
 i1 = i1 | 0;
 return i1 + 28 | 0;
}
function __ZNK21btConvexInternalShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 52;
}
function __ZN6btDbvt8ICollide7DescentEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}
function _emscripten_bind_btRigidBody_getAngularVelocity_0(i1) {
 i1 = i1 | 0;
 return i1 + 328 | 0;
}
function _emscripten_bind_btDynamicsWorld_getDispatchInfo_0(i1) {
 i1 = i1 | 0;
 return i1 + 28 | 0;
}
function __ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btDiscreteDynamicsWorld11setNumTasksEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _emscripten_bind_btRigidBody_getLinearVelocity_0(i1) {
 i1 = i1 | 0;
 return i1 + 312 | 0;
}
function _emscripten_bind_btGhostObject_getWorldTransform_0(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function __ZNK35btSequentialImpulseConstraintSolver13getSolverTypeEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function __ZNK18btSliderConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 204;
}
function __ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function b40(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(40);
}
function __ZNK18btStaticPlaneShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 52;
}
function __ZNK17btHingeConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 220;
}
function __ZNK17btCollisionObject28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 256;
}
function __ZNK15btCompoundShape9getMarginEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 72 >> 2]);
}
function _emscripten_bind_btRigidBody_getWorldTransform_0(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function _emscripten_bind_btQuaternion_w_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 12 >> 2]);
}
function _emscripten_bind_btManifoldPoint_get_m_localPointA_0(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}
function __ZNK21btConvexInternalShape15getLocalScalingEv(i1) {
 i1 = i1 | 0;
 return i1 + 12 | 0;
}
function __ZNK17btTypedConstraint28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 52;
}
function __ZNK17btConvexHullShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 68;
}
function __ZNK14btQuantizedBvh31calculateSerializeBufferSizeNewEv(i1) {
 i1 = i1 | 0;
 return 84;
}
function __ZNK14btConcaveShape9getMarginEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 12 >> 2]);
}
function __ZNK10btBoxShape36getNumPreferredPenetrationDirectionsEv(i1) {
 i1 = i1 | 0;
 return 6;
}
function __ZN15btNullPairCache23getOverlappingPairArrayEv(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}
function _emscripten_bind_btQuaternion_z_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 8 >> 2]);
}
function _emscripten_bind_btQuaternion_y_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function __ZNK16btCollisionShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 12;
}
function __ZN36btCompoundCompoundCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN28btHashedOverlappingPairCache18hasDeferredRemovalEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 511](i1 | 0);
}
function b35(i1, i2, i3, d4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 abort(35);
}
function _emscripten_bind_btQuadWord_w_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 12 >> 2]);
}
function __ZNK15btCylinderShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 60;
}
function __ZNK15btCompoundShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 24;
}
function __ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN12btConvexCast10CastResult9DebugDrawEf(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 return;
}
function _emscripten_bind_btVector4_w_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 12 >> 2]);
}
function _emscripten_bind_btQuadWord_z_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 8 >> 2]);
}
function _emscripten_bind_btQuadWord_y_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function __ZNK18btStaticPlaneShape15getLocalScalingEv(i1) {
 i1 = i1 | 0;
 return i1 + 68 | 0;
}
function __ZNK14btCapsuleShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 60;
}
function __ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b9(i1, d2, i3, i4) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(9);
}
function b7(i1, i2, d3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 abort(7);
}
function b26(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(26);
 return 0.0;
}
function _emscripten_bind_btVector4_z_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 8 >> 2]);
}
function _emscripten_bind_btVector4_y_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function _emscripten_bind_btVector3_z_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 8 >> 2]);
}
function _emscripten_bind_btVector3_y_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 4 >> 2]);
}
function __ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btCollisionWorld27ClosestConvexResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function _emscripten_bind_btQuaternion_x_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 >> 2]);
}
function __ZNK11btRigidBody28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 488;
}
function __ZN32btSphereSphereCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b15(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(15);
 return 0;
}
function __ZNK15btCompoundShape15getLocalScalingEv(i1) {
 i1 = i1 | 0;
 return i1 + 76 | 0;
}
function __ZNK11btConeShape28calculateSerializeBufferSizeEv(i1) {
 i1 = i1 | 0;
 return 60;
}
function __ZN43btKinematicClosestNotMeConvexResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function _emscripten_bind_btTransform_getOrigin_0(i1) {
 i1 = i1 | 0;
 return i1 + 48 | 0;
}
function _emscripten_bind_btQuadWord_x_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 >> 2]);
}
function __ZNK25btConvexTriangleMeshShape14getNumVerticesEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZN16btCollisionWorld24ClosestRayResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function _emscripten_bind_btVector4_x_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 >> 2]);
}
function _emscripten_bind_btVector3_x_0(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 >> 2]);
}
function b17(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 abort(17);
 return 0;
}
function __ZNK25btConvexTriangleMeshShape12getNumPlanesEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNK15btNullPairCache22getNumOverlappingPairsEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZN28btCompoundCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK25btConvexTriangleMeshShape11getNumEdgesEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNK25btConvexTriangleMeshShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 10832;
}
function __ZNK23btDiscreteDynamicsWorld12getWorldTypeEv(i1) {
 i1 = i1 | 0;
 return 2;
}
function __ZN26btBoxBoxCollisionAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function _emscripten_bind_btTransform_getBasis_0(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}
function __ZN23btConvexConvexAlgorithm10CreateFuncD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btNullPairCache18hasDeferredRemovalEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function __ZNK22btBvhTriangleMeshShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 5784;
}
function __ZN34btClosestNotMeConvexResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN33btMinkowskiPenetrationDepthSolverD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN20btAxisSweep3InternalItE10printStatsEv(i1) {
 i1 = i1 | 0;
 return;
}
function b36(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(36);
}
function __ZNK19btTriangleMeshShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 17536;
}
function __ZNK17btConvexHullShape12getNumPlanesEv(i1) {
 i1 = i1 | 0;
 return 0;
}
function __ZNK15btTriangleShape14getNumVerticesEv(i1) {
 i1 = i1 | 0;
 return 3;
}
function __ZNK18btStaticPlaneShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 17128;
}
function __ZNK17btConvexHullShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 10568;
}
function __ZNK15btTriangleShape12getNumPlanesEv(i1) {
 i1 = i1 | 0;
 return 1;
}
function __ZN30btGjkEpaPenetrationDepthSolverD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN30btCompoundCompoundLeafCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btTypedConstraint13buildJacobianEv(i1) {
 i1 = i1 | 0;
 return;
}
function b38(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 abort(38);
}
function b11(i1, d2, i3) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 abort(11);
}
function __ZNK16btCylinderShapeZ7getNameEv(i1) {
 i1 = i1 | 0;
 return 11352;
}
function __ZNK16btCylinderShapeX7getNameEv(i1) {
 i1 = i1 | 0;
 return 11368;
}
function __ZNK15btTriangleShape11getNumEdgesEv(i1) {
 i1 = i1 | 0;
 return 3;
}
function __ZN29ConcreteContactResultCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK15btTriangleShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 16544;
}
function __ZNK15btCylinderShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 11408;
}
function __ZN28btTriangleConvexcastCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btEmptyAlgorithm10CreateFuncD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK15btCompoundShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 9680;
}
function __ZNK15btCapsuleShapeZ7getNameEv(i1) {
 i1 = i1 | 0;
 return 6720;
}
function __ZNK15btCapsuleShapeX7getNameEv(i1) {
 i1 = i1 | 0;
 return 6736;
}
function __ZNK10btBoxShape14getNumVerticesEv(i1) {
 i1 = i1 | 0;
 return 8;
}
function __ZN27btContinuousConvexCollisionD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK14btCapsuleShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 6776;
}
function __ZN26LocalSupportVertexCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btDbvtBroadphase10printStatsEv(i1) {
 i1 = i1 | 0;
 return;
}
function b25(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(25);
 return 0;
}
function __ZNK13btSphereShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 2144;
}
function __ZNK12btConeShapeZ7getNameEv(i1) {
 i1 = i1 | 0;
 return 10112;
}
function __ZNK12btConeShapeX7getNameEv(i1) {
 i1 = i1 | 0;
 return 10104;
}
function __ZNK10btBoxShape12getNumPlanesEv(i1) {
 i1 = i1 | 0;
 return 6;
}
function __ZNK10btBoxShape11getNumEdgesEv(i1) {
 i1 = i1 | 0;
 return 12;
}
function __ZN25btDefaultVehicleRaycasterD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b30(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 abort(30);
 return 0.0;
}
function __ZNK11btConeShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 10136;
}
function __ZN24btPerturbedContactResultD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN12btConvexCast10CastResultD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btPoint2PointConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btGeneric6DofConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btCollisionPairCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN23btBridgedManifoldResultD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZThn4_N17DebugDrawcallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNK10btBoxShape7getNameEv(i1) {
 i1 = i1 | 0;
 return 5608;
}
function __ZN22btSubsimplexConvexCastD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN22btCompoundLeafCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN22SphereTriangleDetectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN21btSingleSweepCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN21btConeTwistConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN21SupportVertexCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv(i1) {
 i1 = i1 | 0;
 return 20488;
}
function __ZN20btDefaultMotionStateD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN20BroadphaseAabbTesterD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
}
function __ZN19btTriangleMeshShapeD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN19btSingleRayCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN19btGhostPairCallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN19BroadphaseRayTesterD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN18btStaticPlaneShapeD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN18btSliderConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN18btDbvtTreeColliderD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}
function __ZN17btTypedConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btHingeConstraintD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17btGjkPairDetectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN17DebugDrawcallbackD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btPointCollectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btManifoldResultD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btEmptyAlgorithmD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btCylinderShapeZD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btCylinderShapeXD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN16btBoxBoxDetectorD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btGjkConvexCastD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btCylinderShapeD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btCapsuleShapeZD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN15btCapsuleShapeXD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN14btCapsuleShapeD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN13btSphereShapeD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function b4(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(4);
}
function __ZN12btConeShapeZD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN12btConeShapeXD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZN11btConeShapeD1Ev(i1) {
 i1 = i1 | 0;
 return;
}
function __ZNSt9bad_allocD2Ev(i1) {
 i1 = i1 | 0;
 return;
}
function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}
function b18(i1) {
 i1 = i1 | 0;
 abort(18);
 return 0.0;
}
function b1(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 abort(1);
}
function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}
function b6(i1) {
 i1 = i1 | 0;
 abort(6);
 return 0;
}
function getTempRet0() {
 return tempRet0 | 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b2(i1) {
 i1 = i1 | 0;
 abort(2);
}
function b37() {
 abort(37);
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_viiiii = [b0,__ZN20btAxisSweep3InternalItE7setAabbEP17btBroadphaseProxyRK9btVector3S5_P12btDispatcher,__ZNK13btConvexShape7projectERK11btTransformRK9btVector3RfS6_,__ZN16btDbvtBroadphase7setAabbEP17btBroadphaseProxyRK9btVector3S4_P12btDispatcher,__ZN16btEmptyAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN17btGjkPairDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb,__ZN32btSphereSphereCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN34btSphereTriangleCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN22SphereTriangleDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb,__ZN26btBoxBoxCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN16btBoxBoxDetector16getClosestPointsERKN36btDiscreteCollisionDetectorInterface17ClosestPointInputERNS0_6ResultEP12btIDebugDrawb,__ZN28btCompoundCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN36btCompoundCompoundCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN33btConvexConcaveCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZN31btConvexPlaneCollisionAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResult,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_vid = [b1,__ZN23btDiscreteDynamicsWorld25predictUnconstraintMotionEf,__ZN23btDiscreteDynamicsWorld19integrateTransformsEf,__ZN23btDiscreteDynamicsWorld21updateActivationStateEf,__ZN23btDiscreteDynamicsWorld28internalSingleStepSimulationEf,__ZN23btDiscreteDynamicsWorld18saveKinematicStateEf,__ZN23btDiscreteDynamicsWorld14updateVehiclesEf,__ZN16btRaycastVehicle13updateVehicleEf,__ZN16btRaycastVehicle14updateFrictionEf,__ZN10btBoxShape9setMarginEf,__ZN14btConcaveShape9setMarginEf,__ZN14btCapsuleShape9setMarginEf,__ZN12btConvexCast10CastResult9DebugDrawEf,__ZN15btCompoundShape9setMarginEf,__ZN21btConvexInternalShape9setMarginEf,__ZN15btCylinderShape9setMarginEf,__ZN13btSphereShape9setMarginEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,__ZN17btTypedConstraintD1Ev,__ZN17btTypedConstraintD0Ev,__ZN17btTypedConstraint13buildJacobianEv,__ZN19btGhostPairCallbackD1Ev,__ZN19btGhostPairCallbackD0Ev,__ZN16btCollisionWorld24ClosestRayResultCallbackD1Ev,__ZN16btCollisionWorld24ClosestRayResultCallbackD0Ev,__ZN20btDefaultMotionStateD1Ev,__ZN20btDefaultMotionStateD0Ev,__ZN16btCollisionWorld27ClosestConvexResultCallbackD1Ev,__ZN16btCollisionWorld27ClosestConvexResultCallbackD0Ev,__ZN29ConcreteContactResultCallbackD1Ev,__ZN29ConcreteContactResultCallbackD0Ev,__ZN21btConeTwistConstraintD1Ev,__ZN21btConeTwistConstraintD0Ev,__ZN21btConeTwistConstraint13buildJacobianEv,__ZN23btDiscreteDynamicsWorldD2Ev,__ZN23btDiscreteDynamicsWorldD0Ev,__ZN16btCollisionWorld11updateAabbsEv,__ZN16btCollisionWorld23computeOverlappingPairsEv,__ZN23btDiscreteDynamicsWorld14debugDrawWorldEv,__ZN16btCollisionWorld33performDiscreteCollisionDetectionEv,__ZN23btDiscreteDynamicsWorld23synchronizeMotionStatesEv,__ZN23btDiscreteDynamicsWorld11clearForcesEv,__ZN23btDiscreteDynamicsWorld26calculateSimulationIslandsEv,__ZN23btDiscreteDynamicsWorld12applyGravityEv,__ZN34btClosestNotMeConvexResultCallbackD1Ev,__ZN34btClosestNotMeConvexResultCallbackD0Ev
  ,__ZN27InplaceSolverIslandCallbackD1Ev,__ZN27InplaceSolverIslandCallbackD0Ev,__ZN23btGeneric6DofConstraintD1Ev,__ZN23btGeneric6DofConstraintD0Ev,__ZN23btGeneric6DofConstraint13buildJacobianEv,__ZN23btGeneric6DofConstraint13calcAnchorPosEv,__ZN17btHingeConstraintD1Ev,__ZN17btHingeConstraintD0Ev,__ZN17btHingeConstraint13buildJacobianEv,__ZN30btKinematicCharacterControllerD2Ev,__ZN30btKinematicCharacterControllerD0Ev,__ZN30btKinematicCharacterController4jumpEv,__ZN43btKinematicClosestNotMeConvexResultCallbackD1Ev,__ZN43btKinematicClosestNotMeConvexResultCallbackD0Ev,__ZN23btPoint2PointConstraintD1Ev,__ZN23btPoint2PointConstraintD0Ev,__ZN23btPoint2PointConstraint13buildJacobianEv,__ZN16btRaycastVehicleD2Ev,__ZN16btRaycastVehicleD0Ev,__ZN25btDefaultVehicleRaycasterD1Ev,__ZN25btDefaultVehicleRaycasterD0Ev,__ZN11btRigidBodyD1Ev,__ZN11btRigidBodyD0Ev,__ZN35btSequentialImpulseConstraintSolverD2Ev,__ZN35btSequentialImpulseConstraintSolverD0Ev,__ZN35btSequentialImpulseConstraintSolver5resetEv,__ZN18btSliderConstraintD1Ev,__ZN18btSliderConstraintD0Ev,__ZN12btAxisSweep3D1Ev,__ZN12btAxisSweep3D0Ev
  ,__ZN20btAxisSweep3InternalItE10printStatsEv,__ZN20btAxisSweep3InternalItED1Ev,__ZN20btAxisSweep3InternalItED0Ev,__ZN15btNullPairCacheD1Ev,__ZN15btNullPairCacheD0Ev,__ZN10btBoxShapeD1Ev,__ZN10btBoxShapeD0Ev,__ZN22btBvhTriangleMeshShapeD2Ev,__ZN22btBvhTriangleMeshShapeD0Ev,__ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev,__ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev,__ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD2Ev,__ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallbackD0Ev,__ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD2Ev,__ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallbackD0Ev,__ZN14btCapsuleShapeD1Ev,__ZN14btCapsuleShapeD0Ev,__ZN15btCapsuleShapeXD1Ev,__ZN15btCapsuleShapeXD0Ev,__ZN15btCapsuleShapeZD1Ev,__ZN15btCapsuleShapeZD0Ev,__ZN21btCollisionDispatcherD2Ev,__ZN21btCollisionDispatcherD0Ev,__ZN23btCollisionPairCallbackD1Ev,__ZN23btCollisionPairCallbackD0Ev,__ZN16btCollisionWorldD2Ev,__ZN16btCollisionWorldD0Ev,__ZN16btCollisionWorld14debugDrawWorldEv,__ZN17DebugDrawcallbackD1Ev,__ZN17DebugDrawcallbackD0Ev
  ,__ZThn4_N17DebugDrawcallbackD1Ev,__ZThn4_N17DebugDrawcallbackD0Ev,__ZN23btBridgedManifoldResultD1Ev,__ZN23btBridgedManifoldResultD0Ev,__ZN21btSingleSweepCallbackD1Ev,__ZN21btSingleSweepCallbackD0Ev,__ZN19btSingleRayCallbackD1Ev,__ZN19btSingleRayCallbackD0Ev,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN14LocalInfoAdderD2E_1v,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN14LocalInfoAdderD0E_1v,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2E_0v,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0E_0v,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD2Ev,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallbackD0Ev,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN15LocalInfoAdder2D2Ev,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN15LocalInfoAdder2D0Ev,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN9RayTesterD2E_1v,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN9RayTesterD0E_1v,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2E_0v,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0E_0v,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD2Ev,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallbackD0Ev,__ZN12btConvexCast10CastResultD1Ev,__ZN12btConvexCast10CastResultD0Ev,__ZN15btCompoundShapeD2Ev,__ZN15btCompoundShapeD0Ev,__ZN15btCompoundShape20recalculateLocalAabbEv,__ZN11btConeShapeD1Ev,__ZN11btConeShapeD0Ev,__ZN12btConeShapeZD1Ev
  ,__ZN12btConeShapeZD0Ev,__ZN12btConeShapeXD1Ev,__ZN12btConeShapeXD0Ev,__ZN27btContinuousConvexCollisionD1Ev,__ZN27btContinuousConvexCollisionD0Ev,__ZN16btPointCollectorD1Ev,__ZN16btPointCollectorD0Ev,__ZN17btConvexHullShapeD1Ev,__ZN17btConvexHullShapeD0Ev,__ZN25btConvexTriangleMeshShapeD1Ev,__ZN25btConvexTriangleMeshShapeD0Ev,__ZN26LocalSupportVertexCallbackD1Ev,__ZN26LocalSupportVertexCallbackD0Ev,__ZN15btCylinderShapeD1Ev,__ZN15btCylinderShapeD0Ev,__ZN16btCylinderShapeXD1Ev,__ZN16btCylinderShapeXD0Ev,__ZN16btCylinderShapeZD1Ev,__ZN16btCylinderShapeZD0Ev,__ZN16btDbvtBroadphaseD2Ev,__ZN16btDbvtBroadphaseD0Ev,__ZN16btDbvtBroadphase10printStatsEv,__ZN20BroadphaseAabbTesterD1Ev,__ZN20BroadphaseAabbTesterD0Ev,__ZN19BroadphaseRayTesterD1Ev,__ZN19BroadphaseRayTesterD0Ev,__ZN18btDbvtTreeColliderD1Ev,__ZN18btDbvtTreeColliderD0Ev,__ZN31btDefaultCollisionConfigurationD2Ev,__ZN31btDefaultCollisionConfigurationD0Ev
  ,__ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD1Ev,__ZN31btConvexPlaneCollisionAlgorithm10CreateFuncD0Ev,__ZN26btBoxBoxCollisionAlgorithm10CreateFuncD1Ev,__ZN26btBoxBoxCollisionAlgorithm10CreateFuncD0Ev,__ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD1Ev,__ZN34btSphereTriangleCollisionAlgorithm10CreateFuncD0Ev,__ZN32btSphereSphereCollisionAlgorithm10CreateFuncD1Ev,__ZN32btSphereSphereCollisionAlgorithm10CreateFuncD0Ev,__ZN16btEmptyAlgorithm10CreateFuncD1Ev,__ZN16btEmptyAlgorithm10CreateFuncD0Ev,__ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD1Ev,__ZN28btCompoundCollisionAlgorithm17SwappedCreateFuncD0Ev,__ZN36btCompoundCompoundCollisionAlgorithm10CreateFuncD1Ev,__ZN36btCompoundCompoundCollisionAlgorithm10CreateFuncD0Ev,__ZN28btCompoundCollisionAlgorithm10CreateFuncD1Ev,__ZN28btCompoundCollisionAlgorithm10CreateFuncD0Ev,__ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD1Ev,__ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFuncD0Ev,__ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD1Ev,__ZN33btConvexConcaveCollisionAlgorithm10CreateFuncD0Ev,__ZN16btEmptyAlgorithmD1Ev,__ZN16btEmptyAlgorithmD0Ev,__ZN13btGhostObjectD2Ev,__ZN13btGhostObjectD0Ev,__ZN24btPairCachingGhostObjectD2Ev,__ZN24btPairCachingGhostObjectD0Ev,__ZN15btGjkConvexCastD1Ev,__ZN15btGjkConvexCastD0Ev,__ZN30btGjkEpaPenetrationDepthSolverD1Ev,__ZN30btGjkEpaPenetrationDepthSolverD0Ev
  ,__ZN17btGjkPairDetectorD1Ev,__ZN17btGjkPairDetectorD0Ev,__ZN16btManifoldResultD1Ev,__ZN16btManifoldResultD0Ev,__ZN33btMinkowskiPenetrationDepthSolverD1Ev,__ZN33btMinkowskiPenetrationDepthSolverD0Ev,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResultD2Ev,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResultD0Ev,__ZN14btOptimizedBvhD2Ev,__ZN14btOptimizedBvhD0Ev,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD2E_0v,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallbackD0E_0v,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD2Ev,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallbackD0Ev,__ZN28btHashedOverlappingPairCacheD2Ev,__ZN28btHashedOverlappingPairCacheD0Ev,__ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD2Ev,__ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallbackD0Ev,__ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD2Ev,__ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallbackD0Ev,__ZN23btPolyhedralConvexShapeD2Ev,__ZN23btPolyhedralConvexShapeD0Ev,__ZN14btQuantizedBvhD2Ev,__ZN14btQuantizedBvhD0Ev,__ZN28btTriangleConvexcastCallbackD1Ev,__ZN28btTriangleConvexcastCallbackD0Ev,__ZN15btTriangleShapeD1Ev,__ZN15btTriangleShapeD0Ev,__ZN25btSimulationIslandManagerD2Ev,__ZN25btSimulationIslandManagerD0Ev
  ,__ZN13btSphereShapeD1Ev,__ZN13btSphereShapeD0Ev,__ZN32btSphereSphereCollisionAlgorithmD2Ev,__ZN32btSphereSphereCollisionAlgorithmD0Ev,__ZN34btSphereTriangleCollisionAlgorithmD2Ev,__ZN34btSphereTriangleCollisionAlgorithmD0Ev,__ZN18btStaticPlaneShapeD2Ev,__ZN18btStaticPlaneShapeD0Ev,__ZN22btSubsimplexConvexCastD1Ev,__ZN22btSubsimplexConvexCastD0Ev,__ZN14btTriangleMeshD1Ev,__ZN14btTriangleMeshD0Ev,__ZN19btTriangleMeshShapeD2Ev,__ZN19btTriangleMeshShapeD0Ev,__ZN21SupportVertexCallbackD1Ev,__ZN21SupportVertexCallbackD0Ev,__ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD2Ev,__ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallbackD0Ev,__ZN22SphereTriangleDetectorD1Ev,__ZN22SphereTriangleDetectorD0Ev,__ZN26btBoxBoxCollisionAlgorithmD2Ev,__ZN26btBoxBoxCollisionAlgorithmD0Ev,__ZN16btBoxBoxDetectorD1Ev,__ZN16btBoxBoxDetectorD0Ev,__ZN28btCompoundCollisionAlgorithmD2Ev,__ZN28btCompoundCollisionAlgorithmD0Ev,__ZN22btCompoundLeafCallbackD1Ev,__ZN22btCompoundLeafCallbackD0Ev,__ZN36btCompoundCompoundCollisionAlgorithmD2Ev,__ZN36btCompoundCompoundCollisionAlgorithmD0Ev
  ,__ZN30btCompoundCompoundLeafCallbackD1Ev,__ZN30btCompoundCompoundLeafCallbackD0Ev,__ZN33btConvexConcaveCollisionAlgorithmD2Ev,__ZN33btConvexConcaveCollisionAlgorithmD0Ev,__ZN24btConvexTriangleCallbackD2Ev,__ZN24btConvexTriangleCallbackD0Ev,__ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD2Ev,__ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallbackD0Ev,__ZN23btConvexConvexAlgorithm10CreateFuncD2Ev,__ZN23btConvexConvexAlgorithm10CreateFuncD0Ev,__ZN23btConvexConvexAlgorithmD2Ev,__ZN23btConvexConvexAlgorithmD0Ev,__ZN24btPerturbedContactResultD1Ev,__ZN24btPerturbedContactResultD0Ev,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResultD2E_0v,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResultD0E_0v,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD2Ev,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResultD0Ev,__ZN31btConvexPlaneCollisionAlgorithmD2Ev,__ZN31btConvexPlaneCollisionAlgorithmD0Ev,__ZN18btConvexPolyhedronD2Ev,__ZN18btConvexPolyhedronD0Ev,__ZN23btHashedSimplePairCacheD2Ev,__ZN23btHashedSimplePairCacheD0Ev,__ZN26btTriangleIndexVertexArrayD2Ev,__ZN26btTriangleIndexVertexArrayD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev
  ,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2];
  var FUNCTION_TABLE_viiidii = [b3];
  var FUNCTION_TABLE_vii = [b4,__ZNK20btDefaultMotionState17getWorldTransformER11btTransform,__ZN20btDefaultMotionState17setWorldTransformERK11btTransform,__ZN21btConeTwistConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E,__ZN21btConeTwistConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E,__ZN16btCollisionWorld14setDebugDrawerEP12btIDebugDraw,__ZN23btDiscreteDynamicsWorld21removeCollisionObjectEP17btCollisionObject,__ZN23btDiscreteDynamicsWorld9serializeEP12btSerializer,__ZN23btDiscreteDynamicsWorld16removeConstraintEP17btTypedConstraint,__ZN23btDiscreteDynamicsWorld9addActionEP17btActionInterface,__ZN23btDiscreteDynamicsWorld12removeActionEP17btActionInterface,__ZN23btDiscreteDynamicsWorld10setGravityERK9btVector3,__ZNK23btDiscreteDynamicsWorld10getGravityEv,__ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBody,__ZN23btDiscreteDynamicsWorld15removeRigidBodyEP11btRigidBody,__ZN23btDiscreteDynamicsWorld19setConstraintSolverEP18btConstraintSolver,__ZN23btDiscreteDynamicsWorld10addVehicleEP17btActionInterface,__ZN23btDiscreteDynamicsWorld13removeVehicleEP17btActionInterface,__ZN23btDiscreteDynamicsWorld12addCharacterEP17btActionInterface,__ZN23btDiscreteDynamicsWorld15removeCharacterEP17btActionInterface,__ZN23btDiscreteDynamicsWorld16solveConstraintsER19btContactSolverInfo,__ZN23btDiscreteDynamicsWorld11setNumTasksEi,__ZN23btGeneric6DofConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E,__ZN23btGeneric6DofConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E,__ZN17btHingeConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E,__ZN17btHingeConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E,__ZN30btKinematicCharacterController9debugDrawEP12btIDebugDraw,__ZN30btKinematicCharacterController16setWalkDirectionERK9btVector3,__ZN30btKinematicCharacterController5resetEP16btCollisionWorld
  ,__ZN30btKinematicCharacterController4warpERK9btVector3,__ZN30btKinematicCharacterController7preStepEP16btCollisionWorld,__ZN30btKinematicCharacterController16setUpInterpolateEb,__ZN23btPoint2PointConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E,__ZN23btPoint2PointConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E,__ZN16btRaycastVehicle9debugDrawEP12btIDebugDraw,__ZN17btCollisionObject17setCollisionShapeEP16btCollisionShape,__ZNK11btRigidBody21serializeSingleObjectEP12btSerializer,__ZN18btSliderConstraint8getInfo1EPN17btTypedConstraint17btConstraintInfo1E,__ZN18btSliderConstraint8getInfo2EPN17btTypedConstraint17btConstraintInfo2E,__ZN20btAxisSweep3InternalItE25calculateOverlappingPairsEP12btDispatcher,__ZN20btAxisSweep3InternalItE9resetPoolEP12btDispatcher,__ZN15btNullPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback,__ZN15btNullPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback,__ZN15btNullPairCache20sortOverlappingPairsEP12btDispatcher,__ZN10btBoxShape15setLocalScalingERK9btVector3,__ZNK16btCollisionShape38getAnisotropicRollingFrictionDirectionEv,__ZNK16btCollisionShape20serializeSingleShapeEP12btSerializer,__ZN22btBvhTriangleMeshShape15setLocalScalingERK9btVector3,__ZNK22btBvhTriangleMeshShape18serializeSingleBvhEP12btSerializer,__ZNK22btBvhTriangleMeshShape30serializeSingleTriangleInfoMapEP12btSerializer,__ZN14btCapsuleShape15setLocalScalingERK9btVector3,__ZNK14btCapsuleShape38getAnisotropicRollingFrictionDirectionEv,__ZN21btCollisionDispatcher15releaseManifoldEP20btPersistentManifold,__ZN21btCollisionDispatcher13clearManifoldEP20btPersistentManifold,__ZN21btCollisionDispatcher22freeCollisionAlgorithmEPv,__ZN16btCollisionWorld21removeCollisionObjectEP17btCollisionObject,__ZN16btCollisionWorld9serializeEP12btSerializer,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN9RayTester7ProcessE_1PK10btDbvtNode,__ZN12btConvexCast10CastResult15drawCoordSystemERK11btTransform
  ,__ZN15btCompoundShape15setLocalScalingERK9btVector3,__ZN15btCompoundShape16removeChildShapeEP16btCollisionShape,__ZN11btConeShape15setLocalScalingERK9btVector3,__ZNK11btConeShape38getAnisotropicRollingFrictionDirectionEv,__ZNK12btConeShapeZ38getAnisotropicRollingFrictionDirectionEv,__ZNK12btConeShapeX38getAnisotropicRollingFrictionDirectionEv,__ZN17btConvexHullShape15setLocalScalingERK9btVector3,__ZN25btConvexTriangleMeshShape15setLocalScalingERK9btVector3,__ZN15btCylinderShape15setLocalScalingERK9btVector3,__ZNK15btCylinderShape38getAnisotropicRollingFrictionDirectionEv,__ZN16btDbvtBroadphase25calculateOverlappingPairsEP12btDispatcher,__ZN16btDbvtBroadphase9resetPoolEP12btDispatcher,__ZN20BroadphaseAabbTester7ProcessEPK10btDbvtNode,__ZN19BroadphaseRayTester7ProcessEPK10btDbvtNode,__ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNode,__ZN16btEmptyAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZNK17btCollisionObject21serializeSingleObjectEP12btSerializer,__ZN14btQuantizedBvh16deSerializeFloatER23btQuantizedBvhFloatData,__ZN14btQuantizedBvh17deSerializeDoubleER24btQuantizedBvhDoubleData,__ZN28btHashedOverlappingPairCache24setOverlapFilterCallbackEP23btOverlapFilterCallback,__ZN28btHashedOverlappingPairCache28setInternalGhostPairCallbackEP25btOverlappingPairCallback,__ZN28btHashedOverlappingPairCache20sortOverlappingPairsEP12btDispatcher,__ZN21btConvexInternalShape15setLocalScalingERK9btVector3,__ZN25btSimulationIslandManager26storeIslandActivationStateEP16btCollisionWorld,__ZN32btSphereSphereCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN34btSphereTriangleCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN18btStaticPlaneShape15setLocalScalingERK9btVector3,__ZN26btTriangleIndexVertexArray16unLockVertexBaseEi,__ZNK26btTriangleIndexVertexArray24unLockReadOnlyVertexBaseEi,__ZN14btTriangleMesh19preallocateVerticesEi
  ,__ZN14btTriangleMesh18preallocateIndicesEi,__ZN19btTriangleMeshShape15setLocalScalingERK9btVector3,__ZN26btBoxBoxCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN28btCompoundCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN22btCompoundLeafCallback7ProcessEPK10btDbvtNode,__ZN36btCompoundCompoundCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode,__ZN33btConvexConcaveCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN23btConvexConvexAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN31btConvexPlaneCollisionAlgorithm22getAllContactManifoldsER20btAlignedObjectArrayIP20btPersistentManifoldE,__ZN26btTriangleIndexVertexArray19preallocateVerticesEi,__ZN26btTriangleIndexVertexArray18preallocateIndicesEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiiiiiii = [b5,__ZN30btGjkEpaPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDraw,__ZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDraw,b5];
  var FUNCTION_TABLE_ii = [b6,__ZNK17btTypedConstraint28calculateSerializeBufferSizeEv,__ZNK21btConeTwistConstraint28calculateSerializeBufferSizeEv,__ZN16btCollisionWorld14getDebugDrawerEv,__ZN23btDiscreteDynamicsWorld19getConstraintSolverEv,__ZNK23btDiscreteDynamicsWorld17getNumConstraintsEv,__ZNK23btDiscreteDynamicsWorld12getWorldTypeEv,__ZNK23btGeneric6DofConstraint28calculateSerializeBufferSizeEv,__ZNK17btHingeConstraint28calculateSerializeBufferSizeEv,__ZNK30btKinematicCharacterController7canJumpEv,__ZNK30btKinematicCharacterController8onGroundEv,__ZNK23btPoint2PointConstraint28calculateSerializeBufferSizeEv,__ZNK11btRigidBody28calculateSerializeBufferSizeEv,__ZNK35btSequentialImpulseConstraintSolver13getSolverTypeEv,__ZNK18btSliderConstraint28calculateSerializeBufferSizeEv,__ZN20btAxisSweep3InternalItE23getOverlappingPairCacheEv,__ZNK20btAxisSweep3InternalItE23getOverlappingPairCacheEv,__ZN15btNullPairCache26getOverlappingPairArrayPtrEv,__ZNK15btNullPairCache26getOverlappingPairArrayPtrEv,__ZN15btNullPairCache23getOverlappingPairArrayEv,__ZNK15btNullPairCache22getNumOverlappingPairsEv,__ZN15btNullPairCache18hasDeferredRemovalEv,__ZNK21btConvexInternalShape15getLocalScalingEv,__ZNK10btBoxShape7getNameEv,__ZNK21btConvexInternalShape28calculateSerializeBufferSizeEv,__ZNK10btBoxShape36getNumPreferredPenetrationDirectionsEv,__ZNK10btBoxShape14getNumVerticesEv,__ZNK10btBoxShape11getNumEdgesEv,__ZNK10btBoxShape12getNumPlanesEv
  ,__ZNK19btTriangleMeshShape15getLocalScalingEv,__ZNK22btBvhTriangleMeshShape7getNameEv,__ZNK22btBvhTriangleMeshShape28calculateSerializeBufferSizeEv,__ZNK14btCapsuleShape7getNameEv,__ZNK14btCapsuleShape28calculateSerializeBufferSizeEv,__ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv,__ZNK15btCapsuleShapeX7getNameEv,__ZNK15btCapsuleShapeZ7getNameEv,__ZNK21btCollisionDispatcher15getNumManifoldsEv,__ZN21btCollisionDispatcher26getInternalManifoldPointerEv,__ZN21btCollisionDispatcher23getInternalManifoldPoolEv,__ZNK21btCollisionDispatcher23getInternalManifoldPoolEv,__ZNK15btCompoundShape15getLocalScalingEv,__ZNK15btCompoundShape7getNameEv,__ZNK15btCompoundShape28calculateSerializeBufferSizeEv,__ZNK11btConeShape7getNameEv,__ZNK11btConeShape28calculateSerializeBufferSizeEv,__ZNK12btConeShapeZ7getNameEv,__ZNK12btConeShapeX7getNameEv,__ZNK17btConvexHullShape7getNameEv,__ZNK17btConvexHullShape28calculateSerializeBufferSizeEv,__ZNK17btConvexHullShape14getNumVerticesEv,__ZNK17btConvexHullShape11getNumEdgesEv,__ZNK17btConvexHullShape12getNumPlanesEv,__ZNK25btConvexTriangleMeshShape15getLocalScalingEv,__ZNK25btConvexTriangleMeshShape7getNameEv,__ZNK25btConvexTriangleMeshShape14getNumVerticesEv,__ZNK25btConvexTriangleMeshShape11getNumEdgesEv,__ZNK25btConvexTriangleMeshShape12getNumPlanesEv,__ZNK15btCylinderShape7getNameEv
  ,__ZNK15btCylinderShape28calculateSerializeBufferSizeEv,__ZNK16btCylinderShapeX7getNameEv,__ZNK16btCylinderShapeZ7getNameEv,__ZN16btDbvtBroadphase23getOverlappingPairCacheEv,__ZNK16btDbvtBroadphase23getOverlappingPairCacheEv,__ZN31btDefaultCollisionConfiguration25getPersistentManifoldPoolEv,__ZN31btDefaultCollisionConfiguration25getCollisionAlgorithmPoolEv,__ZN31btDefaultCollisionConfiguration16getSimplexSolverEv,__ZNK17btCollisionObject28calculateSerializeBufferSizeEv,__ZNK14btQuantizedBvh31calculateSerializeBufferSizeNewEv,__ZN28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv,__ZNK28btHashedOverlappingPairCache26getOverlappingPairArrayPtrEv,__ZN28btHashedOverlappingPairCache23getOverlappingPairArrayEv,__ZNK28btHashedOverlappingPairCache22getNumOverlappingPairsEv,__ZN28btHashedOverlappingPairCache18hasDeferredRemovalEv,__ZNK15btTriangleShape7getNameEv,__ZNK15btTriangleShape36getNumPreferredPenetrationDirectionsEv,__ZNK15btTriangleShape14getNumVerticesEv,__ZNK15btTriangleShape11getNumEdgesEv,__ZNK15btTriangleShape12getNumPlanesEv,__ZNK13btSphereShape7getNameEv,__ZNK18btStaticPlaneShape15getLocalScalingEv,__ZNK18btStaticPlaneShape7getNameEv,__ZNK18btStaticPlaneShape28calculateSerializeBufferSizeEv,__ZNK26btTriangleIndexVertexArray14getNumSubPartsEv,__ZNK26btTriangleIndexVertexArray14hasPremadeAabbEv,__ZNK23btStridingMeshInterface28calculateSerializeBufferSizeEv,__ZNK19btTriangleMeshShape7getNameEv,__ZNK16btCollisionShape28calculateSerializeBufferSizeEv,__ZN23btHashedSimplePairCache26getOverlappingPairArrayPtrEv
  ,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viidi = [b7,__ZN21btConeTwistConstraint8setParamEifi,__ZN23btGeneric6DofConstraint8setParamEifi,__ZN17btHingeConstraint8setParamEifi,__ZN23btPoint2PointConstraint8setParamEifi,__ZN18btSliderConstraint8setParamEifi,b7,b7];
  var FUNCTION_TABLE_viddiii = [b8];
  var FUNCTION_TABLE_vidii = [b9];
  var FUNCTION_TABLE_iiiii = [b10,__ZN19btGhostPairCallback21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher,__ZN25btDefaultVehicleRaycaster7castRayERK9btVector3S2_RN18btVehicleRaycaster24btVehicleRaycasterResultE,__ZN15btNullPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher,__ZN21btCollisionDispatcher13findAlgorithmEPK24btCollisionObjectWrapperS2_P20btPersistentManifold,__ZN31btConvexPlaneCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN26btBoxBoxCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN34btSphereTriangleCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN32btSphereSphereCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN16btEmptyAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN28btCompoundCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN36btCompoundCompoundCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN28btCompoundCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN33btConvexConcaveCollisionAlgorithm17SwappedCreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZN33btConvexConcaveCollisionAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,__ZNK14btQuantizedBvh9serializeEPvjb,__ZNK14btOptimizedBvh16serializeInPlaceEPvjb,__ZN28btHashedOverlappingPairCache21removeOverlappingPairEP17btBroadphaseProxyS1_P12btDispatcher,__ZN23btConvexConvexAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoPK24btCollisionObjectWrapperS5_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10];
  var FUNCTION_TABLE_vidi = [b11,__ZNK10btBoxShape21calculateLocalInertiaEfR9btVector3,__ZNK19btTriangleMeshShape21calculateLocalInertiaEfR9btVector3,__ZNK14btCapsuleShape21calculateLocalInertiaEfR9btVector3,__ZNK15btCompoundShape21calculateLocalInertiaEfR9btVector3,__ZNK11btConeShape21calculateLocalInertiaEfR9btVector3,__ZNK23btPolyhedralConvexShape21calculateLocalInertiaEfR9btVector3,__ZNK15btCylinderShape21calculateLocalInertiaEfR9btVector3,__ZNK15btTriangleShape21calculateLocalInertiaEfR9btVector3,__ZNK13btSphereShape21calculateLocalInertiaEfR9btVector3,__ZNK18btStaticPlaneShape21calculateLocalInertiaEfR9btVector3,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_diiiiiiii = [b12,__ZN29ConcreteContactResultCallback15addSingleResultER15btManifoldPointPK24btCollisionObjectWrapperiiS4_ii];
  var FUNCTION_TABLE_viiiiddddiid = [b13];
  var FUNCTION_TABLE_diiiii = [b14,__ZN16btEmptyAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN32btSphereSphereCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN34btSphereTriangleCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN26btBoxBoxCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN28btCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN36btCompoundCompoundCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN23btConvexConvexAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,__ZN31btConvexPlaneCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResult,b14,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_iiii = [b15,__ZNK17btTypedConstraint9serializeEPvP12btSerializer,__ZN19btGhostPairCallback18addOverlappingPairEP17btBroadphaseProxyS1_,__ZNK21btConeTwistConstraint9serializeEPvP12btSerializer,__ZNK23btGeneric6DofConstraint9serializeEPvP12btSerializer,__ZNK17btHingeConstraint9serializeEPvP12btSerializer,__ZNK23btPoint2PointConstraint9serializeEPvP12btSerializer,__ZNK11btRigidBody9serializeEPvP12btSerializer,__ZNK18btSliderConstraint9serializeEPvP12btSerializer,__ZN15btNullPairCache18addOverlappingPairEP17btBroadphaseProxyS1_,__ZN15btNullPairCache8findPairEP17btBroadphaseProxyS1_,__ZNK21btConvexInternalShape9serializeEPvP12btSerializer,__ZNK22btBvhTriangleMeshShape9serializeEPvP12btSerializer,__ZNK14btCapsuleShape9serializeEPvP12btSerializer,__ZN21btCollisionDispatcher14getNewManifoldEPK17btCollisionObjectS2_,__ZN21btCollisionDispatcher14needsCollisionEPK17btCollisionObjectS2_,__ZN21btCollisionDispatcher13needsResponseEPK17btCollisionObjectS2_,__ZNK15btCompoundShape9serializeEPvP12btSerializer,__ZNK11btConeShape9serializeEPvP12btSerializer,__ZNK17btConvexHullShape9serializeEPvP12btSerializer,__ZNK15btCylinderShape9serializeEPvP12btSerializer,__ZN31btDefaultCollisionConfiguration31getCollisionAlgorithmCreateFuncEii,__ZNK17btCollisionObject9serializeEPvP12btSerializer,__ZNK14btQuantizedBvh9serializeEPvP12btSerializer,__ZN28btHashedOverlappingPairCache18addOverlappingPairEP17btBroadphaseProxyS1_,__ZN28btHashedOverlappingPairCache8findPairEP17btBroadphaseProxyS1_,__ZNK18btStaticPlaneShape9serializeEPvP12btSerializer,__ZNK23btStridingMeshInterface9serializeEPvP12btSerializer,__ZNK16btCollisionShape9serializeEPvP12btSerializer
  ,__ZN23btHashedSimplePairCache21removeOverlappingPairEii,__ZN23btHashedSimplePairCache18addOverlappingPairEii,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv];
  var FUNCTION_TABLE_viiiiii = [b16,__ZN27InplaceSolverIslandCallback13processIslandEPP17btCollisionObjectiPP20btPersistentManifoldii,__ZN20btAxisSweep3InternalItE7rayTestERK9btVector3S3_R23btBroadphaseRayCallbackS3_S3_,__ZN16btDbvtBroadphase7rayTestERK9btVector3S2_R23btBroadphaseRayCallbackS2_S2_,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b16];
  var FUNCTION_TABLE_iiid = [b17,__ZNK10btBoxShape8isInsideERK9btVector3f,__ZNK17btConvexHullShape8isInsideERK9btVector3f,__ZNK25btConvexTriangleMeshShape8isInsideERK9btVector3f,__ZNK15btTriangleShape8isInsideERK9btVector3f,b17,b17,b17];
  var FUNCTION_TABLE_di = [b18,__ZNK16btCollisionShape20getAngularMotionDiscEv,__ZNK21btConvexInternalShape9getMarginEv,__ZNK14btConcaveShape9getMarginEv,__ZNK15btCompoundShape9getMarginEv,__ZNK15btCylinderShape9getRadiusEv,__ZNK16btCylinderShapeX9getRadiusEv,__ZNK16btCylinderShapeZ9getRadiusEv,__ZNK13btSphereShape9getMarginEv,b18,b18,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_iiiiiii = [b19,__ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE,__ZN15btGjkConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE,__ZN22btSubsimplexConvexCast16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE];
  var FUNCTION_TABLE_diiidii = [b20,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitE_0RK9btVector3SE_fii,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN32BridgeTriangleConvexcastCallback9reportHitERK9btVector3SE_fii,b20];
  var FUNCTION_TABLE_viidii = [b21];
  var FUNCTION_TABLE_viiiiiii = [b22,__ZNK17btConvexHullShape7projectERK11btTransformRK9btVector3RfS6_RS3_S7_];
  var FUNCTION_TABLE_viiiiiiiii = [b23,__ZN35btSequentialImpulseConstraintSolver45solveGroupCacheFriendlySplitImpulseIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw];
  var FUNCTION_TABLE_viiiiiiiiii = [b24,__ZN26btTriangleIndexVertexArray24getLockedVertexIndexBaseEPPhRiR14PHY_ScalarTypeS2_S1_S2_S2_S4_i,__ZNK26btTriangleIndexVertexArray32getLockedReadOnlyVertexIndexBaseEPPKhRiR14PHY_ScalarTypeS3_S2_S3_S3_S5_i,b24];
  var FUNCTION_TABLE_iii = [b25,__ZNK16btCollisionWorld17RayResultCallback14needsCollisionEP17btBroadphaseProxy,__ZNK16btCollisionWorld20ConvexResultCallback14needsCollisionEP17btBroadphaseProxy,__ZNK16btCollisionWorld21ContactResultCallback14needsCollisionEP17btBroadphaseProxy,__ZN23btDiscreteDynamicsWorld13getConstraintEi,__ZNK23btDiscreteDynamicsWorld13getConstraintEi,__ZNK34btClosestNotMeConvexResultCallback14needsCollisionEP17btBroadphaseProxy,__ZNK11btRigidBody24checkCollideWithOverrideEPK17btCollisionObject,__ZN23btPolyhedralConvexShape28initializePolyhedralFeaturesEi,__ZN21btCollisionDispatcher26getManifoldByIndexInternalEi,__ZN21btCollisionDispatcher26allocateCollisionAlgorithmEi,__ZN23btCollisionPairCallback14processOverlapER16btBroadphasePair,__ZN21btSingleSweepCallback7processEPK17btBroadphaseProxy,__ZN19btSingleRayCallback7processEPK17btBroadphaseProxy,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfENK14LocalInfoAdder14needsCollisionE_1P17btBroadphaseProxy,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEENK15LocalInfoAdder214needsCollisionEP17btBroadphaseProxy,__ZN6btDbvt8ICollide7DescentEPK10btDbvtNode,__ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode,__ZNK17btCollisionObject24checkCollideWithOverrideEPKS_,__ZZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcherEN18RemovePairCallback14processOverlapER16btBroadphasePair,__ZZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcherEN17CleanPairCallback14processOverlapER16btBroadphasePair,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25];
  var FUNCTION_TABLE_diii = [b26,__ZN16btCollisionWorld24ClosestRayResultCallback15addSingleResultERNS_14LocalRayResultEb,__ZN16btCollisionWorld27ClosestConvexResultCallback15addSingleResultERNS_17LocalConvexResultEb,__ZNK21btConeTwistConstraint8getParamEii,__ZN34btClosestNotMeConvexResultCallback15addSingleResultERN16btCollisionWorld17LocalConvexResultEb,__ZNK23btGeneric6DofConstraint8getParamEii,__ZNK17btHingeConstraint8getParamEii,__ZN43btKinematicClosestNotMeConvexResultCallback15addSingleResultERN16btCollisionWorld17LocalConvexResultEb,__ZNK23btPoint2PointConstraint8getParamEii,__ZNK18btSliderConstraint8getParamEii,__ZZN16btCollisionWorld25objectQuerySingleInternalEPK13btConvexShapeRK11btTransformS5_PK24btCollisionObjectWrapperRNS_20ConvexResultCallbackEfEN14LocalInfoAdder15addSingleResultE_1RNS_17LocalConvexResultEb,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN15LocalInfoAdder215addSingleResultERNS_14LocalRayResultEb,b26,b26,b26,b26];
  var FUNCTION_TABLE_diiiiiiiiii = [b27,__ZN35btSequentialImpulseConstraintSolver10solveGroupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDrawP12btDispatcher,__ZN35btSequentialImpulseConstraintSolver20solveSingleIterationEiPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw,b27];
  var FUNCTION_TABLE_viiiid = [b28,__ZN17btTypedConstraint21setupSolverConstraintER20btAlignedObjectArrayI18btSolverConstraintEiif];
  var FUNCTION_TABLE_diiiiiiiii = [b29,__ZN35btSequentialImpulseConstraintSolver28solveGroupCacheFriendlySetupEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw,__ZN35btSequentialImpulseConstraintSolver33solveGroupCacheFriendlyIterationsEPP17btCollisionObjectiPP20btPersistentManifoldiPP17btTypedConstraintiRK19btContactSolverInfoP12btIDebugDraw,b29];
  var FUNCTION_TABLE_did = [b30,__ZNK16btCollisionShape27getContactBreakingThresholdEf];
  var FUNCTION_TABLE_viiiidddddidi = [b31];
  var FUNCTION_TABLE_diidii = [b32,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitE_0RK9btVector3fii,__ZZN16btCollisionWorld21rayTestSingleInternalERK11btTransformS2_PK24btCollisionObjectWrapperRNS_17RayResultCallbackEEN29BridgeTriangleRaycastCallback9reportHitERK9btVector3fii,b32];
  var FUNCTION_TABLE_diiii = [b33,__ZN35btSequentialImpulseConstraintSolver29solveGroupCacheFriendlyFinishEPP17btCollisionObjectiRK19btContactSolverInfo];
  var FUNCTION_TABLE_iiiiiiiiii = [b34,__ZN20btAxisSweep3InternalItE11createProxyERK9btVector3S3_iPvssP12btDispatcherS4_,__ZN16btDbvtBroadphase11createProxyERK9btVector3S2_iPvssP12btDispatcherS3_,b34];
  var FUNCTION_TABLE_viiid = [b35,__ZN17btTypedConstraint23solveConstraintObsoleteER12btSolverBodyS1_f,__ZN21btConeTwistConstraint23solveConstraintObsoleteER12btSolverBodyS1_f,__ZN23btBridgedManifoldResult15addContactPointERK9btVector3S2_f,__ZN16btPointCollector15addContactPointERK9btVector3S2_f,__ZN16btManifoldResult15addContactPointERK9btVector3S2_f,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResult15addContactPointERKS8_SE_f,__ZN24btPerturbedContactResult15addContactPointERK9btVector3S2_f,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResult15addContactPointE_0RK9btVector3SB_f,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult15addContactPointERK9btVector3SB_f,b35,b35,b35,b35,b35,b35];
  var FUNCTION_TABLE_viii = [b36,__ZN19btGhostPairCallback37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher,__ZN21btConeTwistConstraint9setFramesERK11btTransformS2_,__ZN23btDiscreteDynamicsWorld13addConstraintEP17btTypedConstraintb,__ZN18btConstraintSolver12prepareSolveEii,__ZN18btConstraintSolver9allSolvedERK19btContactSolverInfoP12btIDebugDraw,__ZN20btAxisSweep3InternalItE12destroyProxyEP17btBroadphaseProxyP12btDispatcher,__ZNK20btAxisSweep3InternalItE17getBroadphaseAabbER9btVector3S2_,__ZN15btNullPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher,__ZN15btNullPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher,__ZN15btNullPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher,__ZN15btNullPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher,__ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf,__ZNK10btBoxShape24localGetSupportingVertexERK9btVector3,__ZNK10btBoxShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK10btBoxShape32getPreferredPenetrationDirectionEiR9btVector3,__ZNK10btBoxShape9getVertexEiR9btVector3,__ZNK10btBoxShape16getPlaneEquationER9btVector4i,__ZNK19btTriangleMeshShape24localGetSupportingVertexERK9btVector3,__ZNK19btTriangleMeshShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii,__ZZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_EN21MyNodeOverlapCallback11processNodeEii,__ZZN22btBvhTriangleMeshShape14performRaycastEP18btTriangleCallbackRK9btVector3S4_EN21MyNodeOverlapCallback11processNodeEii,__ZNK21btConvexInternalShape24localGetSupportingVertexERK9btVector3,__ZNK14btCapsuleShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3,__ZN16btManifoldResult20setShapeIdentifiersAEii,__ZN16btManifoldResult20setShapeIdentifiersBEii,__ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_
  ,__ZN12btConvexCast10CastResult13reportFailureEii,__ZNK11btConeShape24localGetSupportingVertexERK9btVector3,__ZNK11btConeShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZN16btPointCollector20setShapeIdentifiersAEii,__ZN16btPointCollector20setShapeIdentifiersBEii,__ZNK17btConvexHullShape24localGetSupportingVertexERK9btVector3,__ZNK17btConvexHullShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK17btConvexHullShape9getVertexEiR9btVector3,__ZNK25btConvexTriangleMeshShape24localGetSupportingVertexERK9btVector3,__ZNK25btConvexTriangleMeshShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK25btConvexTriangleMeshShape9getVertexEiR9btVector3,__ZNK15btCylinderShape24localGetSupportingVertexERK9btVector3,__ZNK15btCylinderShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK16btCylinderShapeX37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK16btCylinderShapeZ37localGetSupportingVertexWithoutMarginERK9btVector3,__ZN16btDbvtBroadphase12destroyProxyEP17btBroadphaseProxyP12btDispatcher,__ZNK16btDbvtBroadphase17getBroadphaseAabbER9btVector3S1_,__ZN18btDbvtTreeCollider7ProcessEPK10btDbvtNodeS2_,__ZN13btGhostObject28addOverlappingObjectInternalEP17btBroadphaseProxyS1_,__ZN24btPairCachingGhostObject28addOverlappingObjectInternalEP17btBroadphaseProxyS1_,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResult20setShapeIdentifiersAEii,__ZZN33btMinkowskiPenetrationDepthSolver12calcPenDepthER22btVoronoiSimplexSolverPK13btConvexShapeS4_RK11btTransformS7_R9btVector3S9_S9_P12btIDebugDrawEN20btIntermediateResult20setShapeIdentifiersBEii,__ZN28btHashedOverlappingPairCache37removeOverlappingPairsContainingProxyEP17btBroadphaseProxyP12btDispatcher,__ZN28btHashedOverlappingPairCache20cleanOverlappingPairER16btBroadphasePairP12btDispatcher,__ZN28btHashedOverlappingPairCache19cleanProxyFromPairsEP17btBroadphaseProxyP12btDispatcher,__ZN28btHashedOverlappingPairCache26processAllOverlappingPairsEP17btOverlapCallbackP12btDispatcher,__ZNK23btPolyhedralConvexShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK15btTriangleShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK15btTriangleShape32getPreferredPenetrationDirectionEiR9btVector3,__ZNK15btTriangleShape9getVertexEiR9btVector3
  ,__ZN25btSimulationIslandManager21updateActivationStateEP16btCollisionWorldP12btDispatcher,__ZNK13btSphereShape24localGetSupportingVertexERK9btVector3,__ZNK13btSphereShape37localGetSupportingVertexWithoutMarginERK9btVector3,__ZNK26btTriangleIndexVertexArray14setPremadeAabbERK9btVector3S2_,__ZNK26btTriangleIndexVertexArray14getPremadeAabbEP9btVector3S1_,__ZN30btCompoundCompoundLeafCallback7ProcessEPK10btDbvtNodeS2_,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResult20setShapeIdentifiersAE_0ii,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN21btWithoutMarginResult20setShapeIdentifiersBE_0ii,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersAEii,__ZZN23btConvexConvexAlgorithm16processCollisionEPK24btCollisionObjectWrapperS2_RK16btDispatcherInfoP16btManifoldResultEN13btDummyResult20setShapeIdentifiersBEii,__ZN21btCollisionDispatcher19defaultNearCallbackER16btBroadphasePairRS_RK16btDispatcherInfo,__ZNK13btConvexShape31localGetSupportVertexNonVirtualERK9btVector3,__ZNK13btConvexShape44localGetSupportVertexWithoutMarginNonVirtualERK9btVector3,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
  ,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36
  ,b36,b36,b36,b36,b36,b36,b36,b36,b36];
  var FUNCTION_TABLE_v = [b37,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
  var FUNCTION_TABLE_viid = [b38,__ZN30btKinematicCharacterController12updateActionEP16btCollisionWorldf,__ZN30btKinematicCharacterController26setVelocityForTimeIntervalERK9btVector3f,__ZN30btKinematicCharacterController10playerStepEP16btCollisionWorldf,__ZN16btRaycastVehicle12updateActionEP16btCollisionWorldf,__ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef,b38,b38];
  var FUNCTION_TABLE_iidid = [b39,__ZN23btDiscreteDynamicsWorld14stepSimulationEfif];
  var FUNCTION_TABLE_viiii = [b40,__ZN16btCollisionWorld15debugDrawObjectERK11btTransformPK16btCollisionShapeRK9btVector3,__ZNK16btCollisionWorld7rayTestERK9btVector3S2_RNS_17RayResultCallbackE,__ZN23btDiscreteDynamicsWorld18addCollisionObjectEP17btCollisionObjectss,__ZN23btDiscreteDynamicsWorld12addRigidBodyEP11btRigidBodyss,__ZN16btRaycastVehicle19setCoordinateSystemEiii,__ZN35btSequentialImpulseConstraintSolver15convertContactsEPP20btPersistentManifoldiRK19btContactSolverInfo,__ZNK20btAxisSweep3InternalItE7getAabbEP17btBroadphaseProxyR9btVector3S4_,__ZN20btAxisSweep3InternalItE8aabbTestERK9btVector3S3_R24btBroadphaseAabbCallback,__ZNK10btBoxShape7getAabbERK11btTransformR9btVector3S4_,__ZNK10btBoxShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_,__ZNK10btBoxShape7getEdgeEiR9btVector3S1_,__ZNK10btBoxShape8getPlaneER9btVector3S1_i,__ZNK19btTriangleMeshShape7getAabbERK11btTransformR9btVector3S4_,__ZNK22btBvhTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,__ZNK14btCapsuleShape7getAabbERK11btTransformR9btVector3S4_,__ZNK14btCapsuleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZN21btCollisionDispatcher25dispatchAllCollisionPairsEP22btOverlappingPairCacheRK16btDispatcherInfoP12btDispatcher,__ZN16btCollisionWorld18addCollisionObjectEP17btCollisionObjectss,__ZN17DebugDrawcallback15processTriangleEP9btVector3ii,__ZN17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii,__ZThn4_N17DebugDrawcallback28internalProcessTriangleIndexEP9btVector3ii,__ZN28btTriangleConvexcastCallback15processTriangleEP9btVector3ii,__ZN25btTriangleRaycastCallback15processTriangleEP9btVector3ii,__ZNK15btCompoundShape7getAabbERK11btTransformR9btVector3S4_,__ZNK21btConvexInternalShape7getAabbERK11btTransformR9btVector3S4_,__ZNK11btConeShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK34btPolyhedralConvexAabbCachingShape7getAabbERK11btTransformR9btVector3S4_
  ,__ZNK17btConvexHullShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK17btConvexHullShape7getEdgeEiR9btVector3S1_,__ZNK17btConvexHullShape8getPlaneER9btVector3S1_i,__ZNK25btConvexTriangleMeshShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK25btConvexTriangleMeshShape7getEdgeEiR9btVector3S1_,__ZNK25btConvexTriangleMeshShape8getPlaneER9btVector3S1_i,__ZN26LocalSupportVertexCallback28internalProcessTriangleIndexEP9btVector3ii,__ZNK15btCylinderShape7getAabbERK11btTransformR9btVector3S4_,__ZNK15btCylinderShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK16btCylinderShapeX49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK16btCylinderShapeZ49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK16btDbvtBroadphase7getAabbEP17btBroadphaseProxyR9btVector3S3_,__ZN16btDbvtBroadphase8aabbTestERK9btVector3S2_R24btBroadphaseAabbCallback,__ZN13btGhostObject31removeOverlappingObjectInternalEP17btBroadphaseProxyP12btDispatcherS1_,__ZN24btPairCachingGhostObject31removeOverlappingObjectInternalEP17btBroadphaseProxyP12btDispatcherS1_,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN20NodeTriangleCallback28internalProcessTriangleIndexE_0PS2_ii,__ZZN14btOptimizedBvh5buildEP23btStridingMeshInterfacebRK9btVector3S4_EN29QuantizedNodeTriangleCallback28internalProcessTriangleIndexEPS2_ii,__ZNK23btPolyhedralConvexShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK15btTriangleShape7getAabbERK11btTransformR9btVector3S4_,__ZNK15btTriangleShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK15btTriangleShape7getEdgeEiR9btVector3S1_,__ZNK15btTriangleShape8getPlaneER9btVector3S1_i,__ZNK15btTriangleShape16getPlaneEquationEiR9btVector3S1_,__ZNK13btSphereShape7getAabbERK11btTransformR9btVector3S4_,__ZNK13btSphereShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,__ZNK18btStaticPlaneShape7getAabbERK11btTransformR9btVector3S4_,__ZNK18btStaticPlaneShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,__ZNK23btStridingMeshInterface27InternalProcessAllTrianglesEP31btInternalTriangleIndexCallbackRK9btVector3S4_,__ZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,__ZN21SupportVertexCallback15processTriangleEP9btVector3ii
  ,__ZZNK19btTriangleMeshShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_EN16FilteredCallback28internalProcessTriangleIndexEPS2_ii,__ZN24btConvexTriangleCallback15processTriangleEP9btVector3ii,__ZZN33btConvexConcaveCollisionAlgorithm21calculateTimeOfImpactEP17btCollisionObjectS1_RK16btDispatcherInfoP16btManifoldResultEN31LocalTriangleSphereCastCallback15processTriangleEP9btVector3ii,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
  ,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40,b40
  ,b40,b40,b40,b40,b40,b40,b40,b40,b40];

    return { _emscripten_bind_btCylinderShape___destroy___0: _emscripten_bind_btCylinderShape___destroy___0, _strlen: _strlen, _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1: _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1, _emscripten_bind_btCollisionObject_isActive_0: _emscripten_bind_btCollisionObject_isActive_0, _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1: _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1, _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4: _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4, _emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0: _emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0, _emscripten_bind_btQuaternion_setX_1: _emscripten_bind_btQuaternion_setX_1, _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0: _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0, _emscripten_bind_btQuaternion_setZ_1: _emscripten_bind_btQuaternion_setZ_1, _emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0: _emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0, _emscripten_bind_btKinematicCharacterController_setMaxSlope_1: _emscripten_bind_btKinematicCharacterController_setMaxSlope_1, _emscripten_bind_btQuadWord_z_0: _emscripten_bind_btQuadWord_z_0, _emscripten_bind_btTransform_setIdentity_0: _emscripten_bind_btTransform_setIdentity_0, _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0: _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0, _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0: _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0, _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0, _emscripten_bind_btCollisionDispatcher___destroy___0: _emscripten_bind_btCollisionDispatcher___destroy___0, _emscripten_bind_btRigidBody_applyCentralImpulse_1: _emscripten_bind_btRigidBody_applyCentralImpulse_1, _emscripten_bind_btDefaultMotionState_getWorldTransform_1: _emscripten_bind_btDefaultMotionState_getWorldTransform_1, _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1: _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1, _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3: _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3, _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2: _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2, _emscripten_bind_btVector3_op_mul_1: _emscripten_bind_btVector3_op_mul_1, _emscripten_bind_btDynamicsWorld_rayTest_3: _emscripten_bind_btDynamicsWorld_rayTest_3, _emscripten_bind_btRaycastVehicle_updateWheelTransform_2: _emscripten_bind_btRaycastVehicle_updateWheelTransform_2, _emscripten_bind_btQuadWord_x_0: _emscripten_bind_btQuadWord_x_0, _emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0: _emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0, _emscripten_bind_btCollisionObject_isKinematicObject_0: _emscripten_bind_btCollisionObject_isKinematicObject_0, _emscripten_bind_ConvexResultCallback___destroy___0: _emscripten_bind_ConvexResultCallback___destroy___0, _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1: _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1, _emscripten_bind_btRigidBody_getCenterOfMassTransform_0: _emscripten_bind_btRigidBody_getCenterOfMassTransform_0, _emscripten_bind_btGhostObject_isKinematicObject_0: _emscripten_bind_btGhostObject_isKinematicObject_0, _emscripten_bind_btCapsuleShape___destroy___0: _emscripten_bind_btCapsuleShape___destroy___0, _emscripten_bind_btCollisionObject_activate_1: _emscripten_bind_btCollisionObject_activate_1, _emscripten_bind_btCollisionObject_activate_0: _emscripten_bind_btCollisionObject_activate_0, _emscripten_bind_btKinematicCharacterController_setUpAxis_1: _emscripten_bind_btKinematicCharacterController_setUpAxis_1, _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1: _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1, _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1: _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1, _emscripten_bind_btVector3_setX_1: _emscripten_bind_btVector3_setX_1, _emscripten_bind_btCollisionConfiguration___destroy___0: _emscripten_bind_btCollisionConfiguration___destroy___0, _emscripten_bind_btQuaternion_btQuaternion_4: _emscripten_bind_btQuaternion_btQuaternion_4, _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1: _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1, _emscripten_bind_btManifoldPoint_set_m_localPointB_1: _emscripten_bind_btManifoldPoint_set_m_localPointB_1, _emscripten_bind_btVector3_setZ_1: _emscripten_bind_btVector3_setZ_1, _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0: _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0, _emscripten_bind_btQuaternion_setValue_4: _emscripten_bind_btQuaternion_setValue_4, _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1: _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1, _emscripten_bind_LocalShapeInfo___destroy___0: _emscripten_bind_LocalShapeInfo___destroy___0, _emscripten_bind_btQuadWord_setY_1: _emscripten_bind_btQuadWord_setY_1, _emscripten_bind_btRigidBody_isKinematicObject_0: _emscripten_bind_btRigidBody_isKinematicObject_0, _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1, _emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0: _emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0, _emscripten_bind_btConeTwistConstraint_setDamping_1: _emscripten_bind_btConeTwistConstraint_setDamping_1, _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0: _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0, _emscripten_bind_btCollisionWorld___destroy___0: _emscripten_bind_btCollisionWorld___destroy___0, _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0: _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0, _emscripten_bind_btBoxShape_btBoxShape_1: _emscripten_bind_btBoxShape_btBoxShape_1, _emscripten_bind_btPersistentManifold_getBody1_0: _emscripten_bind_btPersistentManifold_getBody1_0, _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1: _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1, _emscripten_bind_btKinematicCharacterController_setGravity_1: _emscripten_bind_btKinematicCharacterController_setGravity_1, _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1: _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1, _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5: _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5, _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3: _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3, _emscripten_bind_LocalShapeInfo_get_m_shapePart_0: _emscripten_bind_LocalShapeInfo_get_m_shapePart_0, _emscripten_bind_btWheelInfo_get_m_rollInfluence_0: _emscripten_bind_btWheelInfo_get_m_rollInfluence_0, _emscripten_bind_btVector4_setValue_4: _emscripten_bind_btVector4_setValue_4, _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1: _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1, _emscripten_bind_btDynamicsWorld_getDispatchInfo_0: _emscripten_bind_btDynamicsWorld_getDispatchInfo_0, _emscripten_bind_btVector3_length_0: _emscripten_bind_btVector3_length_0, _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2: _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2, _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1: _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1, _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1: _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1, _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1: _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1, _emscripten_bind_btPairCachingGhostObject___destroy___0: _emscripten_bind_btPairCachingGhostObject___destroy___0, _emscripten_bind_btPairCachingGhostObject_activate_0: _emscripten_bind_btPairCachingGhostObject_activate_0, _emscripten_bind_btPairCachingGhostObject_activate_1: _emscripten_bind_btPairCachingGhostObject_activate_1, _emscripten_bind_btPairCachingGhostObject_forceActivationState_1: _emscripten_bind_btPairCachingGhostObject_forceActivationState_1, _emscripten_bind_btDefaultMotionState___destroy___0: _emscripten_bind_btDefaultMotionState___destroy___0, _emscripten_bind_btDispatcherInfo_get_m_stepCount_0: _emscripten_bind_btDispatcherInfo_get_m_stepCount_0, _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1, _emscripten_bind_btQuadWord_setW_1: _emscripten_bind_btQuadWord_setW_1, _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0, _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2: _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2, _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0: _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0, _emscripten_bind_btRigidBody_setLinearFactor_1: _emscripten_bind_btRigidBody_setLinearFactor_1, _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1: _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1, _emscripten_bind_btRaycastVehicle_setSteeringValue_2: _emscripten_bind_btRaycastVehicle_setSteeringValue_2, _emscripten_bind_btPoint2PointConstraint___destroy___0: _emscripten_bind_btPoint2PointConstraint___destroy___0, _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2: _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2, _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1: _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1, _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1, _malloc: _malloc, _emscripten_bind_btDispatcherInfo_get_m_useEpa_0: _emscripten_bind_btDispatcherInfo_get_m_useEpa_0, _emscripten_bind_btTransform_btTransform_2: _emscripten_bind_btTransform_btTransform_2, _emscripten_bind_btTransform_btTransform_0: _emscripten_bind_btTransform_btTransform_0, _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1: _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1, _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1: _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1, _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3: _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3, _emscripten_bind_btCollisionObject_setActivationState_1: _emscripten_bind_btCollisionObject_setActivationState_1, _emscripten_bind_btPersistentManifold___destroy___0: _emscripten_bind_btPersistentManifold___destroy___0, _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0: _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0, _emscripten_bind_btCylinderShapeZ___destroy___0: _emscripten_bind_btCylinderShapeZ___destroy___0, _emscripten_bind_btMatrix3x3___destroy___0: _emscripten_bind_btMatrix3x3___destroy___0, _emscripten_bind_ConvexResultCallback_hasHit_0: _emscripten_bind_ConvexResultCallback_hasHit_0, _emscripten_bind_btCollisionShape_calculateLocalInertia_2: _emscripten_bind_btCollisionShape_calculateLocalInertia_2, _emscripten_bind_btCollisionWorld_convexSweepTest_5: _emscripten_bind_btCollisionWorld_convexSweepTest_5, _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1: _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1, _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2: _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2, _emscripten_bind_btConstraintSetting_set_m_damping_1: _emscripten_bind_btConstraintSetting_set_m_damping_1, _emscripten_bind_btVehicleRaycaster___destroy___0: _emscripten_bind_btVehicleRaycaster___destroy___0, _emscripten_bind_btRigidBody_applyForce_2: _emscripten_bind_btRigidBody_applyForce_2, _emscripten_bind_btConeShapeZ_calculateLocalInertia_2: _emscripten_bind_btConeShapeZ_calculateLocalInertia_2, _emscripten_bind_btConstraintSetting_set_m_tau_1: _emscripten_bind_btConstraintSetting_set_m_tau_1, _emscripten_bind_btConvexHullShape_calculateLocalInertia_2: _emscripten_bind_btConvexHullShape_calculateLocalInertia_2, _emscripten_bind_btSphereShape_calculateLocalInertia_2: _emscripten_bind_btSphereShape_calculateLocalInertia_2, _emscripten_bind_btPoint2PointConstraint_get_m_setting_0: _emscripten_bind_btPoint2PointConstraint_get_m_setting_0, _emscripten_bind_LocalConvexResult_LocalConvexResult_5: _emscripten_bind_LocalConvexResult_LocalConvexResult_5, _emscripten_bind_btGhostObject_setFriction_1: _emscripten_bind_btGhostObject_setFriction_1, _emscripten_bind_btPairCachingGhostObject_getWorldTransform_0: _emscripten_bind_btPairCachingGhostObject_getWorldTransform_0, _emscripten_bind_btRigidBody_setFriction_1: _emscripten_bind_btRigidBody_setFriction_1, _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1: _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1, _emscripten_bind_btGhostObject_setWorldTransform_1: _emscripten_bind_btGhostObject_setWorldTransform_1, _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1: _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1, _emscripten_bind_btConvexHullShape___destroy___0: _emscripten_bind_btConvexHullShape___destroy___0, _emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0: _emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0, _emscripten_bind_btVector4_setX_1: _emscripten_bind_btVector4_setX_1, _emscripten_bind_btKinematicCharacterController_jump_0: _emscripten_bind_btKinematicCharacterController_jump_0, _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1: _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1, _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1: _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1, _emscripten_bind_btRigidBody_upcast_1: _emscripten_bind_btRigidBody_upcast_1, _emscripten_bind_btCollisionObject_getWorldTransform_0: _emscripten_bind_btCollisionObject_getWorldTransform_0, _emscripten_bind_btVector4_setZ_1: _emscripten_bind_btVector4_setZ_1, _emscripten_bind_btQuadWord_y_0: _emscripten_bind_btQuadWord_y_0, ___cxa_can_catch: ___cxa_can_catch, _emscripten_bind_btTransform_getBasis_0: _emscripten_bind_btTransform_getBasis_0, _emscripten_bind_btPairCachingGhostObject_setFriction_1: _emscripten_bind_btPairCachingGhostObject_setFriction_1, _emscripten_bind_btDispatcherInfo_set_m_useEpa_1: _emscripten_bind_btDispatcherInfo_set_m_useEpa_1, _emscripten_bind_btCollisionDispatcher_getNumManifolds_0: _emscripten_bind_btCollisionDispatcher_getNumManifolds_0, _emscripten_bind_ClosestRayResultCallback___destroy___0: _emscripten_bind_ClosestRayResultCallback___destroy___0, _emscripten_bind_btQuadWord_w_0: _emscripten_bind_btQuadWord_w_0, _emscripten_bind_btCompoundShape___destroy___0: _emscripten_bind_btCompoundShape___destroy___0, _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2: _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2, _emscripten_bind_btGhostObject_btGhostObject_0: _emscripten_bind_btGhostObject_btGhostObject_0, _emscripten_bind_btConeShape_btConeShape_2: _emscripten_bind_btConeShape_btConeShape_2, _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1, _emscripten_bind_btManifoldPoint_set_m_localPointA_1: _emscripten_bind_btManifoldPoint_set_m_localPointA_1, _emscripten_bind_btCollisionObject_setCollisionShape_1: _emscripten_bind_btCollisionObject_setCollisionShape_1, _emscripten_bind_btWheelInfo___destroy___0: _emscripten_bind_btWheelInfo___destroy___0, _emscripten_bind_btTransform_setRotation_1: _emscripten_bind_btTransform_setRotation_1, _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0: _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0, _emscripten_bind_btPoint2PointConstraint_enableFeedback_1: _emscripten_bind_btPoint2PointConstraint_enableFeedback_1, _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1: _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1, _emscripten_bind_btAxisSweep3_btAxisSweep3_2: _emscripten_bind_btAxisSweep3_btAxisSweep3_2, _emscripten_bind_btAxisSweep3_btAxisSweep3_3: _emscripten_bind_btAxisSweep3_btAxisSweep3_3, _emscripten_bind_btBoxShape_calculateLocalInertia_2: _emscripten_bind_btBoxShape_calculateLocalInertia_2, _emscripten_bind_btVector3_setY_1: _emscripten_bind_btVector3_setY_1, _emscripten_bind_btAxisSweep3_btAxisSweep3_4: _emscripten_bind_btAxisSweep3_btAxisSweep3_4, _emscripten_bind_btAxisSweep3_btAxisSweep3_5: _emscripten_bind_btAxisSweep3_btAxisSweep3_5, _emscripten_bind_btQuadWord_setX_1: _emscripten_bind_btQuadWord_setX_1, _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0, _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1: _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1, _emscripten_bind_btOverlappingPairCache___destroy___0: _emscripten_bind_btOverlappingPairCache___destroy___0, _emscripten_bind_btConstraintSetting___destroy___0: _emscripten_bind_btConstraintSetting___destroy___0, _emscripten_bind_RayResultCallback___destroy___0: _emscripten_bind_RayResultCallback___destroy___0, _emscripten_bind_btPersistentManifold_getBody0_0: _emscripten_bind_btPersistentManifold_getBody0_0, _emscripten_bind_btConeShapeX_btConeShapeX_2: _emscripten_bind_btConeShapeX_btConeShapeX_2, _emscripten_bind_btConeTwistConstraint_enableFeedback_1: _emscripten_bind_btConeTwistConstraint_enableFeedback_1, _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1: _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1, _emscripten_bind_btRigidBody_applyTorque_1: _emscripten_bind_btRigidBody_applyTorque_1, _emscripten_bind_btSliderConstraint_setUpperLinLimit_1: _emscripten_bind_btSliderConstraint_setUpperLinLimit_1, _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2: _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2, _emscripten_bind_btConcaveShape___destroy___0: _emscripten_bind_btConcaveShape___destroy___0, _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4: _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4, _emscripten_bind_btQuaternion_x_0: _emscripten_bind_btQuaternion_x_0, _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1: _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1, _emscripten_bind_btConcaveShape_setLocalScaling_1: _emscripten_bind_btConcaveShape_setLocalScaling_1, _emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0: _emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0, _emscripten_bind_btConeShapeX_setLocalScaling_1: _emscripten_bind_btConeShapeX_setLocalScaling_1, _emscripten_bind_btQuaternion_z_0: _emscripten_bind_btQuaternion_z_0, _emscripten_bind_btConvexHullShape_btConvexHullShape_0: _emscripten_bind_btConvexHullShape_btConvexHullShape_0, _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1: _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1, _emscripten_bind_btConstraintSetting_get_m_damping_0: _emscripten_bind_btConstraintSetting_get_m_damping_0, _emscripten_bind_btGhostObject___destroy___0: _emscripten_bind_btGhostObject___destroy___0, _emscripten_bind_btGhostObject_setContactProcessingThreshold_1: _emscripten_bind_btGhostObject_setContactProcessingThreshold_1, _emscripten_bind_btRigidBody_applyCentralForce_1: _emscripten_bind_btRigidBody_applyCentralForce_1, _emscripten_bind_btQuaternion___destroy___0: _emscripten_bind_btQuaternion___destroy___0, _emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1: _emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1, _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2: _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2, _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0: _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0, _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1: _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1, _emscripten_bind_btKinematicCharacterController_canJump_0: _emscripten_bind_btKinematicCharacterController_canJump_0, _emscripten_bind_btRigidBody_isActive_0: _emscripten_bind_btRigidBody_isActive_0, _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3: _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3, _emscripten_bind_btMotionState_setWorldTransform_1: _emscripten_bind_btMotionState_setWorldTransform_1, _emscripten_bind_btCylinderShape_setLocalScaling_1: _emscripten_bind_btCylinderShape_setLocalScaling_1, _emscripten_bind_btCollisionWorld_rayTest_3: _emscripten_bind_btCollisionWorld_rayTest_3, _emscripten_bind_btCompoundShape_calculateLocalInertia_2: _emscripten_bind_btCompoundShape_calculateLocalInertia_2, _emscripten_bind_btCollisionWorld_getDispatchInfo_0: _emscripten_bind_btCollisionWorld_getDispatchInfo_0, _emscripten_bind_btRigidBody_setCollisionShape_1: _emscripten_bind_btRigidBody_setCollisionShape_1, _emscripten_bind_btConeShapeX___destroy___0: _emscripten_bind_btConeShapeX___destroy___0, _emscripten_bind_btCollisionObject_getCollisionFlags_0: _emscripten_bind_btCollisionObject_getCollisionFlags_0, _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1: _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1, _emscripten_bind_btConeTwistConstraint_enableMotor_1: _emscripten_bind_btConeTwistConstraint_enableMotor_1, _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1: _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1, _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4: _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4, _emscripten_bind_btPairCachingGhostObject_setRestitution_1: _emscripten_bind_btPairCachingGhostObject_setRestitution_1, _emscripten_bind_btBroadphaseInterface___destroy___0: _emscripten_bind_btBroadphaseInterface___destroy___0, _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1, _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1: _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1, _emscripten_bind_btPersistentManifold_getNumContacts_0: _emscripten_bind_btPersistentManifold_getNumContacts_0, _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0, _emscripten_bind_LocalConvexResult___destroy___0: _emscripten_bind_LocalConvexResult___destroy___0, _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0: _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0, _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1, _emscripten_bind_btCollisionWorld_addCollisionObject_3: _emscripten_bind_btCollisionWorld_addCollisionObject_3, _emscripten_bind_btRigidBody_getCollisionFlags_0: _emscripten_bind_btRigidBody_getCollisionFlags_0, _emscripten_bind_btCollisionShape_setLocalScaling_1: _emscripten_bind_btCollisionShape_setLocalScaling_1, _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0: _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0, _emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0: _emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0, _emscripten_bind_btMatrix3x3_setEulerZYX_3: _emscripten_bind_btMatrix3x3_setEulerZYX_3, _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0: _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0, _emscripten_bind_btConvexHullShape_setLocalScaling_1: _emscripten_bind_btConvexHullShape_setLocalScaling_1, _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0: _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0, _emscripten_bind_btCollisionWorld_getDispatcher_0: _emscripten_bind_btCollisionWorld_getDispatcher_0, _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1: _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1, _emscripten_bind_btTriangleMesh_btTriangleMesh_1: _emscripten_bind_btTriangleMesh_btTriangleMesh_1, _i64Subtract: _i64Subtract, _emscripten_bind_btRaycastVehicle_getWheelTransformWS_1: _emscripten_bind_btRaycastVehicle_getWheelTransformWS_1, _emscripten_bind_btRigidBody_setDamping_2: _emscripten_bind_btRigidBody_setDamping_2, _emscripten_bind_btDynamicsWorld_getDispatcher_0: _emscripten_bind_btDynamicsWorld_getDispatcher_0, _emscripten_bind_btGhostObject_setCollisionFlags_1: _emscripten_bind_btGhostObject_setCollisionFlags_1, _emscripten_bind_btMatrix3x3_getRotation_1: _emscripten_bind_btMatrix3x3_getRotation_1, _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1: _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1, _emscripten_bind_btCylinderShapeX_setLocalScaling_1: _emscripten_bind_btCylinderShapeX_setLocalScaling_1, _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0: _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0, _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0, _emscripten_bind_btCompoundShape_setLocalScaling_1: _emscripten_bind_btCompoundShape_setLocalScaling_1, _emscripten_bind_btOverlappingPairCallback___destroy___0: _emscripten_bind_btOverlappingPairCallback___destroy___0, _emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0: _emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0, _emscripten_bind_btVector4_setY_1: _emscripten_bind_btVector4_setY_1, _emscripten_bind_btRigidBody_setContactProcessingThreshold_1: _emscripten_bind_btRigidBody_setContactProcessingThreshold_1, _emscripten_bind_btRigidBody_getLinearVelocity_0: _emscripten_bind_btRigidBody_getLinearVelocity_0, _emscripten_bind_btRigidBody_applyImpulse_2: _emscripten_bind_btRigidBody_applyImpulse_2, _emscripten_bind_btConcaveShape_calculateLocalInertia_2: _emscripten_bind_btConcaveShape_calculateLocalInertia_2, _emscripten_bind_btRigidBody_setWorldTransform_1: _emscripten_bind_btRigidBody_setWorldTransform_1, _emscripten_bind_btRigidBody_setAngularVelocity_1: _emscripten_bind_btRigidBody_setAngularVelocity_1, _emscripten_bind_btConvexShape_setLocalScaling_1: _emscripten_bind_btConvexShape_setLocalScaling_1, _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2: _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2, _free: _free, _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1: _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1, _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0: _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0, _emscripten_bind_RayResultCallback_hasHit_0: _emscripten_bind_RayResultCallback_hasHit_0, _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0, _emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0: _emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0, _emscripten_bind_btWheelInfo_get_m_frictionSlip_0: _emscripten_bind_btWheelInfo_get_m_frictionSlip_0, _emscripten_bind_btConeShapeZ_setLocalScaling_1: _emscripten_bind_btConeShapeZ_setLocalScaling_1, _emscripten_bind_btPairCachingGhostObject_setActivationState_1: _emscripten_bind_btPairCachingGhostObject_setActivationState_1, _emscripten_bind_btConvexTriangleMeshShape___destroy___0: _emscripten_bind_btConvexTriangleMeshShape___destroy___0, _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1: _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1, _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1: _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1, _emscripten_bind_btRigidBody_getAngularVelocity_0: _emscripten_bind_btRigidBody_getAngularVelocity_0, _emscripten_bind_btCompoundShape_btCompoundShape_0: _emscripten_bind_btCompoundShape_btCompoundShape_0, _emscripten_bind_btCompoundShape_btCompoundShape_1: _emscripten_bind_btCompoundShape_btCompoundShape_1, _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1: _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1, _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2: _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2, _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0: _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0, _emscripten_bind_btRigidBody_updateInertiaTensor_0: _emscripten_bind_btRigidBody_updateInertiaTensor_0, _emscripten_bind_btTransform_setOrigin_1: _emscripten_bind_btTransform_setOrigin_1, _emscripten_bind_ClosestRayResultCallback_hasHit_0: _emscripten_bind_ClosestRayResultCallback_hasHit_0, _emscripten_bind_btCompoundShape_addChildShape_2: _emscripten_bind_btCompoundShape_addChildShape_2, _emscripten_bind_btDispatcher___destroy___0: _emscripten_bind_btDispatcher___destroy___0, _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0: _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0, _emscripten_bind_btDiscreteDynamicsWorld___destroy___0: _emscripten_bind_btDiscreteDynamicsWorld___destroy___0, _emscripten_bind_btConvexShape___destroy___0: _emscripten_bind_btConvexShape___destroy___0, _memmove: _memmove, _emscripten_bind_btCapsuleShapeX_setLocalScaling_1: _emscripten_bind_btCapsuleShapeX_setLocalScaling_1, _emscripten_bind_btCollisionObject_setRestitution_1: _emscripten_bind_btCollisionObject_setRestitution_1, _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0: _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0, _emscripten_bind_LocalConvexResult_get_m_hitFraction_0: _emscripten_bind_LocalConvexResult_get_m_hitFraction_0, _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0: _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0, _emscripten_bind_btQuaternion_w_0: _emscripten_bind_btQuaternion_w_0, _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0: _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0, _emscripten_bind_btTransform_getRotation_0: _emscripten_bind_btTransform_getRotation_0, _emscripten_bind_btHingeConstraint_btHingeConstraint_6: _emscripten_bind_btHingeConstraint_btHingeConstraint_6, _emscripten_bind_btHingeConstraint_btHingeConstraint_7: _emscripten_bind_btHingeConstraint_btHingeConstraint_7, _emscripten_bind_btHingeConstraint_btHingeConstraint_4: _emscripten_bind_btHingeConstraint_btHingeConstraint_4, _emscripten_bind_btHingeConstraint_btHingeConstraint_5: _emscripten_bind_btHingeConstraint_btHingeConstraint_5, _emscripten_bind_btHingeConstraint_btHingeConstraint_2: _emscripten_bind_btHingeConstraint_btHingeConstraint_2, _emscripten_bind_btHingeConstraint_btHingeConstraint_3: _emscripten_bind_btHingeConstraint_btHingeConstraint_3, _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1, _emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0: _emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0, _emscripten_bind_btTypedConstraint___destroy___0: _emscripten_bind_btTypedConstraint___destroy___0, _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1: _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1, _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3: _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3, _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1: _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1, _emscripten_bind_btVector3_z_0: _emscripten_bind_btVector3_z_0, _emscripten_bind_btSphereShape_btSphereShape_1: _emscripten_bind_btSphereShape_btSphereShape_1, _emscripten_bind_btQuaternion_y_0: _emscripten_bind_btQuaternion_y_0, _emscripten_bind_btCollisionWorld_addCollisionObject_1: _emscripten_bind_btCollisionWorld_addCollisionObject_1, _emscripten_bind_btCollisionWorld_addCollisionObject_2: _emscripten_bind_btCollisionWorld_addCollisionObject_2, _emscripten_bind_btRigidBody_setRestitution_1: _emscripten_bind_btRigidBody_setRestitution_1, _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1: _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1, _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0: _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0, _emscripten_bind_btRigidBody_getMotionState_0: _emscripten_bind_btRigidBody_getMotionState_0, _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1: _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1, _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7: _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7, _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0: _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0, _emscripten_bind_btActionInterface___destroy___0: _emscripten_bind_btActionInterface___destroy___0, _emscripten_bind_btDefaultMotionState_setWorldTransform_1: _emscripten_bind_btDefaultMotionState_setWorldTransform_1, _emscripten_bind_btDefaultVehicleRaycaster___destroy___0: _emscripten_bind_btDefaultVehicleRaycaster___destroy___0, _emscripten_bind_RayResultCallback_get_m_collisionObject_0: _emscripten_bind_RayResultCallback_get_m_collisionObject_0, _emscripten_bind_btPoint2PointConstraint_getPivotInA_0: _emscripten_bind_btPoint2PointConstraint_getPivotInA_0, _emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0: _emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0, _emscripten_bind_btCylinderShape_calculateLocalInertia_2: _emscripten_bind_btCylinderShape_calculateLocalInertia_2, _emscripten_bind_btGhostObject_setRestitution_1: _emscripten_bind_btGhostObject_setRestitution_1, _emscripten_bind_btDynamicsWorld_addCollisionObject_1: _emscripten_bind_btDynamicsWorld_addCollisionObject_1, _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0: _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0, _emscripten_bind_btDynamicsWorld_addCollisionObject_3: _emscripten_bind_btDynamicsWorld_addCollisionObject_3, _emscripten_bind_btDynamicsWorld_addCollisionObject_2: _emscripten_bind_btDynamicsWorld_addCollisionObject_2, _emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0: _emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0, _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1: _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1, _emscripten_bind_btVector4_op_mul_1: _emscripten_bind_btVector4_op_mul_1, _emscripten_bind_btCylinderShape_btCylinderShape_1: _emscripten_bind_btCylinderShape_btCylinderShape_1, _emscripten_bind_btVector3___destroy___0: _emscripten_bind_btVector3___destroy___0, _emscripten_bind_btRigidBody_setAngularFactor_1: _emscripten_bind_btRigidBody_setAngularFactor_1, _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2: _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2, _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1: _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1, _emscripten_bind_btMotionState_getWorldTransform_1: _emscripten_bind_btMotionState_getWorldTransform_1, _emscripten_bind_btDynamicsWorld_getBroadphase_0: _emscripten_bind_btDynamicsWorld_getBroadphase_0, _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1: _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1, _emscripten_bind_btVector3_x_0: _emscripten_bind_btVector3_x_0, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3: _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3, _emscripten_bind_btCollisionObject_getCollisionShape_0: _emscripten_bind_btCollisionObject_getCollisionShape_0, _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4: _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4, _emscripten_bind_btManifoldPoint___destroy___0: _emscripten_bind_btManifoldPoint___destroy___0, _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1, _emscripten_bind_btVector4_length_0: _emscripten_bind_btVector4_length_0, _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1: _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1, _emscripten_bind_btCylinderShapeZ_setLocalScaling_1: _emscripten_bind_btCylinderShapeZ_setLocalScaling_1, _emscripten_bind_ClosestConvexResultCallback___destroy___0: _emscripten_bind_ClosestConvexResultCallback___destroy___0, _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0: _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0, _emscripten_bind_btCollisionObject_setFriction_1: _emscripten_bind_btCollisionObject_setFriction_1, _emscripten_bind_btDefaultCollisionConfiguration___destroy___0: _emscripten_bind_btDefaultCollisionConfiguration___destroy___0, _emscripten_bind_btRigidBody_setMassProps_2: _emscripten_bind_btRigidBody_setMassProps_2, _emscripten_bind_btVector3_setValue_3: _emscripten_bind_btVector3_setValue_3, _emscripten_bind_btGhostObject_getCollisionFlags_0: _emscripten_bind_btGhostObject_getCollisionFlags_0, _emscripten_bind_btCapsuleShapeX___destroy___0: _emscripten_bind_btCapsuleShapeX___destroy___0, _emscripten_bind_btHingeConstraint_setLimit_4: _emscripten_bind_btHingeConstraint_setLimit_4, _emscripten_bind_btHingeConstraint_setLimit_5: _emscripten_bind_btHingeConstraint_setLimit_5, _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1: _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1, _emscripten_bind_btConeShape_setLocalScaling_1: _emscripten_bind_btConeShape_setLocalScaling_1, _emscripten_bind_btGhostObject_getNumOverlappingObjects_0: _emscripten_bind_btGhostObject_getNumOverlappingObjects_0, _emscripten_bind_btGhostObject_getCollisionShape_0: _emscripten_bind_btGhostObject_getCollisionShape_0, _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1, _emscripten_bind_btPersistentManifold_getContactPoint_1: _emscripten_bind_btPersistentManifold_getContactPoint_1, _emscripten_bind_btConeShapeX_calculateLocalInertia_2: _emscripten_bind_btConeShapeX_calculateLocalInertia_2, _emscripten_bind_btGhostObject_activate_0: _emscripten_bind_btGhostObject_activate_0, _emscripten_bind_btGhostObject_activate_1: _emscripten_bind_btGhostObject_activate_1, _emscripten_bind_btManifoldPoint_getPositionWorldOnB_0: _emscripten_bind_btManifoldPoint_getPositionWorldOnB_0, _emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0: _emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0, _emscripten_bind_btConeShapeZ_btConeShapeZ_2: _emscripten_bind_btConeShapeZ_btConeShapeZ_2, _emscripten_bind_btSphereShape___destroy___0: _emscripten_bind_btSphereShape___destroy___0, _emscripten_bind_btSliderConstraint_setUpperAngLimit_1: _emscripten_bind_btSliderConstraint_setUpperAngLimit_1, _emscripten_bind_btDynamicsWorld_contactPairTest_3: _emscripten_bind_btDynamicsWorld_contactPairTest_3, _emscripten_bind_btCollisionWorld_getPairCache_0: _emscripten_bind_btCollisionWorld_getPairCache_0, _emscripten_bind_btConeTwistConstraint_setMotorTarget_1: _emscripten_bind_btConeTwistConstraint_setMotorTarget_1, _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1: _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1, _emscripten_bind_btWheelInfo_set_m_rollInfluence_1: _emscripten_bind_btWheelInfo_set_m_rollInfluence_1, _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0: _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0, _emscripten_bind_btGhostObject_forceActivationState_1: _emscripten_bind_btGhostObject_forceActivationState_1, _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0: _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0, _emscripten_bind_VoidPtr___destroy___0: _emscripten_bind_VoidPtr___destroy___0, _emscripten_bind_btSliderConstraint_setLowerAngLimit_1: _emscripten_bind_btSliderConstraint_setLowerAngLimit_1, _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2: _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2, _emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0: _emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0, _emscripten_bind_btRaycastVehicle_getRigidBody_0: _emscripten_bind_btRaycastVehicle_getRigidBody_0, _emscripten_bind_btWheelInfo_get_m_steering_0: _emscripten_bind_btWheelInfo_get_m_steering_0, _emscripten_bind_btConstraintSetting_get_m_tau_0: _emscripten_bind_btConstraintSetting_get_m_tau_0, _emscripten_bind_btSliderConstraint___destroy___0: _emscripten_bind_btSliderConstraint___destroy___0, _emscripten_bind_btCollisionShape___destroy___0: _emscripten_bind_btCollisionShape___destroy___0, _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0: _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0, _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0: _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0, _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0, _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1: _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1, _emscripten_bind_btKinematicCharacterController_warp_1: _emscripten_bind_btKinematicCharacterController_warp_1, _emscripten_bind_btAxisSweep3___destroy___0: _emscripten_bind_btAxisSweep3___destroy___0, _emscripten_bind_btTriangleMesh___destroy___0: _emscripten_bind_btTriangleMesh___destroy___0, _emscripten_bind_btKinematicCharacterController_preStep_1: _emscripten_bind_btKinematicCharacterController_preStep_1, _emscripten_bind_btRaycastVehicle_applyEngineForce_2: _emscripten_bind_btRaycastVehicle_applyEngineForce_2, _emscripten_bind_btRaycastVehicle_setBrake_2: _emscripten_bind_btRaycastVehicle_setBrake_2, _emscripten_bind_ConcreteContactResultCallback___destroy___0: _emscripten_bind_ConcreteContactResultCallback___destroy___0, _emscripten_bind_btCollisionObject___destroy___0: _emscripten_bind_btCollisionObject___destroy___0, _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1: _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1, _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1, _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1: _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1, _emscripten_bind_btDispatcherInfo_set_m_timeStep_1: _emscripten_bind_btDispatcherInfo_set_m_timeStep_1, _emscripten_bind_btVector3_btVector3_3: _emscripten_bind_btVector3_btVector3_3, _emscripten_bind_btVector3_btVector3_0: _emscripten_bind_btVector3_btVector3_0, _emscripten_bind_btBoxShape___destroy___0: _emscripten_bind_btBoxShape___destroy___0, _emscripten_bind_btDiscreteDynamicsWorld_getGravity_0: _emscripten_bind_btDiscreteDynamicsWorld_getGravity_0, _emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0: _emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0, _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0: _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0, _emscripten_bind_btConeTwistConstraint___destroy___0: _emscripten_bind_btConeTwistConstraint___destroy___0, _emscripten_bind_btQuadWord___destroy___0: _emscripten_bind_btQuadWord___destroy___0, _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1: _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1, _emscripten_bind_btRigidBody_setCenterOfMassTransform_1: _emscripten_bind_btRigidBody_setCenterOfMassTransform_1, _emscripten_bind_btConstraintSolver___destroy___0: _emscripten_bind_btConstraintSolver___destroy___0, _emscripten_bind_btDbvtBroadphase___destroy___0: _emscripten_bind_btDbvtBroadphase___destroy___0, _emscripten_bind_btCapsuleShape_btCapsuleShape_2: _emscripten_bind_btCapsuleShape_btCapsuleShape_2, _emscripten_bind_btTypedConstraint_enableFeedback_1: _emscripten_bind_btTypedConstraint_enableFeedback_1, _emscripten_bind_btQuadWord_setZ_1: _emscripten_bind_btQuadWord_setZ_1, _emscripten_bind_btCapsuleShape_setLocalScaling_1: _emscripten_bind_btCapsuleShape_setLocalScaling_1, _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0, _emscripten_bind_btTriangleMeshShape_setLocalScaling_1: _emscripten_bind_btTriangleMeshShape_setLocalScaling_1, _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1: _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1, _emscripten_bind_btPersistentManifold_btPersistentManifold_0: _emscripten_bind_btPersistentManifold_btPersistentManifold_0, _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0: _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0, _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2: _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2, _emscripten_bind_btVector4___destroy___0: _emscripten_bind_btVector4___destroy___0, _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0: _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0, _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1: _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1, _i64Add: _i64Add, _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2: _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2, _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1: _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1, _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0: _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0, _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1: _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1, _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3: _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3, _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0, _emscripten_bind_btPoint2PointConstraint_getPivotInB_0: _emscripten_bind_btPoint2PointConstraint_getPivotInB_0, _emscripten_bind_btKinematicCharacterController_playerStep_2: _emscripten_bind_btKinematicCharacterController_playerStep_2, _emscripten_bind_btDispatcherInfo___destroy___0: _emscripten_bind_btDispatcherInfo___destroy___0, _emscripten_bind_btStaticPlaneShape_setLocalScaling_1: _emscripten_bind_btStaticPlaneShape_setLocalScaling_1, _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2: _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2, _emscripten_bind_ContactResultCallback_addSingleResult_7: _emscripten_bind_ContactResultCallback_addSingleResult_7, _emscripten_bind_btGhostObject_getWorldTransform_0: _emscripten_bind_btGhostObject_getWorldTransform_0, _emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0: _emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0, _emscripten_bind_LocalConvexResult_set_m_hitFraction_1: _emscripten_bind_LocalConvexResult_set_m_hitFraction_1, _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2: _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2, _emscripten_bind_btDispatcherInfo_get_m_timeStep_0: _emscripten_bind_btDispatcherInfo_get_m_timeStep_0, _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1: _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1, _emscripten_bind_btDynamicsWorld___destroy___0: _emscripten_bind_btDynamicsWorld___destroy___0, _emscripten_bind_btMotionState___destroy___0: _emscripten_bind_btMotionState___destroy___0, _emscripten_bind_btCollisionObject_setCollisionFlags_1: _emscripten_bind_btCollisionObject_setCollisionFlags_1, _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1: _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1, _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2: _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2, _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3: _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3, _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1: _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1, _emscripten_bind_btRaycastVehicle_getNumWheels_0: _emscripten_bind_btRaycastVehicle_getNumWheels_0, _emscripten_bind_btDispatcher_getManifoldByIndexInternal_1: _emscripten_bind_btDispatcher_getManifoldByIndexInternal_1, _emscripten_bind_btWheelInfo_set_m_steering_1: _emscripten_bind_btWheelInfo_set_m_steering_1, _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1: _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1, _emscripten_bind_btConeTwistConstraint_setAngularOnly_1: _emscripten_bind_btConeTwistConstraint_setAngularOnly_1, _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4: _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4, _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2: _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2, _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1: _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1, _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1: _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1, _emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1: _emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1, _emscripten_bind_btRigidBodyConstructionInfo___destroy___0: _emscripten_bind_btRigidBodyConstructionInfo___destroy___0, _emscripten_bind_btRigidBody_getWorldTransform_0: _emscripten_bind_btRigidBody_getWorldTransform_0, _emscripten_bind_btPoint2PointConstraint_setPivotA_1: _emscripten_bind_btPoint2PointConstraint_setPivotA_1, _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1: _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1, _memcpy: _memcpy, _emscripten_bind_btCapsuleShape_calculateLocalInertia_2: _emscripten_bind_btCapsuleShape_calculateLocalInertia_2, _emscripten_bind_btVector3_y_0: _emscripten_bind_btVector3_y_0, _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0: _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0, _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2: _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2, _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3: _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3, _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0: _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0, _emscripten_bind_btGhostObject_setCollisionShape_1: _emscripten_bind_btGhostObject_setCollisionShape_1, _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1: _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1, _emscripten_bind_btQuaternion_setW_1: _emscripten_bind_btQuaternion_setW_1, _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1: _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1, _emscripten_bind_btGhostObject_isActive_0: _emscripten_bind_btGhostObject_isActive_0, _emscripten_bind_btVector4_z_0: _emscripten_bind_btVector4_z_0, _emscripten_bind_btCollisionObject_forceActivationState_1: _emscripten_bind_btCollisionObject_forceActivationState_1, _emscripten_bind_btKinematicCharacterController_onGround_0: _emscripten_bind_btKinematicCharacterController_onGround_0, _emscripten_bind_btRaycastVehicle_getWheelInfo_1: _emscripten_bind_btRaycastVehicle_getWheelInfo_1, _emscripten_bind_btConeTwistConstraint_setLimit_2: _emscripten_bind_btConeTwistConstraint_setLimit_2, _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1: _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1, _emscripten_bind_btRigidBody___destroy___0: _emscripten_bind_btRigidBody___destroy___0, _emscripten_bind_btStridingMeshInterface___destroy___0: _emscripten_bind_btStridingMeshInterface___destroy___0, _emscripten_bind_btRigidBody_setSleepingThresholds_2: _emscripten_bind_btRigidBody_setSleepingThresholds_2, _emscripten_bind_btCollisionObject_setWorldTransform_1: _emscripten_bind_btCollisionObject_setWorldTransform_1, _emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0: _emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0, _emscripten_bind_btManifoldPoint_get_m_localPointA_0: _emscripten_bind_btManifoldPoint_get_m_localPointA_0, _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0, _emscripten_bind_btCollisionWorld_getBroadphase_0: _emscripten_bind_btCollisionWorld_getBroadphase_0, _emscripten_bind_btDispatcher_getNumManifolds_0: _emscripten_bind_btDispatcher_getNumManifolds_0, _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0, _emscripten_bind_btRigidBody_activate_1: _emscripten_bind_btRigidBody_activate_1, _emscripten_bind_btRigidBody_activate_0: _emscripten_bind_btRigidBody_activate_0, _emscripten_bind_btRaycastVehicle___destroy___0: _emscripten_bind_btRaycastVehicle___destroy___0, _emscripten_bind_btGhostObject_setActivationState_1: _emscripten_bind_btGhostObject_setActivationState_1, _emscripten_bind_btCollisionWorld_contactPairTest_3: _emscripten_bind_btCollisionWorld_contactPairTest_3, _emscripten_bind_btCylinderShapeX___destroy___0: _emscripten_bind_btCylinderShapeX___destroy___0, _emscripten_bind_btManifoldPoint_getPositionWorldOnA_0: _emscripten_bind_btManifoldPoint_getPositionWorldOnA_0, _emscripten_bind_ContactResultCallback___destroy___0: _emscripten_bind_ContactResultCallback___destroy___0, _emscripten_bind_btDispatcherInfo_set_m_stepCount_1: _emscripten_bind_btDispatcherInfo_set_m_stepCount_1, _emscripten_bind_btVector4_x_0: _emscripten_bind_btVector4_x_0, _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1: _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1, _emscripten_bind_btKinematicCharacterController_getGhostObject_0: _emscripten_bind_btKinematicCharacterController_getGhostObject_0, _emscripten_bind_btRigidBody_btRigidBody_1: _emscripten_bind_btRigidBody_btRigidBody_1, _emscripten_bind_btTriangleMeshShape___destroy___0: _emscripten_bind_btTriangleMeshShape___destroy___0, _emscripten_bind_btKinematicCharacterController_setWalkDirection_1: _emscripten_bind_btKinematicCharacterController_setWalkDirection_1, _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0: _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0, _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0: _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0, _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1: _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1, _emscripten_bind_btKinematicCharacterController_getGravity_0: _emscripten_bind_btKinematicCharacterController_getGravity_0, _emscripten_bind_btDiscreteDynamicsWorld_addAction_1: _emscripten_bind_btDiscreteDynamicsWorld_addAction_1, _emscripten_bind_btQuaternion_setY_1: _emscripten_bind_btQuaternion_setY_1, _emscripten_bind_btConeShape_calculateLocalInertia_2: _emscripten_bind_btConeShape_calculateLocalInertia_2, _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2: _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2, _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1: _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1, _llvm_bswap_i32: _llvm_bswap_i32, _emscripten_bind_btSphereShape_setLocalScaling_1: _emscripten_bind_btSphereShape_setLocalScaling_1, _emscripten_bind_btVector4_w_0: _emscripten_bind_btVector4_w_0, _emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0: _emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0, _emscripten_bind_btBvhTriangleMeshShape___destroy___0: _emscripten_bind_btBvhTriangleMeshShape___destroy___0, _emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0: _emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0, _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1: _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1, _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1: _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1, _emscripten_bind_btVector4_y_0: _emscripten_bind_btVector4_y_0, _emscripten_bind_btGeneric6DofConstraint___destroy___0: _emscripten_bind_btGeneric6DofConstraint___destroy___0, _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0: _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0, _emscripten_bind_btConvexHullShape_addPoint_1: _emscripten_bind_btConvexHullShape_addPoint_1, _emscripten_bind_btConvexHullShape_addPoint_2: _emscripten_bind_btConvexHullShape_addPoint_2, _emscripten_bind_btTransform_getOrigin_0: _emscripten_bind_btTransform_getOrigin_0, _emscripten_bind_btHingeConstraint___destroy___0: _emscripten_bind_btHingeConstraint___destroy___0, _emscripten_bind_btHingeConstraint_enableFeedback_1: _emscripten_bind_btHingeConstraint_enableFeedback_1, _emscripten_bind_btConvexShape_calculateLocalInertia_2: _emscripten_bind_btConvexShape_calculateLocalInertia_2, _memset: _memset, _emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0: _emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0, _emscripten_bind_btTriangleMesh_btTriangleMesh_0: _emscripten_bind_btTriangleMesh_btTriangleMesh_0, _emscripten_bind_btPairCachingGhostObject_getCollisionShape_0: _emscripten_bind_btPairCachingGhostObject_getCollisionShape_0, _emscripten_bind_btTriangleMesh_btTriangleMesh_2: _emscripten_bind_btTriangleMesh_btTriangleMesh_2, _emscripten_bind_btTransform___destroy___0: _emscripten_bind_btTransform___destroy___0, _emscripten_bind_btWheelInfo_set_m_frictionSlip_1: _emscripten_bind_btWheelInfo_set_m_frictionSlip_1, _emscripten_bind_btRigidBody_getCollisionShape_0: _emscripten_bind_btRigidBody_getCollisionShape_0, _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1: _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1, _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0: _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0, _emscripten_bind_btManifoldPoint_get_m_localPointB_0: _emscripten_bind_btManifoldPoint_get_m_localPointB_0, _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3: _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3, _emscripten_bind_btSliderConstraint_setLowerLinLimit_1: _emscripten_bind_btSliderConstraint_setLowerLinLimit_1, _emscripten_bind_btPoint2PointConstraint_set_m_setting_1: _emscripten_bind_btPoint2PointConstraint_set_m_setting_1, _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0: _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0, _emscripten_bind_btRigidBody_setLinearVelocity_1: _emscripten_bind_btRigidBody_setLinearVelocity_1, _emscripten_bind_btVehicleTuning_btVehicleTuning_0: _emscripten_bind_btVehicleTuning_btVehicleTuning_0, _emscripten_bind_RayResultCallback_set_m_collisionObject_1: _emscripten_bind_RayResultCallback_set_m_collisionObject_1, _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1: _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1, _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0: _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0, _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1: _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1, _emscripten_bind_btDynamicsWorld_addAction_1: _emscripten_bind_btDynamicsWorld_addAction_1, _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0: _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0, _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1, _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1: _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1, _emscripten_bind_btKinematicCharacterController_setFallSpeed_1: _emscripten_bind_btKinematicCharacterController_setFallSpeed_1, _emscripten_bind_btRigidBody_setActivationState_1: _emscripten_bind_btRigidBody_setActivationState_1, _emscripten_bind_ClosestConvexResultCallback_hasHit_0: _emscripten_bind_ClosestConvexResultCallback_hasHit_0, _emscripten_bind_btCapsuleShapeZ___destroy___0: _emscripten_bind_btCapsuleShapeZ___destroy___0, _emscripten_bind_LocalShapeInfo_set_m_shapePart_1: _emscripten_bind_LocalShapeInfo_set_m_shapePart_1, _emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0: _emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0, _emscripten_bind_btTriangleMesh_addTriangle_3: _emscripten_bind_btTriangleMesh_addTriangle_3, _emscripten_bind_btGhostObject_getOverlappingObject_1: _emscripten_bind_btGhostObject_getOverlappingObject_1, _emscripten_bind_btTriangleMesh_addTriangle_4: _emscripten_bind_btTriangleMesh_addTriangle_4, _emscripten_bind_btRigidBody_applyTorqueImpulse_1: _emscripten_bind_btRigidBody_applyTorqueImpulse_1, _emscripten_bind_btRigidBody_setCollisionFlags_1: _emscripten_bind_btRigidBody_setCollisionFlags_1, _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1: _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1, _emscripten_bind_btConeShape___destroy___0: _emscripten_bind_btConeShape___destroy___0, _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2: _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2, _emscripten_bind_btSliderConstraint_btSliderConstraint_5: _emscripten_bind_btSliderConstraint_btSliderConstraint_5, _emscripten_bind_btSliderConstraint_btSliderConstraint_3: _emscripten_bind_btSliderConstraint_btSliderConstraint_3, _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0: _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0, _emscripten_bind_btDynamicsWorld_convexSweepTest_5: _emscripten_bind_btDynamicsWorld_convexSweepTest_5, _emscripten_bind_btRigidBody_forceActivationState_1: _emscripten_bind_btRigidBody_forceActivationState_1, _emscripten_bind_btPoint2PointConstraint_setPivotB_1: _emscripten_bind_btPoint2PointConstraint_setPivotB_1, _emscripten_bind_btGhostPairCallback___destroy___0: _emscripten_bind_btGhostPairCallback___destroy___0, _emscripten_bind_btKinematicCharacterController_getMaxSlope_0: _emscripten_bind_btKinematicCharacterController_getMaxSlope_0, _emscripten_bind_btSliderConstraint_enableFeedback_1: _emscripten_bind_btSliderConstraint_enableFeedback_1, _emscripten_bind_btRaycastVehicle_addWheel_7: _emscripten_bind_btRaycastVehicle_addWheel_7, _emscripten_bind_btPairCachingGhostObject_isActive_0: _emscripten_bind_btPairCachingGhostObject_isActive_0, _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1: _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1, _emscripten_bind_btStaticPlaneShape___destroy___0: _emscripten_bind_btStaticPlaneShape___destroy___0, _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0: _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0, _emscripten_bind_btBoxShape_setLocalScaling_1: _emscripten_bind_btBoxShape_setLocalScaling_1, _emscripten_bind_btConeShapeZ___destroy___0: _emscripten_bind_btConeShapeZ___destroy___0, _emscripten_bind_btDynamicsWorld_getPairCache_0: _emscripten_bind_btDynamicsWorld_getPairCache_0, _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5: _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5, _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2: _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2, _emscripten_bind_btVector4_btVector4_0: _emscripten_bind_btVector4_btVector4_0, _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0: _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0, _emscripten_bind_btVector4_btVector4_4: _emscripten_bind_btVector4_btVector4_4, _emscripten_bind_btKinematicCharacterController___destroy___0: _emscripten_bind_btKinematicCharacterController___destroy___0, _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1: _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1, _emscripten_bind_btConstraintSetting_btConstraintSetting_0: _emscripten_bind_btConstraintSetting_btConstraintSetting_0, _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3: _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3, _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0: _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0, _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1: _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1, _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1: _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1, _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0: _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_viiidii: dynCall_viiidii, dynCall_vii: dynCall_vii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viidi: dynCall_viidi, dynCall_viddiii: dynCall_viddiii, dynCall_vidii: dynCall_vidii, dynCall_iiiii: dynCall_iiiii, dynCall_vidi: dynCall_vidi, dynCall_diiiiiiii: dynCall_diiiiiiii, dynCall_viiiiddddiid: dynCall_viiiiddddiid, dynCall_diiiii: dynCall_diiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_di: dynCall_di, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_diiidii: dynCall_diiidii, dynCall_viidii: dynCall_viidii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_diii: dynCall_diii, dynCall_diiiiiiiiii: dynCall_diiiiiiiiii, dynCall_viiiid: dynCall_viiiid, dynCall_diiiiiiiii: dynCall_diiiiiiiii, dynCall_did: dynCall_did, dynCall_viiiidddddidi: dynCall_viiiidddddidi, dynCall_diidii: dynCall_diidii, dynCall_diiii: dynCall_diiii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_viiid: dynCall_viiid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_iidid: dynCall_iidid, dynCall_viiii: dynCall_viiii };
  
// EMSCRIPTEN_END_ASM

})({
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "byteLength": byteLength
}, {
 "abort": abort,
 "assert": assert,
 "min": Math_min,
 "invoke_viiiii": invoke_viiiii,
 "invoke_vid": invoke_vid,
 "invoke_vi": invoke_vi,
 "invoke_viiidii": invoke_viiidii,
 "invoke_vii": invoke_vii,
 "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii,
 "invoke_ii": invoke_ii,
 "invoke_viidi": invoke_viidi,
 "invoke_viddiii": invoke_viddiii,
 "invoke_vidii": invoke_vidii,
 "invoke_iiiii": invoke_iiiii,
 "invoke_vidi": invoke_vidi,
 "invoke_diiiiiiii": invoke_diiiiiiii,
 "invoke_viiiiddddiid": invoke_viiiiddddiid,
 "invoke_diiiii": invoke_diiiii,
 "invoke_iiii": invoke_iiii,
 "invoke_viiiiii": invoke_viiiiii,
 "invoke_iiid": invoke_iiid,
 "invoke_di": invoke_di,
 "invoke_iiiiiii": invoke_iiiiiii,
 "invoke_diiidii": invoke_diiidii,
 "invoke_viidii": invoke_viidii,
 "invoke_viiiiiii": invoke_viiiiiii,
 "invoke_viiiiiiiii": invoke_viiiiiiiii,
 "invoke_viiiiiiiiii": invoke_viiiiiiiiii,
 "invoke_iii": invoke_iii,
 "invoke_diii": invoke_diii,
 "invoke_diiiiiiiiii": invoke_diiiiiiiiii,
 "invoke_viiiid": invoke_viiiid,
 "invoke_diiiiiiiii": invoke_diiiiiiiii,
 "invoke_did": invoke_did,
 "invoke_viiiidddddidi": invoke_viiiidddddidi,
 "invoke_diidii": invoke_diidii,
 "invoke_diiii": invoke_diiii,
 "invoke_iiiiiiiiii": invoke_iiiiiiiiii,
 "invoke_viiid": invoke_viiid,
 "invoke_viii": invoke_viii,
 "invoke_v": invoke_v,
 "invoke_viid": invoke_viid,
 "invoke_iidid": invoke_iidid,
 "invoke_viiii": invoke_viiii,
 "_emscripten_asm_const_double": _emscripten_asm_const_double,
 "_cosf": _cosf,
 "_send": _send,
 "_sqrtf": _sqrtf,
 "_fmod": _fmod,
 "___cxa_guard_acquire": ___cxa_guard_acquire,
 "___setErrNo": ___setErrNo,
 "_vfprintf": _vfprintf,
 "_atan2f": _atan2f,
 "_fmodf": _fmodf,
 "___cxa_guard_release": ___cxa_guard_release,
 "_pwrite": _pwrite,
 "_acosf": _acosf,
 "_asinf": _asinf,
 "_fabsf": _fabsf,
 "_sbrk": _sbrk,
 "_llvm_pow_f32": _llvm_pow_f32,
 "___cxa_begin_catch": ___cxa_begin_catch,
 "_sinf": _sinf,
 "_fileno": _fileno,
 "___resumeException": ___resumeException,
 "___cxa_find_matching_catch": ___cxa_find_matching_catch,
 "_sysconf": _sysconf,
 "__reallyNegative": __reallyNegative,
 "_pthread_getspecific": _pthread_getspecific,
 "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "_pthread_once": _pthread_once,
 "_pthread_key_create": _pthread_key_create,
 "_write": _write,
 "___errno_location": ___errno_location,
 "_pthread_setspecific": _pthread_setspecific,
 "_fputc": _fputc,
 "___cxa_throw": ___cxa_throw,
 "_abort": _abort,
 "___cxa_allocate_exception": ___cxa_allocate_exception,
 "_fwrite": _fwrite,
 "_time": _time,
 "_fprintf": _fprintf,
 "_gettimeofday": _gettimeofday,
 "__formatString": __formatString,
 "_llvm_trap": _llvm_trap,
 "___cxa_pure_virtual": ___cxa_pure_virtual,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "cttz_i8": cttz_i8,
 "ctlz_i8": ctlz_i8,
 "NaN": NaN,
 "Infinity": Infinity,
 "_stderr": _stderr
}, buffer);
var _emscripten_bind_btCylinderShape___destroy___0 = Module["_emscripten_bind_btCylinderShape___destroy___0"] = asm["_emscripten_bind_btCylinderShape___destroy___0"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"];
var _emscripten_bind_btCollisionObject_isActive_0 = Module["_emscripten_bind_btCollisionObject_isActive_0"] = asm["_emscripten_bind_btCollisionObject_isActive_0"];
var _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1 = Module["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"] = asm["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4 = Module["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"];
var _emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"] = asm["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"];
var _emscripten_bind_btQuaternion_setX_1 = Module["_emscripten_bind_btQuaternion_setX_1"] = asm["_emscripten_bind_btQuaternion_setX_1"];
var _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"];
var _emscripten_bind_btQuaternion_setZ_1 = Module["_emscripten_bind_btQuaternion_setZ_1"] = asm["_emscripten_bind_btQuaternion_setZ_1"];
var _emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"] = asm["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"];
var _emscripten_bind_btKinematicCharacterController_setMaxSlope_1 = Module["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"] = asm["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"];
var _emscripten_bind_btQuadWord_z_0 = Module["_emscripten_bind_btQuadWord_z_0"] = asm["_emscripten_bind_btQuadWord_z_0"];
var _emscripten_bind_btTransform_setIdentity_0 = Module["_emscripten_bind_btTransform_setIdentity_0"] = asm["_emscripten_bind_btTransform_setIdentity_0"];
var _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"] = asm["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"];
var _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"] = asm["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"];
var _emscripten_bind_btCollisionDispatcher___destroy___0 = Module["_emscripten_bind_btCollisionDispatcher___destroy___0"] = asm["_emscripten_bind_btCollisionDispatcher___destroy___0"];
var _emscripten_bind_btRigidBody_applyCentralImpulse_1 = Module["_emscripten_bind_btRigidBody_applyCentralImpulse_1"] = asm["_emscripten_bind_btRigidBody_applyCentralImpulse_1"];
var _emscripten_bind_btDefaultMotionState_getWorldTransform_1 = Module["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"] = asm["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"];
var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"];
var _emscripten_bind_btVector3_op_mul_1 = Module["_emscripten_bind_btVector3_op_mul_1"] = asm["_emscripten_bind_btVector3_op_mul_1"];
var _emscripten_bind_btDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btDynamicsWorld_rayTest_3"] = asm["_emscripten_bind_btDynamicsWorld_rayTest_3"];
var _emscripten_bind_btRaycastVehicle_updateWheelTransform_2 = Module["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"] = asm["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"];
var _emscripten_bind_btQuadWord_x_0 = Module["_emscripten_bind_btQuadWord_x_0"] = asm["_emscripten_bind_btQuadWord_x_0"];
var _emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"] = asm["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"];
var _emscripten_bind_btCollisionObject_isKinematicObject_0 = Module["_emscripten_bind_btCollisionObject_isKinematicObject_0"] = asm["_emscripten_bind_btCollisionObject_isKinematicObject_0"];
var _emscripten_bind_ConvexResultCallback___destroy___0 = Module["_emscripten_bind_ConvexResultCallback___destroy___0"] = asm["_emscripten_bind_ConvexResultCallback___destroy___0"];
var _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"] = asm["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"];
var _emscripten_bind_btRigidBody_getCenterOfMassTransform_0 = Module["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"] = asm["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"];
var _emscripten_bind_btGhostObject_isKinematicObject_0 = Module["_emscripten_bind_btGhostObject_isKinematicObject_0"] = asm["_emscripten_bind_btGhostObject_isKinematicObject_0"];
var _emscripten_bind_btCapsuleShape___destroy___0 = Module["_emscripten_bind_btCapsuleShape___destroy___0"] = asm["_emscripten_bind_btCapsuleShape___destroy___0"];
var _emscripten_bind_btCollisionObject_activate_1 = Module["_emscripten_bind_btCollisionObject_activate_1"] = asm["_emscripten_bind_btCollisionObject_activate_1"];
var _emscripten_bind_btCollisionObject_activate_0 = Module["_emscripten_bind_btCollisionObject_activate_0"] = asm["_emscripten_bind_btCollisionObject_activate_0"];
var _emscripten_bind_btKinematicCharacterController_setUpAxis_1 = Module["_emscripten_bind_btKinematicCharacterController_setUpAxis_1"] = asm["_emscripten_bind_btKinematicCharacterController_setUpAxis_1"];
var _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"];
var _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1 = Module["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"] = asm["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"];
var _emscripten_bind_btVector3_setX_1 = Module["_emscripten_bind_btVector3_setX_1"] = asm["_emscripten_bind_btVector3_setX_1"];
var _emscripten_bind_btCollisionConfiguration___destroy___0 = Module["_emscripten_bind_btCollisionConfiguration___destroy___0"] = asm["_emscripten_bind_btCollisionConfiguration___destroy___0"];
var _emscripten_bind_btQuaternion_btQuaternion_4 = Module["_emscripten_bind_btQuaternion_btQuaternion_4"] = asm["_emscripten_bind_btQuaternion_btQuaternion_4"];
var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"] = asm["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"];
var _emscripten_bind_btManifoldPoint_set_m_localPointB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"] = asm["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"];
var _emscripten_bind_btVector3_setZ_1 = Module["_emscripten_bind_btVector3_setZ_1"] = asm["_emscripten_bind_btVector3_setZ_1"];
var _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"] = asm["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"];
var _emscripten_bind_btQuaternion_setValue_4 = Module["_emscripten_bind_btQuaternion_setValue_4"] = asm["_emscripten_bind_btQuaternion_setValue_4"];
var _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"];
var _emscripten_bind_LocalShapeInfo___destroy___0 = Module["_emscripten_bind_LocalShapeInfo___destroy___0"] = asm["_emscripten_bind_LocalShapeInfo___destroy___0"];
var _emscripten_bind_btQuadWord_setY_1 = Module["_emscripten_bind_btQuadWord_setY_1"] = asm["_emscripten_bind_btQuadWord_setY_1"];
var _emscripten_bind_btRigidBody_isKinematicObject_0 = Module["_emscripten_bind_btRigidBody_isKinematicObject_0"] = asm["_emscripten_bind_btRigidBody_isKinematicObject_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"];
var _emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0 = Module["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"] = asm["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"];
var _emscripten_bind_btConeTwistConstraint_setDamping_1 = Module["_emscripten_bind_btConeTwistConstraint_setDamping_1"] = asm["_emscripten_bind_btConeTwistConstraint_setDamping_1"];
var _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"] = asm["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"];
var _emscripten_bind_btCollisionWorld___destroy___0 = Module["_emscripten_bind_btCollisionWorld___destroy___0"] = asm["_emscripten_bind_btCollisionWorld___destroy___0"];
var _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"] = asm["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"];
var _emscripten_bind_btBoxShape_btBoxShape_1 = Module["_emscripten_bind_btBoxShape_btBoxShape_1"] = asm["_emscripten_bind_btBoxShape_btBoxShape_1"];
var _emscripten_bind_btPersistentManifold_getBody1_0 = Module["_emscripten_bind_btPersistentManifold_getBody1_0"] = asm["_emscripten_bind_btPersistentManifold_getBody1_0"];
var _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"] = asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"];
var _emscripten_bind_btKinematicCharacterController_setGravity_1 = Module["_emscripten_bind_btKinematicCharacterController_setGravity_1"] = asm["_emscripten_bind_btKinematicCharacterController_setGravity_1"];
var _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1 = Module["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"] = asm["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"];
var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5 = Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"] = asm["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"];
var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3 = Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"] = asm["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"];
var _emscripten_bind_LocalShapeInfo_get_m_shapePart_0 = Module["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"] = asm["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"];
var _emscripten_bind_btWheelInfo_get_m_rollInfluence_0 = Module["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"] = asm["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"];
var _emscripten_bind_btVector4_setValue_4 = Module["_emscripten_bind_btVector4_setValue_4"] = asm["_emscripten_bind_btVector4_setValue_4"];
var _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"] = asm["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"];
var _emscripten_bind_btDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"] = asm["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"];
var _emscripten_bind_btVector3_length_0 = Module["_emscripten_bind_btVector3_length_0"] = asm["_emscripten_bind_btVector3_length_0"];
var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2 = Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"] = asm["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"];
var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"] = asm["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"];
var _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"] = asm["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"];
var _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"] = asm["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"];
var _emscripten_bind_btPairCachingGhostObject___destroy___0 = Module["_emscripten_bind_btPairCachingGhostObject___destroy___0"] = asm["_emscripten_bind_btPairCachingGhostObject___destroy___0"];
var _emscripten_bind_btPairCachingGhostObject_activate_0 = Module["_emscripten_bind_btPairCachingGhostObject_activate_0"] = asm["_emscripten_bind_btPairCachingGhostObject_activate_0"];
var _emscripten_bind_btPairCachingGhostObject_activate_1 = Module["_emscripten_bind_btPairCachingGhostObject_activate_1"] = asm["_emscripten_bind_btPairCachingGhostObject_activate_1"];
var _emscripten_bind_btPairCachingGhostObject_forceActivationState_1 = Module["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"] = asm["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"];
var _emscripten_bind_btDefaultMotionState___destroy___0 = Module["_emscripten_bind_btDefaultMotionState___destroy___0"] = asm["_emscripten_bind_btDefaultMotionState___destroy___0"];
var _emscripten_bind_btDispatcherInfo_get_m_stepCount_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"];
var _emscripten_bind_btQuadWord_setW_1 = Module["_emscripten_bind_btQuadWord_setW_1"] = asm["_emscripten_bind_btQuadWord_setW_1"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"];
var _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2 = Module["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"] = asm["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"];
var _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"] = asm["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"];
var _emscripten_bind_btRigidBody_setLinearFactor_1 = Module["_emscripten_bind_btRigidBody_setLinearFactor_1"] = asm["_emscripten_bind_btRigidBody_setLinearFactor_1"];
var _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"];
var _emscripten_bind_btRaycastVehicle_setSteeringValue_2 = Module["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"] = asm["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"];
var _emscripten_bind_btPoint2PointConstraint___destroy___0 = Module["_emscripten_bind_btPoint2PointConstraint___destroy___0"] = asm["_emscripten_bind_btPoint2PointConstraint___destroy___0"];
var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"];
var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_bind_btDispatcherInfo_get_m_useEpa_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"];
var _emscripten_bind_btTransform_btTransform_2 = Module["_emscripten_bind_btTransform_btTransform_2"] = asm["_emscripten_bind_btTransform_btTransform_2"];
var _emscripten_bind_btTransform_btTransform_0 = Module["_emscripten_bind_btTransform_btTransform_0"] = asm["_emscripten_bind_btTransform_btTransform_0"];
var _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"] = asm["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"];
var _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"];
var _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3 = Module["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"] = asm["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"];
var _emscripten_bind_btCollisionObject_setActivationState_1 = Module["_emscripten_bind_btCollisionObject_setActivationState_1"] = asm["_emscripten_bind_btCollisionObject_setActivationState_1"];
var _emscripten_bind_btPersistentManifold___destroy___0 = Module["_emscripten_bind_btPersistentManifold___destroy___0"] = asm["_emscripten_bind_btPersistentManifold___destroy___0"];
var _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0 = Module["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"] = asm["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"];
var _emscripten_bind_btCylinderShapeZ___destroy___0 = Module["_emscripten_bind_btCylinderShapeZ___destroy___0"] = asm["_emscripten_bind_btCylinderShapeZ___destroy___0"];
var _emscripten_bind_btMatrix3x3___destroy___0 = Module["_emscripten_bind_btMatrix3x3___destroy___0"] = asm["_emscripten_bind_btMatrix3x3___destroy___0"];
var _emscripten_bind_ConvexResultCallback_hasHit_0 = Module["_emscripten_bind_ConvexResultCallback_hasHit_0"] = asm["_emscripten_bind_ConvexResultCallback_hasHit_0"];
var _emscripten_bind_btCollisionShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"];
var _emscripten_bind_btCollisionWorld_convexSweepTest_5 = Module["_emscripten_bind_btCollisionWorld_convexSweepTest_5"] = asm["_emscripten_bind_btCollisionWorld_convexSweepTest_5"];
var _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"] = asm["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"];
var _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"] = asm["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"];
var _emscripten_bind_btConstraintSetting_set_m_damping_1 = Module["_emscripten_bind_btConstraintSetting_set_m_damping_1"] = asm["_emscripten_bind_btConstraintSetting_set_m_damping_1"];
var _emscripten_bind_btVehicleRaycaster___destroy___0 = Module["_emscripten_bind_btVehicleRaycaster___destroy___0"] = asm["_emscripten_bind_btVehicleRaycaster___destroy___0"];
var _emscripten_bind_btRigidBody_applyForce_2 = Module["_emscripten_bind_btRigidBody_applyForce_2"] = asm["_emscripten_bind_btRigidBody_applyForce_2"];
var _emscripten_bind_btConeShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"] = asm["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"];
var _emscripten_bind_btConstraintSetting_set_m_tau_1 = Module["_emscripten_bind_btConstraintSetting_set_m_tau_1"] = asm["_emscripten_bind_btConstraintSetting_set_m_tau_1"];
var _emscripten_bind_btConvexHullShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"];
var _emscripten_bind_btSphereShape_calculateLocalInertia_2 = Module["_emscripten_bind_btSphereShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btSphereShape_calculateLocalInertia_2"];
var _emscripten_bind_btPoint2PointConstraint_get_m_setting_0 = Module["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"] = asm["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"];
var _emscripten_bind_LocalConvexResult_LocalConvexResult_5 = Module["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"] = asm["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"];
var _emscripten_bind_btGhostObject_setFriction_1 = Module["_emscripten_bind_btGhostObject_setFriction_1"] = asm["_emscripten_bind_btGhostObject_setFriction_1"];
var _emscripten_bind_btPairCachingGhostObject_getWorldTransform_0 = Module["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"] = asm["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"];
var _emscripten_bind_btRigidBody_setFriction_1 = Module["_emscripten_bind_btRigidBody_setFriction_1"] = asm["_emscripten_bind_btRigidBody_setFriction_1"];
var _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"] = asm["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"];
var _emscripten_bind_btGhostObject_setWorldTransform_1 = Module["_emscripten_bind_btGhostObject_setWorldTransform_1"] = asm["_emscripten_bind_btGhostObject_setWorldTransform_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"];
var _emscripten_bind_btConvexHullShape___destroy___0 = Module["_emscripten_bind_btConvexHullShape___destroy___0"] = asm["_emscripten_bind_btConvexHullShape___destroy___0"];
var _emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"];
var _emscripten_bind_btVector4_setX_1 = Module["_emscripten_bind_btVector4_setX_1"] = asm["_emscripten_bind_btVector4_setX_1"];
var _emscripten_bind_btKinematicCharacterController_jump_0 = Module["_emscripten_bind_btKinematicCharacterController_jump_0"] = asm["_emscripten_bind_btKinematicCharacterController_jump_0"];
var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1 = Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"] = asm["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"];
var _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"] = asm["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"];
var _emscripten_bind_btRigidBody_upcast_1 = Module["_emscripten_bind_btRigidBody_upcast_1"] = asm["_emscripten_bind_btRigidBody_upcast_1"];
var _emscripten_bind_btCollisionObject_getWorldTransform_0 = Module["_emscripten_bind_btCollisionObject_getWorldTransform_0"] = asm["_emscripten_bind_btCollisionObject_getWorldTransform_0"];
var _emscripten_bind_btVector4_setZ_1 = Module["_emscripten_bind_btVector4_setZ_1"] = asm["_emscripten_bind_btVector4_setZ_1"];
var _emscripten_bind_btQuadWord_y_0 = Module["_emscripten_bind_btQuadWord_y_0"] = asm["_emscripten_bind_btQuadWord_y_0"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _emscripten_bind_btTransform_getBasis_0 = Module["_emscripten_bind_btTransform_getBasis_0"] = asm["_emscripten_bind_btTransform_getBasis_0"];
var _emscripten_bind_btPairCachingGhostObject_setFriction_1 = Module["_emscripten_bind_btPairCachingGhostObject_setFriction_1"] = asm["_emscripten_bind_btPairCachingGhostObject_setFriction_1"];
var _emscripten_bind_btDispatcherInfo_set_m_useEpa_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"];
var _emscripten_bind_btCollisionDispatcher_getNumManifolds_0 = Module["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"] = asm["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"];
var _emscripten_bind_ClosestRayResultCallback___destroy___0 = Module["_emscripten_bind_ClosestRayResultCallback___destroy___0"] = asm["_emscripten_bind_ClosestRayResultCallback___destroy___0"];
var _emscripten_bind_btQuadWord_w_0 = Module["_emscripten_bind_btQuadWord_w_0"] = asm["_emscripten_bind_btQuadWord_w_0"];
var _emscripten_bind_btCompoundShape___destroy___0 = Module["_emscripten_bind_btCompoundShape___destroy___0"] = asm["_emscripten_bind_btCompoundShape___destroy___0"];
var _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"];
var _emscripten_bind_btGhostObject_btGhostObject_0 = Module["_emscripten_bind_btGhostObject_btGhostObject_0"] = asm["_emscripten_bind_btGhostObject_btGhostObject_0"];
var _emscripten_bind_btConeShape_btConeShape_2 = Module["_emscripten_bind_btConeShape_btConeShape_2"] = asm["_emscripten_bind_btConeShape_btConeShape_2"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"];
var _emscripten_bind_btManifoldPoint_set_m_localPointA_1 = Module["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"] = asm["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"];
var _emscripten_bind_btCollisionObject_setCollisionShape_1 = Module["_emscripten_bind_btCollisionObject_setCollisionShape_1"] = asm["_emscripten_bind_btCollisionObject_setCollisionShape_1"];
var _emscripten_bind_btWheelInfo___destroy___0 = Module["_emscripten_bind_btWheelInfo___destroy___0"] = asm["_emscripten_bind_btWheelInfo___destroy___0"];
var _emscripten_bind_btTransform_setRotation_1 = Module["_emscripten_bind_btTransform_setRotation_1"] = asm["_emscripten_bind_btTransform_setRotation_1"];
var _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0 = Module["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"] = asm["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"];
var _emscripten_bind_btPoint2PointConstraint_enableFeedback_1 = Module["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"] = asm["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"];
var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"] = asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"];
var _emscripten_bind_btAxisSweep3_btAxisSweep3_2 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"] = asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"];
var _emscripten_bind_btAxisSweep3_btAxisSweep3_3 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"] = asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"];
var _emscripten_bind_btBoxShape_calculateLocalInertia_2 = Module["_emscripten_bind_btBoxShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btBoxShape_calculateLocalInertia_2"];
var _emscripten_bind_btVector3_setY_1 = Module["_emscripten_bind_btVector3_setY_1"] = asm["_emscripten_bind_btVector3_setY_1"];
var _emscripten_bind_btAxisSweep3_btAxisSweep3_4 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"] = asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"];
var _emscripten_bind_btAxisSweep3_btAxisSweep3_5 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"] = asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"];
var _emscripten_bind_btQuadWord_setX_1 = Module["_emscripten_bind_btQuadWord_setX_1"] = asm["_emscripten_bind_btQuadWord_setX_1"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"];
var _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"] = asm["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"];
var _emscripten_bind_btOverlappingPairCache___destroy___0 = Module["_emscripten_bind_btOverlappingPairCache___destroy___0"] = asm["_emscripten_bind_btOverlappingPairCache___destroy___0"];
var _emscripten_bind_btConstraintSetting___destroy___0 = Module["_emscripten_bind_btConstraintSetting___destroy___0"] = asm["_emscripten_bind_btConstraintSetting___destroy___0"];
var _emscripten_bind_RayResultCallback___destroy___0 = Module["_emscripten_bind_RayResultCallback___destroy___0"] = asm["_emscripten_bind_RayResultCallback___destroy___0"];
var _emscripten_bind_btPersistentManifold_getBody0_0 = Module["_emscripten_bind_btPersistentManifold_getBody0_0"] = asm["_emscripten_bind_btPersistentManifold_getBody0_0"];
var _emscripten_bind_btConeShapeX_btConeShapeX_2 = Module["_emscripten_bind_btConeShapeX_btConeShapeX_2"] = asm["_emscripten_bind_btConeShapeX_btConeShapeX_2"];
var _emscripten_bind_btConeTwistConstraint_enableFeedback_1 = Module["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"] = asm["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"];
var _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"] = asm["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"];
var _emscripten_bind_btRigidBody_applyTorque_1 = Module["_emscripten_bind_btRigidBody_applyTorque_1"] = asm["_emscripten_bind_btRigidBody_applyTorque_1"];
var _emscripten_bind_btSliderConstraint_setUpperLinLimit_1 = Module["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"] = asm["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"];
var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2 = Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"] = asm["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"];
var _emscripten_bind_btConcaveShape___destroy___0 = Module["_emscripten_bind_btConcaveShape___destroy___0"] = asm["_emscripten_bind_btConcaveShape___destroy___0"];
var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4 = Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"] = asm["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"];
var _emscripten_bind_btQuaternion_x_0 = Module["_emscripten_bind_btQuaternion_x_0"] = asm["_emscripten_bind_btQuaternion_x_0"];
var _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"] = asm["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"];
var _emscripten_bind_btConcaveShape_setLocalScaling_1 = Module["_emscripten_bind_btConcaveShape_setLocalScaling_1"] = asm["_emscripten_bind_btConcaveShape_setLocalScaling_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"];
var _emscripten_bind_btConeShapeX_setLocalScaling_1 = Module["_emscripten_bind_btConeShapeX_setLocalScaling_1"] = asm["_emscripten_bind_btConeShapeX_setLocalScaling_1"];
var _emscripten_bind_btQuaternion_z_0 = Module["_emscripten_bind_btQuaternion_z_0"] = asm["_emscripten_bind_btQuaternion_z_0"];
var _emscripten_bind_btConvexHullShape_btConvexHullShape_0 = Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"] = asm["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"];
var _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"] = asm["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"];
var _emscripten_bind_btConstraintSetting_get_m_damping_0 = Module["_emscripten_bind_btConstraintSetting_get_m_damping_0"] = asm["_emscripten_bind_btConstraintSetting_get_m_damping_0"];
var _emscripten_bind_btGhostObject___destroy___0 = Module["_emscripten_bind_btGhostObject___destroy___0"] = asm["_emscripten_bind_btGhostObject___destroy___0"];
var _emscripten_bind_btGhostObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"] = asm["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"];
var _emscripten_bind_btRigidBody_applyCentralForce_1 = Module["_emscripten_bind_btRigidBody_applyCentralForce_1"] = asm["_emscripten_bind_btRigidBody_applyCentralForce_1"];
var _emscripten_bind_btQuaternion___destroy___0 = Module["_emscripten_bind_btQuaternion___destroy___0"] = asm["_emscripten_bind_btQuaternion___destroy___0"];
var _emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1 = Module["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"] = asm["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"];
var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"] = asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"];
var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"] = asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"];
var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"] = asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"];
var _emscripten_bind_btKinematicCharacterController_canJump_0 = Module["_emscripten_bind_btKinematicCharacterController_canJump_0"] = asm["_emscripten_bind_btKinematicCharacterController_canJump_0"];
var _emscripten_bind_btRigidBody_isActive_0 = Module["_emscripten_bind_btRigidBody_isActive_0"] = asm["_emscripten_bind_btRigidBody_isActive_0"];
var _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3 = Module["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"] = asm["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"];
var _emscripten_bind_btMotionState_setWorldTransform_1 = Module["_emscripten_bind_btMotionState_setWorldTransform_1"] = asm["_emscripten_bind_btMotionState_setWorldTransform_1"];
var _emscripten_bind_btCylinderShape_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShape_setLocalScaling_1"] = asm["_emscripten_bind_btCylinderShape_setLocalScaling_1"];
var _emscripten_bind_btCollisionWorld_rayTest_3 = Module["_emscripten_bind_btCollisionWorld_rayTest_3"] = asm["_emscripten_bind_btCollisionWorld_rayTest_3"];
var _emscripten_bind_btCompoundShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"];
var _emscripten_bind_btCollisionWorld_getDispatchInfo_0 = Module["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"] = asm["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"];
var _emscripten_bind_btRigidBody_setCollisionShape_1 = Module["_emscripten_bind_btRigidBody_setCollisionShape_1"] = asm["_emscripten_bind_btRigidBody_setCollisionShape_1"];
var _emscripten_bind_btConeShapeX___destroy___0 = Module["_emscripten_bind_btConeShapeX___destroy___0"] = asm["_emscripten_bind_btConeShapeX___destroy___0"];
var _emscripten_bind_btCollisionObject_getCollisionFlags_0 = Module["_emscripten_bind_btCollisionObject_getCollisionFlags_0"] = asm["_emscripten_bind_btCollisionObject_getCollisionFlags_0"];
var _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"];
var _emscripten_bind_btConeTwistConstraint_enableMotor_1 = Module["_emscripten_bind_btConeTwistConstraint_enableMotor_1"] = asm["_emscripten_bind_btConeTwistConstraint_enableMotor_1"];
var _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"] = asm["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"];
var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4 = Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"] = asm["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"];
var _emscripten_bind_btPairCachingGhostObject_setRestitution_1 = Module["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"] = asm["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"];
var _emscripten_bind_btBroadphaseInterface___destroy___0 = Module["_emscripten_bind_btBroadphaseInterface___destroy___0"] = asm["_emscripten_bind_btBroadphaseInterface___destroy___0"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"];
var _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"] = asm["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"];
var _emscripten_bind_btPersistentManifold_getNumContacts_0 = Module["_emscripten_bind_btPersistentManifold_getNumContacts_0"] = asm["_emscripten_bind_btPersistentManifold_getNumContacts_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"];
var _emscripten_bind_LocalConvexResult___destroy___0 = Module["_emscripten_bind_LocalConvexResult___destroy___0"] = asm["_emscripten_bind_LocalConvexResult___destroy___0"];
var _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0 = Module["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"] = asm["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"];
var _emscripten_bind_btCollisionWorld_addCollisionObject_3 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_3"] = asm["_emscripten_bind_btCollisionWorld_addCollisionObject_3"];
var _emscripten_bind_btRigidBody_getCollisionFlags_0 = Module["_emscripten_bind_btRigidBody_getCollisionFlags_0"] = asm["_emscripten_bind_btRigidBody_getCollisionFlags_0"];
var _emscripten_bind_btCollisionShape_setLocalScaling_1 = Module["_emscripten_bind_btCollisionShape_setLocalScaling_1"] = asm["_emscripten_bind_btCollisionShape_setLocalScaling_1"];
var _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"];
var _emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"] = asm["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"];
var _emscripten_bind_btMatrix3x3_setEulerZYX_3 = Module["_emscripten_bind_btMatrix3x3_setEulerZYX_3"] = asm["_emscripten_bind_btMatrix3x3_setEulerZYX_3"];
var _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"];
var _emscripten_bind_btConvexHullShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexHullShape_setLocalScaling_1"] = asm["_emscripten_bind_btConvexHullShape_setLocalScaling_1"];
var _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"] = asm["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"];
var _emscripten_bind_btCollisionWorld_getDispatcher_0 = Module["_emscripten_bind_btCollisionWorld_getDispatcher_0"] = asm["_emscripten_bind_btCollisionWorld_getDispatcher_0"];
var _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"] = asm["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"];
var _emscripten_bind_btTriangleMesh_btTriangleMesh_1 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"] = asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _emscripten_bind_btRaycastVehicle_getWheelTransformWS_1 = Module["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"] = asm["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"];
var _emscripten_bind_btRigidBody_setDamping_2 = Module["_emscripten_bind_btRigidBody_setDamping_2"] = asm["_emscripten_bind_btRigidBody_setDamping_2"];
var _emscripten_bind_btDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btDynamicsWorld_getDispatcher_0"] = asm["_emscripten_bind_btDynamicsWorld_getDispatcher_0"];
var _emscripten_bind_btGhostObject_setCollisionFlags_1 = Module["_emscripten_bind_btGhostObject_setCollisionFlags_1"] = asm["_emscripten_bind_btGhostObject_setCollisionFlags_1"];
var _emscripten_bind_btMatrix3x3_getRotation_1 = Module["_emscripten_bind_btMatrix3x3_getRotation_1"] = asm["_emscripten_bind_btMatrix3x3_getRotation_1"];
var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1 = Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"] = asm["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"];
var _emscripten_bind_btCylinderShapeX_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"] = asm["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"];
var _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0 = Module["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"] = asm["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"];
var _emscripten_bind_btCompoundShape_setLocalScaling_1 = Module["_emscripten_bind_btCompoundShape_setLocalScaling_1"] = asm["_emscripten_bind_btCompoundShape_setLocalScaling_1"];
var _emscripten_bind_btOverlappingPairCallback___destroy___0 = Module["_emscripten_bind_btOverlappingPairCallback___destroy___0"] = asm["_emscripten_bind_btOverlappingPairCallback___destroy___0"];
var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"] = asm["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"];
var _emscripten_bind_btVector4_setY_1 = Module["_emscripten_bind_btVector4_setY_1"] = asm["_emscripten_bind_btVector4_setY_1"];
var _emscripten_bind_btRigidBody_setContactProcessingThreshold_1 = Module["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"] = asm["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"];
var _emscripten_bind_btRigidBody_getLinearVelocity_0 = Module["_emscripten_bind_btRigidBody_getLinearVelocity_0"] = asm["_emscripten_bind_btRigidBody_getLinearVelocity_0"];
var _emscripten_bind_btRigidBody_applyImpulse_2 = Module["_emscripten_bind_btRigidBody_applyImpulse_2"] = asm["_emscripten_bind_btRigidBody_applyImpulse_2"];
var _emscripten_bind_btConcaveShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"];
var _emscripten_bind_btRigidBody_setWorldTransform_1 = Module["_emscripten_bind_btRigidBody_setWorldTransform_1"] = asm["_emscripten_bind_btRigidBody_setWorldTransform_1"];
var _emscripten_bind_btRigidBody_setAngularVelocity_1 = Module["_emscripten_bind_btRigidBody_setAngularVelocity_1"] = asm["_emscripten_bind_btRigidBody_setAngularVelocity_1"];
var _emscripten_bind_btConvexShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexShape_setLocalScaling_1"] = asm["_emscripten_bind_btConvexShape_setLocalScaling_1"];
var _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"];
var _free = Module["_free"] = asm["_free"];
var _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"] = asm["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"];
var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"] = asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"];
var _emscripten_bind_RayResultCallback_hasHit_0 = Module["_emscripten_bind_RayResultCallback_hasHit_0"] = asm["_emscripten_bind_RayResultCallback_hasHit_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"];
var _emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"];
var _emscripten_bind_btWheelInfo_get_m_frictionSlip_0 = Module["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"] = asm["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"];
var _emscripten_bind_btConeShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btConeShapeZ_setLocalScaling_1"] = asm["_emscripten_bind_btConeShapeZ_setLocalScaling_1"];
var _emscripten_bind_btPairCachingGhostObject_setActivationState_1 = Module["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"] = asm["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"];
var _emscripten_bind_btConvexTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"] = asm["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"];
var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"] = asm["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"];
var _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1 = Module["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"] = asm["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"];
var _emscripten_bind_btRigidBody_getAngularVelocity_0 = Module["_emscripten_bind_btRigidBody_getAngularVelocity_0"] = asm["_emscripten_bind_btRigidBody_getAngularVelocity_0"];
var _emscripten_bind_btCompoundShape_btCompoundShape_0 = Module["_emscripten_bind_btCompoundShape_btCompoundShape_0"] = asm["_emscripten_bind_btCompoundShape_btCompoundShape_0"];
var _emscripten_bind_btCompoundShape_btCompoundShape_1 = Module["_emscripten_bind_btCompoundShape_btCompoundShape_1"] = asm["_emscripten_bind_btCompoundShape_btCompoundShape_1"];
var _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1 = Module["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"] = asm["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"];
var _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2 = Module["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"] = asm["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"];
var _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"];
var _emscripten_bind_btRigidBody_updateInertiaTensor_0 = Module["_emscripten_bind_btRigidBody_updateInertiaTensor_0"] = asm["_emscripten_bind_btRigidBody_updateInertiaTensor_0"];
var _emscripten_bind_btTransform_setOrigin_1 = Module["_emscripten_bind_btTransform_setOrigin_1"] = asm["_emscripten_bind_btTransform_setOrigin_1"];
var _emscripten_bind_ClosestRayResultCallback_hasHit_0 = Module["_emscripten_bind_ClosestRayResultCallback_hasHit_0"] = asm["_emscripten_bind_ClosestRayResultCallback_hasHit_0"];
var _emscripten_bind_btCompoundShape_addChildShape_2 = Module["_emscripten_bind_btCompoundShape_addChildShape_2"] = asm["_emscripten_bind_btCompoundShape_addChildShape_2"];
var _emscripten_bind_btDispatcher___destroy___0 = Module["_emscripten_bind_btDispatcher___destroy___0"] = asm["_emscripten_bind_btDispatcher___destroy___0"];
var _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"] = asm["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"];
var _emscripten_bind_btDiscreteDynamicsWorld___destroy___0 = Module["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"] = asm["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"];
var _emscripten_bind_btConvexShape___destroy___0 = Module["_emscripten_bind_btConvexShape___destroy___0"] = asm["_emscripten_bind_btConvexShape___destroy___0"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _emscripten_bind_btCapsuleShapeX_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"] = asm["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"];
var _emscripten_bind_btCollisionObject_setRestitution_1 = Module["_emscripten_bind_btCollisionObject_setRestitution_1"] = asm["_emscripten_bind_btCollisionObject_setRestitution_1"];
var _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"] = asm["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"];
var _emscripten_bind_LocalConvexResult_get_m_hitFraction_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"] = asm["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"];
var _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"];
var _emscripten_bind_btQuaternion_w_0 = Module["_emscripten_bind_btQuaternion_w_0"] = asm["_emscripten_bind_btQuaternion_w_0"];
var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"] = asm["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"];
var _emscripten_bind_btTransform_getRotation_0 = Module["_emscripten_bind_btTransform_getRotation_0"] = asm["_emscripten_bind_btTransform_getRotation_0"];
var _emscripten_bind_btHingeConstraint_btHingeConstraint_6 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"] = asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"];
var _emscripten_bind_btHingeConstraint_btHingeConstraint_7 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"] = asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"];
var _emscripten_bind_btHingeConstraint_btHingeConstraint_4 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"] = asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"];
var _emscripten_bind_btHingeConstraint_btHingeConstraint_5 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"] = asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"];
var _emscripten_bind_btHingeConstraint_btHingeConstraint_2 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"] = asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"];
var _emscripten_bind_btHingeConstraint_btHingeConstraint_3 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"] = asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"];
var _emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"];
var _emscripten_bind_btTypedConstraint___destroy___0 = Module["_emscripten_bind_btTypedConstraint___destroy___0"] = asm["_emscripten_bind_btTypedConstraint___destroy___0"];
var _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1 = Module["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"] = asm["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"];
var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"];
var _emscripten_bind_btVector3_z_0 = Module["_emscripten_bind_btVector3_z_0"] = asm["_emscripten_bind_btVector3_z_0"];
var _emscripten_bind_btSphereShape_btSphereShape_1 = Module["_emscripten_bind_btSphereShape_btSphereShape_1"] = asm["_emscripten_bind_btSphereShape_btSphereShape_1"];
var _emscripten_bind_btQuaternion_y_0 = Module["_emscripten_bind_btQuaternion_y_0"] = asm["_emscripten_bind_btQuaternion_y_0"];
var _emscripten_bind_btCollisionWorld_addCollisionObject_1 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_1"] = asm["_emscripten_bind_btCollisionWorld_addCollisionObject_1"];
var _emscripten_bind_btCollisionWorld_addCollisionObject_2 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_2"] = asm["_emscripten_bind_btCollisionWorld_addCollisionObject_2"];
var _emscripten_bind_btRigidBody_setRestitution_1 = Module["_emscripten_bind_btRigidBody_setRestitution_1"] = asm["_emscripten_bind_btRigidBody_setRestitution_1"];
var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"] = asm["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"];
var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"];
var _emscripten_bind_btRigidBody_getMotionState_0 = Module["_emscripten_bind_btRigidBody_getMotionState_0"] = asm["_emscripten_bind_btRigidBody_getMotionState_0"];
var _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1 = Module["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"] = asm["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"];
var _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7 = Module["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"] = asm["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"];
var _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0 = Module["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"] = asm["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"];
var _emscripten_bind_btActionInterface___destroy___0 = Module["_emscripten_bind_btActionInterface___destroy___0"] = asm["_emscripten_bind_btActionInterface___destroy___0"];
var _emscripten_bind_btDefaultMotionState_setWorldTransform_1 = Module["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"] = asm["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"];
var _emscripten_bind_btDefaultVehicleRaycaster___destroy___0 = Module["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"] = asm["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"];
var _emscripten_bind_RayResultCallback_get_m_collisionObject_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"] = asm["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"];
var _emscripten_bind_btPoint2PointConstraint_getPivotInA_0 = Module["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"] = asm["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"];
var _emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"];
var _emscripten_bind_btCylinderShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"];
var _emscripten_bind_btGhostObject_setRestitution_1 = Module["_emscripten_bind_btGhostObject_setRestitution_1"] = asm["_emscripten_bind_btGhostObject_setRestitution_1"];
var _emscripten_bind_btDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"] = asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"];
var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"];
var _emscripten_bind_btDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"] = asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"];
var _emscripten_bind_btDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"] = asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"];
var _emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"];
var _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1 = Module["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"] = asm["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"];
var _emscripten_bind_btVector4_op_mul_1 = Module["_emscripten_bind_btVector4_op_mul_1"] = asm["_emscripten_bind_btVector4_op_mul_1"];
var _emscripten_bind_btCylinderShape_btCylinderShape_1 = Module["_emscripten_bind_btCylinderShape_btCylinderShape_1"] = asm["_emscripten_bind_btCylinderShape_btCylinderShape_1"];
var _emscripten_bind_btVector3___destroy___0 = Module["_emscripten_bind_btVector3___destroy___0"] = asm["_emscripten_bind_btVector3___destroy___0"];
var _emscripten_bind_btRigidBody_setAngularFactor_1 = Module["_emscripten_bind_btRigidBody_setAngularFactor_1"] = asm["_emscripten_bind_btRigidBody_setAngularFactor_1"];
var _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"] = asm["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"];
var _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1 = Module["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"] = asm["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"];
var _emscripten_bind_btMotionState_getWorldTransform_1 = Module["_emscripten_bind_btMotionState_getWorldTransform_1"] = asm["_emscripten_bind_btMotionState_getWorldTransform_1"];
var _emscripten_bind_btDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btDynamicsWorld_getBroadphase_0"] = asm["_emscripten_bind_btDynamicsWorld_getBroadphase_0"];
var _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"];
var _emscripten_bind_btVector3_x_0 = Module["_emscripten_bind_btVector3_x_0"] = asm["_emscripten_bind_btVector3_x_0"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3 = Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"];
var _emscripten_bind_btCollisionObject_getCollisionShape_0 = Module["_emscripten_bind_btCollisionObject_getCollisionShape_0"] = asm["_emscripten_bind_btCollisionObject_getCollisionShape_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4 = Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"];
var _emscripten_bind_btManifoldPoint___destroy___0 = Module["_emscripten_bind_btManifoldPoint___destroy___0"] = asm["_emscripten_bind_btManifoldPoint___destroy___0"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"];
var _emscripten_bind_btVector4_length_0 = Module["_emscripten_bind_btVector4_length_0"] = asm["_emscripten_bind_btVector4_length_0"];
var _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1 = Module["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"] = asm["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"];
var _emscripten_bind_btCylinderShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"] = asm["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"];
var _emscripten_bind_ClosestConvexResultCallback___destroy___0 = Module["_emscripten_bind_ClosestConvexResultCallback___destroy___0"] = asm["_emscripten_bind_ClosestConvexResultCallback___destroy___0"];
var _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0 = Module["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"] = asm["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"];
var _emscripten_bind_btCollisionObject_setFriction_1 = Module["_emscripten_bind_btCollisionObject_setFriction_1"] = asm["_emscripten_bind_btCollisionObject_setFriction_1"];
var _emscripten_bind_btDefaultCollisionConfiguration___destroy___0 = Module["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"] = asm["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"];
var _emscripten_bind_btRigidBody_setMassProps_2 = Module["_emscripten_bind_btRigidBody_setMassProps_2"] = asm["_emscripten_bind_btRigidBody_setMassProps_2"];
var _emscripten_bind_btVector3_setValue_3 = Module["_emscripten_bind_btVector3_setValue_3"] = asm["_emscripten_bind_btVector3_setValue_3"];
var _emscripten_bind_btGhostObject_getCollisionFlags_0 = Module["_emscripten_bind_btGhostObject_getCollisionFlags_0"] = asm["_emscripten_bind_btGhostObject_getCollisionFlags_0"];
var _emscripten_bind_btCapsuleShapeX___destroy___0 = Module["_emscripten_bind_btCapsuleShapeX___destroy___0"] = asm["_emscripten_bind_btCapsuleShapeX___destroy___0"];
var _emscripten_bind_btHingeConstraint_setLimit_4 = Module["_emscripten_bind_btHingeConstraint_setLimit_4"] = asm["_emscripten_bind_btHingeConstraint_setLimit_4"];
var _emscripten_bind_btHingeConstraint_setLimit_5 = Module["_emscripten_bind_btHingeConstraint_setLimit_5"] = asm["_emscripten_bind_btHingeConstraint_setLimit_5"];
var _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"] = asm["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"];
var _emscripten_bind_btConeShape_setLocalScaling_1 = Module["_emscripten_bind_btConeShape_setLocalScaling_1"] = asm["_emscripten_bind_btConeShape_setLocalScaling_1"];
var _emscripten_bind_btGhostObject_getNumOverlappingObjects_0 = Module["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"] = asm["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"];
var _emscripten_bind_btGhostObject_getCollisionShape_0 = Module["_emscripten_bind_btGhostObject_getCollisionShape_0"] = asm["_emscripten_bind_btGhostObject_getCollisionShape_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"];
var _emscripten_bind_btPersistentManifold_getContactPoint_1 = Module["_emscripten_bind_btPersistentManifold_getContactPoint_1"] = asm["_emscripten_bind_btPersistentManifold_getContactPoint_1"];
var _emscripten_bind_btConeShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"] = asm["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"];
var _emscripten_bind_btGhostObject_activate_0 = Module["_emscripten_bind_btGhostObject_activate_0"] = asm["_emscripten_bind_btGhostObject_activate_0"];
var _emscripten_bind_btGhostObject_activate_1 = Module["_emscripten_bind_btGhostObject_activate_1"] = asm["_emscripten_bind_btGhostObject_activate_1"];
var _emscripten_bind_btManifoldPoint_getPositionWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"] = asm["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"];
var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0 = Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"] = asm["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"];
var _emscripten_bind_btConeShapeZ_btConeShapeZ_2 = Module["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"] = asm["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"];
var _emscripten_bind_btSphereShape___destroy___0 = Module["_emscripten_bind_btSphereShape___destroy___0"] = asm["_emscripten_bind_btSphereShape___destroy___0"];
var _emscripten_bind_btSliderConstraint_setUpperAngLimit_1 = Module["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"] = asm["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"];
var _emscripten_bind_btDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btDynamicsWorld_contactPairTest_3"] = asm["_emscripten_bind_btDynamicsWorld_contactPairTest_3"];
var _emscripten_bind_btCollisionWorld_getPairCache_0 = Module["_emscripten_bind_btCollisionWorld_getPairCache_0"] = asm["_emscripten_bind_btCollisionWorld_getPairCache_0"];
var _emscripten_bind_btConeTwistConstraint_setMotorTarget_1 = Module["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"] = asm["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"];
var _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"] = asm["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"];
var _emscripten_bind_btWheelInfo_set_m_rollInfluence_1 = Module["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"] = asm["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"];
var _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0 = Module["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"] = asm["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"];
var _emscripten_bind_btGhostObject_forceActivationState_1 = Module["_emscripten_bind_btGhostObject_forceActivationState_1"] = asm["_emscripten_bind_btGhostObject_forceActivationState_1"];
var _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0 = Module["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"] = asm["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"];
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = asm["_emscripten_bind_VoidPtr___destroy___0"];
var _emscripten_bind_btSliderConstraint_setLowerAngLimit_1 = Module["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"] = asm["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"];
var _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2 = Module["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"] = asm["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"];
var _emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"] = asm["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"];
var _emscripten_bind_btRaycastVehicle_getRigidBody_0 = Module["_emscripten_bind_btRaycastVehicle_getRigidBody_0"] = asm["_emscripten_bind_btRaycastVehicle_getRigidBody_0"];
var _emscripten_bind_btWheelInfo_get_m_steering_0 = Module["_emscripten_bind_btWheelInfo_get_m_steering_0"] = asm["_emscripten_bind_btWheelInfo_get_m_steering_0"];
var _emscripten_bind_btConstraintSetting_get_m_tau_0 = Module["_emscripten_bind_btConstraintSetting_get_m_tau_0"] = asm["_emscripten_bind_btConstraintSetting_get_m_tau_0"];
var _emscripten_bind_btSliderConstraint___destroy___0 = Module["_emscripten_bind_btSliderConstraint___destroy___0"] = asm["_emscripten_bind_btSliderConstraint___destroy___0"];
var _emscripten_bind_btCollisionShape___destroy___0 = Module["_emscripten_bind_btCollisionShape___destroy___0"] = asm["_emscripten_bind_btCollisionShape___destroy___0"];
var _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"] = asm["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"];
var _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"];
var _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"] = asm["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"];
var _emscripten_bind_btKinematicCharacterController_warp_1 = Module["_emscripten_bind_btKinematicCharacterController_warp_1"] = asm["_emscripten_bind_btKinematicCharacterController_warp_1"];
var _emscripten_bind_btAxisSweep3___destroy___0 = Module["_emscripten_bind_btAxisSweep3___destroy___0"] = asm["_emscripten_bind_btAxisSweep3___destroy___0"];
var _emscripten_bind_btTriangleMesh___destroy___0 = Module["_emscripten_bind_btTriangleMesh___destroy___0"] = asm["_emscripten_bind_btTriangleMesh___destroy___0"];
var _emscripten_bind_btKinematicCharacterController_preStep_1 = Module["_emscripten_bind_btKinematicCharacterController_preStep_1"] = asm["_emscripten_bind_btKinematicCharacterController_preStep_1"];
var _emscripten_bind_btRaycastVehicle_applyEngineForce_2 = Module["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"] = asm["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"];
var _emscripten_bind_btRaycastVehicle_setBrake_2 = Module["_emscripten_bind_btRaycastVehicle_setBrake_2"] = asm["_emscripten_bind_btRaycastVehicle_setBrake_2"];
var _emscripten_bind_ConcreteContactResultCallback___destroy___0 = Module["_emscripten_bind_ConcreteContactResultCallback___destroy___0"] = asm["_emscripten_bind_ConcreteContactResultCallback___destroy___0"];
var _emscripten_bind_btCollisionObject___destroy___0 = Module["_emscripten_bind_btCollisionObject___destroy___0"] = asm["_emscripten_bind_btCollisionObject___destroy___0"];
var _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"] = asm["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"];
var _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1 = Module["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"] = asm["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"];
var _emscripten_bind_btDispatcherInfo_set_m_timeStep_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"];
var _emscripten_bind_btVector3_btVector3_3 = Module["_emscripten_bind_btVector3_btVector3_3"] = asm["_emscripten_bind_btVector3_btVector3_3"];
var _emscripten_bind_btVector3_btVector3_0 = Module["_emscripten_bind_btVector3_btVector3_0"] = asm["_emscripten_bind_btVector3_btVector3_0"];
var _emscripten_bind_btBoxShape___destroy___0 = Module["_emscripten_bind_btBoxShape___destroy___0"] = asm["_emscripten_bind_btBoxShape___destroy___0"];
var _emscripten_bind_btDiscreteDynamicsWorld_getGravity_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"];
var _emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"];
var _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"] = asm["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"];
var _emscripten_bind_btConeTwistConstraint___destroy___0 = Module["_emscripten_bind_btConeTwistConstraint___destroy___0"] = asm["_emscripten_bind_btConeTwistConstraint___destroy___0"];
var _emscripten_bind_btQuadWord___destroy___0 = Module["_emscripten_bind_btQuadWord___destroy___0"] = asm["_emscripten_bind_btQuadWord___destroy___0"];
var _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"] = asm["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"];
var _emscripten_bind_btRigidBody_setCenterOfMassTransform_1 = Module["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"] = asm["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"];
var _emscripten_bind_btConstraintSolver___destroy___0 = Module["_emscripten_bind_btConstraintSolver___destroy___0"] = asm["_emscripten_bind_btConstraintSolver___destroy___0"];
var _emscripten_bind_btDbvtBroadphase___destroy___0 = Module["_emscripten_bind_btDbvtBroadphase___destroy___0"] = asm["_emscripten_bind_btDbvtBroadphase___destroy___0"];
var _emscripten_bind_btCapsuleShape_btCapsuleShape_2 = Module["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"] = asm["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"];
var _emscripten_bind_btTypedConstraint_enableFeedback_1 = Module["_emscripten_bind_btTypedConstraint_enableFeedback_1"] = asm["_emscripten_bind_btTypedConstraint_enableFeedback_1"];
var _emscripten_bind_btQuadWord_setZ_1 = Module["_emscripten_bind_btQuadWord_setZ_1"] = asm["_emscripten_bind_btQuadWord_setZ_1"];
var _emscripten_bind_btCapsuleShape_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShape_setLocalScaling_1"] = asm["_emscripten_bind_btCapsuleShape_setLocalScaling_1"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"];
var _emscripten_bind_btTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"] = asm["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"];
var _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"] = asm["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"];
var _emscripten_bind_btPersistentManifold_btPersistentManifold_0 = Module["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"] = asm["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"];
var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"] = asm["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"];
var _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2 = Module["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"] = asm["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"];
var _emscripten_bind_btVector4___destroy___0 = Module["_emscripten_bind_btVector4___destroy___0"] = asm["_emscripten_bind_btVector4___destroy___0"];
var _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"] = asm["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"];
var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"] = asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2 = Module["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"];
var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"] = asm["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"];
var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0 = Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"] = asm["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"];
var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1 = Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"] = asm["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"];
var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3 = Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"] = asm["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"];
var _emscripten_bind_btPoint2PointConstraint_getPivotInB_0 = Module["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"] = asm["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"];
var _emscripten_bind_btKinematicCharacterController_playerStep_2 = Module["_emscripten_bind_btKinematicCharacterController_playerStep_2"] = asm["_emscripten_bind_btKinematicCharacterController_playerStep_2"];
var _emscripten_bind_btDispatcherInfo___destroy___0 = Module["_emscripten_bind_btDispatcherInfo___destroy___0"] = asm["_emscripten_bind_btDispatcherInfo___destroy___0"];
var _emscripten_bind_btStaticPlaneShape_setLocalScaling_1 = Module["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"] = asm["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"];
var _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"];
var _emscripten_bind_ContactResultCallback_addSingleResult_7 = Module["_emscripten_bind_ContactResultCallback_addSingleResult_7"] = asm["_emscripten_bind_ContactResultCallback_addSingleResult_7"];
var _emscripten_bind_btGhostObject_getWorldTransform_0 = Module["_emscripten_bind_btGhostObject_getWorldTransform_0"] = asm["_emscripten_bind_btGhostObject_getWorldTransform_0"];
var _emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"];
var _emscripten_bind_LocalConvexResult_set_m_hitFraction_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"] = asm["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"];
var _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"] = asm["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"];
var _emscripten_bind_btDispatcherInfo_get_m_timeStep_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"];
var _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"] = asm["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"];
var _emscripten_bind_btDynamicsWorld___destroy___0 = Module["_emscripten_bind_btDynamicsWorld___destroy___0"] = asm["_emscripten_bind_btDynamicsWorld___destroy___0"];
var _emscripten_bind_btMotionState___destroy___0 = Module["_emscripten_bind_btMotionState___destroy___0"] = asm["_emscripten_bind_btMotionState___destroy___0"];
var _emscripten_bind_btCollisionObject_setCollisionFlags_1 = Module["_emscripten_bind_btCollisionObject_setCollisionFlags_1"] = asm["_emscripten_bind_btCollisionObject_setCollisionFlags_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"];
var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"];
var _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"] = asm["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"];
var _emscripten_bind_btRaycastVehicle_getNumWheels_0 = Module["_emscripten_bind_btRaycastVehicle_getNumWheels_0"] = asm["_emscripten_bind_btRaycastVehicle_getNumWheels_0"];
var _emscripten_bind_btDispatcher_getManifoldByIndexInternal_1 = Module["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"] = asm["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"];
var _emscripten_bind_btWheelInfo_set_m_steering_1 = Module["_emscripten_bind_btWheelInfo_set_m_steering_1"] = asm["_emscripten_bind_btWheelInfo_set_m_steering_1"];
var _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1 = Module["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"] = asm["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"];
var _emscripten_bind_btConeTwistConstraint_setAngularOnly_1 = Module["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"] = asm["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"];
var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4 = Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"] = asm["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"];
var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2 = Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"] = asm["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"];
var _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1 = Module["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"] = asm["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"];
var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"] = asm["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"];
var _emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1 = Module["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"] = asm["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"];
var _emscripten_bind_btRigidBodyConstructionInfo___destroy___0 = Module["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"];
var _emscripten_bind_btRigidBody_getWorldTransform_0 = Module["_emscripten_bind_btRigidBody_getWorldTransform_0"] = asm["_emscripten_bind_btRigidBody_getWorldTransform_0"];
var _emscripten_bind_btPoint2PointConstraint_setPivotA_1 = Module["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"] = asm["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"];
var _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"] = asm["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_bind_btCapsuleShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"];
var _emscripten_bind_btVector3_y_0 = Module["_emscripten_bind_btVector3_y_0"] = asm["_emscripten_bind_btVector3_y_0"];
var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"] = asm["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"];
var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2 = Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"] = asm["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"];
var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3 = Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"] = asm["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"];
var _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0 = Module["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"] = asm["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"];
var _emscripten_bind_btGhostObject_setCollisionShape_1 = Module["_emscripten_bind_btGhostObject_setCollisionShape_1"] = asm["_emscripten_bind_btGhostObject_setCollisionShape_1"];
var _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"];
var _emscripten_bind_btQuaternion_setW_1 = Module["_emscripten_bind_btQuaternion_setW_1"] = asm["_emscripten_bind_btQuaternion_setW_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"];
var _emscripten_bind_btGhostObject_isActive_0 = Module["_emscripten_bind_btGhostObject_isActive_0"] = asm["_emscripten_bind_btGhostObject_isActive_0"];
var _emscripten_bind_btVector4_z_0 = Module["_emscripten_bind_btVector4_z_0"] = asm["_emscripten_bind_btVector4_z_0"];
var _emscripten_bind_btCollisionObject_forceActivationState_1 = Module["_emscripten_bind_btCollisionObject_forceActivationState_1"] = asm["_emscripten_bind_btCollisionObject_forceActivationState_1"];
var _emscripten_bind_btKinematicCharacterController_onGround_0 = Module["_emscripten_bind_btKinematicCharacterController_onGround_0"] = asm["_emscripten_bind_btKinematicCharacterController_onGround_0"];
var _emscripten_bind_btRaycastVehicle_getWheelInfo_1 = Module["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"] = asm["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"];
var _emscripten_bind_btConeTwistConstraint_setLimit_2 = Module["_emscripten_bind_btConeTwistConstraint_setLimit_2"] = asm["_emscripten_bind_btConeTwistConstraint_setLimit_2"];
var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"] = asm["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"];
var _emscripten_bind_btRigidBody___destroy___0 = Module["_emscripten_bind_btRigidBody___destroy___0"] = asm["_emscripten_bind_btRigidBody___destroy___0"];
var _emscripten_bind_btStridingMeshInterface___destroy___0 = Module["_emscripten_bind_btStridingMeshInterface___destroy___0"] = asm["_emscripten_bind_btStridingMeshInterface___destroy___0"];
var _emscripten_bind_btRigidBody_setSleepingThresholds_2 = Module["_emscripten_bind_btRigidBody_setSleepingThresholds_2"] = asm["_emscripten_bind_btRigidBody_setSleepingThresholds_2"];
var _emscripten_bind_btCollisionObject_setWorldTransform_1 = Module["_emscripten_bind_btCollisionObject_setWorldTransform_1"] = asm["_emscripten_bind_btCollisionObject_setWorldTransform_1"];
var _emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0 = Module["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"] = asm["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"];
var _emscripten_bind_btManifoldPoint_get_m_localPointA_0 = Module["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"] = asm["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"];
var _emscripten_bind_btCollisionWorld_getBroadphase_0 = Module["_emscripten_bind_btCollisionWorld_getBroadphase_0"] = asm["_emscripten_bind_btCollisionWorld_getBroadphase_0"];
var _emscripten_bind_btDispatcher_getNumManifolds_0 = Module["_emscripten_bind_btDispatcher_getNumManifolds_0"] = asm["_emscripten_bind_btDispatcher_getNumManifolds_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"];
var _emscripten_bind_btRigidBody_activate_1 = Module["_emscripten_bind_btRigidBody_activate_1"] = asm["_emscripten_bind_btRigidBody_activate_1"];
var _emscripten_bind_btRigidBody_activate_0 = Module["_emscripten_bind_btRigidBody_activate_0"] = asm["_emscripten_bind_btRigidBody_activate_0"];
var _emscripten_bind_btRaycastVehicle___destroy___0 = Module["_emscripten_bind_btRaycastVehicle___destroy___0"] = asm["_emscripten_bind_btRaycastVehicle___destroy___0"];
var _emscripten_bind_btGhostObject_setActivationState_1 = Module["_emscripten_bind_btGhostObject_setActivationState_1"] = asm["_emscripten_bind_btGhostObject_setActivationState_1"];
var _emscripten_bind_btCollisionWorld_contactPairTest_3 = Module["_emscripten_bind_btCollisionWorld_contactPairTest_3"] = asm["_emscripten_bind_btCollisionWorld_contactPairTest_3"];
var _emscripten_bind_btCylinderShapeX___destroy___0 = Module["_emscripten_bind_btCylinderShapeX___destroy___0"] = asm["_emscripten_bind_btCylinderShapeX___destroy___0"];
var _emscripten_bind_btManifoldPoint_getPositionWorldOnA_0 = Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"] = asm["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"];
var _emscripten_bind_ContactResultCallback___destroy___0 = Module["_emscripten_bind_ContactResultCallback___destroy___0"] = asm["_emscripten_bind_ContactResultCallback___destroy___0"];
var _emscripten_bind_btDispatcherInfo_set_m_stepCount_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"] = asm["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"];
var _emscripten_bind_btVector4_x_0 = Module["_emscripten_bind_btVector4_x_0"] = asm["_emscripten_bind_btVector4_x_0"];
var _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"] = asm["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"];
var _emscripten_bind_btKinematicCharacterController_getGhostObject_0 = Module["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"] = asm["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"];
var _emscripten_bind_btRigidBody_btRigidBody_1 = Module["_emscripten_bind_btRigidBody_btRigidBody_1"] = asm["_emscripten_bind_btRigidBody_btRigidBody_1"];
var _emscripten_bind_btTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btTriangleMeshShape___destroy___0"] = asm["_emscripten_bind_btTriangleMeshShape___destroy___0"];
var _emscripten_bind_btKinematicCharacterController_setWalkDirection_1 = Module["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"] = asm["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"];
var _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"];
var _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"] = asm["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"];
var _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"] = asm["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"];
var _emscripten_bind_btKinematicCharacterController_getGravity_0 = Module["_emscripten_bind_btKinematicCharacterController_getGravity_0"] = asm["_emscripten_bind_btKinematicCharacterController_getGravity_0"];
var _emscripten_bind_btDiscreteDynamicsWorld_addAction_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"];
var _emscripten_bind_btQuaternion_setY_1 = Module["_emscripten_bind_btQuaternion_setY_1"] = asm["_emscripten_bind_btQuaternion_setY_1"];
var _emscripten_bind_btConeShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btConeShape_calculateLocalInertia_2"];
var _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"] = asm["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"];
var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"] = asm["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _emscripten_bind_btSphereShape_setLocalScaling_1 = Module["_emscripten_bind_btSphereShape_setLocalScaling_1"] = asm["_emscripten_bind_btSphereShape_setLocalScaling_1"];
var _emscripten_bind_btVector4_w_0 = Module["_emscripten_bind_btVector4_w_0"] = asm["_emscripten_bind_btVector4_w_0"];
var _emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"] = asm["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"];
var _emscripten_bind_btBvhTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"] = asm["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"];
var _emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"] = asm["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"];
var _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"] = asm["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"];
var _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"];
var _emscripten_bind_btVector4_y_0 = Module["_emscripten_bind_btVector4_y_0"] = asm["_emscripten_bind_btVector4_y_0"];
var _emscripten_bind_btGeneric6DofConstraint___destroy___0 = Module["_emscripten_bind_btGeneric6DofConstraint___destroy___0"] = asm["_emscripten_bind_btGeneric6DofConstraint___destroy___0"];
var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"] = asm["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"];
var _emscripten_bind_btConvexHullShape_addPoint_1 = Module["_emscripten_bind_btConvexHullShape_addPoint_1"] = asm["_emscripten_bind_btConvexHullShape_addPoint_1"];
var _emscripten_bind_btConvexHullShape_addPoint_2 = Module["_emscripten_bind_btConvexHullShape_addPoint_2"] = asm["_emscripten_bind_btConvexHullShape_addPoint_2"];
var _emscripten_bind_btTransform_getOrigin_0 = Module["_emscripten_bind_btTransform_getOrigin_0"] = asm["_emscripten_bind_btTransform_getOrigin_0"];
var _emscripten_bind_btHingeConstraint___destroy___0 = Module["_emscripten_bind_btHingeConstraint___destroy___0"] = asm["_emscripten_bind_btHingeConstraint___destroy___0"];
var _emscripten_bind_btHingeConstraint_enableFeedback_1 = Module["_emscripten_bind_btHingeConstraint_enableFeedback_1"] = asm["_emscripten_bind_btHingeConstraint_enableFeedback_1"];
var _emscripten_bind_btConvexShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexShape_calculateLocalInertia_2"] = asm["_emscripten_bind_btConvexShape_calculateLocalInertia_2"];
var _memset = Module["_memset"] = asm["_memset"];
var _emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"] = asm["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"];
var _emscripten_bind_btTriangleMesh_btTriangleMesh_0 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"] = asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"];
var _emscripten_bind_btPairCachingGhostObject_getCollisionShape_0 = Module["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"] = asm["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"];
var _emscripten_bind_btTriangleMesh_btTriangleMesh_2 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"] = asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"];
var _emscripten_bind_btTransform___destroy___0 = Module["_emscripten_bind_btTransform___destroy___0"] = asm["_emscripten_bind_btTransform___destroy___0"];
var _emscripten_bind_btWheelInfo_set_m_frictionSlip_1 = Module["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"] = asm["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"];
var _emscripten_bind_btRigidBody_getCollisionShape_0 = Module["_emscripten_bind_btRigidBody_getCollisionShape_0"] = asm["_emscripten_bind_btRigidBody_getCollisionShape_0"];
var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1 = Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"] = asm["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"];
var _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"] = asm["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"];
var _emscripten_bind_btManifoldPoint_get_m_localPointB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"] = asm["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"];
var _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"];
var _emscripten_bind_btSliderConstraint_setLowerLinLimit_1 = Module["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"] = asm["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"];
var _emscripten_bind_btPoint2PointConstraint_set_m_setting_1 = Module["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"] = asm["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"];
var _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"] = asm["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"];
var _emscripten_bind_btRigidBody_setLinearVelocity_1 = Module["_emscripten_bind_btRigidBody_setLinearVelocity_1"] = asm["_emscripten_bind_btRigidBody_setLinearVelocity_1"];
var _emscripten_bind_btVehicleTuning_btVehicleTuning_0 = Module["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"] = asm["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"];
var _emscripten_bind_RayResultCallback_set_m_collisionObject_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"] = asm["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"];
var _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"] = asm["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"];
var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"] = asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"];
var _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"] = asm["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"];
var _emscripten_bind_btDynamicsWorld_addAction_1 = Module["_emscripten_bind_btDynamicsWorld_addAction_1"] = asm["_emscripten_bind_btDynamicsWorld_addAction_1"];
var _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0 = Module["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"] = asm["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"];
var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"] = asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"];
var _emscripten_bind_btKinematicCharacterController_setFallSpeed_1 = Module["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"] = asm["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"];
var _emscripten_bind_btRigidBody_setActivationState_1 = Module["_emscripten_bind_btRigidBody_setActivationState_1"] = asm["_emscripten_bind_btRigidBody_setActivationState_1"];
var _emscripten_bind_ClosestConvexResultCallback_hasHit_0 = Module["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"] = asm["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"];
var _emscripten_bind_btCapsuleShapeZ___destroy___0 = Module["_emscripten_bind_btCapsuleShapeZ___destroy___0"] = asm["_emscripten_bind_btCapsuleShapeZ___destroy___0"];
var _emscripten_bind_LocalShapeInfo_set_m_shapePart_1 = Module["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"] = asm["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"];
var _emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"] = asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"];
var _emscripten_bind_btTriangleMesh_addTriangle_3 = Module["_emscripten_bind_btTriangleMesh_addTriangle_3"] = asm["_emscripten_bind_btTriangleMesh_addTriangle_3"];
var _emscripten_bind_btGhostObject_getOverlappingObject_1 = Module["_emscripten_bind_btGhostObject_getOverlappingObject_1"] = asm["_emscripten_bind_btGhostObject_getOverlappingObject_1"];
var _emscripten_bind_btTriangleMesh_addTriangle_4 = Module["_emscripten_bind_btTriangleMesh_addTriangle_4"] = asm["_emscripten_bind_btTriangleMesh_addTriangle_4"];
var _emscripten_bind_btRigidBody_applyTorqueImpulse_1 = Module["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"] = asm["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"];
var _emscripten_bind_btRigidBody_setCollisionFlags_1 = Module["_emscripten_bind_btRigidBody_setCollisionFlags_1"] = asm["_emscripten_bind_btRigidBody_setCollisionFlags_1"];
var _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"] = asm["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"];
var _emscripten_bind_btConeShape___destroy___0 = Module["_emscripten_bind_btConeShape___destroy___0"] = asm["_emscripten_bind_btConeShape___destroy___0"];
var _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2 = Module["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"] = asm["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"];
var _emscripten_bind_btSliderConstraint_btSliderConstraint_5 = Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"] = asm["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"];
var _emscripten_bind_btSliderConstraint_btSliderConstraint_3 = Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"] = asm["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"];
var _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"];
var _emscripten_bind_btDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"] = asm["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"];
var _emscripten_bind_btRigidBody_forceActivationState_1 = Module["_emscripten_bind_btRigidBody_forceActivationState_1"] = asm["_emscripten_bind_btRigidBody_forceActivationState_1"];
var _emscripten_bind_btPoint2PointConstraint_setPivotB_1 = Module["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"] = asm["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"];
var _emscripten_bind_btGhostPairCallback___destroy___0 = Module["_emscripten_bind_btGhostPairCallback___destroy___0"] = asm["_emscripten_bind_btGhostPairCallback___destroy___0"];
var _emscripten_bind_btKinematicCharacterController_getMaxSlope_0 = Module["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"] = asm["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"];
var _emscripten_bind_btSliderConstraint_enableFeedback_1 = Module["_emscripten_bind_btSliderConstraint_enableFeedback_1"] = asm["_emscripten_bind_btSliderConstraint_enableFeedback_1"];
var _emscripten_bind_btRaycastVehicle_addWheel_7 = Module["_emscripten_bind_btRaycastVehicle_addWheel_7"] = asm["_emscripten_bind_btRaycastVehicle_addWheel_7"];
var _emscripten_bind_btPairCachingGhostObject_isActive_0 = Module["_emscripten_bind_btPairCachingGhostObject_isActive_0"] = asm["_emscripten_bind_btPairCachingGhostObject_isActive_0"];
var _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1 = Module["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"] = asm["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"];
var _emscripten_bind_btStaticPlaneShape___destroy___0 = Module["_emscripten_bind_btStaticPlaneShape___destroy___0"] = asm["_emscripten_bind_btStaticPlaneShape___destroy___0"];
var _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"];
var _emscripten_bind_btBoxShape_setLocalScaling_1 = Module["_emscripten_bind_btBoxShape_setLocalScaling_1"] = asm["_emscripten_bind_btBoxShape_setLocalScaling_1"];
var _emscripten_bind_btConeShapeZ___destroy___0 = Module["_emscripten_bind_btConeShapeZ___destroy___0"] = asm["_emscripten_bind_btConeShapeZ___destroy___0"];
var _emscripten_bind_btDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btDynamicsWorld_getPairCache_0"] = asm["_emscripten_bind_btDynamicsWorld_getPairCache_0"];
var _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"];
var _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2 = Module["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"] = asm["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"];
var _emscripten_bind_btVector4_btVector4_0 = Module["_emscripten_bind_btVector4_btVector4_0"] = asm["_emscripten_bind_btVector4_btVector4_0"];
var _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"] = asm["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"];
var _emscripten_bind_btVector4_btVector4_4 = Module["_emscripten_bind_btVector4_btVector4_4"] = asm["_emscripten_bind_btVector4_btVector4_4"];
var _emscripten_bind_btKinematicCharacterController___destroy___0 = Module["_emscripten_bind_btKinematicCharacterController___destroy___0"] = asm["_emscripten_bind_btKinematicCharacterController___destroy___0"];
var _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"] = asm["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"];
var _emscripten_bind_btConstraintSetting_btConstraintSetting_0 = Module["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"] = asm["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"];
var _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"] = asm["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"];
var _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0 = Module["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"] = asm["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"];
var _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1 = Module["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"] = asm["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"];
var _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"] = asm["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"];
var _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0 = Module["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"] = asm["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiidii = Module["dynCall_viiidii"] = asm["dynCall_viiidii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viidi = Module["dynCall_viidi"] = asm["dynCall_viidi"];
var dynCall_viddiii = Module["dynCall_viddiii"] = asm["dynCall_viddiii"];
var dynCall_vidii = Module["dynCall_vidii"] = asm["dynCall_vidii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vidi = Module["dynCall_vidi"] = asm["dynCall_vidi"];
var dynCall_diiiiiiii = Module["dynCall_diiiiiiii"] = asm["dynCall_diiiiiiii"];
var dynCall_viiiiddddiid = Module["dynCall_viiiiddddiid"] = asm["dynCall_viiiiddddiid"];
var dynCall_diiiii = Module["dynCall_diiiii"] = asm["dynCall_diiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_diiidii = Module["dynCall_diiidii"] = asm["dynCall_diiidii"];
var dynCall_viidii = Module["dynCall_viidii"] = asm["dynCall_viidii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_diiiiiiiiii = Module["dynCall_diiiiiiiiii"] = asm["dynCall_diiiiiiiiii"];
var dynCall_viiiid = Module["dynCall_viiiid"] = asm["dynCall_viiiid"];
var dynCall_diiiiiiiii = Module["dynCall_diiiiiiiii"] = asm["dynCall_diiiiiiiii"];
var dynCall_did = Module["dynCall_did"] = asm["dynCall_did"];
var dynCall_viiiidddddidi = Module["dynCall_viiiidddddidi"] = asm["dynCall_viiiidddddidi"];
var dynCall_diidii = Module["dynCall_diidii"] = asm["dynCall_diidii"];
var dynCall_diiii = Module["dynCall_diiii"] = asm["dynCall_diiii"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iidid = Module["dynCall_iidid"] = asm["dynCall_iidid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
var i64Math = (function() {
 var goog = {
  math: {}
 };
 goog.math.Long = (function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
 });
 goog.math.Long.IntCache_ = {};
 goog.math.Long.fromInt = (function(value) {
  if (-128 <= value && value < 128) {
   var cachedObj = goog.math.Long.IntCache_[value];
   if (cachedObj) {
    return cachedObj;
   }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
   goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
 });
 goog.math.Long.fromNumber = (function(value) {
  if (isNaN(value) || !isFinite(value)) {
   return goog.math.Long.ZERO;
  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
   return goog.math.Long.MIN_VALUE;
  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
   return goog.math.Long.MAX_VALUE;
  } else if (value < 0) {
   return goog.math.Long.fromNumber(-value).negate();
  } else {
   return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
  }
 });
 goog.math.Long.fromBits = (function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
 });
 goog.math.Long.fromString = (function(str, opt_radix) {
  if (str.length == 0) {
   throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
   throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
   return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else if (str.indexOf("-") >= 0) {
   throw Error('number format error: interior "-" character: ' + str);
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0; i < str.length; i += 8) {
   var size = Math.min(8, str.length - i);
   var value = parseInt(str.substring(i, i + size), radix);
   if (size < 8) {
    var power = goog.math.Long.fromNumber(Math.pow(radix, size));
    result = result.multiply(power).add(goog.math.Long.fromNumber(value));
   } else {
    result = result.multiply(radixToPower);
    result = result.add(goog.math.Long.fromNumber(value));
   }
  }
  return result;
 });
 goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
 goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
 goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
 goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
 goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
 goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
 goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
 goog.math.Long.ZERO = goog.math.Long.fromInt(0);
 goog.math.Long.ONE = goog.math.Long.fromInt(1);
 goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
 goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
 goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
 goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
 goog.math.Long.prototype.toInt = (function() {
  return this.low_;
 });
 goog.math.Long.prototype.toNumber = (function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
 });
 goog.math.Long.prototype.toString = (function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
   throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
   return "0";
  }
  if (this.isNegative()) {
   if (this.equals(goog.math.Long.MIN_VALUE)) {
    var radixLong = goog.math.Long.fromNumber(radix);
    var div = this.div(radixLong);
    var rem = div.multiply(radixLong).subtract(this);
    return div.toString(radix) + rem.toInt().toString(radix);
   } else {
    return "-" + this.negate().toString(radix);
   }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
   var remDiv = rem.div(radixToPower);
   var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
   var digits = intval.toString(radix);
   rem = remDiv;
   if (rem.isZero()) {
    return digits + result;
   } else {
    while (digits.length < 6) {
     digits = "0" + digits;
    }
    result = "" + digits + result;
   }
  }
 });
 goog.math.Long.prototype.getHighBits = (function() {
  return this.high_;
 });
 goog.math.Long.prototype.getLowBits = (function() {
  return this.low_;
 });
 goog.math.Long.prototype.getLowBitsUnsigned = (function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
 });
 goog.math.Long.prototype.getNumBitsAbs = (function() {
  if (this.isNegative()) {
   if (this.equals(goog.math.Long.MIN_VALUE)) {
    return 64;
   } else {
    return this.negate().getNumBitsAbs();
   }
  } else {
   var val = this.high_ != 0 ? this.high_ : this.low_;
   for (var bit = 31; bit > 0; bit--) {
    if ((val & 1 << bit) != 0) {
     break;
    }
   }
   return this.high_ != 0 ? bit + 33 : bit + 1;
  }
 });
 goog.math.Long.prototype.isZero = (function() {
  return this.high_ == 0 && this.low_ == 0;
 });
 goog.math.Long.prototype.isNegative = (function() {
  return this.high_ < 0;
 });
 goog.math.Long.prototype.isOdd = (function() {
  return (this.low_ & 1) == 1;
 });
 goog.math.Long.prototype.equals = (function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
 });
 goog.math.Long.prototype.notEquals = (function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
 });
 goog.math.Long.prototype.lessThan = (function(other) {
  return this.compare(other) < 0;
 });
 goog.math.Long.prototype.lessThanOrEqual = (function(other) {
  return this.compare(other) <= 0;
 });
 goog.math.Long.prototype.greaterThan = (function(other) {
  return this.compare(other) > 0;
 });
 goog.math.Long.prototype.greaterThanOrEqual = (function(other) {
  return this.compare(other) >= 0;
 });
 goog.math.Long.prototype.compare = (function(other) {
  if (this.equals(other)) {
   return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
   return -1;
  }
  if (!thisNeg && otherNeg) {
   return 1;
  }
  if (this.subtract(other).isNegative()) {
   return -1;
  } else {
   return 1;
  }
 });
 goog.math.Long.prototype.negate = (function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
   return goog.math.Long.MIN_VALUE;
  } else {
   return this.not().add(goog.math.Long.ONE);
  }
 });
 goog.math.Long.prototype.add = (function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
 });
 goog.math.Long.prototype.subtract = (function(other) {
  return this.add(other.negate());
 });
 goog.math.Long.prototype.multiply = (function(other) {
  if (this.isZero()) {
   return goog.math.Long.ZERO;
  } else if (other.isZero()) {
   return goog.math.Long.ZERO;
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
   return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
   return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  }
  if (this.isNegative()) {
   if (other.isNegative()) {
    return this.negate().multiply(other.negate());
   } else {
    return this.negate().multiply(other).negate();
   }
  } else if (other.isNegative()) {
   return this.multiply(other.negate()).negate();
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
   return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
 });
 goog.math.Long.prototype.div = (function(other) {
  if (other.isZero()) {
   throw Error("division by zero");
  } else if (this.isZero()) {
   return goog.math.Long.ZERO;
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
   if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
    return goog.math.Long.MIN_VALUE;
   } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.ONE;
   } else {
    var halfThis = this.shiftRight(1);
    var approx = halfThis.div(other).shiftLeft(1);
    if (approx.equals(goog.math.Long.ZERO)) {
     return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
    } else {
     var rem = this.subtract(other.multiply(approx));
     var result = approx.add(rem.div(other));
     return result;
    }
   }
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
   return goog.math.Long.ZERO;
  }
  if (this.isNegative()) {
   if (other.isNegative()) {
    return this.negate().div(other.negate());
   } else {
    return this.negate().div(other).negate();
   }
  } else if (other.isNegative()) {
   return this.div(other.negate()).negate();
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
   var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
   var log2 = Math.ceil(Math.log(approx) / Math.LN2);
   var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
   var approxRes = goog.math.Long.fromNumber(approx);
   var approxRem = approxRes.multiply(other);
   while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
    approx -= delta;
    approxRes = goog.math.Long.fromNumber(approx);
    approxRem = approxRes.multiply(other);
   }
   if (approxRes.isZero()) {
    approxRes = goog.math.Long.ONE;
   }
   res = res.add(approxRes);
   rem = rem.subtract(approxRem);
  }
  return res;
 });
 goog.math.Long.prototype.modulo = (function(other) {
  return this.subtract(this.div(other).multiply(other));
 });
 goog.math.Long.prototype.not = (function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
 });
 goog.math.Long.prototype.and = (function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
 });
 goog.math.Long.prototype.or = (function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
 });
 goog.math.Long.prototype.xor = (function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
 });
 goog.math.Long.prototype.shiftLeft = (function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
   return this;
  } else {
   var low = this.low_;
   if (numBits < 32) {
    var high = this.high_;
    return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
   } else {
    return goog.math.Long.fromBits(0, low << numBits - 32);
   }
  }
 });
 goog.math.Long.prototype.shiftRight = (function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
   return this;
  } else {
   var high = this.high_;
   if (numBits < 32) {
    var low = this.low_;
    return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
   } else {
    return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
   }
  }
 });
 goog.math.Long.prototype.shiftRightUnsigned = (function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
   return this;
  } else {
   var high = this.high_;
   if (numBits < 32) {
    var low = this.low_;
    return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
   } else if (numBits == 32) {
    return goog.math.Long.fromBits(high, 0);
   } else {
    return goog.math.Long.fromBits(high >>> numBits - 32, 0);
   }
  }
 });
 var navigator = {
  appName: "Modern Browser"
 };
 var dbits;
 var canary = 0xdeadbeefcafe;
 var j_lm = (canary & 16777215) == 15715070;
 function BigInteger(a, b, c) {
  if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c); else if (b == null && "string" != typeof a) this.fromString(a, 256); else this.fromString(a, b);
 }
 function nbi() {
  return new BigInteger(null);
 }
 function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
   var v = x * this[i++] + w[j] + c;
   c = Math.floor(v / 67108864);
   w[j++] = v & 67108863;
  }
  return c;
 }
 function am2(i, x, w, j, c, n) {
  var xl = x & 32767, xh = x >> 15;
  while (--n >= 0) {
   var l = this[i] & 32767;
   var h = this[i++] >> 15;
   var m = xh * l + h * xl;
   l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
   c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
   w[j++] = l & 1073741823;
  }
  return c;
 }
 function am3(i, x, w, j, c, n) {
  var xl = x & 16383, xh = x >> 14;
  while (--n >= 0) {
   var l = this[i] & 16383;
   var h = this[i++] >> 14;
   var m = xh * l + h * xl;
   l = xl * l + ((m & 16383) << 14) + w[j] + c;
   c = (l >> 28) + (m >> 14) + xh * h;
   w[j++] = l & 268435455;
  }
  return c;
 }
 if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
 } else if (j_lm && navigator.appName != "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
 } else {
  BigInteger.prototype.am = am3;
  dbits = 28;
 }
 BigInteger.prototype.DB = dbits;
 BigInteger.prototype.DM = (1 << dbits) - 1;
 BigInteger.prototype.DV = 1 << dbits;
 var BI_FP = 52;
 BigInteger.prototype.FV = Math.pow(2, BI_FP);
 BigInteger.prototype.F1 = BI_FP - dbits;
 BigInteger.prototype.F2 = 2 * dbits - BI_FP;
 var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
 var BI_RC = new Array;
 var rr, vv;
 rr = "0".charCodeAt(0);
 for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
 rr = "a".charCodeAt(0);
 for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
 rr = "A".charCodeAt(0);
 for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
 function int2char(n) {
  return BI_RM.charAt(n);
 }
 function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)];
  return c == null ? -1 : c;
 }
 function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
 }
 function bnpFromInt(x) {
  this.t = 1;
  this.s = x < 0 ? -1 : 0;
  if (x > 0) this[0] = x; else if (x < -1) this[0] = x + DV; else this.t = 0;
 }
 function nbv(i) {
  var r = nbi();
  r.fromInt(i);
  return r;
 }
 function bnpFromString(s, b) {
  var k;
  if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 256) k = 8; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else {
   this.fromRadix(s, b);
   return;
  }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while (--i >= 0) {
   var x = k == 8 ? s[i] & 255 : intAt(s, i);
   if (x < 0) {
    if (s.charAt(i) == "-") mi = true;
    continue;
   }
   mi = false;
   if (sh == 0) this[this.t++] = x; else if (sh + k > this.DB) {
    this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
    this[this.t++] = x >> this.DB - sh;
   } else this[this.t - 1] |= x << sh;
   sh += k;
   if (sh >= this.DB) sh -= this.DB;
  }
  if (k == 8 && (s[0] & 128) != 0) {
   this.s = -1;
   if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
  }
  this.clamp();
  if (mi) BigInteger.ZERO.subTo(this, this);
 }
 function bnpClamp() {
  var c = this.s & this.DM;
  while (this.t > 0 && this[this.t - 1] == c) --this.t;
 }
 function bnToString(b) {
  if (this.s < 0) return "-" + this.negate().toString(b);
  var k;
  if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else return this.toRadix(b);
  var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
  var p = this.DB - i * this.DB % k;
  if (i-- > 0) {
   if (p < this.DB && (d = this[i] >> p) > 0) {
    m = true;
    r = int2char(d);
   }
   while (i >= 0) {
    if (p < k) {
     d = (this[i] & (1 << p) - 1) << k - p;
     d |= this[--i] >> (p += this.DB - k);
    } else {
     d = this[i] >> (p -= k) & km;
     if (p <= 0) {
      p += this.DB;
      --i;
     }
    }
    if (d > 0) m = true;
    if (m) r += int2char(d);
   }
  }
  return m ? r : "0";
 }
 function bnNegate() {
  var r = nbi();
  BigInteger.ZERO.subTo(this, r);
  return r;
 }
 function bnAbs() {
  return this.s < 0 ? this.negate() : this;
 }
 function bnCompareTo(a) {
  var r = this.s - a.s;
  if (r != 0) return r;
  var i = this.t;
  r = i - a.t;
  if (r != 0) return this.s < 0 ? -r : r;
  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
  return 0;
 }
 function nbits(x) {
  var r = 1, t;
  if ((t = x >>> 16) != 0) {
   x = t;
   r += 16;
  }
  if ((t = x >> 8) != 0) {
   x = t;
   r += 8;
  }
  if ((t = x >> 4) != 0) {
   x = t;
   r += 4;
  }
  if ((t = x >> 2) != 0) {
   x = t;
   r += 2;
  }
  if ((t = x >> 1) != 0) {
   x = t;
   r += 1;
  }
  return r;
 }
 function bnBitLength() {
  if (this.t <= 0) return 0;
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
 }
 function bnpDLShiftTo(n, r) {
  var i;
  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
  for (i = n - 1; i >= 0; --i) r[i] = 0;
  r.t = this.t + n;
  r.s = this.s;
 }
 function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i) r[i - n] = this[i];
  r.t = Math.max(this.t - n, 0);
  r.s = this.s;
 }
 function bnpLShiftTo(n, r) {
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << cbs) - 1;
  var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
  for (i = this.t - 1; i >= 0; --i) {
   r[i + ds + 1] = this[i] >> cbs | c;
   c = (this[i] & bm) << bs;
  }
  for (i = ds - 1; i >= 0; --i) r[i] = 0;
  r[ds] = c;
  r.t = this.t + ds + 1;
  r.s = this.s;
  r.clamp();
 }
 function bnpRShiftTo(n, r) {
  r.s = this.s;
  var ds = Math.floor(n / this.DB);
  if (ds >= this.t) {
   r.t = 0;
   return;
  }
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << bs) - 1;
  r[0] = this[ds] >> bs;
  for (var i = ds + 1; i < this.t; ++i) {
   r[i - ds - 1] |= (this[i] & bm) << cbs;
   r[i - ds] = this[i] >> bs;
  }
  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
  r.t = this.t - ds;
  r.clamp();
 }
 function bnpSubTo(a, r) {
  var i = 0, c = 0, m = Math.min(a.t, this.t);
  while (i < m) {
   c += this[i] - a[i];
   r[i++] = c & this.DM;
   c >>= this.DB;
  }
  if (a.t < this.t) {
   c -= a.s;
   while (i < this.t) {
    c += this[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c += this.s;
  } else {
   c += this.s;
   while (i < a.t) {
    c -= a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c -= a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c < -1) r[i++] = this.DV + c; else if (c > 0) r[i++] = c;
  r.t = i;
  r.clamp();
 }
 function bnpMultiplyTo(a, r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i + y.t;
  while (--i >= 0) r[i] = 0;
  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
  r.s = 0;
  r.clamp();
  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
 }
 function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2 * x.t;
  while (--i >= 0) r[i] = 0;
  for (i = 0; i < x.t - 1; ++i) {
   var c = x.am(i, x[i], r, 2 * i, 0, 1);
   if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
    r[i + x.t] -= x.DV;
    r[i + x.t + 1] = 1;
   }
  }
  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
  r.s = 0;
  r.clamp();
 }
 function bnpDivRemTo(m, q, r) {
  var pm = m.abs();
  if (pm.t <= 0) return;
  var pt = this.abs();
  if (pt.t < pm.t) {
   if (q != null) q.fromInt(0);
   if (r != null) this.copyTo(r);
   return;
  }
  if (r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB - nbits(pm[pm.t - 1]);
  if (nsh > 0) {
   pm.lShiftTo(nsh, y);
   pt.lShiftTo(nsh, r);
  } else {
   pm.copyTo(y);
   pt.copyTo(r);
  }
  var ys = y.t;
  var y0 = y[ys - 1];
  if (y0 == 0) return;
  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
  var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
  var i = r.t, j = i - ys, t = q == null ? nbi() : q;
  y.dlShiftTo(j, t);
  if (r.compareTo(t) >= 0) {
   r[r.t++] = 1;
   r.subTo(t, r);
  }
  BigInteger.ONE.dlShiftTo(ys, t);
  t.subTo(y, y);
  while (y.t < ys) y[y.t++] = 0;
  while (--j >= 0) {
   var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
   if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
    y.dlShiftTo(j, t);
    r.subTo(t, r);
    while (r[i] < --qd) r.subTo(t, r);
   }
  }
  if (q != null) {
   r.drShiftTo(ys, q);
   if (ts != ms) BigInteger.ZERO.subTo(q, q);
  }
  r.t = ys;
  r.clamp();
  if (nsh > 0) r.rShiftTo(nsh, r);
  if (ts < 0) BigInteger.ZERO.subTo(r, r);
 }
 function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a, null, r);
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
  return r;
 }
 function Classic(m) {
  this.m = m;
 }
 function cConvert(x) {
  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m); else return x;
 }
 function cRevert(x) {
  return x;
 }
 function cReduce(x) {
  x.divRemTo(this.m, null, x);
 }
 function cMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
 }
 function cSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
 }
 Classic.prototype.convert = cConvert;
 Classic.prototype.revert = cRevert;
 Classic.prototype.reduce = cReduce;
 Classic.prototype.mulTo = cMulTo;
 Classic.prototype.sqrTo = cSqrTo;
 function bnpInvDigit() {
  if (this.t < 1) return 0;
  var x = this[0];
  if ((x & 1) == 0) return 0;
  var y = x & 3;
  y = y * (2 - (x & 15) * y) & 15;
  y = y * (2 - (x & 255) * y) & 255;
  y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
  y = y * (2 - x * y % this.DV) % this.DV;
  return y > 0 ? this.DV - y : -y;
 }
 function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << m.DB - 15) - 1;
  this.mt2 = 2 * m.t;
 }
 function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t, r);
  r.divRemTo(this.m, null, r);
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
  return r;
 }
 function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
 }
 function montReduce(x) {
  while (x.t <= this.mt2) x[x.t++] = 0;
  for (var i = 0; i < this.m.t; ++i) {
   var j = x[i] & 32767;
   var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
   j = i + this.m.t;
   x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
   while (x[j] >= x.DV) {
    x[j] -= x.DV;
    x[++j]++;
   }
  }
  x.clamp();
  x.drShiftTo(this.m.t, x);
  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
 }
 function montSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
 }
 function montMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
 }
 Montgomery.prototype.convert = montConvert;
 Montgomery.prototype.revert = montRevert;
 Montgomery.prototype.reduce = montReduce;
 Montgomery.prototype.mulTo = montMulTo;
 Montgomery.prototype.sqrTo = montSqrTo;
 function bnpIsEven() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
 }
 function bnpExp(e, z) {
  if (e > 4294967295 || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
  g.copyTo(r);
  while (--i >= 0) {
   z.sqrTo(r, r2);
   if ((e & 1 << i) > 0) z.mulTo(r2, g, r); else {
    var t = r;
    r = r2;
    r2 = t;
   }
  }
  return z.revert(r);
 }
 function bnModPowInt(e, m) {
  var z;
  if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e, z);
 }
 BigInteger.prototype.copyTo = bnpCopyTo;
 BigInteger.prototype.fromInt = bnpFromInt;
 BigInteger.prototype.fromString = bnpFromString;
 BigInteger.prototype.clamp = bnpClamp;
 BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
 BigInteger.prototype.drShiftTo = bnpDRShiftTo;
 BigInteger.prototype.lShiftTo = bnpLShiftTo;
 BigInteger.prototype.rShiftTo = bnpRShiftTo;
 BigInteger.prototype.subTo = bnpSubTo;
 BigInteger.prototype.multiplyTo = bnpMultiplyTo;
 BigInteger.prototype.squareTo = bnpSquareTo;
 BigInteger.prototype.divRemTo = bnpDivRemTo;
 BigInteger.prototype.invDigit = bnpInvDigit;
 BigInteger.prototype.isEven = bnpIsEven;
 BigInteger.prototype.exp = bnpExp;
 BigInteger.prototype.toString = bnToString;
 BigInteger.prototype.negate = bnNegate;
 BigInteger.prototype.abs = bnAbs;
 BigInteger.prototype.compareTo = bnCompareTo;
 BigInteger.prototype.bitLength = bnBitLength;
 BigInteger.prototype.mod = bnMod;
 BigInteger.prototype.modPowInt = bnModPowInt;
 BigInteger.ZERO = nbv(0);
 BigInteger.ONE = nbv(1);
 function bnpFromRadix(s, b) {
  this.fromInt(0);
  if (b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
  for (var i = 0; i < s.length; ++i) {
   var x = intAt(s, i);
   if (x < 0) {
    if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
    continue;
   }
   w = b * w + x;
   if (++j >= cs) {
    this.dMultiply(d);
    this.dAddOffset(w, 0);
    j = 0;
    w = 0;
   }
  }
  if (j > 0) {
   this.dMultiply(Math.pow(b, j));
   this.dAddOffset(w, 0);
  }
  if (mi) BigInteger.ZERO.subTo(this, this);
 }
 function bnpChunkSize(r) {
  return Math.floor(Math.LN2 * this.DB / Math.log(r));
 }
 function bnSigNum() {
  if (this.s < 0) return -1; else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0; else return 1;
 }
 function bnpDMultiply(n) {
  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
  ++this.t;
  this.clamp();
 }
 function bnpDAddOffset(n, w) {
  if (n == 0) return;
  while (this.t <= w) this[this.t++] = 0;
  this[w] += n;
  while (this[w] >= this.DV) {
   this[w] -= this.DV;
   if (++w >= this.t) this[this.t++] = 0;
   ++this[w];
  }
 }
 function bnpToRadix(b) {
  if (b == null) b = 10;
  if (this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b, cs);
  var d = nbv(a), y = nbi(), z = nbi(), r = "";
  this.divRemTo(d, y, z);
  while (y.signum() > 0) {
   r = (a + z.intValue()).toString(b).substr(1) + r;
   y.divRemTo(d, y, z);
  }
  return z.intValue().toString(b) + r;
 }
 function bnIntValue() {
  if (this.s < 0) {
   if (this.t == 1) return this[0] - this.DV; else if (this.t == 0) return -1;
  } else if (this.t == 1) return this[0]; else if (this.t == 0) return 0;
  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
 }
 function bnpAddTo(a, r) {
  var i = 0, c = 0, m = Math.min(a.t, this.t);
  while (i < m) {
   c += this[i] + a[i];
   r[i++] = c & this.DM;
   c >>= this.DB;
  }
  if (a.t < this.t) {
   c += a.s;
   while (i < this.t) {
    c += this[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c += this.s;
  } else {
   c += this.s;
   while (i < a.t) {
    c += a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c += a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c > 0) r[i++] = c; else if (c < -1) r[i++] = this.DV + c;
  r.t = i;
  r.clamp();
 }
 BigInteger.prototype.fromRadix = bnpFromRadix;
 BigInteger.prototype.chunkSize = bnpChunkSize;
 BigInteger.prototype.signum = bnSigNum;
 BigInteger.prototype.dMultiply = bnpDMultiply;
 BigInteger.prototype.dAddOffset = bnpDAddOffset;
 BigInteger.prototype.toRadix = bnpToRadix;
 BigInteger.prototype.intValue = bnIntValue;
 BigInteger.prototype.addTo = bnpAddTo;
 var Wrapper = {
  abs: (function(l, h) {
   var x = new goog.math.Long(l, h);
   var ret;
   if (x.isNegative()) {
    ret = x.negate();
   } else {
    ret = x;
   }
   HEAP32[tempDoublePtr >> 2] = ret.low_;
   HEAP32[tempDoublePtr + 4 >> 2] = ret.high_;
  }),
  ensureTemps: (function() {
   if (Wrapper.ensuredTemps) return;
   Wrapper.ensuredTemps = true;
   Wrapper.two32 = new BigInteger;
   Wrapper.two32.fromString("4294967296", 10);
   Wrapper.two64 = new BigInteger;
   Wrapper.two64.fromString("18446744073709551616", 10);
   Wrapper.temp1 = new BigInteger;
   Wrapper.temp2 = new BigInteger;
  }),
  lh2bignum: (function(l, h) {
   var a = new BigInteger;
   a.fromString(h.toString(), 10);
   var b = new BigInteger;
   a.multiplyTo(Wrapper.two32, b);
   var c = new BigInteger;
   c.fromString(l.toString(), 10);
   var d = new BigInteger;
   c.addTo(b, d);
   return d;
  }),
  stringify: (function(l, h, unsigned) {
   var ret = (new goog.math.Long(l, h)).toString();
   if (unsigned && ret[0] == "-") {
    Wrapper.ensureTemps();
    var bignum = new BigInteger;
    bignum.fromString(ret, 10);
    ret = new BigInteger;
    Wrapper.two64.addTo(bignum, ret);
    ret = ret.toString(10);
   }
   return ret;
  }),
  fromString: (function(str, base, min, max, unsigned) {
   Wrapper.ensureTemps();
   var bignum = new BigInteger;
   bignum.fromString(str, base);
   var bigmin = new BigInteger;
   bigmin.fromString(min, 10);
   var bigmax = new BigInteger;
   bigmax.fromString(max, 10);
   if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
    var temp = new BigInteger;
    bignum.addTo(Wrapper.two64, temp);
    bignum = temp;
   }
   var error = false;
   if (bignum.compareTo(bigmin) < 0) {
    bignum = bigmin;
    error = true;
   } else if (bignum.compareTo(bigmax) > 0) {
    bignum = bigmax;
    error = true;
   }
   var ret = goog.math.Long.fromString(bignum.toString());
   HEAP32[tempDoublePtr >> 2] = ret.low_;
   HEAP32[tempDoublePtr + 4 >> 2] = ret.high_;
   if (error) throw "range error";
  })
 };
 return Wrapper;
})();
if (memoryInitializer) {
 if (typeof Module["locateFile"] === "function") {
  memoryInitializer = Module["locateFile"](memoryInitializer);
 } else if (Module["memoryInitializerPrefixURL"]) {
  memoryInitializer = Module["memoryInitializerPrefixURL"] + memoryInitializer;
 }
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
  var data = Module["readBinary"](memoryInitializer);
  HEAPU8.set(data, STATIC_BASE);
 } else {
  addRunDependency("memory initializer");
  Browser.asyncLoad(memoryInitializer, (function(data) {
   HEAPU8.set(data, STATIC_BASE);
   removeRunDependency("memory initializer");
  }), (function(data) {
   throw "could not load memory initializer " + memoryInitializer;
  }));
 }
}
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"] && shouldRunNow) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
 assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
 assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
 args = args || [];
 ensureInitRuntime();
 var argc = args.length + 1;
 function pad() {
  for (var i = 0; i < 4 - 1; i++) {
   argv.push(0);
  }
 }
 var argv = [ allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL) ];
 pad();
 for (var i = 0; i < argc - 1; i = i + 1) {
  argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
  pad();
 }
 argv.push(0);
 argv = allocate(argv, "i32", ALLOC_NORMAL);
 initialStackTop = STACKTOP;
 try {
  var ret = Module["_main"](argc, argv, 0);
  exit(ret);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   Module["noExitRuntime"] = true;
   return;
  } else {
   if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
   throw e;
  }
 } finally {
  calledMain = true;
 }
};
function run(args) {
 args = args || Module["arguments"];
 if (preloadStartTime === null) preloadStartTime = Date.now();
 if (runDependencies > 0) {
  Module.printErr("run() called, but dependencies remain, so not running");
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
   Module.printErr("pre-main prep time: " + (Date.now() - preloadStartTime) + " ms");
  }
  if (Module["_main"] && shouldRunNow) {
   Module["callMain"](args);
  }
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = Module.run = run;
function exit(status) {
 if (Module["noExitRuntime"]) {
  return;
 }
 ABORT = true;
 EXITSTATUS = status;
 STACKTOP = initialStackTop;
 exitRuntime();
 if (ENVIRONMENT_IS_NODE) {
  process["stdout"]["once"]("drain", (function() {
   process["exit"](status);
  }));
  console.log(" ");
  setTimeout((function() {
   process["exit"](status);
  }), 500);
 } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
  quit(status);
 }
 throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
function abort(text) {
 if (text) {
  Module.print(text);
  Module.printErr(text);
 }
 ABORT = true;
 EXITSTATUS = 1;
 var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
 throw "abort() at " + stackTrace() + extra;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
 shouldRunNow = false;
}
Module["noExitRuntime"] = true;
run();
function WrapperObject() {}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module["WrapperObject"] = WrapperObject;
function getCache(__class__) {
 return (__class__ || WrapperObject).__cache__;
}
Module["getCache"] = getCache;
function wrapPointer(ptr, __class__) {
 var cache = getCache(__class__);
 var ret = cache[ptr];
 if (ret) return ret;
 ret = Object.create((__class__ || WrapperObject).prototype);
 ret.ptr = ptr;
 return cache[ptr] = ret;
}
Module["wrapPointer"] = wrapPointer;
function castObject(obj, __class__) {
 return wrapPointer(obj.ptr, __class__);
}
Module["castObject"] = castObject;
Module["NULL"] = wrapPointer(0);
function destroy(obj) {
 if (!obj["__destroy__"]) throw "Error: Cannot destroy object. (Did you create it yourself?)";
 obj["__destroy__"]();
 delete getCache(obj.__class__)[obj.ptr];
}
Module["destroy"] = destroy;
function compare(obj1, obj2) {
 return obj1.ptr === obj2.ptr;
}
Module["compare"] = compare;
function getPointer(obj) {
 return obj.ptr;
}
Module["getPointer"] = getPointer;
function getClass(obj) {
 return obj.__class__;
}
Module["getClass"] = getClass;
function ensureString(value) {
 if (typeof value == "string") return allocate(intArrayFromString(value), "i8", ALLOC_STACK);
 return value;
}
function btMatrix3x3() {
 throw "cannot construct a btMatrix3x3, no constructor in IDL";
}
btMatrix3x3.prototype = Object.create(WrapperObject.prototype);
btMatrix3x3.prototype.constructor = btMatrix3x3;
btMatrix3x3.prototype.__class__ = btMatrix3x3;
btMatrix3x3.__cache__ = {};
Module["btMatrix3x3"] = btMatrix3x3;
btMatrix3x3.prototype["setEulerZYX"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btMatrix3x3_setEulerZYX_3(self, arg0, arg1, arg2);
});
btMatrix3x3.prototype["getRotation"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btMatrix3x3_getRotation_1(self, arg0);
});
btMatrix3x3.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btMatrix3x3___destroy___0(self);
});
function ConcreteContactResultCallback() {
 this.ptr = _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0();
 getCache(ConcreteContactResultCallback)[this.ptr] = this;
}
ConcreteContactResultCallback.prototype = Object.create(ContactResultCallback.prototype);
ConcreteContactResultCallback.prototype.constructor = ConcreteContactResultCallback;
ConcreteContactResultCallback.prototype.__class__ = ConcreteContactResultCallback;
ConcreteContactResultCallback.__cache__ = {};
Module["ConcreteContactResultCallback"] = ConcreteContactResultCallback;
ConcreteContactResultCallback.prototype["addSingleResult"] = (function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg5 && typeof arg5 === "object") arg5 = arg5.ptr; else arg5 = ensureString(arg5);
 if (arg6 && typeof arg6 === "object") arg6 = arg6.ptr; else arg6 = ensureString(arg6);
 return _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7(self, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
});
ConcreteContactResultCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_ConcreteContactResultCallback___destroy___0(self);
});
function btBvhTriangleMeshShape(arg0, arg1, arg2) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg2 === undefined) {
  this.ptr = _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2(arg0, arg1);
  getCache(btBvhTriangleMeshShape)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3(arg0, arg1, arg2);
 getCache(btBvhTriangleMeshShape)[this.ptr] = this;
}
btBvhTriangleMeshShape.prototype = Object.create(btTriangleMeshShape.prototype);
btBvhTriangleMeshShape.prototype.constructor = btBvhTriangleMeshShape;
btBvhTriangleMeshShape.prototype.__class__ = btBvhTriangleMeshShape;
btBvhTriangleMeshShape.__cache__ = {};
Module["btBvhTriangleMeshShape"] = btBvhTriangleMeshShape;
btBvhTriangleMeshShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1(self, arg0);
});
btBvhTriangleMeshShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2(self, arg0, arg1);
});
btBvhTriangleMeshShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btBvhTriangleMeshShape___destroy___0(self);
});
function btDbvtBroadphase() {
 this.ptr = _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0();
 getCache(btDbvtBroadphase)[this.ptr] = this;
}
btDbvtBroadphase.prototype = Object.create(WrapperObject.prototype);
btDbvtBroadphase.prototype.constructor = btDbvtBroadphase;
btDbvtBroadphase.prototype.__class__ = btDbvtBroadphase;
btDbvtBroadphase.__cache__ = {};
Module["btDbvtBroadphase"] = btDbvtBroadphase;
btDbvtBroadphase.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDbvtBroadphase___destroy___0(self);
});
function VoidPtr() {
 throw "cannot construct a VoidPtr, no constructor in IDL";
}
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module["VoidPtr"] = VoidPtr;
VoidPtr.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_VoidPtr___destroy___0(self);
});
function btSequentialImpulseConstraintSolver() {
 this.ptr = _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0();
 getCache(btSequentialImpulseConstraintSolver)[this.ptr] = this;
}
btSequentialImpulseConstraintSolver.prototype = Object.create(WrapperObject.prototype);
btSequentialImpulseConstraintSolver.prototype.constructor = btSequentialImpulseConstraintSolver;
btSequentialImpulseConstraintSolver.prototype.__class__ = btSequentialImpulseConstraintSolver;
btSequentialImpulseConstraintSolver.__cache__ = {};
Module["btSequentialImpulseConstraintSolver"] = btSequentialImpulseConstraintSolver;
btSequentialImpulseConstraintSolver.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0(self);
});
function btDispatcherInfo() {
 throw "cannot construct a btDispatcherInfo, no constructor in IDL";
}
btDispatcherInfo.prototype = Object.create(WrapperObject.prototype);
btDispatcherInfo.prototype.constructor = btDispatcherInfo;
btDispatcherInfo.prototype.__class__ = btDispatcherInfo;
btDispatcherInfo.__cache__ = {};
Module["btDispatcherInfo"] = btDispatcherInfo;
btDispatcherInfo.prototype["get_m_timeStep"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_timeStep_0(self);
});
btDispatcherInfo.prototype["set_m_timeStep"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_timeStep_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_stepCount"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_stepCount_0(self);
});
btDispatcherInfo.prototype["set_m_stepCount"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_stepCount_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_dispatchFunc"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0(self);
});
btDispatcherInfo.prototype["set_m_dispatchFunc"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_timeOfImpact"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0(self);
});
btDispatcherInfo.prototype["set_m_timeOfImpact"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_useContinuous"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0(self);
});
btDispatcherInfo.prototype["set_m_useContinuous"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_enableSatConvex"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0(self);
});
btDispatcherInfo.prototype["set_m_enableSatConvex"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_enableSPU"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0(self);
});
btDispatcherInfo.prototype["set_m_enableSPU"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_useEpa"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_useEpa_0(self);
});
btDispatcherInfo.prototype["set_m_useEpa"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_useEpa_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_allowedCcdPenetration"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0(self);
});
btDispatcherInfo.prototype["set_m_allowedCcdPenetration"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_useConvexConservativeDistanceUtil"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0(self);
});
btDispatcherInfo.prototype["set_m_useConvexConservativeDistanceUtil"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1(self, arg0);
});
btDispatcherInfo.prototype["get_m_convexConservativeDistanceThreshold"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0(self);
});
btDispatcherInfo.prototype["set_m_convexConservativeDistanceThreshold"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1(self, arg0);
});
btDispatcherInfo.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDispatcherInfo___destroy___0(self);
});
function btCapsuleShape(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_btCapsuleShape_btCapsuleShape_2(arg0, arg1);
 getCache(btCapsuleShape)[this.ptr] = this;
}
btCapsuleShape.prototype = Object.create(btCollisionShape.prototype);
btCapsuleShape.prototype.constructor = btCapsuleShape;
btCapsuleShape.prototype.__class__ = btCapsuleShape;
btCapsuleShape.__cache__ = {};
Module["btCapsuleShape"] = btCapsuleShape;
btCapsuleShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCapsuleShape_setLocalScaling_1(self, arg0);
});
btCapsuleShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCapsuleShape_calculateLocalInertia_2(self, arg0, arg1);
});
btCapsuleShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCapsuleShape___destroy___0(self);
});
function btCollisionConfiguration() {
 throw "cannot construct a btCollisionConfiguration, no constructor in IDL";
}
btCollisionConfiguration.prototype = Object.create(WrapperObject.prototype);
btCollisionConfiguration.prototype.constructor = btCollisionConfiguration;
btCollisionConfiguration.prototype.__class__ = btCollisionConfiguration;
btCollisionConfiguration.__cache__ = {};
Module["btCollisionConfiguration"] = btCollisionConfiguration;
btCollisionConfiguration.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCollisionConfiguration___destroy___0(self);
});
function btAxisSweep3(arg0, arg1, arg2, arg3, arg4) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg2 === undefined) {
  this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_2(arg0, arg1);
  getCache(btAxisSweep3)[this.ptr] = this;
  return;
 }
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_3(arg0, arg1, arg2);
  getCache(btAxisSweep3)[this.ptr] = this;
  return;
 }
 if (arg4 === undefined) {
  this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_4(arg0, arg1, arg2, arg3);
  getCache(btAxisSweep3)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_5(arg0, arg1, arg2, arg3, arg4);
 getCache(btAxisSweep3)[this.ptr] = this;
}
btAxisSweep3.prototype = Object.create(WrapperObject.prototype);
btAxisSweep3.prototype.constructor = btAxisSweep3;
btAxisSweep3.prototype.__class__ = btAxisSweep3;
btAxisSweep3.__cache__ = {};
Module["btAxisSweep3"] = btAxisSweep3;
btAxisSweep3.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btAxisSweep3___destroy___0(self);
});
function btPairCachingGhostObject() {
 this.ptr = _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0();
 getCache(btPairCachingGhostObject)[this.ptr] = this;
}
btPairCachingGhostObject.prototype = Object.create(btGhostObject.prototype);
btPairCachingGhostObject.prototype.constructor = btPairCachingGhostObject;
btPairCachingGhostObject.prototype.__class__ = btPairCachingGhostObject;
btPairCachingGhostObject.__cache__ = {};
Module["btPairCachingGhostObject"] = btPairCachingGhostObject;
btPairCachingGhostObject.prototype["getCollisionShape"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0(self), btCollisionShape);
});
btPairCachingGhostObject.prototype["setContactProcessingThreshold"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1(self, arg0);
});
btPairCachingGhostObject.prototype["setActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_setActivationState_1(self, arg0);
});
btPairCachingGhostObject.prototype["forceActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_forceActivationState_1(self, arg0);
});
btPairCachingGhostObject.prototype["activate"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg0 === undefined) {
  _emscripten_bind_btPairCachingGhostObject_activate_0(self);
  return;
 }
 _emscripten_bind_btPairCachingGhostObject_activate_1(self, arg0);
});
btPairCachingGhostObject.prototype["isActive"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btPairCachingGhostObject_isActive_0(self);
});
btPairCachingGhostObject.prototype["isKinematicObject"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0(self);
});
btPairCachingGhostObject.prototype["setRestitution"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_setRestitution_1(self, arg0);
});
btPairCachingGhostObject.prototype["setFriction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_setFriction_1(self, arg0);
});
btPairCachingGhostObject.prototype["getWorldTransform"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0(self), btTransform);
});
btPairCachingGhostObject.prototype["getCollisionFlags"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0(self);
});
btPairCachingGhostObject.prototype["setCollisionFlags"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1(self, arg0);
});
btPairCachingGhostObject.prototype["setWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1(self, arg0);
});
btPairCachingGhostObject.prototype["setCollisionShape"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1(self, arg0);
});
btPairCachingGhostObject.prototype["getNumOverlappingObjects"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0(self);
});
btPairCachingGhostObject.prototype["getOverlappingObject"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1(self, arg0), btCollisionObject);
});
btPairCachingGhostObject.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btPairCachingGhostObject___destroy___0(self);
});
function btRigidBodyConstructionInfo(arg0, arg1, arg2, arg3) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3(arg0, arg1, arg2);
  getCache(btRigidBodyConstructionInfo)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4(arg0, arg1, arg2, arg3);
 getCache(btRigidBodyConstructionInfo)[this.ptr] = this;
}
btRigidBodyConstructionInfo.prototype = Object.create(WrapperObject.prototype);
btRigidBodyConstructionInfo.prototype.constructor = btRigidBodyConstructionInfo;
btRigidBodyConstructionInfo.prototype.__class__ = btRigidBodyConstructionInfo;
btRigidBodyConstructionInfo.__cache__ = {};
Module["btRigidBodyConstructionInfo"] = btRigidBodyConstructionInfo;
btRigidBodyConstructionInfo.prototype["get_m_linearDamping"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_linearDamping"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_angularDamping"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_angularDamping"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_friction"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_friction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_rollingFriction"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_rollingFriction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_restitution"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_restitution"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_linearSleepingThreshold"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_linearSleepingThreshold"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_angularSleepingThreshold"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_angularSleepingThreshold"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_additionalDamping"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_additionalDamping"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_additionalDampingFactor"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_additionalDampingFactor"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_additionalLinearDampingThresholdSqr"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_additionalLinearDampingThresholdSqr"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingThresholdSqr"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingThresholdSqr"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingFactor"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0(self);
});
btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingFactor"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1(self, arg0);
});
btRigidBodyConstructionInfo.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btRigidBodyConstructionInfo___destroy___0(self);
});
function btManifoldPoint() {
 throw "cannot construct a btManifoldPoint, no constructor in IDL";
}
btManifoldPoint.prototype = Object.create(WrapperObject.prototype);
btManifoldPoint.prototype.constructor = btManifoldPoint;
btManifoldPoint.prototype.__class__ = btManifoldPoint;
btManifoldPoint.__cache__ = {};
Module["btManifoldPoint"] = btManifoldPoint;
btManifoldPoint.prototype["getPositionWorldOnA"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0(self), btVector3);
});
btManifoldPoint.prototype["getPositionWorldOnB"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0(self), btVector3);
});
btManifoldPoint.prototype["get_m_localPointA"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointA_0(self), btVector3);
});
btManifoldPoint.prototype["set_m_localPointA"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btManifoldPoint_set_m_localPointA_1(self, arg0);
});
btManifoldPoint.prototype["get_m_localPointB"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointB_0(self), btVector3);
});
btManifoldPoint.prototype["set_m_localPointB"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btManifoldPoint_set_m_localPointB_1(self, arg0);
});
btManifoldPoint.prototype["get_m_positionWorldOnB"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0(self), btVector3);
});
btManifoldPoint.prototype["set_m_positionWorldOnB"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1(self, arg0);
});
btManifoldPoint.prototype["get_m_positionWorldOnA"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0(self), btVector3);
});
btManifoldPoint.prototype["set_m_positionWorldOnA"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1(self, arg0);
});
btManifoldPoint.prototype["get_m_normalWorldOnB"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0(self), btVector3);
});
btManifoldPoint.prototype["set_m_normalWorldOnB"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1(self, arg0);
});
btManifoldPoint.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btManifoldPoint___destroy___0(self);
});
function btGeneric6DofConstraint(arg0, arg1, arg2, arg3, arg4) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3(arg0, arg1, arg2);
  getCache(btGeneric6DofConstraint)[this.ptr] = this;
  return;
 }
 if (arg4 === undefined) {
  this.ptr = _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_4(arg0, arg1, arg2, arg3);
  getCache(btGeneric6DofConstraint)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5(arg0, arg1, arg2, arg3, arg4);
 getCache(btGeneric6DofConstraint)[this.ptr] = this;
}
btGeneric6DofConstraint.prototype = Object.create(WrapperObject.prototype);
btGeneric6DofConstraint.prototype.constructor = btGeneric6DofConstraint;
btGeneric6DofConstraint.prototype.__class__ = btGeneric6DofConstraint;
btGeneric6DofConstraint.__cache__ = {};
Module["btGeneric6DofConstraint"] = btGeneric6DofConstraint;
btGeneric6DofConstraint.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btGeneric6DofConstraint___destroy___0(self);
});
function btStridingMeshInterface() {
 throw "cannot construct a btStridingMeshInterface, no constructor in IDL";
}
btStridingMeshInterface.prototype = Object.create(WrapperObject.prototype);
btStridingMeshInterface.prototype.constructor = btStridingMeshInterface;
btStridingMeshInterface.prototype.__class__ = btStridingMeshInterface;
btStridingMeshInterface.__cache__ = {};
Module["btStridingMeshInterface"] = btStridingMeshInterface;
btStridingMeshInterface.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btStridingMeshInterface___destroy___0(self);
});
function btBroadphaseInterface() {
 throw "cannot construct a btBroadphaseInterface, no constructor in IDL";
}
btBroadphaseInterface.prototype = Object.create(WrapperObject.prototype);
btBroadphaseInterface.prototype.constructor = btBroadphaseInterface;
btBroadphaseInterface.prototype.__class__ = btBroadphaseInterface;
btBroadphaseInterface.__cache__ = {};
Module["btBroadphaseInterface"] = btBroadphaseInterface;
btBroadphaseInterface.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btBroadphaseInterface___destroy___0(self);
});
function btCollisionObject() {
 throw "cannot construct a btCollisionObject, no constructor in IDL";
}
btCollisionObject.prototype = Object.create(WrapperObject.prototype);
btCollisionObject.prototype.constructor = btCollisionObject;
btCollisionObject.prototype.__class__ = btCollisionObject;
btCollisionObject.__cache__ = {};
Module["btCollisionObject"] = btCollisionObject;
btCollisionObject.prototype["getCollisionShape"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btCollisionObject_getCollisionShape_0(self), btCollisionShape);
});
btCollisionObject.prototype["setContactProcessingThreshold"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1(self, arg0);
});
btCollisionObject.prototype["setActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_setActivationState_1(self, arg0);
});
btCollisionObject.prototype["forceActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_forceActivationState_1(self, arg0);
});
btCollisionObject.prototype["activate"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg0 === undefined) {
  _emscripten_bind_btCollisionObject_activate_0(self);
  return;
 }
 _emscripten_bind_btCollisionObject_activate_1(self, arg0);
});
btCollisionObject.prototype["isActive"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btCollisionObject_isActive_0(self);
});
btCollisionObject.prototype["isKinematicObject"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btCollisionObject_isKinematicObject_0(self);
});
btCollisionObject.prototype["setRestitution"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_setRestitution_1(self, arg0);
});
btCollisionObject.prototype["setFriction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_setFriction_1(self, arg0);
});
btCollisionObject.prototype["getWorldTransform"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btCollisionObject_getWorldTransform_0(self), btTransform);
});
btCollisionObject.prototype["getCollisionFlags"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btCollisionObject_getCollisionFlags_0(self);
});
btCollisionObject.prototype["setCollisionFlags"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_setCollisionFlags_1(self, arg0);
});
btCollisionObject.prototype["setWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_setWorldTransform_1(self, arg0);
});
btCollisionObject.prototype["setCollisionShape"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionObject_setCollisionShape_1(self, arg0);
});
btCollisionObject.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCollisionObject___destroy___0(self);
});
function btDiscreteDynamicsWorld(arg0, arg1, arg2, arg3) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 this.ptr = _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4(arg0, arg1, arg2, arg3);
 getCache(btDiscreteDynamicsWorld)[this.ptr] = this;
}
btDiscreteDynamicsWorld.prototype = Object.create(btDynamicsWorld.prototype);
btDiscreteDynamicsWorld.prototype.constructor = btDiscreteDynamicsWorld;
btDiscreteDynamicsWorld.prototype.__class__ = btDiscreteDynamicsWorld;
btDiscreteDynamicsWorld.__cache__ = {};
Module["btDiscreteDynamicsWorld"] = btDiscreteDynamicsWorld;
btDiscreteDynamicsWorld.prototype["setGravity"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1(self, arg0);
});
btDiscreteDynamicsWorld.prototype["getGravity"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0(self), btVector3);
});
btDiscreteDynamicsWorld.prototype["addRigidBody"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg1 === undefined) {
  _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1(self, arg0);
  return;
 }
 if (arg2 === undefined) {
  _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_2(self, arg0, arg1);
  return;
 }
 _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3(self, arg0, arg1, arg2);
});
btDiscreteDynamicsWorld.prototype["removeRigidBody"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1(self, arg0);
});
btDiscreteDynamicsWorld.prototype["addConstraint"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg1 === undefined) {
  _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1(self, arg0);
  return;
 }
 _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2(self, arg0, arg1);
});
btDiscreteDynamicsWorld.prototype["removeConstraint"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1(self, arg0);
});
btDiscreteDynamicsWorld.prototype["stepSimulation"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg1 === undefined) {
  return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1(self, arg0);
 }
 if (arg2 === undefined) {
  return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2(self, arg0, arg1);
 }
 return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3(self, arg0, arg1, arg2);
});
btDiscreteDynamicsWorld.prototype["getDispatcher"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0(self), btDispatcher);
});
btDiscreteDynamicsWorld.prototype["rayTest"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3(self, arg0, arg1, arg2);
});
btDiscreteDynamicsWorld.prototype["getPairCache"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0(self), btOverlappingPairCache);
});
btDiscreteDynamicsWorld.prototype["getDispatchInfo"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0(self), btDispatcherInfo);
});
btDiscreteDynamicsWorld.prototype["addCollisionObject"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg1 === undefined) {
  _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1(self, arg0);
  return;
 }
 if (arg2 === undefined) {
  _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2(self, arg0, arg1);
  return;
 }
 _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3(self, arg0, arg1, arg2);
});
btDiscreteDynamicsWorld.prototype["getBroadphase"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0(self), btBroadphaseInterface);
});
btDiscreteDynamicsWorld.prototype["convexSweepTest"] = (function(arg0, arg1, arg2, arg3, arg4) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5(self, arg0, arg1, arg2, arg3, arg4);
});
btDiscreteDynamicsWorld.prototype["contactPairTest"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3(self, arg0, arg1, arg2);
});
btDiscreteDynamicsWorld.prototype["addAction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDiscreteDynamicsWorld_addAction_1(self, arg0);
});
btDiscreteDynamicsWorld.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDiscreteDynamicsWorld___destroy___0(self);
});
function btConvexTriangleMeshShape(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg1 === undefined) {
  this.ptr = _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1(arg0);
  getCache(btConvexTriangleMeshShape)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2(arg0, arg1);
 getCache(btConvexTriangleMeshShape)[this.ptr] = this;
}
btConvexTriangleMeshShape.prototype = Object.create(btConvexShape.prototype);
btConvexTriangleMeshShape.prototype.constructor = btConvexTriangleMeshShape;
btConvexTriangleMeshShape.prototype.__class__ = btConvexTriangleMeshShape;
btConvexTriangleMeshShape.__cache__ = {};
Module["btConvexTriangleMeshShape"] = btConvexTriangleMeshShape;
btConvexTriangleMeshShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1(self, arg0);
});
btConvexTriangleMeshShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2(self, arg0, arg1);
});
btConvexTriangleMeshShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConvexTriangleMeshShape___destroy___0(self);
});
function ConvexResultCallback() {
 throw "cannot construct a ConvexResultCallback, no constructor in IDL";
}
ConvexResultCallback.prototype = Object.create(WrapperObject.prototype);
ConvexResultCallback.prototype.constructor = ConvexResultCallback;
ConvexResultCallback.prototype.__class__ = ConvexResultCallback;
ConvexResultCallback.__cache__ = {};
Module["ConvexResultCallback"] = ConvexResultCallback;
ConvexResultCallback.prototype["hasHit"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ConvexResultCallback_hasHit_0(self);
});
ConvexResultCallback.prototype["get_m_collisionFilterGroup"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0(self);
});
ConvexResultCallback.prototype["set_m_collisionFilterGroup"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1(self, arg0);
});
ConvexResultCallback.prototype["get_m_collisionFilterMask"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0(self);
});
ConvexResultCallback.prototype["set_m_collisionFilterMask"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1(self, arg0);
});
ConvexResultCallback.prototype["get_m_closestHitFraction"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0(self);
});
ConvexResultCallback.prototype["set_m_closestHitFraction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1(self, arg0);
});
ConvexResultCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_ConvexResultCallback___destroy___0(self);
});
function btPoint2PointConstraint(arg0, arg1, arg2, arg3) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg2 === undefined) {
  this.ptr = _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2(arg0, arg1);
  getCache(btPoint2PointConstraint)[this.ptr] = this;
  return;
 }
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_3(arg0, arg1, arg2);
  getCache(btPoint2PointConstraint)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4(arg0, arg1, arg2, arg3);
 getCache(btPoint2PointConstraint)[this.ptr] = this;
}
btPoint2PointConstraint.prototype = Object.create(btTypedConstraint.prototype);
btPoint2PointConstraint.prototype.constructor = btPoint2PointConstraint;
btPoint2PointConstraint.prototype.__class__ = btPoint2PointConstraint;
btPoint2PointConstraint.__cache__ = {};
Module["btPoint2PointConstraint"] = btPoint2PointConstraint;
btPoint2PointConstraint.prototype["setPivotA"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPoint2PointConstraint_setPivotA_1(self, arg0);
});
btPoint2PointConstraint.prototype["setPivotB"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPoint2PointConstraint_setPivotB_1(self, arg0);
});
btPoint2PointConstraint.prototype["getPivotInA"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInA_0(self), btVector3);
});
btPoint2PointConstraint.prototype["getPivotInB"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInB_0(self), btVector3);
});
btPoint2PointConstraint.prototype["enableFeedback"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPoint2PointConstraint_enableFeedback_1(self, arg0);
});
btPoint2PointConstraint.prototype["get_m_setting"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btPoint2PointConstraint_get_m_setting_0(self), btConstraintSetting);
});
btPoint2PointConstraint.prototype["set_m_setting"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btPoint2PointConstraint_set_m_setting_1(self, arg0);
});
btPoint2PointConstraint.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btPoint2PointConstraint___destroy___0(self);
});
function btMotionState() {
 throw "cannot construct a btMotionState, no constructor in IDL";
}
btMotionState.prototype = Object.create(WrapperObject.prototype);
btMotionState.prototype.constructor = btMotionState;
btMotionState.prototype.__class__ = btMotionState;
btMotionState.__cache__ = {};
Module["btMotionState"] = btMotionState;
btMotionState.prototype["getWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btMotionState_getWorldTransform_1(self, arg0);
});
btMotionState.prototype["setWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btMotionState_setWorldTransform_1(self, arg0);
});
btMotionState.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btMotionState___destroy___0(self);
});
function btSliderConstraint(arg0, arg1, arg2, arg3, arg4) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btSliderConstraint_btSliderConstraint_3(arg0, arg1, arg2);
  getCache(btSliderConstraint)[this.ptr] = this;
  return;
 }
 if (arg4 === undefined) {
  this.ptr = _emscripten_bind_btSliderConstraint_btSliderConstraint_4(arg0, arg1, arg2, arg3);
  getCache(btSliderConstraint)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btSliderConstraint_btSliderConstraint_5(arg0, arg1, arg2, arg3, arg4);
 getCache(btSliderConstraint)[this.ptr] = this;
}
btSliderConstraint.prototype = Object.create(btTypedConstraint.prototype);
btSliderConstraint.prototype.constructor = btSliderConstraint;
btSliderConstraint.prototype.__class__ = btSliderConstraint;
btSliderConstraint.__cache__ = {};
Module["btSliderConstraint"] = btSliderConstraint;
btSliderConstraint.prototype["setLowerLinLimit"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btSliderConstraint_setLowerLinLimit_1(self, arg0);
});
btSliderConstraint.prototype["setUpperLinLimit"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btSliderConstraint_setUpperLinLimit_1(self, arg0);
});
btSliderConstraint.prototype["setLowerAngLimit"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btSliderConstraint_setLowerAngLimit_1(self, arg0);
});
btSliderConstraint.prototype["setUpperAngLimit"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btSliderConstraint_setUpperAngLimit_1(self, arg0);
});
btSliderConstraint.prototype["enableFeedback"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btSliderConstraint_enableFeedback_1(self, arg0);
});
btSliderConstraint.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btSliderConstraint___destroy___0(self);
});
function btConeTwistConstraint(arg0, arg1, arg2, arg3) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg2 === undefined) {
  this.ptr = _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2(arg0, arg1);
  getCache(btConeTwistConstraint)[this.ptr] = this;
  return;
 }
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_3(arg0, arg1, arg2);
  getCache(btConeTwistConstraint)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4(arg0, arg1, arg2, arg3);
 getCache(btConeTwistConstraint)[this.ptr] = this;
}
btConeTwistConstraint.prototype = Object.create(btTypedConstraint.prototype);
btConeTwistConstraint.prototype.constructor = btConeTwistConstraint;
btConeTwistConstraint.prototype.__class__ = btConeTwistConstraint;
btConeTwistConstraint.__cache__ = {};
Module["btConeTwistConstraint"] = btConeTwistConstraint;
btConeTwistConstraint.prototype["setLimit"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConeTwistConstraint_setLimit_2(self, arg0, arg1);
});
btConeTwistConstraint.prototype["setAngularOnly"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_setAngularOnly_1(self, arg0);
});
btConeTwistConstraint.prototype["setDamping"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_setDamping_1(self, arg0);
});
btConeTwistConstraint.prototype["enableMotor"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_enableMotor_1(self, arg0);
});
btConeTwistConstraint.prototype["setMaxMotorImpulse"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1(self, arg0);
});
btConeTwistConstraint.prototype["setMaxMotorImpulseNormalized"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1(self, arg0);
});
btConeTwistConstraint.prototype["setMotorTarget"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_setMotorTarget_1(self, arg0);
});
btConeTwistConstraint.prototype["setMotorTargetInConstraintSpace"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1(self, arg0);
});
btConeTwistConstraint.prototype["enableFeedback"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeTwistConstraint_enableFeedback_1(self, arg0);
});
btConeTwistConstraint.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConeTwistConstraint___destroy___0(self);
});
function btConeShape(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_btConeShape_btConeShape_2(arg0, arg1);
 getCache(btConeShape)[this.ptr] = this;
}
btConeShape.prototype = Object.create(btCollisionShape.prototype);
btConeShape.prototype.constructor = btConeShape;
btConeShape.prototype.__class__ = btConeShape;
btConeShape.__cache__ = {};
Module["btConeShape"] = btConeShape;
btConeShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeShape_setLocalScaling_1(self, arg0);
});
btConeShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConeShape_calculateLocalInertia_2(self, arg0, arg1);
});
btConeShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConeShape___destroy___0(self);
});
function btConvexShape() {
 throw "cannot construct a btConvexShape, no constructor in IDL";
}
btConvexShape.prototype = Object.create(btCollisionShape.prototype);
btConvexShape.prototype.constructor = btConvexShape;
btConvexShape.prototype.__class__ = btConvexShape;
btConvexShape.__cache__ = {};
Module["btConvexShape"] = btConvexShape;
btConvexShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConvexShape_setLocalScaling_1(self, arg0);
});
btConvexShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConvexShape_calculateLocalInertia_2(self, arg0, arg1);
});
btConvexShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConvexShape___destroy___0(self);
});
function btDefaultCollisionConfiguration(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg0 === undefined) {
  this.ptr = _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0();
  getCache(btDefaultCollisionConfiguration)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1(arg0);
 getCache(btDefaultCollisionConfiguration)[this.ptr] = this;
}
btDefaultCollisionConfiguration.prototype = Object.create(WrapperObject.prototype);
btDefaultCollisionConfiguration.prototype.constructor = btDefaultCollisionConfiguration;
btDefaultCollisionConfiguration.prototype.__class__ = btDefaultCollisionConfiguration;
btDefaultCollisionConfiguration.__cache__ = {};
Module["btDefaultCollisionConfiguration"] = btDefaultCollisionConfiguration;
btDefaultCollisionConfiguration.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDefaultCollisionConfiguration___destroy___0(self);
});
function ContactResultCallback() {
 throw "cannot construct a ContactResultCallback, no constructor in IDL";
}
ContactResultCallback.prototype = Object.create(WrapperObject.prototype);
ContactResultCallback.prototype.constructor = ContactResultCallback;
ContactResultCallback.prototype.__class__ = ContactResultCallback;
ContactResultCallback.__cache__ = {};
Module["ContactResultCallback"] = ContactResultCallback;
ContactResultCallback.prototype["addSingleResult"] = (function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg5 && typeof arg5 === "object") arg5 = arg5.ptr; else arg5 = ensureString(arg5);
 if (arg6 && typeof arg6 === "object") arg6 = arg6.ptr; else arg6 = ensureString(arg6);
 return _emscripten_bind_ContactResultCallback_addSingleResult_7(self, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
});
ContactResultCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_ContactResultCallback___destroy___0(self);
});
function btConeShapeZ(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_btConeShapeZ_btConeShapeZ_2(arg0, arg1);
 getCache(btConeShapeZ)[this.ptr] = this;
}
btConeShapeZ.prototype = Object.create(btConeShape.prototype);
btConeShapeZ.prototype.constructor = btConeShapeZ;
btConeShapeZ.prototype.__class__ = btConeShapeZ;
btConeShapeZ.__cache__ = {};
Module["btConeShapeZ"] = btConeShapeZ;
btConeShapeZ.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeShapeZ_setLocalScaling_1(self, arg0);
});
btConeShapeZ.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConeShapeZ_calculateLocalInertia_2(self, arg0, arg1);
});
btConeShapeZ.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConeShapeZ___destroy___0(self);
});
function btConeShapeX(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_btConeShapeX_btConeShapeX_2(arg0, arg1);
 getCache(btConeShapeX)[this.ptr] = this;
}
btConeShapeX.prototype = Object.create(btConeShape.prototype);
btConeShapeX.prototype.constructor = btConeShapeX;
btConeShapeX.prototype.__class__ = btConeShapeX;
btConeShapeX.__cache__ = {};
Module["btConeShapeX"] = btConeShapeX;
btConeShapeX.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConeShapeX_setLocalScaling_1(self, arg0);
});
btConeShapeX.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConeShapeX_calculateLocalInertia_2(self, arg0, arg1);
});
btConeShapeX.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConeShapeX___destroy___0(self);
});
function btTriangleMesh(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg0 === undefined) {
  this.ptr = _emscripten_bind_btTriangleMesh_btTriangleMesh_0();
  getCache(btTriangleMesh)[this.ptr] = this;
  return;
 }
 if (arg1 === undefined) {
  this.ptr = _emscripten_bind_btTriangleMesh_btTriangleMesh_1(arg0);
  getCache(btTriangleMesh)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btTriangleMesh_btTriangleMesh_2(arg0, arg1);
 getCache(btTriangleMesh)[this.ptr] = this;
}
btTriangleMesh.prototype = Object.create(btStridingMeshInterface.prototype);
btTriangleMesh.prototype.constructor = btTriangleMesh;
btTriangleMesh.prototype.__class__ = btTriangleMesh;
btTriangleMesh.__cache__ = {};
Module["btTriangleMesh"] = btTriangleMesh;
btTriangleMesh.prototype["addTriangle"] = (function(arg0, arg1, arg2, arg3) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg3 === undefined) {
  _emscripten_bind_btTriangleMesh_addTriangle_3(self, arg0, arg1, arg2);
  return;
 }
 _emscripten_bind_btTriangleMesh_addTriangle_4(self, arg0, arg1, arg2, arg3);
});
btTriangleMesh.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btTriangleMesh___destroy___0(self);
});
function btConvexHullShape() {
 this.ptr = _emscripten_bind_btConvexHullShape_btConvexHullShape_0();
 getCache(btConvexHullShape)[this.ptr] = this;
}
btConvexHullShape.prototype = Object.create(btCollisionShape.prototype);
btConvexHullShape.prototype.constructor = btConvexHullShape;
btConvexHullShape.prototype.__class__ = btConvexHullShape;
btConvexHullShape.__cache__ = {};
Module["btConvexHullShape"] = btConvexHullShape;
btConvexHullShape.prototype["addPoint"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg1 === undefined) {
  _emscripten_bind_btConvexHullShape_addPoint_1(self, arg0);
  return;
 }
 _emscripten_bind_btConvexHullShape_addPoint_2(self, arg0, arg1);
});
btConvexHullShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConvexHullShape_setLocalScaling_1(self, arg0);
});
btConvexHullShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConvexHullShape_calculateLocalInertia_2(self, arg0, arg1);
});
btConvexHullShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConvexHullShape___destroy___0(self);
});
function btPersistentManifold() {
 this.ptr = _emscripten_bind_btPersistentManifold_btPersistentManifold_0();
 getCache(btPersistentManifold)[this.ptr] = this;
}
btPersistentManifold.prototype = Object.create(WrapperObject.prototype);
btPersistentManifold.prototype.constructor = btPersistentManifold;
btPersistentManifold.prototype.__class__ = btPersistentManifold;
btPersistentManifold.__cache__ = {};
Module["btPersistentManifold"] = btPersistentManifold;
btPersistentManifold.prototype["getBody0"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btPersistentManifold_getBody0_0(self), btCollisionObject);
});
btPersistentManifold.prototype["getBody1"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btPersistentManifold_getBody1_0(self), btCollisionObject);
});
btPersistentManifold.prototype["getNumContacts"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btPersistentManifold_getNumContacts_0(self);
});
btPersistentManifold.prototype["getContactPoint"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btPersistentManifold_getContactPoint_1(self, arg0), btManifoldPoint);
});
btPersistentManifold.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btPersistentManifold___destroy___0(self);
});
function btBoxShape(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btBoxShape_btBoxShape_1(arg0);
 getCache(btBoxShape)[this.ptr] = this;
}
btBoxShape.prototype = Object.create(btCollisionShape.prototype);
btBoxShape.prototype.constructor = btBoxShape;
btBoxShape.prototype.__class__ = btBoxShape;
btBoxShape.__cache__ = {};
Module["btBoxShape"] = btBoxShape;
btBoxShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btBoxShape_setLocalScaling_1(self, arg0);
});
btBoxShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btBoxShape_calculateLocalInertia_2(self, arg0, arg1);
});
btBoxShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btBoxShape___destroy___0(self);
});
function btCollisionDispatcher(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1(arg0);
 getCache(btCollisionDispatcher)[this.ptr] = this;
}
btCollisionDispatcher.prototype = Object.create(btDispatcher.prototype);
btCollisionDispatcher.prototype.constructor = btCollisionDispatcher;
btCollisionDispatcher.prototype.__class__ = btCollisionDispatcher;
btCollisionDispatcher.__cache__ = {};
Module["btCollisionDispatcher"] = btCollisionDispatcher;
btCollisionDispatcher.prototype["getNumManifolds"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btCollisionDispatcher_getNumManifolds_0(self);
});
btCollisionDispatcher.prototype["getManifoldByIndexInternal"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1(self, arg0), btPersistentManifold);
});
btCollisionDispatcher.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCollisionDispatcher___destroy___0(self);
});
function btVehicleTuning() {
 this.ptr = _emscripten_bind_btVehicleTuning_btVehicleTuning_0();
 getCache(btVehicleTuning)[this.ptr] = this;
}
btVehicleTuning.prototype = Object.create(WrapperObject.prototype);
btVehicleTuning.prototype.constructor = btVehicleTuning;
btVehicleTuning.prototype.__class__ = btVehicleTuning;
btVehicleTuning.__cache__ = {};
Module["btVehicleTuning"] = btVehicleTuning;
btVehicleTuning.prototype["get_m_suspensionStiffness"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0(self);
});
btVehicleTuning.prototype["set_m_suspensionStiffness"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1(self, arg0);
});
btVehicleTuning.prototype["get_m_suspensionCompression"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0(self);
});
btVehicleTuning.prototype["set_m_suspensionCompression"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1(self, arg0);
});
btVehicleTuning.prototype["get_m_suspensionDamping"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0(self);
});
btVehicleTuning.prototype["set_m_suspensionDamping"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1(self, arg0);
});
btVehicleTuning.prototype["get_m_maxSuspensionTravelCm"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0(self);
});
btVehicleTuning.prototype["set_m_maxSuspensionTravelCm"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1(self, arg0);
});
btVehicleTuning.prototype["get_m_frictionSlip"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0(self);
});
btVehicleTuning.prototype["set_m_frictionSlip"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1(self, arg0);
});
btVehicleTuning.prototype["get_m_maxSuspensionForce"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0(self);
});
btVehicleTuning.prototype["set_m_maxSuspensionForce"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1(self, arg0);
});
function btCompoundShape(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg0 === undefined) {
  this.ptr = _emscripten_bind_btCompoundShape_btCompoundShape_0();
  getCache(btCompoundShape)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btCompoundShape_btCompoundShape_1(arg0);
 getCache(btCompoundShape)[this.ptr] = this;
}
btCompoundShape.prototype = Object.create(btCollisionShape.prototype);
btCompoundShape.prototype.constructor = btCompoundShape;
btCompoundShape.prototype.__class__ = btCompoundShape;
btCompoundShape.__cache__ = {};
Module["btCompoundShape"] = btCompoundShape;
btCompoundShape.prototype["addChildShape"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCompoundShape_addChildShape_2(self, arg0, arg1);
});
btCompoundShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCompoundShape_setLocalScaling_1(self, arg0);
});
btCompoundShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCompoundShape_calculateLocalInertia_2(self, arg0, arg1);
});
btCompoundShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCompoundShape___destroy___0(self);
});
function btCollisionObjectWrapper() {
 throw "cannot construct a btCollisionObjectWrapper, no constructor in IDL";
}
btCollisionObjectWrapper.prototype = Object.create(WrapperObject.prototype);
btCollisionObjectWrapper.prototype.constructor = btCollisionObjectWrapper;
btCollisionObjectWrapper.prototype.__class__ = btCollisionObjectWrapper;
btCollisionObjectWrapper.__cache__ = {};
Module["btCollisionObjectWrapper"] = btCollisionObjectWrapper;
function ClosestConvexResultCallback(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2(arg0, arg1);
 getCache(ClosestConvexResultCallback)[this.ptr] = this;
}
ClosestConvexResultCallback.prototype = Object.create(ConvexResultCallback.prototype);
ClosestConvexResultCallback.prototype.constructor = ClosestConvexResultCallback;
ClosestConvexResultCallback.prototype.__class__ = ClosestConvexResultCallback;
ClosestConvexResultCallback.__cache__ = {};
Module["ClosestConvexResultCallback"] = ClosestConvexResultCallback;
ClosestConvexResultCallback.prototype["hasHit"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ClosestConvexResultCallback_hasHit_0(self);
});
ClosestConvexResultCallback.prototype["get_m_convexFromWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0(self), btVector3);
});
ClosestConvexResultCallback.prototype["set_m_convexFromWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1(self, arg0);
});
ClosestConvexResultCallback.prototype["get_m_convexToWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0(self), btVector3);
});
ClosestConvexResultCallback.prototype["set_m_convexToWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1(self, arg0);
});
ClosestConvexResultCallback.prototype["get_m_hitNormalWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0(self), btVector3);
});
ClosestConvexResultCallback.prototype["set_m_hitNormalWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1(self, arg0);
});
ClosestConvexResultCallback.prototype["get_m_hitPointWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0(self), btVector3);
});
ClosestConvexResultCallback.prototype["set_m_hitPointWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1(self, arg0);
});
ClosestConvexResultCallback.prototype["get_m_collisionFilterGroup"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0(self);
});
ClosestConvexResultCallback.prototype["set_m_collisionFilterGroup"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1(self, arg0);
});
ClosestConvexResultCallback.prototype["get_m_collisionFilterMask"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0(self);
});
ClosestConvexResultCallback.prototype["set_m_collisionFilterMask"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1(self, arg0);
});
ClosestConvexResultCallback.prototype["get_m_closestHitFraction"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0(self);
});
ClosestConvexResultCallback.prototype["set_m_closestHitFraction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1(self, arg0);
});
ClosestConvexResultCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_ClosestConvexResultCallback___destroy___0(self);
});
function btDefaultMotionState(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg0 === undefined) {
  this.ptr = _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0();
  getCache(btDefaultMotionState)[this.ptr] = this;
  return;
 }
 if (arg1 === undefined) {
  this.ptr = _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1(arg0);
  getCache(btDefaultMotionState)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2(arg0, arg1);
 getCache(btDefaultMotionState)[this.ptr] = this;
}
btDefaultMotionState.prototype = Object.create(btMotionState.prototype);
btDefaultMotionState.prototype.constructor = btDefaultMotionState;
btDefaultMotionState.prototype.__class__ = btDefaultMotionState;
btDefaultMotionState.__cache__ = {};
Module["btDefaultMotionState"] = btDefaultMotionState;
btDefaultMotionState.prototype["getWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDefaultMotionState_getWorldTransform_1(self, arg0);
});
btDefaultMotionState.prototype["setWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDefaultMotionState_setWorldTransform_1(self, arg0);
});
btDefaultMotionState.prototype["get_m_graphicsWorldTrans"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0(self), btTransform);
});
btDefaultMotionState.prototype["set_m_graphicsWorldTrans"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1(self, arg0);
});
btDefaultMotionState.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDefaultMotionState___destroy___0(self);
});
function btTriangleMeshShape() {
 throw "cannot construct a btTriangleMeshShape, no constructor in IDL";
}
btTriangleMeshShape.prototype = Object.create(btConcaveShape.prototype);
btTriangleMeshShape.prototype.constructor = btTriangleMeshShape;
btTriangleMeshShape.prototype.__class__ = btTriangleMeshShape;
btTriangleMeshShape.__cache__ = {};
Module["btTriangleMeshShape"] = btTriangleMeshShape;
btTriangleMeshShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btTriangleMeshShape_setLocalScaling_1(self, arg0);
});
btTriangleMeshShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2(self, arg0, arg1);
});
btTriangleMeshShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btTriangleMeshShape___destroy___0(self);
});
function btDispatcher() {
 throw "cannot construct a btDispatcher, no constructor in IDL";
}
btDispatcher.prototype = Object.create(WrapperObject.prototype);
btDispatcher.prototype.constructor = btDispatcher;
btDispatcher.prototype.__class__ = btDispatcher;
btDispatcher.__cache__ = {};
Module["btDispatcher"] = btDispatcher;
btDispatcher.prototype["getNumManifolds"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btDispatcher_getNumManifolds_0(self);
});
btDispatcher.prototype["getManifoldByIndexInternal"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1(self, arg0), btPersistentManifold);
});
btDispatcher.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDispatcher___destroy___0(self);
});
function ClosestRayResultCallback(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2(arg0, arg1);
 getCache(ClosestRayResultCallback)[this.ptr] = this;
}
ClosestRayResultCallback.prototype = Object.create(RayResultCallback.prototype);
ClosestRayResultCallback.prototype.constructor = ClosestRayResultCallback;
ClosestRayResultCallback.prototype.__class__ = ClosestRayResultCallback;
ClosestRayResultCallback.__cache__ = {};
Module["ClosestRayResultCallback"] = ClosestRayResultCallback;
ClosestRayResultCallback.prototype["hasHit"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ClosestRayResultCallback_hasHit_0(self);
});
ClosestRayResultCallback.prototype["get_m_rayFromWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0(self), btVector3);
});
ClosestRayResultCallback.prototype["set_m_rayFromWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1(self, arg0);
});
ClosestRayResultCallback.prototype["get_m_rayToWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0(self), btVector3);
});
ClosestRayResultCallback.prototype["set_m_rayToWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1(self, arg0);
});
ClosestRayResultCallback.prototype["get_m_hitNormalWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0(self), btVector3);
});
ClosestRayResultCallback.prototype["set_m_hitNormalWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1(self, arg0);
});
ClosestRayResultCallback.prototype["get_m_hitPointWorld"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0(self), btVector3);
});
ClosestRayResultCallback.prototype["set_m_hitPointWorld"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1(self, arg0);
});
ClosestRayResultCallback.prototype["get_m_collisionFilterGroup"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0(self);
});
ClosestRayResultCallback.prototype["set_m_collisionFilterGroup"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1(self, arg0);
});
ClosestRayResultCallback.prototype["get_m_collisionFilterMask"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0(self);
});
ClosestRayResultCallback.prototype["set_m_collisionFilterMask"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1(self, arg0);
});
ClosestRayResultCallback.prototype["get_m_collisionObject"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0(self), btCollisionObject);
});
ClosestRayResultCallback.prototype["set_m_collisionObject"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1(self, arg0);
});
ClosestRayResultCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_ClosestRayResultCallback___destroy___0(self);
});
function btDynamicsWorld() {
 throw "cannot construct a btDynamicsWorld, no constructor in IDL";
}
btDynamicsWorld.prototype = Object.create(btCollisionWorld.prototype);
btDynamicsWorld.prototype.constructor = btDynamicsWorld;
btDynamicsWorld.prototype.__class__ = btDynamicsWorld;
btDynamicsWorld.__cache__ = {};
Module["btDynamicsWorld"] = btDynamicsWorld;
btDynamicsWorld.prototype["addAction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btDynamicsWorld_addAction_1(self, arg0);
});
btDynamicsWorld.prototype["getDispatcher"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatcher_0(self), btDispatcher);
});
btDynamicsWorld.prototype["rayTest"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btDynamicsWorld_rayTest_3(self, arg0, arg1, arg2);
});
btDynamicsWorld.prototype["getPairCache"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDynamicsWorld_getPairCache_0(self), btOverlappingPairCache);
});
btDynamicsWorld.prototype["getDispatchInfo"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatchInfo_0(self), btDispatcherInfo);
});
btDynamicsWorld.prototype["addCollisionObject"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg1 === undefined) {
  _emscripten_bind_btDynamicsWorld_addCollisionObject_1(self, arg0);
  return;
 }
 if (arg2 === undefined) {
  _emscripten_bind_btDynamicsWorld_addCollisionObject_2(self, arg0, arg1);
  return;
 }
 _emscripten_bind_btDynamicsWorld_addCollisionObject_3(self, arg0, arg1, arg2);
});
btDynamicsWorld.prototype["getBroadphase"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btDynamicsWorld_getBroadphase_0(self), btBroadphaseInterface);
});
btDynamicsWorld.prototype["convexSweepTest"] = (function(arg0, arg1, arg2, arg3, arg4) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 _emscripten_bind_btDynamicsWorld_convexSweepTest_5(self, arg0, arg1, arg2, arg3, arg4);
});
btDynamicsWorld.prototype["contactPairTest"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btDynamicsWorld_contactPairTest_3(self, arg0, arg1, arg2);
});
btDynamicsWorld.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDynamicsWorld___destroy___0(self);
});
function btCapsuleShapeX(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2(arg0, arg1);
 getCache(btCapsuleShapeX)[this.ptr] = this;
}
btCapsuleShapeX.prototype = Object.create(btCapsuleShape.prototype);
btCapsuleShapeX.prototype.constructor = btCapsuleShapeX;
btCapsuleShapeX.prototype.__class__ = btCapsuleShapeX;
btCapsuleShapeX.__cache__ = {};
Module["btCapsuleShapeX"] = btCapsuleShapeX;
btCapsuleShapeX.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCapsuleShapeX_setLocalScaling_1(self, arg0);
});
btCapsuleShapeX.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2(self, arg0, arg1);
});
btCapsuleShapeX.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCapsuleShapeX___destroy___0(self);
});
function btQuaternion(arg0, arg1, arg2, arg3) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 this.ptr = _emscripten_bind_btQuaternion_btQuaternion_4(arg0, arg1, arg2, arg3);
 getCache(btQuaternion)[this.ptr] = this;
}
btQuaternion.prototype = Object.create(btQuadWord.prototype);
btQuaternion.prototype.constructor = btQuaternion;
btQuaternion.prototype.__class__ = btQuaternion;
btQuaternion.__cache__ = {};
Module["btQuaternion"] = btQuaternion;
btQuaternion.prototype["setValue"] = (function(arg0, arg1, arg2, arg3) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 _emscripten_bind_btQuaternion_setValue_4(self, arg0, arg1, arg2, arg3);
});
btQuaternion.prototype["x"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuaternion_x_0(self);
});
btQuaternion.prototype["y"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuaternion_y_0(self);
});
btQuaternion.prototype["z"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuaternion_z_0(self);
});
btQuaternion.prototype["w"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuaternion_w_0(self);
});
btQuaternion.prototype["setX"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuaternion_setX_1(self, arg0);
});
btQuaternion.prototype["setY"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuaternion_setY_1(self, arg0);
});
btQuaternion.prototype["setZ"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuaternion_setZ_1(self, arg0);
});
btQuaternion.prototype["setW"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuaternion_setW_1(self, arg0);
});
btQuaternion.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btQuaternion___destroy___0(self);
});
function btCapsuleShapeZ(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2(arg0, arg1);
 getCache(btCapsuleShapeZ)[this.ptr] = this;
}
btCapsuleShapeZ.prototype = Object.create(btCapsuleShape.prototype);
btCapsuleShapeZ.prototype.constructor = btCapsuleShapeZ;
btCapsuleShapeZ.prototype.__class__ = btCapsuleShapeZ;
btCapsuleShapeZ.__cache__ = {};
Module["btCapsuleShapeZ"] = btCapsuleShapeZ;
btCapsuleShapeZ.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1(self, arg0);
});
btCapsuleShapeZ.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2(self, arg0, arg1);
});
btCapsuleShapeZ.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCapsuleShapeZ___destroy___0(self);
});
function btDefaultVehicleRaycaster(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1(arg0);
 getCache(btDefaultVehicleRaycaster)[this.ptr] = this;
}
btDefaultVehicleRaycaster.prototype = Object.create(btVehicleRaycaster.prototype);
btDefaultVehicleRaycaster.prototype.constructor = btDefaultVehicleRaycaster;
btDefaultVehicleRaycaster.prototype.__class__ = btDefaultVehicleRaycaster;
btDefaultVehicleRaycaster.__cache__ = {};
Module["btDefaultVehicleRaycaster"] = btDefaultVehicleRaycaster;
btDefaultVehicleRaycaster.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDefaultVehicleRaycaster___destroy___0(self);
});
function RayResultCallback() {
 throw "cannot construct a RayResultCallback, no constructor in IDL";
}
RayResultCallback.prototype = Object.create(WrapperObject.prototype);
RayResultCallback.prototype.constructor = RayResultCallback;
RayResultCallback.prototype.__class__ = RayResultCallback;
RayResultCallback.__cache__ = {};
Module["RayResultCallback"] = RayResultCallback;
RayResultCallback.prototype["hasHit"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_RayResultCallback_hasHit_0(self);
});
RayResultCallback.prototype["get_m_collisionFilterGroup"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0(self);
});
RayResultCallback.prototype["set_m_collisionFilterGroup"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1(self, arg0);
});
RayResultCallback.prototype["get_m_collisionFilterMask"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0(self);
});
RayResultCallback.prototype["set_m_collisionFilterMask"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1(self, arg0);
});
RayResultCallback.prototype["get_m_collisionObject"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_RayResultCallback_get_m_collisionObject_0(self), btCollisionObject);
});
RayResultCallback.prototype["set_m_collisionObject"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_RayResultCallback_set_m_collisionObject_1(self, arg0);
});
RayResultCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_RayResultCallback___destroy___0(self);
});
function btWheelInfo() {
 throw "cannot construct a btWheelInfo, no constructor in IDL";
}
btWheelInfo.prototype = Object.create(WrapperObject.prototype);
btWheelInfo.prototype.constructor = btWheelInfo;
btWheelInfo.prototype.__class__ = btWheelInfo;
btWheelInfo.__cache__ = {};
Module["btWheelInfo"] = btWheelInfo;
btWheelInfo.prototype["get_m_suspensionStiffness"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0(self);
});
btWheelInfo.prototype["set_m_suspensionStiffness"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1(self, arg0);
});
btWheelInfo.prototype["get_m_frictionSlip"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_frictionSlip_0(self);
});
btWheelInfo.prototype["set_m_frictionSlip"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_frictionSlip_1(self, arg0);
});
btWheelInfo.prototype["get_m_rollInfluence"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_rollInfluence_0(self);
});
btWheelInfo.prototype["set_m_rollInfluence"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_rollInfluence_1(self, arg0);
});
btWheelInfo.prototype["get_m_suspensionRestLength1"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0(self);
});
btWheelInfo.prototype["set_m_suspensionRestLength1"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1(self, arg0);
});
btWheelInfo.prototype["get_m_wheelsRadius"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0(self);
});
btWheelInfo.prototype["set_m_wheelsRadius"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1(self, arg0);
});
btWheelInfo.prototype["get_m_wheelsDampingCompression"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0(self);
});
btWheelInfo.prototype["set_m_wheelsDampingCompression"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1(self, arg0);
});
btWheelInfo.prototype["get_m_wheelsDampingRelaxation"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0(self);
});
btWheelInfo.prototype["set_m_wheelsDampingRelaxation"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1(self, arg0);
});
btWheelInfo.prototype["get_m_steering"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_steering_0(self);
});
btWheelInfo.prototype["set_m_steering"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_steering_1(self, arg0);
});
btWheelInfo.prototype["get_m_maxSuspensionForce"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0(self);
});
btWheelInfo.prototype["set_m_maxSuspensionForce"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1(self, arg0);
});
btWheelInfo.prototype["get_m_maxSuspensionTravelCm"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0(self);
});
btWheelInfo.prototype["set_m_maxSuspensionTravelCm"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1(self, arg0);
});
btWheelInfo.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btWheelInfo___destroy___0(self);
});
function btConcaveShape() {
 throw "cannot construct a btConcaveShape, no constructor in IDL";
}
btConcaveShape.prototype = Object.create(btCollisionShape.prototype);
btConcaveShape.prototype.constructor = btConcaveShape;
btConcaveShape.prototype.__class__ = btConcaveShape;
btConcaveShape.__cache__ = {};
Module["btConcaveShape"] = btConcaveShape;
btConcaveShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConcaveShape_setLocalScaling_1(self, arg0);
});
btConcaveShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btConcaveShape_calculateLocalInertia_2(self, arg0, arg1);
});
btConcaveShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConcaveShape___destroy___0(self);
});
function btVector4(arg0, arg1, arg2, arg3) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg0 === undefined) {
  this.ptr = _emscripten_bind_btVector4_btVector4_0();
  getCache(btVector4)[this.ptr] = this;
  return;
 }
 if (arg1 === undefined) {
  this.ptr = _emscripten_bind_btVector4_btVector4_1(arg0);
  getCache(btVector4)[this.ptr] = this;
  return;
 }
 if (arg2 === undefined) {
  this.ptr = _emscripten_bind_btVector4_btVector4_2(arg0, arg1);
  getCache(btVector4)[this.ptr] = this;
  return;
 }
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btVector4_btVector4_3(arg0, arg1, arg2);
  getCache(btVector4)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btVector4_btVector4_4(arg0, arg1, arg2, arg3);
 getCache(btVector4)[this.ptr] = this;
}
btVector4.prototype = Object.create(btVector3.prototype);
btVector4.prototype.constructor = btVector4;
btVector4.prototype.__class__ = btVector4;
btVector4.__cache__ = {};
Module["btVector4"] = btVector4;
btVector4.prototype["w"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector4_w_0(self);
});
btVector4.prototype["setValue"] = (function(arg0, arg1, arg2, arg3) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 _emscripten_bind_btVector4_setValue_4(self, arg0, arg1, arg2, arg3);
});
btVector4.prototype["length"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector4_length_0(self);
});
btVector4.prototype["x"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector4_x_0(self);
});
btVector4.prototype["y"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector4_y_0(self);
});
btVector4.prototype["z"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector4_z_0(self);
});
btVector4.prototype["setX"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVector4_setX_1(self, arg0);
});
btVector4.prototype["setY"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVector4_setY_1(self, arg0);
});
btVector4.prototype["setZ"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVector4_setZ_1(self, arg0);
});
btVector4.prototype["op_mul"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btVector4_op_mul_1(self, arg0), btVector3);
});
btVector4.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btVector4___destroy___0(self);
});
function btKinematicCharacterController(arg0, arg1, arg2, arg3) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3(arg0, arg1, arg2);
  getCache(btKinematicCharacterController)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4(arg0, arg1, arg2, arg3);
 getCache(btKinematicCharacterController)[this.ptr] = this;
}
btKinematicCharacterController.prototype = Object.create(btActionInterface.prototype);
btKinematicCharacterController.prototype.constructor = btKinematicCharacterController;
btKinematicCharacterController.prototype.__class__ = btKinematicCharacterController;
btKinematicCharacterController.__cache__ = {};
Module["btKinematicCharacterController"] = btKinematicCharacterController;
btKinematicCharacterController.prototype["setUpAxis"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setUpAxis_1(self, arg0);
});
btKinematicCharacterController.prototype["setWalkDirection"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setWalkDirection_1(self, arg0);
});
btKinematicCharacterController.prototype["setVelocityForTimeInterval"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2(self, arg0, arg1);
});
btKinematicCharacterController.prototype["warp"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_warp_1(self, arg0);
});
btKinematicCharacterController.prototype["preStep"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_preStep_1(self, arg0);
});
btKinematicCharacterController.prototype["playerStep"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btKinematicCharacterController_playerStep_2(self, arg0, arg1);
});
btKinematicCharacterController.prototype["setFallSpeed"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setFallSpeed_1(self, arg0);
});
btKinematicCharacterController.prototype["setJumpSpeed"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1(self, arg0);
});
btKinematicCharacterController.prototype["setMaxJumpHeight"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1(self, arg0);
});
btKinematicCharacterController.prototype["canJump"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btKinematicCharacterController_canJump_0(self);
});
btKinematicCharacterController.prototype["jump"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btKinematicCharacterController_jump_0(self);
});
btKinematicCharacterController.prototype["setGravity"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setGravity_1(self, arg0);
});
btKinematicCharacterController.prototype["getGravity"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btKinematicCharacterController_getGravity_0(self);
});
btKinematicCharacterController.prototype["setMaxSlope"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setMaxSlope_1(self, arg0);
});
btKinematicCharacterController.prototype["getMaxSlope"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btKinematicCharacterController_getMaxSlope_0(self);
});
btKinematicCharacterController.prototype["getGhostObject"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btKinematicCharacterController_getGhostObject_0(self), btPairCachingGhostObject);
});
btKinematicCharacterController.prototype["setUseGhostSweepTest"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1(self, arg0);
});
btKinematicCharacterController.prototype["onGround"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btKinematicCharacterController_onGround_0(self);
});
btKinematicCharacterController.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btKinematicCharacterController___destroy___0(self);
});
function btStaticPlaneShape(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 this.ptr = _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2(arg0, arg1);
 getCache(btStaticPlaneShape)[this.ptr] = this;
}
btStaticPlaneShape.prototype = Object.create(btConcaveShape.prototype);
btStaticPlaneShape.prototype.constructor = btStaticPlaneShape;
btStaticPlaneShape.prototype.__class__ = btStaticPlaneShape;
btStaticPlaneShape.__cache__ = {};
Module["btStaticPlaneShape"] = btStaticPlaneShape;
btStaticPlaneShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btStaticPlaneShape_setLocalScaling_1(self, arg0);
});
btStaticPlaneShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2(self, arg0, arg1);
});
btStaticPlaneShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btStaticPlaneShape___destroy___0(self);
});
function btActionInterface() {
 throw "cannot construct a btActionInterface, no constructor in IDL";
}
btActionInterface.prototype = Object.create(WrapperObject.prototype);
btActionInterface.prototype.constructor = btActionInterface;
btActionInterface.prototype.__class__ = btActionInterface;
btActionInterface.__cache__ = {};
Module["btActionInterface"] = btActionInterface;
btActionInterface.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btActionInterface___destroy___0(self);
});
function btOverlappingPairCache() {
 throw "cannot construct a btOverlappingPairCache, no constructor in IDL";
}
btOverlappingPairCache.prototype = Object.create(WrapperObject.prototype);
btOverlappingPairCache.prototype.constructor = btOverlappingPairCache;
btOverlappingPairCache.prototype.__class__ = btOverlappingPairCache;
btOverlappingPairCache.__cache__ = {};
Module["btOverlappingPairCache"] = btOverlappingPairCache;
btOverlappingPairCache.prototype["setInternalGhostPairCallback"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1(self, arg0);
});
btOverlappingPairCache.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btOverlappingPairCache___destroy___0(self);
});
function btVector3(arg0, arg1, arg2) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg0 === undefined) {
  this.ptr = _emscripten_bind_btVector3_btVector3_0();
  getCache(btVector3)[this.ptr] = this;
  return;
 }
 if (arg1 === undefined) {
  this.ptr = _emscripten_bind_btVector3_btVector3_1(arg0);
  getCache(btVector3)[this.ptr] = this;
  return;
 }
 if (arg2 === undefined) {
  this.ptr = _emscripten_bind_btVector3_btVector3_2(arg0, arg1);
  getCache(btVector3)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btVector3_btVector3_3(arg0, arg1, arg2);
 getCache(btVector3)[this.ptr] = this;
}
btVector3.prototype = Object.create(WrapperObject.prototype);
btVector3.prototype.constructor = btVector3;
btVector3.prototype.__class__ = btVector3;
btVector3.__cache__ = {};
Module["btVector3"] = btVector3;
btVector3.prototype["length"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector3_length_0(self);
});
btVector3.prototype["x"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector3_x_0(self);
});
btVector3.prototype["y"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector3_y_0(self);
});
btVector3.prototype["z"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btVector3_z_0(self);
});
btVector3.prototype["setX"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVector3_setX_1(self, arg0);
});
btVector3.prototype["setY"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVector3_setY_1(self, arg0);
});
btVector3.prototype["setZ"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btVector3_setZ_1(self, arg0);
});
btVector3.prototype["setValue"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btVector3_setValue_3(self, arg0, arg1, arg2);
});
btVector3.prototype["op_mul"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btVector3_op_mul_1(self, arg0), btVector3);
});
btVector3.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btVector3___destroy___0(self);
});
function btVehicleRaycaster() {
 throw "cannot construct a btVehicleRaycaster, no constructor in IDL";
}
btVehicleRaycaster.prototype = Object.create(WrapperObject.prototype);
btVehicleRaycaster.prototype.constructor = btVehicleRaycaster;
btVehicleRaycaster.prototype.__class__ = btVehicleRaycaster;
btVehicleRaycaster.__cache__ = {};
Module["btVehicleRaycaster"] = btVehicleRaycaster;
btVehicleRaycaster.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btVehicleRaycaster___destroy___0(self);
});
function btSphereShape(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btSphereShape_btSphereShape_1(arg0);
 getCache(btSphereShape)[this.ptr] = this;
}
btSphereShape.prototype = Object.create(btCollisionShape.prototype);
btSphereShape.prototype.constructor = btSphereShape;
btSphereShape.prototype.__class__ = btSphereShape;
btSphereShape.__cache__ = {};
Module["btSphereShape"] = btSphereShape;
btSphereShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btSphereShape_setLocalScaling_1(self, arg0);
});
btSphereShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btSphereShape_calculateLocalInertia_2(self, arg0, arg1);
});
btSphereShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btSphereShape___destroy___0(self);
});
function btDefaultCollisionConstructionInfo() {
 this.ptr = _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0();
 getCache(btDefaultCollisionConstructionInfo)[this.ptr] = this;
}
btDefaultCollisionConstructionInfo.prototype = Object.create(WrapperObject.prototype);
btDefaultCollisionConstructionInfo.prototype.constructor = btDefaultCollisionConstructionInfo;
btDefaultCollisionConstructionInfo.prototype.__class__ = btDefaultCollisionConstructionInfo;
btDefaultCollisionConstructionInfo.__cache__ = {};
Module["btDefaultCollisionConstructionInfo"] = btDefaultCollisionConstructionInfo;
btDefaultCollisionConstructionInfo.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0(self);
});
function btHingeConstraint(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg5 && typeof arg5 === "object") arg5 = arg5.ptr; else arg5 = ensureString(arg5);
 if (arg6 && typeof arg6 === "object") arg6 = arg6.ptr; else arg6 = ensureString(arg6);
 if (arg2 === undefined) {
  this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_2(arg0, arg1);
  getCache(btHingeConstraint)[this.ptr] = this;
  return;
 }
 if (arg3 === undefined) {
  this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_3(arg0, arg1, arg2);
  getCache(btHingeConstraint)[this.ptr] = this;
  return;
 }
 if (arg4 === undefined) {
  this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_4(arg0, arg1, arg2, arg3);
  getCache(btHingeConstraint)[this.ptr] = this;
  return;
 }
 if (arg5 === undefined) {
  this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_5(arg0, arg1, arg2, arg3, arg4);
  getCache(btHingeConstraint)[this.ptr] = this;
  return;
 }
 if (arg6 === undefined) {
  this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_6(arg0, arg1, arg2, arg3, arg4, arg5);
  getCache(btHingeConstraint)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_7(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
 getCache(btHingeConstraint)[this.ptr] = this;
}
btHingeConstraint.prototype = Object.create(btTypedConstraint.prototype);
btHingeConstraint.prototype.constructor = btHingeConstraint;
btHingeConstraint.prototype.__class__ = btHingeConstraint;
btHingeConstraint.__cache__ = {};
Module["btHingeConstraint"] = btHingeConstraint;
btHingeConstraint.prototype["setLimit"] = (function(arg0, arg1, arg2, arg3, arg4) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg4 === undefined) {
  _emscripten_bind_btHingeConstraint_setLimit_4(self, arg0, arg1, arg2, arg3);
  return;
 }
 _emscripten_bind_btHingeConstraint_setLimit_5(self, arg0, arg1, arg2, arg3, arg4);
});
btHingeConstraint.prototype["enableFeedback"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btHingeConstraint_enableFeedback_1(self, arg0);
});
btHingeConstraint.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btHingeConstraint___destroy___0(self);
});
function btCollisionShape() {
 throw "cannot construct a btCollisionShape, no constructor in IDL";
}
btCollisionShape.prototype = Object.create(WrapperObject.prototype);
btCollisionShape.prototype.constructor = btCollisionShape;
btCollisionShape.prototype.__class__ = btCollisionShape;
btCollisionShape.__cache__ = {};
Module["btCollisionShape"] = btCollisionShape;
btCollisionShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCollisionShape_setLocalScaling_1(self, arg0);
});
btCollisionShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCollisionShape_calculateLocalInertia_2(self, arg0, arg1);
});
btCollisionShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCollisionShape___destroy___0(self);
});
function btConstraintSetting() {
 this.ptr = _emscripten_bind_btConstraintSetting_btConstraintSetting_0();
 getCache(btConstraintSetting)[this.ptr] = this;
}
btConstraintSetting.prototype = Object.create(WrapperObject.prototype);
btConstraintSetting.prototype.constructor = btConstraintSetting;
btConstraintSetting.prototype.__class__ = btConstraintSetting;
btConstraintSetting.__cache__ = {};
Module["btConstraintSetting"] = btConstraintSetting;
btConstraintSetting.prototype["get_m_tau"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btConstraintSetting_get_m_tau_0(self);
});
btConstraintSetting.prototype["set_m_tau"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConstraintSetting_set_m_tau_1(self, arg0);
});
btConstraintSetting.prototype["get_m_damping"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btConstraintSetting_get_m_damping_0(self);
});
btConstraintSetting.prototype["set_m_damping"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConstraintSetting_set_m_damping_1(self, arg0);
});
btConstraintSetting.prototype["get_m_impulseClamp"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0(self);
});
btConstraintSetting.prototype["set_m_impulseClamp"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1(self, arg0);
});
btConstraintSetting.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConstraintSetting___destroy___0(self);
});
function btGhostObject() {
 this.ptr = _emscripten_bind_btGhostObject_btGhostObject_0();
 getCache(btGhostObject)[this.ptr] = this;
}
btGhostObject.prototype = Object.create(btCollisionObject.prototype);
btGhostObject.prototype.constructor = btGhostObject;
btGhostObject.prototype.__class__ = btGhostObject;
btGhostObject.__cache__ = {};
Module["btGhostObject"] = btGhostObject;
btGhostObject.prototype["getNumOverlappingObjects"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btGhostObject_getNumOverlappingObjects_0(self);
});
btGhostObject.prototype["getOverlappingObject"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btGhostObject_getOverlappingObject_1(self, arg0), btCollisionObject);
});
btGhostObject.prototype["getCollisionShape"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btGhostObject_getCollisionShape_0(self), btCollisionShape);
});
btGhostObject.prototype["setContactProcessingThreshold"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_setContactProcessingThreshold_1(self, arg0);
});
btGhostObject.prototype["setActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_setActivationState_1(self, arg0);
});
btGhostObject.prototype["forceActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_forceActivationState_1(self, arg0);
});
btGhostObject.prototype["activate"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg0 === undefined) {
  _emscripten_bind_btGhostObject_activate_0(self);
  return;
 }
 _emscripten_bind_btGhostObject_activate_1(self, arg0);
});
btGhostObject.prototype["isActive"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btGhostObject_isActive_0(self);
});
btGhostObject.prototype["isKinematicObject"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btGhostObject_isKinematicObject_0(self);
});
btGhostObject.prototype["setRestitution"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_setRestitution_1(self, arg0);
});
btGhostObject.prototype["setFriction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_setFriction_1(self, arg0);
});
btGhostObject.prototype["getWorldTransform"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btGhostObject_getWorldTransform_0(self), btTransform);
});
btGhostObject.prototype["getCollisionFlags"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btGhostObject_getCollisionFlags_0(self);
});
btGhostObject.prototype["setCollisionFlags"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_setCollisionFlags_1(self, arg0);
});
btGhostObject.prototype["setWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_setWorldTransform_1(self, arg0);
});
btGhostObject.prototype["setCollisionShape"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btGhostObject_setCollisionShape_1(self, arg0);
});
btGhostObject.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btGhostObject___destroy___0(self);
});
function LocalShapeInfo() {
 throw "cannot construct a LocalShapeInfo, no constructor in IDL";
}
LocalShapeInfo.prototype = Object.create(WrapperObject.prototype);
LocalShapeInfo.prototype.constructor = LocalShapeInfo;
LocalShapeInfo.prototype.__class__ = LocalShapeInfo;
LocalShapeInfo.__cache__ = {};
Module["LocalShapeInfo"] = LocalShapeInfo;
LocalShapeInfo.prototype["get_m_shapePart"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_LocalShapeInfo_get_m_shapePart_0(self);
});
LocalShapeInfo.prototype["set_m_shapePart"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_LocalShapeInfo_set_m_shapePart_1(self, arg0);
});
LocalShapeInfo.prototype["get_m_triangleIndex"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0(self);
});
LocalShapeInfo.prototype["set_m_triangleIndex"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1(self, arg0);
});
LocalShapeInfo.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_LocalShapeInfo___destroy___0(self);
});
function btConstraintSolver() {
 throw "cannot construct a btConstraintSolver, no constructor in IDL";
}
btConstraintSolver.prototype = Object.create(WrapperObject.prototype);
btConstraintSolver.prototype.constructor = btConstraintSolver;
btConstraintSolver.prototype.__class__ = btConstraintSolver;
btConstraintSolver.__cache__ = {};
Module["btConstraintSolver"] = btConstraintSolver;
btConstraintSolver.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btConstraintSolver___destroy___0(self);
});
function btRaycastVehicle(arg0, arg1, arg2) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 this.ptr = _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3(arg0, arg1, arg2);
 getCache(btRaycastVehicle)[this.ptr] = this;
}
btRaycastVehicle.prototype = Object.create(btActionInterface.prototype);
btRaycastVehicle.prototype.constructor = btRaycastVehicle;
btRaycastVehicle.prototype.__class__ = btRaycastVehicle;
btRaycastVehicle.__cache__ = {};
Module["btRaycastVehicle"] = btRaycastVehicle;
btRaycastVehicle.prototype["applyEngineForce"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRaycastVehicle_applyEngineForce_2(self, arg0, arg1);
});
btRaycastVehicle.prototype["setSteeringValue"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRaycastVehicle_setSteeringValue_2(self, arg0, arg1);
});
btRaycastVehicle.prototype["getWheelTransformWS"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1(self, arg0), btTransform);
});
btRaycastVehicle.prototype["updateWheelTransform"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRaycastVehicle_updateWheelTransform_2(self, arg0, arg1);
});
btRaycastVehicle.prototype["addWheel"] = (function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 if (arg5 && typeof arg5 === "object") arg5 = arg5.ptr; else arg5 = ensureString(arg5);
 if (arg6 && typeof arg6 === "object") arg6 = arg6.ptr; else arg6 = ensureString(arg6);
 return wrapPointer(_emscripten_bind_btRaycastVehicle_addWheel_7(self, arg0, arg1, arg2, arg3, arg4, arg5, arg6), btWheelInfo);
});
btRaycastVehicle.prototype["getNumWheels"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRaycastVehicle_getNumWheels_0(self);
});
btRaycastVehicle.prototype["getRigidBody"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btRaycastVehicle_getRigidBody_0(self), btRigidBody);
});
btRaycastVehicle.prototype["getWheelInfo"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelInfo_1(self, arg0), btWheelInfo);
});
btRaycastVehicle.prototype["setBrake"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRaycastVehicle_setBrake_2(self, arg0, arg1);
});
btRaycastVehicle.prototype["setCoordinateSystem"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3(self, arg0, arg1, arg2);
});
btRaycastVehicle.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btRaycastVehicle___destroy___0(self);
});
function LocalConvexResult(arg0, arg1, arg2, arg3, arg4) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 this.ptr = _emscripten_bind_LocalConvexResult_LocalConvexResult_5(arg0, arg1, arg2, arg3, arg4);
 getCache(LocalConvexResult)[this.ptr] = this;
}
LocalConvexResult.prototype = Object.create(WrapperObject.prototype);
LocalConvexResult.prototype.constructor = LocalConvexResult;
LocalConvexResult.prototype.__class__ = LocalConvexResult;
LocalConvexResult.__cache__ = {};
Module["LocalConvexResult"] = LocalConvexResult;
LocalConvexResult.prototype["get_m_hitCollisionObject"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0(self), btCollisionObject);
});
LocalConvexResult.prototype["set_m_hitCollisionObject"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1(self, arg0);
});
LocalConvexResult.prototype["get_m_localShapeInfo"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0(self), LocalShapeInfo);
});
LocalConvexResult.prototype["set_m_localShapeInfo"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1(self, arg0);
});
LocalConvexResult.prototype["get_m_hitNormalLocal"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0(self), btVector3);
});
LocalConvexResult.prototype["set_m_hitNormalLocal"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1(self, arg0);
});
LocalConvexResult.prototype["get_m_hitPointLocal"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0(self), btVector3);
});
LocalConvexResult.prototype["set_m_hitPointLocal"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1(self, arg0);
});
LocalConvexResult.prototype["get_m_hitFraction"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_LocalConvexResult_get_m_hitFraction_0(self);
});
LocalConvexResult.prototype["set_m_hitFraction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_LocalConvexResult_set_m_hitFraction_1(self, arg0);
});
LocalConvexResult.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_LocalConvexResult___destroy___0(self);
});
function btOverlappingPairCallback() {
 throw "cannot construct a btOverlappingPairCallback, no constructor in IDL";
}
btOverlappingPairCallback.prototype = Object.create(WrapperObject.prototype);
btOverlappingPairCallback.prototype.constructor = btOverlappingPairCallback;
btOverlappingPairCallback.prototype.__class__ = btOverlappingPairCallback;
btOverlappingPairCallback.__cache__ = {};
Module["btOverlappingPairCallback"] = btOverlappingPairCallback;
btOverlappingPairCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btOverlappingPairCallback___destroy___0(self);
});
function btRigidBody(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btRigidBody_btRigidBody_1(arg0);
 getCache(btRigidBody)[this.ptr] = this;
}
btRigidBody.prototype = Object.create(btCollisionObject.prototype);
btRigidBody.prototype.constructor = btRigidBody;
btRigidBody.prototype.__class__ = btRigidBody;
btRigidBody.__cache__ = {};
Module["btRigidBody"] = btRigidBody;
btRigidBody.prototype["getCenterOfMassTransform"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btRigidBody_getCenterOfMassTransform_0(self), btTransform);
});
btRigidBody.prototype["setCenterOfMassTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setCenterOfMassTransform_1(self, arg0);
});
btRigidBody.prototype["setSleepingThresholds"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRigidBody_setSleepingThresholds_2(self, arg0, arg1);
});
btRigidBody.prototype["setDamping"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRigidBody_setDamping_2(self, arg0, arg1);
});
btRigidBody.prototype["setMassProps"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRigidBody_setMassProps_2(self, arg0, arg1);
});
btRigidBody.prototype["setLinearFactor"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setLinearFactor_1(self, arg0);
});
btRigidBody.prototype["applyTorque"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_applyTorque_1(self, arg0);
});
btRigidBody.prototype["applyForce"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRigidBody_applyForce_2(self, arg0, arg1);
});
btRigidBody.prototype["applyCentralForce"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_applyCentralForce_1(self, arg0);
});
btRigidBody.prototype["applyTorqueImpulse"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_applyTorqueImpulse_1(self, arg0);
});
btRigidBody.prototype["applyImpulse"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btRigidBody_applyImpulse_2(self, arg0, arg1);
});
btRigidBody.prototype["applyCentralImpulse"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_applyCentralImpulse_1(self, arg0);
});
btRigidBody.prototype["updateInertiaTensor"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btRigidBody_updateInertiaTensor_0(self);
});
btRigidBody.prototype["getLinearVelocity"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btRigidBody_getLinearVelocity_0(self), btVector3);
});
btRigidBody.prototype["getAngularVelocity"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btRigidBody_getAngularVelocity_0(self), btVector3);
});
btRigidBody.prototype["setLinearVelocity"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setLinearVelocity_1(self, arg0);
});
btRigidBody.prototype["setAngularVelocity"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setAngularVelocity_1(self, arg0);
});
btRigidBody.prototype["getMotionState"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btRigidBody_getMotionState_0(self), btMotionState);
});
btRigidBody.prototype["setAngularFactor"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setAngularFactor_1(self, arg0);
});
btRigidBody.prototype["upcast"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 return wrapPointer(_emscripten_bind_btRigidBody_upcast_1(self, arg0), btRigidBody);
});
btRigidBody.prototype["getCollisionShape"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btRigidBody_getCollisionShape_0(self), btCollisionShape);
});
btRigidBody.prototype["setContactProcessingThreshold"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setContactProcessingThreshold_1(self, arg0);
});
btRigidBody.prototype["setActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setActivationState_1(self, arg0);
});
btRigidBody.prototype["forceActivationState"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_forceActivationState_1(self, arg0);
});
btRigidBody.prototype["activate"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg0 === undefined) {
  _emscripten_bind_btRigidBody_activate_0(self);
  return;
 }
 _emscripten_bind_btRigidBody_activate_1(self, arg0);
});
btRigidBody.prototype["isActive"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBody_isActive_0(self);
});
btRigidBody.prototype["isKinematicObject"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBody_isKinematicObject_0(self);
});
btRigidBody.prototype["setRestitution"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setRestitution_1(self, arg0);
});
btRigidBody.prototype["setFriction"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setFriction_1(self, arg0);
});
btRigidBody.prototype["getWorldTransform"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btRigidBody_getWorldTransform_0(self), btTransform);
});
btRigidBody.prototype["getCollisionFlags"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btRigidBody_getCollisionFlags_0(self);
});
btRigidBody.prototype["setCollisionFlags"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setCollisionFlags_1(self, arg0);
});
btRigidBody.prototype["setWorldTransform"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setWorldTransform_1(self, arg0);
});
btRigidBody.prototype["setCollisionShape"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btRigidBody_setCollisionShape_1(self, arg0);
});
btRigidBody.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btRigidBody___destroy___0(self);
});
function btCylinderShapeX(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1(arg0);
 getCache(btCylinderShapeX)[this.ptr] = this;
}
btCylinderShapeX.prototype = Object.create(btCylinderShape.prototype);
btCylinderShapeX.prototype.constructor = btCylinderShapeX;
btCylinderShapeX.prototype.__class__ = btCylinderShapeX;
btCylinderShapeX.__cache__ = {};
Module["btCylinderShapeX"] = btCylinderShapeX;
btCylinderShapeX.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCylinderShapeX_setLocalScaling_1(self, arg0);
});
btCylinderShapeX.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2(self, arg0, arg1);
});
btCylinderShapeX.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCylinderShapeX___destroy___0(self);
});
function btCylinderShapeZ(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1(arg0);
 getCache(btCylinderShapeZ)[this.ptr] = this;
}
btCylinderShapeZ.prototype = Object.create(btCylinderShape.prototype);
btCylinderShapeZ.prototype.constructor = btCylinderShapeZ;
btCylinderShapeZ.prototype.__class__ = btCylinderShapeZ;
btCylinderShapeZ.__cache__ = {};
Module["btCylinderShapeZ"] = btCylinderShapeZ;
btCylinderShapeZ.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCylinderShapeZ_setLocalScaling_1(self, arg0);
});
btCylinderShapeZ.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2(self, arg0, arg1);
});
btCylinderShapeZ.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCylinderShapeZ___destroy___0(self);
});
function btTransform(arg0, arg1) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg0 === undefined) {
  this.ptr = _emscripten_bind_btTransform_btTransform_0();
  getCache(btTransform)[this.ptr] = this;
  return;
 }
 if (arg1 === undefined) {
  this.ptr = _emscripten_bind_btTransform_btTransform_1(arg0);
  getCache(btTransform)[this.ptr] = this;
  return;
 }
 this.ptr = _emscripten_bind_btTransform_btTransform_2(arg0, arg1);
 getCache(btTransform)[this.ptr] = this;
}
btTransform.prototype = Object.create(WrapperObject.prototype);
btTransform.prototype.constructor = btTransform;
btTransform.prototype.__class__ = btTransform;
btTransform.__cache__ = {};
Module["btTransform"] = btTransform;
btTransform.prototype["setIdentity"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btTransform_setIdentity_0(self);
});
btTransform.prototype["setOrigin"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btTransform_setOrigin_1(self, arg0);
});
btTransform.prototype["setRotation"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btTransform_setRotation_1(self, arg0);
});
btTransform.prototype["getOrigin"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btTransform_getOrigin_0(self), btVector3);
});
btTransform.prototype["getRotation"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btTransform_getRotation_0(self), btQuaternion);
});
btTransform.prototype["getBasis"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btTransform_getBasis_0(self), btMatrix3x3);
});
btTransform.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btTransform___destroy___0(self);
});
function btCollisionWorld() {
 throw "cannot construct a btCollisionWorld, no constructor in IDL";
}
btCollisionWorld.prototype = Object.create(WrapperObject.prototype);
btCollisionWorld.prototype.constructor = btCollisionWorld;
btCollisionWorld.prototype.__class__ = btCollisionWorld;
btCollisionWorld.__cache__ = {};
Module["btCollisionWorld"] = btCollisionWorld;
btCollisionWorld.prototype["getDispatcher"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatcher_0(self), btDispatcher);
});
btCollisionWorld.prototype["rayTest"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btCollisionWorld_rayTest_3(self, arg0, arg1, arg2);
});
btCollisionWorld.prototype["getPairCache"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btCollisionWorld_getPairCache_0(self), btOverlappingPairCache);
});
btCollisionWorld.prototype["getDispatchInfo"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatchInfo_0(self), btDispatcherInfo);
});
btCollisionWorld.prototype["addCollisionObject"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg1 === undefined) {
  _emscripten_bind_btCollisionWorld_addCollisionObject_1(self, arg0);
  return;
 }
 if (arg2 === undefined) {
  _emscripten_bind_btCollisionWorld_addCollisionObject_2(self, arg0, arg1);
  return;
 }
 _emscripten_bind_btCollisionWorld_addCollisionObject_3(self, arg0, arg1, arg2);
});
btCollisionWorld.prototype["getBroadphase"] = (function() {
 var self = this.ptr;
 return wrapPointer(_emscripten_bind_btCollisionWorld_getBroadphase_0(self), btBroadphaseInterface);
});
btCollisionWorld.prototype["convexSweepTest"] = (function(arg0, arg1, arg2, arg3, arg4) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 if (arg3 && typeof arg3 === "object") arg3 = arg3.ptr; else arg3 = ensureString(arg3);
 if (arg4 && typeof arg4 === "object") arg4 = arg4.ptr; else arg4 = ensureString(arg4);
 _emscripten_bind_btCollisionWorld_convexSweepTest_5(self, arg0, arg1, arg2, arg3, arg4);
});
btCollisionWorld.prototype["contactPairTest"] = (function(arg0, arg1, arg2) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 if (arg2 && typeof arg2 === "object") arg2 = arg2.ptr; else arg2 = ensureString(arg2);
 _emscripten_bind_btCollisionWorld_contactPairTest_3(self, arg0, arg1, arg2);
});
btCollisionWorld.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCollisionWorld___destroy___0(self);
});
function btQuadWord() {
 throw "cannot construct a btQuadWord, no constructor in IDL";
}
btQuadWord.prototype = Object.create(WrapperObject.prototype);
btQuadWord.prototype.constructor = btQuadWord;
btQuadWord.prototype.__class__ = btQuadWord;
btQuadWord.__cache__ = {};
Module["btQuadWord"] = btQuadWord;
btQuadWord.prototype["x"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuadWord_x_0(self);
});
btQuadWord.prototype["y"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuadWord_y_0(self);
});
btQuadWord.prototype["z"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuadWord_z_0(self);
});
btQuadWord.prototype["w"] = (function() {
 var self = this.ptr;
 return _emscripten_bind_btQuadWord_w_0(self);
});
btQuadWord.prototype["setX"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuadWord_setX_1(self, arg0);
});
btQuadWord.prototype["setY"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuadWord_setY_1(self, arg0);
});
btQuadWord.prototype["setZ"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuadWord_setZ_1(self, arg0);
});
btQuadWord.prototype["setW"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btQuadWord_setW_1(self, arg0);
});
btQuadWord.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btQuadWord___destroy___0(self);
});
function btCylinderShape(arg0) {
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 this.ptr = _emscripten_bind_btCylinderShape_btCylinderShape_1(arg0);
 getCache(btCylinderShape)[this.ptr] = this;
}
btCylinderShape.prototype = Object.create(btCollisionShape.prototype);
btCylinderShape.prototype.constructor = btCylinderShape;
btCylinderShape.prototype.__class__ = btCylinderShape;
btCylinderShape.__cache__ = {};
Module["btCylinderShape"] = btCylinderShape;
btCylinderShape.prototype["setLocalScaling"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btCylinderShape_setLocalScaling_1(self, arg0);
});
btCylinderShape.prototype["calculateLocalInertia"] = (function(arg0, arg1) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 if (arg1 && typeof arg1 === "object") arg1 = arg1.ptr; else arg1 = ensureString(arg1);
 _emscripten_bind_btCylinderShape_calculateLocalInertia_2(self, arg0, arg1);
});
btCylinderShape.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btCylinderShape___destroy___0(self);
});
function btGhostPairCallback() {
 this.ptr = _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0();
 getCache(btGhostPairCallback)[this.ptr] = this;
}
btGhostPairCallback.prototype = Object.create(WrapperObject.prototype);
btGhostPairCallback.prototype.constructor = btGhostPairCallback;
btGhostPairCallback.prototype.__class__ = btGhostPairCallback;
btGhostPairCallback.__cache__ = {};
Module["btGhostPairCallback"] = btGhostPairCallback;
btGhostPairCallback.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btGhostPairCallback___destroy___0(self);
});
function btTypedConstraint() {
 throw "cannot construct a btTypedConstraint, no constructor in IDL";
}
btTypedConstraint.prototype = Object.create(WrapperObject.prototype);
btTypedConstraint.prototype.constructor = btTypedConstraint;
btTypedConstraint.prototype.__class__ = btTypedConstraint;
btTypedConstraint.__cache__ = {};
Module["btTypedConstraint"] = btTypedConstraint;
btTypedConstraint.prototype["enableFeedback"] = (function(arg0) {
 var self = this.ptr;
 if (arg0 && typeof arg0 === "object") arg0 = arg0.ptr; else arg0 = ensureString(arg0);
 _emscripten_bind_btTypedConstraint_enableFeedback_1(self, arg0);
});
btTypedConstraint.prototype["__destroy__"] = (function() {
 var self = this.ptr;
 _emscripten_bind_btTypedConstraint___destroy___0(self);
});
this["Ammo"] = Module;






  return this;
}).call({});
